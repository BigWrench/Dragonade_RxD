; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\MemoryManager\dllmain_debug.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?TLSIndex@@3KA					; TLSIndex
EXTRN	__imp__TlsFree@4:PROC
EXTRN	__imp__TlsAlloc@0:PROC
EXTRN	__imp__TlsSetValue@8:PROC
EXTRN	__imp__TlsGetValue@4:PROC
?TLSIndex@@3KA DD 0ffffffffH				; TLSIndex
_DATA	ENDS
PUBLIC	??$UNUSED_VARIABLE@PAX@@YAXABQAX@Z		; UNUSED_VARIABLE<void *>
PUBLIC	??$UNUSED_VARIABLE@PAUHINSTANCE__@@@@YAXABQAUHINSTANCE__@@@Z ; UNUSED_VARIABLE<HINSTANCE__ *>
PUBLIC	_DllMain@12
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___n$dead$ = 8						; size = 4
___f$dead$ = 12						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
; ___t$ = ecx
; ___s$dead$ = edx
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, 10					; 0000000aH
	npad	7
$LL2@vector:
	push	1
	mov	ecx, esi
	call	??0FastFixedAllocator@@QAE@I@Z		; FastFixedAllocator::FastFixedAllocator
	add	esi, 32					; 00000020H
	dec	edi
	jns	SHORT $LL2@vector
	pop	edi
	pop	esi
	ret	8
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___n$ = 8						; size = 4
___f$ = 12						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
; ___t$ = ecx
; ___s$ = edx
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___n$[esp+8]
	mov	ebx, edx
	mov	esi, ebx
	imul	esi, edi
	add	esi, ecx
	dec	edi
	js	SHORT $LN1@vector
	push	ebp
	mov	ebp, DWORD PTR ___f$[esp+12]
$LL2@vector:
	sub	esi, ebx
	mov	ecx, esi
	call	ebp
	dec	edi
	jns	SHORT $LL2@vector
	pop	ebp
$LN1@vector:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File x:\github\renegade\dragonade_rxd\memorymanager\dllmain_debug.cpp
; File x:\github\renegade\dragonade_rxd\memorymanager\fastallocator.cpp
; File x:\github\renegade\dragonade_rxd\memorymanager\dllmain_debug.cpp
; File x:\github\renegade\dragonade_rxd\memorymanager\fastallocator.cpp
; File x:\github\renegade\dragonade_rxd\memorymanager\dllmain_debug.cpp
; File x:\github\renegade\dragonade_rxd\memorymanager\fastallocator.cpp
; File x:\github\renegade\dragonade_rxd\memorymanager\dllmain_debug.cpp
;	COMDAT _DllMain@12
_TEXT	SEGMENT
_instance$ = 8						; size = 4
_reason$ = 12						; size = 4
_reserved$ = 16						; size = 4
_DllMain@12 PROC					; COMDAT

; 20   : 	UNUSED_VARIABLE(instance);
; 21   : 	UNUSED_VARIABLE(reserved);
; 22   : 	switch (reason) 

	mov	eax, DWORD PTR _reason$[esp-4]
	push	esi
	push	edi
	cmp	eax, 3
	ja	$LN9@DllMain
	jmp	DWORD PTR $LN26@DllMain[eax*4]
$LN8@DllMain:

; 23   : 	{ 
; 24   : 	case DLL_PROCESS_ATTACH: 
; 25   : 		// Allocate a TLS index.
; 26   : 		TLSIndex = TlsAlloc();

	call	DWORD PTR __imp__TlsAlloc@0
	mov	esi, eax
	mov	DWORD PTR ?TLSIndex@@3KA, esi		; TLSIndex

; 27   : 		if (TLSIndex == TLS_OUT_OF_INDEXES)

	cmp	esi, -1
	jne	SHORT $LN7@DllMain

; 28   : 		{
; 29   : 			// Uhoh.
; 30   : 			return FALSE;

	pop	edi
	xor	eax, eax
	pop	esi

; 68   : };

	ret	12					; 0000000cH
$LN24@DllMain:

; 28   : 		{
; 29   : 			// Uhoh.
; 30   : 			return FALSE;

	mov	esi, DWORD PTR ?TLSIndex@@3KA		; TLSIndex
$LN7@DllMain:
; File x:\github\renegade\dragonade_rxd\memorymanager\fastallocator.cpp

; 28   : 	void* memory = malloc(size);

	push	1288					; 00000508H
	call	DWORD PTR __imp__malloc
	mov	edi, eax
	add	esp, 4

; 29   : 	// If you hit this assert, you've run out of memory. This is bad.
; 30   : 	assert(memory);

	test	edi, edi
	jne	SHORT $LN19@DllMain
	push	30					; 0000001eH
	push	OFFSET ??_C@_1CE@CODLPNHK@?$AAF?$AAa?$AAs?$AAt?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AAp?$AAp?$AA?$AA@
	push	OFFSET ??_C@_1O@NIJNBMFJ@?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	DWORD PTR __imp___wassert
	mov	esi, DWORD PTR ?TLSIndex@@3KA		; TLSIndex
	add	esp, 12					; 0000000cH
$LN19@DllMain:
; File x:\github\renegade\dragonade_rxd\memorymanager\dllmain_debug.cpp

; 37   : 			memset(tls_data, 0x00, sizeof(MemoryTrackerThreadLocalInformation));

	push	1288					; 00000508H
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 38   : 			if (tls_data != NULL)

	test	edi, edi
	je	SHORT $LN9@DllMain

; 39   : 			{
; 40   : 				TlsSetValue(TLSIndex, tls_data);

	push	edi
	push	esi
	call	DWORD PTR __imp__TlsSetValue@8
	pop	edi

; 67   : 	return TRUE; 

	mov	eax, 1
	pop	esi

; 68   : };

	ret	12					; 0000000cH
$LN4@DllMain:

; 41   : 			};
; 42   : 		}
; 43   : 		break; 
; 44   : 	case DLL_THREAD_DETACH: 
; 45   : 		// Release the allocated memory for this thread.
; 46   : 		{
; 47   : 			void* tls_data = TlsGetValue(TLSIndex);

	push	DWORD PTR ?TLSIndex@@3KA		; TLSIndex
	call	DWORD PTR __imp__TlsGetValue@4

; 48   : 			if (tls_data != NULL)

	test	eax, eax
	je	SHORT $LN9@DllMain
; File x:\github\renegade\dragonade_rxd\memorymanager\fastallocator.cpp

; 36   : 	free(memory);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
; File x:\github\renegade\dragonade_rxd\memorymanager\dllmain_debug.cpp

; 67   : 	return TRUE; 

	mov	eax, 1
	pop	edi
	pop	esi

; 68   : };

	ret	12					; 0000000cH
$LN2@DllMain:

; 49   : 			{
; 50   : 				SystemFree(tls_data);
; 51   : 			};
; 52   : 		}
; 53   : 		break; 
; 54   : 	case DLL_PROCESS_DETACH: 
; 55   : 		// Release the allocated memory for this thread.
; 56   : 		void* tls_data = TlsGetValue(TLSIndex);

	push	DWORD PTR ?TLSIndex@@3KA		; TLSIndex
	call	DWORD PTR __imp__TlsGetValue@4

; 57   : 		if (tls_data != NULL)

	test	eax, eax
	je	SHORT $LN22@DllMain
; File x:\github\renegade\dragonade_rxd\memorymanager\fastallocator.cpp

; 36   : 	free(memory);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN22@DllMain:
; File x:\github\renegade\dragonade_rxd\memorymanager\dllmain_debug.cpp

; 63   : 		TlsFree(TLSIndex); 

	push	DWORD PTR ?TLSIndex@@3KA		; TLSIndex
	call	DWORD PTR __imp__TlsFree@4
$LN9@DllMain:

; 67   : 	return TRUE; 

	pop	edi
	mov	eax, 1
	pop	esi

; 68   : };

	ret	12					; 0000000cH
	npad	1
$LN26@DllMain:
	DD	$LN2@DllMain
	DD	$LN8@DllMain
	DD	$LN24@DllMain
	DD	$LN4@DllMain
_DllMain@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File x:\github\renegade\dragonade_rxd\memorymanager\platform.h
;	COMDAT ??$UNUSED_VARIABLE@PAUHINSTANCE__@@@@YAXABQAUHINSTANCE__@@@Z
_TEXT	SEGMENT
??$UNUSED_VARIABLE@PAUHINSTANCE__@@@@YAXABQAUHINSTANCE__@@@Z PROC ; UNUSED_VARIABLE<HINSTANCE__ *>, COMDAT
; ___formal$dead$ = ecx

; 50   : template <typename T> inline void UNUSED_VARIABLE(const T&) {};

	ret	0
??$UNUSED_VARIABLE@PAUHINSTANCE__@@@@YAXABQAUHINSTANCE__@@@Z ENDP ; UNUSED_VARIABLE<HINSTANCE__ *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File x:\github\renegade\dragonade_rxd\memorymanager\platform.h
;	COMDAT ??$UNUSED_VARIABLE@PAX@@YAXABQAX@Z
_TEXT	SEGMENT
??$UNUSED_VARIABLE@PAX@@YAXABQAX@Z PROC			; UNUSED_VARIABLE<void *>, COMDAT
; ___formal$dead$ = ecx

; 50   : template <typename T> inline void UNUSED_VARIABLE(const T&) {};

	ret	0
??$UNUSED_VARIABLE@PAX@@YAXABQAX@Z ENDP			; UNUSED_VARIABLE<void *>
_TEXT	ENDS
END
