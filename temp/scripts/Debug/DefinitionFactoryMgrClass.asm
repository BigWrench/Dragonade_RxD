; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\DefinitionFactoryMgrClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	?Register_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ; DefinitionFactoryMgrClass::Register_Factory
PUBLIC	?Unregister_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ; DefinitionFactoryMgrClass::Unregister_Factory
PUBLIC	?Link_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ; DefinitionFactoryMgrClass::Link_Factory
PUBLIC	?Unlink_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ; DefinitionFactoryMgrClass::Unlink_Factory
PUBLIC	?Find_Factory@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@I@Z ; DefinitionFactoryMgrClass::Find_Factory
PUBLIC	?Get_First@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@I@Z ; DefinitionFactoryMgrClass::Get_First
PUBLIC	?Get_Next@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@PAV2@I@Z ; DefinitionFactoryMgrClass::Get_Next
PUBLIC	??0PostLoadableClass@@QAE@XZ			; PostLoadableClass::PostLoadableClass
PUBLIC	??1PostLoadableClass@@UAE@XZ			; PostLoadableClass::~PostLoadableClass
PUBLIC	?On_Post_Load@PostLoadableClass@@UAEXXZ		; PostLoadableClass::On_Post_Load
PUBLIC	?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ; PostLoadableClass::Is_Post_Load_Registered
PUBLIC	?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ; PostLoadableClass::Set_Post_Load_Registered
PUBLIC	??0PostLoadableClass@@QAE@ABV0@@Z		; PostLoadableClass::PostLoadableClass
PUBLIC	??4PostLoadableClass@@QAEAAV0@ABV0@@Z		; PostLoadableClass::operator=
PUBLIC	??_GPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`scalar deleting destructor'
PUBLIC	??_EPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`vector deleting destructor'
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	??$ResolveGameReference@PAVDefinitionFactoryClass@@@@YAAAPAVDefinitionFactoryClass@@HHH@Z ; ResolveGameReference<DefinitionFactoryClass *>
PUBLIC	?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A ; DefinitionFactoryMgrClass::_FactoryListHead
PUBLIC	??_7PostLoadableClass@@6B@			; PostLoadableClass::`vftable'
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_R4PostLoadableClass@@6B@			; PostLoadableClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPostLoadableClass@@@8			; PostLoadableClass `RTTI Type Descriptor'
PUBLIC	??_R3PostLoadableClass@@8			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PostLoadableClass@@8			; PostLoadableClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PostLoadableClass@@8		; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?InitEngine@@YAXXZ:PROC				; InitEngine
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	?Exe@@3HA:DWORD					; Exe
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
_BSS	SEGMENT
?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A DD 01H DUP (?) ; DefinitionFactoryMgrClass::_FactoryListHead
_BSS	ENDS
CRT$XCL	SEGMENT
?_FactoryListHead$initializer$@DefinitionFactoryMgrClass@@2P6AXXZA DD FLAT:??__E?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A@@YAXXZ ; DefinitionFactoryMgrClass::_FactoryListHead$initializer$
CRT$XCL	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PostLoadableClass@@8 DD FLAT:??_R0?AVPostLoadableClass@@@8 ; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PostLoadableClass@@8
rdata$r	SEGMENT
??_R2PostLoadableClass@@8 DD FLAT:??_R1A@?0A@EA@PostLoadableClass@@8 ; PostLoadableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PostLoadableClass@@8
rdata$r	SEGMENT
??_R3PostLoadableClass@@8 DD 00H			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPostLoadableClass@@@8
_DATA	SEGMENT
??_R0?AVPostLoadableClass@@@8 DD FLAT:??_7type_info@@6B@ ; PostLoadableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPostLoadableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PostLoadableClass@@6B@
rdata$r	SEGMENT
??_R4PostLoadableClass@@6B@ DD 00H			; PostLoadableClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPostLoadableClass@@@8
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7PostLoadableClass@@6B@
CONST	SEGMENT
??_7PostLoadableClass@@6B@ DD FLAT:??_R4PostLoadableClass@@6B@ ; PostLoadableClass::`vftable'
	DD	FLAT:??_EPostLoadableClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\definitionfactorymgrclass.cpp
;	COMDAT ??__E?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A@@YAXXZ
text$yc	SEGMENT
??__E?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A@@YAXXZ PROC ; `dynamic initializer for 'DefinitionFactoryMgrClass::_FactoryListHead'', COMDAT

; 21   : REF_DEF3(DefinitionFactoryClass *, DefinitionFactoryMgrClass::_FactoryListHead, 0x00830450, 0x0082F638, 0x008B5DF4);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	9133556					; 008b5df4H
	push	8582712					; 0082f638H
	push	8586320					; 00830450H
	call	??$ResolveGameReference@PAVDefinitionFactoryClass@@@@YAAAPAVDefinitionFactoryClass@@HHH@Z ; ResolveGameReference<DefinitionFactoryClass *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A, eax ; DefinitionFactoryMgrClass::_FactoryListHead
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A@@YAXXZ ENDP ; `dynamic initializer for 'DefinitionFactoryMgrClass::_FactoryListHead''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@PAVDefinitionFactoryClass@@@@YAAAPAVDefinitionFactoryClass@@HHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@PAVDefinitionFactoryClass@@@@YAAAPAVDefinitionFactoryClass@@HHH@Z PROC ; ResolveGameReference<DefinitionFactoryClass *>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@PAVDefinitionFactoryClass@@@@YAAAPAVDefinitionFactoryClass@@HHH@Z ENDP ; ResolveGameReference<DefinitionFactoryClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1PostLoadableClass@@UAE@XZ	; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4PostLoadableClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z PROC		; PostLoadableClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z ENDP		; PostLoadableClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0PostLoadableClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0PostLoadableClass@@QAE@ABV0@@Z PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0PostLoadableClass@@QAE@ABV0@@Z ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_onoff$ = 8						; size = 1
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z PROC ; PostLoadableClass::Set_Post_Load_Registered, COMDAT
; _this$ = ecx

; 22   : 	void									Set_Post_Load_Registered(bool onoff)	{ IsPostLoadRegistered = onoff; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _onoff$[ebp]
	mov	BYTE PTR [eax+4], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ENDP ; PostLoadableClass::Set_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ PROC ; PostLoadableClass::Is_Post_Load_Registered, COMDAT
; _this$ = ecx

; 21   : 	bool									Is_Post_Load_Registered(void) const				{ return IsPostLoadRegistered; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ENDP ; PostLoadableClass::Is_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?On_Post_Load@PostLoadableClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?On_Post_Load@PostLoadableClass@@UAEXXZ PROC		; PostLoadableClass::On_Post_Load, COMDAT
; _this$ = ecx

; 20   : 	virtual void						On_Post_Load (void)							{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?On_Post_Load@PostLoadableClass@@UAEXXZ ENDP		; PostLoadableClass::On_Post_Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??1PostLoadableClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PostLoadableClass@@UAE@XZ PROC			; PostLoadableClass::~PostLoadableClass, COMDAT
; _this$ = ecx

; 19   : 	virtual ~PostLoadableClass(void)													{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1PostLoadableClass@@UAE@XZ ENDP			; PostLoadableClass::~PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??0PostLoadableClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PostLoadableClass@@QAE@XZ PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx

; 18   : 	PostLoadableClass(void) : IsPostLoadRegistered(false)						{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PostLoadableClass@@QAE@XZ ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\definitionfactorymgrclass.cpp
;	COMDAT ?Get_Next@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@PAV2@I@Z
_TEXT	SEGMENT
_clsid2$1 = -12						; size = 4
_clsid$2 = -8						; size = 4
_i$3 = -4						; size = 4
_factory$ = 8						; size = 4
_id$ = 12						; size = 4
?Get_Next@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@PAV2@I@Z PROC ; DefinitionFactoryMgrClass::Get_Next, COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 94   : 	for (DefinitionFactoryClass *i = factory->m_NextFactory;i;i = i->m_NextFactory)

	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$3[ebp], ecx
	jmp	SHORT $LN5@Get_Next
$LN4@Get_Next:
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$3[ebp], ecx
$LN5@Get_Next:
	cmp	DWORD PTR _i$3[ebp], 0
	je	SHORT $LN3@Get_Next

; 95   : 	{
; 96   : 		uint32 clsid = i->Get_Class_ID();

	mov	eax, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _clsid$2[ebp], eax

; 97   : 		uint32 clsid2 = clsid - 0x1000;

	mov	eax, DWORD PTR _clsid$2[ebp]
	sub	eax, 4096				; 00001000H
	mov	DWORD PTR _clsid2$1[ebp], eax

; 98   : 		if (clsid - 0x1000 < 0)

	mov	eax, DWORD PTR _clsid$2[ebp]
	sub	eax, 4096				; 00001000H
	jmp	SHORT $LN2@Get_Next

; 99   : 		{
; 100  : 			clsid2 = clsid - 1;

	mov	eax, DWORD PTR _clsid$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _clsid2$1[ebp], eax
$LN2@Get_Next:

; 101  : 		}
; 102  : 		if ((clsid2 & 0xFFFFF000) + 0x1000 == id)

	mov	eax, DWORD PTR _clsid2$1[ebp]
	and	eax, -4096				; fffff000H
	add	eax, 4096				; 00001000H
	cmp	eax, DWORD PTR _id$[ebp]
	jne	SHORT $LN1@Get_Next

; 103  : 		{
; 104  : 			return i;

	mov	eax, DWORD PTR _i$3[ebp]
	jmp	SHORT $LN6@Get_Next
$LN1@Get_Next:

; 105  : 		}
; 106  : 	}

	jmp	SHORT $LN4@Get_Next
$LN3@Get_Next:

; 107  : 	return 0;

	xor	eax, eax
$LN6@Get_Next:

; 108  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Next@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@PAV2@I@Z ENDP ; DefinitionFactoryMgrClass::Get_Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\definitionfactorymgrclass.cpp
;	COMDAT ?Get_First@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@I@Z
_TEXT	SEGMENT
_clsid2$1 = -12						; size = 4
_clsid$2 = -8						; size = 4
_i$3 = -4						; size = 4
_id$ = 8						; size = 4
?Get_First@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@I@Z PROC ; DefinitionFactoryMgrClass::Get_First, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 76   : 	for (DefinitionFactoryClass *i = _FactoryListHead;i;i = i->m_NextFactory)

	mov	eax, DWORD PTR ?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A ; DefinitionFactoryMgrClass::_FactoryListHead
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$3[ebp], ecx
	jmp	SHORT $LN5@Get_First
$LN4@Get_First:
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$3[ebp], ecx
$LN5@Get_First:
	cmp	DWORD PTR _i$3[ebp], 0
	je	SHORT $LN3@Get_First

; 77   : 	{
; 78   : 		uint32 clsid = i->Get_Class_ID();

	mov	eax, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _clsid$2[ebp], eax

; 79   : 		uint32 clsid2 = clsid - 0x1000;

	mov	eax, DWORD PTR _clsid$2[ebp]
	sub	eax, 4096				; 00001000H
	mov	DWORD PTR _clsid2$1[ebp], eax

; 80   : 		if (clsid - 0x1000 < 0)

	mov	eax, DWORD PTR _clsid$2[ebp]
	sub	eax, 4096				; 00001000H
	jmp	SHORT $LN2@Get_First

; 81   : 		{
; 82   : 			clsid2 = clsid - 1;

	mov	eax, DWORD PTR _clsid$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _clsid2$1[ebp], eax
$LN2@Get_First:

; 83   : 		}
; 84   : 		if ((clsid2 & 0xFFFFF000) + 0x1000 == id)

	mov	eax, DWORD PTR _clsid2$1[ebp]
	and	eax, -4096				; fffff000H
	add	eax, 4096				; 00001000H
	cmp	eax, DWORD PTR _id$[ebp]
	jne	SHORT $LN1@Get_First

; 85   : 		{
; 86   : 			return i;

	mov	eax, DWORD PTR _i$3[ebp]
	jmp	SHORT $LN6@Get_First
$LN1@Get_First:

; 87   : 		}
; 88   : 	}

	jmp	SHORT $LN4@Get_First
$LN3@Get_First:

; 89   : 	return 0;

	xor	eax, eax
$LN6@Get_First:

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_First@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@I@Z ENDP ; DefinitionFactoryMgrClass::Get_First
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\definitionfactorymgrclass.cpp
;	COMDAT ?Find_Factory@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@I@Z
_TEXT	SEGMENT
_fac$1 = -4						; size = 4
_id$ = 8						; size = 4
?Find_Factory@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@I@Z PROC ; DefinitionFactoryMgrClass::Find_Factory, COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 64   : 	for (DefinitionFactoryClass *fac = _FactoryListHead;fac;fac = fac->m_NextFactory)

	mov	eax, DWORD PTR ?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A ; DefinitionFactoryMgrClass::_FactoryListHead
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fac$1[ebp], ecx
	jmp	SHORT $LN4@Find_Facto
$LN3@Find_Facto:
	mov	eax, DWORD PTR _fac$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _fac$1[ebp], ecx
$LN4@Find_Facto:
	cmp	DWORD PTR _fac$1[ebp], 0
	je	SHORT $LN2@Find_Facto

; 65   : 	{
; 66   : 		if (fac->Get_Class_ID() == id)

	mov	eax, DWORD PTR _fac$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _fac$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	eax, DWORD PTR _id$[ebp]
	jne	SHORT $LN1@Find_Facto

; 67   : 		{
; 68   : 			return fac;

	mov	eax, DWORD PTR _fac$1[ebp]
	jmp	SHORT $LN5@Find_Facto
$LN1@Find_Facto:

; 69   : 		}
; 70   : 	}

	jmp	SHORT $LN3@Find_Facto
$LN2@Find_Facto:

; 71   : 	return 0;

	xor	eax, eax
$LN5@Find_Facto:

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Find_Factory@DefinitionFactoryMgrClass@@SAPAVDefinitionFactoryClass@@I@Z ENDP ; DefinitionFactoryMgrClass::Find_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\definitionfactorymgrclass.cpp
;	COMDAT ?Unlink_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z
_TEXT	SEGMENT
_factory$ = 8						; size = 4
?Unlink_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z PROC ; DefinitionFactoryMgrClass::Unlink_Factory, COMDAT

; 45   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 46   : 	if (factory->m_PrevFactory)

	mov	eax, DWORD PTR _factory$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Unlink_Fac

; 47   : 	{
; 48   : 		factory->m_PrevFactory->m_NextFactory = factory->m_NextFactory;

	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 49   : 	}
; 50   : 	else

	jmp	SHORT $LN2@Unlink_Fac
$LN3@Unlink_Fac:

; 51   : 	{
; 52   : 		_FactoryListHead = factory->m_NextFactory;

	mov	eax, DWORD PTR ?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A ; DefinitionFactoryMgrClass::_FactoryListHead
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN2@Unlink_Fac:

; 53   : 	}
; 54   : 	if (factory->m_NextFactory)

	mov	eax, DWORD PTR _factory$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Unlink_Fac

; 55   : 	{
; 56   : 		factory->m_NextFactory->m_PrevFactory = factory->m_PrevFactory;

	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
$LN1@Unlink_Fac:

; 57   : 	}
; 58   : 	factory->m_NextFactory = 0;

	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+4], 0

; 59   : 	factory->m_PrevFactory = 0;

	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+8], 0

; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlink_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ENDP ; DefinitionFactoryMgrClass::Unlink_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\definitionfactorymgrclass.cpp
;	COMDAT ?Link_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z
_TEXT	SEGMENT
_fac$ = -4						; size = 4
_factory$ = 8						; size = 4
?Link_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z PROC ; DefinitionFactoryMgrClass::Link_Factory, COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 35   : 	DefinitionFactoryClass *fac = _FactoryListHead;

	mov	eax, DWORD PTR ?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A ; DefinitionFactoryMgrClass::_FactoryListHead
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fac$[ebp], ecx

; 36   : 	factory->m_NextFactory = _FactoryListHead;

	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR ?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A ; DefinitionFactoryMgrClass::_FactoryListHead
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 37   : 	if (fac)

	cmp	DWORD PTR _fac$[ebp], 0
	je	SHORT $LN1@Link_Facto

; 38   : 	{
; 39   : 		fac->m_PrevFactory = factory;

	mov	eax, DWORD PTR _fac$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Link_Facto:

; 40   : 	}
; 41   : 	_FactoryListHead = factory;

	mov	eax, DWORD PTR ?_FactoryListHead@DefinitionFactoryMgrClass@@2AAPAVDefinitionFactoryClass@@A ; DefinitionFactoryMgrClass::_FactoryListHead
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax], ecx

; 42   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Link_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ENDP ; DefinitionFactoryMgrClass::Link_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\definitionfactorymgrclass.cpp
;	COMDAT ?Unregister_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z
_TEXT	SEGMENT
_factory$ = 8						; size = 4
?Unregister_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z PROC ; DefinitionFactoryMgrClass::Unregister_Factory, COMDAT

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 30   : 	Unlink_Factory(factory);

	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	?Unlink_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ; DefinitionFactoryMgrClass::Unlink_Factory
	add	esp, 4

; 31   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Unregister_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ENDP ; DefinitionFactoryMgrClass::Unregister_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\definitionfactorymgrclass.cpp
;	COMDAT ?Register_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z
_TEXT	SEGMENT
_factory$ = 8						; size = 4
?Register_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z PROC ; DefinitionFactoryMgrClass::Register_Factory, COMDAT

; 24   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 25   : 	Link_Factory(factory);

	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	?Link_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ; DefinitionFactoryMgrClass::Link_Factory
	add	esp, 4

; 26   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Register_Factory@DefinitionFactoryMgrClass@@SAXPAVDefinitionFactoryClass@@@Z ENDP ; DefinitionFactoryMgrClass::Register_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
END
