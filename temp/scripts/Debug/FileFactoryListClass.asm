; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\FileFactoryListClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	??_U@YAPAXIPAX@Z				; operator new[]
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	??0StringClass@@QAE@H_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@PBD_N@Z			; StringClass::StringClass
PUBLIC	??1StringClass@@QAE@XZ				; StringClass::~StringClass
PUBLIC	??8StringClass@@QBE_NPBD@Z			; StringClass::operator==
PUBLIC	??9StringClass@@QBE_NPBD@Z			; StringClass::operator!=
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	??4StringClass@@QAEABV0@ABV0@@Z			; StringClass::operator=
PUBLIC	??BStringClass@@QBEPBDXZ			; StringClass::operator char const *
PUBLIC	?Compare@StringClass@@QBEHPBD@Z			; StringClass::Compare
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??_FStringClass@@QAEXXZ				; StringClass::`default constructor closure'
PUBLIC	??_EStringClass@@QAEPAXI@Z			; StringClass::`vector deleting destructor'
PUBLIC	??4ChunkLoadClass@@QAEAAV0@ABV0@@Z		; ChunkLoadClass::operator=
PUBLIC	?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ	; ChunkSaveClass::Set_Contains_Chunks
PUBLIC	??4ChunkSaveClass@@QAEAAV0@ABV0@@Z		; ChunkSaveClass::operator=
PUBLIC	??1FileFactoryClass@@UAE@XZ			; FileFactoryClass::~FileFactoryClass
PUBLIC	??0FileFactoryClass@@QAE@XZ			; FileFactoryClass::FileFactoryClass
PUBLIC	??_GFileFactoryClass@@UAEPAXI@Z			; FileFactoryClass::`scalar deleting destructor'
PUBLIC	?Is_Present@INIClass@@QBE_NPBD0@Z		; INIClass::Is_Present
PUBLIC	?Section_Present@INIClass@@QBE_NPBD@Z		; INIClass::Section_Present
PUBLIC	?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ; INIClass::Get_Section_List
PUBLIC	?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ; INIClass::Get_Section_Index
PUBLIC	?Get_File_Name@INIClass@@QAEPBDXZ		; INIClass::Get_File_Name
PUBLIC	??0INIClass@@QAE@ABV0@@Z			; INIClass::INIClass
PUBLIC	??4INIClass@@QAEAAV0@ABV0@@Z			; INIClass::operator=
PUBLIC	??_GINIClass@@UAEPAXI@Z				; INIClass::`scalar deleting destructor'
PUBLIC	??_EINIClass@@UAEPAXI@Z				; INIClass::`vector deleting destructor'
PUBLIC	??Cfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator->
PUBLIC	??Bfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator FileClass *
PUBLIC	??Dfile_auto_ptr@@QAEAAVFileClass@@XZ		; file_auto_ptr::operator*
PUBLIC	?get@file_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::get
PUBLIC	??4file_auto_ptr@@QAEAAV0@ABV0@@Z		; file_auto_ptr::operator=
PUBLIC	??0?$SimpleVecClass@PAVFileFactoryClass@@@@QAE@H@Z ; SimpleVecClass<FileFactoryClass *>::SimpleVecClass<FileFactoryClass *>
PUBLIC	??1?$SimpleVecClass@PAVFileFactoryClass@@@@UAE@XZ ; SimpleVecClass<FileFactoryClass *>::~SimpleVecClass<FileFactoryClass *>
PUBLIC	?Resize@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z ; SimpleVecClass<FileFactoryClass *>::Resize
PUBLIC	?Uninitialised_Grow@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z ; SimpleVecClass<FileFactoryClass *>::Uninitialised_Grow
PUBLIC	??_G?$SimpleVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z ; SimpleVecClass<FileFactoryClass *>::`scalar deleting destructor'
PUBLIC	?Grow@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NH@Z ; SimpleDynVecClass<FileFactoryClass *>::Grow
PUBLIC	?Shrink@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NXZ ; SimpleDynVecClass<FileFactoryClass *>::Shrink
PUBLIC	??1?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE@XZ ; SimpleDynVecClass<FileFactoryClass *>::~SimpleDynVecClass<FileFactoryClass *>
PUBLIC	??0?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE@H@Z ; SimpleDynVecClass<FileFactoryClass *>::SimpleDynVecClass<FileFactoryClass *>
PUBLIC	?Count@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QBEHXZ ; SimpleDynVecClass<FileFactoryClass *>::Count
PUBLIC	??A?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAEAAPAVFileFactoryClass@@H@Z ; SimpleDynVecClass<FileFactoryClass *>::operator[]
PUBLIC	?Resize@?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE_NH@Z ; SimpleDynVecClass<FileFactoryClass *>::Resize
PUBLIC	?Add@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@H@Z ; SimpleDynVecClass<FileFactoryClass *>::Add
PUBLIC	?Add_Head@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@@Z ; SimpleDynVecClass<FileFactoryClass *>::Add_Head
PUBLIC	?Insert@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NHABQAVFileFactoryClass@@@Z ; SimpleDynVecClass<FileFactoryClass *>::Insert
PUBLIC	?Delete@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NH_N@Z ; SimpleDynVecClass<FileFactoryClass *>::Delete
PUBLIC	??_G?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z ; SimpleDynVecClass<FileFactoryClass *>::`scalar deleting destructor'
PUBLIC	??0?$VectorClass@VStringClass@@@@QAE@HPBVStringClass@@@Z ; VectorClass<StringClass>::VectorClass<StringClass>
PUBLIC	??1?$VectorClass@VStringClass@@@@UAE@XZ		; VectorClass<StringClass>::~VectorClass<StringClass>
PUBLIC	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
PUBLIC	??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
PUBLIC	??8?$VectorClass@VStringClass@@@@UBE_NABV0@@Z	; VectorClass<StringClass>::operator==
PUBLIC	?Resize@?$VectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z ; VectorClass<StringClass>::Resize
PUBLIC	?Clear@?$VectorClass@VStringClass@@@@UAEXXZ	; VectorClass<StringClass>::Clear
PUBLIC	?Length@?$VectorClass@VStringClass@@@@QBEHXZ	; VectorClass<StringClass>::Length
PUBLIC	?ID@?$VectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z ; VectorClass<StringClass>::ID
PUBLIC	?ID@?$VectorClass@VStringClass@@@@UAEHABVStringClass@@@Z ; VectorClass<StringClass>::ID
PUBLIC	??_G?$VectorClass@VStringClass@@@@UAEPAXI@Z	; VectorClass<StringClass>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@VStringClass@@@@QAE@IPBVStringClass@@@Z ; DynamicVectorClass<StringClass>::DynamicVectorClass<StringClass>
PUBLIC	?Resize@?$DynamicVectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z ; DynamicVectorClass<StringClass>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@VStringClass@@@@UAEXXZ ; DynamicVectorClass<StringClass>::Clear
PUBLIC	?Count@?$DynamicVectorClass@VStringClass@@@@QBEHXZ ; DynamicVectorClass<StringClass>::Count
PUBLIC	?Add@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z ; DynamicVectorClass<StringClass>::Add
PUBLIC	?Add_Head@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z ; DynamicVectorClass<StringClass>::Add_Head
PUBLIC	?Insert@?$DynamicVectorClass@VStringClass@@@@QAE_NH$$QAVStringClass@@@Z ; DynamicVectorClass<StringClass>::Insert
PUBLIC	?Delete@?$DynamicVectorClass@VStringClass@@@@QAE_NH@Z ; DynamicVectorClass<StringClass>::Delete
PUBLIC	?ID@?$DynamicVectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z ; DynamicVectorClass<StringClass>::ID
PUBLIC	?ID@?$DynamicVectorClass@VStringClass@@@@UAEHABVStringClass@@@Z ; DynamicVectorClass<StringClass>::ID
PUBLIC	??1?$DynamicVectorClass@VStringClass@@@@UAE@XZ	; DynamicVectorClass<StringClass>::~DynamicVectorClass<StringClass>
PUBLIC	??_G?$DynamicVectorClass@VStringClass@@@@UAEPAXI@Z ; DynamicVectorClass<StringClass>::`scalar deleting destructor'
PUBLIC	??1FileFactoryListClass@@UAE@XZ			; FileFactoryListClass::~FileFactoryListClass
PUBLIC	?Get_File@FileFactoryListClass@@UAEPAVFileClass@@PBD@Z ; FileFactoryListClass::Get_File
PUBLIC	?Return_File@FileFactoryListClass@@UAEXPAVFileClass@@@Z ; FileFactoryListClass::Return_File
PUBLIC	??0FileFactoryListClass@@QAE@XZ			; FileFactoryListClass::FileFactoryListClass
PUBLIC	?Add_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@PBD_N@Z ; FileFactoryListClass::Add_FileFactory
PUBLIC	?Remove_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@@Z ; FileFactoryListClass::Remove_FileFactory
PUBLIC	?Remove_FileFactory@FileFactoryListClass@@QAEPAVFileFactoryClass@@XZ ; FileFactoryListClass::Remove_FileFactory
PUBLIC	?Add_Temp_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@@Z ; FileFactoryListClass::Add_Temp_FileFactory
PUBLIC	?Remove_Temp_FileFactory@FileFactoryListClass@@QAEPAVFileFactoryClass@@XZ ; FileFactoryListClass::Remove_Temp_FileFactory
PUBLIC	?Set_Search_Start@FileFactoryListClass@@QAEXPBD@Z ; FileFactoryListClass::Set_Search_Start
PUBLIC	??_GFileFactoryListClass@@UAEPAXI@Z		; FileFactoryListClass::`scalar deleting destructor'
PUBLIC	??$ResolveGameReference@PAVFileFactoryListClass@@@@YAAAPAVFileFactoryListClass@@HHH@Z ; ResolveGameReference<FileFactoryListClass *>
PUBLIC	??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z ; std::move<StringClass &>
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_7FileFactoryClass@@6B@			; FileFactoryClass::`vftable'
PUBLIC	??_7INIClass@@6B@				; INIClass::`vftable'
PUBLIC	?Instance@FileFactoryListClass@@0AAPAV1@A	; FileFactoryListClass::Instance
PUBLIC	??_7?$SimpleVecClass@PAVFileFactoryClass@@@@6B@	; SimpleVecClass<FileFactoryClass *>::`vftable'
PUBLIC	??_7?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@ ; SimpleDynVecClass<FileFactoryClass *>::`vftable'
PUBLIC	??_7?$VectorClass@VStringClass@@@@6B@		; VectorClass<StringClass>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@VStringClass@@@@6B@	; DynamicVectorClass<StringClass>::`vftable'
PUBLIC	??_7FileFactoryListClass@@6B@			; FileFactoryListClass::`vftable'
PUBLIC	??_C@_0DK@MIIPPOGF@SimpleVecClass?$DMclass?5FileFactory@ ; `string'
PUBLIC	??_C@_0DB@BECKDAJP@SimpleVecClass?$DMclass?5FileFactory@ ; `string'
PUBLIC	??_C@_0DN@MIAEGPKA@SimpleVecClass?$DMclass?5FileFactory@ ; `string'
PUBLIC	??_C@_0CH@KBGBABBF@VectorClass?$DMclass?5StringClass?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CG@PLGIJOMK@VectorClass?$DMclass?5StringClass?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CM@FIBFPEC@VectorClass?$DMclass?5StringClass?$DO?3?3@ ; `string'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FileFactoryClass@@6B@			; FileFactoryClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileFactoryClass@@@8			; FileFactoryClass `RTTI Type Descriptor'
PUBLIC	??_R3FileFactoryClass@@8			; FileFactoryClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileFactoryClass@@8			; FileFactoryClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileFactoryClass@@8		; FileFactoryClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INIClass@@6B@				; INIClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVINIClass@@@8				; INIClass `RTTI Type Descriptor'
PUBLIC	??_R3INIClass@@8				; INIClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INIClass@@8				; INIClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INIClass@@8			; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FileFactoryListClass@@6B@			; FileFactoryListClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileFactoryListClass@@@8		; FileFactoryListClass `RTTI Type Descriptor'
PUBLIC	??_R3FileFactoryListClass@@8			; FileFactoryListClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileFactoryListClass@@8			; FileFactoryListClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileFactoryListClass@@8		; FileFactoryListClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@ ; SimpleDynVecClass<FileFactoryClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$SimpleDynVecClass@PAVFileFactoryClass@@@@@8 ; SimpleDynVecClass<FileFactoryClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleDynVecClass@PAVFileFactoryClass@@@@8 ; SimpleDynVecClass<FileFactoryClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleDynVecClass@PAVFileFactoryClass@@@@8 ; SimpleDynVecClass<FileFactoryClass *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleDynVecClass@PAVFileFactoryClass@@@@8 ; SimpleDynVecClass<FileFactoryClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$SimpleVecClass@PAVFileFactoryClass@@@@8 ; SimpleVecClass<FileFactoryClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleVecClass@PAVFileFactoryClass@@@@@8 ; SimpleVecClass<FileFactoryClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleVecClass@PAVFileFactoryClass@@@@8	; SimpleVecClass<FileFactoryClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleVecClass@PAVFileFactoryClass@@@@8	; SimpleVecClass<FileFactoryClass *>::`RTTI Base Class Array'
PUBLIC	??_R4?$SimpleVecClass@PAVFileFactoryClass@@@@6B@ ; SimpleVecClass<FileFactoryClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$DynamicVectorClass@VStringClass@@@@6B@	; DynamicVectorClass<StringClass>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@VStringClass@@@@@8	; DynamicVectorClass<StringClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@VStringClass@@@@8	; DynamicVectorClass<StringClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@VStringClass@@@@8	; DynamicVectorClass<StringClass>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@VStringClass@@@@8 ; DynamicVectorClass<StringClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@VStringClass@@@@8	; VectorClass<StringClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@VStringClass@@@@@8	; VectorClass<StringClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@VStringClass@@@@8		; VectorClass<StringClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@VStringClass@@@@8		; VectorClass<StringClass>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@VStringClass@@@@6B@		; VectorClass<StringClass>::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?InitEngine@@YAXXZ:PROC				; InitEngine
EXTRN	__imp___wassert:PROC
EXTRN	__imp__memmove:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp___stricmp:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	__imp_?Get_String@StringClass@@AAEXH_N@Z:PROC
EXTRN	__imp_?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC
EXTRN	__imp_?Free_String@StringClass@@AAEXXZ:PROC
EXTRN	??_EFileFactoryClass@@UAEPAXI@Z:PROC		; FileFactoryClass::`vector deleting destructor'
EXTRN	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z:PROC ; INIClass::Find_Entry
EXTRN	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z:PROC ; INIClass::Find_Section
EXTRN	??1INIClass@@UAE@XZ:PROC			; INIClass::~INIClass
EXTRN	??_E?$SimpleVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z:PROC ; SimpleVecClass<FileFactoryClass *>::`vector deleting destructor'
EXTRN	??_E?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z:PROC ; SimpleDynVecClass<FileFactoryClass *>::`vector deleting destructor'
EXTRN	??_E?$VectorClass@VStringClass@@@@UAEPAXI@Z:PROC ; VectorClass<StringClass>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@VStringClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<StringClass>::`vector deleting destructor'
EXTRN	??_EFileFactoryListClass@@UAEPAXI@Z:PROC	; FileFactoryListClass::`vector deleting destructor'
EXTRN	_memcpy:PROC
EXTRN	?Exe@@3HA:DWORD					; Exe
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?m_EmptyString@StringClass@@0AAPADA:DWORD
EXTRN	__imp_?m_NullChar@StringClass@@0AADA:DWORD
_BSS	SEGMENT
?Instance@FileFactoryListClass@@0AAPAV1@A DD 01H DUP (?) ; FileFactoryListClass::Instance
_BSS	ENDS
CRT$XCL	SEGMENT
?Instance$initializer$@FileFactoryListClass@@0P6AXXZA DD FLAT:??__E?Instance@FileFactoryListClass@@0AAPAV1@A@@YAXXZ ; FileFactoryListClass::Instance$initializer$
CRT$XCL	ENDS
;	COMDAT ??_R4?$VectorClass@VStringClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@VStringClass@@@@6B@ DD 00H		; VectorClass<StringClass>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@VStringClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@VStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@VStringClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@VStringClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@VStringClass@@@@8 ; VectorClass<StringClass>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@VStringClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@VStringClass@@@@8 DD 00H		; VectorClass<StringClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@VStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@VStringClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@VStringClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<StringClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@VStringClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@VStringClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@VStringClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@VStringClass@@@@@8 ; VectorClass<StringClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@VStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@VStringClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@VStringClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@VStringClass@@@@@8 ; DynamicVectorClass<StringClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@VStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@VStringClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@VStringClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@VStringClass@@@@8 ; DynamicVectorClass<StringClass>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@VStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@VStringClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@VStringClass@@@@8 DD 00H	; DynamicVectorClass<StringClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@VStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@VStringClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@VStringClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<StringClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@VStringClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@VStringClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@VStringClass@@@@6B@ DD 00H	; DynamicVectorClass<StringClass>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@VStringClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@VStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SimpleVecClass@PAVFileFactoryClass@@@@6B@
rdata$r	SEGMENT
??_R4?$SimpleVecClass@PAVFileFactoryClass@@@@6B@ DD 00H	; SimpleVecClass<FileFactoryClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SimpleVecClass@PAVFileFactoryClass@@@@@8
	DD	FLAT:??_R3?$SimpleVecClass@PAVFileFactoryClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleVecClass@PAVFileFactoryClass@@@@8
rdata$r	SEGMENT
??_R2?$SimpleVecClass@PAVFileFactoryClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleVecClass@PAVFileFactoryClass@@@@8 ; SimpleVecClass<FileFactoryClass *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleVecClass@PAVFileFactoryClass@@@@8
rdata$r	SEGMENT
??_R3?$SimpleVecClass@PAVFileFactoryClass@@@@8 DD 00H	; SimpleVecClass<FileFactoryClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$SimpleVecClass@PAVFileFactoryClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleVecClass@PAVFileFactoryClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$SimpleVecClass@PAVFileFactoryClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; SimpleVecClass<FileFactoryClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleVecClass@PAVFileFactoryClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleVecClass@PAVFileFactoryClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleVecClass@PAVFileFactoryClass@@@@8 DD FLAT:??_R0?AV?$SimpleVecClass@PAVFileFactoryClass@@@@@8 ; SimpleVecClass<FileFactoryClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleVecClass@PAVFileFactoryClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleDynVecClass@PAVFileFactoryClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleDynVecClass@PAVFileFactoryClass@@@@8 DD FLAT:??_R0?AV?$SimpleDynVecClass@PAVFileFactoryClass@@@@@8 ; SimpleDynVecClass<FileFactoryClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleDynVecClass@PAVFileFactoryClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleDynVecClass@PAVFileFactoryClass@@@@8
rdata$r	SEGMENT
??_R2?$SimpleDynVecClass@PAVFileFactoryClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleDynVecClass@PAVFileFactoryClass@@@@8 ; SimpleDynVecClass<FileFactoryClass *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleVecClass@PAVFileFactoryClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleDynVecClass@PAVFileFactoryClass@@@@8
rdata$r	SEGMENT
??_R3?$SimpleDynVecClass@PAVFileFactoryClass@@@@8 DD 00H ; SimpleDynVecClass<FileFactoryClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$SimpleDynVecClass@PAVFileFactoryClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleDynVecClass@PAVFileFactoryClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$SimpleDynVecClass@PAVFileFactoryClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; SimpleDynVecClass<FileFactoryClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleDynVecClass@PAVFileFactoryClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@
rdata$r	SEGMENT
??_R4?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@ DD 00H ; SimpleDynVecClass<FileFactoryClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SimpleDynVecClass@PAVFileFactoryClass@@@@@8
	DD	FLAT:??_R3?$SimpleDynVecClass@PAVFileFactoryClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FileFactoryListClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileFactoryListClass@@8 DD FLAT:??_R0?AVFileFactoryListClass@@@8 ; FileFactoryListClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileFactoryListClass@@8
rdata$r	ENDS
;	COMDAT ??_R2FileFactoryListClass@@8
rdata$r	SEGMENT
??_R2FileFactoryListClass@@8 DD FLAT:??_R1A@?0A@EA@FileFactoryListClass@@8 ; FileFactoryListClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FileFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R3FileFactoryListClass@@8
rdata$r	SEGMENT
??_R3FileFactoryListClass@@8 DD 00H			; FileFactoryListClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileFactoryListClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileFactoryListClass@@@8
_DATA	SEGMENT
??_R0?AVFileFactoryListClass@@@8 DD FLAT:??_7type_info@@6B@ ; FileFactoryListClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileFactoryListClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileFactoryListClass@@6B@
rdata$r	SEGMENT
??_R4FileFactoryListClass@@6B@ DD 00H			; FileFactoryListClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileFactoryListClass@@@8
	DD	FLAT:??_R3FileFactoryListClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INIClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INIClass@@8 DD FLAT:??_R0?AVINIClass@@@8	; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R2INIClass@@8
rdata$r	SEGMENT
??_R2INIClass@@8 DD FLAT:??_R1A@?0A@EA@INIClass@@8	; INIClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INIClass@@8
rdata$r	SEGMENT
??_R3INIClass@@8 DD 00H					; INIClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVINIClass@@@8
_DATA	SEGMENT
??_R0?AVINIClass@@@8 DD FLAT:??_7type_info@@6B@		; INIClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVINIClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INIClass@@6B@
rdata$r	SEGMENT
??_R4INIClass@@6B@ DD 00H				; INIClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVINIClass@@@8
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FileFactoryClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileFactoryClass@@8 DD FLAT:??_R0?AVFileFactoryClass@@@8 ; FileFactoryClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R2FileFactoryClass@@8
rdata$r	SEGMENT
??_R2FileFactoryClass@@8 DD FLAT:??_R1A@?0A@EA@FileFactoryClass@@8 ; FileFactoryClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3FileFactoryClass@@8
rdata$r	SEGMENT
??_R3FileFactoryClass@@8 DD 00H				; FileFactoryClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2FileFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileFactoryClass@@@8
_DATA	SEGMENT
??_R0?AVFileFactoryClass@@@8 DD FLAT:??_7type_info@@6B@	; FileFactoryClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileFactoryClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileFactoryClass@@6B@
rdata$r	SEGMENT
??_R4FileFactoryClass@@6B@ DD 00H			; FileFactoryClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileFactoryClass@@@8
	DD	FLAT:??_R3FileFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CM@FIBFPEC@VectorClass?$DMclass?5StringClass?$DO?3?3@
CONST	SEGMENT
??_C@_0CM@FIBFPEC@VectorClass?$DMclass?5StringClass?$DO?3?3@ DB 'VectorCl'
	DB	'ass<class StringClass>::VectorClass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PLGIJOMK@VectorClass?$DMclass?5StringClass?$DO?3?3@
CONST	SEGMENT
??_C@_0CG@PLGIJOMK@VectorClass?$DMclass?5StringClass?$DO?3?3@ DB 'VectorC'
	DB	'lass<class StringClass>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KBGBABBF@VectorClass?$DMclass?5StringClass?$DO?3?3@
CONST	SEGMENT
??_C@_0CH@KBGBABBF@VectorClass?$DMclass?5StringClass?$DO?3?3@ DB 'VectorC'
	DB	'lass<class StringClass>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MIAEGPKA@SimpleVecClass?$DMclass?5FileFactory@
CONST	SEGMENT
??_C@_0DN@MIAEGPKA@SimpleVecClass?$DMclass?5FileFactory@ DB 'SimpleVecCla'
	DB	'ss<class FileFactoryClass *>::Uninitialised_Grow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BECKDAJP@SimpleVecClass?$DMclass?5FileFactory@
CONST	SEGMENT
??_C@_0DB@BECKDAJP@SimpleVecClass?$DMclass?5FileFactory@ DB 'SimpleVecCla'
	DB	'ss<class FileFactoryClass *>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MIIPPOGF@SimpleVecClass?$DMclass?5FileFactory@
CONST	SEGMENT
??_C@_0DK@MIIPPOGF@SimpleVecClass?$DMclass?5FileFactory@ DB 'SimpleVecCla'
	DB	'ss<class FileFactoryClass *>::~SimpleVecClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7FileFactoryListClass@@6B@
CONST	SEGMENT
??_7FileFactoryListClass@@6B@ DD FLAT:??_R4FileFactoryListClass@@6B@ ; FileFactoryListClass::`vftable'
	DD	FLAT:??_EFileFactoryListClass@@UAEPAXI@Z
	DD	FLAT:?Get_File@FileFactoryListClass@@UAEPAVFileClass@@PBD@Z
	DD	FLAT:?Return_File@FileFactoryListClass@@UAEXPAVFileClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@VStringClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@VStringClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@VStringClass@@@@6B@ ; DynamicVectorClass<StringClass>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@VStringClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@VStringClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@VStringClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@VStringClass@@@@UAEHABVStringClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@VStringClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@VStringClass@@@@6B@ DD FLAT:??_R4?$VectorClass@VStringClass@@@@6B@ ; VectorClass<StringClass>::`vftable'
	DD	FLAT:??_E?$VectorClass@VStringClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@VStringClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@VStringClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@VStringClass@@@@UAEHABVStringClass@@@Z
	DD	FLAT:?ID@?$VectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@
CONST	SEGMENT
??_7?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@ DD FLAT:??_R4?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@ ; SimpleDynVecClass<FileFactoryClass *>::`vftable'
	DD	FLAT:??_E?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z
	DD	FLAT:?Resize@?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE_NH@Z
	DD	FLAT:?Uninitialised_Grow@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z
CONST	ENDS
;	COMDAT ??_7?$SimpleVecClass@PAVFileFactoryClass@@@@6B@
CONST	SEGMENT
??_7?$SimpleVecClass@PAVFileFactoryClass@@@@6B@ DD FLAT:??_R4?$SimpleVecClass@PAVFileFactoryClass@@@@6B@ ; SimpleVecClass<FileFactoryClass *>::`vftable'
	DD	FLAT:??_E?$SimpleVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z
	DD	FLAT:?Resize@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z
	DD	FLAT:?Uninitialised_Grow@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z
CONST	ENDS
;	COMDAT ??_7INIClass@@6B@
CONST	SEGMENT
??_7INIClass@@6B@ DD FLAT:??_R4INIClass@@6B@		; INIClass::`vftable'
	DD	FLAT:??_EINIClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7FileFactoryClass@@6B@
CONST	SEGMENT
??_7FileFactoryClass@@6B@ DD FLAT:??_R4FileFactoryClass@@6B@ ; FileFactoryClass::`vftable'
	DD	FLAT:??_EFileFactoryClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_vector.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z PROC ; std::move<StringClass &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z ENDP ; std::move<StringClass &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ??__E?Instance@FileFactoryListClass@@0AAPAV1@A@@YAXXZ
text$yc	SEGMENT
??__E?Instance@FileFactoryListClass@@0AAPAV1@A@@YAXXZ PROC ; `dynamic initializer for 'FileFactoryListClass::Instance'', COMDAT

; 99   : REF_DEF3(FileFactoryListClass *, FileFactoryListClass::Instance, 0x0085DB70, 0x0085CD58, 0x0085CE48);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	8769096					; 0085ce48H
	push	8768856					; 0085cd58H
	push	8772464					; 0085db70H
	call	??$ResolveGameReference@PAVFileFactoryListClass@@@@YAAAPAVFileFactoryListClass@@HHH@Z ; ResolveGameReference<FileFactoryListClass *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?Instance@FileFactoryListClass@@0AAPAV1@A, eax ; FileFactoryListClass::Instance
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?Instance@FileFactoryListClass@@0AAPAV1@A@@YAXXZ ENDP ; `dynamic initializer for 'FileFactoryListClass::Instance''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@PAVFileFactoryListClass@@@@YAAAPAVFileFactoryListClass@@HHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@PAVFileFactoryListClass@@@@YAAAPAVFileFactoryListClass@@HHH@Z PROC ; ResolveGameReference<FileFactoryListClass *>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@PAVFileFactoryListClass@@@@YAAAPAVFileFactoryListClass@@HHH@Z ENDP ; ResolveGameReference<FileFactoryListClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GFileFactoryListClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileFactoryListClass@@UAEPAXI@Z PROC		; FileFactoryListClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileFactoryListClass@@UAE@XZ		; FileFactoryListClass::~FileFactoryListClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileFactoryListClass@@UAEPAXI@Z ENDP		; FileFactoryListClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ?Set_Search_Start@FileFactoryListClass@@QAEXPBD@Z
_TEXT	SEGMENT
_factoryIndex$1 = -8					; size = 4
_this$ = -4						; size = 4
_factoryName$ = 8					; size = 4
?Set_Search_Start@FileFactoryListClass@@QAEXPBD@Z PROC	; FileFactoryListClass::Set_Search_Start, COMDAT
; _this$ = ecx

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 	for (int factoryIndex = 0; factoryIndex < fileNames.Length(); ++factoryIndex)

	mov	DWORD PTR _factoryIndex$1[ebp], 0
	jmp	SHORT $LN4@Set_Search
$LN3@Set_Search:
	mov	eax, DWORD PTR _factoryIndex$1[ebp]
	add	eax, 1
	mov	DWORD PTR _factoryIndex$1[ebp], eax
$LN4@Set_Search:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	cmp	DWORD PTR _factoryIndex$1[ebp], eax
	jge	SHORT $LN2@Set_Search

; 120  : 	{
; 121  : 		if (_stricmp(fileNames[factoryIndex], factoryName) == 0)

	mov	eax, DWORD PTR _factoryName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factoryIndex$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Set_Search

; 122  : 		{
; 123  : 			searchStart = factoryIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _factoryIndex$1[ebp]
	mov	DWORD PTR [eax+48], ecx

; 124  : 			return;

	jmp	SHORT $LN5@Set_Search
$LN1@Set_Search:

; 125  : 		}
; 126  : 	}

	jmp	SHORT $LN3@Set_Search
$LN2@Set_Search:

; 127  : 	
; 128  : 	searchStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN5@Set_Search:

; 129  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Search_Start@FileFactoryListClass@@QAEXPBD@Z ENDP	; FileFactoryListClass::Set_Search_Start
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ?Remove_Temp_FileFactory@FileFactoryListClass@@QAEPAVFileFactoryClass@@XZ
_TEXT	SEGMENT
_f$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Temp_FileFactory@FileFactoryListClass@@QAEPAVFileFactoryClass@@XZ PROC ; FileFactoryListClass::Remove_Temp_FileFactory, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 	FileFactoryClass *f = tempFactory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _f$[ebp], ecx

; 107  : 	tempFactory = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 108  : 	return f;

	mov	eax, DWORD PTR _f$[ebp]

; 109  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Temp_FileFactory@FileFactoryListClass@@QAEPAVFileFactoryClass@@XZ ENDP ; FileFactoryListClass::Remove_Temp_FileFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ?Add_Temp_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_factory$ = 8						; size = 4
?Add_Temp_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@@Z PROC ; FileFactoryListClass::Add_Temp_FileFactory, COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 	tempFactory = factory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 113  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Temp_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@@Z ENDP ; FileFactoryListClass::Add_Temp_FileFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ?Remove_FileFactory@FileFactoryListClass@@QAEPAVFileFactoryClass@@XZ
_TEXT	SEGMENT
_factory$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_FileFactory@FileFactoryListClass@@QAEPAVFileFactoryClass@@XZ PROC ; FileFactoryListClass::Remove_FileFactory, COMDAT
; _this$ = ecx

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 	FileFactoryClass *factory = 0;

	mov	DWORD PTR _factory$[ebp], 0

; 134  : 	if (factories.Count())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Count@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QBEHXZ ; SimpleDynVecClass<FileFactoryClass *>::Count
	test	eax, eax
	je	SHORT $LN1@Remove_Fil

; 135  : 	{
; 136  : 		factory = factories[0];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAEAAPAVFileFactoryClass@@H@Z ; SimpleDynVecClass<FileFactoryClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _factory$[ebp], eax

; 137  : 		factories.Delete(0);

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Delete@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NH_N@Z ; SimpleDynVecClass<FileFactoryClass *>::Delete

; 138  : 		fileNames.Delete(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Delete@?$DynamicVectorClass@VStringClass@@@@QAE_NH@Z ; DynamicVectorClass<StringClass>::Delete
$LN1@Remove_Fil:

; 139  : 	}
; 140  : 	return factory;

	mov	eax, DWORD PTR _factory$[ebp]

; 141  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_FileFactory@FileFactoryListClass@@QAEPAVFileFactoryClass@@XZ ENDP ; FileFactoryListClass::Remove_FileFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ?Remove_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_factory$ = 8						; size = 4
?Remove_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@@Z PROC ; FileFactoryListClass::Remove_FileFactory, COMDAT
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	for (int i = 0;i < factories.Count();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Remove_Fil
$LN3@Remove_Fil:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Remove_Fil:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Count@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QBEHXZ ; SimpleDynVecClass<FileFactoryClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN5@Remove_Fil

; 85   : 	{
; 86   : 		if (factories[i] == factory)

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAEAAPAVFileFactoryClass@@H@Z ; SimpleDynVecClass<FileFactoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _factory$[ebp]
	jne	SHORT $LN1@Remove_Fil

; 87   : 		{
; 88   : 			factories.Delete(i);

	push	1
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Delete@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NH_N@Z ; SimpleDynVecClass<FileFactoryClass *>::Delete

; 89   : 			fileNames.Delete(i);

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Delete@?$DynamicVectorClass@VStringClass@@@@QAE_NH@Z ; DynamicVectorClass<StringClass>::Delete

; 90   : 			searchStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN1@Remove_Fil:

; 91   : 		}
; 92   : 	}

	jmp	SHORT $LN3@Remove_Fil
$LN5@Remove_Fil:

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@@Z ENDP ; FileFactoryListClass::Remove_FileFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ?Add_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@PBD_N@Z
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_factory$ = 8						; size = 4
_name$ = 12						; size = 4
_addToBegin$ = 16					; size = 1
?Add_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@PBD_N@Z PROC ; FileFactoryListClass::Add_FileFactory, COMDAT
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 	if (addToBegin)

	movzx	eax, BYTE PTR _addToBegin$[ebp]
	test	eax, eax
	je	SHORT $LN2@Add_FileFa

; 70   : 	{
; 71   : 		factories.Add_Head(factory);

	lea	eax, DWORD PTR _factory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Add_Head@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@@Z ; SimpleDynVecClass<FileFactoryClass *>::Add_Head

; 72   : 		fileNames.Add_Head(name);

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add_Head@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z ; DynamicVectorClass<StringClass>::Add_Head
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 73   : 	}
; 74   : 	else

	jmp	SHORT $LN1@Add_FileFa
$LN2@Add_FileFa:

; 75   : 	{
; 76   : 		factories.Add(factory);

	push	0
	lea	eax, DWORD PTR _factory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Add@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@H@Z ; SimpleDynVecClass<FileFactoryClass *>::Add

; 77   : 		fileNames.Add(name);

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z ; DynamicVectorClass<StringClass>::Add
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@Add_FileFa:

; 78   : 	}
; 79   : 	searchStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Add_FileFactory@FileFactoryListClass@@QAEXPAVFileFactoryClass@@PBD_N@Z ENDP ; FileFactoryListClass::Add_FileFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ??0FileFactoryListClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FileFactoryListClass@@QAE@XZ PROC			; FileFactoryListClass::FileFactoryListClass, COMDAT
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FileFactoryClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileFactoryListClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE@H@Z ; SimpleDynVecClass<FileFactoryClass *>::SimpleDynVecClass<FileFactoryClass *>
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$DynamicVectorClass@VStringClass@@@@QAE@IPBVStringClass@@@Z ; DynamicVectorClass<StringClass>::DynamicVectorClass<StringClass>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 145  : 	Instance = this;

	mov	eax, DWORD PTR ?Instance@FileFactoryListClass@@0AAPAV1@A ; FileFactoryListClass::Instance
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 146  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FileFactoryListClass@@QAE@XZ ENDP			; FileFactoryListClass::FileFactoryListClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ?Return_File@FileFactoryListClass@@UAEXPAVFileClass@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_file$ = 8						; size = 4
?Return_File@FileFactoryListClass@@UAEXPAVFileClass@@@Z PROC ; FileFactoryListClass::Return_File, COMDAT
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   :    this->factories[0]->Return_File (file);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAEAAPAVFileFactoryClass@@H@Z ; SimpleDynVecClass<FileFactoryClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv70[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv70[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Return_File@FileFactoryListClass@@UAEXPAVFileClass@@@Z ENDP ; FileFactoryListClass::Return_File
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ?Get_File@FileFactoryListClass@@UAEPAVFileClass@@PBD@Z
_TEXT	SEGMENT
_file$1 = -24						; size = 4
_factory$2 = -20					; size = 4
_i$3 = -16						; size = 4
_resultFactory$ = -12					; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
_fileName$ = 8						; size = 4
?Get_File@FileFactoryListClass@@UAEPAVFileClass@@PBD@Z PROC ; FileFactoryListClass::Get_File, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 18   : 	FileClass* result = NULL; // The first file for which Is_Available returns true, or else the first file that is non-null, or otherwise null.

	mov	DWORD PTR _result$[ebp], 0

; 19   : 	FileFactoryClass* resultFactory = NULL;

	mov	DWORD PTR _resultFactory$[ebp], 0

; 20   : 	if (tempFactory)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN21@Get_File

; 21   : 	{
; 22   : 		result = tempFactory->Get_File(fileName);

	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR _result$[ebp], eax

; 23   : 		resultFactory = tempFactory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _resultFactory$[ebp], ecx
$LN21@Get_File:

; 24   : 	}
; 25   : 	if (!result || !result->Is_Available())

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@Get_File
	push	0
	mov	eax, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN20@Get_File
$LN19@Get_File:

; 26   : 	{
; 27   : 		for (int i = 0; i < factories.Count(); ++i)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN18@Get_File
$LN17@Get_File:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN18@Get_File:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Count@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QBEHXZ ; SimpleDynVecClass<FileFactoryClass *>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	$LN20@Get_File
$LN14@Get_File:

; 28   : 		{
; 29   : 			TT_ASSERT(!result || !result->Is_Available());

	xor	eax, eax
	jne	SHORT $LN14@Get_File
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@Get_File
	push	0
	mov	eax, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Get_File
	int	3
$LN12@Get_File:

; 30   : 			FileFactoryClass* factory = factories[i];

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAEAAPAVFileFactoryClass@@H@Z ; SimpleDynVecClass<FileFactoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _factory$2[ebp], ecx

; 31   : 			FileClass* file = factory->Get_File(fileName);

	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _factory$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR _file$1[ebp], eax

; 32   : 			if (file)

	cmp	DWORD PTR _file$1[ebp], 0
	je	$LN11@Get_File

; 33   : 			{
; 34   : 				if (!result)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@Get_File

; 35   : 				{
; 36   : 					result = file;

	mov	eax, DWORD PTR _file$1[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 37   : 					resultFactory = factory;

	mov	eax, DWORD PTR _factory$2[ebp]
	mov	DWORD PTR _resultFactory$[ebp], eax

; 38   : 					if (file->Is_Available())

	push	0
	mov	eax, DWORD PTR _file$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _file$1[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@Get_File

; 39   : 						break;

	jmp	SHORT $LN20@Get_File
$LN9@Get_File:

; 40   : 				}

	jmp	SHORT $LN11@Get_File
$LN10@Get_File:

; 41   : 				else if (file->Is_Available())

	push	0
	mov	eax, DWORD PTR _file$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _file$1[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@Get_File
$LN5@Get_File:

; 42   : 				{
; 43   : 					TT_ASSERT(result && !result->Is_Available());

	xor	eax, eax
	jne	SHORT $LN5@Get_File
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@Get_File
	push	0
	mov	eax, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Get_File
$LN2@Get_File:
	int	3
$LN3@Get_File:

; 44   : 					resultFactory->Return_File(result);

	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _resultFactory$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _resultFactory$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 45   : 					result = file;

	mov	eax, DWORD PTR _file$1[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 46   : 					resultFactory = factory;

	mov	eax, DWORD PTR _factory$2[ebp]
	mov	DWORD PTR _resultFactory$[ebp], eax

; 47   : 					break;

	jmp	SHORT $LN20@Get_File

; 48   : 				}
; 49   : 				else

	jmp	SHORT $LN11@Get_File
$LN7@Get_File:

; 50   : 				{
; 51   : 					factory->Return_File(file);

	mov	eax, DWORD PTR _file$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _factory$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN11@Get_File:

; 52   : 				}
; 53   : 			}
; 54   : 		}

	jmp	$LN17@Get_File
$LN20@Get_File:

; 55   : 	}
; 56   : 
; 57   : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_File@FileFactoryListClass@@UAEPAVFileClass@@PBD@Z ENDP ; FileFactoryListClass::Get_File
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\filefactorylistclass.cpp
;	COMDAT ??1FileFactoryListClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FileFactoryListClass@@UAE@XZ PROC			; FileFactoryListClass::~FileFactoryListClass, COMDAT
; _this$ = ecx

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileFactoryListClass@@6B@

; 150  : 	Instance = 0;

	mov	eax, DWORD PTR ?Instance@FileFactoryListClass@@0AAPAV1@A ; FileFactoryListClass::Instance
	mov	DWORD PTR [eax], 0

; 151  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$DynamicVectorClass@VStringClass@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE@XZ ; SimpleDynVecClass<FileFactoryClass *>::~SimpleDynVecClass<FileFactoryClass *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileFactoryClass@@UAE@XZ		; FileFactoryClass::~FileFactoryClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1FileFactoryListClass@@UAE@XZ ENDP			; FileFactoryListClass::~FileFactoryListClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@VStringClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@VStringClass@@@@UAEPAXI@Z PROC	; DynamicVectorClass<StringClass>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@VStringClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@VStringClass@@@@UAEPAXI@Z ENDP	; DynamicVectorClass<StringClass>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@VStringClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@VStringClass@@@@UAE@XZ PROC	; DynamicVectorClass<StringClass>::~DynamicVectorClass<StringClass>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@VStringClass@@@@UAE@XZ	; VectorClass<StringClass>::~VectorClass<StringClass>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@VStringClass@@@@UAE@XZ ENDP	; DynamicVectorClass<StringClass>::~DynamicVectorClass<StringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@VStringClass@@@@UAEHABVStringClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@VStringClass@@@@UAEHABVStringClass@@@Z PROC ; DynamicVectorClass<StringClass>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@VStringClass@@@@QBEHXZ ; DynamicVectorClass<StringClass>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	ecx, DWORD PTR _object$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@VStringClass@@@@UAEHABVStringClass@@@Z ENDP ; DynamicVectorClass<StringClass>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z PROC ; DynamicVectorClass<StringClass>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z ; VectorClass<StringClass>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z ENDP ; DynamicVectorClass<StringClass>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete@?$DynamicVectorClass@VStringClass@@@@QAE_NH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$DynamicVectorClass@VStringClass@@@@QAE_NH@Z PROC ; DynamicVectorClass<StringClass>::Delete, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		if (index < ActiveCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN4@Delete

; 446  : 		{
; 447  : 			ActiveCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 448  : 			for (int i = index; i < ActiveCount; i++)

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN3@Delete
$LN2@Delete:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Delete:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN1@Delete

; 449  : 			{
; 450  : 				(*this)[i] = std::move((*this)[i+1]);

	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	push	eax
	call	??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z ; std::move<StringClass &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	mov	ecx, eax
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 451  : 			}

	jmp	SHORT $LN2@Delete
$LN1@Delete:

; 452  : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Delete
$LN4@Delete:

; 453  : 		}
; 454  : 		return false;

	xor	al, al
$LN5@Delete:

; 455  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$DynamicVectorClass@VStringClass@@@@QAE_NH@Z ENDP ; DynamicVectorClass<StringClass>::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Insert@?$DynamicVectorClass@VStringClass@@@@QAE_NH$$QAVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_object$ = 12						; size = 4
?Insert@?$DynamicVectorClass@VStringClass@@@@QAE_NH$$QAVStringClass@@@Z PROC ; DynamicVectorClass<StringClass>::Insert, COMDAT
; _this$ = ecx

; 401  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 		if (index < 0)

	cmp	DWORD PTR _index$[ebp], 0
	jge	SHORT $LN10@Insert

; 403  : 		{
; 404  : 			return false;

	xor	al, al
	jmp	$LN11@Insert
$LN10@Insert:

; 405  : 		}
; 406  : 		if (index > ActiveCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jle	SHORT $LN9@Insert

; 407  : 		{
; 408  : 			return false;

	xor	al, al
	jmp	$LN11@Insert
$LN9@Insert:

; 409  : 		}
; 410  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN8@Insert

; 411  : 		{
; 412  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN6@Insert
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN7@Insert
$LN6@Insert:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN7@Insert

; 413  : 			{
; 414  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@Insert

; 415  : 				{
; 416  : 					return false;

	xor	al, al
	jmp	SHORT $LN11@Insert
$LN5@Insert:

; 417  : 				}
; 418  : 			}
; 419  : 			else

	jmp	SHORT $LN8@Insert
$LN7@Insert:

; 420  : 			{
; 421  : 				return false;

	xor	al, al
	jmp	SHORT $LN11@Insert
$LN8@Insert:

; 422  : 			}
; 423  : 		}
; 424  : 		for (int i = ActiveCount; i > index; --i)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _i$1[ebp], ecx
	jmp	SHORT $LN3@Insert
$LN2@Insert:
	mov	eax, DWORD PTR _i$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Insert:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jle	SHORT $LN1@Insert

; 425  : 		{
; 426  : 			Vector[i] = std::move(Vector[i-1]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4-4]
	push	eax
	call	??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z ; std::move<StringClass &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 427  : 		}

	jmp	SHORT $LN2@Insert
$LN1@Insert:

; 428  : 		(*this)[index] = std::move(object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	call	??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z ; std::move<StringClass &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	mov	ecx, eax
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 429  : 		ActiveCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 430  : 		return true;

	mov	al, 1
$LN11@Insert:

; 431  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$DynamicVectorClass@VStringClass@@@@QAE_NH$$QAVStringClass@@@Z ENDP ; DynamicVectorClass<StringClass>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add_Head@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add_Head@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z PROC ; DynamicVectorClass<StringClass>::Add_Head, COMDAT
; _this$ = ecx

; 396  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 		return Insert(0, std::move(object));

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	call	??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z ; std::move<StringClass &>
	add	esp, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$DynamicVectorClass@VStringClass@@@@QAE_NH$$QAVStringClass@@@Z ; DynamicVectorClass<StringClass>::Insert

; 398  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z ENDP ; DynamicVectorClass<StringClass>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z PROC ; DynamicVectorClass<StringClass>::Add, COMDAT
; _this$ = ecx

; 376  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 378  : 		{
; 379  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 380  : 			{
; 381  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 382  : 				{
; 383  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 384  : 				}
; 385  : 			}
; 386  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 387  : 			{
; 388  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 389  : 			}
; 390  : 		}
; 391  : 		(*this)[ActiveCount++] = std::move(object);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _object$[ebp]
	push	edx
	call	??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z ; std::move<StringClass &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	mov	ecx, eax
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 392  : 		return true;

	mov	al, 1
$LN6@Add:

; 393  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@VStringClass@@@@QAE_N$$QAVStringClass@@@Z ENDP ; DynamicVectorClass<StringClass>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@VStringClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@VStringClass@@@@QBEHXZ PROC	; DynamicVectorClass<StringClass>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@VStringClass@@@@QBEHXZ ENDP	; DynamicVectorClass<StringClass>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@VStringClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@VStringClass@@@@UAEXXZ PROC	; DynamicVectorClass<StringClass>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@VStringClass@@@@UAEXXZ ; VectorClass<StringClass>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@VStringClass@@@@UAEXXZ ENDP	; DynamicVectorClass<StringClass>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z PROC ; DynamicVectorClass<StringClass>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z ; VectorClass<StringClass>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z ENDP ; DynamicVectorClass<StringClass>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@VStringClass@@@@QAE@IPBVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@VStringClass@@@@QAE@IPBVStringClass@@@Z PROC ; DynamicVectorClass<StringClass>::DynamicVectorClass<StringClass>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@VStringClass@@@@QAE@HPBVStringClass@@@Z ; VectorClass<StringClass>::VectorClass<StringClass>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@VStringClass@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@VStringClass@@@@QAE@IPBVStringClass@@@Z ENDP ; DynamicVectorClass<StringClass>::DynamicVectorClass<StringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@VStringClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@VStringClass@@@@UAEPAXI@Z PROC	; VectorClass<StringClass>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@VStringClass@@@@UAE@XZ	; VectorClass<StringClass>::~VectorClass<StringClass>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@VStringClass@@@@UAEPAXI@Z ENDP	; VectorClass<StringClass>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@VStringClass@@@@UAEHABVStringClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@VStringClass@@@@UAEHABVStringClass@@@Z PROC ; VectorClass<StringClass>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	ecx, DWORD PTR _object$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@VStringClass@@@@UAEHABVStringClass@@@Z ENDP ; VectorClass<StringClass>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z PROC ; VectorClass<StringClass>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@VStringClass@@@@UAEHPBVStringClass@@@Z ENDP ; VectorClass<StringClass>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@VStringClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@VStringClass@@@@QBEHXZ PROC	; VectorClass<StringClass>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@VStringClass@@@@QBEHXZ ENDP	; VectorClass<StringClass>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@VStringClass@@@@UAEXXZ
_TEXT	SEGMENT
tv82 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@VStringClass@@@@UAEXXZ PROC	; VectorClass<StringClass>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CG@PLGIJOMK@VectorClass?$DMclass?5StringClass?$DO?3?3@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN8@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Clear
	push	3
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_EStringClass@@QAEPAXI@Z
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	DWORD PTR tv82[ebp], 0
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@VStringClass@@@@UAEXXZ ENDP	; VectorClass<StringClass>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z
_TEXT	SEGMENT
tv157 = -112						; size = 4
tv94 = -112						; size = 4
tv204 = -108						; size = 4
tv195 = -108						; size = 4
tv167 = -108						; size = 4
tv159 = -108						; size = 4
tv128 = -108						; size = 4
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
_index$7 = -16						; size = 4
_copycount$8 = -12					; size = 4
_newptr$9 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z PROC ; VectorClass<StringClass>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	$LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CH@KBGBABBF@VectorClass?$DMclass?5StringClass?$DO?3?3@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN16@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN17@Resize
$LN16@Resize:
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN14@Resize
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	mov	DWORD PTR tv94[ebp], 0
$LN15@Resize:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR tv128[ebp], eax
$LN17@Resize:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _newptr$9[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	$LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CH@KBGBABBF@VectorClass?$DMclass?5StringClass?$DO?3?3@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN21@Resize
	xor	ecx, ecx
	jne	SHORT $LN18@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN18@Resize:
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN22@Resize
$LN21@Resize:
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _array$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN19@Resize
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T4[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	add	edx, 4
	mov	DWORD PTR tv157[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	DWORD PTR tv157[ebp], 0
$LN20@Resize:
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv159[ebp], eax
$LN22@Resize:
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR _newptr$9[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$9[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN23@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN24@Resize
$LN23@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv167[ebp], ecx
$LN24@Resize:
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR _copycount$8[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$7[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$7[ebp]
	add	eax, 1
	mov	DWORD PTR _index$7[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$7[ebp]
	cmp	eax, DWORD PTR _copycount$8[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$7[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAVStringClass@@@std@@YA$$QAVStringClass@@AAV1@@Z ; std::move<StringClass &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _index$7[ebp]
	mov	edx, DWORD PTR _newptr$9[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CH@KBGBABBF@VectorClass?$DMclass?5StringClass?$DO?3?3@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN28@Resize
	xor	ecx, ecx
	jne	SHORT $LN25@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN25@Resize:
	jmp	SHORT $LN29@Resize
$LN28@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN26@Resize
	push	3
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_EStringClass@@QAEPAXI@Z
	mov	DWORD PTR tv195[ebp], eax
	jmp	SHORT $LN29@Resize
$LN26@Resize:
	mov	DWORD PTR tv195[ebp], 0
$LN29@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$9[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN30@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN30@Resize
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN31@Resize
$LN30@Resize:
	mov	DWORD PTR tv204[ebp], 0
$LN31@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv204[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@VStringClass@@@@UAE_NHPBVStringClass@@@Z ENDP ; VectorClass<StringClass>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@VStringClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@VStringClass@@@@UBE_NABV0@@Z PROC	; VectorClass<StringClass>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _index$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	call	??9StringClass@@QBE_NPBD@Z		; StringClass::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@VStringClass@@@@UBE_NABV0@@Z ENDP	; VectorClass<StringClass>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z PROC ; VectorClass<StringClass>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z ENDP ; VectorClass<StringClass>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z PROC ; VectorClass<StringClass>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@VStringClass@@@@QAEAAVStringClass@@H@Z ENDP ; VectorClass<StringClass>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@VStringClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@VStringClass@@@@UAE@XZ PROC		; VectorClass<StringClass>::~VectorClass<StringClass>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@VStringClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@VStringClass@@@@UAEXXZ ; VectorClass<StringClass>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@VStringClass@@@@UAE@XZ ENDP		; VectorClass<StringClass>::~VectorClass<StringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@VStringClass@@@@QAE@HPBVStringClass@@@Z
_TEXT	SEGMENT
tv163 = -92						; size = 4
tv132 = -92						; size = 4
tv165 = -88						; size = 4
tv134 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
$T3 = -76						; size = 4
$T4 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@VStringClass@@@@QAE@HPBVStringClass@@@Z PROC ; VectorClass<StringClass>::VectorClass<StringClass>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@VStringClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	$LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0CM@FIBFPEC@VectorClass?$DMclass?5StringClass?$DO?3?3@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN10@VectorClas
$LN9@VectorClas:
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _array$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@VectorClas
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv132[ebp], edx
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	DWORD PTR tv132[ebp], 0
$LN8@VectorClas:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN10@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	$LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0CM@FIBFPEC@VectorClass?$DMclass?5StringClass?$DO?3?3@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN11@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@VectorClas:
	mov	DWORD PTR tv165[ebp], 0
	jmp	SHORT $LN15@VectorClas
$LN14@VectorClas:
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN12@VectorClas
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T4[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	add	edx, 4
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN13@VectorClas
$LN12@VectorClas:
	mov	DWORD PTR tv163[ebp], 0
$LN13@VectorClas:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR tv165[ebp], eax
$LN15@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv165[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@VStringClass@@@@QAE@HPBVStringClass@@@Z ENDP ; VectorClass<StringClass>::VectorClass<StringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE@XZ ; SimpleDynVecClass<FileFactoryClass *>::~SimpleDynVecClass<FileFactoryClass *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_allow_shrink$ = 12					; size = 1
?Delete@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NH_N@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::Delete, COMDAT
; _this$ = ecx

; 900  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 		if (index < ActiveCount-1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	cmp	DWORD PTR _index$[ebp], ecx
	jge	SHORT $LN2@Delete

; 902  : 		{
; 903  : 			memmove(&(Vector[index]),&(Vector[index+1]),(ActiveCount - index - 1) * sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _index$[ebp]
	lea	edx, DWORD PTR [ecx*4-4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _index$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN2@Delete:

; 904  : 		}
; 905  : 		ActiveCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 906  : 		if (allow_shrink)

	movzx	eax, BYTE PTR _allow_shrink$[ebp]
	test	eax, eax
	je	SHORT $LN1@Delete

; 907  : 		{
; 908  : 			Shrink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shrink@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NXZ ; SimpleDynVecClass<FileFactoryClass *>::Shrink
$LN1@Delete:

; 909  : 		}
; 910  : 		return true;

	mov	al, 1

; 911  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Delete@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NH_N@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Insert@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NHABQAVFileFactoryClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_object$ = 12						; size = 4
?Insert@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NHABQAVFileFactoryClass@@@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::Insert, COMDAT
; _this$ = ecx

; 882  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN7@Insert:

; 883  : 		TT_ASSERT(index >= 0 && index <= ActiveCount);

	xor	eax, eax
	jne	SHORT $LN7@Insert
	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN4@Insert
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN5@Insert
$LN4@Insert:
	int	3
$LN5@Insert:

; 884  : 		if (ActiveCount >= VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN3@Insert

; 885  : 		{
; 886  : 			if (!Grow(0))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NH@Z ; SimpleDynVecClass<FileFactoryClass *>::Grow
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Insert

; 887  : 			{
; 888  : 				return false;

	xor	al, al
	jmp	SHORT $LN9@Insert
$LN3@Insert:

; 889  : 			}
; 890  : 		}
; 891  : 		if (index < ActiveCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN1@Insert

; 892  : 		{
; 893  : 			memmove(&Vector[index+1], &Vector[index], (ActiveCount-index) * sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _index$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _index$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN1@Insert:

; 894  : 		}
; 895  : 		Vector[index] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*4], eax

; 896  : 		++ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 897  : 		return true;

	mov	al, 1
$LN9@Insert:

; 898  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NHABQAVFileFactoryClass@@@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add_Head@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add_Head@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::Add_Head, COMDAT
; _this$ = ecx

; 878  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 		return Insert(0, object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NHABQAVFileFactoryClass@@@Z ; SimpleDynVecClass<FileFactoryClass *>::Insert

; 880  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_new_size_hint$ = 12					; size = 4
?Add@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@H@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::Add, COMDAT
; _this$ = ecx

; 845  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 846  : 		if (ActiveCount >= VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN2@Add

; 847  : 		{
; 848  : 			if (!Grow(new_size_hint))

	mov	eax, DWORD PTR _new_size_hint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NH@Z ; SimpleDynVecClass<FileFactoryClass *>::Grow
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Add

; 849  : 			{
; 850  : 				return false;

	xor	al, al
	jmp	SHORT $LN3@Add
$LN2@Add:

; 851  : 			}
; 852  : 		}
; 853  : 		Vector[ActiveCount++] = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 854  : 		return true;

	mov	al, 1
$LN3@Add:

; 855  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE_NABQAVFileFactoryClass@@H@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
?Resize@?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE_NH@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::Resize, COMDAT
; _this$ = ecx

; 833  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 834  : 		if (SimpleVecClass<T>::Resize(newsize))

	mov	eax, DWORD PTR _newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z ; SimpleVecClass<FileFactoryClass *>::Resize
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Resize

; 835  : 		{
; 836  : 			if (VectorMax < ActiveCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN1@Resize

; 837  : 			{
; 838  : 				ActiveCount = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx
$LN1@Resize:

; 839  : 			}
; 840  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 841  : 		}
; 842  : 		return false;

	xor	al, al
$LN3@Resize:

; 843  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Resize@?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE_NH@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAEAAPAVFileFactoryClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAEAAPAVFileFactoryClass@@H@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::operator[], COMDAT
; _this$ = ecx

; 825  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 826  : 		return Vector[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 827  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAEAAPAVFileFactoryClass@@H@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QBEHXZ PROC ; SimpleDynVecClass<FileFactoryClass *>::Count, COMDAT
; _this$ = ecx

; 821  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 822  : 		return ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 823  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$SimpleDynVecClass@PAVFileFactoryClass@@@@QBEHXZ ENDP ; SimpleDynVecClass<FileFactoryClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE@H@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::SimpleDynVecClass<FileFactoryClass *>, COMDAT
; _this$ = ecx

; 771  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$SimpleVecClass@PAVFileFactoryClass@@@@QAE@H@Z ; SimpleVecClass<FileFactoryClass *>::SimpleVecClass<FileFactoryClass *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@

; 772  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 773  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SimpleDynVecClass@PAVFileFactoryClass@@@@QAE@H@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::SimpleDynVecClass<FileFactoryClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE@XZ PROC ; SimpleDynVecClass<FileFactoryClass *>::~SimpleDynVecClass<FileFactoryClass *>, COMDAT
; _this$ = ecx

; 767  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SimpleDynVecClass@PAVFileFactoryClass@@@@6B@

; 768  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 769  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SimpleVecClass@PAVFileFactoryClass@@@@UAE@XZ ; SimpleVecClass<FileFactoryClass *>::~SimpleVecClass<FileFactoryClass *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$SimpleDynVecClass@PAVFileFactoryClass@@@@UAE@XZ ENDP ; SimpleDynVecClass<FileFactoryClass *>::~SimpleDynVecClass<FileFactoryClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Shrink@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Shrink@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NXZ PROC ; SimpleDynVecClass<FileFactoryClass *>::Shrink, COMDAT
; _this$ = ecx

; 757  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 758  : 		if (ActiveCount < VectorMax/4)

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jge	SHORT $LN1@Shrink

; 759  : 		{
; 760  : 			return Resize(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	jmp	SHORT $LN2@Shrink
$LN1@Shrink:

; 761  : 		}
; 762  : 		return true;

	mov	al, 1
$LN2@Shrink:

; 763  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Shrink@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NXZ ENDP ; SimpleDynVecClass<FileFactoryClass *>::Shrink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Grow@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NH@Z
_TEXT	SEGMENT
tv135 = -76						; size = 4
tv133 = -76						; size = 4
_new_size$ = -8						; size = 4
_this$ = -4						; size = 4
_new_size_hint$ = 8					; size = 4
?Grow@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NH@Z PROC ; SimpleDynVecClass<FileFactoryClass *>::Grow, COMDAT
; _this$ = ecx

; 751  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 752  : 		int new_size = max(VectorMax + VectorMax/4,VectorMax + 4);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	add	ecx, 4
	cmp	eax, ecx
	jle	SHORT $LN3@Grow
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Grow
$LN3@Grow:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	DWORD PTR tv133[ebp], eax
$LN4@Grow:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _new_size$[ebp], ecx

; 753  : 		new_size = max(new_size,new_size_hint);

	mov	eax, DWORD PTR _new_size$[ebp]
	cmp	eax, DWORD PTR _new_size_hint$[ebp]
	jle	SHORT $LN5@Grow
	mov	ecx, DWORD PTR _new_size$[ebp]
	mov	DWORD PTR tv135[ebp], ecx
	jmp	SHORT $LN6@Grow
$LN5@Grow:
	mov	edx, DWORD PTR _new_size_hint$[ebp]
	mov	DWORD PTR tv135[ebp], edx
$LN6@Grow:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _new_size$[ebp], eax

; 754  : 		return Resize(new_size);

	mov	eax, DWORD PTR _new_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 755  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Grow@?$SimpleDynVecClass@PAVFileFactoryClass@@@@IAE_NH@Z ENDP ; SimpleDynVecClass<FileFactoryClass *>::Grow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$SimpleVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SimpleVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z PROC ; SimpleVecClass<FileFactoryClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SimpleVecClass@PAVFileFactoryClass@@@@UAE@XZ ; SimpleVecClass<FileFactoryClass *>::~SimpleVecClass<FileFactoryClass *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$SimpleVecClass@PAVFileFactoryClass@@@@UAEPAXI@Z ENDP ; SimpleVecClass<FileFactoryClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Uninitialised_Grow@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z
_TEXT	SEGMENT
tv129 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
?Uninitialised_Grow@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z PROC ; SimpleVecClass<FileFactoryClass *>::Uninitialised_Grow, COMDAT
; _this$ = ecx

; 683  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 684  : 		if (newsize <= VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jg	SHORT $LN3@Uninitiali

; 685  : 		{
; 686  : 			return true;

	mov	al, 1
	jmp	$LN4@Uninitiali
$LN3@Uninitiali:

; 687  : 		}
; 688  : 		if (newsize > 0)

	cmp	DWORD PTR _newsize$[ebp], 0
	jle	$LN2@Uninitiali

; 689  : 		{
; 690  : 			if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Uninitiali

; 691  : 			{
; 692  : 				delete[] Vector;

	push	OFFSET ??_C@_0DN@MIAEGPKA@SimpleVecClass?$DMclass?5FileFactory@
	push	692					; 000002b4H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Uninitiali
	xor	ecx, ecx
	jne	SHORT $LN6@Uninitiali
	push	692					; 000002b4H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Uninitiali:
	jmp	SHORT $LN1@Uninitiali
$LN7@Uninitiali:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Uninitiali:

; 693  : 			}
; 694  : 			Vector = new T[newsize];

	push	OFFSET ??_C@_0DN@MIAEGPKA@SimpleVecClass?$DMclass?5FileFactory@
	push	694					; 000002b6H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@Uninitiali
	xor	ecx, ecx
	jne	SHORT $LN9@Uninitiali
	push	694					; 000002b6H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Uninitiali:
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN11@Uninitiali
$LN10@Uninitiali:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv129[ebp], eax
$LN11@Uninitiali:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR [ecx+4], edx

; 695  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@Uninitiali:

; 696  : 		}
; 697  : 		return true;

	mov	al, 1
$LN4@Uninitiali:

; 698  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Uninitialised_Grow@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z ENDP ; SimpleVecClass<FileFactoryClass *>::Uninitialised_Grow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z
_TEXT	SEGMENT
tv83 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
_count$4 = -12						; size = 4
_vec$5 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
?Resize@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z PROC ; SimpleVecClass<FileFactoryClass *>::Resize, COMDAT
; _this$ = ecx

; 649  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		if (VectorMax == newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jne	SHORT $LN6@Resize

; 651  : 		{
; 652  : 			return true;

	mov	al, 1
	jmp	$LN7@Resize
$LN6@Resize:

; 653  : 		}
; 654  : 		if (newsize > 0)

	cmp	DWORD PTR _newsize$[ebp], 0
	jle	$LN5@Resize

; 655  : 		{
; 656  : 			T *vec = new T[newsize];

	push	OFFSET ??_C@_0DB@BECKDAJP@SimpleVecClass?$DMclass?5FileFactory@
	push	656					; 00000290H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@Resize
	xor	ecx, ecx
	jne	SHORT $LN9@Resize
	push	656					; 00000290H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN11@Resize
$LN10@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN11@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _vec$5[ebp], ecx

; 657  : 			if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN4@Resize

; 658  : 			{
; 659  : 				int count = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _count$4[ebp], ecx

; 660  : 				if (newsize < count)

	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _count$4[ebp]
	jge	SHORT $LN3@Resize

; 661  : 				{
; 662  : 					count = newsize;

	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _count$4[ebp], eax
$LN3@Resize:

; 663  : 				}
; 664  : 				memcpy(vec,Vector,count*sizeof(T));

	mov	eax, DWORD PTR _count$4[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _vec$5[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 665  : 				delete[] Vector;

	push	OFFSET ??_C@_0DB@BECKDAJP@SimpleVecClass?$DMclass?5FileFactory@
	push	665					; 00000299H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@Resize
	xor	ecx, ecx
	jne	SHORT $LN12@Resize
	push	665					; 00000299H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN12@Resize:
	jmp	SHORT $LN14@Resize
$LN13@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN14@Resize:

; 666  : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@Resize:

; 667  : 			}
; 668  : 			Vector = vec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$5[ebp]
	mov	DWORD PTR [eax+4], ecx

; 669  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 670  : 		}
; 671  : 		else

	jmp	SHORT $LN2@Resize
$LN5@Resize:

; 672  : 		{
; 673  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 674  : 			if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Resize

; 675  : 			{
; 676  : 				delete[] Vector;

	push	OFFSET ??_C@_0DB@BECKDAJP@SimpleVecClass?$DMclass?5FileFactory@
	push	676					; 000002a4H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN16@Resize
	xor	ecx, ecx
	jne	SHORT $LN15@Resize
	push	676					; 000002a4H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN15@Resize:
	jmp	SHORT $LN17@Resize
$LN16@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN17@Resize:

; 677  : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@Resize:

; 678  : 			}
; 679  : 		}
; 680  : 		return true;

	mov	al, 1
$LN7@Resize:

; 681  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Resize@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z ENDP ; SimpleVecClass<FileFactoryClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$SimpleVecClass@PAVFileFactoryClass@@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
??1?$SimpleVecClass@PAVFileFactoryClass@@@@UAE@XZ PROC	; SimpleVecClass<FileFactoryClass *>::~SimpleVecClass<FileFactoryClass *>, COMDAT
; _this$ = ecx

; 600  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SimpleVecClass@PAVFileFactoryClass@@@@6B@

; 601  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@SimpleVecC

; 602  : 		{
; 603  : 			delete[] Vector;

	push	OFFSET ??_C@_0DK@MIIPPOGF@SimpleVecClass?$DMclass?5FileFactory@
	push	603					; 0000025bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN5@SimpleVecC
	xor	ecx, ecx
	jne	SHORT $LN4@SimpleVecC
	push	603					; 0000025bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@SimpleVecC:
	jmp	SHORT $LN6@SimpleVecC
$LN5@SimpleVecC:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@SimpleVecC:

; 604  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 605  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN2@SimpleVecC:

; 606  : 		}
; 607  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$SimpleVecClass@PAVFileFactoryClass@@@@UAE@XZ ENDP	; SimpleVecClass<FileFactoryClass *>::~SimpleVecClass<FileFactoryClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$SimpleVecClass@PAVFileFactoryClass@@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$SimpleVecClass@PAVFileFactoryClass@@@@QAE@H@Z PROC	; SimpleVecClass<FileFactoryClass *>::SimpleVecClass<FileFactoryClass *>, COMDAT
; _this$ = ecx

; 590  : 	explicit SimpleVecClass(int size = 0)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SimpleVecClass@PAVFileFactoryClass@@@@6B@

; 591  : 	{
; 592  : 		Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 593  : 		VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 594  : 		if (size > 0)

	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN2@SimpleVecC

; 595  : 		{
; 596  : 			Resize(size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$SimpleVecClass@PAVFileFactoryClass@@@@UAE_NH@Z ; SimpleVecClass<FileFactoryClass *>::Resize
$LN2@SimpleVecC:

; 597  : 		}
; 598  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SimpleVecClass@PAVFileFactoryClass@@@@QAE@H@Z ENDP	; SimpleVecClass<FileFactoryClass *>::SimpleVecClass<FileFactoryClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4file_auto_ptr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z PROC			; file_auto_ptr::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z ENDP			; file_auto_ptr::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?get@file_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@file_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::get, COMDAT
; _this$ = ecx

; 202  : 	FileClass* get() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get@file_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Dfile_auto_ptr@@QAEAAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ PROC		; file_auto_ptr::operator*, COMDAT
; _this$ = ecx

; 201  : 	FileClass& operator*() { return *_Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ ENDP		; file_auto_ptr::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Bfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator FileClass *, COMDAT
; _this$ = ecx

; 200  : 	operator FileClass *() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator FileClass *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Cfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator->, COMDAT
; _this$ = ecx

; 199  : 	FileClass* operator ->() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EINIClass@@UAEPAXI@Z PROC				; INIClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1INIClass@@UAE@XZ		; INIClass::~INIClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EINIClass@@UAEPAXI@Z ENDP				; INIClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINIClass@@UAEPAXI@Z PROC				; INIClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINIClass@@UAEPAXI@Z ENDP				; INIClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4INIClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4INIClass@@QAEAAV0@ABV0@@Z PROC			; INIClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4INIClass@@QAEAAV0@ABV0@@Z ENDP			; INIClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0INIClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0INIClass@@QAE@ABV0@@Z PROC				; INIClass::INIClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INIClass@@QAE@ABV0@@Z ENDP				; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Name@INIClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Name@INIClass@@QAEPBDXZ PROC			; INIClass::Get_File_Name, COMDAT
; _this$ = ecx

; 183  : 	const char *Get_File_Name() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 		return Filename;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Name@INIClass@@QAEPBDXZ ENDP			; INIClass::Get_File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ PROC ; INIClass::Get_Section_Index, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		return *SectionIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 182  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ENDP ; INIClass::Get_Section_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ PROC ; INIClass::Get_Section_List, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return *SectionList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ENDP ; INIClass::Get_Section_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Section_Present@INIClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Section_Present@INIClass@@QBE_NPBD@Z PROC		; INIClass::Section_Present, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN3@Section_Pr
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Section_Pr
$LN3@Section_Pr:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Section_Pr:
	mov	al, BYTE PTR tv68[ebp]

; 174  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Section_Present@INIClass@@QBE_NPBD@Z ENDP		; INIClass::Section_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Is_Present@INIClass@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Is_Present@INIClass@@QBE_NPBD0@Z PROC			; INIClass::Is_Present, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@Is_Present

; 163  : 		{
; 164  : 			return Find_Entry(section,entry) != 0;

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	test	eax, eax
	je	SHORT $LN5@Is_Present
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@Is_Present
$LN5@Is_Present:
	mov	DWORD PTR tv70[ebp], 0
$LN6@Is_Present:
	mov	al, BYTE PTR tv70[ebp]
	jmp	SHORT $LN3@Is_Present

; 165  : 		}
; 166  : 		else

	jmp	SHORT $LN3@Is_Present
$LN2@Is_Present:

; 167  : 		{
; 168  : 			return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN7@Is_Present
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN8@Is_Present
$LN7@Is_Present:
	mov	DWORD PTR tv76[ebp], 0
$LN8@Is_Present:
	mov	al, BYTE PTR tv76[ebp]
$LN3@Is_Present:

; 169  : 		}
; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Is_Present@INIClass@@QBE_NPBD0@Z ENDP			; INIClass::Is_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GFileFactoryClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileFactoryClass@@UAEPAXI@Z PROC			; FileFactoryClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileFactoryClass@@UAE@XZ		; FileFactoryClass::~FileFactoryClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileFactoryClass@@UAEPAXI@Z ENDP			; FileFactoryClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0FileFactoryClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FileFactoryClass@@QAE@XZ PROC			; FileFactoryClass::FileFactoryClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileFactoryClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FileFactoryClass@@QAE@XZ ENDP			; FileFactoryClass::FileFactoryClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??1FileFactoryClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FileFactoryClass@@UAE@XZ PROC			; FileFactoryClass::~FileFactoryClass, COMDAT
; _this$ = ecx

; 59   : 	virtual ~FileFactoryClass() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileFactoryClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1FileFactoryClass@@UAE@XZ ENDP			; FileFactoryClass::~FileFactoryClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkSaveClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z PROC			; ChunkSaveClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkSaveClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ PROC	; ChunkSaveClass::Set_Contains_Chunks, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		HeaderStack[StackIndex-1].ChunkSize |= 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*8+1028], eax

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ ENDP	; ChunkSaveClass::Set_Contains_Chunks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkLoadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z PROC			; ChunkLoadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkLoadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EStringClass@@QAEPAXI@Z PROC				; StringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1StringClass@@QAE@XZ		; StringClass::~StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EStringClass@@QAEPAXI@Z ENDP				; StringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_FStringClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FStringClass@@QAEXXZ PROC				; StringClass::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_FStringClass@@QAEXXZ ENDP				; StringClass::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv74 = -92						; size = 4
tv91 = -85						; size = 1
tv88 = -84						; size = 4
tv85 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv85[ebp]
	add	edx, 1
	mov	DWORD PTR tv88[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv85[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv91[ebp], cl
	add	DWORD PTR tv85[ebp], 1
	cmp	BYTE PTR tv91[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv85[ebp]
	sub	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv74[ebp], edx
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Compare@StringClass@@QBEHPBD@Z
_TEXT	SEGMENT
tv68 = -88						; size = 4
tv88 = -84						; size = 4
tv83 = -78						; size = 1
tv76 = -77						; size = 1
tv70 = -76						; size = 4
tv72 = -72						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?Compare@StringClass@@QBEHPBD@Z PROC			; StringClass::Compare, COMDAT
; _this$ = ecx

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 	return strcmp (m_Buffer, string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv70[ebp], edx
$LL3@Compare:
	mov	eax, DWORD PTR tv70[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv76[ebp], cl
	mov	edx, DWORD PTR tv72[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN4@Compare
	cmp	BYTE PTR tv76[ebp], 0
	je	SHORT $LN5@Compare
	mov	eax, DWORD PTR tv70[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv83[ebp], cl
	mov	edx, DWORD PTR tv72[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN4@Compare
	add	DWORD PTR tv70[ebp], 2
	add	DWORD PTR tv72[ebp], 2
	cmp	BYTE PTR tv83[ebp], 0
	jne	SHORT $LL3@Compare
$LN5@Compare:
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN6@Compare
$LN4@Compare:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv88[ebp], eax
$LN6@Compare:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	eax, DWORD PTR tv68[ebp]

; 378  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@StringClass@@QBEHPBD@Z ENDP			; StringClass::Compare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BStringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BStringClass@@QBEPBDXZ PROC				; StringClass::operator char const *, COMDAT
; _this$ = ecx

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BStringClass@@QBEPBDXZ ENDP				; StringClass::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@ABV0@@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 279  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	int len = string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _len$[ebp], eax

; 281  : 	Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 282  : 	Store_Length(len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 283  : 	memcpy (m_Buffer, string.m_Buffer, (len+1) * sizeof (char));		

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 284  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@ABV0@@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??9StringClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??9StringClass@@QBE_NPBD@Z PROC				; StringClass::operator!=, COMDAT
; _this$ = ecx

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 407  : 	return (Compare (rvalue) != 0);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Compare@StringClass@@QBEHPBD@Z		; StringClass::Compare
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]

; 408  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9StringClass@@QBE_NPBD@Z ENDP				; StringClass::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??8StringClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??8StringClass@@QBE_NPBD@Z PROC				; StringClass::operator==, COMDAT
; _this$ = ecx

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (Compare (rvalue) == 0);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Compare@StringClass@@QBEHPBD@Z		; StringClass::Compare
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]

; 403  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8StringClass@@QBE_NPBD@Z ENDP				; StringClass::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1StringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringClass@@QAE@XZ PROC				; StringClass::~StringClass, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@StringClass@@AAEXXZ

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StringClass@@QAE@XZ ENDP				; StringClass::~StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@PBD_N@Z
_TEXT	SEGMENT
tv70 = -92						; size = 4
tv68 = -88						; size = 4
tv90 = -81						; size = 1
tv87 = -80						; size = 4
tv84 = -76						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@PBD_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 347  : 	int len=string ? (int)strlen(string) : 0;

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN5@StringClas
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	add	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
$LL7@StringClas:
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv90[ebp], al
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL7@StringClas
	mov	ecx, DWORD PTR tv84[ebp]
	sub	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@StringClas
$LN5@StringClas:
	mov	DWORD PTR tv70[ebp], 0
$LN6@StringClas:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 348  : 	if (hint_temporary || len>0)

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 349  : 	{
; 350  : 		Get_String (len+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z
$LN2@StringClas:

; 351  : 	}
; 352  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 353  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@PBD_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@H_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 326  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 327  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 328  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@H_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??_U@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??_U@YAPAXIPAX@Z PROC					; operator new[], COMDAT

; 71   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 72   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_U@YAPAXIPAX@Z ENDP					; operator new[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
