; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\Matrix3D.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_atanf
PUBLIC	_atan2f
PUBLIC	_ceilf
PUBLIC	_cosf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?Fabs@WWMath@@SAMM@Z				; WWMath::Fabs
PUBLIC	?Float_To_Int_Chop@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Chop
PUBLIC	?Float_To_Int_Floor@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Floor
PUBLIC	?Cos@WWMath@@SAMM@Z				; WWMath::Cos
PUBLIC	?Sin@WWMath@@SAMM@Z				; WWMath::Sin
PUBLIC	?Sqrt@WWMath@@SAMM@Z				; WWMath::Sqrt
PUBLIC	?Inv_Sqrt@WWMath@@SIMM@Z			; WWMath::Inv_Sqrt
PUBLIC	?Float_To_Long@WWMath@@SAJM@Z			; WWMath::Float_To_Long
PUBLIC	?Fast_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Sin
PUBLIC	?Fast_Inv_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Sin
PUBLIC	?Fast_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Cos
PUBLIC	?Fast_Inv_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Cos
PUBLIC	?Fast_Acos@WWMath@@SAMM@Z			; WWMath::Fast_Acos
PUBLIC	?Fast_Asin@WWMath@@SAMM@Z			; WWMath::Fast_Asin
PUBLIC	?Acos@WWMath@@SAMM@Z				; WWMath::Acos
PUBLIC	?Asin@WWMath@@SAMM@Z				; WWMath::Asin
PUBLIC	?Atan@WWMath@@SAMM@Z				; WWMath::Atan
PUBLIC	?Atan2@WWMath@@SAMMM@Z				; WWMath::Atan2
PUBLIC	?Sign@WWMath@@SAMM@Z				; WWMath::Sign
PUBLIC	?Ceil@WWMath@@SAMM@Z				; WWMath::Ceil
PUBLIC	?Floor@WWMath@@SAMM@Z				; WWMath::Floor
PUBLIC	?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z	; WWMath::Fast_Is_Float_Positive
PUBLIC	?Random_Float@WWMath@@SAMMM@Z			; WWMath::Random_Float
PUBLIC	?Clamp@WWMath@@SAMMMM@Z				; WWMath::Clamp
PUBLIC	?Clamp@WWMath@@SANNNN@Z				; WWMath::Clamp
PUBLIC	?Clamp_Int@WWMath@@SAHHHH@Z			; WWMath::Clamp_Int
PUBLIC	?Wrap@WWMath@@SAMMMM@Z				; WWMath::Wrap
PUBLIC	?Wrap@WWMath@@SANNNN@Z				; WWMath::Wrap
PUBLIC	?Min@WWMath@@SAMMM@Z				; WWMath::Min
PUBLIC	?Max@WWMath@@SAMMM@Z				; WWMath::Max
PUBLIC	?Lerp@WWMath@@SAMMMM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SANNNM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SAHHHM@Z				; WWMath::Lerp
PUBLIC	?Float_To_Long@WWMath@@SAJN@Z			; WWMath::Float_To_Long
PUBLIC	?Unit_Float_To_Byte@WWMath@@SAEM@Z		; WWMath::Unit_Float_To_Byte
PUBLIC	?Byte_To_Unit_Float@WWMath@@SAME@Z		; WWMath::Byte_To_Unit_Float
PUBLIC	?Is_Valid_Float@WWMath@@SA_NM@Z			; WWMath::Is_Valid_Float
PUBLIC	?Is_Valid_Double@WWMath@@SA_NN@Z		; WWMath::Is_Valid_Double
PUBLIC	??4WWMath@@QAEAAV0@ABV0@@Z			; WWMath::operator=
PUBLIC	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ		; RefArrayHelper<float,1024>::operator float *
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@ABV0@@Z				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@MMM@Z				; Vector3::Vector3
PUBLIC	??4Vector3@@QAEAAV0@ABV0@@Z			; Vector3::operator=
PUBLIC	?Set@Vector3@@QAEXMMM@Z				; Vector3::Set
PUBLIC	??AVector3@@QAEAAMH@Z				; Vector3::operator[]
PUBLIC	??AVector3@@QBEABMH@Z				; Vector3::operator[]
PUBLIC	?Length@Vector3@@QBEMXZ				; Vector3::Length
PUBLIC	?Length2@Vector3@@QBEMXZ			; Vector3::Length2
PUBLIC	??GVector3@@QBE?AV0@XZ				; Vector3::operator-
PUBLIC	??YVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator+=
PUBLIC	??ZVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator-=
PUBLIC	??XVector3@@QAEAAV0@M@Z				; Vector3::operator*=
PUBLIC	??_0Vector3@@QAEAAV0@M@Z			; Vector3::operator/=
PUBLIC	??D@YA?AVVector3@@MABV0@@Z			; operator*
PUBLIC	??D@YAMABVVector3@@0@Z				; operator*
PUBLIC	?Dot_Product@Vector3@@SAMABV1@0@Z		; Vector3::Dot_Product
PUBLIC	?Cross_Product@Vector3@@SAXABV1@0PIAV1@@Z	; Vector3::Cross_Product
PUBLIC	?Add@Vector3@@SAXABV1@0PAV1@@Z			; Vector3::Add
PUBLIC	?Subtract@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Subtract
PUBLIC	?Swap@@YAXAAVVector3@@0@Z			; Swap
PUBLIC	??0Vector4@@QAE@XZ				; Vector4::Vector4
PUBLIC	??0Vector4@@QAE@MMMM@Z				; Vector4::Vector4
PUBLIC	??4Vector4@@QAEAAV0@ABV0@@Z			; Vector4::operator=
PUBLIC	?Set@Vector4@@QAEXMMMM@Z			; Vector4::Set
PUBLIC	??AVector4@@QAEAAMH@Z				; Vector4::operator[]
PUBLIC	??AVector4@@QBEABMH@Z				; Vector4::operator[]
PUBLIC	??YVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator+=
PUBLIC	??ZVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator-=
PUBLIC	??XVector4@@QAEAAV0@M@Z				; Vector4::operator*=
PUBLIC	??D@YA?AVVector4@@ABV0@M@Z			; operator*
PUBLIC	??D@YA?AVVector4@@MABV0@@Z			; operator*
PUBLIC	??AMatrix3D@@QAEAAVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??AMatrix3D@@QBEABVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??0Matrix3D@@QAE@_N@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@QAM@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@000@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@M@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@MM@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@@Z			; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABV0@@Z			; Matrix3D::Matrix3D
PUBLIC	??4Matrix3D@@QAEAAV0@ABV0@@Z			; Matrix3D::operator=
PUBLIC	??0Matrix3D@@QAE@XZ				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@MMMMMMMMMMMM@Z			; Matrix3D::Matrix3D
PUBLIC	?Get_Orthogonal_Inverse@Matrix3D@@QBEXAAV1@@Z	; Matrix3D::Get_Orthogonal_Inverse
PUBLIC	?Get_X_Rotation@Matrix3D@@QBEMXZ		; Matrix3D::Get_X_Rotation
PUBLIC	?Get_Y_Rotation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Y_Rotation
PUBLIC	?Get_Z_Rotation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Z_Rotation
PUBLIC	?Look_At@Matrix3D@@QAEXABVVector3@@0M@Z		; Matrix3D::Look_At
PUBLIC	?Obj_Look_At@Matrix3D@@QAEXABVVector3@@0M@Z	; Matrix3D::Obj_Look_At
PUBLIC	?Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z	; Matrix3D::Rotate_Vector
PUBLIC	?Inverse_Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z ; Matrix3D::Inverse_Rotate_Vector
PUBLIC	?Set@Matrix3D@@QAEXQAM@Z			; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@000@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@M@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@MM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z	; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z ; Matrix3D::Set
PUBLIC	?Set_Rotation@Matrix3D@@QAEXABVQuaternion@@@Z	; Matrix3D::Set_Rotation
PUBLIC	?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Translation
PUBLIC	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Translation
PUBLIC	?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set_Translation
PUBLIC	?Set_Rotation@Matrix3D@@QAEXABVMatrix3@@@Z	; Matrix3D::Set_Rotation
PUBLIC	?Get_X_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_X_Translation
PUBLIC	?Get_Y_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Y_Translation
PUBLIC	?Get_Z_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Z_Translation
PUBLIC	?Set_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_X_Translation
PUBLIC	?Set_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Y_Translation
PUBLIC	?Set_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Z_Translation
PUBLIC	?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ; Matrix3D::Adjust_Translation
PUBLIC	?Adjust_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_X_Translation
PUBLIC	?Adjust_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Y_Translation
PUBLIC	?Adjust_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Z_Translation
PUBLIC	?Make_Identity@Matrix3D@@QAEXXZ			; Matrix3D::Make_Identity
PUBLIC	?Translate@Matrix3D@@QAEXMMM@Z			; Matrix3D::Translate
PUBLIC	?Translate@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Translate
PUBLIC	?Translate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_X
PUBLIC	?Translate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Y
PUBLIC	?Translate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Scale@Matrix3D@@QAEXM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXMMM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXAAVVector3@@@Z		; Matrix3D::Scale
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Z
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?Is_Orthogonal@Matrix3D@@QBEHXZ			; Matrix3D::Is_Orthogonal
PUBLIC	??XMatrix3D@@QAEAAV0@ABV0@@Z			; Matrix3D::operator*=
PUBLIC	??DMatrix3D@@QBE?AVVector3@@ABV1@@Z		; Matrix3D::operator*
PUBLIC	?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Transform_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Z_Vector
PUBLIC	?Get_Inverse@Matrix3D@@QBEXAAV1@@Z		; Matrix3D::Get_Inverse
PUBLIC	?Copy_3x3_Matrix@Matrix3D@@QAEXQAY02M@Z		; Matrix3D::Copy_3x3_Matrix
PUBLIC	?Transform_Min_Max_AABox@Matrix3D@@QBEXABVVector3@@0PAV2@1@Z ; Matrix3D::Transform_Min_Max_AABox
PUBLIC	?Transform_Center_Extent_AABox@Matrix3D@@QBEXABVVector3@@0PAV2@1@Z ; Matrix3D::Transform_Center_Extent_AABox
PUBLIC	?Multiply@Matrix3D@@SAXABV1@0PAV1@@Z		; Matrix3D::Multiply
PUBLIC	?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Rotate_Vector
PUBLIC	?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Transform_Vector
PUBLIC	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
PUBLIC	?Reflect_Plane@Matrix3D@@SA?AV1@ABVPlaneClass@@@Z ; Matrix3D::Reflect_Plane
PUBLIC	?Transform_Plane@Matrix3D@@QBE?AVPlaneClass@@ABV2@@Z ; Matrix3D::Transform_Plane
PUBLIC	?Solve_Linear_System@Matrix3D@@SA_NAAV1@@Z	; Matrix3D::Solve_Linear_System
PUBLIC	?Re_Orthogonalize@Matrix3D@@QAEXXZ		; Matrix3D::Re_Orthogonalize
PUBLIC	??0PlaneClass@@QAE@XZ				; PlaneClass::PlaneClass
PUBLIC	?Normalize@PlaneClass@@QAEXXZ			; PlaneClass::Normalize
PUBLIC	??0PlaneClass@@QAE@ABV0@@Z			; PlaneClass::PlaneClass
PUBLIC	??0Matrix4@@QAE@XZ				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABV0@@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@_N@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVMatrix3D@@@Z			; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVVector4@@000@Z		; Matrix4::Matrix4
PUBLIC	?Make_Identity@Matrix4@@QAEXXZ			; Matrix4::Make_Identity
PUBLIC	?Init@Matrix4@@QAEXABVMatrix3D@@@Z		; Matrix4::Init
PUBLIC	?Init@Matrix4@@QAEXABVVector4@@000@Z		; Matrix4::Init
PUBLIC	?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Ortho@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho
PUBLIC	?Init_Perspective@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Perspective
PUBLIC	??AMatrix4@@QAEAAVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	??AMatrix4@@QBEABVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	?Transpose@Matrix4@@QBE?AV1@XZ			; Matrix4::Transpose
PUBLIC	?Determinant@Matrix4@@QBEMXZ			; Matrix4::Determinant
PUBLIC	?Inverse@Matrix4@@QBE?AV1@XZ			; Matrix4::Inverse
PUBLIC	??4Matrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator=
PUBLIC	??YMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator+=
PUBLIC	??ZMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator-=
PUBLIC	??XMatrix4@@QAEAAV0@M@Z				; Matrix4::operator*=
PUBLIC	??_0Matrix4@@QAEAAV0@M@Z			; Matrix4::operator/=
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	??0Matrix3@@QAE@XZ				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABV0@@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@_N@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@00@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@MMMMMMMMM@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@M@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@MM@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVQuaternion@@@Z		; Matrix3::Matrix3
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@00@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXMMMMMMMMM@Z			; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@M@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@MM@Z		; Matrix3::Set
PUBLIC	??AMatrix3@@QAEAAVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	??AMatrix3@@QBEABVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	?Transpose@Matrix3@@QBE?AV1@XZ			; Matrix3::Transpose
PUBLIC	?Determinant@Matrix3@@QBEMXZ			; Matrix3::Determinant
PUBLIC	??4Matrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator=
PUBLIC	??YMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator+=
PUBLIC	??ZMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator-=
PUBLIC	??XMatrix3@@QAEAAV0@M@Z				; Matrix3::operator*=
PUBLIC	??_0Matrix3@@QAEAAV0@M@Z			; Matrix3::operator/=
PUBLIC	?Make_Identity@Matrix3@@QAEXXZ			; Matrix3::Make_Identity
PUBLIC	?Rotate_X@Matrix3@@QAEXM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_X@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_Y@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Y@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Z
PUBLIC	?Rotate_Z@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Z
PUBLIC	?Get_X_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_X_Rotation
PUBLIC	?Get_Y_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Y_Rotation
PUBLIC	?Get_Z_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Z_Rotation
PUBLIC	?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Z_Vector
PUBLIC	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z		; operator*
PUBLIC	?Add@Matrix3@@SAXABV1@0PAV1@@Z			; Matrix3::Add
PUBLIC	?Subtract@Matrix3@@SAXABV1@0PAV1@@Z		; Matrix3::Subtract
PUBLIC	?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Rotate_Vector
PUBLIC	?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Transpose_Rotate_Vector
PUBLIC	?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ; Matrix3::Rotate_AABox_Extent
PUBLIC	?Inverse@Matrix3@@QBE?AV1@XZ			; Matrix3::Inverse
PUBLIC	??AQuaternion@@QBEABMH@Z			; Quaternion::operator[]
PUBLIC	?Identity@Matrix3D@@2V1@A			; Matrix3D::Identity
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3f79999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@437f0000
PUBLIC	__real@44000000
PUBLIC	__real@44800000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__ceil:PROC
EXTRN	?Random_Float@WWMath@@SAMXZ:PROC		; WWMath::Random_Float
EXTRN	?Set@Matrix3@@QAEXABVQuaternion@@@Z:PROC	; Matrix3::Set
EXTRN	__CIatan2:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_asin_precise:PROC
EXTRN	__libm_sse2_atan_precise:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__libm_sse2_tan_precise:PROC
EXTRN	_floor:PROC
EXTRN	?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAcosTable
EXTRN	?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAsinTable
EXTRN	?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastSinTable
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?Identity@Matrix3D@@2V1@A DB 030H DUP (?)		; Matrix3D::Identity
_BSS	ENDS
CRT$XCU	SEGMENT
?Identity$initializer$@Matrix3D@@2P6AXXZA DD FLAT:??__E?Identity@Matrix3D@@2V1@A@@YAXXZ ; Matrix3D::Identity$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f79999a
CONST	SEGMENT
__real@3f79999a DD 03f79999ar			; 0.975
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ??__E?Identity@Matrix3D@@2V1@A@@YAXXZ
text$yc	SEGMENT
??__E?Identity@Matrix3D@@2V1@A@@YAXXZ PROC		; `dynamic initializer for 'Matrix3D::Identity'', COMDAT

; 20   :                              0, 0, 1, 0);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Identity@Matrix3D@@2V1@A	; Matrix3D::Identity
	call	??0Matrix3D@@QAE@MMMMMMMMMMMM@Z		; Matrix3D::Matrix3D
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?Identity@Matrix3D@@2V1@A@@YAXXZ ENDP		; `dynamic initializer for 'Matrix3D::Identity''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\quaternion.h
;	COMDAT ??AQuaternion@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AQuaternion@@QBEABMH@Z PROC				; Quaternion::operator[], COMDAT
; _this$ = ecx

; 57   : 	const float &  operator [](int i) const { return (&X)[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AQuaternion@@QBEABMH@Z ENDP				; Quaternion::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Inverse@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
tv222 = -188						; size = 4
tv272 = -184						; size = 4
tv212 = -180						; size = 4
$T1 = -176						; size = 12
$T2 = -164						; size = 12
_i1$ = -88						; size = 4
_j$ = -84						; size = 4
_i$ = -80						; size = 4
_b$ = -76						; size = 36
_a$ = -40						; size = 36
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Inverse, COMDAT
; _this$ = ecx

; 309  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 310  : 		Matrix3 a(*this);				// As a evolves from original mat into identity

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3

; 311  : 		Matrix3 b(true);				// b evolves from identity into inverse(a)

	push	1
	lea	ecx, DWORD PTR _b$[ebp]
	call	??0Matrix3@@QAE@_N@Z			; Matrix3::Matrix3

; 312  : 		int i, j, i1;
; 313  : 
; 314  : 		// Loop over cols of a from left to right, eliminating above and below diagonal
; 315  : 		for (j=0; j<3; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@Inverse
$LN11@Inverse:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@Inverse:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN10@Inverse

; 316  : 
; 317  : 			// Find largest pivot in column j among rows j..3
; 318  : 			i1 = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i1$[ebp], eax

; 319  : 			for (i=j+1; i<3; i++) {

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@Inverse
$LN8@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN7@Inverse

; 320  : 				if (WWMath::Fabs(a[i][j]) > WWMath::Fabs(a[i1][j])) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv212[ebp]
	movss	xmm0, DWORD PTR tv212[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv222[ebp]
	movss	xmm0, DWORD PTR tv272[ebp]
	comiss	xmm0, DWORD PTR tv222[ebp]
	jbe	SHORT $LN6@Inverse

; 321  : 					i1 = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i1$[ebp], eax
$LN6@Inverse:

; 322  : 				}
; 323  : 			}

	jmp	$LN8@Inverse
$LN7@Inverse:

; 324  : 
; 325  : 			// Swap rows i1 and j in a and b to put pivot on diagonal
; 326  : 			Swap(a.Row[i1], a.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _a$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 327  : 			Swap(b.Row[i1], b.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _b$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 328  : 
; 329  : 			// Scale row j to have a unit diagonal
; 330  : 			if (a[j][j]==0.) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]

; 331  : 				//Matrix3::inverse: singular matrix; can't invert
; 332  : 			}
; 333  : 			b.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 334  : 			a.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 335  : 
; 336  : 			// Eliminate off-diagonal elems in col j of a, doing identical ops to b
; 337  : 			for (i=0; i<3; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Inverse
$LN3@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN2@Inverse

; 338  : 				if (i != j) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	je	$LN1@Inverse

; 339  : 					b.Row[i] -= a[i][j] * b.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 340  : 					a.Row[i] -= a[i][j] * a.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
$LN1@Inverse:

; 341  : 				}
; 342  : 			}

	jmp	$LN3@Inverse
$LN2@Inverse:

; 343  : 		}

	jmp	$LN11@Inverse
$LN10@Inverse:

; 344  : 		return b;

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 345  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
tv86 = -80						; size = 4
_j$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_extent$ = 8						; size = 4
_new_extent$ = 12					; size = 4
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_AABox_Extent, COMDAT
; _this$ = ecx

; 298  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 		for (int i=0; i<3; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@Rotate_AAB
$LN5@Rotate_AAB:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@Rotate_AAB:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	$LN4@Rotate_AAB

; 300  : 		{
; 301  : 			(*new_extent)[i] = 0.0f;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 302  : 			for (int j=0; j<3; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN3@Rotate_AAB
$LN2@Rotate_AAB:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN3@Rotate_AAB:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	SHORT $LN1@Rotate_AAB

; 303  : 			{
; 304  : 				(*new_extent)[i] += WWMath::Fabs(Row[i][j] * extent[j]);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _j$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _extent$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR tv137[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 305  : 			}

	jmp	SHORT $LN2@Rotate_AAB
$LN1@Rotate_AAB:

; 306  : 		}

	jmp	$LN5@Rotate_AAB
$LN4@Rotate_AAB:

; 307  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_AABox_Extent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Transpose_Rotate_Vector, COMDAT

; 283  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 284  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 285  : 		Vector3 * v;
; 286  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transpose_

; 287  : 		{
; 288  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 289  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 290  : 		} else {

	jmp	SHORT $LN1@Transpose_
$LN2@Transpose_:

; 291  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transpose_:

; 292  : 		}
; 293  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 294  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 295  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 296  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Transpose_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_Vector, COMDAT

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 267  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 268  : 		Vector3 * v;
; 269  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 270  : 		{
; 271  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 272  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 273  : 		}
; 274  : 		else

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 275  : 		{
; 276  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 277  : 		}
; 278  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 279  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 280  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Subtract@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z PROC		; Matrix3::Subtract, COMDAT

; 257  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 258  : 		Vector3::Subtract(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 259  : 		Vector3::Subtract(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 260  : 		Vector3::Subtract(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 261  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z ENDP		; Matrix3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Add@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Add@Matrix3@@SAXABV1@0PAV1@@Z PROC			; Matrix3::Add, COMDAT

; 251  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 252  : 		Vector3::Add(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 253  : 		Vector3::Add(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 254  : 		Vector3::Add(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 255  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Matrix3@@SAXABV1@0PAV1@@Z ENDP			; Matrix3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z
_TEXT	SEGMENT
tv246 = -88						; size = 4
tv244 = -84						; size = 4
tv242 = -80						; size = 4
tv240 = -76						; size = 4
tv238 = -72						; size = 4
tv236 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z PROC		; operator*, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 399  : 	return Vector3(
; 400  : 		a[0][0] * v[0] + a[0][1] * v[1] + a[0][2] * v[2],
; 401  : 		a[1][0] * v[0] + a[1][1] * v[1] + a[1][2] * v[2],
; 402  : 		a[2][0] * v[0] + a[2][1] * v[1] + a[2][2] * v[2] 
; 403  : 	);

	push	0
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv236[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv236[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv238[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv238[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv240[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv242[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv242[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv244[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv246[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv246[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 404  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z ENDP		; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 234  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		set_z->Set(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 236  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 		set_y->Set(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 232  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 226  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 		set_x->Set(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 228  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 222  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 		return Vector3(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 		return Vector3(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 220  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 214  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 		return Vector3(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Z_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Z_Rotation, COMDAT
; _this$ = ecx

; 209  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		Vector3 v = (*this) * Vector3(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 211  : 		return atan2(v[1],v[0]);

	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 212  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Z_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Y_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Y_Rotation, COMDAT
; _this$ = ecx

; 204  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 		Vector3 v = (*this) * Vector3(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 206  : 		return atan2(v[0],v[2]);

	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 207  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Y_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_X_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_X_Rotation, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		Vector3 v = (*this) * Vector3(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 201  : 		return atan2(v[2], v[1]);

	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 202  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_X_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		float tmp1,tmp2;
; 188  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 189  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 190  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 191  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 192  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 193  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 194  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 195  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 196  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		Rotate_Z(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Z@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Z

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 169  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		float tmp1,tmp2;
; 171  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 172  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 173  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 174  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 175  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 176  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 177  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 178  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 180  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		Rotate_Y(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Y@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Y

; 167  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		float tmp1,tmp2;
; 154  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 155  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 156  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 157  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 158  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 159  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 160  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 161  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 162  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 163  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		Rotate_X(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_X@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_X

; 150  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Make_Identity@Matrix3@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3@@QAEXXZ PROC			; Matrix3::Make_Identity, COMDAT
; _this$ = ecx

; 142  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		Row[0].Set(1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 144  : 		Row[1].Set(0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 145  : 		Row[2].Set(0.0f,0.0f,1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 146  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3@@QAEXXZ ENDP			; Matrix3::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??_0Matrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator/=, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		Row[0] /= d; Row[1] /= d; Row[2] /= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 139  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??XMatrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator*=, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=

; 134  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??ZMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator-=, COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 129  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 130  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??YMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator+=, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 124  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??4Matrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator=, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 117  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 118  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Determinant@Matrix3@@QBEMXZ
_TEXT	SEGMENT
tv243 = -92						; size = 4
tv255 = -88						; size = 4
tv253 = -84						; size = 4
tv251 = -80						; size = 4
tv249 = -76						; size = 4
tv247 = -72						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix3@@QBEMXZ PROC			; Matrix3::Determinant, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return   Row[0][0] * (Row[1][1] * Row[2][2] - Row[1][2] * Row[2][1])
; 111  : 				- Row[0][1] * (Row[1][0] * Row[2][2] - Row[1][2] * Row[2][0])
; 112  : 				- Row[0][2] * (Row[1][0] * Row[2][1] - Row[1][1] * Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv247[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm1
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv251[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv249[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv255[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv253[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR tv243[ebp], xmm0
	fld	DWORD PTR tv243[ebp]

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix3@@QBEMXZ ENDP			; Matrix3::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -104						; size = 12
$T2 = -92						; size = 12
$T3 = -80						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Transpose, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 		return Matrix3(
; 103  : 				Vector3(Row[0][0], Row[1][0], Row[2][0]),
; 104  : 				Vector3(Row[0][1], Row[1][1], Row[2][1]),
; 105  : 				Vector3(Row[0][2], Row[1][2], Row[2][2])
; 106  : 		);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABVVector3@@00@Z	; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QBEABVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QBEABVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 99   : 	TT_INLINE const Vector3 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QBEABVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QAEAAVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QAEAAVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 98   : 	TT_INLINE Vector3 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QAEAAVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv359 = -80						; size = 4
tv353 = -80						; size = 4
tv347 = -80						; size = 4
tv357 = -76						; size = 4
tv351 = -76						; size = 4
tv345 = -76						; size = 4
tv355 = -72						; size = 4
tv349 = -72						; size = 4
tv343 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@MM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Row[0].Set(
; 82   : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 83   : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 84   : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s)
; 85   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv343[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv343[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv345[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv345[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv347[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv347[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 86   : 		Row[1].Set(
; 87   : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 88   : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 89   : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s)
; 90   : 		);

	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv349[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv349[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv351[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv351[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv353[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv353[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 91   : 	Row[2].Set(
; 92   : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 93   : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 94   : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2]))
; 95   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv355[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv355[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv357[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv357[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv359[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv359[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@MM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3@@QAEXABVVector3@@M@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Set(axis,sinf(angle),cosf(angle));

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3@@QAEXABVVector3@@M@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
?Set@Matrix3@@QAEXMMMMMMMMM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 72   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 73   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 74   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Set@Matrix3@@QAEXMMMMMMMMM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@00@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 64   : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 66   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 67   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@00@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVQuaternion@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
??0Matrix3@@QAE@ABVQuaternion@@@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE Matrix3(const Quaternion & q)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		this->Set(q);

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVQuaternion@@@Z	; Matrix3::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABVQuaternion@@@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s_angle$ = 12						; size = 4
_c_angle$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@MM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float s_angle,float c_angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{ 
; 55   : 		Set(axis,s_angle,c_angle); 

	push	ecx
	movss	xmm0, DWORD PTR _c_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3@@QAE@ABVVector3@@M@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{ 
; 51   : 		Set(axis,angle); 

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@M@Z	; Matrix3::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3@@QAE@ABVVector3@@M@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
??0Matrix3@@QAE@MMMMMMMMM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 43   : 	TT_INLINE explicit Matrix3(float m11,float m12,float m13,float m21,float m22,float m23,float m31,float m32,float m33)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 44   : 	{
; 45   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 46   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 47   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0Matrix3@@QAE@MMMMMMMMM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@00@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE explicit Matrix3(const Vector3 & v0, const Vector3 & v1, const Vector3 & v2)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 36   : 	{ 
; 37   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 38   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 39   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@00@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix3@@QAE@_N@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE explicit Matrix3(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 27   : 	{
; 28   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	$LN1@Matrix3

; 29   : 		{
; 30   : 			Row[0].Set(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 31   : 			Row[1].Set(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 32   : 			Row[2].Set(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
$LN1@Matrix3:

; 33   : 		}
; 34   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@_N@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3@@QAE@ABV0@@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix3(const Matrix3 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 25   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABV0@@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix3@@QAE@XZ PROC					; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 21   : 	TT_INLINE Matrix3(void) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix3@@QAE@XZ ENDP					; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z
_TEXT	SEGMENT
tv342 = -96						; size = 4
tv336 = -96						; size = 4
tv330 = -96						; size = 4
tv324 = -96						; size = 4
tv340 = -92						; size = 4
tv334 = -92						; size = 4
tv328 = -92						; size = 4
tv322 = -92						; size = 4
tv338 = -88						; size = 4
tv332 = -88						; size = 4
tv326 = -88						; size = 4
tv320 = -88						; size = 4
_v$ = -20						; size = 4
_tmp$ = -16						; size = 16
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 227  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 228  : 		Vector4 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector4@@QAE@XZ			; Vector4::Vector4

; 229  : 		Vector4 * v;
; 230  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 231  : 		{
; 232  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 233  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 234  : 		}
; 235  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 236  : 		{
; 237  : 			v = (Vector4 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 238  : 		}
; 239  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3] * v->W);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv320[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv320[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv322[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv322[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv324[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv324[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax], xmm1

; 240  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3] * v->W);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv326[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv326[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv328[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv328[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv330[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv330[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 241  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3] * v->W);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv332[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv332[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv334[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv334[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv336[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv336[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 242  : 		out->W = (A[3][0] * v->X + A[3][1] * v->Y + A[3][2] * v->Z + A[3][3] * v->W);

	push	0
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv338[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv338[ebp]
	addss	xmm1, xmm0
	push	2
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv340[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv340[ebp]
	addss	xmm1, xmm0
	push	3
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv342[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv342[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 243  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z
_TEXT	SEGMENT
tv265 = -76						; size = 4
tv259 = -76						; size = 4
tv253 = -76						; size = 4
tv263 = -72						; size = 4
tv257 = -72						; size = 4
tv251 = -72						; size = 4
tv261 = -68						; size = 4
tv255 = -68						; size = 4
tv249 = -68						; size = 4
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 220  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 221  : 		out->X = (A[0][0] * in.X + A[0][1] * in.Y + A[0][2] * in.Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv249[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv251[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv251[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv253[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 222  : 		out->Y = (A[1][0] * in.X + A[1][1] * in.Y + A[1][2] * in.Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv255[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv257[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv257[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv259[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv259[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 223  : 		out->Z = (A[2][0] * in.X + A[2][1] * in.Y + A[2][2] * in.Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv261[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv261[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv263[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv263[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv265[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv265[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 224  : 		out->W = 1.0f;

	mov	eax, DWORD PTR _out$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 225  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 204  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 205  : 		Vector3 *v;
; 206  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 207  : 		{
; 208  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 209  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 210  : 		}
; 211  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 212  : 		{
; 213  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 214  : 		}
; 215  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 216  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 217  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 218  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??_0Matrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_ood$ = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator/=, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 		float ood = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _ood$[ebp], xmm0

; 179  : 		Row[0] *= ood; Row[1] *= ood; Row[2] *= ood; Row[3] *= ood;

	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 180  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 181  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??XMatrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator*=, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; Row[3] *= d;

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 174  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 175  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??ZMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator-=, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; Row[3] -= m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 169  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??YMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator+=, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; Row[3] += m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=

; 164  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 165  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??4Matrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 159  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Inverse@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
_t$ = -72						; size = 64
_s$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Inverse, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		float s = Determinant();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Determinant@Matrix4@@QBEMXZ		; Matrix4::Determinant
	fstp	DWORD PTR _s$[ebp]

; 135  : 		if (s == 0.0) return Matrix4();

	cvtss2sd xmm0, DWORD PTR _s$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Inverse
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN2@Inverse
$LN1@Inverse:

; 136  : 		s = 1/s;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _s$[ebp], xmm0

; 137  : 		Matrix4 t;

	lea	ecx, DWORD PTR _t$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4

; 138  : 		t.Row[0].X = s*(Row[1].Y*(Row[2].Z*Row[3].W - Row[2].W*Row[3].Z) + Row[1].Z*(Row[2].W*Row[3].Y - Row[2].Y*Row[3].W) + Row[1].W*(Row[2].Y*Row[3].Z - Row[2].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 139  : 		t.Row[0].Y = s*(Row[2].Y*(Row[0].Z*Row[3].W - Row[0].W*Row[3].Z) + Row[2].Z*(Row[0].W*Row[3].Y - Row[0].Y*Row[3].W) + Row[2].W*(Row[0].Y*Row[3].Z - Row[0].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 140  : 		t.Row[0].Z = s*(Row[3].Y*(Row[0].Z*Row[1].W - Row[0].W*Row[1].Z) + Row[3].Z*(Row[0].W*Row[1].Y - Row[0].Y*Row[1].W) + Row[3].W*(Row[0].Y*Row[1].Z - Row[0].Z*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 141  : 		t.Row[0].W = s*(Row[0].Y*(Row[1].W*Row[2].Z - Row[1].Z*Row[2].W) + Row[0].Z*(Row[1].Y*Row[2].W - Row[1].W*Row[2].Y) + Row[0].W*(Row[1].Z*Row[2].Y - Row[1].Y*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 142  : 		t.Row[1].X = s*(Row[1].Z*(Row[2].X*Row[3].W - Row[2].W*Row[3].X) + Row[1].W*(Row[2].Z*Row[3].X - Row[2].X*Row[3].Z) + Row[1].X*(Row[2].W*Row[3].Z - Row[2].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 143  : 		t.Row[1].Y = s*(Row[2].Z*(Row[0].X*Row[3].W - Row[0].W*Row[3].X) + Row[2].W*(Row[0].Z*Row[3].X - Row[0].X*Row[3].Z) + Row[2].X*(Row[0].W*Row[3].Z - Row[0].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 144  : 		t.Row[1].Z = s*(Row[3].Z*(Row[0].X*Row[1].W - Row[0].W*Row[1].X) + Row[3].W*(Row[0].Z*Row[1].X - Row[0].X*Row[1].Z) + Row[3].X*(Row[0].W*Row[1].Z - Row[0].Z*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 145  : 		t.Row[1].W = s*(Row[0].Z*(Row[1].W*Row[2].X - Row[1].X*Row[2].W) + Row[0].W*(Row[1].X*Row[2].Z - Row[1].Z*Row[2].X) + Row[0].X*(Row[1].Z*Row[2].W - Row[1].W*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 146  : 		t.Row[2].X = s*(Row[1].W*(Row[2].X*Row[3].Y - Row[2].Y*Row[3].X) + Row[1].X*(Row[2].Y*Row[3].W - Row[2].W*Row[3].Y) + Row[1].Y*(Row[2].W*Row[3].X - Row[2].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 147  : 		t.Row[2].Y = s*(Row[2].W*(Row[0].X*Row[3].Y - Row[0].Y*Row[3].X) + Row[2].X*(Row[0].Y*Row[3].W - Row[0].W*Row[3].Y) + Row[2].Y*(Row[0].W*Row[3].X - Row[0].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 148  : 		t.Row[2].Z = s*(Row[3].W*(Row[0].X*Row[1].Y - Row[0].Y*Row[1].X) + Row[3].X*(Row[0].Y*Row[1].W - Row[0].W*Row[1].Y) + Row[3].Y*(Row[0].W*Row[1].X - Row[0].X*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 149  : 		t.Row[2].W = s*(Row[0].W*(Row[1].Y*Row[2].X - Row[1].X*Row[2].Y) + Row[0].X*(Row[1].W*Row[2].Y - Row[1].Y*Row[2].W) + Row[0].Y*(Row[1].X*Row[2].W - Row[1].W*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 150  : 		t.Row[3].X = s*(Row[1].X*(Row[2].Z*Row[3].Y - Row[2].Y*Row[3].Z) + Row[1].Y*(Row[2].X*Row[3].Z - Row[2].Z*Row[3].X) + Row[1].Z*(Row[2].Y*Row[3].X - Row[2].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 151  : 		t.Row[3].Y = s*(Row[2].X*(Row[0].Z*Row[3].Y - Row[0].Y*Row[3].Z) + Row[2].Y*(Row[0].X*Row[3].Z - Row[0].Z*Row[3].X) + Row[2].Z*(Row[0].Y*Row[3].X - Row[0].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 152  : 		t.Row[3].Z = s*(Row[3].X*(Row[0].Z*Row[1].Y - Row[0].Y*Row[1].Z) + Row[3].Y*(Row[0].X*Row[1].Z - Row[0].Z*Row[1].X) + Row[3].Z*(Row[0].Y*Row[1].X - Row[0].X*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 153  : 		t.Row[3].W = s*(Row[0].X*(Row[1].Y*Row[2].Z - Row[1].Z*Row[2].Y) + Row[0].Y*(Row[1].Z*Row[2].X - Row[1].X*Row[2].Z) + Row[0].Z*(Row[1].X*Row[2].Y - Row[1].Y*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 154  : 		return t;

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABV0@@Z			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@Inverse:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Determinant@Matrix4@@QBEMXZ
_TEXT	SEGMENT
_det$ = -8						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix4@@QBEMXZ PROC			; Matrix4::Determinant, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		float det;
; 124  : 		det =	(Row[0].X * Row[1].Y - Row[0].Y * Row[1].X) * (Row[2].Z * Row[3].W - Row[2].W * Row[3].Z);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+8]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR _det$[ebp], xmm0

; 125  : 		det -=	(Row[0].X * Row[1].Z - Row[0].Z * Row[1].X) * (Row[2].Y * Row[3].W - Row[2].W * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 126  : 		det +=	(Row[0].X * Row[1].W - Row[0].W * Row[1].X) * (Row[2].Y * Row[3].Z - Row[2].Z * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 127  : 		det +=	(Row[0].Y * Row[1].Z - Row[0].Z * Row[1].Y) * (Row[2].X * Row[3].W - Row[2].W * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 128  : 		det -=	(Row[0].Y * Row[1].W - Row[0].W * Row[1].Y) * (Row[2].X * Row[3].Z - Row[2].Z * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 129  : 		det +=	(Row[0].Z * Row[1].W - Row[0].W * Row[1].Z) * (Row[2].X * Row[3].Y - Row[2].Y * Row[3].X);		

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+8]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+4]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 130  : 		return det;	

	fld	DWORD PTR _det$[ebp]

; 131  : 	};	

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix4@@QBEMXZ ENDP			; Matrix4::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transpose@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -132						; size = 16
$T2 = -116						; size = 16
$T3 = -100						; size = 16
$T4 = -84						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Transpose, COMDAT
; _this$ = ecx

; 118  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 		return Matrix4(Vector4(Row[0][0], Row[1][0], Row[2][0], Row[3][0]),Vector4(Row[0][1], Row[1][1], Row[2][1], Row[3][1]),Vector4(Row[0][2], Row[1][2], Row[2][2], Row[3][2]),Vector4(Row[0][3], Row[1][3], Row[2][3], Row[3][3]));

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABVVector4@@000@Z	; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QBEABVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 116  : 	TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QBEABVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QAEAAVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 115  : 	TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QAEAAVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv218 = -72						; size = 4
tv216 = -72						; size = 4
tv214 = -72						; size = 4
tv212 = -72						; size = 4
tv210 = -72						; size = 4
tv208 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Perspective, COMDAT
; _this$ = ecx

; 103  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 105  : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv208[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv208[ebp]
	movss	DWORD PTR [eax], xmm0

; 106  : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv210[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv210[ebp]
	movss	DWORD PTR [eax], xmm0

; 107  : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv212[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv212[ebp]
	movss	DWORD PTR [eax], xmm0

; 108  : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv214[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv214[ebp]
	movss	DWORD PTR [eax], xmm0

; 109  : 		Row[2][2] = zfar / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv216[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv216[ebp]
	movss	DWORD PTR [eax], xmm0

; 110  : 		Row[2][3] = (znear * zfar) / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	mulss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	subss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv218[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR [eax], xmm0

; 111  : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 112  : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Perspective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv190 = -72						; size = 4
tv188 = -72						; size = 4
tv186 = -72						; size = 4
tv184 = -72						; size = 4
tv182 = -72						; size = 4
tv180 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z PROC			; Matrix4::Init_Ortho, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 94   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv180[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv180[ebp]
	movss	DWORD PTR [eax], xmm0

; 95   : 		Row[0][3] = (left + right) / (left - right);

	movss	xmm0, DWORD PTR _left$[ebp]
	addss	xmm0, DWORD PTR _right$[ebp]
	movss	xmm1, DWORD PTR _left$[ebp]
	subss	xmm1, DWORD PTR _right$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv182[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv182[ebp]
	movss	DWORD PTR [eax], xmm0

; 96   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv184[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv184[ebp]
	movss	DWORD PTR [eax], xmm0

; 97   : 		Row[1][3] = (top + bottom) / (bottom - top);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _bottom$[ebp]
	subss	xmm1, DWORD PTR _top$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR [eax], xmm0

; 98   : 		Row[2][2] = 1.0f / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv188[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv188[ebp]
	movss	DWORD PTR [eax], xmm0

; 99   : 		Row[2][3] = znear / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv190[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR [eax], xmm0

; 100  : 
; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z ENDP			; Matrix4::Init_Ortho
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv227 = -72						; size = 4
tv225 = -72						; size = 4
tv223 = -72						; size = 4
tv221 = -72						; size = 4
tv219 = -72						; size = 4
tv217 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z PROC	; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 82   : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv217[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv217[ebp]
	movss	DWORD PTR [eax], xmm0

; 83   : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv219[ebp]
	movss	DWORD PTR [eax], xmm0

; 84   : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv221[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv221[ebp]
	movss	DWORD PTR [eax], xmm0

; 85   : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv223[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv223[ebp]
	movss	DWORD PTR [eax], xmm0

; 86   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv225[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv225[ebp]
	movss	DWORD PTR [eax], xmm0

; 87   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv227[ebp]
	movss	DWORD PTR [eax], xmm0

; 88   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 89   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z ENDP	; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z
_TEXT	SEGMENT
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_hfov$ = 8						; size = 4
_vfov$ = 12						; size = 4
_znear$ = 16						; size = 4
_zfar$ = 20						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z PROC		; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 72   : 		Row[0][0] = static_cast<float>(1.0 / tan(hfov*0.5));

	cvtss2sd xmm0, DWORD PTR _hfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 73   : 		Row[1][1] = static_cast<float>(1.0 / tan(vfov*0.5));

	cvtss2sd xmm0, DWORD PTR _vfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 74   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 75   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 76   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 77   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z ENDP		; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv195 = -72						; size = 4
tv193 = -72						; size = 4
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Ortho_OGL, COMDAT
; _this$ = ecx

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 61   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 62   : 		Row[0][3] = -(right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 63   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 64   : 		Row[1][3] = -(top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 65   : 		Row[2][2] = -2.0f / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	subss	xmm0, DWORD PTR _znear$[ebp]
	movss	xmm1, DWORD PTR __real@c0000000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv193[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR [eax], xmm0

; 66   : 		Row[2][3] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv195[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv195[ebp]
	movss	DWORD PTR [eax], xmm0

; 67   : 
; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Ortho_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
?Init@Matrix4@@QAEXABVVector4@@000@Z PROC		; Matrix4::Init, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		Row[0] = v0; Row[1] = v1; Row[2] = v2; Row[3] = v3;

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init@Matrix4@@QAEXABVVector4@@000@Z ENDP		; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVMatrix3D@@@Z
_TEXT	SEGMENT
$T1 = -84						; size = 16
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z PROC			; Matrix4::Init, COMDAT
; _this$ = ecx

; 51   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 		Row[0] = m[0]; Row[1] = m[1]; Row[2] = m[2]; Row[3] = Vector4(0.0,0.0,0.0,1.0); 

	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 53   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z ENDP			; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Make_Identity@Matrix4@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix4@@QAEXXZ PROC			; Matrix4::Make_Identity, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		Row[0].Set(1.0,0.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 46   : 		Row[1].Set(0.0,1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 47   : 		Row[2].Set(0.0,0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 48   : 		Row[3].Set(0.0,0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 49   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix4@@QAEXXZ ENDP			; Matrix4::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0Matrix4@@QAE@ABVVector4@@000@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 40   : 	TT_INLINE explicit Matrix4(const Vector4 & v0, const Vector4 & v1, const Vector4 & v2, const Vector4 & v3)	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 41   : 		Init(v0,v1,v2,v3);

	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVVector4@@000@Z	; Matrix4::Init

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix4@@QAE@ABVVector4@@000@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABVMatrix3D@@@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 36   : 	TT_INLINE explicit Matrix4(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 37   : 	{
; 38   : 		Init(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVMatrix3D@@@Z	; Matrix4::Init

; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABVMatrix3D@@@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix4@@QAE@_N@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 29   : 	TT_INLINE explicit Matrix4(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 30   : 	{
; 31   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix4

; 32   : 		{
; 33   : 			Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity
$LN2@Matrix4:

; 34   : 		}
; 35   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@_N@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABV0@@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 25   : 	TT_INLINE Matrix4(const Matrix4 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 26   : 	{
; 27   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 28   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABV0@@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix4@@QAE@XZ PROC					; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix4(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix4@@QAE@XZ ENDP					; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0PlaneClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0PlaneClass@@QAE@ABV0@@Z PROC				; PlaneClass::PlaneClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0PlaneClass@@QAE@ABV0@@Z ENDP				; PlaneClass::PlaneClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\plane.h
;	COMDAT ?Normalize@PlaneClass@@QAEXXZ
_TEXT	SEGMENT
tv77 = -76						; size = 4
_oolength$ = -8						; size = 4
_this$ = -4						; size = 4
?Normalize@PlaneClass@@QAEXXZ PROC			; PlaneClass::Normalize, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		float oolength = 1.0f / N.Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@Vector3@@QBEMXZ			; Vector3::Length
	fstp	DWORD PTR tv77[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv77[ebp]
	movss	DWORD PTR _oolength$[ebp], xmm0

; 82   : 		N *= oolength;

	push	ecx
	movss	xmm0, DWORD PTR _oolength$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=

; 83   : 		D *= oolength;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _oolength$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 84   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@PlaneClass@@QAEXXZ ENDP			; PlaneClass::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\plane.h
;	COMDAT ??0PlaneClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PlaneClass@@QAE@XZ PROC				; PlaneClass::PlaneClass, COMDAT
; _this$ = ecx

; 23   : 	PlaneClass() : N(0.0f, 0.0f, 1.0f), D(0.0f) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PlaneClass@@QAE@XZ ENDP				; PlaneClass::PlaneClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Re_Orthogonalize@Matrix3D@@QAEXXZ
_TEXT	SEGMENT
_len$ = -44						; size = 4
_z$ = -40						; size = 12
_y$ = -28						; size = 12
_x$ = -16						; size = 12
_this$ = -4						; size = 4
?Re_Orthogonalize@Matrix3D@@QAEXXZ PROC			; Matrix3D::Re_Orthogonalize, COMDAT
; _this$ = ecx

; 425  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 426  : 	Vector3 x(Row[0][0],Row[0][1],Row[0][2]);

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _x$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 427  : 	Vector3 y(Row[1][0],Row[1][1],Row[1][2]);

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _y$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 428  : 	Vector3 z;

	lea	ecx, DWORD PTR _z$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 429  : 	Vector3::Cross_Product(x,y,&z);

	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	call	?Cross_Product@Vector3@@SAXABV1@0PIAV1@@Z ; Vector3::Cross_Product
	add	esp, 12					; 0000000cH

; 430  : 	Vector3::Cross_Product(z,x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	lea	edx, DWORD PTR _z$[ebp]
	push	edx
	call	?Cross_Product@Vector3@@SAXABV1@0PIAV1@@Z ; Vector3::Cross_Product
	add	esp, 12					; 0000000cH

; 431  : 	float len = x.Length();

	lea	ecx, DWORD PTR _x$[ebp]
	call	?Length@Vector3@@QBEMXZ			; Vector3::Length
	fstp	DWORD PTR _len$[ebp]

; 432  : 	if (len < WWMATH_EPSILON)

	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR _len$[ebp]
	jbe	SHORT $LN6@Re_Orthogo

; 433  : 	{
; 434  : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity

; 435  : 		return;

	jmp	$LN7@Re_Orthogo

; 436  : 	}
; 437  : 	else

	jmp	SHORT $LN5@Re_Orthogo
$LN6@Re_Orthogo:

; 438  : 	{
; 439  : 		x *= 1.0f/len;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _x$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
$LN5@Re_Orthogo:

; 440  : 	}
; 441  : 	len = y.Length();

	lea	ecx, DWORD PTR _y$[ebp]
	call	?Length@Vector3@@QBEMXZ			; Vector3::Length
	fstp	DWORD PTR _len$[ebp]

; 442  : 	if (len < WWMATH_EPSILON)

	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR _len$[ebp]
	jbe	SHORT $LN4@Re_Orthogo

; 443  : 	{
; 444  : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity

; 445  : 		return;

	jmp	$LN7@Re_Orthogo

; 446  : 	}
; 447  : 	else

	jmp	SHORT $LN3@Re_Orthogo
$LN4@Re_Orthogo:

; 448  : 	{
; 449  : 		y *= 1.0f/len;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _y$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
$LN3@Re_Orthogo:

; 450  : 	}
; 451  : 	len = z.Length();

	lea	ecx, DWORD PTR _z$[ebp]
	call	?Length@Vector3@@QBEMXZ			; Vector3::Length
	fstp	DWORD PTR _len$[ebp]

; 452  : 	if (len < WWMATH_EPSILON)

	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR _len$[ebp]
	jbe	SHORT $LN2@Re_Orthogo

; 453  : 	{
; 454  : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity

; 455  : 		return;

	jmp	$LN7@Re_Orthogo

; 456  : 	}
; 457  : 	else

	jmp	SHORT $LN1@Re_Orthogo
$LN2@Re_Orthogo:

; 458  : 	{
; 459  : 		z *= 1.0f/len;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _z$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
$LN1@Re_Orthogo:

; 460  : 	}
; 461  : 	Row[0][0] = x.X;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 462  : 	Row[0][1] = x.Y;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _x$[ebp+4]
	movss	DWORD PTR [eax], xmm0

; 463  : 	Row[0][2] = x.Z;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _x$[ebp+8]
	movss	DWORD PTR [eax], xmm0

; 464  : 	Row[1][0] = y.X;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0

; 465  : 	Row[1][1] = y.Y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _y$[ebp+4]
	movss	DWORD PTR [eax], xmm0

; 466  : 	Row[1][2] = y.Z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _y$[ebp+8]
	movss	DWORD PTR [eax], xmm0

; 467  : 	Row[2][0] = z.X;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax], xmm0

; 468  : 	Row[2][1] = z.Y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _z$[ebp+4]
	movss	DWORD PTR [eax], xmm0

; 469  : 	Row[2][2] = z.Z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _z$[ebp+8]
	movss	DWORD PTR [eax], xmm0
$LN7@Re_Orthogo:

; 470  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Re_Orthogonalize@Matrix3D@@QAEXXZ ENDP			; Matrix3D::Re_Orthogonalize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Solve_Linear_System@Matrix3D@@SA_NAAV1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
$T6 = -80						; size = 16
_system$ = 8						; size = 4
?Solve_Linear_System@Matrix3D@@SA_NAAV1@@Z PROC		; Matrix3D::Solve_Linear_System, COMDAT

; 408  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	ebx
	push	esi
	push	edi

; 409  : 	if (system[0][0] == 0.0f) return false;

	push	0
	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@Solve_Line
	xor	al, al
	jmp	$LN4@Solve_Line
$LN3@Solve_Line:

; 410  : 	system[0] *= 1.0f / system[0][0];

	push	0
	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 411  : 	system[1] -= system[1][0] * system[0];

	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??D@YA?AVVector4@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 412  : 	system[2] -= system[2][0] * system[0];

	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	push	0
	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??D@YA?AVVector4@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 413  : 	if (system[1][1] == 0.0f) return false;

	push	1
	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@Solve_Line
	xor	al, al
	jmp	$LN4@Solve_Line
$LN2@Solve_Line:

; 414  : 	system[1] *= 1.0f / system[1][1];

	push	1
	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 415  : 	system[2] -= system[2][1] * system[1];

	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??D@YA?AVVector4@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 416  : 	if (system[2][2] == 0.0f) return false;

	push	2
	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Solve_Line
	xor	al, al
	jmp	$LN4@Solve_Line
$LN1@Solve_Line:

; 417  : 	system[2] *= 1.0f / system[2][2];

	push	2
	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 418  : 	system[1] -= system[1][2] * system[2];

	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??D@YA?AVVector4@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 419  : 	system[0] -= system[0][2] * system[2];

	push	2
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	push	2
	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??D@YA?AVVector4@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 420  : 	system[0] -= system[0][1] * system[1];

	push	1
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??D@YA?AVVector4@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	mov	ecx, DWORD PTR _system$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 421  : 	return true;

	mov	al, 1
$LN4@Solve_Line:

; 422  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Solve_Linear_System@Matrix3D@@SA_NAAV1@@Z ENDP		; Matrix3D::Solve_Linear_System
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Transform_Plane@Matrix3D@@QBE?AVPlaneClass@@ABV2@@Z
_TEXT	SEGMENT
tv283 = -92						; size = 4
tv279 = -92						; size = 4
tv275 = -92						; size = 4
tv271 = -92						; size = 4
tv281 = -88						; size = 4
tv277 = -88						; size = 4
tv273 = -88						; size = 4
tv269 = -88						; size = 4
_out$ = -20						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_plane$ = 12						; size = 4
?Transform_Plane@Matrix3D@@QBE?AVPlaneClass@@ABV2@@Z PROC ; Matrix3D::Transform_Plane, COMDAT
; _this$ = ecx

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 399  : 	PlaneClass out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0PlaneClass@@QAE@XZ			; PlaneClass::PlaneClass

; 400  : 	out.N.X = Row[0][0] * plane.N.X + Row[1][0] * plane.N.Y + Row[2][0] * plane.N.Z;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv269[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv269[ebp]
	addss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv271[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv271[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _out$[ebp], xmm1

; 401  : 	out.N.Y = Row[0][1] * plane.N.X + Row[1][1] * plane.N.Y + Row[2][1] * plane.N.Z;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv273[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv273[ebp]
	addss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv275[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv275[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _out$[ebp+4], xmm1

; 402  : 	out.N.Z = Row[0][2] * plane.N.X + Row[1][2] * plane.N.Y + Row[2][2] * plane.N.Z;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv277[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv277[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv279[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv279[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _out$[ebp+8], xmm1

; 403  : 	out.D	= Row[0][3] * plane.N.X + Row[1][3] * plane.N.Y + Row[2][3] * plane.N.Z + plane.D;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv281[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _plane$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv283[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _plane$[ebp]
	addss	xmm1, DWORD PTR [edx+12]
	movss	DWORD PTR _out$[ebp+12], xmm1

; 404  : 	return out;

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PlaneClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 405  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Transform_Plane@Matrix3D@@QBE?AVPlaneClass@@ABV2@@Z ENDP ; Matrix3D::Transform_Plane
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Reflect_Plane@Matrix3D@@SA?AV1@ABVPlaneClass@@@Z
_TEXT	SEGMENT
tv263 = -132						; size = 4
tv261 = -132						; size = 4
tv259 = -132						; size = 4
tv257 = -132						; size = 4
tv255 = -132						; size = 4
tv253 = -132						; size = 4
tv251 = -132						; size = 4
tv249 = -132						; size = 4
tv247 = -132						; size = 4
tv245 = -132						; size = 4
tv243 = -132						; size = 4
tv241 = -132						; size = 4
_temp$ = -64						; size = 48
_plane$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__plane$ = 12						; size = 4
?Reflect_Plane@Matrix3D@@SA?AV1@ABVPlaneClass@@@Z PROC	; Matrix3D::Reflect_Plane, COMDAT

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi

; 387  : 	PlaneClass plane = _plane;

	mov	eax, DWORD PTR __plane$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plane$[ebp]
	call	??0PlaneClass@@QAE@ABV0@@Z

; 388  : 	plane.Normalize();

	lea	ecx, DWORD PTR _plane$[ebp]
	call	?Normalize@PlaneClass@@QAEXXZ		; PlaneClass::Normalize

; 389  : 
; 390  : 	Matrix3D temp(true);

	push	1
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Matrix3D@@QAE@_N@Z			; Matrix3D::Matrix3D

; 391  : 	temp[0][0] = -2 * plane.N.X * plane.N.X + 1;	temp[0][1] = -2 * plane.N.X * plane.N.Y;		temp[0][2] = -2 * plane.N.X * plane.N.Z;		temp[0][3] = 2 * plane.N.X * plane.D;

	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp]
	mulss	xmm0, DWORD PTR _plane$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	0
	push	0
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp]
	mulss	xmm0, DWORD PTR _plane$[ebp+4]
	push	1
	push	0
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp]
	mulss	xmm0, DWORD PTR _plane$[ebp+8]
	push	2
	push	0
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _plane$[ebp]
	mulss	xmm0, DWORD PTR _plane$[ebp+12]
	push	3
	push	0
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 392  : 	temp[1][0] = -2 * plane.N.Y * plane.N.X;		temp[1][1] = -2 * plane.N.Y * plane.N.Y + 1;	temp[1][2] = -2 * plane.N.Y * plane.N.Z;		temp[0][3] = 2 * plane.N.Y * plane.D;

	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp+4]
	mulss	xmm0, DWORD PTR _plane$[ebp]
	push	0
	push	1
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp+4]
	mulss	xmm0, DWORD PTR _plane$[ebp+4]
	addss	xmm0, DWORD PTR __real@3f800000
	push	1
	push	1
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp+4]
	mulss	xmm0, DWORD PTR _plane$[ebp+8]
	push	2
	push	1
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _plane$[ebp+4]
	mulss	xmm0, DWORD PTR _plane$[ebp+12]
	push	3
	push	0
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 393  : 	temp[2][0] = -2 * plane.N.Z * plane.N.X;		temp[2][1] = -2 * plane.N.Z * plane.N.Y;		temp[2][2] = -2 * plane.N.Z * plane.N.Z + 1;	temp[2][3] = 2 * plane.N.Z * plane.D;

	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp+8]
	mulss	xmm0, DWORD PTR _plane$[ebp]
	push	0
	push	2
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp+8]
	mulss	xmm0, DWORD PTR _plane$[ebp+4]
	push	1
	push	2
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv259[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv259[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _plane$[ebp+8]
	mulss	xmm0, DWORD PTR _plane$[ebp+8]
	addss	xmm0, DWORD PTR __real@3f800000
	push	2
	push	2
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv261[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv261[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _plane$[ebp+8]
	mulss	xmm0, DWORD PTR _plane$[ebp+12]
	push	3
	push	2
	lea	ecx, DWORD PTR _temp$[ebp]
	movss	DWORD PTR tv263[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv263[ebp]
	movss	DWORD PTR [eax], xmm0

; 394  : 	return temp;

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3D@@QAE@ABV0@@Z		; Matrix3D::Matrix3D
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 395  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reflect_Plane@Matrix3D@@SA?AV1@ABVPlaneClass@@@Z ENDP	; Matrix3D::Reflect_Plane
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Rotate_Vector, COMDAT

; 564  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 565  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 566  : 		Vector3 * v;
; 567  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Ro

; 568  : 		{
; 569  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 570  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 571  : 		}
; 572  : 		else

	jmp	SHORT $LN1@Inverse_Ro
$LN2@Inverse_Ro:

; 573  : 		{
; 574  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Ro:

; 575  : 		}
; 576  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 577  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 578  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 579  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
_diff$ = -28						; size = 12
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Transform_Vector, COMDAT

; 548  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 549  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 550  : 		Vector3 * v;
; 551  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Tr

; 552  : 		{
; 553  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 554  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 555  : 		}
; 556  : 		else

	jmp	SHORT $LN1@Inverse_Tr
$LN2@Inverse_Tr:

; 557  : 		{
; 558  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Tr:

; 559  : 		}
; 560  : 		Vector3 diff(v->X - A[0][3], v->Y - A[1][3], v->Z - A[2][3]);

	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _diff$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 561  : 		Matrix3D::Inverse_Rotate_Vector(A, diff, out);

	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	call	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
	add	esp, 12					; 0000000cH

; 562  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Rotate_Vector, COMDAT

; 531  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 532  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 533  : 		Vector3 * v;
; 534  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 535  : 		{
; 536  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 537  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 538  : 		}
; 539  : 		else 

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 540  : 		{
; 541  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 542  : 		}
; 543  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 544  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 545  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 546  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Multiply@Matrix3D@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
tv795 = -144						; size = 4
tv787 = -144						; size = 4
tv779 = -144						; size = 4
tv793 = -140						; size = 4
tv785 = -140						; size = 4
tv777 = -140						; size = 4
tv771 = -140						; size = 4
tv765 = -140						; size = 4
tv759 = -140						; size = 4
tv753 = -140						; size = 4
tv747 = -140						; size = 4
tv741 = -140						; size = 4
tv735 = -140						; size = 4
tv729 = -140						; size = 4
tv723 = -140						; size = 4
tv791 = -136						; size = 4
tv783 = -136						; size = 4
tv775 = -136						; size = 4
tv769 = -136						; size = 4
tv763 = -136						; size = 4
tv757 = -136						; size = 4
tv751 = -136						; size = 4
tv745 = -136						; size = 4
tv739 = -136						; size = 4
tv733 = -136						; size = 4
tv727 = -136						; size = 4
tv721 = -136						; size = 4
tv789 = -132						; size = 4
tv781 = -132						; size = 4
tv773 = -132						; size = 4
tv767 = -132						; size = 4
tv761 = -132						; size = 4
tv755 = -132						; size = 4
tv749 = -132						; size = 4
tv743 = -132						; size = 4
tv737 = -132						; size = 4
tv731 = -132						; size = 4
tv725 = -132						; size = 4
tv719 = -132						; size = 4
_tmp3$ = -64						; size = 4
_tmp2$ = -60						; size = 4
_tmp1$ = -56						; size = 4
_Aptr$ = -52						; size = 4
_tmp$ = -48						; size = 48
_A$ = 8							; size = 4
_B$ = 12						; size = 4
_set_res$ = 16						; size = 4
?Multiply@Matrix3D@@SAXABV1@0PAV1@@Z PROC		; Matrix3D::Multiply, COMDAT

; 296  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	ebx
	push	esi
	push	edi

; 297  : 	Matrix3D tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Matrix3D@@QAE@XZ			; Matrix3D::Matrix3D

; 298  : 	Matrix3D * Aptr;
; 299  : 	float tmp1,tmp2,tmp3;
; 300  : 	if (set_res == &A)

	mov	eax, DWORD PTR _set_res$[ebp]
	cmp	eax, DWORD PTR _A$[ebp]
	jne	SHORT $LN2@Multiply

; 301  : 	{
; 302  : 		tmp = A;

	mov	eax, DWORD PTR _A$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Matrix3D@@QAEAAV0@ABV0@@Z		; Matrix3D::operator=

; 303  : 		Aptr = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _Aptr$[ebp], eax

; 304  : 	}
; 305  : 	else

	jmp	SHORT $LN1@Multiply
$LN2@Multiply:

; 306  : 	{
; 307  : 		Aptr = (Matrix3D *)&A;	

	mov	eax, DWORD PTR _A$[ebp]
	mov	DWORD PTR _Aptr$[ebp], eax
$LN1@Multiply:

; 308  : 	}
; 309  : 	tmp1 = B[0][0];

	push	0
	push	0
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0

; 310  : 	tmp2 = B[1][0];

	push	0
	push	1
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 311  : 	tmp3 = B[2][0];

	push	0
	push	2
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp3$[ebp], xmm0

; 312  : 	(*set_res)[0][0] = (*Aptr)[0][0]*tmp1 + (*Aptr)[0][1]*tmp2 + (*Aptr)[0][2]*tmp3;

	push	0
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv719[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv719[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv721[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv721[ebp]
	addss	xmm1, xmm0
	push	0
	push	0
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv723[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv723[ebp]
	movss	DWORD PTR [eax], xmm0

; 313  : 	(*set_res)[1][0] = (*Aptr)[1][0]*tmp1 + (*Aptr)[1][1]*tmp2 + (*Aptr)[1][2]*tmp3;

	push	0
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv725[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv725[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv727[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv727[ebp]
	addss	xmm1, xmm0
	push	0
	push	1
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv729[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv729[ebp]
	movss	DWORD PTR [eax], xmm0

; 314  : 	(*set_res)[2][0] = (*Aptr)[2][0]*tmp1 + (*Aptr)[2][1]*tmp2 + (*Aptr)[2][2]*tmp3;

	push	0
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv731[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv731[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv733[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv733[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv735[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv735[ebp]
	movss	DWORD PTR [eax], xmm0

; 315  : 	tmp1 = B[0][1];

	push	1
	push	0
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0

; 316  : 	tmp2 = B[1][1];

	push	1
	push	1
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 317  : 	tmp3 = B[2][1];

	push	1
	push	2
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp3$[ebp], xmm0

; 318  : 	(*set_res)[0][1] = (*Aptr)[0][0]*tmp1 + (*Aptr)[0][1]*tmp2 + (*Aptr)[0][2]*tmp3;

	push	0
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv737[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv737[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv739[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv739[ebp]
	addss	xmm1, xmm0
	push	1
	push	0
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv741[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv741[ebp]
	movss	DWORD PTR [eax], xmm0

; 319  : 	(*set_res)[1][1] = (*Aptr)[1][0]*tmp1 + (*Aptr)[1][1]*tmp2 + (*Aptr)[1][2]*tmp3;

	push	0
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv743[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv743[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv745[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv745[ebp]
	addss	xmm1, xmm0
	push	1
	push	1
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv747[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv747[ebp]
	movss	DWORD PTR [eax], xmm0

; 320  : 	(*set_res)[2][1] = (*Aptr)[2][0]*tmp1 + (*Aptr)[2][1]*tmp2 + (*Aptr)[2][2]*tmp3;

	push	0
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv749[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv749[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv751[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv751[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv753[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv753[ebp]
	movss	DWORD PTR [eax], xmm0

; 321  : 	tmp1 = B[0][2];

	push	2
	push	0
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0

; 322  : 	tmp2 = B[1][2];

	push	2
	push	1
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 323  : 	tmp3 = B[2][2];

	push	2
	push	2
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp3$[ebp], xmm0

; 324  : 	(*set_res)[0][2] = (*Aptr)[0][0]*tmp1 + (*Aptr)[0][1]*tmp2 + (*Aptr)[0][2]*tmp3;

	push	0
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv755[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv755[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv757[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv757[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv759[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv759[ebp]
	movss	DWORD PTR [eax], xmm0

; 325  : 	(*set_res)[1][2] = (*Aptr)[1][0]*tmp1 + (*Aptr)[1][1]*tmp2 + (*Aptr)[1][2]*tmp3;

	push	0
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv761[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv761[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv763[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv763[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv765[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv765[ebp]
	movss	DWORD PTR [eax], xmm0

; 326  : 	(*set_res)[2][2] = (*Aptr)[2][0]*tmp1 + (*Aptr)[2][1]*tmp2 + (*Aptr)[2][2]*tmp3;

	push	0
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv767[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv767[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv769[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv769[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv771[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv771[ebp]
	movss	DWORD PTR [eax], xmm0

; 327  : 	tmp1 = B[0][3];

	push	3
	push	0
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0

; 328  : 	tmp2 = B[1][3];

	push	3
	push	1
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 329  : 	tmp3 = B[2][3];

	push	3
	push	2
	mov	ecx, DWORD PTR _B$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp3$[ebp], xmm0

; 330  : 	(*set_res)[0][3] = (*Aptr)[0][0]*tmp1 + (*Aptr)[0][1]*tmp2 + (*Aptr)[0][2]*tmp3 + (*Aptr)[0][3];

	push	0
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv773[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv773[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv775[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv775[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv777[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv777[ebp]
	addss	xmm0, DWORD PTR [eax]
	push	3
	push	0
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv779[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv779[ebp]
	movss	DWORD PTR [eax], xmm0

; 331  : 	(*set_res)[1][3] = (*Aptr)[1][0]*tmp1 + (*Aptr)[1][1]*tmp2 + (*Aptr)[1][2]*tmp3 + (*Aptr)[1][3];

	push	0
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv781[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv781[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv783[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv783[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv785[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv785[ebp]
	addss	xmm0, DWORD PTR [eax]
	push	3
	push	1
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv787[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv787[ebp]
	movss	DWORD PTR [eax], xmm0

; 332  : 	(*set_res)[2][3] = (*Aptr)[2][0]*tmp1 + (*Aptr)[2][1]*tmp2 + (*Aptr)[2][2]*tmp3 + (*Aptr)[2][3];

	push	0
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	push	1
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv789[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp2$[ebp]
	movss	xmm1, DWORD PTR tv789[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv791[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _tmp3$[ebp]
	movss	xmm1, DWORD PTR tv791[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _Aptr$[ebp]
	movss	DWORD PTR tv793[ebp], xmm1
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv793[ebp]
	addss	xmm0, DWORD PTR [eax]
	push	3
	push	2
	mov	ecx, DWORD PTR _set_res$[ebp]
	movss	DWORD PTR tv795[ebp], xmm0
	call	??AMatrix3D@@QAEAAVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv795[ebp]
	movss	DWORD PTR [eax], xmm0

; 333  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Multiply@Matrix3D@@SAXABV1@0PAV1@@Z ENDP		; Matrix3D::Multiply
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Transform_Center_Extent_AABox@Matrix3D@@QBEXABVVector3@@0PAV2@1@Z
_TEXT	SEGMENT
tv177 = -84						; size = 4
tv142 = -80						; size = 4
tv93 = -80						; size = 4
_j$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_center$ = 8						; size = 4
_extent$ = 12						; size = 4
_set_center$ = 16					; size = 4
_set_extent$ = 20					; size = 4
?Transform_Center_Extent_AABox@Matrix3D@@QBEXABVVector3@@0PAV2@1@Z PROC ; Matrix3D::Transform_Center_Extent_AABox, COMDAT
; _this$ = ecx

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 	for (int i=0; i<3; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@Transform_
$LN5@Transform_:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@Transform_:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	$LN4@Transform_

; 374  : 	{
; 375  : 		(*set_center)[i] = Row[i][3];

	push	3
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _set_center$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 376  : 		(*set_extent)[i] = 0.0f;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _set_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 377  : 		for (int j=0; j<3; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN3@Transform_
$LN2@Transform_:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN3@Transform_:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	$LN1@Transform_

; 378  : 		{
; 379  : 			(*set_center)[i] += Row[i][j] * center[j];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _set_center$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _j$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _center$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR tv93[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv93[ebp]
	movss	DWORD PTR [ecx], xmm0

; 380  : 			(*set_extent)[i] += WWMath::Fabs(Row[i][j] * extent[j]);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _set_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _j$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _extent$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv177[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR tv177[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 381  : 		}

	jmp	$LN2@Transform_
$LN1@Transform_:

; 382  : 	}

	jmp	$LN5@Transform_
$LN4@Transform_:

; 383  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Transform_Center_Extent_AABox@Matrix3D@@QBEXABVVector3@@0PAV2@1@Z ENDP ; Matrix3D::Transform_Center_Extent_AABox
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Transform_Min_Max_AABox@Matrix3D@@QBEXABVVector3@@0PAV2@1@Z
_TEXT	SEGMENT
tv166 = -88						; size = 4
tv161 = -88						; size = 4
tv156 = -88						; size = 4
tv151 = -88						; size = 4
_j$1 = -20						; size = 4
_i$2 = -16						; size = 4
_tmp1$ = -12						; size = 4
_tmp0$ = -8						; size = 4
_this$ = -4						; size = 4
_min$ = 8						; size = 4
_max$ = 12						; size = 4
_set_min$ = 16						; size = 4
_set_max$ = 20						; size = 4
?Transform_Min_Max_AABox@Matrix3D@@QBEXABVVector3@@0PAV2@1@Z PROC ; Matrix3D::Transform_Min_Max_AABox, COMDAT
; _this$ = ecx

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 342  : 	float tmp0,tmp1;
; 343  : 	set_min->X = set_max->X = Row[0][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set_max$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _set_min$[ebp]
	mov	ecx, DWORD PTR _set_max$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 344  : 	set_min->Y = set_max->Y = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set_max$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _set_min$[ebp]
	mov	ecx, DWORD PTR _set_max$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 345  : 	set_min->Z = set_max->Z = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set_max$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _set_min$[ebp]
	mov	ecx, DWORD PTR _set_max$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 346  : 	for (int i=0; i<3; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN8@Transform_
$LN7@Transform_:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN8@Transform_:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	$LN6@Transform_

; 347  : 	{
; 348  : 		for (int j=0; j<3; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN5@Transform_
$LN4@Transform_:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN5@Transform_:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	$LN3@Transform_

; 349  : 		{
; 350  : 			tmp0 = Row[i][j] * min[j];

	mov	eax, DWORD PTR _j$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _min$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp0$[ebp], xmm0

; 351  : 			tmp1 = Row[i][j] * max[j];

	mov	eax, DWORD PTR _j$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _max$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0

; 352  : 			if (tmp0 < tmp1)

	movss	xmm0, DWORD PTR _tmp1$[ebp]
	comiss	xmm0, DWORD PTR _tmp0$[ebp]
	jbe	SHORT $LN2@Transform_

; 353  : 			{
; 354  : 				(*set_min)[i] += tmp0;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _set_min$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR tv151[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _tmp0$[ebp]
	mov	edx, DWORD PTR tv151[ebp]
	movss	DWORD PTR [edx], xmm0

; 355  : 				(*set_max)[i] += tmp1;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _set_max$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv156[ebp], eax
	mov	ecx, DWORD PTR tv156[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _tmp1$[ebp]
	mov	edx, DWORD PTR tv156[ebp]
	movss	DWORD PTR [edx], xmm0

; 356  : 			}
; 357  : 			else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 358  : 			{
; 359  : 				(*set_min)[i] += tmp1;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _set_min$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv161[ebp], eax
	mov	ecx, DWORD PTR tv161[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _tmp1$[ebp]
	mov	edx, DWORD PTR tv161[ebp]
	movss	DWORD PTR [edx], xmm0

; 360  : 				(*set_max)[i] += tmp0;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _set_max$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	ecx, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _tmp0$[ebp]
	mov	edx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [edx], xmm0
$LN1@Transform_:

; 361  : 			}
; 362  : 		}

	jmp	$LN4@Transform_
$LN3@Transform_:

; 363  : 	}

	jmp	$LN7@Transform_
$LN6@Transform_:

; 364  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Transform_Min_Max_AABox@Matrix3D@@QBEXABVVector3@@0PAV2@1@Z ENDP ; Matrix3D::Transform_Min_Max_AABox
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Copy_3x3_Matrix@Matrix3D@@QAEXQAY02M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_matrix$ = 8						; size = 4
?Copy_3x3_Matrix@Matrix3D@@QAEXQAY02M@Z PROC		; Matrix3D::Copy_3x3_Matrix, COMDAT
; _this$ = ecx

; 281  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 282  : 	Row[0][0] = matrix[0][0];

	mov	esi, 12					; 0000000cH
	imul	esi, 0
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	imul	edi, 0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 283  : 	Row[0][1] = matrix[0][1];

	mov	esi, 12					; 0000000cH
	imul	esi, 0
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	shl	edi, 0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 284  : 	Row[0][2] = matrix[0][2];

	mov	esi, 12					; 0000000cH
	imul	esi, 0
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	shl	edi, 1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 285  : 	Row[0][3] = 0;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 286  : 	Row[1][0] = matrix[1][0];

	mov	esi, 12					; 0000000cH
	shl	esi, 0
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	imul	edi, 0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 287  : 	Row[1][1] = matrix[1][1];

	mov	esi, 12					; 0000000cH
	shl	esi, 0
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	shl	edi, 0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 288  : 	Row[1][2] = matrix[1][2];

	mov	esi, 12					; 0000000cH
	shl	esi, 0
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	shl	edi, 1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 289  : 	Row[1][3] = 0;

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 290  : 	Row[2][0] = matrix[2][0];

	mov	esi, 12					; 0000000cH
	shl	esi, 1
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	imul	edi, 0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 291  : 	Row[2][1] = matrix[2][1];

	mov	esi, 12					; 0000000cH
	shl	esi, 1
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	shl	edi, 0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 292  : 	Row[2][2] = matrix[2][2];

	mov	esi, 12					; 0000000cH
	shl	esi, 1
	add	esi, DWORD PTR _matrix$[ebp]
	mov	edi, 4
	shl	edi, 1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi+edi]
	mov	DWORD PTR [eax], ecx

; 293  : 	Row[2][3] = 0;

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 294  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Copy_3x3_Matrix@Matrix3D@@QAEXQAY02M@Z ENDP		; Matrix3D::Copy_3x3_Matrix
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Get_Inverse@Matrix3D@@QBEXAAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_inv$ = 8						; size = 4
?Get_Inverse@Matrix3D@@QBEXAAV1@@Z PROC			; Matrix3D::Get_Inverse, COMDAT
; _this$ = ecx

; 266  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	Get_Orthogonal_Inverse(inv);

	mov	eax, DWORD PTR _inv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Orthogonal_Inverse@Matrix3D@@QBEXAAV1@@Z ; Matrix3D::Get_Orthogonal_Inverse

; 268  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Inverse@Matrix3D@@QBEXAAV1@@Z ENDP			; Matrix3D::Get_Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 524  : 	TT_INLINE void Get_Z_Vector(Vector3 * set_z) const { set_z->Set(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 523  : 	TT_INLINE void Get_Y_Vector(Vector3 * set_y) const { set_y->Set(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 522  : 	TT_INLINE void Get_X_Vector(Vector3 * set_x) const { set_x->Set(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 521  : 	TT_INLINE Vector3 Get_Z_Vector() const { return Vector3(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 520  : 	TT_INLINE Vector3 Get_Y_Vector() const { return Vector3(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 519  : 	TT_INLINE Vector3 Get_X_Vector() const { return Vector3(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Transform_Vector, COMDAT

; 503  :    {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 504  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 505  : 		Vector3 * v;
; 506  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 507  : 		{
; 508  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 509  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 510  : 		}
; 511  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 512  : 		{
; 513  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 514  : 		}
; 515  : 		out->X = (A.Row[0][0] * v->X + A.Row[0][1] * v->Y + A.Row[0][2] * v->Z + A.Row[0][3]);

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 516  : 		out->Y = (A.Row[1][0] * v->X + A.Row[1][1] * v->Y + A.Row[1][2] * v->Z + A.Row[1][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 517  : 		out->Z = (A.Row[2][0] * v->X + A.Row[2][1] * v->Y + A.Row[2][2] * v->Z + A.Row[2][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 518  :    }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ??DMatrix3D@@QBE?AVVector3@@ABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vector$ = 12						; size = 4
??DMatrix3D@@QBE?AVVector3@@ABV1@@Z PROC		; Matrix3D::operator*, COMDAT
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 	return Vector3
; 220  : 	(
; 221  : 		Row[0].X * vector.X + Row[0].Y * vector.Y + Row[0].Z * vector.Z + Row[0].W,
; 222  : 		Row[1].X * vector.X + Row[1].Y * vector.Y + Row[1].Z * vector.Z + Row[1].W,
; 223  : 		Row[2].X * vector.X + Row[2].Y * vector.Y + Row[2].Z * vector.Z + Row[2].W
; 224  : 	);

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [eax+edx+4]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [eax+edx+8]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+edx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx+8]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 225  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??DMatrix3D@@QBE?AVVector3@@ABV1@@Z ENDP		; Matrix3D::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ??XMatrix3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_matrix$ = 8						; size = 4
??XMatrix3D@@QAEAAV0@ABV0@@Z PROC			; Matrix3D::operator*=, COMDAT
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 	Set
; 231  : 	(
; 232  : 		Row[0].X * matrix.Row[0].X + Row[0].Y * matrix.Row[1].X + Row[0].Z * matrix.Row[2].X,
; 233  : 	    Row[0].X * matrix.Row[0].Y + Row[0].Y * matrix.Row[1].Y + Row[0].Z * matrix.Row[2].Y,
; 234  : 	    Row[0].X * matrix.Row[0].Z + Row[0].Y * matrix.Row[1].Z + Row[0].Z * matrix.Row[2].Z,
; 235  : 	    Row[0].X * matrix.Row[0].W + Row[0].Y * matrix.Row[1].W + Row[0].Z * matrix.Row[2].W + Row[0].W,
; 236  : 	    
; 237  : 	    Row[1].X * matrix.Row[0].X + Row[1].Y * matrix.Row[1].X + Row[1].Z * matrix.Row[2].X,
; 238  : 	    Row[1].X * matrix.Row[0].Y + Row[1].Y * matrix.Row[1].Y + Row[1].Z * matrix.Row[2].Y,
; 239  : 	    Row[1].X * matrix.Row[0].Z + Row[1].Y * matrix.Row[1].Z + Row[1].Z * matrix.Row[2].Z,
; 240  : 	    Row[1].X * matrix.Row[0].W + Row[1].Y * matrix.Row[1].W + Row[1].Z * matrix.Row[2].W + Row[1].W,
; 241  : 	    
; 242  : 	    Row[2].X * matrix.Row[0].X + Row[2].Y * matrix.Row[1].X + Row[2].Z * matrix.Row[2].X,
; 243  : 	    Row[2].X * matrix.Row[0].Y + Row[2].Y * matrix.Row[1].Y + Row[2].Z * matrix.Row[2].Y,
; 244  : 	    Row[2].X * matrix.Row[0].Z + Row[2].Y * matrix.Row[1].Z + Row[2].Z * matrix.Row[2].Z,
; 245  : 	    Row[2].X * matrix.Row[0].W + Row[2].Y * matrix.Row[1].W + Row[2].Z * matrix.Row[2].W + Row[2].W
; 246  : 	);

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR [esi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+4]
	mulss	xmm1, DWORD PTR [esi+eax+8]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+8]
	mulss	xmm1, DWORD PTR [esi+eax+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR [esi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+4]
	mulss	xmm1, DWORD PTR [esi+eax+4]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+8]
	mulss	xmm1, DWORD PTR [esi+eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+4]
	mulss	xmm1, DWORD PTR [esi+eax]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+8]
	mulss	xmm1, DWORD PTR [esi+eax]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR [esi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+4]
	mulss	xmm1, DWORD PTR [esi+eax+12]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx+8]
	mulss	xmm1, DWORD PTR [esi+eax+12]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+edx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [esi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+4]
	mulss	xmm1, DWORD PTR [esi+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+8]
	mulss	xmm1, DWORD PTR [esi+edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [esi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+4]
	mulss	xmm1, DWORD PTR [esi+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+8]
	mulss	xmm1, DWORD PTR [esi+edx+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [esi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+4]
	mulss	xmm1, DWORD PTR [esi+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+8]
	mulss	xmm1, DWORD PTR [esi+edx]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [esi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+4]
	mulss	xmm1, DWORD PTR [esi+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+8]
	mulss	xmm1, DWORD PTR [esi+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z	; Matrix3D::Set

; 247  : 
; 248  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 249  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix3D@@QAEAAV0@ABV0@@Z ENDP			; Matrix3D::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Is_Orthogonal@Matrix3D@@QBEHXZ
_TEXT	SEGMENT
tv267 = -112						; size = 4
tv257 = -112						; size = 4
tv247 = -112						; size = 4
tv262 = -108						; size = 4
tv252 = -108						; size = 4
tv242 = -108						; size = 4
tv237 = -108						; size = 4
tv230 = -108						; size = 4
tv223 = -108						; size = 4
_z$ = -40						; size = 12
_y$ = -28						; size = 12
_x$ = -16						; size = 12
_this$ = -4						; size = 4
?Is_Orthogonal@Matrix3D@@QBEHXZ PROC			; Matrix3D::Is_Orthogonal, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	Vector3 x(Row[0].X,Row[0].Y,Row[0].Z);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _x$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 43   : 	Vector3 y(Row[1].X,Row[1].Y,Row[1].Z);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _y$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 44   : 	Vector3 z(Row[2].X,Row[2].Y,Row[2].Z);

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _z$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 45   : 	if (Vector3::Dot_Product(x,y) > WWMATH_EPSILON) return 0;

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?Dot_Product@Vector3@@SAMABV1@0@Z	; Vector3::Dot_Product
	add	esp, 8
	fstp	DWORD PTR tv223[ebp]
	movss	xmm0, DWORD PTR tv223[ebp]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jbe	SHORT $LN6@Is_Orthogo
	xor	eax, eax
	jmp	$LN7@Is_Orthogo
$LN6@Is_Orthogo:

; 46   : 	if (Vector3::Dot_Product(y,z) > WWMATH_EPSILON) return 0;

	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	?Dot_Product@Vector3@@SAMABV1@0@Z	; Vector3::Dot_Product
	add	esp, 8
	fstp	DWORD PTR tv230[ebp]
	movss	xmm0, DWORD PTR tv230[ebp]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jbe	SHORT $LN5@Is_Orthogo
	xor	eax, eax
	jmp	$LN7@Is_Orthogo
$LN5@Is_Orthogo:

; 47   : 	if (Vector3::Dot_Product(z,x) > WWMATH_EPSILON) return 0;

	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _z$[ebp]
	push	ecx
	call	?Dot_Product@Vector3@@SAMABV1@0@Z	; Vector3::Dot_Product
	add	esp, 8
	fstp	DWORD PTR tv237[ebp]
	movss	xmm0, DWORD PTR tv237[ebp]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jbe	SHORT $LN4@Is_Orthogo
	xor	eax, eax
	jmp	$LN7@Is_Orthogo
$LN4@Is_Orthogo:

; 48   : 	if (WWMath::Fabs(x.Length2() - 1.0f) > WWMATH_EPSILON) return 0;

	lea	ecx, DWORD PTR _x$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	fstp	DWORD PTR tv242[ebp]
	movss	xmm0, DWORD PTR tv242[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv247[ebp]
	movss	xmm0, DWORD PTR tv247[ebp]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jbe	SHORT $LN3@Is_Orthogo
	xor	eax, eax
	jmp	SHORT $LN7@Is_Orthogo
$LN3@Is_Orthogo:

; 49   : 	if (WWMath::Fabs(y.Length2() - 1.0f) > WWMATH_EPSILON) return 0;

	lea	ecx, DWORD PTR _y$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	fstp	DWORD PTR tv252[ebp]
	movss	xmm0, DWORD PTR tv252[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv257[ebp]
	movss	xmm0, DWORD PTR tv257[ebp]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jbe	SHORT $LN2@Is_Orthogo
	xor	eax, eax
	jmp	SHORT $LN7@Is_Orthogo
$LN2@Is_Orthogo:

; 50   : 	if (WWMath::Fabs(z.Length2() - 1.0f) > WWMATH_EPSILON) return 0;

	lea	ecx, DWORD PTR _z$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	fstp	DWORD PTR tv262[ebp]
	movss	xmm0, DWORD PTR tv262[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv267[ebp]
	movss	xmm0, DWORD PTR tv267[ebp]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jbe	SHORT $LN1@Is_Orthogo
	xor	eax, eax
	jmp	SHORT $LN7@Is_Orthogo
$LN1@Is_Orthogo:

; 51   : 	return 1;

	mov	eax, 1
$LN7@Is_Orthogo:

; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Orthogonal@Matrix3D@@QBEHXZ ENDP			; Matrix3D::Is_Orthogonal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 486  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 487  : 		float tmp1,tmp2;
; 488  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 489  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 490  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 491  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 492  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 493  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 494  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 495  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 496  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 497  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 473  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 474  : 		float tmp1,tmp2;
; 475  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 476  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 477  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 478  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 479  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 480  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 481  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 482  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 483  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 460  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		float tmp1,tmp2;
; 462  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 463  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 464  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 465  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 466  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 467  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 468  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 469  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 470  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 471  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		float tmp1,tmp2;
; 446  : 		float c,s;
; 447  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 448  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 449  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 450  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 451  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 452  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 453  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 454  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 455  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 456  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 457  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 458  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 428  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 429  : 		float tmp1,tmp2;
; 430  : 		float c,s;
; 431  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 432  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 433  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 434  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 435  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 436  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 437  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 438  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 439  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 440  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 441  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 442  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 412  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 		float tmp1,tmp2;
; 414  : 		float c,s;
; 415  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 416  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 417  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 418  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 419  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 420  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 421  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 422  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 423  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 424  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 425  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 426  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 396  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 		float tmp1,tmp2;
; 398  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 399  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 400  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 401  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 402  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 403  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 404  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 405  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 406  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 407  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 408  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 409  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 410  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv299 = -80						; size = 4
tv297 = -80						; size = 4
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 380  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		float tmp1,tmp2;
; 382  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 383  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 384  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 385  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 386  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 387  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 388  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 389  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 390  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 391  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 392  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 393  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 394  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 364  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 365  : 		float tmp1,tmp2;
; 366  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 367  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 368  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 369  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 370  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 371  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 372  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 373  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 374  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 375  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 376  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 377  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 378  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 		float tmp1,tmp2;
; 347  : 		float c,s;
; 348  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 349  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 350  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 351  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 352  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 353  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 354  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 355  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 356  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 357  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 358  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 359  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 360  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 361  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 362  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv311 = -88						; size = 4
tv309 = -88						; size = 4
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 326  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 327  : 		float tmp1,tmp2;
; 328  : 		float c,s;
; 329  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 330  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 331  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 332  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 333  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 334  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 335  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 336  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 337  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 338  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 339  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 340  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 341  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv309[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv309[ebp]
	movss	DWORD PTR [eax], xmm0

; 342  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv311[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv311[ebp]
	movss	DWORD PTR [eax], xmm0

; 343  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 307  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 		float tmp1,tmp2;
; 309  : 		float c,s;
; 310  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 311  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 312  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 313  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 314  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 315  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 316  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 317  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 318  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 319  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 320  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 321  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 322  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 323  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 324  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXAAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z PROC		; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 		Scale(scale.X, scale.Y, scale.Z);

	mov	eax, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@Matrix3D@@QAEXMMM@Z		; Matrix3D::Scale

; 305  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z ENDP		; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Scale@Matrix3D@@QAEXMMM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 291  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		Row[0][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 293  : 		Row[1][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 294  : 		Row[2][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 295  : 		Row[0][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 296  : 		Row[1][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 297  : 		Row[2][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 298  : 		Row[0][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 299  : 		Row[1][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 300  : 		Row[2][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 301  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Scale@Matrix3D@@QAEXMMM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 279  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 		Row[0][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 281  : 		Row[1][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 282  : 		Row[2][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 283  : 		Row[0][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 284  : 		Row[1][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 285  : 		Row[2][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 286  : 		Row[0][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 287  : 		Row[1][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 288  : 		Row[2][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 289  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 		float tmp1,tmp2;
; 268  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 269  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 270  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 271  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 272  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 273  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 274  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 275  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 276  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 277  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 253  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 254  : 		float tmp1,tmp2;
; 255  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 256  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 257  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 258  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 259  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 260  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 261  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 262  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 263  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 240  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 		float tmp1,tmp2;
; 242  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 243  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 244  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 245  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 246  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 247  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 248  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 249  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 250  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 251  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 224  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 225  : 		float tmp1,tmp2;
; 226  : 		float c,s;
; 227  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 228  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 229  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 230  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 231  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 232  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 233  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 234  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 235  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 236  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 237  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 238  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 208  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 209  : 		float tmp1,tmp2;
; 210  : 		float s,c;
; 211  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 212  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 213  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 214  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 215  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 216  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 217  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 218  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 219  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 220  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 221  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 		float tmp1,tmp2;
; 194  : 		float s,c;
; 195  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 196  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 197  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 198  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 199  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 200  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 201  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 202  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 203  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 204  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 205  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 206  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Translate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		Row[0][3]  += (float)(Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 188  : 		Row[1][3]  += (float)(Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 189  : 		Row[2][3]  += (float)(Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Translate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Y, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		Row[0][3]  += (float)(Row[0][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 182  : 		Row[1][3]  += (float)(Row[1][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 183  : 		Row[2][3]  += (float)(Row[2][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Translate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_X, COMDAT
; _this$ = ecx

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		Row[0][3]  += (float)(Row[0][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 176  : 		Row[1][3]  += (float)(Row[1][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 177  : 		Row[2][3]  += (float)(Row[2][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv278 = -80						; size = 4
tv274 = -80						; size = 4
tv270 = -80						; size = 4
tv276 = -76						; size = 4
tv272 = -76						; size = 4
tv268 = -76						; size = 4
tv214 = -72						; size = 4
tv174 = -72						; size = 4
tv134 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Translate@Matrix3D@@QAEXABVVector3@@@Z PROC		; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		Row[0][3]  += Row[0][0]*t[0] + Row[0][1]*t[1] + Row[0][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv268[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv270[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv134[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm1

; 170  : 		Row[1][3]  += Row[1][0]*t[0] + Row[1][1]*t[1] + Row[1][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv174[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv272[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv274[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv274[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv174[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv174[ebp]
	movss	DWORD PTR [ecx], xmm1

; 171  : 		Row[2][3]  += Row[2][0]*t[0] + Row[2][1]*t[1] + Row[2][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv214[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv276[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv276[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv278[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv278[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv214[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv214[ebp]
	movss	DWORD PTR [ecx], xmm1

; 172  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@Matrix3D@@QAEXABVVector3@@@Z ENDP		; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv241 = -80						; size = 4
tv237 = -80						; size = 4
tv243 = -76						; size = 4
tv239 = -76						; size = 4
tv235 = -76						; size = 4
tv190 = -72						; size = 4
tv158 = -72						; size = 4
tv94 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Translate@Matrix3D@@QAEXMMM@Z PROC			; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0][3]  += (float)(Row[0][0]*x + Row[0][1]*y + Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm1

; 164  : 		Row[1][3]  += (float)(Row[1][0]*x + Row[1][1]*y + Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv239[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv241[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv158[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm1

; 165  : 		Row[2][3]  += (float)(Row[2][0]*x + Row[2][1]*y + Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv190[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv243[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv245[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv190[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv190[ebp]
	movss	DWORD PTR [ecx], xmm1

; 166  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Translate@Matrix3D@@QAEXMMM@Z ENDP			; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Make_Identity@Matrix3D@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3D@@QAEXXZ PROC			; Matrix3D::Make_Identity, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		Row[0].Set(1.0f,0.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 158  : 		Row[1].Set(0.0f,1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 159  : 		Row[2].Set(0.0f,0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3D@@QAEXXZ ENDP			; Matrix3D::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Z_Translation, COMDAT
; _this$ = ecx

; 154  : 	TT_INLINE void Adjust_Z_Translation(float z) { Row[2][3] += z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Y_Translation, COMDAT
; _this$ = ecx

; 153  : 	TT_INLINE void Adjust_Y_Translation(float y) { Row[1][3] += y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_X_Translation, COMDAT
; _this$ = ecx

; 152  : 	TT_INLINE void Adjust_X_Translation(float x) { Row[0][3] += x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv95 = -72						; size = 4
tv84 = -72						; size = 4
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Adjust_Translation, COMDAT
; _this$ = ecx

; 151  : 	TT_INLINE void Adjust_Translation(const Vector3 & t) { Row[0][3] += t[0]; Row[1][3] += t[1]; Row[2][3] += t[2]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv73[ebp], eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv73[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv84[ebp], eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv84[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv84[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv95[ebp], eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv95[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv95[ebp]
	movss	DWORD PTR [edx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Adjust_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Set_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Z_Translation, COMDAT
; _this$ = ecx

; 150  : 	TT_INLINE void Set_Z_Translation(float z) { Row[2][3] = z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Set_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Y_Translation, COMDAT
; _this$ = ecx

; 149  : 	TT_INLINE void Set_Y_Translation(float y) { Row[1][3] = y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Set_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_X_Translation, COMDAT
; _this$ = ecx

; 148  : 	TT_INLINE void Set_X_Translation(float x) { Row[0][3] = x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Z_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Z_Translation, COMDAT
; _this$ = ecx

; 147  : 	TT_INLINE float Get_Z_Translation(void) const { return Row[2][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Y_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Y_Translation, COMDAT
; _this$ = ecx

; 146  : 	TT_INLINE float Get_Y_Translation(void) const { return Row[1][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_X_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_X_Translation, COMDAT
; _this$ = ecx

; 145  : 	TT_INLINE float Get_X_Translation(void) const { return Row[0][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Set_Rotation@Matrix3D@@QAEXABVMatrix3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Set_Rotation@Matrix3D@@QAEXABVMatrix3@@@Z PROC		; Matrix3D::Set_Rotation, COMDAT
; _this$ = ecx

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 	Row[0][0] = m[0][0];

	push	0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 256  : 	Row[0][1] = m[0][1];

	push	1
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 257  : 	Row[0][2] = m[0][2];

	push	2
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 258  : 	Row[1][0] = m[1][0];

	push	0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 259  : 	Row[1][1] = m[1][1];

	push	1
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 260  : 	Row[1][2] = m[1][2];

	push	2
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 261  : 	Row[2][0] = m[2][0];

	push	0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 262  : 	Row[2][1] = m[2][1];

	push	1
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 263  : 	Row[2][2] = m[2][2];

	push	2
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 264  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Rotation@Matrix3D@@QAEXABVMatrix3@@@Z ENDP		; Matrix3D::Set_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Set_Translation, COMDAT
; _this$ = ecx

; 143  : 	TT_INLINE void Set_Translation(const Vector3 & t)  { Row[0][3] = t[0]; Row[1][3] = t[1];Row[2][3] = t[2]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Set_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set$ = 8						; size = 4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 142  : 	TT_INLINE void Get_Translation(Vector3 * set) const { set->X = Row[0][3]; set->Y = Row[1][3]; set->Z = Row[2][3]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 141  : 	TT_INLINE Vector3 Get_Translation(void) const { return Vector3(Row[0][3],Row[1][3],Row[2][3]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Set_Rotation@Matrix3D@@QAEXABVQuaternion@@@Z
_TEXT	SEGMENT
tv452 = -76						; size = 4
tv448 = -76						; size = 4
tv444 = -76						; size = 4
tv440 = -76						; size = 4
tv436 = -76						; size = 4
tv432 = -76						; size = 4
tv428 = -76						; size = 4
tv424 = -76						; size = 4
tv420 = -76						; size = 4
tv450 = -72						; size = 4
tv446 = -72						; size = 4
tv442 = -72						; size = 4
tv438 = -72						; size = 4
tv434 = -72						; size = 4
tv430 = -72						; size = 4
tv426 = -72						; size = 4
tv422 = -72						; size = 4
tv418 = -72						; size = 4
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?Set_Rotation@Matrix3D@@QAEXABVQuaternion@@@Z PROC	; Matrix3D::Set_Rotation, COMDAT
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 	Row[0][0] = (float)(1.0 - 2.0 * (q[1] * q[1] + q[2] * q[2]));

	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv418[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv418[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv420[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv420[ebp]
	movss	DWORD PTR [eax], xmm0

; 206  : 	Row[0][1] = (float)(2.0 * (q[0] * q[1] - q[2] * q[3]));

	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv422[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	3
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv422[ebp]
	subss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv424[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv424[ebp]
	movss	DWORD PTR [eax], xmm0

; 207  : 	Row[0][2] = (float)(2.0 * (q[2] * q[0] + q[1] * q[3]));

	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv426[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	3
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv426[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv428[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv428[ebp]
	movss	DWORD PTR [eax], xmm0

; 208  : 	Row[1][0] = (float)(2.0 * (q[0] * q[1] + q[2] * q[3]));

	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv430[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	3
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv430[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv432[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv432[ebp]
	movss	DWORD PTR [eax], xmm0

; 209  : 	Row[1][1] = (float)(1.0 - 2.0f * (q[2] * q[2] + q[0] * q[0]));

	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv434[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv434[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv436[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv436[ebp]
	movss	DWORD PTR [eax], xmm0

; 210  : 	Row[1][2] = (float)(2.0 * (q[1] * q[2] - q[0] * q[3]));

	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv438[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	3
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv438[ebp]
	subss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv440[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv440[ebp]
	movss	DWORD PTR [eax], xmm0

; 211  : 	Row[2][0] = (float)(2.0 * (q[2] * q[0] - q[1] * q[3]));

	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv442[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	3
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv442[ebp]
	subss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv444[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv444[ebp]
	movss	DWORD PTR [eax], xmm0

; 212  : 	Row[2][1] = (float)(2.0 * (q[1] * q[2] + q[0] * q[3]));

	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv446[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	3
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv446[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv448[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv448[ebp]
	movss	DWORD PTR [eax], xmm0

; 213  : 	Row[2][2] =(float)(1.0 - 2.0 * (q[1] * q[1] + q[0] * q[0]));

	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	movss	DWORD PTR tv450[ebp], xmm0
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _q$[ebp]
	call	??AQuaternion@@QBEABMH@Z		; Quaternion::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv450[ebp]
	addss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv452[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv452[ebp]
	movss	DWORD PTR [eax], xmm0

; 214  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Rotation@Matrix3D@@QAEXABVQuaternion@@@Z ENDP	; Matrix3D::Set_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rot$ = 8						; size = 4
_pos$ = 12						; size = 4
?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z PROC	; Matrix3D::Set, COMDAT
; _this$ = ecx

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 277  :    Set_Rotation(rot);

	mov	eax, DWORD PTR _rot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Rotation@Matrix3D@@QAEXABVQuaternion@@@Z ; Matrix3D::Set_Rotation

; 278  :    Set_Translation(pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z ; Matrix3D::Set_Translation

; 279  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z ENDP	; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rot$ = 8						; size = 4
_pos$ = 12						; size = 4
?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z PROC	; Matrix3D::Set, COMDAT
; _this$ = ecx

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 271  : 	Row[0].Set( rot[0][0], rot[0][1], rot[0][2], pos[0]);

	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	push	0
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 272  : 	Row[1].Set( rot[1][0], rot[1][1], rot[1][2], pos[1]);

	push	1
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	push	1
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	1
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 273  : 	Row[2].Set( rot[2][0], rot[2][1], rot[2][2], pos[2]);

	push	2
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _rot$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z ENDP	; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		Row[0].Set(1.0f,0.0f,0.0f,position[0]);

	push	0
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 135  : 		Row[1].Set(0.0f,1.0f,0.0f,position[1]);

	push	1
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 136  : 		Row[2].Set(0.0f,0.0f,1.0f,position[2]);

	push	2
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 137  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXABVVector3@@@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv368 = -80						; size = 4
tv362 = -80						; size = 4
tv356 = -80						; size = 4
tv366 = -76						; size = 4
tv360 = -76						; size = 4
tv354 = -76						; size = 4
tv364 = -72						; size = 4
tv358 = -72						; size = 4
tv352 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@MM@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 112  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 		Row[0].Set(
; 114  : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 115  : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 116  : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s),
; 117  : 			0.0f
; 118  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv352[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv352[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv354[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv354[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv356[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv356[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 119  : 		Row[1].Set(
; 120  : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 121  : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 122  : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s),
; 123  : 			0.0f
; 124  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv358[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv358[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv360[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv362[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv362[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 125  : 		Row[2].Set(
; 126  : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 127  : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 128  : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2])),
; 129  : 			0.0f
; 130  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv364[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv364[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv366[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv366[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv368[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv368[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 131  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3D@@QAEXABVVector3@@MM@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_s$ = -12						; size = 4
_c$ = -8						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@M@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 106  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 		float c = cosf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 108  : 		float s = sinf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 109  : 		Set(axis,s,c);

	push	ecx
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 110  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3D@@QAEXABVVector3@@M@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@000@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 100  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 		Row[0].Set(x[0],y[0],z[0],pos[0]);

	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 102  : 		Row[1].Set(x[1],y[1],z[1],pos[1]);

	push	1
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 103  : 		Row[2].Set(x[2],y[2],z[2],pos[2]);

	push	2
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Matrix3D@@QAEXABVVector3@@000@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m14$ = 20						; size = 4
_m21$ = 24						; size = 4
_m22$ = 28						; size = 4
_m23$ = 32						; size = 4
_m24$ = 36						; size = 4
_m31$ = 40						; size = 4
_m32$ = 44						; size = 4
_m33$ = 48						; size = 4
_m34$ = 52						; size = 4
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		Row[0].Set(m11,m12,m13,m14);

	push	ecx
	movss	xmm0, DWORD PTR _m14$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 96   : 		Row[1].Set(m21,m22,m23,m24);

	push	ecx
	movss	xmm0, DWORD PTR _m24$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 97   : 		Row[2].Set(m31,m32,m33,m34);

	push	ecx
	movss	xmm0, DWORD PTR _m34$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXQAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Set@Matrix3D@@QAEXQAM@Z PROC				; Matrix3D::Set, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 90   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 91   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXQAM@Z ENDP				; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Inverse_Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z
_TEXT	SEGMENT
_result$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vector$ = 12						; size = 4
?Inverse_Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z PROC ; Matrix3D::Inverse_Rotate_Vector, COMDAT
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	Vector3 result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 193  : 	
; 194  : 	result.X = Row[0].X * vector.X + Row[1].X * vector.Y + Row[2].X * vector.Z;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _result$[ebp], xmm0

; 195  : 	result.Y = Row[0].Y * vector.X + Row[1].Y * vector.Y + Row[2].Y * vector.Z;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+4]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+4]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _result$[ebp+4], xmm0

; 196  : 	result.Z = Row[0].Z * vector.X + Row[1].Z * vector.Y + Row[2].Z * vector.Z;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+8]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+8]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _result$[ebp+8], xmm0

; 197  : 	
; 198  : 	return result;

	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 199  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Inverse_Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z ENDP ; Matrix3D::Inverse_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z
_TEXT	SEGMENT
_result$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vector$ = 12						; size = 4
?Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z PROC	; Matrix3D::Rotate_Vector, COMDAT
; _this$ = ecx

; 178  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 179  : 	Vector3 result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 180  : 	
; 181  : 	result.X = Row[0].X * vector.X + Row[0].Y * vector.Y + Row[0].Z * vector.Z;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _result$[ebp], xmm0

; 182  : 	result.Y = Row[1].X * vector.X + Row[1].Y * vector.Y + Row[1].Z * vector.Z;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _result$[ebp+4], xmm0

; 183  : 	result.Z = Row[2].X * vector.X + Row[2].Y * vector.Y + Row[2].Z * vector.Z;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vector$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _result$[ebp+8], xmm0

; 184  : 	
; 185  : 	return result;

	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 186  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z ENDP	; Matrix3D::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Obj_Look_At@Matrix3D@@QAEXABVVector3@@0M@Z
_TEXT	SEGMENT
_cosy$ = -40						; size = 4
_siny$ = -36						; size = 4
_cosp$ = -32						; size = 4
_sinp$ = -28						; size = 4
_len2$ = -24						; size = 4
_len1$ = -20						; size = 4
_dz$ = -16						; size = 4
_dy$ = -12						; size = 4
_dx$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_t$ = 12						; size = 4
_roll$ = 16						; size = 4
?Obj_Look_At@Matrix3D@@QAEXABVVector3@@0M@Z PROC	; Matrix3D::Obj_Look_At, COMDAT
; _this$ = ecx

; 140  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 	float dx,dy,dz;
; 142  : 	float len1,len2;
; 143  : 	float sinp,cosp;
; 144  : 	float siny,cosy;
; 145  : 	dx = (t[0] - p[0]);

	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _dx$[ebp], xmm0

; 146  : 	dy = (t[1] - p[1]);

	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _dy$[ebp], xmm0

; 147  : 	dz = (t[2] - p[2]);

	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _p$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _dz$[ebp], xmm0

; 148  : 	len1 = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _len1$[ebp]

; 149  : 	len2 = (float)sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _len2$[ebp]

; 150  : 	if (len1 != 0.0f)

	movss	xmm0, DWORD PTR _len1$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@Obj_Look_A

; 151  : 	{
; 152  : 		sinp = dz/len1;

	movss	xmm0, DWORD PTR _dz$[ebp]
	divss	xmm0, DWORD PTR _len1$[ebp]
	movss	DWORD PTR _sinp$[ebp], xmm0

; 153  : 		cosp = len2/len1;

	movss	xmm0, DWORD PTR _len2$[ebp]
	divss	xmm0, DWORD PTR _len1$[ebp]
	movss	DWORD PTR _cosp$[ebp], xmm0

; 154  : 	}
; 155  : 	else

	jmp	SHORT $LN3@Obj_Look_A
$LN4@Obj_Look_A:

; 156  : 	{
; 157  : 		sinp = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sinp$[ebp], xmm0

; 158  : 		cosp = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cosp$[ebp], xmm0
$LN3@Obj_Look_A:

; 159  : 	}
; 160  : 	if (len2 != 0.0f)

	movss	xmm0, DWORD PTR _len2$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Obj_Look_A

; 161  : 	{
; 162  : 		siny = dy/len2;

	movss	xmm0, DWORD PTR _dy$[ebp]
	divss	xmm0, DWORD PTR _len2$[ebp]
	movss	DWORD PTR _siny$[ebp], xmm0

; 163  : 		cosy = dx/len2;

	movss	xmm0, DWORD PTR _dx$[ebp]
	divss	xmm0, DWORD PTR _len2$[ebp]
	movss	DWORD PTR _cosy$[ebp], xmm0

; 164  : 	}
; 165  : 	else

	jmp	SHORT $LN1@Obj_Look_A
$LN2@Obj_Look_A:

; 166  : 	{
; 167  : 		siny = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _siny$[ebp], xmm0

; 168  : 		cosy = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cosy$[ebp], xmm0
$LN1@Obj_Look_A:

; 169  : 	}
; 170  : 	Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity

; 171  : 	Translate(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Translate@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Translate

; 172  : 	Rotate_Z(siny,cosy);

	push	ecx
	movss	xmm0, DWORD PTR _cosy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _siny$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Z@Matrix3D@@QAEXMM@Z		; Matrix3D::Rotate_Z

; 173  : 	Rotate_Y(-sinp,cosp); 

	push	ecx
	movss	xmm0, DWORD PTR _cosp$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _sinp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Y@Matrix3D@@QAEXMM@Z		; Matrix3D::Rotate_Y

; 174  : 	Rotate_X(roll);

	push	ecx
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_X@Matrix3D@@QAEXM@Z		; Matrix3D::Rotate_X

; 175  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Obj_Look_At@Matrix3D@@QAEXABVVector3@@0M@Z ENDP	; Matrix3D::Obj_Look_At
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Look_At@Matrix3D@@QAEXABVVector3@@0M@Z
_TEXT	SEGMENT
_inv_len2$1 = -48					; size = 4
_inv_len$2 = -44					; size = 4
_len$ = -40						; size = 4
_rad2$ = -36						; size = 4
_cosy$ = -32						; size = 4
_siny$ = -28						; size = 4
_cosp$ = -24						; size = 4
_sinp$ = -20						; size = 4
_dz$ = -16						; size = 4
_dy$ = -12						; size = 4
_dx$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_t$ = 12						; size = 4
_roll$ = 16						; size = 4
?Look_At@Matrix3D@@QAEXABVVector3@@0M@Z PROC		; Matrix3D::Look_At, COMDAT
; _this$ = ecx

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 	float dx,dy,dz;
; 97   : 	float sinp,cosp;
; 98   : 	float siny,cosy;
; 99   : 	dx = (t[0] - p[0]);

	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _dx$[ebp], xmm0

; 100  : 	dy = (t[1] - p[1]);

	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _dy$[ebp], xmm0

; 101  : 	dz = (t[2] - p[2]);

	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _p$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _dz$[ebp], xmm0

; 102  : 	float rad2=dx*dx + dy*dy;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rad2$[ebp], xmm0

; 103  : 	float len=(float)WWMath::Sqrt(rad2);

	push	ecx
	movss	xmm0, DWORD PTR _rad2$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@WWMath@@SAMM@Z			; WWMath::Sqrt
	add	esp, 4
	fstp	DWORD PTR _len$[ebp]

; 104  : 	if (rad2!=0.0f)

	movss	xmm0, DWORD PTR _rad2$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@Look_At

; 105  : 	{
; 106  : 		float inv_len=1.0f/len;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$[ebp]
	movss	DWORD PTR _inv_len$2[ebp], xmm0

; 107  : 		siny = dy*inv_len;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _inv_len$2[ebp]
	movss	DWORD PTR _siny$[ebp], xmm0

; 108  : 		cosy = dx*inv_len;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _inv_len$2[ebp]
	movss	DWORD PTR _cosy$[ebp], xmm0

; 109  : 	}
; 110  : 	else

	jmp	SHORT $LN3@Look_At
$LN4@Look_At:

; 111  : 	{
; 112  : 		siny = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _siny$[ebp], xmm0

; 113  : 		cosy = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cosy$[ebp], xmm0
$LN3@Look_At:

; 114  : 	}
; 115  : 	rad2+=dz*dz;

	movss	xmm0, DWORD PTR _dz$[ebp]
	mulss	xmm0, DWORD PTR _dz$[ebp]
	addss	xmm0, DWORD PTR _rad2$[ebp]
	movss	DWORD PTR _rad2$[ebp], xmm0

; 116  : 	if (rad2!=0.0f)

	movss	xmm0, DWORD PTR _rad2$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Look_At

; 117  : 	{
; 118  : 		float inv_len2 = (float)WWMath::Inv_Sqrt(rad2);

	push	ecx
	movss	xmm0, DWORD PTR _rad2$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Inv_Sqrt@WWMath@@SIMM@Z		; WWMath::Inv_Sqrt
	fstp	DWORD PTR _inv_len2$1[ebp]

; 119  : 		sinp = dz*inv_len2;

	movss	xmm0, DWORD PTR _dz$[ebp]
	mulss	xmm0, DWORD PTR _inv_len2$1[ebp]
	movss	DWORD PTR _sinp$[ebp], xmm0

; 120  : 		cosp = len*inv_len2;

	movss	xmm0, DWORD PTR _len$[ebp]
	mulss	xmm0, DWORD PTR _inv_len2$1[ebp]
	movss	DWORD PTR _cosp$[ebp], xmm0

; 121  : 	}
; 122  : 	else

	jmp	SHORT $LN1@Look_At
$LN2@Look_At:

; 123  : 	{
; 124  : 		sinp = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sinp$[ebp], xmm0

; 125  : 		cosp = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cosp$[ebp], xmm0
$LN1@Look_At:

; 126  : 	}
; 127  : 	Row[0].X = 0.0f;	Row[0].Y = 0.0f;	Row[0].Z = -1.0f;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+4], xmm0
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+eax+8], xmm0

; 128  : 	Row[1].X = -1.0f;	Row[1].Y = 0.0f;	Row[1].Z = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+4], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+8], xmm0

; 129  : 	Row[2].X = 0.0f;	Row[2].Y = 1.0f;	Row[2].Z = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax+4], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+8], xmm0

; 130  : 	Row[0].W = p.X;

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax+12], edx

; 131  : 	Row[1].W = p.Y;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax+12], edx

; 132  : 	Row[2].W = p.Z;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax+12], edx

; 133  : 	Rotate_Y(siny,cosy);

	push	ecx
	movss	xmm0, DWORD PTR _cosy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _siny$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Y@Matrix3D@@QAEXMM@Z		; Matrix3D::Rotate_Y

; 134  : 	Rotate_X(sinp,cosp); 

	push	ecx
	movss	xmm0, DWORD PTR _cosp$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sinp$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_X@Matrix3D@@QAEXMM@Z		; Matrix3D::Rotate_X

; 135  : 	Rotate_Z(-roll);

	movss	xmm0, DWORD PTR _roll$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Z@Matrix3D@@QAEXM@Z		; Matrix3D::Rotate_Z

; 136  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Look_At@Matrix3D@@QAEXABVVector3@@0M@Z ENDP		; Matrix3D::Look_At
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Get_Z_Rotation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Z_Rotation@Matrix3D@@QBEMXZ PROC			; Matrix3D::Get_Z_Rotation, COMDAT
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 	return atan2(Row[1][0], Row[0][0]);

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Rotation@Matrix3D@@QBEMXZ ENDP			; Matrix3D::Get_Z_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Get_Y_Rotation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Y_Rotation@Matrix3D@@QBEMXZ PROC			; Matrix3D::Get_Y_Rotation, COMDAT
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	return atan2(Row[0][2], Row[2][2]);

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 84   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Rotation@Matrix3D@@QBEMXZ ENDP			; Matrix3D::Get_Y_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Get_X_Rotation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_X_Rotation@Matrix3D@@QBEMXZ PROC			; Matrix3D::Get_X_Rotation, COMDAT
; _this$ = ecx

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 	return atan2(Row[2][1], Row[1][1]);

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Rotation@Matrix3D@@QBEMXZ ENDP			; Matrix3D::Get_X_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ?Get_Orthogonal_Inverse@Matrix3D@@QBEXAAV1@@Z
_TEXT	SEGMENT
$T1 = -104						; size = 12
$T2 = -92						; size = 12
_trans$ = -16						; size = 12
_this$ = -4						; size = 4
_inv$ = 8						; size = 4
?Get_Orthogonal_Inverse@Matrix3D@@QBEXAAV1@@Z PROC	; Matrix3D::Get_Orthogonal_Inverse, COMDAT
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 	inv.Row[0][0] = Row[0][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 57   : 	inv.Row[0][1] = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 58   : 	inv.Row[0][2] = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 59   : 	inv.Row[1][0] = Row[0][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 60   : 	inv.Row[1][1] = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 61   : 	inv.Row[1][2] = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 62   : 	inv.Row[2][0] = Row[0][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 63   : 	inv.Row[2][1] = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 64   : 	inv.Row[2][2] = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 65   : 	Vector3 trans = Get_Translation();

	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ ; Matrix3D::Get_Translation

; 66   : 	trans = inv.Rotate_Vector(trans);

	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _inv$[ebp]
	call	?Rotate_Vector@Matrix3D@@QBE?AVVector3@@ABV2@@Z ; Matrix3D::Rotate_Vector
	push	eax
	lea	ecx, DWORD PTR _trans$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 67   : 	trans = -trans;

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR _trans$[ebp]
	call	??GVector3@@QBE?AV0@XZ			; Vector3::operator-
	push	eax
	lea	ecx, DWORD PTR _trans$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 68   : 	inv.Row[0][3] = trans[0];

	push	0
	lea	ecx, DWORD PTR _trans$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 69   : 	inv.Row[1][3] = trans[1];

	push	1
	lea	ecx, DWORD PTR _trans$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 70   : 	inv.Row[2][3] = trans[2];

	push	2
	lea	ecx, DWORD PTR _trans$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _inv$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 71   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Orthogonal_Inverse@Matrix3D@@QBEXAAV1@@Z ENDP	; Matrix3D::Get_Orthogonal_Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ??0Matrix3D@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -116						; size = 16
$T2 = -100						; size = 16
$T3 = -84						; size = 16
_this$ = -4						; size = 4
__11$ = 8						; size = 4
__12$ = 12						; size = 4
__13$ = 16						; size = 4
__14$ = 20						; size = 4
__21$ = 24						; size = 4
__22$ = 28						; size = 4
__23$ = 32						; size = 4
__24$ = 36						; size = 4
__31$ = 40						; size = 4
__32$ = 44						; size = 4
__33$ = 48						; size = 4
__34$ = 52						; size = 4
??0Matrix3D@@QAE@MMMMMMMMMMMM@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 35   : 	this->Row[0] = Vector4(_11,_12,_13,_14);

	push	ecx
	movss	xmm0, DWORD PTR __14$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __11$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 36   : 	this->Row[1] = Vector4(_21,_22,_23,_24);

	push	ecx
	movss	xmm0, DWORD PTR __24$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __21$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 37   : 	this->Row[2] = Vector4(_31,_32,_33,_34);

	push	ecx
	movss	xmm0, DWORD PTR __34$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __31$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 38   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0Matrix3D@@QAE@MMMMMMMMMMMM@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.cpp
;	COMDAT ??0Matrix3D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix3D@@QAE@XZ PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 26   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix3D@@QAE@XZ ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??4Matrix3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3D@@QAEAAV0@ABV0@@Z PROC			; Matrix3D::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 70   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 71   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 72   : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3D@@QAEAAV0@ABV0@@Z ENDP			; Matrix3D::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@ABV0@@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 61   : 	TT_INLINE Matrix3D(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 62   : 	{
; 63   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 64   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 65   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABV0@@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
??0Matrix3D@@QAE@ABVVector3@@@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE explicit Matrix3D(const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		Set(position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABVVector3@@@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3D(const Quaternion & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{
; 55   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z ; Matrix3D::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3D(const Matrix3 & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{
; 51   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z ; Matrix3D::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_sine$ = 12						; size = 4
_cosine$ = 16						; size = 4
??0Matrix3D@@QAE@ABVVector3@@MM@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 45   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float sine,float cosine)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 46   : 	{
; 47   : 		Set(axis,sine,cosine);

	push	ecx
	movss	xmm0, DWORD PTR _cosine$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sine$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3D@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3D@@QAE@ABVVector3@@M@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 41   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 42   : 	{
; 43   : 		Set(axis,angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@M@Z	; Matrix3D::Set

; 44   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVVector3@@M@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
??0Matrix3D@@QAE@ABVVector3@@000@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 37   : 	TT_INLINE explicit Matrix3D(const Vector3	&x,const Vector3	&y,const Vector3	&z,const Vector3	&pos)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 38   : 	{
; 39   : 		Set(x,y,z,pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@000@Z	; Matrix3D::Set

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix3D@@QAE@ABVVector3@@000@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@QAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@QAM@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 31   : 	TT_INLINE explicit Matrix3D(float m[12])

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 32   : 	{
; 33   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 34   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 35   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@QAM@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_init$ = 8						; size = 1
??0Matrix3D@@QAE@_N@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 30   : 	TT_INLINE explicit Matrix3D(bool init) { if (init) Make_Identity(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	movzx	eax, BYTE PTR _init$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix3D
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity
$LN2@Matrix3D:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@_N@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QBEABVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 28   :    TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QBEABVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QAEAAVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 27   :    TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QAEAAVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??D@YA?AVVector4@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??D@YA?AVVector4@@MABV0@@Z PROC				; operator*, COMDAT

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 115  : 	return b * a;

	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??D@YA?AVVector4@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 116  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector4@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??D@YA?AVVector4@@ABV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??D@YA?AVVector4@@ABV0@M@Z PROC				; operator*, COMDAT

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 110  : 	return Vector4(a.X * b, a.Y * b, a.Z * b, a.W * b);

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _b$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _b$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR _b$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _b$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector4@@ABV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??XVector4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
??XVector4@@QAEAAV0@M@Z PROC				; Vector4::operator*=, COMDAT
; _this$ = ecx

; 64   : 	TT_INLINE Vector4& operator*=(float f) { X *= f; Y *= f; Z *= f; W *= f; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector4@@QAEAAV0@M@Z ENDP				; Vector4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??ZVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator-=, COMDAT
; _this$ = ecx

; 63   : 	TT_INLINE Vector4& operator-=(const Vector4& v) { X -= v.X; Y -= v.Y; Z -= v.Z; W -= v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??YVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator+=, COMDAT
; _this$ = ecx

; 62   : 	TT_INLINE Vector4& operator+=(const Vector4& v) { X += v.X; Y += v.Y; Z += v.Z; W += v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QBEABMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 39   : 	TT_INLINE const float& operator[](int i) const { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QBEABMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QAEAAMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 38   : 	TT_INLINE float& operator[](int i) { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QAEAAMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ?Set@Vector4@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
?Set@Vector4@@QAEXMMMM@Z PROC				; Vector4::Set, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE void Set(float x, float y, float z, float w) { X = x; Y = y; Z = z; W = w; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Vector4@@QAEXMMMM@Z ENDP				; Vector4::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??4Vector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator=, COMDAT
; _this$ = ecx

; 34   : 	TT_INLINE Vector4& operator=(const Vector4& v) { X = v.X; Y = v.Y; Z = v.Z; W = v.W; return *this; };	

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
??0Vector4@@QAE@MMMM@Z PROC				; Vector4::Vector4, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE Vector4(float x, float y, float z, float w) {	X = x; Y = y; Z = z; W = w;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@@QAE@MMMM@Z ENDP				; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector4@@QAE@XZ PROC					; Vector4::Vector4, COMDAT
; _this$ = ecx

; 24   : 	TT_INLINE Vector4() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector4@@QAE@XZ ENDP					; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Swap@@YAXAAVVector3@@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Swap@@YAXAAVVector3@@0@Z PROC				; Swap, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 399  : 	Vector3 tmp(a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 400  : 	a = b;

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 401  : 	b = tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Swap@@YAXAAVVector3@@0@Z ENDP				; Swap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Subtract@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Subtract@Vector3@@SAXABV1@0PAV1@@Z PROC		; Vector3::Subtract, COMDAT

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 219  : 		set_result->X = a.X - b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 220  : 		set_result->Y = a.Y - b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 221  : 		set_result->Z = a.Z - b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Vector3@@SAXABV1@0PAV1@@Z ENDP		; Vector3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Add@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Add@Vector3@@SAXABV1@0PAV1@@Z PROC			; Vector3::Add, COMDAT

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 213  : 		set_result->X = a.X + b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 214  : 		set_result->Y = a.Y + b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 215  : 		set_result->Z = a.Z + b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Vector3@@SAXABV1@0PAV1@@Z ENDP			; Vector3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Cross_Product@Vector3@@SAXABV1@0PIAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Cross_Product@Vector3@@SAXABV1@0PIAV1@@Z PROC		; Vector3::Cross_Product, COMDAT

; 193  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN5@Cross_Prod:

; 194  : 		TT_ASSERT(!(set_result == &a || set_result == &b));

	xor	eax, eax
	jne	SHORT $LN5@Cross_Prod
	mov	eax, DWORD PTR _set_result$[ebp]
	cmp	eax, DWORD PTR _a$[ebp]
	je	SHORT $LN1@Cross_Prod
	mov	eax, DWORD PTR _set_result$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jne	SHORT $LN2@Cross_Prod
$LN1@Cross_Prod:
	int	3
$LN2@Cross_Prod:

; 195  : 		set_result->X = (a.Y * b.Z - a.Z * b.Y);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 196  : 		set_result->Y = (a.Z * b.X - a.X * b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 197  : 		set_result->Z = (a.X * b.Y - a.Y * b.X);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 198  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cross_Product@Vector3@@SAXABV1@0PIAV1@@Z ENDP		; Vector3::Cross_Product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Dot_Product@Vector3@@SAMABV1@0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Dot_Product@Vector3@@SAMABV1@0@Z PROC			; Vector3::Dot_Product, COMDAT

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 186  : 		return a * b;

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	??D@YAMABVVector3@@0@Z			; operator*
	add	esp, 8

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Dot_Product@Vector3@@SAMABV1@0@Z ENDP			; Vector3::Dot_Product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YAMABVVector3@@0@Z
_TEXT	SEGMENT
tv85 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??D@YAMABVVector3@@0@Z PROC				; operator*, COMDAT

; 381  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 382  : 	return	a.X * b.X + a.Y * b.Y + a.Z * b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]

; 383  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YAMABVVector3@@0@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
_a$ = 16						; size = 4
??D@YA?AVVector3@@MABV0@@Z PROC				; operator*, COMDAT

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 366  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 367  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??_0Vector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??_0Vector3@@QAEAAV0@M@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		X = X * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 166  : 		Y = Y * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 167  : 		Z = Z * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 168  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@@QAEAAV0@M@Z ENDP				; Vector3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??XVector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??XVector3@@QAEAAV0@M@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		X = X * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 159  : 		Y = Y * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 160  : 		Z = Z * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 161  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 162  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@@QAEAAV0@M@Z ENDP				; Vector3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??ZVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator-=, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		X -= v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 152  : 		Y -= v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 153  : 		Z -= v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 154  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??YVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator+=, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		X += v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 145  : 		Y += v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 146  : 		Z += v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 147  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 148  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??GVector3@@QBE?AV0@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@@QBE?AV0@XZ PROC				; Vector3::operator-, COMDAT
; _this$ = ecx

; 135  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 136  : 		return(Vector3(-X,-Y,-Z));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 137  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@@QBE?AV0@XZ ENDP				; Vector3::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length2@Vector3@@QBEMXZ
_TEXT	SEGMENT
tv85 = -72						; size = 4
_this$ = -4						; size = 4
?Length2@Vector3@@QBEMXZ PROC				; Vector3::Length2, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		return X * X + Y * Y + Z * Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]

; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length2@Vector3@@QBEMXZ ENDP				; Vector3::Length2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length@Vector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@Vector3@@QBEMXZ PROC				; Vector3::Length, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		return WWMath::Sqrt(Length2());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@WWMath@@SAMM@Z			; WWMath::Sqrt
	add	esp, 4

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector3@@QBEMXZ ENDP				; Vector3::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QBEABMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QBEABMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QAEAAMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QAEAAMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Set@Vector3@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Set@Vector3@@QAEXMMM@Z PROC				; Vector3::Set, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 56   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 57   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Vector3@@QAEXMMM@Z ENDP				; Vector3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??4Vector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator=, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 49   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 50   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 51   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0Vector3@@QAE@MMM@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 33   : 	TT_INLINE Vector3(float x, float y, float z)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	{
; 35   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 36   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 37   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 38   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@@QAE@MMM@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@@QAE@ABV0@@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 27   : 	TT_INLINE Vector3(const Vector3 &v)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	{
; 29   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 30   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 31   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@@QAE@ABV0@@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 23   : 	TT_INLINE Vector3()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	{
; 25   : 		X = Y = Z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 26   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ PROC		; RefArrayHelper<float,1024>::operator float *, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 163  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ ENDP		; RefArrayHelper<float,1024>::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4WWMath@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WWMath@@QAEAAV0@ABV0@@Z PROC				; WWMath::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WWMath@@QAEAAV0@ABV0@@Z ENDP				; WWMath::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Double@WWMath@@SA_NN@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 8
?Is_Valid_Double@WWMath@@SA_NN@Z PROC			; WWMath::Is_Valid_Double, COMDAT

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 208  : 	unsigned long * plong = (unsigned long *)(&x) + 1;

	lea	eax, DWORD PTR _x$[ebp+4]
	mov	DWORD PTR _plong$[ebp], eax

; 209  : 	unsigned long exponent = ((*plong) & 0x7FF00000) >> (32-12);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2146435072				; 7ff00000H
	shr	ecx, 20					; 00000014H
	mov	DWORD PTR _exponent$[ebp], ecx

; 210  : 	if (exponent == 0x7FF) {

	cmp	DWORD PTR _exponent$[ebp], 2047		; 000007ffH
	jne	SHORT $LN1@Is_Valid_D

; 211  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_D
$LN1@Is_Valid_D:

; 212  : 	}
; 213  : 	return true;

	mov	al, 1
$LN2@Is_Valid_D:

; 214  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Double@WWMath@@SA_NN@Z ENDP			; WWMath::Is_Valid_Double
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Float@WWMath@@SA_NM@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 4
?Is_Valid_Float@WWMath@@SA_NM@Z PROC			; WWMath::Is_Valid_Float, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 198  : 	unsigned long * plong = (unsigned long *)(&x);

	lea	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _plong$[ebp], eax

; 199  : 	unsigned long exponent = ((*plong) & 0x7F800000) >> (32-9);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2139095040				; 7f800000H
	shr	ecx, 23					; 00000017H
	mov	DWORD PTR _exponent$[ebp], ecx

; 200  : 	if (exponent == 0xFF) {

	cmp	DWORD PTR _exponent$[ebp], 255		; 000000ffH
	jne	SHORT $LN1@Is_Valid_F

; 201  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_F
$LN1@Is_Valid_F:

; 202  : 	}
; 203  : 	return true;

	mov	al, 1
$LN2@Is_Valid_F:

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Float@WWMath@@SA_NM@Z ENDP			; WWMath::Is_Valid_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Byte_To_Unit_Float@WWMath@@SAME@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
_byte$ = 8						; size = 1
?Byte_To_Unit_Float@WWMath@@SAME@Z PROC			; WWMath::Byte_To_Unit_Float, COMDAT

; 97   : 	static float Byte_To_Unit_Float(unsigned char byte) { return ((float)byte) / 255.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	movzx	eax, BYTE PTR _byte$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Byte_To_Unit_Float@WWMath@@SAME@Z ENDP			; WWMath::Byte_To_Unit_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Unit_Float_To_Byte@WWMath@@SAEM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?Unit_Float_To_Byte@WWMath@@SAEM@Z PROC			; WWMath::Unit_Float_To_Byte, COMDAT

; 96   : 	static unsigned char Unit_Float_To_Byte(float f) { return (unsigned char)(f*255.0f); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	movss	xmm0, DWORD PTR _f$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Unit_Float_To_Byte@WWMath@@SAEM@Z ENDP			; WWMath::Unit_Float_To_Byte
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJN@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 8
?Float_To_Long@WWMath@@SAJN@Z PROC			; WWMath::Float_To_Long, COMDAT

; 222  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 223  :     return _mm_cvttsd_si32(_mm_load_pd(&f));

	movupd	xmm0, XMMWORD PTR _f$[ebx]
	movapd	XMMWORD PTR $T1[ebp], xmm0
	movapd	xmm0, XMMWORD PTR $T1[ebp]
	cvttsd2si eax, xmm0

; 224  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJN@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAHHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAHHHM@Z PROC				; WWMath::Lerp, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 193  : 	return (a + (int)((b - a)*lerp));

	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	cvttss2si eax, xmm0
	add	eax, DWORD PTR _a$[ebp]

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAHHHM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SANNNM@Z
_TEXT	SEGMENT
tv73 = -72						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_lerp$ = 24						; size = 4
?Lerp@WWMath@@SANNNM@Z PROC				; WWMath::Lerp, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 188  : 	return (a + (b - a)*lerp);

	movsd	xmm0, QWORD PTR _b$[ebp]
	subsd	xmm0, QWORD PTR _a$[ebp]
	cvtss2sd xmm1, DWORD PTR _lerp$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _a$[ebp]
	movsd	QWORD PTR tv73[ebp], xmm0
	fld	QWORD PTR tv73[ebp]

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SANNNM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAMMMM@Z PROC				; WWMath::Lerp, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 183  : 	return (a + (b - a)*lerp);

	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	addss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAMMMM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Max@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Max@WWMath@@SAMMM@Z PROC				; WWMath::Max, COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 177  : 	if (a>b) return a;

	movss	xmm0, DWORD PTR _a$[ebp]
	comiss	xmm0, DWORD PTR _b$[ebp]
	jbe	SHORT $LN1@Max
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Max
$LN1@Max:

; 178  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Max:

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Max@WWMath@@SAMMM@Z ENDP				; WWMath::Max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Min@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Min@WWMath@@SAMMM@Z PROC				; WWMath::Min, COMDAT

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 171  : 	if (a<b) return a;

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _a$[ebp]
	jbe	SHORT $LN1@Min
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Min
$LN1@Min:

; 172  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Min:

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Min@WWMath@@SAMMM@Z ENDP				; WWMath::Min
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Wrap@WWMath@@SANNNN@Z PROC				; WWMath::Wrap, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 158  : 	if ( val >= max )	val -= (max-min);

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	movsd	xmm1, QWORD PTR _val$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 159  : 	if ( val < min )	val += (max-min);

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	addsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 160  : 	if ( val < min ) {

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 161  : 		val = min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 162  : 	}
; 163  : 	if ( val > max ) {

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 164  : 		val = max;

	movsd	xmm0, QWORD PTR _max$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 165  : 	}
; 166  : 	return val;

	fld	QWORD PTR _val$[ebp]

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SANNNN@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Wrap@WWMath@@SAMMMM@Z PROC				; WWMath::Wrap, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 145  : 	if ( val >= max )	val -= (max-min);

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 146  : 	if ( val < min )	val += (max-min);

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	addss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 147  : 	if ( val < min ) {

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 148  : 		val = min;

	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 149  : 	}
; 150  : 	if ( val > max ) {

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 151  : 		val = max;

	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 152  : 	}
; 153  : 	return val;

	fld	DWORD PTR _val$[ebp]

; 154  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SAMMMM@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp_Int@WWMath@@SAHHHH@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min_val$ = 12						; size = 4
_max_val$ = 16						; size = 4
?Clamp_Int@WWMath@@SAHHHH@Z PROC			; WWMath::Clamp_Int, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 138  : 	if(val < min_val) return min_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _min_val$[ebp]
	jge	SHORT $LN2@Clamp_Int
	mov	eax, DWORD PTR _min_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN2@Clamp_Int:

; 139  : 	if(val > max_val) return max_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _max_val$[ebp]
	jle	SHORT $LN1@Clamp_Int
	mov	eax, DWORD PTR _max_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN1@Clamp_Int:

; 140  : 	return val;

	mov	eax, DWORD PTR _val$[ebp]
$LN3@Clamp_Int:

; 141  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp_Int@WWMath@@SAHHHH@Z ENDP			; WWMath::Clamp_Int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Clamp@WWMath@@SANNNN@Z PROC				; WWMath::Clamp, COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 131  : 	if(val < min) return min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	QWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 132  : 	if(val > max) return max;

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	QWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 133  : 	return val;

	fld	QWORD PTR _val$[ebp]
$LN3@Clamp:

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SANNNN@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Clamp@WWMath@@SAMMMM@Z PROC				; WWMath::Clamp, COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 124  : 	if(val < min) return min;

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	DWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 125  : 	if(val > max) return max;

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	DWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 126  : 	return val;

	fld	DWORD PTR _val$[ebp]
$LN3@Clamp:

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SAMMMM@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Random_Float@WWMath@@SAMMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_min$ = 8						; size = 4
_max$ = 12						; size = 4
?Random_Float@WWMath@@SAMMM@Z PROC			; WWMath::Random_Float, COMDAT

; 118  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 119  : 	return Random_Float() * (max-min) + min; 

	call	?Random_Float@WWMath@@SAMXZ		; WWMath::Random_Float
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	xmm1, DWORD PTR _max$[ebp]
	subss	xmm1, DWORD PTR _min$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Random_Float@WWMath@@SAMMM@Z ENDP			; WWMath::Random_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z PROC		; WWMath::Fast_Is_Float_Positive, COMDAT

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 114  : 	return !((*(int *)(&val)) & 0x80000000);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2147483648			; 80000000H
	jne	SHORT $LN3@Fast_Is_Fl
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Fast_Is_Fl
$LN3@Fast_Is_Fl:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Fast_Is_Fl:
	mov	al, BYTE PTR tv66[ebp]

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z ENDP		; WWMath::Fast_Is_Float_Positive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Floor@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Floor@WWMath@@SAMM@Z PROC				; WWMath::Floor, COMDAT

; 81   : 	static float Floor(float val) { return floorf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Floor@WWMath@@SAMM@Z ENDP				; WWMath::Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Ceil@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Ceil@WWMath@@SAMM@Z PROC				; WWMath::Ceil, COMDAT

; 80   : 	static float Ceil(float val) { return ceilf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_ceilf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Ceil@WWMath@@SAMM@Z ENDP				; WWMath::Ceil
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sign@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sign@WWMath@@SAMM@Z PROC				; WWMath::Sign, COMDAT

; 102  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 103  : 	if (val > 0.0f) { 

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@Sign

; 104  : 		return +1.0f; 

	fld1
	jmp	SHORT $LN3@Sign
$LN2@Sign:

; 105  : 	} 
; 106  : 	if (val < 0.0f) { 

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN1@Sign

; 107  : 		return -1.0f; 

	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN3@Sign
$LN1@Sign:

; 108  : 	} 
; 109  : 	return 0.0f; 

	fldz
$LN3@Sign:

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sign@WWMath@@SAMM@Z ENDP				; WWMath::Sign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan2@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
_x$ = 12						; size = 4
?Atan2@WWMath@@SAMMM@Z PROC				; WWMath::Atan2, COMDAT

; 78   : 	static float Atan2(float y,float x) { return static_cast<float>(atan2(y,x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan2@WWMath@@SAMMM@Z ENDP				; WWMath::Atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan@WWMath@@SAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Atan@WWMath@@SAMM@Z PROC				; WWMath::Atan, COMDAT

; 77   : 	static float Atan(float x) { return static_cast<float>(atan(x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan@WWMath@@SAMM@Z ENDP				; WWMath::Atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Asin@WWMath@@SAMM@Z PROC				; WWMath::Asin, COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 307  : 	return (float)asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Asin@WWMath@@SAMM@Z ENDP				; WWMath::Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Acos@WWMath@@SAMM@Z PROC				; WWMath::Acos, COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 287  : 	return (float)acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4

; 288  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Acos@WWMath@@SAMM@Z ENDP				; WWMath::Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Asin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Asin, COMDAT

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 292  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Asin

; 293  : 		return WWMath::Asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Asin@WWMath@@SAMM@Z			; WWMath::Asin
	add	esp, 4
	jmp	$LN12@Fast_Asin
$LN11@Fast_Asin:

; 294  : 	}
; 295  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 296  : 	int idx0=Float_To_Int_Floor(val); 

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 297  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 298  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 299  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 300  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Asin:

; 301  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Asin
$LN6@Fast_Asin:
	int	3
$LN7@Fast_Asin:

; 302  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Asin
$LN1@Fast_Asin:
	int	3
$LN2@Fast_Asin:

; 303  : 	return (1.0f - frac) * _FastAsinTable[idx0] + frac * _FastAsinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Asin:

; 304  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Asin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Acos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Acos, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 271  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Acos

; 272  : 		return WWMath::Acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Acos@WWMath@@SAMM@Z			; WWMath::Acos
	add	esp, 4
	jmp	$LN12@Fast_Acos
$LN11@Fast_Acos:

; 273  : 	}
; 274  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 275  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 276  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 277  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 278  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 279  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Acos:

; 280  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Acos
$LN6@Fast_Acos:
	int	3
$LN7@Fast_Acos:

; 281  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Acos
$LN1@Fast_Acos:
	int	3
$LN2@Fast_Acos:

; 282  : 	return (1.0f - frac) * _FastAcosTable[idx0] + frac * _FastAcosTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Acos:

; 283  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Acos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Cos@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Cos, COMDAT

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 266  : 	return 1.0f / WWMath::Fast_Cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Cos@WWMath@@SAMM@Z		; WWMath::Fast_Cos
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Cos@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv135 = -88						; size = 4
tv140 = -84						; size = 4
tv138 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Cos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Cos, COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 254  : 	val+=(WWMATH_PI * 0.5f);

	movss	xmm0, DWORD PTR _val$[ebp]
	addss	xmm0, DWORD PTR __real@3fc90fdb
	movss	DWORD PTR _val$[ebp], xmm0

; 255  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 256  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 257  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 258  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 259  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 260  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 261  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv140[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv140[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv135[ebp], xmm1
	fld	DWORD PTR tv135[ebp]

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Cos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Sin@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Sin, COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 249  : 	return 1.0f / WWMath::Fast_Sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Sin@WWMath@@SAMM@Z		; WWMath::Fast_Sin
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 250  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Sin@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv133 = -88						; size = 4
tv138 = -84						; size = 4
tv136 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Sin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Sin, COMDAT

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 238  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 239  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 240  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 241  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 242  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 243  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 244  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv136[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv136[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv138[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv133[ebp], xmm1
	fld	DWORD PTR tv133[ebp]

; 245  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Sin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJM@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 4
?Float_To_Long@WWMath@@SAJM@Z PROC			; WWMath::Float_To_Long, COMDAT

; 217  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 218  :     return _mm_cvtt_ss2si(_mm_load_ss(&f));

	movss	xmm0, DWORD PTR _f$[ebx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	cvttss2si eax, xmm0

; 219  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJM@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Inv_Sqrt@WWMath@@SIMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_number$ = 8						; size = 4
?Inv_Sqrt@WWMath@@SIMM@Z PROC				; WWMath::Inv_Sqrt, COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 342  : 	return 1.f / sqrt(number);

	push	ecx
	movss	xmm0, DWORD PTR _number$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 343  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inv_Sqrt@WWMath@@SIMM@Z ENDP				; WWMath::Inv_Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sqrt@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sqrt@WWMath@@SAMM@Z PROC				; WWMath::Sqrt, COMDAT

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 312  :     return ::sqrtf(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4

; 313  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sqrt@WWMath@@SAMM@Z ENDP				; WWMath::Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sin@WWMath@@SAMM@Z PROC				; WWMath::Sin, COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 233  :     return ::sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sin@WWMath@@SAMM@Z ENDP				; WWMath::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Cos@WWMath@@SAMM@Z PROC				; WWMath::Cos, COMDAT

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 228  :     return ::cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cos@WWMath@@SAMM@Z ENDP				; WWMath::Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Floor@WWMath@@SAHABM@Z
_TEXT	SEGMENT
tv83 = -96						; size = 4
_r$ = -28						; size = 4
_mantissa$ = -24					; size = 4
_imask$ = -20						; size = 4
_expsign$ = -16						; size = 4
_exponent$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Floor@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Floor, COMDAT

; 326  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 327  : 	int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 328  : 	int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 329  : 	a&=0x7fffffff;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _a$[ebp], eax

; 330  : 	int exponent = (a>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 331  : 	int expsign	= ~(exponent>>31);

	mov	eax, DWORD PTR _exponent$[ebp]
	sar	eax, 31					; 0000001fH
	not	eax
	mov	DWORD PTR _expsign$[ebp], eax

; 332  : 	int imask = ( (1<<(31-(exponent))))-1;

	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _imask$[ebp], eax

; 333  : 	int mantissa = (a&((1<<23)-1));

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	mov	DWORD PTR _mantissa$[ebp], eax

; 334  : 	int r = ((unsigned int)(mantissa|(1<<23))<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	or	eax, 8388608				; 00800000H
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 335  : #pragma warning(suppress: 6290) //warning C6290: Bitwise operation on logical result: ! has higher precedence than &. Use && or (!(x & y)) instead
; 336  : 	r = ((r & expsign) ^ (sign)) + ((!((mantissa<<8)&imask)&(expsign^((a-1)>>31)))&sign);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	and	eax, DWORD PTR _imask$[ebp]
	jne	SHORT $LN3@Float_To_I
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@Float_To_I
$LN3@Float_To_I:
	mov	DWORD PTR tv83[ebp], 0
$LN4@Float_To_I:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR _expsign$[ebp]
	xor	ecx, DWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	sub	edx, 1
	sar	edx, 31					; 0000001fH
	xor	edx, DWORD PTR _expsign$[ebp]
	and	edx, DWORD PTR tv83[ebp]
	and	edx, DWORD PTR _sign$[ebp]
	add	ecx, edx
	mov	DWORD PTR _r$[ebp], ecx

; 337  : 	return r;

	mov	eax, DWORD PTR _r$[ebp]

; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Floor@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Chop@WWMath@@SAHABM@Z
_TEXT	SEGMENT
_r$ = -20						; size = 4
_exponent$ = -16					; size = 4
_mantissa$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Chop@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Chop, COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 317  :     int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 318  :     int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 319  :     int mantissa = (a&((1<<23)-1))|(1<<23);

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	or	eax, 8388608				; 00800000H
	mov	DWORD PTR _mantissa$[ebp], eax

; 320  :     int exponent = ((a&0x7fffffff)>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 321  :     int r = ((unsigned int)(mantissa)<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 322  :     return ((r ^ (sign)) - sign ) &~ (exponent>>31);

	mov	eax, DWORD PTR _r$[ebp]
	xor	eax, DWORD PTR _sign$[ebp]
	sub	eax, DWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	sar	ecx, 31					; 0000001fH
	not	ecx
	and	eax, ecx

; 323  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Chop@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Chop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fabs@WWMath@@SAMM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_val$ = 8						; size = 4
?Fabs@WWMath@@SAMM@Z PROC				; WWMath::Fabs, COMDAT

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 58   : 		int value=*(int*)&val;

	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 59   : 		value&=0x7fffffff;

	mov	eax, DWORD PTR _value$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _value$[ebp], eax

; 60   : 		return *(float*)&value;

	fld	DWORD PTR _value$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fabs@WWMath@@SAMM@Z ENDP				; WWMath::Fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 541  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 507  :         {return (atan2f(_Y, _X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv78 = -80						; size = 8
tv72 = -72						; size = 8
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv72[ebp], xmm0
	fld	QWORD PTR tv72[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv78[ebp]
	movsd	xmm0, QWORD PTR tv78[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv80[ebp], xmm0
	fld	DWORD PTR tv80[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_cos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _ceilf
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv74 = -72						; size = 8
__X$ = 8						; size = 4
_ceilf	PROC						; COMDAT

; 408  :         {return ((float)ceil((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__ceil
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ceilf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv85 = -92						; size = 4
tv83 = -88						; size = 8
tv77 = -80						; size = 8
tv75 = -72						; size = 8
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
	fld	QWORD PTR tv75[ebp]
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
	fld	QWORD PTR tv77[ebp]
	call	__CIatan2
	fstp	QWORD PTR tv83[ebp]
	movsd	xmm0, QWORD PTR tv83[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_atan_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_asin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_acos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
