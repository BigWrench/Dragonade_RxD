; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\PointerRemapClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	?Add_Ref@RefCountClass@@QAEXXZ			; RefCountClass::Add_Ref
PUBLIC	??0PtrPairStruct@PointerRemapClass@@QAE@PAX0@Z	; PointerRemapClass::PtrPairStruct::PtrPairStruct
PUBLIC	??0PtrRemapStruct@PointerRemapClass@@QAE@XZ	; PointerRemapClass::PtrRemapStruct::PtrRemapStruct
PUBLIC	??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrPairStruct>::operator[]
PUBLIC	?Length@?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ; VectorClass<PointerRemapClass::PtrPairStruct>::Length
PUBLIC	?Count@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Count
PUBLIC	?Add@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAE_NABUPtrPairStruct@PointerRemapClass@@@Z ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Add
PUBLIC	?Delete_All@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEXXZ ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Delete_All
PUBLIC	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
PUBLIC	?Length@?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; VectorClass<PointerRemapClass::PtrRemapStruct>::Length
PUBLIC	?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Count
PUBLIC	?Add@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAE_NABUPtrRemapStruct@PointerRemapClass@@@Z ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Add
PUBLIC	?Delete_All@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEXXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Delete_All
PUBLIC	?ptr_pair_compare_function@PointerRemapClass@@CAHPBX0@Z ; PointerRemapClass::ptr_pair_compare_function
PUBLIC	?ptr_request_compare_function@PointerRemapClass@@CAHPBX0@Z ; PointerRemapClass::ptr_request_compare_function
PUBLIC	?Reset@PointerRemapClass@@QAEXXZ		; PointerRemapClass::Reset
PUBLIC	?Process@PointerRemapClass@@QAEXXZ		; PointerRemapClass::Process
PUBLIC	?Register_Pointer@PointerRemapClass@@QAEXPAX0@Z	; PointerRemapClass::Register_Pointer
PUBLIC	?Request_Pointer_Remap@PointerRemapClass@@QAEXPAPAX@Z ; PointerRemapClass::Request_Pointer_Remap
PUBLIC	?Request_Ref_Counted_Pointer_Remap@PointerRemapClass@@QAEXPAPAVRefCountClass@@@Z ; PointerRemapClass::Request_Ref_Counted_Pointer_Remap
PUBLIC	?Process_Request_Table@PointerRemapClass@@QAEXAAV?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@_N@Z ; PointerRemapClass::Process_Request_Table
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__qsort:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.cpp
;	COMDAT ?Process_Request_Table@PointerRemapClass@@QAEXAAV?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@_N@Z
_TEXT	SEGMENT
_pos$1 = -20						; size = 4
_ptr$2 = -16						; size = 4
_i$3 = -12						; size = 4
_j$ = -8						; size = 4
_this$ = -4						; size = 4
_request_table$ = 8					; size = 4
_refcount$ = 12						; size = 1
?Process_Request_Table@PointerRemapClass@@QAEXAAV?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@_N@Z PROC ; PointerRemapClass::Process_Request_Table, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	int j = 0;

	mov	DWORD PTR _j$[ebp], 0

; 63   : 	for (int i = 0;i < request_table.Count();i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN11@Process_Re
$LN10@Process_Re:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN11@Process_Re:
	mov	ecx, DWORD PTR _request_table$[ebp]
	call	?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	$LN12@Process_Re

; 64   : 	{
; 65   : 		void *ptr = *(request_table[i].PointerToRemap);

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _request_table$[ebp]
	call	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ptr$2[ebp], edx

; 66   : 		int pos = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _pos$1[ebp], eax

; 67   : 		for (pos = j;j < PointerPairTable.Count();j++)

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _pos$1[ebp], eax
	jmp	SHORT $LN8@Process_Re
$LN7@Process_Re:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN8@Process_Re:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Count
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN6@Process_Re

; 68   : 		{
; 69   : 			if (PointerPairTable[j].OldPointer >= ptr)

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrPairStruct>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ptr$2[ebp]
	jb	SHORT $LN5@Process_Re

; 70   : 			{
; 71   : 				break;

	jmp	SHORT $LN6@Process_Re
$LN5@Process_Re:

; 72   : 			}
; 73   : 		}

	jmp	SHORT $LN7@Process_Re
$LN6@Process_Re:

; 74   : 		if (j >= PointerPairTable.Count())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Count
	cmp	DWORD PTR _j$[ebp], eax
	jl	SHORT $LN4@Process_Re

; 75   : 		{
; 76   : 			j = pos;

	mov	eax, DWORD PTR _pos$1[ebp]
	mov	DWORD PTR _j$[ebp], eax

; 77   : 			*request_table[i].PointerToRemap = 0;

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _request_table$[ebp]
	call	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0
$LN4@Process_Re:

; 78   : 		}
; 79   : 		if (PointerPairTable[j].OldPointer != ptr)

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrPairStruct>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ptr$2[ebp]
	je	SHORT $LN3@Process_Re

; 80   : 		{
; 81   : 			j = pos;

	mov	eax, DWORD PTR _pos$1[ebp]
	mov	DWORD PTR _j$[ebp], eax

; 82   : 			*request_table[i].PointerToRemap = 0;

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _request_table$[ebp]
	call	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 83   : 		}
; 84   : 		else

	jmp	SHORT $LN2@Process_Re
$LN3@Process_Re:

; 85   : 		{
; 86   : 			*request_table[i].PointerToRemap = PointerPairTable[j].NewPointer;

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrPairStruct>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _request_table$[ebp]
	call	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx], eax

; 87   : 			if (refcount)

	movzx	eax, BYTE PTR _refcount$[ebp]
	test	eax, eax
	je	SHORT $LN2@Process_Re

; 88   : 			{
; 89   : 				((RefCountClass *)(*request_table[i].PointerToRemap))->Add_Ref();

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _request_table$[ebp]
	call	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	call	?Add_Ref@RefCountClass@@QAEXXZ		; RefCountClass::Add_Ref
$LN2@Process_Re:

; 90   : 			}
; 91   : 		}
; 92   : 	}

	jmp	$LN10@Process_Re
$LN12@Process_Re:

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Process_Request_Table@PointerRemapClass@@QAEXAAV?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@_N@Z ENDP ; PointerRemapClass::Process_Request_Table
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.cpp
;	COMDAT ?Request_Ref_Counted_Pointer_Remap@PointerRemapClass@@QAEXPAPAVRefCountClass@@@Z
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_this$ = -4						; size = 4
_pointer_to_convert$ = 8				; size = 4
?Request_Ref_Counted_Pointer_Remap@PointerRemapClass@@QAEXPAPAVRefCountClass@@@Z PROC ; PointerRemapClass::Request_Ref_Counted_Pointer_Remap, COMDAT
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	PtrRemapStruct ptr;

	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??0PtrRemapStruct@PointerRemapClass@@QAE@XZ ; PointerRemapClass::PtrRemapStruct::PtrRemapStruct

; 56   : 	ptr.PointerToRemap = (void **)pointer_to_convert;

	mov	eax, DWORD PTR _pointer_to_convert$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax

; 57   : 	RefCountRequestTable.Add(ptr);

	lea	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?Add@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAE_NABUPtrRemapStruct@PointerRemapClass@@@Z ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Add

; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Request_Ref_Counted_Pointer_Remap@PointerRemapClass@@QAEXPAPAVRefCountClass@@@Z ENDP ; PointerRemapClass::Request_Ref_Counted_Pointer_Remap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.cpp
;	COMDAT ?Request_Pointer_Remap@PointerRemapClass@@QAEXPAPAX@Z
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_this$ = -4						; size = 4
_pointer_to_convert$ = 8				; size = 4
?Request_Pointer_Remap@PointerRemapClass@@QAEXPAPAX@Z PROC ; PointerRemapClass::Request_Pointer_Remap, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	PtrRemapStruct ptr;

	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??0PtrRemapStruct@PointerRemapClass@@QAE@XZ ; PointerRemapClass::PtrRemapStruct::PtrRemapStruct

; 49   : 	ptr.PointerToRemap = pointer_to_convert;

	mov	eax, DWORD PTR _pointer_to_convert$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax

; 50   : 	PointerRequestTable.Add(ptr);

	lea	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAE_NABUPtrRemapStruct@PointerRemapClass@@@Z ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Add

; 51   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Request_Pointer_Remap@PointerRemapClass@@QAEXPAPAX@Z ENDP ; PointerRemapClass::Request_Pointer_Remap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.cpp
;	COMDAT ?Register_Pointer@PointerRemapClass@@QAEXPAX0@Z
_TEXT	SEGMENT
_ptr$ = -12						; size = 8
_this$ = -4						; size = 4
_old_pointer$ = 8					; size = 4
_new_pointer$ = 12					; size = 4
?Register_Pointer@PointerRemapClass@@QAEXPAX0@Z PROC	; PointerRemapClass::Register_Pointer, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	PtrPairStruct ptr(old_pointer,new_pointer);

	mov	eax, DWORD PTR _new_pointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_pointer$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??0PtrPairStruct@PointerRemapClass@@QAE@PAX0@Z ; PointerRemapClass::PtrPairStruct::PtrPairStruct

; 43   : 	PointerPairTable.Add(ptr);

	lea	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAE_NABUPtrPairStruct@PointerRemapClass@@@Z ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Add

; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Register_Pointer@PointerRemapClass@@QAEXPAX0@Z ENDP	; PointerRemapClass::Register_Pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.cpp
;	COMDAT ?Process@PointerRemapClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Process@PointerRemapClass@@QAEXXZ PROC			; PointerRemapClass::Process, COMDAT
; _this$ = ecx

; 16   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 17   : 	if (PointerPairTable.Count() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Count
	test	eax, eax
	jle	SHORT $LN3@Process

; 18   : 	{
; 19   : 		qsort(&(PointerPairTable[0]),PointerPairTable.Count(),sizeof(PtrPairStruct),ptr_pair_compare_function);

	push	OFFSET ?ptr_pair_compare_function@PointerRemapClass@@CAHPBX0@Z ; PointerRemapClass::ptr_pair_compare_function
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Count
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrPairStruct>::operator[]
	push	eax
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H
$LN3@Process:

; 20   : 	}
; 21   : 	if (PointerRequestTable.Count() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Count
	test	eax, eax
	jle	SHORT $LN2@Process

; 22   : 	{
; 23   : 		qsort(&(PointerRequestTable[0]),PointerRequestTable.Count(),sizeof(PtrRemapStruct),ptr_request_compare_function);

	push	OFFSET ?ptr_request_compare_function@PointerRemapClass@@CAHPBX0@Z ; PointerRemapClass::ptr_request_compare_function
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Count
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
	push	eax
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H

; 24   : 		Process_Request_Table(PointerRequestTable,false);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Process_Request_Table@PointerRemapClass@@QAEXAAV?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@_N@Z ; PointerRemapClass::Process_Request_Table
$LN2@Process:

; 25   : 	}
; 26   : 	if (RefCountRequestTable.Count() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Count
	test	eax, eax
	jle	SHORT $LN4@Process

; 27   : 	{
; 28   : 		qsort(&(RefCountRequestTable[0]),RefCountRequestTable.Count(),sizeof(PtrRemapStruct),ptr_request_compare_function);

	push	OFFSET ?ptr_request_compare_function@PointerRemapClass@@CAHPBX0@Z ; PointerRemapClass::ptr_request_compare_function
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Count
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
	push	eax
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H

; 29   : 		Process_Request_Table(RefCountRequestTable,true);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Process_Request_Table@PointerRemapClass@@QAEXAAV?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@_N@Z ; PointerRemapClass::Process_Request_Table
$LN4@Process:

; 30   : 	}
; 31   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Process@PointerRemapClass@@QAEXXZ ENDP			; PointerRemapClass::Process
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.cpp
;	COMDAT ?Reset@PointerRemapClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@PointerRemapClass@@QAEXXZ PROC			; PointerRemapClass::Reset, COMDAT
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	PointerPairTable.Delete_All();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete_All@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEXXZ ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Delete_All

; 36   : 	PointerRequestTable.Delete_All();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Delete_All@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEXXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Delete_All

; 37   : 	RefCountRequestTable.Delete_All();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?Delete_All@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEXXZ ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Delete_All

; 38   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@PointerRemapClass@@QAEXXZ ENDP			; PointerRemapClass::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.cpp
;	COMDAT ?ptr_request_compare_function@PointerRemapClass@@CAHPBX0@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_result$ = -4						; size = 4
_ptr1$ = 8						; size = 4
_ptr2$ = 12						; size = 4
?ptr_request_compare_function@PointerRemapClass@@CAHPBX0@Z PROC ; PointerRemapClass::ptr_request_compare_function, COMDAT

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 107  : 	int result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 108  : 	if (*((PtrRemapStruct *)ptr1)->PointerToRemap != *((PtrRemapStruct *)ptr2)->PointerToRemap)

	mov	eax, DWORD PTR _ptr1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ptr2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@ptr_reques

; 109  : 	{
; 110  : 		result = -(*((PtrRemapStruct *)ptr1)->PointerToRemap < *((PtrRemapStruct *)ptr2)->PointerToRemap) | 1;

	mov	eax, DWORD PTR _ptr1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ptr2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN4@ptr_reques
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@ptr_reques
$LN4@ptr_reques:
	mov	DWORD PTR tv74[ebp], 0
$LN5@ptr_reques:
	mov	edx, DWORD PTR tv74[ebp]
	neg	edx
	or	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$LN1@ptr_reques:

; 111  : 	}
; 112  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 113  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ptr_request_compare_function@PointerRemapClass@@CAHPBX0@Z ENDP ; PointerRemapClass::ptr_request_compare_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.cpp
;	COMDAT ?ptr_pair_compare_function@PointerRemapClass@@CAHPBX0@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_result$ = -4						; size = 4
_ptr1$ = 8						; size = 4
_ptr2$ = 12						; size = 4
?ptr_pair_compare_function@PointerRemapClass@@CAHPBX0@Z PROC ; PointerRemapClass::ptr_pair_compare_function, COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 97   : 	int result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 98   : 	if (((PtrPairStruct *)ptr1)->OldPointer != ((PtrPairStruct *)ptr2)->OldPointer)

	mov	eax, DWORD PTR _ptr1$[ebp]
	mov	ecx, DWORD PTR _ptr2$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@ptr_pair_c

; 99   : 	{
; 100  : 		result = -(((PtrPairStruct *)ptr1)->OldPointer < ((PtrPairStruct *)ptr2)->OldPointer) | 1;

	mov	eax, DWORD PTR _ptr1$[ebp]
	mov	ecx, DWORD PTR _ptr2$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN4@ptr_pair_c
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN5@ptr_pair_c
$LN4@ptr_pair_c:
	mov	DWORD PTR tv70[ebp], 0
$LN5@ptr_pair_c:
	mov	eax, DWORD PTR tv70[ebp]
	neg	eax
	or	eax, 1
	mov	DWORD PTR _result$[ebp], eax
$LN1@ptr_pair_c:

; 101  : 	}
; 102  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 103  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ptr_pair_compare_function@PointerRemapClass@@CAHPBX0@Z ENDP ; PointerRemapClass::ptr_pair_compare_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete_All@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEXXZ
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?Delete_All@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEXXZ PROC ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Delete_All, COMDAT
; _this$ = ecx

; 457  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		int len = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _len$[ebp], ecx

; 459  : 		Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 460  : 		Resize(len);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 461  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete_All@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEXXZ ENDP ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Delete_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAE_NABUPtrRemapStruct@PointerRemapClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAE_NABUPtrRemapStruct@PointerRemapClass@@@Z PROC ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; VectorClass<PointerRemapClass::PtrRemapStruct>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ; VectorClass<PointerRemapClass::PtrRemapStruct>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _object$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
	mov	DWORD PTR [eax], esi

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAE_NABUPtrRemapStruct@PointerRemapClass@@@Z ENDP ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ PROC ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ENDP ; DynamicVectorClass<PointerRemapClass::PtrRemapStruct>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ PROC ; VectorClass<PointerRemapClass::PtrRemapStruct>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QBEHXZ ENDP ; VectorClass<PointerRemapClass::PtrRemapStruct>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z PROC ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@UPtrRemapStruct@PointerRemapClass@@@@QAEAAUPtrRemapStruct@PointerRemapClass@@H@Z ENDP ; VectorClass<PointerRemapClass::PtrRemapStruct>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete_All@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEXXZ
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?Delete_All@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEXXZ PROC ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Delete_All, COMDAT
; _this$ = ecx

; 457  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		int len = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _len$[ebp], ecx

; 459  : 		Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 460  : 		Resize(len);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 461  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete_All@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEXXZ ENDP ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Delete_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAE_NABUPtrPairStruct@PointerRemapClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAE_NABUPtrPairStruct@PointerRemapClass@@@Z PROC ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ; VectorClass<PointerRemapClass::PtrPairStruct>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ; VectorClass<PointerRemapClass::PtrPairStruct>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _object$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+4]
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z ; VectorClass<PointerRemapClass::PtrPairStruct>::operator[]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QAE_NABUPtrPairStruct@PointerRemapClass@@@Z ENDP ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ PROC ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ENDP ; DynamicVectorClass<PointerRemapClass::PtrPairStruct>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ PROC ; VectorClass<PointerRemapClass::PtrPairStruct>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QBEHXZ ENDP ; VectorClass<PointerRemapClass::PtrPairStruct>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z PROC ; VectorClass<PointerRemapClass::PtrPairStruct>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@UPtrPairStruct@PointerRemapClass@@@@QAEAAUPtrPairStruct@PointerRemapClass@@H@Z ENDP ; VectorClass<PointerRemapClass::PtrPairStruct>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.h
;	COMDAT ??0PtrRemapStruct@PointerRemapClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PtrRemapStruct@PointerRemapClass@@QAE@XZ PROC	; PointerRemapClass::PtrRemapStruct::PtrRemapStruct, COMDAT
; _this$ = ecx

; 39   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 40   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PtrRemapStruct@PointerRemapClass@@QAE@XZ ENDP	; PointerRemapClass::PtrRemapStruct::PtrRemapStruct
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\pointerremapclass.h
;	COMDAT ??0PtrPairStruct@PointerRemapClass@@QAE@PAX0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_oldptr$ = 8						; size = 4
_newptr$ = 12						; size = 4
??0PtrPairStruct@PointerRemapClass@@QAE@PAX0@Z PROC	; PointerRemapClass::PtrPairStruct::PtrPairStruct, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _oldptr$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0PtrPairStruct@PointerRemapClass@@QAE@PAX0@Z ENDP	; PointerRemapClass::PtrPairStruct::PtrPairStruct
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add_Ref@RefCountClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_Ref@RefCountClass@@QAEXXZ PROC			; RefCountClass::Add_Ref, COMDAT
; _this$ = ecx

; 1522 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1523 : 		++NumRefs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1524 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_Ref@RefCountClass@@QAEXXZ ENDP			; RefCountClass::Add_Ref
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
