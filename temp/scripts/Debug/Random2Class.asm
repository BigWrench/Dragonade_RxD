; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\Random2Class.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?mag01@?1???RRandom4Class@@QAEHXZ@4PAIA DD 00H		; `Random4Class::operator()'::`2'::mag01
	DD	09908b0dfH
_DATA	ENDS
PUBLIC	??0Random2Class@@QAE@I@Z			; Random2Class::Random2Class
PUBLIC	??RRandom2Class@@QAEHXZ				; Random2Class::operator()
PUBLIC	??RRandom2Class@@QAEHHH@Z			; Random2Class::operator()
PUBLIC	??0Random4Class@@QAE@I@Z			; Random4Class::Random4Class
PUBLIC	??RRandom4Class@@QAEHXZ				; Random4Class::operator()
PUBLIC	??RRandom4Class@@QAEHHH@Z			; Random4Class::operator()
PUBLIC	?Get_Float@Random4Class@@QAEMXZ			; Random4Class::Get_Float
PUBLIC	??BRandom3Class@@QAEHXZ				; Random3Class::operator int
PUBLIC	??$ResolveGameReference@VCRandom@@@@YAAAVCRandom@@HHH@Z ; ResolveGameReference<CRandom>
PUBLIC	??$Pick_Random_Number@VRandom2Class@@@@YAHAAVRandom2Class@@HH@Z ; Pick_Random_Number<Random2Class>
PUBLIC	??$Pick_Random_Number@VRandom4Class@@@@YAHAAVRandom4Class@@HH@Z ; Pick_Random_Number<Random4Class>
PUBLIC	?FreeRandom@@3AAVCRandom@@A			; FreeRandom
PUBLIC	__real@2f800000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	?InitEngine@@YAXXZ:PROC				; InitEngine
EXTRN	??0Random3Class@@QAE@II@Z:PROC			; Random3Class::Random3Class
EXTRN	??RRandom3Class@@QAEHXZ:PROC			; Random3Class::operator()
EXTRN	?Exe@@3HA:DWORD					; Exe
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?FreeRandom@@3AAVCRandom@@A DD 01H DUP (?)		; FreeRandom
_BSS	ENDS
CRT$XCU	SEGMENT
_FreeRandom$initializer$ DD FLAT:??__EFreeRandom@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@2f800000
CONST	SEGMENT
__real@2f800000 DD 02f800000r			; 2.32831e-010
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random3class.h
;	COMDAT ??$Pick_Random_Number@VRandom4Class@@@@YAHAAVRandom4Class@@HH@Z
_TEXT	SEGMENT
_pick$ = -20						; size = 4
_mask$ = -16						; size = 4
_highbit$ = -12						; size = 4
_magnitude$ = -8					; size = 4
_temp$1 = -4						; size = 4
_generator$ = 8						; size = 4
_minval$ = 12						; size = 4
_maxval$ = 16						; size = 4
??$Pick_Random_Number@VRandom4Class@@@@YAHAAVRandom4Class@@HH@Z PROC ; Pick_Random_Number<Random4Class>, COMDAT

; 16   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 17   : 	if (minval == maxval) return(minval);

	mov	eax, DWORD PTR _minval$[ebp]
	cmp	eax, DWORD PTR _maxval$[ebp]
	jne	SHORT $LN6@Pick_Rando
	mov	eax, DWORD PTR _minval$[ebp]
	jmp	$LN7@Pick_Rando
$LN6@Pick_Rando:

; 18   : 	if (minval > maxval)

	mov	eax, DWORD PTR _minval$[ebp]
	cmp	eax, DWORD PTR _maxval$[ebp]
	jle	SHORT $LN5@Pick_Rando

; 19   : 	{
; 20   : 		int temp = minval;

	mov	eax, DWORD PTR _minval$[ebp]
	mov	DWORD PTR _temp$1[ebp], eax

; 21   : 		minval = maxval;

	mov	eax, DWORD PTR _maxval$[ebp]
	mov	DWORD PTR _minval$[ebp], eax

; 22   : 		maxval = temp;

	mov	eax, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR _maxval$[ebp], eax
$LN5@Pick_Rando:

; 23   : 	}
; 24   : 	int magnitude = maxval - minval;

	mov	eax, DWORD PTR _maxval$[ebp]
	sub	eax, DWORD PTR _minval$[ebp]
	mov	DWORD PTR _magnitude$[ebp], eax

; 25   : 	int highbit = T::SIGNIFICANT_BITS-1;

	mov	DWORD PTR _highbit$[ebp], 31		; 0000001fH
$LN4@Pick_Rando:

; 26   : 	while ((magnitude & (1 << highbit)) == 0 && highbit > 0)

	mov	eax, 1
	mov	ecx, DWORD PTR _highbit$[ebp]
	shl	eax, cl
	and	eax, DWORD PTR _magnitude$[ebp]
	jne	SHORT $LN3@Pick_Rando
	cmp	DWORD PTR _highbit$[ebp], 0
	jle	SHORT $LN3@Pick_Rando

; 27   : 	{
; 28   : 		highbit--;

	mov	eax, DWORD PTR _highbit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _highbit$[ebp], eax

; 29   : 	}

	jmp	SHORT $LN4@Pick_Rando
$LN3@Pick_Rando:

; 30   : 	int mask = ~( (~0L) << (highbit+1));

	mov	ecx, DWORD PTR _highbit$[ebp]
	add	ecx, 1
	or	eax, -1
	shl	eax, cl
	not	eax
	mov	DWORD PTR _mask$[ebp], eax

; 31   : 	int pick = magnitude+1;

	mov	eax, DWORD PTR _magnitude$[ebp]
	add	eax, 1
	mov	DWORD PTR _pick$[ebp], eax
$LN2@Pick_Rando:

; 32   : 	while (pick > magnitude)

	mov	eax, DWORD PTR _pick$[ebp]
	cmp	eax, DWORD PTR _magnitude$[ebp]
	jle	SHORT $LN1@Pick_Rando

; 33   : 	{
; 34   : 		pick = generator() & mask;

	mov	ecx, DWORD PTR _generator$[ebp]
	call	??RRandom4Class@@QAEHXZ			; Random4Class::operator()
	and	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _pick$[ebp], eax

; 35   : 	}

	jmp	SHORT $LN2@Pick_Rando
$LN1@Pick_Rando:

; 36   : 	return(pick + minval);

	mov	eax, DWORD PTR _pick$[ebp]
	add	eax, DWORD PTR _minval$[ebp]
$LN7@Pick_Rando:

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$Pick_Random_Number@VRandom4Class@@@@YAHAAVRandom4Class@@HH@Z ENDP ; Pick_Random_Number<Random4Class>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random3class.h
;	COMDAT ??$Pick_Random_Number@VRandom2Class@@@@YAHAAVRandom2Class@@HH@Z
_TEXT	SEGMENT
_pick$ = -20						; size = 4
_mask$ = -16						; size = 4
_highbit$ = -12						; size = 4
_magnitude$ = -8					; size = 4
_temp$1 = -4						; size = 4
_generator$ = 8						; size = 4
_minval$ = 12						; size = 4
_maxval$ = 16						; size = 4
??$Pick_Random_Number@VRandom2Class@@@@YAHAAVRandom2Class@@HH@Z PROC ; Pick_Random_Number<Random2Class>, COMDAT

; 16   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 17   : 	if (minval == maxval) return(minval);

	mov	eax, DWORD PTR _minval$[ebp]
	cmp	eax, DWORD PTR _maxval$[ebp]
	jne	SHORT $LN6@Pick_Rando
	mov	eax, DWORD PTR _minval$[ebp]
	jmp	$LN7@Pick_Rando
$LN6@Pick_Rando:

; 18   : 	if (minval > maxval)

	mov	eax, DWORD PTR _minval$[ebp]
	cmp	eax, DWORD PTR _maxval$[ebp]
	jle	SHORT $LN5@Pick_Rando

; 19   : 	{
; 20   : 		int temp = minval;

	mov	eax, DWORD PTR _minval$[ebp]
	mov	DWORD PTR _temp$1[ebp], eax

; 21   : 		minval = maxval;

	mov	eax, DWORD PTR _maxval$[ebp]
	mov	DWORD PTR _minval$[ebp], eax

; 22   : 		maxval = temp;

	mov	eax, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR _maxval$[ebp], eax
$LN5@Pick_Rando:

; 23   : 	}
; 24   : 	int magnitude = maxval - minval;

	mov	eax, DWORD PTR _maxval$[ebp]
	sub	eax, DWORD PTR _minval$[ebp]
	mov	DWORD PTR _magnitude$[ebp], eax

; 25   : 	int highbit = T::SIGNIFICANT_BITS-1;

	mov	DWORD PTR _highbit$[ebp], 31		; 0000001fH
$LN4@Pick_Rando:

; 26   : 	while ((magnitude & (1 << highbit)) == 0 && highbit > 0)

	mov	eax, 1
	mov	ecx, DWORD PTR _highbit$[ebp]
	shl	eax, cl
	and	eax, DWORD PTR _magnitude$[ebp]
	jne	SHORT $LN3@Pick_Rando
	cmp	DWORD PTR _highbit$[ebp], 0
	jle	SHORT $LN3@Pick_Rando

; 27   : 	{
; 28   : 		highbit--;

	mov	eax, DWORD PTR _highbit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _highbit$[ebp], eax

; 29   : 	}

	jmp	SHORT $LN4@Pick_Rando
$LN3@Pick_Rando:

; 30   : 	int mask = ~( (~0L) << (highbit+1));

	mov	ecx, DWORD PTR _highbit$[ebp]
	add	ecx, 1
	or	eax, -1
	shl	eax, cl
	not	eax
	mov	DWORD PTR _mask$[ebp], eax

; 31   : 	int pick = magnitude+1;

	mov	eax, DWORD PTR _magnitude$[ebp]
	add	eax, 1
	mov	DWORD PTR _pick$[ebp], eax
$LN2@Pick_Rando:

; 32   : 	while (pick > magnitude)

	mov	eax, DWORD PTR _pick$[ebp]
	cmp	eax, DWORD PTR _magnitude$[ebp]
	jle	SHORT $LN1@Pick_Rando

; 33   : 	{
; 34   : 		pick = generator() & mask;

	mov	ecx, DWORD PTR _generator$[ebp]
	call	??RRandom2Class@@QAEHXZ			; Random2Class::operator()
	and	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _pick$[ebp], eax

; 35   : 	}

	jmp	SHORT $LN2@Pick_Rando
$LN1@Pick_Rando:

; 36   : 	return(pick + minval);

	mov	eax, DWORD PTR _pick$[ebp]
	add	eax, DWORD PTR _minval$[ebp]
$LN7@Pick_Rando:

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$Pick_Random_Number@VRandom2Class@@@@YAHAAVRandom2Class@@HH@Z ENDP ; Pick_Random_Number<Random2Class>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random2class.cpp
;	COMDAT ??__EFreeRandom@@YAXXZ
text$yc	SEGMENT
??__EFreeRandom@@YAXXZ PROC				; `dynamic initializer for 'FreeRandom'', COMDAT

; 28   : REF_DEF2(CRandom, FreeRandom, 0x0085CB40, 0x0085BD28);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8764712					; 0085bd28H
	push	8768320					; 0085cb40H
	call	??$ResolveGameReference@VCRandom@@@@YAAAVCRandom@@HHH@Z ; ResolveGameReference<CRandom>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?FreeRandom@@3AAVCRandom@@A, eax ; FreeRandom
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EFreeRandom@@YAXXZ ENDP				; `dynamic initializer for 'FreeRandom''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@VCRandom@@@@YAAAVCRandom@@HHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@VCRandom@@@@YAAAVCRandom@@HHH@Z PROC ; ResolveGameReference<CRandom>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@VCRandom@@@@YAAAVCRandom@@HHH@Z ENDP ; ResolveGameReference<CRandom>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random3class.h
;	COMDAT ??BRandom3Class@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BRandom3Class@@QAEHXZ PROC				; Random3Class::operator int, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return(operator()());

	mov	ecx, DWORD PTR _this$[ebp]
	call	??RRandom3Class@@QAEHXZ			; Random3Class::operator()

; 46   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BRandom3Class@@QAEHXZ ENDP				; Random3Class::operator int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random2class.cpp
;	COMDAT ?Get_Float@Random4Class@@QAEMXZ
_TEXT	SEGMENT
tv81 = -92						; size = 4
tv76 = -88						; size = 8
tv72 = -80						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Float@Random4Class@@QAEMXZ PROC			; Random4Class::Get_Float, COMDAT
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 	int x=(*this)();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??RRandom4Class@@QAEHXZ			; Random4Class::operator()
	mov	DWORD PTR _x$[ebp], eax

; 101  : 	unsigned int *y=(unsigned int *) &x;

	lea	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 102  : 
; 103  : 	return (*y)*2.3283064370807973754314699618685e-10f;

	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR tv72[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv76[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv76[ebp]
	mulss	xmm0, DWORD PTR __real@2f800000
	movss	DWORD PTR tv81[ebp], xmm0
	fld	DWORD PTR tv81[ebp]

; 104  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Float@Random4Class@@QAEMXZ ENDP			; Random4Class::Get_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random2class.cpp
;	COMDAT ??RRandom4Class@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minval$ = 8						; size = 4
_maxval$ = 12						; size = 4
??RRandom4Class@@QAEHHH@Z PROC				; Random4Class::operator(), COMDAT
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 	return(Pick_Random_Number(*this, minval, maxval));

	mov	eax, DWORD PTR _maxval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minval$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$Pick_Random_Number@VRandom4Class@@@@YAHAAVRandom4Class@@HH@Z ; Pick_Random_Number<Random4Class>
	add	esp, 12					; 0000000cH

; 96   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??RRandom4Class@@QAEHHH@Z ENDP				; Random4Class::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random2class.cpp
;	COMDAT ??RRandom4Class@@QAEHXZ
_TEXT	SEGMENT
_x$ = -16						; size = 4
_kk$1 = -12						; size = 4
_y$ = -8						; size = 4
_this$ = -4						; size = 4
??RRandom4Class@@QAEHXZ PROC				; Random4Class::operator(), COMDAT
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 	unsigned int y;
; 67   : 	static unsigned int mag01[2]={0x0, MATRIX_A};
; 68   : 	if (mti >= N)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+2496], 624		; 00000270H
	jl	$LN7@operator

; 69   : 	{
; 70   : 		int kk;
; 71   : 		for (kk=0;kk<N-M;kk++)

	mov	DWORD PTR _kk$1[ebp], 0
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	eax, DWORD PTR _kk$1[ebp]
	add	eax, 1
	mov	DWORD PTR _kk$1[ebp], eax
$LN6@operator:
	cmp	DWORD PTR _kk$1[ebp], 227		; 000000e3H
	jge	SHORT $LN4@operator

; 72   : 		{
; 73   : 			y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

	mov	eax, DWORD PTR _kk$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _kk$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	and	eax, 2147483647				; 7fffffffH
	or	edx, eax
	mov	DWORD PTR _y$[ebp], edx

; 74   : 			mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _kk$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	xor	eax, DWORD PTR [edx+ecx*4+1588]
	mov	ecx, DWORD PTR _y$[ebp]
	and	ecx, 1
	xor	eax, DWORD PTR ?mag01@?1???RRandom4Class@@QAEHXZ@4PAIA[ecx*4]
	mov	edx, DWORD PTR _kk$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 75   : 		}

	jmp	SHORT $LN5@operator
$LN4@operator:

; 76   : 		for (;kk<N-1;kk++)

	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _kk$1[ebp]
	add	eax, 1
	mov	DWORD PTR _kk$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _kk$1[ebp], 623		; 0000026fH
	jge	SHORT $LN1@operator

; 77   : 		{
; 78   : 			y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

	mov	eax, DWORD PTR _kk$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _kk$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	and	eax, 2147483647				; 7fffffffH
	or	edx, eax
	mov	DWORD PTR _y$[ebp], edx

; 79   : 			mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _kk$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	xor	eax, DWORD PTR [edx+ecx*4-908]
	mov	ecx, DWORD PTR _y$[ebp]
	and	ecx, 1
	xor	eax, DWORD PTR ?mag01@?1???RRandom4Class@@QAEHXZ@4PAIA[ecx*4]
	mov	edx, DWORD PTR _kk$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 80   : 		}

	jmp	SHORT $LN2@operator
$LN1@operator:

; 81   : 		y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);

	mov	eax, 4
	imul	eax, 623				; 0000026fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, -2147483648			; 80000000H
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	and	eax, 2147483647				; 7fffffffH
	or	edx, eax
	mov	DWORD PTR _y$[ebp], edx

; 82   : 		mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, 4
	imul	eax, 396				; 0000018cH
	mov	ecx, DWORD PTR _y$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 1
	xor	ecx, DWORD PTR ?mag01@?1???RRandom4Class@@QAEHXZ@4PAIA[eax*4]
	mov	edx, 4
	imul	edx, 623				; 0000026fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 83   : 		mti = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2496], 0
$LN7@operator:

; 84   : 	}
; 85   : 	y = mt[mti++];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2496]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _y$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+2496]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2496], edx

; 86   : 	y ^= TEMPERING_SHIFT_U(y);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 11					; 0000000bH
	xor	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 87   : 	y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;

	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 7
	and	eax, -1658038656			; 9d2c5680H
	xor	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 88   : 	y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;

	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 15					; 0000000fH
	and	eax, -272236544				; efc60000H
	xor	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 89   : 	y ^= TEMPERING_SHIFT_L(y);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 18					; 00000012H
	xor	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 90   : 	int *x=(int *)&y;

	lea	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _x$[ebp], eax

; 91   : 	return *x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]

; 92   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??RRandom4Class@@QAEHXZ ENDP				; Random4Class::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random2class.cpp
;	COMDAT ??0Random4Class@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_seed$ = 8						; size = 4
??0Random4Class@@QAE@I@Z PROC				; Random4Class::Random4Class, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	if (!seed) seed=4375;

	cmp	DWORD PTR _seed$[ebp], 0
	jne	SHORT $LN4@Random4Cla
	mov	DWORD PTR _seed$[ebp], 4375		; 00001117H
$LN4@Random4Cla:

; 60   : 	mt[0]= seed & 0xffffffff;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _seed$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 61   : 	for (mti=1; mti<N; mti++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2496], 1
	jmp	SHORT $LN3@Random4Cla
$LN2@Random4Cla:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2496]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2496], ecx
$LN3@Random4Cla:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+2496], 624		; 00000270H
	jge	SHORT $LN5@Random4Cla

; 62   : 		mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2496]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	imul	eax, 69069				; 00010dcdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+2496]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN2@Random4Cla
$LN5@Random4Cla:

; 63   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Random4Class@@QAE@I@Z ENDP				; Random4Class::Random4Class
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random2class.cpp
;	COMDAT ??RRandom2Class@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minval$ = 8						; size = 4
_maxval$ = 12						; size = 4
??RRandom2Class@@QAEHHH@Z PROC				; Random2Class::operator(), COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	return(Pick_Random_Number(*this, minval, maxval));

	mov	eax, DWORD PTR _maxval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minval$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$Pick_Random_Number@VRandom2Class@@@@YAHAAVRandom2Class@@HH@Z ; Pick_Random_Number<Random2Class>
	add	esp, 12					; 0000000cH

; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??RRandom2Class@@QAEHHH@Z ENDP				; Random2Class::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random2class.cpp
;	COMDAT ??RRandom2Class@@QAEHXZ
_TEXT	SEGMENT
_val$ = -8						; size = 4
_this$ = -4						; size = 4
??RRandom2Class@@QAEHXZ PROC				; Random2Class::operator(), COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 	Table[Index1] ^= Table[Index2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+8]
	xor	ecx, DWORD PTR [esi+eax*4+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+eax*4+8], ecx

; 44   : 	int val = Table[Index1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	mov	DWORD PTR _val$[ebp], eax

; 45   : 	Index1++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 46   : 	Index2++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 47   : 	if (Index1 >= ARRAY_SIZE(Table)) Index1 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 250			; 000000faH
	jl	SHORT $LN2@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@operator:

; 48   : 	if (Index2 >= ARRAY_SIZE(Table)) Index2 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 250			; 000000faH
	jl	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN1@operator:

; 49   : 	return(val);

	mov	eax, DWORD PTR _val$[ebp]

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??RRandom2Class@@QAEHXZ ENDP				; Random2Class::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\random2class.cpp
;	COMDAT ??0Random2Class@@QAE@I@Z
_TEXT	SEGMENT
_index$1 = -16						; size = 4
_random$ = -12						; size = 8
_this$ = -4						; size = 4
_seed$ = 8						; size = 4
??0Random2Class@@QAE@I@Z PROC				; Random2Class::Random2Class, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 103			; 00000067H

; 34   : 	Random3Class random(seed);

	push	0
	mov	eax, DWORD PTR _seed$[ebp]
	push	eax
	lea	ecx, DWORD PTR _random$[ebp]
	call	??0Random3Class@@QAE@II@Z		; Random3Class::Random3Class

; 35   : 	for (int index = 0; index < ARRAY_SIZE(Table); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN3@Random2Cla
$LN2@Random2Cla:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN3@Random2Cla:
	cmp	DWORD PTR _index$1[ebp], 250		; 000000faH
	jge	SHORT $LN4@Random2Cla

; 36   : 	{
; 37   : 		Table[index] = random;

	lea	ecx, DWORD PTR _random$[ebp]
	call	??BRandom3Class@@QAEHXZ			; Random3Class::operator int
	mov	ecx, DWORD PTR _index$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax

; 38   : 	}

	jmp	SHORT $LN2@Random2Cla
$LN4@Random2Cla:

; 39   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Random2Class@@QAE@I@Z ENDP				; Random2Class::Random2Class
_TEXT	ENDS
END
