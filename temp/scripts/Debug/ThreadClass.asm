; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\ThreadClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	??0ThreadClass@@QAE@PBDP6GJHPAU_EXCEPTION_POINTERS@@@Z@Z ; ThreadClass::ThreadClass
PUBLIC	??1ThreadClass@@UAE@XZ				; ThreadClass::~ThreadClass
PUBLIC	?Internal_Thread_Function@ThreadClass@@SAXPAX@Z	; ThreadClass::Internal_Thread_Function
PUBLIC	?Execute@ThreadClass@@QAEXXZ			; ThreadClass::Execute
PUBLIC	?Set_Priority@ThreadClass@@QAEXH@Z		; ThreadClass::Set_Priority
PUBLIC	?Stop@ThreadClass@@QAEXI@Z			; ThreadClass::Stop
PUBLIC	?Sleep_Ms@ThreadClass@@SAXI@Z			; ThreadClass::Sleep_Ms
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4SysTimeClass@@QAEAAV0@ABV0@@Z		; SysTimeClass::operator=
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_C@_07OAEEHIKM@No?5Name?$AA@			; `string'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___beginthread:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__TerminateThread@8:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	?Get@SysTimeClass@@QAEIXZ:PROC			; SysTimeClass::Get
EXTRN	__except_handler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SystemTime@SysTimeClass@@2AAV1@A:DWORD		; SysTimeClass::SystemTime
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_C@_07OAEEHIKM@No?5Name?$AA@
CONST	SEGMENT
??_C@_07OAEEHIKM@No?5Name?$AA@ DB 'No Name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?Internal_Thread_Function@ThreadClass@@SAXPAX@Z DD 0ffffffffH
	DD	FLAT:$LN12@Internal_T
	DD	FLAT:$LN8@Internal_T
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4SysTimeClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SysTimeClass@@QAEAAV0@ABV0@@Z PROC			; SysTimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4SysTimeClass@@QAEAAV0@ABV0@@Z ENDP			; SysTimeClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.cpp
;	COMDAT ?Sleep_Ms@ThreadClass@@SAXI@Z
_TEXT	SEGMENT
_time$ = 8						; size = 4
?Sleep_Ms@ThreadClass@@SAXI@Z PROC			; ThreadClass::Sleep_Ms, COMDAT

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 18   : 	Sleep(time);

	mov	eax, DWORD PTR _time$[ebp]
	push	eax
	call	DWORD PTR __imp__Sleep@4

; 19   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sleep_Ms@ThreadClass@@SAXI@Z ENDP			; ThreadClass::Sleep_Ms
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.cpp
;	COMDAT ?Stop@ThreadClass@@QAEXI@Z
_TEXT	SEGMENT
_time2$1 = -12						; size = 4
_time$ = -8						; size = 4
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?Stop@ThreadClass@@QAEXI@Z PROC				; ThreadClass::Stop, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	running = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0

; 60   : 	unsigned int time = TIMEGETTIME();

	mov	ecx, DWORD PTR ?SystemTime@SysTimeClass@@2AAV1@A ; SysTimeClass::SystemTime
	call	?Get@SysTimeClass@@QAEIXZ		; SysTimeClass::Get
	mov	DWORD PTR _time$[ebp], eax
$LN3@Stop:

; 61   : 	while (handle)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN4@Stop

; 62   : 	{
; 63   : 		unsigned int time2 = TIMEGETTIME();

	mov	ecx, DWORD PTR ?SystemTime@SysTimeClass@@2AAV1@A ; SysTimeClass::SystemTime
	call	?Get@SysTimeClass@@QAEIXZ		; SysTimeClass::Get
	mov	DWORD PTR _time2$1[ebp], eax

; 64   : 		if (time2 - time > value)

	mov	eax, DWORD PTR _time2$1[ebp]
	sub	eax, DWORD PTR _time$[ebp]
	cmp	eax, DWORD PTR _value$[ebp]
	jbe	SHORT $LN1@Stop

; 65   : 		{
; 66   : #pragma warning(suppress: 6258) //warning C6258: using TerminateThread does not allow proper thread clean up.
; 67   : 			TerminateThread(handle,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	DWORD PTR __imp__TerminateThread@8

; 68   : 			handle = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
$LN1@Stop:

; 69   : 		}
; 70   : 		Sleep(0);

	push	0
	call	DWORD PTR __imp__Sleep@4

; 71   : 	}

	jmp	SHORT $LN3@Stop
$LN4@Stop:

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Stop@ThreadClass@@QAEXI@Z ENDP				; ThreadClass::Stop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.cpp
;	COMDAT ?Set_Priority@ThreadClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_priority$ = 8						; size = 4
?Set_Priority@ThreadClass@@QAEXH@Z PROC			; ThreadClass::Set_Priority, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	thread_priority = priority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+84], ecx

; 51   : 	if (handle)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN2@Set_Priori

; 52   : 	{
; 53   : 		SetThreadPriority(handle,priority);

	mov	eax, DWORD PTR _priority$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	DWORD PTR __imp__SetThreadPriority@8
$LN2@Set_Priori:

; 54   : 	}
; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Priority@ThreadClass@@QAEXH@Z ENDP			; ThreadClass::Set_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.cpp
;	COMDAT ?Execute@ThreadClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Execute@ThreadClass@@QAEXXZ PROC			; ThreadClass::Execute, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	handle = (HANDLE)_beginthread(&Internal_Thread_Function,0,this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	0
	push	OFFSET ?Internal_Thread_Function@ThreadClass@@SAXPAX@Z ; ThreadClass::Internal_Thread_Function
	call	DWORD PTR __imp___beginthread
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 45   : 	SetThreadPriority(handle,thread_priority);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	call	DWORD PTR __imp__SetThreadPriority@8

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Execute@ThreadClass@@QAEXXZ ENDP			; ThreadClass::Execute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.cpp
;	COMDAT ?Internal_Thread_Function@ThreadClass@@SAXPAX@Z
_TEXT	SEGMENT
$T2 = -100						; size = 4
_threadid$ = -32					; size = 4
_thread$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_data$ = 8						; size = 4
?Internal_Thread_Function@ThreadClass@@SAXPAX@Z PROC	; ThreadClass::Internal_Thread_Function, COMDAT

; 22   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	OFFSET __sehtable$?Internal_Thread_Function@ThreadClass@@SAXPAX@Z
	push	OFFSET __except_handler3
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	add	esp, -84				; ffffffacH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$SEHRec$[ebp], esp

; 23   : 	ThreadClass *thread = (ThreadClass *)data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _thread$[ebp], eax

; 24   : 	thread->running = true;

	mov	eax, DWORD PTR _thread$[ebp]
	mov	BYTE PTR [eax+4], 1

; 25   : 	int threadid = GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0
	mov	DWORD PTR _threadid$[ebp], eax

; 26   : 	thread->threadid = threadid;

	mov	eax, DWORD PTR _thread$[ebp]
	mov	ecx, DWORD PTR _threadid$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 27   : 	if (thread->exceptionhandler)

	mov	eax, DWORD PTR _thread$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN3@Internal_T

; 28   : 	{
; 29   : 		__try {

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 30   : 			thread->Thread_Function();

	mov	eax, DWORD PTR _thread$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _thread$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 31   : #pragma warning(suppress: 6322) //warning C6322: empty _except block
; 32   : 		} __except(thread->exceptionhandler(GetExceptionCode(), GetExceptionInformation())) {};

	mov	DWORD PTR __$SEHRec$[ebp+20], -1
	jmp	SHORT $LN10@Internal_T
$LN7@Internal_T:
$LN12@Internal_T:
	mov	eax, DWORD PTR __$SEHRec$[ebp+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR __$SEHRec$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR _thread$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
$LN9@Internal_T:
$LN11@Internal_T:
	ret	0
$LN8@Internal_T:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
	mov	DWORD PTR __$SEHRec$[ebp+20], -1
$LN10@Internal_T:

; 33   : 	}
; 34   : 	else

	jmp	SHORT $LN1@Internal_T
$LN3@Internal_T:

; 35   : 	{
; 36   : 		thread->Thread_Function();

	mov	eax, DWORD PTR _thread$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _thread$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN1@Internal_T:

; 37   : 	}
; 38   : 	thread->handle = 0;

	mov	eax, DWORD PTR _thread$[ebp]
	mov	DWORD PTR [eax+80], 0

; 39   : 	thread->threadid = 0;

	mov	eax, DWORD PTR _thread$[ebp]
	mov	DWORD PTR [eax+72], 0
$LN6@Internal_T:

; 40   : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Internal_Thread_Function@ThreadClass@@SAXPAX@Z ENDP	; ThreadClass::Internal_Thread_Function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.cpp
;	COMDAT ??1ThreadClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ThreadClass@@UAE@XZ PROC				; ThreadClass::~ThreadClass, COMDAT
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@

; 89   : 	Stop(3000);

	push	3000					; 00000bb8H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop@ThreadClass@@QAEXI@Z		; ThreadClass::Stop

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1ThreadClass@@UAE@XZ ENDP				; ThreadClass::~ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.cpp
;	COMDAT ??0ThreadClass@@QAE@PBDP6GJHPAU_EXCEPTION_POINTERS@@@Z@Z
_TEXT	SEGMENT
tv70 = -84						; size = 4
tv77 = -81						; size = 1
tv76 = -80						; size = 4
tv130 = -77						; size = 1
tv95 = -76						; size = 4
tv75 = -76						; size = 4
tv92 = -72						; size = 4
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_Name$ = 8						; size = 4
_ExceptionHandler$ = 12					; size = 4
??0ThreadClass@@QAE@PBDP6GJHPAU_EXCEPTION_POINTERS@@@Z@Z PROC ; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0

; 76   : 	if (Name && strlen(Name) < 70)

	cmp	DWORD PTR _Name$[ebp], 0
	je	SHORT $LN2@ThreadClas
	mov	eax, DWORD PTR _Name$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR tv92[ebp]
	add	ecx, 1
	mov	DWORD PTR tv95[ebp], ecx
$LL6@ThreadClas:
	mov	edx, DWORD PTR tv92[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv130[ebp], al
	add	DWORD PTR tv92[ebp], 1
	cmp	BYTE PTR tv130[ebp], 0
	jne	SHORT $LL6@ThreadClas
	mov	ecx, DWORD PTR tv92[ebp]
	sub	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv70[ebp], ecx
	cmp	DWORD PTR tv70[ebp], 70			; 00000046H
	jae	SHORT $LN2@ThreadClas

; 77   : 	{
; 78   : 		strcpy(name,Name);

	mov	eax, DWORD PTR _Name$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 5
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv76[ebp], edx
$LN5@ThreadClas:
	mov	eax, DWORD PTR tv73[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv77[ebp], cl
	mov	edx, DWORD PTR tv75[ebp]
	mov	al, BYTE PTR tv77[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv73[ebp]
	add	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR tv75[ebp]
	add	edx, 1
	mov	DWORD PTR tv75[ebp], edx
	cmp	BYTE PTR tv77[ebp], 0
	jne	SHORT $LN5@ThreadClas

; 79   : 	}
; 80   : 	else

	jmp	SHORT $LN1@ThreadClas
$LN2@ThreadClas:

; 81   : 	{
; 82   : 		strcpy(name,"No Name");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ??_C@_07OAEEHIKM@No?5Name?$AA@
	mov	DWORD PTR [eax+5], ecx
	mov	edx, DWORD PTR ??_C@_07OAEEHIKM@No?5Name?$AA@+4
	mov	DWORD PTR [eax+9], edx
$LN1@ThreadClas:

; 83   : 	}
; 84   : 	exceptionhandler = ExceptionHandler;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ExceptionHandler$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 85   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0ThreadClass@@QAE@PBDP6GJHPAU_EXCEPTION_POINTERS@@@Z@Z ENDP ; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
END
