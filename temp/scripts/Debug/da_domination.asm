; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\da_domination.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_DONT_MOVE_ARRIVED_DIST DD 0447a0000r		; 1000
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_atanf
PUBLIC	_atan2f
PUBLIC	_ceilf
PUBLIC	_cosf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_U@YAPAXIPAX@Z				; operator new[]
PUBLIC	?Fabs@WWMath@@SAMM@Z				; WWMath::Fabs
PUBLIC	?Float_To_Int_Chop@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Chop
PUBLIC	?Float_To_Int_Floor@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Floor
PUBLIC	?Cos@WWMath@@SAMM@Z				; WWMath::Cos
PUBLIC	?Sin@WWMath@@SAMM@Z				; WWMath::Sin
PUBLIC	?Sqrt@WWMath@@SAMM@Z				; WWMath::Sqrt
PUBLIC	?Inv_Sqrt@WWMath@@SIMM@Z			; WWMath::Inv_Sqrt
PUBLIC	?Float_To_Long@WWMath@@SAJM@Z			; WWMath::Float_To_Long
PUBLIC	?Fast_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Sin
PUBLIC	?Fast_Inv_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Sin
PUBLIC	?Fast_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Cos
PUBLIC	?Fast_Inv_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Cos
PUBLIC	?Fast_Acos@WWMath@@SAMM@Z			; WWMath::Fast_Acos
PUBLIC	?Fast_Asin@WWMath@@SAMM@Z			; WWMath::Fast_Asin
PUBLIC	?Acos@WWMath@@SAMM@Z				; WWMath::Acos
PUBLIC	?Asin@WWMath@@SAMM@Z				; WWMath::Asin
PUBLIC	?Atan@WWMath@@SAMM@Z				; WWMath::Atan
PUBLIC	?Atan2@WWMath@@SAMMM@Z				; WWMath::Atan2
PUBLIC	?Sign@WWMath@@SAMM@Z				; WWMath::Sign
PUBLIC	?Ceil@WWMath@@SAMM@Z				; WWMath::Ceil
PUBLIC	?Floor@WWMath@@SAMM@Z				; WWMath::Floor
PUBLIC	?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z	; WWMath::Fast_Is_Float_Positive
PUBLIC	?Random_Float@WWMath@@SAMMM@Z			; WWMath::Random_Float
PUBLIC	?Clamp@WWMath@@SAMMMM@Z				; WWMath::Clamp
PUBLIC	?Clamp@WWMath@@SANNNN@Z				; WWMath::Clamp
PUBLIC	?Clamp_Int@WWMath@@SAHHHH@Z			; WWMath::Clamp_Int
PUBLIC	?Wrap@WWMath@@SAMMMM@Z				; WWMath::Wrap
PUBLIC	?Wrap@WWMath@@SANNNN@Z				; WWMath::Wrap
PUBLIC	?Min@WWMath@@SAMMM@Z				; WWMath::Min
PUBLIC	?Max@WWMath@@SAMMM@Z				; WWMath::Max
PUBLIC	?Lerp@WWMath@@SAMMMM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SANNNM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SAHHHM@Z				; WWMath::Lerp
PUBLIC	?Float_To_Long@WWMath@@SAJN@Z			; WWMath::Float_To_Long
PUBLIC	?Unit_Float_To_Byte@WWMath@@SAEM@Z		; WWMath::Unit_Float_To_Byte
PUBLIC	?Byte_To_Unit_Float@WWMath@@SAME@Z		; WWMath::Byte_To_Unit_Float
PUBLIC	?Is_Valid_Float@WWMath@@SA_NM@Z			; WWMath::Is_Valid_Float
PUBLIC	?Is_Valid_Double@WWMath@@SA_NN@Z		; WWMath::Is_Valid_Double
PUBLIC	??4WWMath@@QAEAAV0@ABV0@@Z			; WWMath::operator=
PUBLIC	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ		; RefArrayHelper<float,1024>::operator float *
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@ABV0@@Z				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@MMM@Z				; Vector3::Vector3
PUBLIC	??4Vector3@@QAEAAV0@ABV0@@Z			; Vector3::operator=
PUBLIC	?Set@Vector3@@QAEXMMM@Z				; Vector3::Set
PUBLIC	??AVector3@@QAEAAMH@Z				; Vector3::operator[]
PUBLIC	??AVector3@@QBEABMH@Z				; Vector3::operator[]
PUBLIC	?Normalize@Vector3@@QAEXXZ			; Vector3::Normalize
PUBLIC	?Length@Vector3@@QBEMXZ				; Vector3::Length
PUBLIC	?Length2@Vector3@@QBEMXZ			; Vector3::Length2
PUBLIC	??YVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator+=
PUBLIC	??ZVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator-=
PUBLIC	??XVector3@@QAEAAV0@M@Z				; Vector3::operator*=
PUBLIC	??_0Vector3@@QAEAAV0@M@Z			; Vector3::operator/=
PUBLIC	??D@YA?AVVector3@@ABV0@M@Z			; operator*
PUBLIC	??D@YA?AVVector3@@MABV0@@Z			; operator*
PUBLIC	??H@YA?AVVector3@@ABV0@0@Z			; operator+
PUBLIC	??G@YA?AVVector3@@ABV0@0@Z			; operator-
PUBLIC	??8@YA_NABVVector3@@0@Z				; operator==
PUBLIC	??9@YA_NABVVector3@@0@Z				; operator!=
PUBLIC	?Add@Vector3@@SAXABV1@0PAV1@@Z			; Vector3::Add
PUBLIC	?Subtract@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Subtract
PUBLIC	?Swap@@YAXAAVVector3@@0@Z			; Swap
PUBLIC	??0GameObjObserverClass@@QAE@XZ			; GameObjObserverClass::GameObjObserverClass
PUBLIC	??1GameObjObserverClass@@UAE@XZ			; GameObjObserverClass::~GameObjObserverClass
PUBLIC	?Set_ID@GameObjObserverClass@@QAEXH@Z		; GameObjObserverClass::Set_ID
PUBLIC	?Get_ID@GameObjObserverClass@@QAEHXZ		; GameObjObserverClass::Get_ID
PUBLIC	?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ ; GameObjObserverClass::Owner
PUBLIC	??0GameObjObserverClass@@QAE@ABV0@@Z		; GameObjObserverClass::GameObjObserverClass
PUBLIC	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z	; GameObjObserverClass::operator=
PUBLIC	??_GGameObjObserverClass@@UAEPAXI@Z		; GameObjObserverClass::`scalar deleting destructor'
PUBLIC	??_EGameObjObserverClass@@UAEPAXI@Z		; GameObjObserverClass::`vector deleting destructor'
PUBLIC	??1ScriptClass@@UAE@XZ				; ScriptClass::~ScriptClass
PUBLIC	??0ScriptClass@@QAE@XZ				; ScriptClass::ScriptClass
PUBLIC	??0ScriptClass@@QAE@ABV0@@Z			; ScriptClass::ScriptClass
PUBLIC	??4ScriptClass@@QAEAAV0@ABV0@@Z			; ScriptClass::operator=
PUBLIC	??_GScriptClass@@UAEPAXI@Z			; ScriptClass::`scalar deleting destructor'
PUBLIC	??_EScriptClass@@UAEPAXI@Z			; ScriptClass::`vector deleting destructor'
PUBLIC	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory
PUBLIC	?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Created
PUBLIC	?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Destroyed
PUBLIC	?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Killed
PUBLIC	?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z ; ScriptImpClass::Damaged
PUBLIC	?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z ; ScriptImpClass::Custom
PUBLIC	?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ; ScriptImpClass::Sound_Heard
PUBLIC	?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Enemy_Seen
PUBLIC	?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; ScriptImpClass::Action_Complete
PUBLIC	?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z ; ScriptImpClass::Timer_Expired
PUBLIC	?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ; ScriptImpClass::Animation_Complete
PUBLIC	?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Poked
PUBLIC	?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Entered
PUBLIC	?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Exited
PUBLIC	?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ ; ScriptImpClass::Owner
PUBLIC	?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ ; ScriptImpClass::Get_Owner_Ptr
PUBLIC	?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z ; ScriptImpClass::Save_Data
PUBLIC	?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z ; ScriptImpClass::Load_Data
PUBLIC	?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ ; ScriptImpClass::Register_Auto_Save_Variables
PUBLIC	?Get_Parameter_Count@ScriptImpClass@@QAEHXZ	; ScriptImpClass::Get_Parameter_Count
PUBLIC	?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z	; ScriptImpClass::Get_Int_Parameter
PUBLIC	?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z	; ScriptImpClass::Get_Float_Parameter
PUBLIC	?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z	; ScriptImpClass::Get_Bool_Parameter
PUBLIC	?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z	; ScriptImpClass::Get_Bool_Parameter
PUBLIC	??0ScriptImpClass@@QAE@ABV0@@Z			; ScriptImpClass::ScriptImpClass
PUBLIC	??4ScriptImpClass@@QAEAAV0@ABV0@@Z		; ScriptImpClass::operator=
PUBLIC	??_GScriptImpClass@@UAEPAXI@Z			; ScriptImpClass::`scalar deleting destructor'
PUBLIC	??_EScriptImpClass@@UAEPAXI@Z			; ScriptImpClass::`vector deleting destructor'
PUBLIC	??0ScriptFactory@@QAE@ABV0@@Z			; ScriptFactory::ScriptFactory
PUBLIC	??4ScriptFactory@@QAEAAV0@ABV0@@Z		; ScriptFactory::operator=
PUBLIC	??_GScriptFactory@@UAEPAXI@Z			; ScriptFactory::`scalar deleting destructor'
PUBLIC	??_EScriptFactory@@UAEPAXI@Z			; ScriptFactory::`vector deleting destructor'
PUBLIC	??4ScriptRegistrar@@QAEAAV0@ABV0@@Z		; ScriptRegistrar::operator=
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	?Enter@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Enter
PUBLIC	?Leave@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Leave
PUBLIC	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass
PUBLIC	??1LockClass@FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::LockClass::~LockClass
PUBLIC	??0FastCriticalSectionClass@@QAE@XZ		; FastCriticalSectionClass::FastCriticalSectionClass
PUBLIC	?Release_Ref@RefCountClass@@QAEXXZ		; RefCountClass::Release_Ref
PUBLIC	??0StringClass@@QAE@H_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@ABV0@_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@PBD_N@Z			; StringClass::StringClass
PUBLIC	??1StringClass@@QAE@XZ				; StringClass::~StringClass
PUBLIC	??8StringClass@@QBE_NPBD@Z			; StringClass::operator==
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	??4StringClass@@QAEABV0@ABV0@@Z			; StringClass::operator=
PUBLIC	??YStringClass@@QAEABV0@ABV0@@Z			; StringClass::operator+=
PUBLIC	??AStringClass@@QAEAADH@Z			; StringClass::operator[]
PUBLIC	??BStringClass@@QBEPBDXZ			; StringClass::operator char const *
PUBLIC	?Compare@StringClass@@QBEHPBD@Z			; StringClass::Compare
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Is_Empty@StringClass@@QBE_NXZ			; StringClass::Is_Empty
PUBLIC	?GetHash@StringClass@@QBEIXZ			; StringClass::GetHash
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??_FStringClass@@QAEXXZ				; StringClass::`default constructor closure'
PUBLIC	??_EStringClass@@QAEPAXI@Z			; StringClass::`vector deleting destructor'
PUBLIC	??1WideStringClass@@QAE@XZ			; WideStringClass::~WideStringClass
PUBLIC	??_EWideStringClass@@QAEPAXI@Z			; WideStringClass::`vector deleting destructor'
PUBLIC	??4ChunkLoadClass@@QAEAAV0@ABV0@@Z		; ChunkLoadClass::operator=
PUBLIC	?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ	; ChunkSaveClass::Set_Contains_Chunks
PUBLIC	??4ChunkSaveClass@@QAEAAV0@ABV0@@Z		; ChunkSaveClass::operator=
PUBLIC	?Is_Present@INIClass@@QBE_NPBD0@Z		; INIClass::Is_Present
PUBLIC	?Section_Present@INIClass@@QBE_NPBD@Z		; INIClass::Section_Present
PUBLIC	?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ; INIClass::Get_Section_List
PUBLIC	?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ; INIClass::Get_Section_Index
PUBLIC	?Get_File_Name@INIClass@@QAEPBDXZ		; INIClass::Get_File_Name
PUBLIC	??0INIClass@@QAE@ABV0@@Z			; INIClass::INIClass
PUBLIC	??4INIClass@@QAEAAV0@ABV0@@Z			; INIClass::operator=
PUBLIC	??_GINIClass@@UAEPAXI@Z				; INIClass::`scalar deleting destructor'
PUBLIC	??_EINIClass@@UAEPAXI@Z				; INIClass::`vector deleting destructor'
PUBLIC	??Cfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator->
PUBLIC	??Bfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator FileClass *
PUBLIC	??Dfile_auto_ptr@@QAEAAVFileClass@@XZ		; file_auto_ptr::operator*
PUBLIC	?get@file_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::get
PUBLIC	??4file_auto_ptr@@QAEAAV0@ABV0@@Z		; file_auto_ptr::operator=
PUBLIC	?isPowerOfTwo@@YA_NH@Z				; isPowerOfTwo
PUBLIC	??0Vector4@@QAE@XZ				; Vector4::Vector4
PUBLIC	??0Vector4@@QAE@MMMM@Z				; Vector4::Vector4
PUBLIC	??4Vector4@@QAEAAV0@ABV0@@Z			; Vector4::operator=
PUBLIC	?Set@Vector4@@QAEXMMMM@Z			; Vector4::Set
PUBLIC	??AVector4@@QAEAAMH@Z				; Vector4::operator[]
PUBLIC	??AVector4@@QBEABMH@Z				; Vector4::operator[]
PUBLIC	??YVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator+=
PUBLIC	??ZVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator-=
PUBLIC	??XVector4@@QAEAAV0@M@Z				; Vector4::operator*=
PUBLIC	??AMatrix3D@@QAEAAVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??AMatrix3D@@QBEABVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??0Matrix3D@@QAE@_N@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@QAM@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@000@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@M@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@MM@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@@Z			; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABV0@@Z			; Matrix3D::Matrix3D
PUBLIC	??4Matrix3D@@QAEAAV0@ABV0@@Z			; Matrix3D::operator=
PUBLIC	?Set@Matrix3D@@QAEXQAM@Z			; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@000@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@M@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@MM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Set
PUBLIC	?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Translation
PUBLIC	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Translation
PUBLIC	?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set_Translation
PUBLIC	?Get_X_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_X_Translation
PUBLIC	?Get_Y_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Y_Translation
PUBLIC	?Get_Z_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Z_Translation
PUBLIC	?Set_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_X_Translation
PUBLIC	?Set_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Y_Translation
PUBLIC	?Set_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Z_Translation
PUBLIC	?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ; Matrix3D::Adjust_Translation
PUBLIC	?Adjust_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_X_Translation
PUBLIC	?Adjust_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Y_Translation
PUBLIC	?Adjust_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Z_Translation
PUBLIC	?Make_Identity@Matrix3D@@QAEXXZ			; Matrix3D::Make_Identity
PUBLIC	?Translate@Matrix3D@@QAEXMMM@Z			; Matrix3D::Translate
PUBLIC	?Translate@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Translate
PUBLIC	?Translate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_X
PUBLIC	?Translate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Y
PUBLIC	?Translate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Scale@Matrix3D@@QAEXM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXMMM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXAAVVector3@@@Z		; Matrix3D::Scale
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Z
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Transform_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Z_Vector
PUBLIC	?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Rotate_Vector
PUBLIC	?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Transform_Vector
PUBLIC	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
PUBLIC	??0Matrix4@@QAE@XZ				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABV0@@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@_N@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVMatrix3D@@@Z			; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVVector4@@000@Z		; Matrix4::Matrix4
PUBLIC	?Make_Identity@Matrix4@@QAEXXZ			; Matrix4::Make_Identity
PUBLIC	?Init@Matrix4@@QAEXABVMatrix3D@@@Z		; Matrix4::Init
PUBLIC	?Init@Matrix4@@QAEXABVVector4@@000@Z		; Matrix4::Init
PUBLIC	?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Ortho@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho
PUBLIC	?Init_Perspective@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Perspective
PUBLIC	??AMatrix4@@QAEAAVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	??AMatrix4@@QBEABVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	?Transpose@Matrix4@@QBE?AV1@XZ			; Matrix4::Transpose
PUBLIC	?Determinant@Matrix4@@QBEMXZ			; Matrix4::Determinant
PUBLIC	?Inverse@Matrix4@@QBE?AV1@XZ			; Matrix4::Inverse
PUBLIC	??4Matrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator=
PUBLIC	??YMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator+=
PUBLIC	??ZMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator-=
PUBLIC	??XMatrix4@@QAEAAV0@M@Z				; Matrix4::operator*=
PUBLIC	??_0Matrix4@@QAEAAV0@M@Z			; Matrix4::operator/=
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	??0Matrix3@@QAE@XZ				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABV0@@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@_N@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@00@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@MMMMMMMMM@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@M@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@MM@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVQuaternion@@@Z		; Matrix3::Matrix3
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@00@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXMMMMMMMMM@Z			; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@M@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@MM@Z		; Matrix3::Set
PUBLIC	??AMatrix3@@QAEAAVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	??AMatrix3@@QBEABVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	?Transpose@Matrix3@@QBE?AV1@XZ			; Matrix3::Transpose
PUBLIC	?Determinant@Matrix3@@QBEMXZ			; Matrix3::Determinant
PUBLIC	??4Matrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator=
PUBLIC	??YMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator+=
PUBLIC	??ZMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator-=
PUBLIC	??XMatrix3@@QAEAAV0@M@Z				; Matrix3::operator*=
PUBLIC	??_0Matrix3@@QAEAAV0@M@Z			; Matrix3::operator/=
PUBLIC	?Make_Identity@Matrix3@@QAEXXZ			; Matrix3::Make_Identity
PUBLIC	?Rotate_X@Matrix3@@QAEXM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_X@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_Y@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Y@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Z
PUBLIC	?Rotate_Z@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Z
PUBLIC	?Get_X_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_X_Rotation
PUBLIC	?Get_Y_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Y_Rotation
PUBLIC	?Get_Z_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Z_Rotation
PUBLIC	?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Z_Vector
PUBLIC	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z		; operator*
PUBLIC	?Add@Matrix3@@SAXABV1@0PAV1@@Z			; Matrix3::Add
PUBLIC	?Subtract@Matrix3@@SAXABV1@0PAV1@@Z		; Matrix3::Subtract
PUBLIC	?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Rotate_Vector
PUBLIC	?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Transpose_Rotate_Vector
PUBLIC	?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ; Matrix3::Rotate_AABox_Extent
PUBLIC	?Inverse@Matrix3@@QBE?AV1@XZ			; Matrix3::Inverse
PUBLIC	??4SysTimeClass@@QAEAAV0@ABV0@@Z		; SysTimeClass::operator=
PUBLIC	?Is_Valid@DataSafeHandleClass@@QBE_NXZ		; DataSafeHandleClass::Is_Valid
PUBLIC	??BDataSafeHandleClass@@QAEHXZ			; DataSafeHandleClass::operator int
PUBLIC	?Security_Check@GenericDataSafeClass@@KAXXZ	; GenericDataSafeClass::Security_Check
PUBLIC	?Security_Fault@GenericDataSafeClass@@KAXXZ	; GenericDataSafeClass::Security_Fault
PUBLIC	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
PUBLIC	?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ; DataSafeClass<int>::Get
PUBLIC	?Set@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@PAH@Z ; DataSafeClass<int>::Set
PUBLIC	??0PostLoadableClass@@QAE@XZ			; PostLoadableClass::PostLoadableClass
PUBLIC	??1PostLoadableClass@@UAE@XZ			; PostLoadableClass::~PostLoadableClass
PUBLIC	?On_Post_Load@PostLoadableClass@@UAEXXZ		; PostLoadableClass::On_Post_Load
PUBLIC	?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ; PostLoadableClass::Is_Post_Load_Registered
PUBLIC	?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ; PostLoadableClass::Set_Post_Load_Registered
PUBLIC	??0PostLoadableClass@@QAE@ABV0@@Z		; PostLoadableClass::PostLoadableClass
PUBLIC	??4PostLoadableClass@@QAEAAV0@ABV0@@Z		; PostLoadableClass::operator=
PUBLIC	??_GPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`scalar deleting destructor'
PUBLIC	??_EPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`vector deleting destructor'
PUBLIC	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ	; ReferencerClass::operator->
PUBLIC	??0ReferencerClass@@QAE@XZ			; ReferencerClass::ReferencerClass
PUBLIC	??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z ; ReferencerClass::ReferencerClass
PUBLIC	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr
PUBLIC	?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z ; ReferencerClass::Set_Ptr
PUBLIC	??0ReferencerClass@@QAE@ABV0@@Z			; ReferencerClass::ReferencerClass
PUBLIC	??_GReferencerClass@@UAEPAXI@Z			; ReferencerClass::`scalar deleting destructor'
PUBLIC	??_EReferencerClass@@UAEPAXI@Z			; ReferencerClass::`vector deleting destructor'
PUBLIC	?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ; ReferenceableClass<ScriptableGameObj>::Get_Data
PUBLIC	??4?$VectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<StringClass>::operator=
PUBLIC	??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
PUBLIC	?Length@?$VectorClass@VStringClass@@@@QBEHXZ	; VectorClass<StringClass>::Length
PUBLIC	??4?$DynamicVectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<StringClass>::operator=
PUBLIC	??0LineSegClass@@QAE@XZ				; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABVVector3@@0@Z		; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABVVector3@@0M@Z		; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z	; LineSegClass::LineSegClass
PUBLIC	?Set@LineSegClass@@QAEXABVVector3@@0@Z		; LineSegClass::Set
PUBLIC	?Set@LineSegClass@@QAEXABVVector3@@0M@Z		; LineSegClass::Set
PUBLIC	?Get_P0@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_P0
PUBLIC	?Get_P1@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_P1
PUBLIC	?Get_DP@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_DP
PUBLIC	?Get_Dir@LineSegClass@@QBEABVVector3@@XZ	; LineSegClass::Get_Dir
PUBLIC	?Get_Length@LineSegClass@@QBEMXZ		; LineSegClass::Get_Length
PUBLIC	?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z ; LineSegClass::Compute_Point
PUBLIC	?recalculate@LineSegClass@@IAEXXZ		; LineSegClass::recalculate
PUBLIC	??0LineSegClass@@QAE@ABV0@@Z			; LineSegClass::LineSegClass
PUBLIC	??4LineSegClass@@QAEAAV0@ABV0@@Z		; LineSegClass::operator=
PUBLIC	?Get_Position@PhysClass@@QBEXPAVVector3@@@Z	; PhysClass::Get_Position
PUBLIC	?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ	; PhysClass::Peek_Model
PUBLIC	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
PUBLIC	?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ ; PhysicalGameObj::Get_Position
PUBLIC	?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ ; PhysicalGameObj::Peek_Model
PUBLIC	??R?$SafeDataClass@H@@QBEAAHXZ			; SafeDataClass<int>::operator()
PUBLIC	??4?$SafeDataClass@H@@QAEAAHABH@Z		; SafeDataClass<int>::operator=
PUBLIC	??B?$SafeDataClass@H@@QBEHXZ			; SafeDataClass<int>::operator int
PUBLIC	?Get_Player_Data@SmartGameObj@@QAEPAVPlayerDataClass@@XZ ; SmartGameObj::Get_Player_Data
PUBLIC	?Get_Id@cPlayer@@QBEHXZ				; cPlayer::Get_Id
PUBLIC	?Get_Name@cPlayer@@QBEABVWideStringClass@@XZ	; cPlayer::Get_Name
PUBLIC	?Get_Player_Type@cPlayer@@QBEHXZ		; cPlayer::Get_Player_Type
PUBLIC	?Get_DA_Player@cPlayer@@QAEPAVDAPlayerClass@@XZ	; cPlayer::Get_DA_Player
PUBLIC	?Get_GameObj@cPlayer@@QBEPAVSoldierGameObj@@XZ	; cPlayer::Get_GameObj
PUBLIC	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
PUBLIC	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
PUBLIC	??0GenericSLNode@@IAE@PAX@Z			; GenericSLNode::GenericSLNode
PUBLIC	?Get_Definition@PurchaseSettingsDefClass@@QAEHH@Z ; PurchaseSettingsDefClass::Get_Definition
PUBLIC	?Set_Definition@PurchaseSettingsDefClass@@QAEXHH@Z ; PurchaseSettingsDefClass::Set_Definition
PUBLIC	?Set_Cost@PurchaseSettingsDefClass@@QAEXHH@Z	; PurchaseSettingsDefClass::Set_Cost
PUBLIC	??0JFW_Key_Hook_Base@@QAE@XZ			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
PUBLIC	??0JFW_Key_Hook_Base@@QAE@ABV0@@Z		; JFW_Key_Hook_Base::JFW_Key_Hook_Base
PUBLIC	??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z		; JFW_Key_Hook_Base::operator=
PUBLIC	??_GJFW_Key_Hook_Base@@UAEPAXI@Z		; JFW_Key_Hook_Base::`scalar deleting destructor'
PUBLIC	??_EJFW_Key_Hook_Base@@UAEPAXI@Z		; JFW_Key_Hook_Base::`vector deleting destructor'
PUBLIC	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
PUBLIC	?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
PUBLIC	?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
PUBLIC	?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
PUBLIC	?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head
PUBLIC	?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail
PUBLIC	?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove
PUBLIC	?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All
PUBLIC	?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before
PUBLIC	?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After
PUBLIC	?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty
PUBLIC	?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count
PUBLIC	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=
PUBLIC	??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor'
PUBLIC	??0MultiKeyHookScriptImpClass@@QAE@XZ		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
PUBLIC	??1MultiKeyHookScriptImpClass@@UAE@XZ		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass
PUBLIC	??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z	; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
PUBLIC	??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z	; MultiKeyHookScriptImpClass::operator=
PUBLIC	??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z	; MultiKeyHookScriptImpClass::`scalar deleting destructor'
PUBLIC	??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z	; MultiKeyHookScriptImpClass::`vector deleting destructor'
PUBLIC	??0JFW_Object_Created_Hook_Base@@QAE@XZ		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
PUBLIC	??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
PUBLIC	??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z ; JFW_Object_Created_Hook_Base::operator=
PUBLIC	??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z	; JFW_Object_Created_Hook_Base::`scalar deleting destructor'
PUBLIC	??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z	; JFW_Object_Created_Hook_Base::`vector deleting destructor'
PUBLIC	??1CollideableObjClass@AnimCollisionManagerClass@@QAE@XZ ; AnimCollisionManagerClass::CollideableObjClass::~CollideableObjClass
PUBLIC	??_ECollideableObjClass@AnimCollisionManagerClass@@QAEPAXI@Z ; AnimCollisionManagerClass::CollideableObjClass::`vector deleting destructor'
PUBLIC	??0CollisionTestClass@@QAE@PAUCastResultStruct@@W4Collision_Type@@@Z ; CollisionTestClass::CollisionTestClass
PUBLIC	??0CollisionTestClass@@QAE@ABV0@@Z		; CollisionTestClass::CollisionTestClass
PUBLIC	??4CollisionTestClass@@QAEAAV0@ABV0@@Z		; CollisionTestClass::operator=
PUBLIC	?Cull@AABoxCollisionTestClass@@QAE_NABVVector3@@0@Z ; AABoxCollisionTestClass::Cull
PUBLIC	?Translate@AABoxCollisionTestClass@@QAEXABVVector3@@@Z ; AABoxCollisionTestClass::Translate
PUBLIC	?Cull@OBBoxCollisionTestClass@@QAE_NABVVector3@@0@Z ; OBBoxCollisionTestClass::Cull
PUBLIC	?Set_Is_Destroyed@BuildingGameObj@@QAEX_N@Z	; BuildingGameObj::Set_Is_Destroyed
PUBLIC	?Set_Busy@VehicleFactoryGameObj@@QAEX_N@Z	; VehicleFactoryGameObj::Set_Busy
PUBLIC	??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z		; ArmorWarheadManager::operator=
PUBLIC	?Give_Key@SoldierGameObj@@QAEXH@Z		; SoldierGameObj::Give_Key
PUBLIC	?Get_Player@SoldierGameObj@@QAEPAVcPlayer@@XZ	; SoldierGameObj::Get_Player
PUBLIC	?Is_Player@@YA_NPAVScriptableGameObj@@@Z	; Is_Player
PUBLIC	?StringFormat@@YA?AVStringClass@@PBDZZ		; StringFormat
PUBLIC	?Get_Message_Prefix@DA@@SAABVStringClass@@XZ	; DA::Get_Message_Prefix
PUBLIC	?Get_Console_Function_List@DA@@SAAAV?$DynamicVectorClass@PAVConsoleFunctionClass@@@@XZ ; DA::Get_Console_Function_List
PUBLIC	??4DA@@QAEAAV0@ABV0@@Z				; DA::operator=
PUBLIC	??4DAEventManager@@QAEAAV0@ABV0@@Z		; DAEventManager::operator=
PUBLIC	?Register_Event@DAEventClass@@QAEXW4Type@DAEvent@@H@Z ; DAEventClass::Register_Event
PUBLIC	?Unregister_Event@DAEventClass@@QAEXW4Type@DAEvent@@@Z ; DAEventClass::Unregister_Event
PUBLIC	?Clear_Events@DAEventClass@@QAEXXZ		; DAEventClass::Clear_Events
PUBLIC	?Register_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@W4ObjectType@3@H@Z ; DAEventClass::Register_Object_Event
PUBLIC	?Unregister_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@@Z ; DAEventClass::Unregister_Object_Event
PUBLIC	?Clear_Object_Events@DAEventClass@@QAEXXZ	; DAEventClass::Clear_Object_Events
PUBLIC	?Start_Timer@DAEventClass@@QAEXHM_NI@Z		; DAEventClass::Start_Timer
PUBLIC	?Stop_Timer@DAEventClass@@QAEXHI@Z		; DAEventClass::Stop_Timer
PUBLIC	?Is_Timer@DAEventClass@@QAE_NHI@Z		; DAEventClass::Is_Timer
PUBLIC	?Clear_Timers@DAEventClass@@QAEXXZ		; DAEventClass::Clear_Timers
PUBLIC	?Settings_Loaded_Event@DAEventClass@@UAEXXZ	; DAEventClass::Settings_Loaded_Event
PUBLIC	?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z ; DAEventClass::Chat_Event
PUBLIC	?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z ; DAEventClass::Chat_Command_Event
PUBLIC	?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z ; DAEventClass::Key_Hook_Event
PUBLIC	?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z ; DAEventClass::Host_Chat_Event
PUBLIC	?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z ; DAEventClass::Radio_Event
PUBLIC	?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z ; DAEventClass::Connection_Request_Event
PUBLIC	?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z ; DAEventClass::Player_Pre_Join_Event
PUBLIC	?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ; DAEventClass::Player_Join_Event
PUBLIC	?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ; DAEventClass::Player_Leave_Event
PUBLIC	?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ; DAEventClass::Player_Loaded_Event
PUBLIC	?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ; DAEventClass::Name_Change_Event
PUBLIC	?Level_Loaded_Event@DAEventClass@@UAEXXZ	; DAEventClass::Level_Loaded_Event
PUBLIC	?Remix_Event@DAEventClass@@UAEXXZ		; DAEventClass::Remix_Event
PUBLIC	?Rebalance_Event@DAEventClass@@UAEXXZ		; DAEventClass::Rebalance_Event
PUBLIC	?Swap_Event@DAEventClass@@UAEXXZ		; DAEventClass::Swap_Event
PUBLIC	?Game_Over_Event@DAEventClass@@UAEXXZ		; DAEventClass::Game_Over_Event
PUBLIC	?Console_Output_Event@DAEventClass@@UAEXPBD@Z	; DAEventClass::Console_Output_Event
PUBLIC	?Ren_Log_Event@DAEventClass@@UAEXPBD@Z		; DAEventClass::Ren_Log_Event
PUBLIC	?DA_Log_Event@DAEventClass@@UAEXPBD0@Z		; DAEventClass::DA_Log_Event
PUBLIC	?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z ; DAEventClass::Character_Purchase_Request_Event
PUBLIC	?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z ; DAEventClass::Vehicle_Purchase_Request_Event
PUBLIC	?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z ; DAEventClass::PowerUp_Purchase_Request_Event
PUBLIC	?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z ; DAEventClass::Custom_Purchase_Request_Event
PUBLIC	?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z ; DAEventClass::Character_Purchase_Event
PUBLIC	?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z ; DAEventClass::Vehicle_Purchase_Event
PUBLIC	?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z ; DAEventClass::PowerUp_Purchase_Event
PUBLIC	?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z ; DAEventClass::Custom_Purchase_Event
PUBLIC	?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z	; DAEventClass::Refill_Event
PUBLIC	?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z ; DAEventClass::Suicide_Event
PUBLIC	?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z ; DAEventClass::Team_Change_Request_Event
PUBLIC	?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ; DAEventClass::Team_Change_Event
PUBLIC	?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z ; DAEventClass::Vehicle_Entry_Request_Event
PUBLIC	?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z ; DAEventClass::Vehicle_Enter_Event
PUBLIC	?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z ; DAEventClass::Vehicle_Exit_Event
PUBLIC	?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ; DAEventClass::PowerUp_Grant_Request_Event
PUBLIC	?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ; DAEventClass::PowerUp_Grant_Event
PUBLIC	?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z ; DAEventClass::Add_Weapon_Request_Event
PUBLIC	?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z ; DAEventClass::Add_Weapon_Event
PUBLIC	?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z ; DAEventClass::Remove_Weapon_Event
PUBLIC	?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ; DAEventClass::Clear_Weapons_Event
PUBLIC	?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z ; DAEventClass::Beacon_Deploy_Event
PUBLIC	?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z ; DAEventClass::Beacon_Detonate_Event
PUBLIC	?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z ; DAEventClass::C4_Detonate_Request_Event
PUBLIC	?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z ; DAEventClass::C4_Detonate_Event
PUBLIC	?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z ; DAEventClass::Change_Character_Event
PUBLIC	?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z ; DAEventClass::Vehicle_Flip_Event
PUBLIC	?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z ; DAEventClass::Request_Vehicle_Event
PUBLIC	?Think@DAEventClass@@UAEXXZ			; DAEventClass::Think
PUBLIC	?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z ; DAEventClass::Dialog_Event
PUBLIC	?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z ; DAEventClass::Object_Created_Event
PUBLIC	?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z ; DAEventClass::Stock_Client_Damage_Request_Event
PUBLIC	?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z ; DAEventClass::TT_Client_Damage_Request_Event
PUBLIC	?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z ; DAEventClass::Damage_Request_Event
PUBLIC	?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ; DAEventClass::Damage_Event
PUBLIC	?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ; DAEventClass::Kill_Event
PUBLIC	?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z ; DAEventClass::Custom_Event
PUBLIC	?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z ; DAEventClass::Poke_Event
PUBLIC	?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z ; DAEventClass::Zone_Enter_Event
PUBLIC	?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z ; DAEventClass::Zone_Exit_Event
PUBLIC	?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z ; DAEventClass::Object_Destroyed_Event
PUBLIC	?Timer_Expired@DAEventClass@@UAEXHI@Z		; DAEventClass::Timer_Expired
PUBLIC	??1DAEventClass@@UAE@XZ				; DAEventClass::~DAEventClass
PUBLIC	??0DAEventClass@@QAE@XZ				; DAEventClass::DAEventClass
PUBLIC	??0DAEventClass@@QAE@ABV0@@Z			; DAEventClass::DAEventClass
PUBLIC	??4DAEventClass@@QAEAAV0@ABV0@@Z		; DAEventClass::operator=
PUBLIC	??_GDAEventClass@@UAEPAXI@Z			; DAEventClass::`scalar deleting destructor'
PUBLIC	??_EDAEventClass@@UAEPAXI@Z			; DAEventClass::`vector deleting destructor'
PUBLIC	??1DAGameModeFactoryClass@@UAE@XZ		; DAGameModeFactoryClass::~DAGameModeFactoryClass
PUBLIC	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
PUBLIC	??_GDAGameModeFactoryClass@@UAEPAXI@Z		; DAGameModeFactoryClass::`scalar deleting destructor'
PUBLIC	?Set_Factory@DAGameModeClass@@QAEXPBVDAGameModeFactoryClass@@@Z ; DAGameModeClass::Set_Factory
PUBLIC	??1DAGameModeClass@@UAE@XZ			; DAGameModeClass::~DAGameModeClass
PUBLIC	??0DAGameModeClass@@QAE@XZ			; DAGameModeClass::DAGameModeClass
PUBLIC	??_GDAGameModeClass@@UAEPAXI@Z			; DAGameModeClass::`scalar deleting destructor'
PUBLIC	??_5@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z	; operator|=
PUBLIC	??_4@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z	; operator&=
PUBLIC	??S@YA?AW4Flag@DAPlayerFlags@@W401@@Z		; operator~
PUBLIC	?Get_Owner@DAPlayerClass@@QAEPAVcPlayer@@XZ	; DAPlayerClass::Get_Owner
PUBLIC	?Get_ID@DAPlayerClass@@QAEHXZ			; DAPlayerClass::Get_ID
PUBLIC	?Get_Name@DAPlayerClass@@QAEABVWideStringClass@@XZ ; DAPlayerClass::Get_Name
PUBLIC	?Get_GameObj@DAPlayerClass@@QAEPAVSoldierGameObj@@XZ ; DAPlayerClass::Get_GameObj
PUBLIC	?Get_Team@DAPlayerClass@@QAEHXZ			; DAPlayerClass::Get_Team
PUBLIC	??0?$VectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerObserverClass *>::VectorClass<DAPlayerObserverClass *>
PUBLIC	??4?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverClass *>::operator=
PUBLIC	??1?$VectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ ; VectorClass<DAPlayerObserverClass *>::~VectorClass<DAPlayerObserverClass *>
PUBLIC	??A?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAPAVDAPlayerObserverClass@@H@Z ; VectorClass<DAPlayerObserverClass *>::operator[]
PUBLIC	??A?$VectorClass@PAVDAPlayerObserverClass@@@@QBEABQAVDAPlayerObserverClass@@H@Z ; VectorClass<DAPlayerObserverClass *>::operator[]
PUBLIC	??8?$VectorClass@PAVDAPlayerObserverClass@@@@UBE_NABV0@@Z ; VectorClass<DAPlayerObserverClass *>::operator==
PUBLIC	?Resize@?$VectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z ; VectorClass<DAPlayerObserverClass *>::Resize
PUBLIC	?Clear@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ ; VectorClass<DAPlayerObserverClass *>::Clear
PUBLIC	?Length@?$VectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ; VectorClass<DAPlayerObserverClass *>::Length
PUBLIC	?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z ; VectorClass<DAPlayerObserverClass *>::ID
PUBLIC	?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z ; VectorClass<DAPlayerObserverClass *>::ID
PUBLIC	??_G?$VectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z ; VectorClass<DAPlayerObserverClass *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverClass *>::DynamicVectorClass<DAPlayerObserverClass *>
PUBLIC	??4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverClass *>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z ; DynamicVectorClass<DAPlayerObserverClass *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ ; DynamicVectorClass<DAPlayerObserverClass *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ; DynamicVectorClass<DAPlayerObserverClass *>::Count
PUBLIC	?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z ; DynamicVectorClass<DAPlayerObserverClass *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z ; DynamicVectorClass<DAPlayerObserverClass *>::ID
PUBLIC	??1?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ ; DynamicVectorClass<DAPlayerObserverClass *>::~DynamicVectorClass<DAPlayerObserverClass *>
PUBLIC	??_G?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z ; DynamicVectorClass<DAPlayerObserverClass *>::`scalar deleting destructor'
PUBLIC	??0?$VectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerDataClass *>::VectorClass<DAPlayerDataClass *>
PUBLIC	??4?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerDataClass *>::operator=
PUBLIC	??1?$VectorClass@PAVDAPlayerDataClass@@@@UAE@XZ	; VectorClass<DAPlayerDataClass *>::~VectorClass<DAPlayerDataClass *>
PUBLIC	??A?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAPAVDAPlayerDataClass@@H@Z ; VectorClass<DAPlayerDataClass *>::operator[]
PUBLIC	??A?$VectorClass@PAVDAPlayerDataClass@@@@QBEABQAVDAPlayerDataClass@@H@Z ; VectorClass<DAPlayerDataClass *>::operator[]
PUBLIC	??8?$VectorClass@PAVDAPlayerDataClass@@@@UBE_NABV0@@Z ; VectorClass<DAPlayerDataClass *>::operator==
PUBLIC	?Resize@?$VectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z ; VectorClass<DAPlayerDataClass *>::Resize
PUBLIC	?Clear@?$VectorClass@PAVDAPlayerDataClass@@@@UAEXXZ ; VectorClass<DAPlayerDataClass *>::Clear
PUBLIC	?Length@?$VectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ; VectorClass<DAPlayerDataClass *>::Length
PUBLIC	?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z ; VectorClass<DAPlayerDataClass *>::ID
PUBLIC	?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z ; VectorClass<DAPlayerDataClass *>::ID
PUBLIC	??_G?$VectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z ; VectorClass<DAPlayerDataClass *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerDataClass *>::DynamicVectorClass<DAPlayerDataClass *>
PUBLIC	??4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerDataClass *>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z ; DynamicVectorClass<DAPlayerDataClass *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEXXZ ; DynamicVectorClass<DAPlayerDataClass *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ; DynamicVectorClass<DAPlayerDataClass *>::Count
PUBLIC	?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z ; DynamicVectorClass<DAPlayerDataClass *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z ; DynamicVectorClass<DAPlayerDataClass *>::ID
PUBLIC	??1?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE@XZ ; DynamicVectorClass<DAPlayerDataClass *>::~DynamicVectorClass<DAPlayerDataClass *>
PUBLIC	??_G?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z ; DynamicVectorClass<DAPlayerDataClass *>::`scalar deleting destructor'
PUBLIC	??0?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::VectorClass<DAPlayerClass::DAPlayerTagStruct *>
PUBLIC	??4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=
PUBLIC	??1?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::~VectorClass<DAPlayerClass::DAPlayerTagStruct *>
PUBLIC	??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAPAUDAPlayerTagStruct@DAPlayerClass@@H@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
PUBLIC	??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEABQAUDAPlayerTagStruct@DAPlayerClass@@H@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
PUBLIC	??8?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UBE_NABV0@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator==
PUBLIC	?Resize@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Resize
PUBLIC	?Clear@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Clear
PUBLIC	?Length@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Length
PUBLIC	?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID
PUBLIC	?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID
PUBLIC	??_G?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>
PUBLIC	??4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Count
PUBLIC	?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID
PUBLIC	??1?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::~DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>
PUBLIC	??_G?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`scalar deleting destructor'
PUBLIC	??0DAPlayerClass@@QAE@ABV0@@Z			; DAPlayerClass::DAPlayerClass
PUBLIC	??4DAPlayerClass@@QAEAAV0@ABV0@@Z		; DAPlayerClass::operator=
PUBLIC	??0DAPlayerObserverClass@@QAE@XZ		; DAPlayerObserverClass::DAPlayerObserverClass
PUBLIC	?Get_Owner@DAPlayerObserverClass@@QAEPAVcPlayer@@XZ ; DAPlayerObserverClass::Get_Owner
PUBLIC	?Set_Owner@DAPlayerObserverClass@@QAEXPAVcPlayer@@@Z ; DAPlayerObserverClass::Set_Owner
PUBLIC	?Get_Flags@DAPlayerObserverClass@@QAE?AW4Flag@DAPlayerFlags@@XZ ; DAPlayerObserverClass::Get_Flags
PUBLIC	?Set_Flags@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z ; DAPlayerObserverClass::Set_Flags
PUBLIC	?Add_Flag@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z ; DAPlayerObserverClass::Add_Flag
PUBLIC	?Remove_Flag@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z ; DAPlayerObserverClass::Remove_Flag
PUBLIC	?Has_Flag@DAPlayerObserverClass@@QAE_NW4Flag@DAPlayerFlags@@@Z ; DAPlayerObserverClass::Has_Flag
PUBLIC	?Get_ID@DAPlayerObserverClass@@QAEHXZ		; DAPlayerObserverClass::Get_ID
PUBLIC	?Get_Name@DAPlayerObserverClass@@QAEABVWideStringClass@@XZ ; DAPlayerObserverClass::Get_Name
PUBLIC	?Get_GameObj@DAPlayerObserverClass@@QAEPAVSoldierGameObj@@XZ ; DAPlayerObserverClass::Get_GameObj
PUBLIC	?Get_Team@DAPlayerObserverClass@@QAEHXZ		; DAPlayerObserverClass::Get_Team
PUBLIC	?Get_Timers@DAPlayerObserverClass@@QAEAAV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@XZ ; DAPlayerObserverClass::Get_Timers
PUBLIC	?Get_Chat_Commands@DAPlayerObserverClass@@QAEABV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@XZ ; DAPlayerObserverClass::Get_Chat_Commands
PUBLIC	?Get_Key_Hooks@DAPlayerObserverClass@@QAEABV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@XZ ; DAPlayerObserverClass::Get_Key_Hooks
PUBLIC	?Set_Delete_Pending@DAPlayerObserverClass@@QAEXXZ ; DAPlayerObserverClass::Set_Delete_Pending
PUBLIC	?Is_Delete_Pending@DAPlayerObserverClass@@QAE_NXZ ; DAPlayerObserverClass::Is_Delete_Pending
PUBLIC	??1DAPlayerObserverClass@@UAE@XZ		; DAPlayerObserverClass::~DAPlayerObserverClass
PUBLIC	?Init@DAPlayerObserverClass@@UAEXXZ		; DAPlayerObserverClass::Init
PUBLIC	?Join@DAPlayerObserverClass@@UAEXXZ		; DAPlayerObserverClass::Join
PUBLIC	?Leave@DAPlayerObserverClass@@UAEXXZ		; DAPlayerObserverClass::Leave
PUBLIC	?Level_Loaded@DAPlayerObserverClass@@UAEXXZ	; DAPlayerObserverClass::Level_Loaded
PUBLIC	?Player_Loaded@DAPlayerObserverClass@@UAEXXZ	; DAPlayerObserverClass::Player_Loaded
PUBLIC	?Name_Change@DAPlayerObserverClass@@UAEXXZ	; DAPlayerObserverClass::Name_Change
PUBLIC	?Team_Change@DAPlayerObserverClass@@UAEXXZ	; DAPlayerObserverClass::Team_Change
PUBLIC	?Character_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVSoldierGameObjDef@@@Z ; DAPlayerObserverClass::Character_Purchase_Request
PUBLIC	?Vehicle_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVVehicleGameObjDef@@@Z ; DAPlayerObserverClass::Vehicle_Purchase_Request
PUBLIC	?PowerUp_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVPowerUpGameObjDef@@@Z ; DAPlayerObserverClass::PowerUp_Purchase_Request
PUBLIC	?Custom_Purchase_Request@DAPlayerObserverClass@@UAEHAAMI@Z ; DAPlayerObserverClass::Custom_Purchase_Request
PUBLIC	?Character_Purchase@DAPlayerObserverClass@@UAEXMPBVSoldierGameObjDef@@@Z ; DAPlayerObserverClass::Character_Purchase
PUBLIC	?Vehicle_Purchase@DAPlayerObserverClass@@UAEXMPBVVehicleGameObjDef@@@Z ; DAPlayerObserverClass::Vehicle_Purchase
PUBLIC	?PowerUp_Purchase@DAPlayerObserverClass@@UAEXMPBVPowerUpGameObjDef@@@Z ; DAPlayerObserverClass::PowerUp_Purchase
PUBLIC	?Custom_Purchase@DAPlayerObserverClass@@UAEXMI@Z ; DAPlayerObserverClass::Custom_Purchase
PUBLIC	?Vehicle_Entry_Request@DAPlayerObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z ; DAPlayerObserverClass::Vehicle_Entry_Request
PUBLIC	?Vehicle_Enter@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z ; DAPlayerObserverClass::Vehicle_Enter
PUBLIC	?Vehicle_Exit@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z ; DAPlayerObserverClass::Vehicle_Exit
PUBLIC	?PowerUp_Grant_Request@DAPlayerObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ; DAPlayerObserverClass::PowerUp_Grant_Request
PUBLIC	?PowerUp_Grant@DAPlayerObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ; DAPlayerObserverClass::PowerUp_Grant
PUBLIC	?Add_Weapon_Request@DAPlayerObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z ; DAPlayerObserverClass::Add_Weapon_Request
PUBLIC	?Add_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z ; DAPlayerObserverClass::Add_Weapon
PUBLIC	?Remove_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z ; DAPlayerObserverClass::Remove_Weapon
PUBLIC	?Clear_Weapons@DAPlayerObserverClass@@UAEXXZ	; DAPlayerObserverClass::Clear_Weapons
PUBLIC	?C4_Detonate_Request@DAPlayerObserverClass@@UAE_NPAVC4GameObj@@@Z ; DAPlayerObserverClass::C4_Detonate_Request
PUBLIC	?C4_Detonate@DAPlayerObserverClass@@UAEXPAVC4GameObj@@@Z ; DAPlayerObserverClass::C4_Detonate
PUBLIC	?Change_Character@DAPlayerObserverClass@@UAEXPBVSoldierGameObjDef@@@Z ; DAPlayerObserverClass::Change_Character
PUBLIC	?Dialog_Message@DAPlayerObserverClass@@UAEXW4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z ; DAPlayerObserverClass::Dialog_Message
PUBLIC	?Created@DAPlayerObserverClass@@UAEXXZ		; DAPlayerObserverClass::Created
PUBLIC	?Destroyed@DAPlayerObserverClass@@UAEXXZ	; DAPlayerObserverClass::Destroyed
PUBLIC	?Damage_Dealt_Request@DAPlayerObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z ; DAPlayerObserverClass::Damage_Dealt_Request
PUBLIC	?Damage_Received_Request@DAPlayerObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z ; DAPlayerObserverClass::Damage_Received_Request
PUBLIC	?Damage_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z ; DAPlayerObserverClass::Damage_Dealt
PUBLIC	?Damage_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ; DAPlayerObserverClass::Damage_Received
PUBLIC	?Kill_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z ; DAPlayerObserverClass::Kill_Dealt
PUBLIC	?Kill_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ; DAPlayerObserverClass::Kill_Received
PUBLIC	?Custom@DAPlayerObserverClass@@UAEXPAVScriptableGameObj@@HH@Z ; DAPlayerObserverClass::Custom
PUBLIC	?Poked@DAPlayerObserverClass@@UAEXPAVcPlayer@@@Z ; DAPlayerObserverClass::Poked
PUBLIC	?Timer_Expired@DAPlayerObserverClass@@UAEXHI@Z	; DAPlayerObserverClass::Timer_Expired
PUBLIC	?Think@DAPlayerObserverClass@@UAEXXZ		; DAPlayerObserverClass::Think
PUBLIC	??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@HPBQAUDAPlayerObserverTimerStruct@@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::VectorClass<DAPlayerObserverTimerStruct *>
PUBLIC	??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::VectorClass<DAPlayerObserverTimerStruct *>
PUBLIC	??4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator=
PUBLIC	??1?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverTimerStruct *>::~VectorClass<DAPlayerObserverTimerStruct *>
PUBLIC	??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAPAUDAPlayerObserverTimerStruct@@H@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
PUBLIC	??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEABQAUDAPlayerObserverTimerStruct@@H@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
PUBLIC	??8?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UBE_NABV0@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator==
PUBLIC	?Resize@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::Resize
PUBLIC	?Clear@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverTimerStruct *>::Clear
PUBLIC	?Length@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverTimerStruct *>::Length
PUBLIC	?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::ID
PUBLIC	?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::ID
PUBLIC	??_G?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z ; VectorClass<DAPlayerObserverTimerStruct *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@IPBQAUDAPlayerObserverTimerStruct@@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::DynamicVectorClass<DAPlayerObserverTimerStruct *>
PUBLIC	??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::DynamicVectorClass<DAPlayerObserverTimerStruct *>
PUBLIC	??4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Count
PUBLIC	?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::ID
PUBLIC	??1?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::~DynamicVectorClass<DAPlayerObserverTimerStruct *>
PUBLIC	??_G?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`scalar deleting destructor'
PUBLIC	??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@HPBQAUDAPlayerObserverChatCommandStruct@@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::VectorClass<DAPlayerObserverChatCommandStruct *>
PUBLIC	??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::VectorClass<DAPlayerObserverChatCommandStruct *>
PUBLIC	??4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator=
PUBLIC	??1?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::~VectorClass<DAPlayerObserverChatCommandStruct *>
PUBLIC	??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAPAUDAPlayerObserverChatCommandStruct@@H@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
PUBLIC	??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEABQAUDAPlayerObserverChatCommandStruct@@H@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
PUBLIC	??8?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UBE_NABV0@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator==
PUBLIC	?Resize@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::Resize
PUBLIC	?Clear@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::Clear
PUBLIC	?Length@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::Length
PUBLIC	?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::ID
PUBLIC	?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::ID
PUBLIC	??_G?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@IPBQAUDAPlayerObserverChatCommandStruct@@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::DynamicVectorClass<DAPlayerObserverChatCommandStruct *>
PUBLIC	??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::DynamicVectorClass<DAPlayerObserverChatCommandStruct *>
PUBLIC	??4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Count
PUBLIC	?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::ID
PUBLIC	??1?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::~DynamicVectorClass<DAPlayerObserverChatCommandStruct *>
PUBLIC	??_G?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`scalar deleting destructor'
PUBLIC	??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@HPBQAUDAPlayerObserverKeyHookStruct@@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::VectorClass<DAPlayerObserverKeyHookStruct *>
PUBLIC	??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::VectorClass<DAPlayerObserverKeyHookStruct *>
PUBLIC	??4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator=
PUBLIC	??1?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::~VectorClass<DAPlayerObserverKeyHookStruct *>
PUBLIC	??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAPAUDAPlayerObserverKeyHookStruct@@H@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
PUBLIC	??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEABQAUDAPlayerObserverKeyHookStruct@@H@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
PUBLIC	??8?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UBE_NABV0@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator==
PUBLIC	?Resize@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::Resize
PUBLIC	?Clear@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::Clear
PUBLIC	?Length@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::Length
PUBLIC	?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::ID
PUBLIC	?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::ID
PUBLIC	??_G?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@IPBQAUDAPlayerObserverKeyHookStruct@@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::DynamicVectorClass<DAPlayerObserverKeyHookStruct *>
PUBLIC	??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::DynamicVectorClass<DAPlayerObserverKeyHookStruct *>
PUBLIC	??4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Count
PUBLIC	?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::ID
PUBLIC	??1?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::~DynamicVectorClass<DAPlayerObserverKeyHookStruct *>
PUBLIC	??_G?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`scalar deleting destructor'
PUBLIC	??0DAPlayerObserverClass@@QAE@ABV0@@Z		; DAPlayerObserverClass::DAPlayerObserverClass
PUBLIC	??4DAPlayerObserverClass@@QAEAAV0@ABV0@@Z	; DAPlayerObserverClass::operator=
PUBLIC	??_GDAPlayerObserverClass@@UAEPAXI@Z		; DAPlayerObserverClass::`scalar deleting destructor'
PUBLIC	??_EDAPlayerObserverClass@@UAEPAXI@Z		; DAPlayerObserverClass::`vector deleting destructor'
PUBLIC	??1DAPlayerDataFactoryClass@@UAE@XZ		; DAPlayerDataFactoryClass::~DAPlayerDataFactoryClass
PUBLIC	??0DAPlayerDataFactoryClass@@QAE@XZ		; DAPlayerDataFactoryClass::DAPlayerDataFactoryClass
PUBLIC	??0DAPlayerDataFactoryClass@@QAE@ABV0@@Z	; DAPlayerDataFactoryClass::DAPlayerDataFactoryClass
PUBLIC	??4DAPlayerDataFactoryClass@@QAEAAV0@ABV0@@Z	; DAPlayerDataFactoryClass::operator=
PUBLIC	??_GDAPlayerDataFactoryClass@@UAEPAXI@Z		; DAPlayerDataFactoryClass::`scalar deleting destructor'
PUBLIC	??_EDAPlayerDataFactoryClass@@UAEPAXI@Z		; DAPlayerDataFactoryClass::`vector deleting destructor'
PUBLIC	??1DAPlayerDataClass@@UAE@XZ			; DAPlayerDataClass::~DAPlayerDataClass
PUBLIC	?Get_Owner@DAPlayerDataClass@@QAEPAVcPlayer@@XZ	; DAPlayerDataClass::Get_Owner
PUBLIC	?Set_Owner@DAPlayerDataClass@@QAEXPAVcPlayer@@@Z ; DAPlayerDataClass::Set_Owner
PUBLIC	?Get_Factory@DAPlayerDataClass@@QAEPBVDAPlayerDataFactoryClass@@XZ ; DAPlayerDataClass::Get_Factory
PUBLIC	?Set_Factory@DAPlayerDataClass@@QAEXPBVDAPlayerDataFactoryClass@@@Z ; DAPlayerDataClass::Set_Factory
PUBLIC	?Get_ID@DAPlayerDataClass@@QAEHXZ		; DAPlayerDataClass::Get_ID
PUBLIC	?Get_Name@DAPlayerDataClass@@QAEABVWideStringClass@@XZ ; DAPlayerDataClass::Get_Name
PUBLIC	?Get_GameObj@DAPlayerDataClass@@QAEPAVSoldierGameObj@@XZ ; DAPlayerDataClass::Get_GameObj
PUBLIC	?Get_Team@DAPlayerDataClass@@QAEHXZ		; DAPlayerDataClass::Get_Team
PUBLIC	?Init@DAPlayerDataClass@@UAEXXZ			; DAPlayerDataClass::Init
PUBLIC	?Clear_Level@DAPlayerDataClass@@UAEXXZ		; DAPlayerDataClass::Clear_Level
PUBLIC	?Clear_Session@DAPlayerDataClass@@UAEXXZ	; DAPlayerDataClass::Clear_Session
PUBLIC	??0DAPlayerDataClass@@QAE@XZ			; DAPlayerDataClass::DAPlayerDataClass
PUBLIC	??0DAPlayerDataClass@@QAE@ABV0@@Z		; DAPlayerDataClass::DAPlayerDataClass
PUBLIC	??4DAPlayerDataClass@@QAEAAV0@ABV0@@Z		; DAPlayerDataClass::operator=
PUBLIC	??_GDAPlayerDataClass@@UAEPAXI@Z		; DAPlayerDataClass::`scalar deleting destructor'
PUBLIC	??_EDAPlayerDataClass@@UAEPAXI@Z		; DAPlayerDataClass::`vector deleting destructor'
PUBLIC	??4DASettingsClass@@QAEAAV0@ABV0@@Z		; DASettingsClass::operator=
PUBLIC	??4DASettingsManager@@QAEAAV0@ABV0@@Z		; DASettingsManager::operator=
PUBLIC	?Init@DASpawnPlayerDataClass@@EAEXXZ		; DASpawnPlayerDataClass::Init
PUBLIC	??0DASpawnPlayerDataClass@@QAE@XZ		; DASpawnPlayerDataClass::DASpawnPlayerDataClass
PUBLIC	??1DASpawnPlayerDataClass@@UAE@XZ		; DASpawnPlayerDataClass::~DASpawnPlayerDataClass
PUBLIC	??0DASpawnPlayerDataClass@@QAE@ABV0@@Z		; DASpawnPlayerDataClass::DASpawnPlayerDataClass
PUBLIC	??4DASpawnPlayerDataClass@@QAEAAV0@ABV0@@Z	; DASpawnPlayerDataClass::operator=
PUBLIC	??_GDASpawnPlayerDataClass@@UAEPAXI@Z		; DASpawnPlayerDataClass::`scalar deleting destructor'
PUBLIC	??_EDASpawnPlayerDataClass@@UAEPAXI@Z		; DASpawnPlayerDataClass::`vector deleting destructor'
PUBLIC	?Set_Center_Point@DASpawnPointClass@@QAEXABVVector3@@@Z ; DASpawnPointClass::Set_Center_Point
PUBLIC	?Get_Center_Point@DASpawnPointClass@@QBEABVVector3@@XZ ; DASpawnPointClass::Get_Center_Point
PUBLIC	?Get_Spawners@DASpawnPointClass@@QBEABV?$DynamicVectorClass@VVector3@@@@XZ ; DASpawnPointClass::Get_Spawners
PUBLIC	?Set_Enabled@DASpawnPointClass@@QAEX_N@Z	; DASpawnPointClass::Set_Enabled
PUBLIC	?Is_Enabled@DASpawnPointClass@@QBE_NXZ		; DASpawnPointClass::Is_Enabled
PUBLIC	?Set_Team@DASpawnPointClass@@QAEXH@Z		; DASpawnPointClass::Set_Team
PUBLIC	?Get_Team@DASpawnPointClass@@QBEHXZ		; DASpawnPointClass::Get_Team
PUBLIC	?Get_Group@DASpawnPointClass@@QBEABVStringClass@@XZ ; DASpawnPointClass::Get_Group
PUBLIC	?Get_Name@DASpawnPointClass@@QBEABVStringClass@@XZ ; DASpawnPointClass::Get_Name
PUBLIC	?Set_Spawn_Time@DASpawnPointClass@@QAEXI@Z	; DASpawnPointClass::Set_Spawn_Time
PUBLIC	?Get_Spawn_Time@DASpawnPointClass@@QBEIXZ	; DASpawnPointClass::Get_Spawn_Time
PUBLIC	?Get_Base_Spawn_Time@DASpawnPointClass@@QBEIXZ	; DASpawnPointClass::Get_Base_Spawn_Time
PUBLIC	?Get_Protect_Time@DASpawnPointClass@@QBEMXZ	; DASpawnPointClass::Get_Protect_Time
PUBLIC	?Set_Protect_Time@DASpawnPointClass@@QAEXM@Z	; DASpawnPointClass::Set_Protect_Time
PUBLIC	?Get_Priority@DASpawnPointClass@@QBEHXZ		; DASpawnPointClass::Get_Priority
PUBLIC	?Set_Priority@DASpawnPointClass@@QAEXH@Z	; DASpawnPointClass::Set_Priority
PUBLIC	?Inc_Priority@DASpawnPointClass@@QAEXXZ		; DASpawnPointClass::Inc_Priority
PUBLIC	?Dec_Priority@DASpawnPointClass@@QAEXXZ		; DASpawnPointClass::Dec_Priority
PUBLIC	?Is_In_Spawn_List@DASpawnPointClass@@AAE_NH@Z	; DASpawnPointClass::Is_In_Spawn_List
PUBLIC	?Is_In_Spawn_List@DASpawnPointClass@@AAE_NPAVScriptableGameObj@@@Z ; DASpawnPointClass::Is_In_Spawn_List
PUBLIC	?Remove_Spawn_List@DASpawnPointClass@@AAE_NH@Z	; DASpawnPointClass::Remove_Spawn_List
PUBLIC	?Remove_Spawn_List@DASpawnPointClass@@AAE_NPAVScriptableGameObj@@@Z ; DASpawnPointClass::Remove_Spawn_List
PUBLIC	??0DASpawnPointClass@@AAE@XZ			; DASpawnPointClass::DASpawnPointClass
PUBLIC	??0?$VectorClass@VVector3@@@@QAE@HPBVVector3@@@Z ; VectorClass<Vector3>::VectorClass<Vector3>
PUBLIC	??0?$VectorClass@VVector3@@@@QAE@ABV0@@Z	; VectorClass<Vector3>::VectorClass<Vector3>
PUBLIC	??4?$VectorClass@VVector3@@@@QAEAAV0@ABV0@@Z	; VectorClass<Vector3>::operator=
PUBLIC	??1?$VectorClass@VVector3@@@@UAE@XZ		; VectorClass<Vector3>::~VectorClass<Vector3>
PUBLIC	??A?$VectorClass@VVector3@@@@QAEAAVVector3@@H@Z	; VectorClass<Vector3>::operator[]
PUBLIC	??A?$VectorClass@VVector3@@@@QBEABVVector3@@H@Z	; VectorClass<Vector3>::operator[]
PUBLIC	??8?$VectorClass@VVector3@@@@UBE_NABV0@@Z	; VectorClass<Vector3>::operator==
PUBLIC	?Resize@?$VectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z ; VectorClass<Vector3>::Resize
PUBLIC	?Clear@?$VectorClass@VVector3@@@@UAEXXZ		; VectorClass<Vector3>::Clear
PUBLIC	?Length@?$VectorClass@VVector3@@@@QBEHXZ	; VectorClass<Vector3>::Length
PUBLIC	?ID@?$VectorClass@VVector3@@@@UAEHPBVVector3@@@Z ; VectorClass<Vector3>::ID
PUBLIC	?ID@?$VectorClass@VVector3@@@@UAEHABVVector3@@@Z ; VectorClass<Vector3>::ID
PUBLIC	??_G?$VectorClass@VVector3@@@@UAEPAXI@Z		; VectorClass<Vector3>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@VVector3@@@@QAE@IPBVVector3@@@Z ; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>
PUBLIC	??0?$DynamicVectorClass@VVector3@@@@QAE@ABV0@@Z	; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>
PUBLIC	??4?$DynamicVectorClass@VVector3@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<Vector3>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z ; DynamicVectorClass<Vector3>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@VVector3@@@@UAEXXZ	; DynamicVectorClass<Vector3>::Clear
PUBLIC	?Count@?$DynamicVectorClass@VVector3@@@@QBEHXZ	; DynamicVectorClass<Vector3>::Count
PUBLIC	?ID@?$DynamicVectorClass@VVector3@@@@UAEHPBVVector3@@@Z ; DynamicVectorClass<Vector3>::ID
PUBLIC	?ID@?$DynamicVectorClass@VVector3@@@@UAEHABVVector3@@@Z ; DynamicVectorClass<Vector3>::ID
PUBLIC	??1?$DynamicVectorClass@VVector3@@@@UAE@XZ	; DynamicVectorClass<Vector3>::~DynamicVectorClass<Vector3>
PUBLIC	??_G?$DynamicVectorClass@VVector3@@@@UAEPAXI@Z	; DynamicVectorClass<Vector3>::`scalar deleting destructor'
PUBLIC	??0?$VectorClass@H@@QAE@HPBH@Z			; VectorClass<int>::VectorClass<int>
PUBLIC	??0?$VectorClass@H@@QAE@ABV0@@Z			; VectorClass<int>::VectorClass<int>
PUBLIC	??4?$VectorClass@H@@QAEAAV0@ABV0@@Z		; VectorClass<int>::operator=
PUBLIC	??1?$VectorClass@H@@UAE@XZ			; VectorClass<int>::~VectorClass<int>
PUBLIC	??A?$VectorClass@H@@QAEAAHH@Z			; VectorClass<int>::operator[]
PUBLIC	??A?$VectorClass@H@@QBEABHH@Z			; VectorClass<int>::operator[]
PUBLIC	??8?$VectorClass@H@@UBE_NABV0@@Z		; VectorClass<int>::operator==
PUBLIC	?Resize@?$VectorClass@H@@UAE_NHPBH@Z		; VectorClass<int>::Resize
PUBLIC	?Clear@?$VectorClass@H@@UAEXXZ			; VectorClass<int>::Clear
PUBLIC	?Length@?$VectorClass@H@@QBEHXZ			; VectorClass<int>::Length
PUBLIC	?ID@?$VectorClass@H@@UAEHPBH@Z			; VectorClass<int>::ID
PUBLIC	?ID@?$VectorClass@H@@UAEHABH@Z			; VectorClass<int>::ID
PUBLIC	??_G?$VectorClass@H@@UAEPAXI@Z			; VectorClass<int>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@H@@QAE@IPBH@Z		; DynamicVectorClass<int>::DynamicVectorClass<int>
PUBLIC	??0?$DynamicVectorClass@H@@QAE@ABV0@@Z		; DynamicVectorClass<int>::DynamicVectorClass<int>
PUBLIC	??4?$DynamicVectorClass@H@@QAEAAV0@ABV0@@Z	; DynamicVectorClass<int>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z	; DynamicVectorClass<int>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@H@@UAEXXZ		; DynamicVectorClass<int>::Clear
PUBLIC	?Count@?$DynamicVectorClass@H@@QBEHXZ		; DynamicVectorClass<int>::Count
PUBLIC	?Add@?$DynamicVectorClass@H@@QAE_NABH@Z		; DynamicVectorClass<int>::Add
PUBLIC	?DeleteObj@?$DynamicVectorClass@H@@QAE_NABH@Z	; DynamicVectorClass<int>::DeleteObj
PUBLIC	?Delete@?$DynamicVectorClass@H@@QAE_NH@Z	; DynamicVectorClass<int>::Delete
PUBLIC	?ID@?$DynamicVectorClass@H@@UAEHPBH@Z		; DynamicVectorClass<int>::ID
PUBLIC	?ID@?$DynamicVectorClass@H@@UAEHABH@Z		; DynamicVectorClass<int>::ID
PUBLIC	??1?$DynamicVectorClass@H@@UAE@XZ		; DynamicVectorClass<int>::~DynamicVectorClass<int>
PUBLIC	??_G?$DynamicVectorClass@H@@UAEPAXI@Z		; DynamicVectorClass<int>::`scalar deleting destructor'
PUBLIC	??1DASpawnPointClass@@UAE@XZ			; DASpawnPointClass::~DASpawnPointClass
PUBLIC	??0DASpawnPointClass@@QAE@ABV0@@Z		; DASpawnPointClass::DASpawnPointClass
PUBLIC	??4DASpawnPointClass@@QAEAAV0@ABV0@@Z		; DASpawnPointClass::operator=
PUBLIC	??_GDASpawnPointClass@@UAEPAXI@Z		; DASpawnPointClass::`scalar deleting destructor'
PUBLIC	??_EDASpawnPointClass@@UAEPAXI@Z		; DASpawnPointClass::`vector deleting destructor'
PUBLIC	??1?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAE@XZ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::~DAPlayerDataManagerClass<DASpawnPlayerDataClass>
PUBLIC	?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@H@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
PUBLIC	?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVScriptableGameObj@@@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
PUBLIC	?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVcPlayer@@@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
PUBLIC	?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVDAPlayerClass@@@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
PUBLIC	?Init@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@IAEXXZ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Init
PUBLIC	?Create_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@EAEPAVDAPlayerDataClass@@XZ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Create_Data
PUBLIC	??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@XZ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::DAPlayerDataManagerClass<DASpawnPlayerDataClass>
PUBLIC	??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@ABV0@@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::DAPlayerDataManagerClass<DASpawnPlayerDataClass>
PUBLIC	??4?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAEAAV0@ABV0@@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::operator=
PUBLIC	??_G?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`scalar deleting destructor'
PUBLIC	??_E?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`vector deleting destructor'
PUBLIC	?Create_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Create_Instance
PUBLIC	?Destroy_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAXXZ ; DASingleton<DASpawnManagerClass>::Destroy_Instance
PUBLIC	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
PUBLIC	??4?$DASingleton@VDASpawnManagerClass@@@@QAEAAV0@ABV0@@Z ; DASingleton<DASpawnManagerClass>::operator=
PUBLIC	?Create_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z ; DASpawnManagerClass::Create_Spawn_Point
PUBLIC	?Find_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@ABVStringClass@@@Z ; DASpawnManagerClass::Find_Spawn_Point
PUBLIC	?Enable_All_Except@DASpawnManagerClass@@QAEXABVStringClass@@@Z ; DASpawnManagerClass::Enable_All_Except
PUBLIC	?Disable_All_Except@DASpawnManagerClass@@QAEXABVStringClass@@@Z ; DASpawnManagerClass::Disable_All_Except
PUBLIC	?Get_Spawn_Time@DASpawnManagerClass@@QBEIXZ	; DASpawnManagerClass::Get_Spawn_Time
PUBLIC	?Get_Intermission_Time@DASpawnManagerClass@@QBEIXZ ; DASpawnManagerClass::Get_Intermission_Time
PUBLIC	?Get_Min_Ally_Distance@DASpawnManagerClass@@QBEMXZ ; DASpawnManagerClass::Get_Min_Ally_Distance
PUBLIC	?Get_Max_Ally_Distance@DASpawnManagerClass@@QBEMXZ ; DASpawnManagerClass::Get_Max_Ally_Distance
PUBLIC	?Get_Min_Enemy_Distance@DASpawnManagerClass@@QBEMXZ ; DASpawnManagerClass::Get_Min_Enemy_Distance
PUBLIC	?Get_Max_Enemy_Distance@DASpawnManagerClass@@QBEMXZ ; DASpawnManagerClass::Get_Max_Enemy_Distance
PUBLIC	?Using_Waiting_Room@DASpawnManagerClass@@QBE_NXZ ; DASpawnManagerClass::Using_Waiting_Room
PUBLIC	?Get_Protect_Time@DASpawnManagerClass@@QBEMXZ	; DASpawnManagerClass::Get_Protect_Time
PUBLIC	?Get_Death_Position@DASpawnManagerClass@@QBEABVVector3@@H@Z ; DASpawnManagerClass::Get_Death_Position
PUBLIC	?Get_Death_Position@DASpawnManagerClass@@QBEABVVector3@@PAVScriptableGameObj@@@Z ; DASpawnManagerClass::Get_Death_Position
PUBLIC	??1DASpawnManagerClass@@EAE@XZ			; DASpawnManagerClass::~DASpawnManagerClass
PUBLIC	??0DASpawnManagerClass@@AAE@XZ			; DASpawnManagerClass::DASpawnManagerClass
PUBLIC	??0?$VectorClass@PAVDASpawnPointClass@@@@QAE@HPBQAVDASpawnPointClass@@@Z ; VectorClass<DASpawnPointClass *>::VectorClass<DASpawnPointClass *>
PUBLIC	??1?$VectorClass@PAVDASpawnPointClass@@@@UAE@XZ	; VectorClass<DASpawnPointClass *>::~VectorClass<DASpawnPointClass *>
PUBLIC	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
PUBLIC	??A?$VectorClass@PAVDASpawnPointClass@@@@QBEABQAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
PUBLIC	??8?$VectorClass@PAVDASpawnPointClass@@@@UBE_NABV0@@Z ; VectorClass<DASpawnPointClass *>::operator==
PUBLIC	?Resize@?$VectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z ; VectorClass<DASpawnPointClass *>::Resize
PUBLIC	?Clear@?$VectorClass@PAVDASpawnPointClass@@@@UAEXXZ ; VectorClass<DASpawnPointClass *>::Clear
PUBLIC	?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; VectorClass<DASpawnPointClass *>::Length
PUBLIC	?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z ; VectorClass<DASpawnPointClass *>::ID
PUBLIC	?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z ; VectorClass<DASpawnPointClass *>::ID
PUBLIC	??_G?$VectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z ; VectorClass<DASpawnPointClass *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE@IPBQAVDASpawnPointClass@@@Z ; DynamicVectorClass<DASpawnPointClass *>::DynamicVectorClass<DASpawnPointClass *>
PUBLIC	?Resize@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z ; DynamicVectorClass<DASpawnPointClass *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEXXZ ; DynamicVectorClass<DASpawnPointClass *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DASpawnPointClass *>::Count
PUBLIC	?Add@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE_NABQAVDASpawnPointClass@@@Z ; DynamicVectorClass<DASpawnPointClass *>::Add
PUBLIC	?Delete_All@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAEXXZ ; DynamicVectorClass<DASpawnPointClass *>::Delete_All
PUBLIC	?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z ; DynamicVectorClass<DASpawnPointClass *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z ; DynamicVectorClass<DASpawnPointClass *>::ID
PUBLIC	??1?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE@XZ ; DynamicVectorClass<DASpawnPointClass *>::~DynamicVectorClass<DASpawnPointClass *>
PUBLIC	??_G?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z ; DynamicVectorClass<DASpawnPointClass *>::`scalar deleting destructor'
PUBLIC	??_GDASpawnManagerClass@@EAEPAXI@Z		; DASpawnManagerClass::`scalar deleting destructor'
PUBLIC	??_EDASpawnManagerClass@@EAEPAXI@Z		; DASpawnManagerClass::`vector deleting destructor'
PUBLIC	??1DABaseNodeClass@@UAE@XZ			; DABaseNodeClass::~DABaseNodeClass
PUBLIC	??8DABaseNodeClass@@QAE_NABV0@@Z		; DABaseNodeClass::operator==
PUBLIC	??9DABaseNodeClass@@QAE_NABV0@@Z		; DABaseNodeClass::operator!=
PUBLIC	?Get_Position@DABaseNodeClass@@QBEABVVector3@@XZ ; DABaseNodeClass::Get_Position
PUBLIC	?Get_Preset@DABaseNodeClass@@QBEPBDXZ		; DABaseNodeClass::Get_Preset
PUBLIC	?Get_Model@DABaseNodeClass@@QBEPBDXZ		; DABaseNodeClass::Get_Model
PUBLIC	?Get_Team@DABaseNodeClass@@QBEHXZ		; DABaseNodeClass::Get_Team
PUBLIC	?Get_Group@DABaseNodeClass@@QBEABVStringClass@@XZ ; DABaseNodeClass::Get_Group
PUBLIC	?Get_Name@DABaseNodeClass@@QBEABVStringClass@@XZ ; DABaseNodeClass::Get_Name
PUBLIC	?Is_Contested@DABaseNodeClass@@QBE_NXZ		; DABaseNodeClass::Is_Contested
PUBLIC	?Set_Contested@DABaseNodeClass@@QAEX_N@Z	; DABaseNodeClass::Set_Contested
PUBLIC	?Is_Capturable@DABaseNodeClass@@QBE_NXZ		; DABaseNodeClass::Is_Capturable
PUBLIC	?Set_Capturable@DABaseNodeClass@@QAEX_N@Z	; DABaseNodeClass::Set_Capturable
PUBLIC	?Is_Capture_Once@DABaseNodeClass@@QBE_NXZ	; DABaseNodeClass::Is_Capture_Once
PUBLIC	?Set_Capture_Once@DABaseNodeClass@@QAEX_N@Z	; DABaseNodeClass::Set_Capture_Once
PUBLIC	?Contested_Event@DABaseNodeClass@@MAEXXZ	; DABaseNodeClass::Contested_Event
PUBLIC	?Capture_Event@DABaseNodeClass@@MAEXXZ		; DABaseNodeClass::Capture_Event
PUBLIC	??0DABaseNodeClass@@IAE@XZ			; DABaseNodeClass::DABaseNodeClass
PUBLIC	??0DABaseNodeClass@@QAE@ABV0@@Z			; DABaseNodeClass::DABaseNodeClass
PUBLIC	??4DABaseNodeClass@@QAEAAV0@ABV0@@Z		; DABaseNodeClass::operator=
PUBLIC	??_GDABaseNodeClass@@UAEPAXI@Z			; DABaseNodeClass::`scalar deleting destructor'
PUBLIC	??_EDABaseNodeClass@@UAEPAXI@Z			; DABaseNodeClass::`vector deleting destructor'
PUBLIC	?Get_Type@DASpawnNodeClass@@UBEPBDXZ		; DASpawnNodeClass::Get_Type
PUBLIC	??0DASpawnNodeClass@@QAE@XZ			; DASpawnNodeClass::DASpawnNodeClass
PUBLIC	??1DASpawnNodeClass@@UAE@XZ			; DASpawnNodeClass::~DASpawnNodeClass
PUBLIC	??0DASpawnNodeClass@@QAE@ABV0@@Z		; DASpawnNodeClass::DASpawnNodeClass
PUBLIC	??4DASpawnNodeClass@@QAEAAV0@ABV0@@Z		; DASpawnNodeClass::operator=
PUBLIC	??_GDASpawnNodeClass@@UAEPAXI@Z			; DASpawnNodeClass::`scalar deleting destructor'
PUBLIC	??_EDASpawnNodeClass@@UAEPAXI@Z			; DASpawnNodeClass::`vector deleting destructor'
PUBLIC	?Create_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Create_Instance
PUBLIC	?Destroy_Instance@?$DASingleton@VDANodeManagerClass@@@@SAXXZ ; DASingleton<DANodeManagerClass>::Destroy_Instance
PUBLIC	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
PUBLIC	??4?$DASingleton@VDANodeManagerClass@@@@QAEAAV0@ABV0@@Z ; DASingleton<DANodeManagerClass>::operator=
PUBLIC	?Get_Attack_Defend_Distance@DANodeManagerClass@@QBEMXZ ; DANodeManagerClass::Get_Attack_Defend_Distance
PUBLIC	?Get_Attack_Defend_Tick_Amount@DANodeManagerClass@@QBEMXZ ; DANodeManagerClass::Get_Attack_Defend_Tick_Amount
PUBLIC	?Get_Attack_Defend_Tick_Time@DANodeManagerClass@@QBEIXZ ; DANodeManagerClass::Get_Attack_Defend_Tick_Time
PUBLIC	?Get_Attack_Defend_Tick_Points@DANodeManagerClass@@QBEMXZ ; DANodeManagerClass::Get_Attack_Defend_Tick_Points
PUBLIC	?Get_Attack_Defend_Tick_Veteran_Points@DANodeManagerClass@@QBEHXZ ; DANodeManagerClass::Get_Attack_Defend_Tick_Veteran_Points
PUBLIC	?Get_Capture_Points@DANodeManagerClass@@QBEMXZ	; DANodeManagerClass::Get_Capture_Points
PUBLIC	?Get_Capture_Veteran_Points@DANodeManagerClass@@QBEHXZ ; DANodeManagerClass::Get_Capture_Veteran_Points
PUBLIC	?Get_Contested_Spawn_Time@DANodeManagerClass@@QBEIXZ ; DANodeManagerClass::Get_Contested_Spawn_Time
PUBLIC	?Get_Node_Count@DANodeManagerClass@@QAEHXZ	; DANodeManagerClass::Get_Node_Count
PUBLIC	?Get_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@H@Z ; DANodeManagerClass::Get_Node
PUBLIC	?Find_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@ABVStringClass@@@Z ; DANodeManagerClass::Find_Node
PUBLIC	??1DANodeManagerClass@@EAE@XZ			; DANodeManagerClass::~DANodeManagerClass
PUBLIC	??0DANodeManagerClass@@AAE@XZ			; DANodeManagerClass::DANodeManagerClass
PUBLIC	??0?$VectorClass@PAVDABaseNodeClass@@@@QAE@HPBQAVDABaseNodeClass@@@Z ; VectorClass<DABaseNodeClass *>::VectorClass<DABaseNodeClass *>
PUBLIC	??1?$VectorClass@PAVDABaseNodeClass@@@@UAE@XZ	; VectorClass<DABaseNodeClass *>::~VectorClass<DABaseNodeClass *>
PUBLIC	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
PUBLIC	??A?$VectorClass@PAVDABaseNodeClass@@@@QBEABQAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
PUBLIC	??8?$VectorClass@PAVDABaseNodeClass@@@@UBE_NABV0@@Z ; VectorClass<DABaseNodeClass *>::operator==
PUBLIC	?Resize@?$VectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z ; VectorClass<DABaseNodeClass *>::Resize
PUBLIC	?Clear@?$VectorClass@PAVDABaseNodeClass@@@@UAEXXZ ; VectorClass<DABaseNodeClass *>::Clear
PUBLIC	?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; VectorClass<DABaseNodeClass *>::Length
PUBLIC	?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z ; VectorClass<DABaseNodeClass *>::ID
PUBLIC	?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z ; VectorClass<DABaseNodeClass *>::ID
PUBLIC	??_G?$VectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z ; VectorClass<DABaseNodeClass *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE@IPBQAVDABaseNodeClass@@@Z ; DynamicVectorClass<DABaseNodeClass *>::DynamicVectorClass<DABaseNodeClass *>
PUBLIC	?Resize@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z ; DynamicVectorClass<DABaseNodeClass *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEXXZ ; DynamicVectorClass<DABaseNodeClass *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; DynamicVectorClass<DABaseNodeClass *>::Count
PUBLIC	?Add@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE_NABQAVDABaseNodeClass@@@Z ; DynamicVectorClass<DABaseNodeClass *>::Add
PUBLIC	?Delete_All@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAEXXZ ; DynamicVectorClass<DABaseNodeClass *>::Delete_All
PUBLIC	?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z ; DynamicVectorClass<DABaseNodeClass *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z ; DynamicVectorClass<DABaseNodeClass *>::ID
PUBLIC	??1?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE@XZ ; DynamicVectorClass<DABaseNodeClass *>::~DynamicVectorClass<DABaseNodeClass *>
PUBLIC	??_G?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z ; DynamicVectorClass<DABaseNodeClass *>::`scalar deleting destructor'
PUBLIC	??_GDANodeManagerClass@@EAEPAXI@Z		; DANodeManagerClass::`scalar deleting destructor'
PUBLIC	??_EDANodeManagerClass@@EAEPAXI@Z		; DANodeManagerClass::`vector deleting destructor'
PUBLIC	??1DAGameObjObserverClass@@UAE@XZ		; DAGameObjObserverClass::~DAGameObjObserverClass
PUBLIC	?Destroyed@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@@Z ; DAGameObjObserverClass::Destroyed
PUBLIC	?Custom@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HH0@Z ; DAGameObjObserverClass::Custom
PUBLIC	?Poked@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z ; DAGameObjObserverClass::Poked
PUBLIC	?Entered@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z ; DAGameObjObserverClass::Entered
PUBLIC	?Exited@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z ; DAGameObjObserverClass::Exited
PUBLIC	?Sound_Heard@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ; DAGameObjObserverClass::Sound_Heard
PUBLIC	?Enemy_Seen@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z ; DAGameObjObserverClass::Enemy_Seen
PUBLIC	?Action_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; DAGameObjObserverClass::Action_Complete
PUBLIC	?Timer_Expired@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@H@Z ; DAGameObjObserverClass::Timer_Expired
PUBLIC	?Animation_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@PBD@Z ; DAGameObjObserverClass::Animation_Complete
PUBLIC	?Init@DAGameObjObserverClass@@UAEXXZ		; DAGameObjObserverClass::Init
PUBLIC	?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@AAH@Z ; DAGameObjObserverClass::Vehicle_Entry_Request
PUBLIC	?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z ; DAGameObjObserverClass::Vehicle_Entry_Request
PUBLIC	?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z ; DAGameObjObserverClass::Vehicle_Enter
PUBLIC	?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z ; DAGameObjObserverClass::Vehicle_Enter
PUBLIC	?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z ; DAGameObjObserverClass::Vehicle_Exit
PUBLIC	?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z ; DAGameObjObserverClass::Vehicle_Exit
PUBLIC	?Vehicle_Flip@DAGameObjObserverClass@@UAE_NXZ	; DAGameObjObserverClass::Vehicle_Flip
PUBLIC	?Damage_Dealt_Request@DAGameObjObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z ; DAGameObjObserverClass::Damage_Dealt_Request
PUBLIC	?Damage_Received_Request@DAGameObjObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z ; DAGameObjObserverClass::Damage_Received_Request
PUBLIC	?Damage_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z ; DAGameObjObserverClass::Damage_Dealt
PUBLIC	?Damage_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ; DAGameObjObserverClass::Damage_Received
PUBLIC	?Kill_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z ; DAGameObjObserverClass::Kill_Dealt
PUBLIC	?Kill_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ; DAGameObjObserverClass::Kill_Received
PUBLIC	?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@@Z ; DAGameObjObserverClass::PowerUp_Grant_Request
PUBLIC	?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ; DAGameObjObserverClass::PowerUp_Grant_Request
PUBLIC	?PowerUp_Grant@DAGameObjObserverClass@@UAEXPAVcPlayer@@@Z ; DAGameObjObserverClass::PowerUp_Grant
PUBLIC	?PowerUp_Grant@DAGameObjObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ; DAGameObjObserverClass::PowerUp_Grant
PUBLIC	?Add_Weapon_Request@DAGameObjObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z ; DAGameObjObserverClass::Add_Weapon_Request
PUBLIC	?Add_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z ; DAGameObjObserverClass::Add_Weapon
PUBLIC	?Remove_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z ; DAGameObjObserverClass::Remove_Weapon
PUBLIC	?Clear_Weapons@DAGameObjObserverClass@@UAEXXZ	; DAGameObjObserverClass::Clear_Weapons
PUBLIC	?Get_Owner@DAGameObjObserverClass@@QAEPAVScriptableGameObj@@XZ ; DAGameObjObserverClass::Get_Owner
PUBLIC	?Killed@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0@Z ; DAGameObjObserverClass::Killed
PUBLIC	?Damaged@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0M@Z ; DAGameObjObserverClass::Damaged
PUBLIC	?Created@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z ; DAGameObjObserverClass::Created
PUBLIC	??0DAGameObjObserverClass@@QAE@XZ		; DAGameObjObserverClass::DAGameObjObserverClass
PUBLIC	??0DAGameObjObserverClass@@QAE@ABV0@@Z		; DAGameObjObserverClass::DAGameObjObserverClass
PUBLIC	??4DAGameObjObserverClass@@QAEAAV0@ABV0@@Z	; DAGameObjObserverClass::operator=
PUBLIC	??_GDAGameObjObserverClass@@UAEPAXI@Z		; DAGameObjObserverClass::`scalar deleting destructor'
PUBLIC	??_EDAGameObjObserverClass@@UAEPAXI@Z		; DAGameObjObserverClass::`vector deleting destructor'
PUBLIC	?Get_Group@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ ; DAVehicleSpawnPointClass::Get_Group
PUBLIC	?Get_Name@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ ; DAVehicleSpawnPointClass::Get_Name
PUBLIC	?Get_Position@DAVehicleSpawnPointClass@@QBEABVVector3@@XZ ; DAVehicleSpawnPointClass::Get_Position
PUBLIC	?Is_Enabled@DAVehicleSpawnPointClass@@QBE_NXZ	; DAVehicleSpawnPointClass::Is_Enabled
PUBLIC	?Get_Team@DAVehicleSpawnPointClass@@QBEHXZ	; DAVehicleSpawnPointClass::Get_Team
PUBLIC	?Get_Priority@DAVehicleSpawnPointClass@@QBEHXZ	; DAVehicleSpawnPointClass::Get_Priority
PUBLIC	?Set_Priority@DAVehicleSpawnPointClass@@QAEXH@Z	; DAVehicleSpawnPointClass::Set_Priority
PUBLIC	?Inc_Priority@DAVehicleSpawnPointClass@@QAEXXZ	; DAVehicleSpawnPointClass::Inc_Priority
PUBLIC	?Dec_Priority@DAVehicleSpawnPointClass@@QAEXXZ	; DAVehicleSpawnPointClass::Dec_Priority
PUBLIC	?Get_Distance@DAVehicleSpawnPointClass@@QAEMABVVector3@@@Z ; DAVehicleSpawnPointClass::Get_Distance
PUBLIC	??1DAVehicleSpawnPointClass@@MAE@XZ		; DAVehicleSpawnPointClass::~DAVehicleSpawnPointClass
PUBLIC	??0DAVehicleSpawnPointClass@@IAE@XZ		; DAVehicleSpawnPointClass::DAVehicleSpawnPointClass
PUBLIC	??_GDAVehicleSpawnPointClass@@MAEPAXI@Z		; DAVehicleSpawnPointClass::`scalar deleting destructor'
PUBLIC	??_EDAVehicleSpawnPointClass@@MAEPAXI@Z		; DAVehicleSpawnPointClass::`vector deleting destructor'
PUBLIC	??0DAVehicleAirDropPointClass@@IAE@XZ		; DAVehicleAirDropPointClass::DAVehicleAirDropPointClass
PUBLIC	??1DAVehicleAirDropPointClass@@UAE@XZ		; DAVehicleAirDropPointClass::~DAVehicleAirDropPointClass
PUBLIC	??_GDAVehicleAirDropPointClass@@UAEPAXI@Z	; DAVehicleAirDropPointClass::`scalar deleting destructor'
PUBLIC	??_EDAVehicleAirDropPointClass@@UAEPAXI@Z	; DAVehicleAirDropPointClass::`vector deleting destructor'
PUBLIC	?Create_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ; DASingleton<DAVehicleSpawnManagerClass>::Create_Instance
PUBLIC	?Destroy_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAXXZ ; DASingleton<DAVehicleSpawnManagerClass>::Destroy_Instance
PUBLIC	?Get_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ; DASingleton<DAVehicleSpawnManagerClass>::Get_Instance
PUBLIC	??4?$DASingleton@VDAVehicleSpawnManagerClass@@@@QAEAAV0@ABV0@@Z ; DASingleton<DAVehicleSpawnManagerClass>::operator=
PUBLIC	?Create_Spawn_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleSpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z ; DAVehicleSpawnManagerClass::Create_Spawn_Point
PUBLIC	?Create_Air_Drop_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleAirDropPointClass@@PBVINIClass@@ABVStringClass@@@Z ; DAVehicleSpawnManagerClass::Create_Air_Drop_Point
PUBLIC	?Find_Spawn_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleSpawnPointClass@@ABVStringClass@@@Z ; DAVehicleSpawnManagerClass::Find_Spawn_Point
PUBLIC	?Enable_All_Spawn_Points_Except@DAVehicleSpawnManagerClass@@QAEXABVStringClass@@@Z ; DAVehicleSpawnManagerClass::Enable_All_Spawn_Points_Except
PUBLIC	?Disable_All_Spawn_Points_Except@DAVehicleSpawnManagerClass@@QAEXABVStringClass@@@Z ; DAVehicleSpawnManagerClass::Disable_All_Spawn_Points_Except
PUBLIC	?Disable_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z ; DAVehicleSpawnManagerClass::Disable_All_Spawn_Points_Team
PUBLIC	?Enable_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z ; DAVehicleSpawnManagerClass::Enable_All_Spawn_Points_Team
PUBLIC	?Set_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z ; DAVehicleSpawnManagerClass::Set_All_Spawn_Points_Team
PUBLIC	?All_Spawn_Points_Disabled_Team@DAVehicleSpawnManagerClass@@QAE_NH@Z ; DAVehicleSpawnManagerClass::All_Spawn_Points_Disabled_Team
PUBLIC	?Enable_Vehicle_Factory@DAVehicleSpawnManagerClass@@QAEXH_N@Z ; DAVehicleSpawnManagerClass::Enable_Vehicle_Factory
PUBLIC	?Set_Vehicle_Factory_Busy@DAVehicleSpawnManagerClass@@QAEXH_N@Z ; DAVehicleSpawnManagerClass::Set_Vehicle_Factory_Busy
PUBLIC	??1DAVehicleSpawnManagerClass@@MAE@XZ		; DAVehicleSpawnManagerClass::~DAVehicleSpawnManagerClass
PUBLIC	??0DAVehicleSpawnManagerClass@@IAE@XZ		; DAVehicleSpawnManagerClass::DAVehicleSpawnManagerClass
PUBLIC	??0?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@HPBQAVDAVehicleSpawnPointClass@@@Z ; VectorClass<DAVehicleSpawnPointClass *>::VectorClass<DAVehicleSpawnPointClass *>
PUBLIC	??1?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ ; VectorClass<DAVehicleSpawnPointClass *>::~VectorClass<DAVehicleSpawnPointClass *>
PUBLIC	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
PUBLIC	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEABQAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
PUBLIC	??8?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UBE_NABV0@@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator==
PUBLIC	?Resize@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z ; VectorClass<DAVehicleSpawnPointClass *>::Resize
PUBLIC	?Clear@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ ; VectorClass<DAVehicleSpawnPointClass *>::Clear
PUBLIC	?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; VectorClass<DAVehicleSpawnPointClass *>::Length
PUBLIC	?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z ; VectorClass<DAVehicleSpawnPointClass *>::ID
PUBLIC	?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z ; VectorClass<DAVehicleSpawnPointClass *>::ID
PUBLIC	??_G?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z ; VectorClass<DAVehicleSpawnPointClass *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@IPBQAVDAVehicleSpawnPointClass@@@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::DynamicVectorClass<DAVehicleSpawnPointClass *>
PUBLIC	?Resize@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
PUBLIC	?Add@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE_NABQAVDAVehicleSpawnPointClass@@@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Add
PUBLIC	?Delete_All@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAEXXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Delete_All
PUBLIC	?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::ID
PUBLIC	??1?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::~DynamicVectorClass<DAVehicleSpawnPointClass *>
PUBLIC	??_G?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`scalar deleting destructor'
PUBLIC	??_GDAVehicleSpawnManagerClass@@MAEPAXI@Z	; DAVehicleSpawnManagerClass::`scalar deleting destructor'
PUBLIC	??_EDAVehicleSpawnManagerClass@@MAEPAXI@Z	; DAVehicleSpawnManagerClass::`vector deleting destructor'
PUBLIC	?Add_Ignore_List@DATeleporterClass@@QAEXPAVScriptableGameObj@@@Z ; DATeleporterClass::Add_Ignore_List
PUBLIC	?Remove_Ignore_List@DATeleporterClass@@QAEXPAVScriptableGameObj@@@Z ; DATeleporterClass::Remove_Ignore_List
PUBLIC	?Is_In_Ignore_List@DATeleporterClass@@QAE_NPAVScriptableGameObj@@@Z ; DATeleporterClass::Is_In_Ignore_List
PUBLIC	?Get_Spawners@DATeleporterClass@@QBEABV?$DynamicVectorClass@VVector3@@@@XZ ; DATeleporterClass::Get_Spawners
PUBLIC	?Set_Enabled@DATeleporterClass@@QAEX_N@Z	; DATeleporterClass::Set_Enabled
PUBLIC	?Is_Enabled@DATeleporterClass@@QBE_NXZ		; DATeleporterClass::Is_Enabled
PUBLIC	?Set_Team@DATeleporterClass@@QAEXH@Z		; DATeleporterClass::Set_Team
PUBLIC	?Get_Team@DATeleporterClass@@QBEHXZ		; DATeleporterClass::Get_Team
PUBLIC	?Get_Group@DATeleporterClass@@QBEABVStringClass@@XZ ; DATeleporterClass::Get_Group
PUBLIC	?Get_Name@DATeleporterClass@@QBEABVStringClass@@XZ ; DATeleporterClass::Get_Name
PUBLIC	?Get_Name@DATeleporterClass@@UAEPBDXZ		; DATeleporterClass::Get_Name
PUBLIC	??0DATeleporterClass@@AAE@XZ			; DATeleporterClass::DATeleporterClass
PUBLIC	??1DATeleporterClass@@EAE@XZ			; DATeleporterClass::~DATeleporterClass
PUBLIC	??_GDATeleporterClass@@EAEPAXI@Z		; DATeleporterClass::`scalar deleting destructor'
PUBLIC	??_EDATeleporterClass@@EAEPAXI@Z		; DATeleporterClass::`vector deleting destructor'
PUBLIC	?Create_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ ; DASingleton<DATeleporterManagerClass>::Create_Instance
PUBLIC	?Destroy_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAXXZ ; DASingleton<DATeleporterManagerClass>::Destroy_Instance
PUBLIC	?Get_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ ; DASingleton<DATeleporterManagerClass>::Get_Instance
PUBLIC	??4?$DASingleton@VDATeleporterManagerClass@@@@QAEAAV0@ABV0@@Z ; DASingleton<DATeleporterManagerClass>::operator=
PUBLIC	?Create_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@PBVINIClass@@ABVStringClass@@@Z ; DATeleporterManagerClass::Create_Teleporter
PUBLIC	?Find_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@ABVStringClass@@@Z ; DATeleporterManagerClass::Find_Teleporter
PUBLIC	??0DATeleporterManagerClass@@AAE@XZ		; DATeleporterManagerClass::DATeleporterManagerClass
PUBLIC	??0?$VectorClass@PAVDATeleporterClass@@@@QAE@HPBQAVDATeleporterClass@@@Z ; VectorClass<DATeleporterClass *>::VectorClass<DATeleporterClass *>
PUBLIC	??1?$VectorClass@PAVDATeleporterClass@@@@UAE@XZ	; VectorClass<DATeleporterClass *>::~VectorClass<DATeleporterClass *>
PUBLIC	??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
PUBLIC	??A?$VectorClass@PAVDATeleporterClass@@@@QBEABQAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
PUBLIC	??8?$VectorClass@PAVDATeleporterClass@@@@UBE_NABV0@@Z ; VectorClass<DATeleporterClass *>::operator==
PUBLIC	?Resize@?$VectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z ; VectorClass<DATeleporterClass *>::Resize
PUBLIC	?Clear@?$VectorClass@PAVDATeleporterClass@@@@UAEXXZ ; VectorClass<DATeleporterClass *>::Clear
PUBLIC	?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ ; VectorClass<DATeleporterClass *>::Length
PUBLIC	?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z ; VectorClass<DATeleporterClass *>::ID
PUBLIC	?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z ; VectorClass<DATeleporterClass *>::ID
PUBLIC	??_G?$VectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z ; VectorClass<DATeleporterClass *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE@IPBQAVDATeleporterClass@@@Z ; DynamicVectorClass<DATeleporterClass *>::DynamicVectorClass<DATeleporterClass *>
PUBLIC	?Resize@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z ; DynamicVectorClass<DATeleporterClass *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEXXZ ; DynamicVectorClass<DATeleporterClass *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAVDATeleporterClass@@@@QBEHXZ ; DynamicVectorClass<DATeleporterClass *>::Count
PUBLIC	?Add@?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE_NABQAVDATeleporterClass@@@Z ; DynamicVectorClass<DATeleporterClass *>::Add
PUBLIC	?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z ; DynamicVectorClass<DATeleporterClass *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z ; DynamicVectorClass<DATeleporterClass *>::ID
PUBLIC	??1?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE@XZ ; DynamicVectorClass<DATeleporterClass *>::~DynamicVectorClass<DATeleporterClass *>
PUBLIC	??_G?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z ; DynamicVectorClass<DATeleporterClass *>::`scalar deleting destructor'
PUBLIC	??1DATeleporterManagerClass@@QAE@XZ		; DATeleporterManagerClass::~DATeleporterManagerClass
PUBLIC	??_GDATeleporterManagerClass@@QAEPAXI@Z		; DATeleporterManagerClass::`scalar deleting destructor'
PUBLIC	?Timer_Expired@DAControlNodeClass@@UAEXHI@Z	; DAControlNodeClass::Timer_Expired
PUBLIC	?Capture_Event@DAControlNodeClass@@UAEXXZ	; DAControlNodeClass::Capture_Event
PUBLIC	?Contested_Event@DAControlNodeClass@@UAEXXZ	; DAControlNodeClass::Contested_Event
PUBLIC	?Get_Type@DAControlNodeClass@@UBEPBDXZ		; DAControlNodeClass::Get_Type
PUBLIC	?Init@DAControlNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z ; DAControlNodeClass::Init
PUBLIC	??0DAControlNodeClass@@QAE@XZ			; DAControlNodeClass::DAControlNodeClass
PUBLIC	??1DAControlNodeClass@@UAE@XZ			; DAControlNodeClass::~DAControlNodeClass
PUBLIC	??_GDAControlNodeClass@@UAEPAXI@Z		; DAControlNodeClass::`scalar deleting destructor'
PUBLIC	?Timer_Expired@DATiberiumNodeClass@@UAEXHI@Z	; DATiberiumNodeClass::Timer_Expired
PUBLIC	?Capture_Event@DATiberiumNodeClass@@UAEXXZ	; DATiberiumNodeClass::Capture_Event
PUBLIC	?Contested_Event@DATiberiumNodeClass@@UAEXXZ	; DATiberiumNodeClass::Contested_Event
PUBLIC	?Get_Type@DATiberiumNodeClass@@UBEPBDXZ		; DATiberiumNodeClass::Get_Type
PUBLIC	?Init@DATiberiumNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z ; DATiberiumNodeClass::Init
PUBLIC	??0DATiberiumNodeClass@@QAE@XZ			; DATiberiumNodeClass::DATiberiumNodeClass
PUBLIC	??1DATiberiumNodeClass@@UAE@XZ			; DATiberiumNodeClass::~DATiberiumNodeClass
PUBLIC	??_GDATiberiumNodeClass@@UAEPAXI@Z		; DATiberiumNodeClass::`scalar deleting destructor'
PUBLIC	?Increment_Score@DADominationManagerClass@@QAEXH@Z ; DADominationManagerClass::Increment_Score
PUBLIC	?Increment_Credits@DADominationManagerClass@@QAEXH@Z ; DADominationManagerClass::Increment_Credits
PUBLIC	?Set_Winner@DADominationManagerClass@@QAEXH@Z	; DADominationManagerClass::Set_Winner
PUBLIC	?Get_Control_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Control_Node_Preset
PUBLIC	?Get_Control_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Control_Node_Model
PUBLIC	?Get_Control_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Control_Node_Animation
PUBLIC	?Get_Tiberium_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Tiberium_Node_Preset
PUBLIC	?Get_Tiberium_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Tiberium_Node_Model
PUBLIC	?Get_Tiberium_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Tiberium_Node_Animation
PUBLIC	?Get_Point_Tick_Time@DADominationManagerClass@@QBEMXZ ; DADominationManagerClass::Get_Point_Tick_Time
PUBLIC	?Get_Credit_Tick_Time@DADominationManagerClass@@QBEMXZ ; DADominationManagerClass::Get_Credit_Tick_Time
PUBLIC	?Update_Node_Count@DADominationManagerClass@@QAEXXZ ; DADominationManagerClass::Update_Node_Count
PUBLIC	?Update_Score@DADominationManagerClass@@QAEXH@Z	; DADominationManagerClass::Update_Score
PUBLIC	?Init@DADominationManagerClass@@EAEXXZ		; DADominationManagerClass::Init
PUBLIC	?Settings_Loaded_Event@DADominationManagerClass@@EAEXXZ ; DADominationManagerClass::Settings_Loaded_Event
PUBLIC	?Player_Loaded_Event@DADominationManagerClass@@EAEXPAVcPlayer@@@Z ; DADominationManagerClass::Player_Loaded_Event
PUBLIC	?Object_Created_Event@DADominationManagerClass@@EAEXPAVScriptableGameObj@@@Z ; DADominationManagerClass::Object_Created_Event
PUBLIC	?Timer_Expired@DADominationManagerClass@@EAEXHI@Z ; DADominationManagerClass::Timer_Expired
PUBLIC	?Send_Info_Message@DADominationManagerClass@@AAEXH@Z ; DADominationManagerClass::Send_Info_Message
PUBLIC	?Nodes_Chat_Command@DADominationManagerClass@@AAE_NPAVcPlayer@@ABVDATokenClass@@W4TextMessageEnum@@@Z ; DADominationManagerClass::Nodes_Chat_Command
PUBLIC	??1DADominationManagerClass@@EAE@XZ		; DADominationManagerClass::~DADominationManagerClass
PUBLIC	??0DADominationManagerClass@@QAE@XZ		; DADominationManagerClass::DADominationManagerClass
PUBLIC	??_GDADominationManagerClass@@EAEPAXI@Z		; DADominationManagerClass::`scalar deleting destructor'
PUBLIC	??0?$DAGameModeRegistrant@VDADominationManagerClass@@@@QAE@PBD00@Z ; DAGameModeRegistrant<DADominationManagerClass>::DAGameModeRegistrant<DADominationManagerClass>
PUBLIC	?Create_Instance@?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAVDAGameModeClass@@XZ ; DAGameModeRegistrant<DADominationManagerClass>::Create_Instance
PUBLIC	??1?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAE@XZ ; DAGameModeRegistrant<DADominationManagerClass>::~DAGameModeRegistrant<DADominationManagerClass>
PUBLIC	??_G?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAXI@Z ; DAGameModeRegistrant<DADominationManagerClass>::`scalar deleting destructor'
PUBLIC	??4DALevelCleaner@@QAEAAV0@ABV0@@Z		; DALevelCleaner::operator=
PUBLIC	?Get_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEHXZ ; TeamPurchaseSettingsDefClass::Get_Beacon_Definition
PUBLIC	?Set_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEXH@Z ; TeamPurchaseSettingsDefClass::Set_Beacon_Definition
PUBLIC	?Set_Beacon_Cost@TeamPurchaseSettingsDefClass@@QAEXH@Z ; TeamPurchaseSettingsDefClass::Set_Beacon_Cost
PUBLIC	??$Create_Node@VDAControlNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z ; DANodeManagerClass::Create_Node<DAControlNodeClass>
PUBLIC	??$Create_Node@VDATiberiumNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z ; DANodeManagerClass::Create_Node<DATiberiumNodeClass>
PUBLIC	?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@CAIABVStringClass@@I@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash
PUBLIC	?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@ABEIABVStringClass@@@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash
PUBLIC	?Re_Hash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Re_Hash
PUBLIC	??0?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::HashTemplateClass<StringClass,PairClass<int,StringClass> >
PUBLIC	??1?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::~HashTemplateClass<StringClass,PairClass<int,StringClass> >
PUBLIC	?Get@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBEPAV?$PairClass@HVStringClass@@@@ABVStringClass@@@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Get
PUBLIC	?Insert@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXABVStringClass@@ABV?$PairClass@HVStringClass@@@@@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Insert
PUBLIC	??0?$PairClass@HVStringClass@@@@QAE@XZ		; PairClass<int,StringClass>::PairClass<int,StringClass>
PUBLIC	??0?$PairClass@HVStringClass@@@@QAE@ABHABVStringClass@@@Z ; PairClass<int,StringClass>::PairClass<int,StringClass>
PUBLIC	??4?$PairClass@HVStringClass@@@@QAEAAV0@ABV0@@Z	; PairClass<int,StringClass>::operator=
PUBLIC	??1?$PairClass@HVStringClass@@@@QAE@XZ		; PairClass<int,StringClass>::~PairClass<int,StringClass>
PUBLIC	?increment@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::increment
PUBLIC	??0?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@AAV?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@@Z ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::HashTemplateIterator<StringClass,PairClass<int,StringClass> >
PUBLIC	?reset@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::reset
PUBLIC	?getKey@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEABVStringClass@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getKey
PUBLIC	?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue
PUBLIC	??E?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator++
PUBLIC	??B?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBE_NXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator bool
PUBLIC	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next
PUBLIC	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
PUBLIC	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
PUBLIC	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??$move@AAPAVDAPlayerObserverClass@@@std@@YA$$QAPAVDAPlayerObserverClass@@AAPAV1@@Z ; std::move<DAPlayerObserverClass * &>
PUBLIC	??$move@AAPAVDAPlayerDataClass@@@std@@YA$$QAPAVDAPlayerDataClass@@AAPAV1@@Z ; std::move<DAPlayerDataClass * &>
PUBLIC	??$move@AAPAUDAPlayerTagStruct@DAPlayerClass@@@std@@YA$$QAPAUDAPlayerTagStruct@DAPlayerClass@@AAPAU12@@Z ; std::move<DAPlayerClass::DAPlayerTagStruct * &>
PUBLIC	??$move@AAPAUDAPlayerObserverTimerStruct@@@std@@YA$$QAPAUDAPlayerObserverTimerStruct@@AAPAU1@@Z ; std::move<DAPlayerObserverTimerStruct * &>
PUBLIC	??$move@AAPAUDAPlayerObserverChatCommandStruct@@@std@@YA$$QAPAUDAPlayerObserverChatCommandStruct@@AAPAU1@@Z ; std::move<DAPlayerObserverChatCommandStruct * &>
PUBLIC	??$move@AAPAUDAPlayerObserverKeyHookStruct@@@std@@YA$$QAPAUDAPlayerObserverKeyHookStruct@@AAPAU1@@Z ; std::move<DAPlayerObserverKeyHookStruct * &>
PUBLIC	??$move@AAVVector3@@@std@@YA$$QAVVector3@@AAV1@@Z ; std::move<Vector3 &>
PUBLIC	??$move@AAH@std@@YA$$QAHAAH@Z			; std::move<int &>
PUBLIC	??$move@AAPAVDASpawnPointClass@@@std@@YA$$QAPAVDASpawnPointClass@@AAPAV1@@Z ; std::move<DASpawnPointClass * &>
PUBLIC	??$move@AAPAVDABaseNodeClass@@@std@@YA$$QAPAVDABaseNodeClass@@AAPAV1@@Z ; std::move<DABaseNodeClass * &>
PUBLIC	??$move@AAPAVDAVehicleSpawnPointClass@@@std@@YA$$QAPAVDAVehicleSpawnPointClass@@AAPAV1@@Z ; std::move<DAVehicleSpawnPointClass * &>
PUBLIC	??$move@AAPAVDATeleporterClass@@@std@@YA$$QAPAVDATeleporterClass@@AAPAV1@@Z ; std::move<DATeleporterClass * &>
PUBLIC	??0Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::Entry
PUBLIC	??1Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::~Entry
PUBLIC	??_EEntry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEPAXI@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::`vector deleting destructor'
PUBLIC	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
PUBLIC	??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
PUBLIC	??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
PUBLIC	?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory
PUBLIC	?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
PUBLIC	?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern
PUBLIC	?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z ; HashTemplateKeyClass<StringClass>::Get_Hash_Value
PUBLIC	??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
PUBLIC	??B?$RefArray@D$03@@QAEPADXZ			; RefArray<char,4>::operator char *
PUBLIC	??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
PUBLIC	??_EDASpawnManagerClass@@G3AEPAXI@Z		; [thunk]:DASpawnManagerClass::`vector deleting destructor'
PUBLIC	??_EDADominationManagerClass@@G3AEPAXI@Z	; [thunk]:DADominationManagerClass::`vector deleting destructor'
PUBLIC	??_7GameObjObserverClass@@6B@			; GameObjObserverClass::`vftable'
PUBLIC	??_7ScriptClass@@6B@				; ScriptClass::`vftable'
PUBLIC	??_7ScriptImpClass@@6B@				; ScriptImpClass::`vftable'
PUBLIC	??_7ScriptFactory@@6B@				; ScriptFactory::`vftable'
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_7INIClass@@6B@				; INIClass::`vftable'
PUBLIC	?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA ; `GenericDataSafeClass::Security_Check'::`2'::_checking
PUBLIC	?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA ; `GenericDataSafeClass::Security_Check'::`2'::_calls
PUBLIC	??_7PostLoadableClass@@6B@			; PostLoadableClass::`vftable'
PUBLIC	??_7ReferencerClass@@6B@			; ReferencerClass::`vftable'
PUBLIC	??_7JFW_Key_Hook_Base@@6B@			; JFW_Key_Hook_Base::`vftable'
PUBLIC	??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vftable'
PUBLIC	??_7MultiKeyHookScriptImpClass@@6B@		; MultiKeyHookScriptImpClass::`vftable'
PUBLIC	??_7JFW_Object_Created_Hook_Base@@6B@		; JFW_Object_Created_Hook_Base::`vftable'
PUBLIC	??_7DAEventClass@@6B@				; DAEventClass::`vftable'
PUBLIC	??_7DAGameModeFactoryClass@@6B@			; DAGameModeFactoryClass::`vftable'
PUBLIC	??_7DAGameModeClass@@6B@			; DAGameModeClass::`vftable'
PUBLIC	??_7?$VectorClass@PAVDAPlayerObserverClass@@@@6B@ ; VectorClass<DAPlayerObserverClass *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@6B@ ; DynamicVectorClass<DAPlayerObserverClass *>::`vftable'
PUBLIC	??_7?$VectorClass@PAVDAPlayerDataClass@@@@6B@	; VectorClass<DAPlayerDataClass *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAVDAPlayerDataClass@@@@6B@ ; DynamicVectorClass<DAPlayerDataClass *>::`vftable'
PUBLIC	??_7?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`vftable'
PUBLIC	??_7?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ ; VectorClass<DAPlayerObserverTimerStruct *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`vftable'
PUBLIC	??_7?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ ; VectorClass<DAPlayerObserverChatCommandStruct *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`vftable'
PUBLIC	??_7?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ ; VectorClass<DAPlayerObserverKeyHookStruct *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`vftable'
PUBLIC	??_7DAPlayerObserverClass@@6B@			; DAPlayerObserverClass::`vftable'
PUBLIC	??_7DAPlayerDataFactoryClass@@6B@		; DAPlayerDataFactoryClass::`vftable'
PUBLIC	??_7DAPlayerDataClass@@6B@			; DAPlayerDataClass::`vftable'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7DASpawnPlayerDataClass@@6B@			; DASpawnPlayerDataClass::`vftable'
PUBLIC	??_7?$VectorClass@VVector3@@@@6B@		; VectorClass<Vector3>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@VVector3@@@@6B@	; DynamicVectorClass<Vector3>::`vftable'
PUBLIC	??_7?$VectorClass@H@@6B@			; VectorClass<int>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@H@@6B@			; DynamicVectorClass<int>::`vftable'
PUBLIC	??_7DASpawnPointClass@@6B@			; DASpawnPointClass::`vftable'
PUBLIC	??_7?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`vftable'
PUBLIC	??_7?$VectorClass@PAVDASpawnPointClass@@@@6B@	; VectorClass<DASpawnPointClass *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAVDASpawnPointClass@@@@6B@ ; DynamicVectorClass<DASpawnPointClass *>::`vftable'
PUBLIC	??_7DASpawnManagerClass@@6BDAEventClass@@@	; DASpawnManagerClass::`vftable'
PUBLIC	??_7DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@ ; DASpawnManagerClass::`vftable'
PUBLIC	??_C@_0CI@GLNDKKDP@DASpawnManagerClass?3?3Create_Spaw@ ; `string'
PUBLIC	??_C@_0DK@FKAEAKEB@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HE@EBKBOLIB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0CK@PCAAENII@DASpawnManagerClass?3?3?$HODASpawnMan@ ; `string'
PUBLIC	??_7DABaseNodeClass@@6B@			; DABaseNodeClass::`vftable'
PUBLIC	??_7DASpawnNodeClass@@6B@			; DASpawnNodeClass::`vftable'
PUBLIC	??_C@_05BEKPGMFA@Spawn?$AA@			; `string'
PUBLIC	??_7?$VectorClass@PAVDABaseNodeClass@@@@6B@	; VectorClass<DABaseNodeClass *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAVDABaseNodeClass@@@@6B@ ; DynamicVectorClass<DABaseNodeClass *>::`vftable'
PUBLIC	??_7DANodeManagerClass@@6B@			; DANodeManagerClass::`vftable'
PUBLIC	??_C@_0CI@IEDAACLK@DANodeManagerClass?3?3?$HODANodeManag@ ; `string'
PUBLIC	??_C@_0DK@BEAEGMFO@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HE@NOMOPGHL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_7DAGameObjObserverClass@@6B@			; DAGameObjObserverClass::`vftable'
PUBLIC	??_7DAVehicleSpawnPointClass@@6B@		; DAVehicleSpawnPointClass::`vftable'
PUBLIC	??_7DAVehicleAirDropPointClass@@6B@		; DAVehicleAirDropPointClass::`vftable'
PUBLIC	??_7?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ ; VectorClass<DAVehicleSpawnPointClass *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`vftable'
PUBLIC	??_7DAVehicleSpawnManagerClass@@6B@		; DAVehicleSpawnManagerClass::`vftable'
PUBLIC	??_C@_0CP@NDJNDFON@DAVehicleSpawnManagerClass?3?3Crea@ ; `string'
PUBLIC	??_C@_0DL@OCMHCKEN@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HG@BDBAIANB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0DC@JJABCFEP@DAVehicleSpawnManagerClass?3?3Crea@ ; `string'
PUBLIC	??_C@_0DI@CFPPNDBF@DAVehicleSpawnManagerClass?3?3?$HODAV@ ; `string'
PUBLIC	??_7DATeleporterClass@@6B@			; DATeleporterClass::`vftable'
PUBLIC	??_C@_04MLLLIHIP@null?$AA@			; `string'
PUBLIC	??_C@_0BC@HEFMPENO@DATeleporterClass?$AA@	; `string'
PUBLIC	??_7?$VectorClass@PAVDATeleporterClass@@@@6B@	; VectorClass<DATeleporterClass *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAVDATeleporterClass@@@@6B@ ; DynamicVectorClass<DATeleporterClass *>::`vftable'
PUBLIC	??_C@_0CM@HFDEGNLF@DATeleporterManagerClass?3?3Create@ ; `string'
PUBLIC	??_C@_0DJ@FHBOOADJ@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@GFLDAOOA@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_7DAControlNodeClass@@6B@			; DAControlNodeClass::`vftable'
PUBLIC	??_C@_07DFGIDBBA@Control?$AA@			; `string'
PUBLIC	??_7DATiberiumNodeClass@@6B@			; DATiberiumNodeClass::`vftable'
PUBLIC	??_C@_08PKKJDHOJ@Tiberium?$AA@			; `string'
PUBLIC	??_7DADominationManagerClass@@6BDAEventClass@@@	; DADominationManagerClass::`vftable'
PUBLIC	??_7DADominationManagerClass@@6BDAGameModeClass@@@ ; DADominationManagerClass::`vftable'
PUBLIC	??_7?$DAGameModeRegistrant@VDADominationManagerClass@@@@6B@ ; DAGameModeRegistrant<DADominationManagerClass>::`vftable'
PUBLIC	?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
PUBLIC	??_C@_0BP@FBBIPBMI@M00EVAG_DSGN0048I1EVAG_snd?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BP@PPHAGAFJ@M00EVAG_DSGN0049I1EVAG_snd?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BC@JCMPHAOK@ControlNodePreset?$AA@	; `string'
PUBLIC	??_C@_0BB@BMHLIFHB@ControlNodeModel?$AA@	; `string'
PUBLIC	??_C@_0BF@HANGKPH@ControlNodeAnimation?$AA@	; `string'
PUBLIC	??_C@_0BD@IBNFAGPI@TiberiumNodePreset?$AA@	; `string'
PUBLIC	??_C@_0BC@GKJFMBGJ@TiberiumNodeModel?$AA@	; `string'
PUBLIC	??_C@_0BG@JMKIDKPA@TiberiumNodeAnimation?$AA@	; `string'
PUBLIC	??_C@_0BK@HBIJHNGP@DominationPointTickAmount?$AA@ ; `string'
PUBLIC	??_C@_0BI@OEAKIFBD@DominationPointTickTime?$AA@	; `string'
PUBLIC	??_C@_0BL@JPMPFIPH@DominationCreditTickAmount?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BCIIMMLE@DominationCreditTickTime?$AA@ ; `string'
PUBLIC	??_C@_0BI@OAGMNPNI@DominationWinningPoints?$AA@	; `string'
PUBLIC	??_C@_0N@EBHECGJM@GDI_Spawn1_X?$AA@		; `string'
PUBLIC	??_C@_03OHGKCNFD@Nod?$AA@			; `string'
PUBLIC	??_C@_03IOFAJBDH@GDI?$AA@			; `string'
PUBLIC	??_C@_0O@EFIOFKDD@GDI_Vehicle_X?$AA@		; `string'
PUBLIC	??_C@_0CB@EAMMBIFA@Teleporter1_TeleporterEntrance_X@ ; `string'
PUBLIC	??_C@_0N@FJJGHBNM@Teleporter?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BI@CCBKOFN@?$CFs_TeleporterEntrance_X?$AA@ ; `string'
PUBLIC	??_C@_09CEALANKL@Control?$CFd?$AA@		; `string'
PUBLIC	??_C@_09GIHHJKKB@?$CFs_Node_X?$AA@		; `string'
PUBLIC	??_C@_0L@IBGDNKL@Tiberium?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BF@EIMMMIOI@CnC_Nod_Stealth_Tank?$AA@	; `string'
PUBLIC	??_C@_0BD@GFDJBLDK@CnC_Nod_Recon_Bike?$AA@	; `string'
PUBLIC	??_C@_0BO@OMGBBNCN@CnC_POW_Nuclear_Missle_Beacon?$AA@ ; `string'
PUBLIC	??_C@_0BG@OOJAAJNC@POW_MineRemote_Player?$AA@	; `string'
PUBLIC	??_C@_0BJ@HIKMPHIB@CnC_Nod_FlameThrower_2SF?$AA@ ; `string'
PUBLIC	??_C@_0CA@PCAMMIOK@CnC_Nod_MiniGunner_2SF_Skirmish?$AA@ ; `string'
PUBLIC	??_C@_0CB@EPHIGEJG@CnC_Weapon_RocketLauncher_Player@ ; `string'
PUBLIC	??_C@_0BO@BEJOHP@CnC_Weapon_RamjetRifle_Player?$AA@ ; `string'
PUBLIC	??_C@_0BK@OPFBCKCF@Weapon_RamjetRifle_Player?$AA@ ; `string'
PUBLIC	??_C@_0DO@JHMFIDMG@?$CBnodes?$HM?$CBnode?$HM?$CBscore?$HM?$CBpoints?$HM?$CBcap@ ; `string'
PUBLIC	??_C@_07DDHNKDGP@timeout?$AA@			; `string'
PUBLIC	??_C@_0BP@PJPNOFAF@M00EVAN_DSGN0077I1EVAN_snd?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BP@HIMNBDJK@M00EVAG_DSGN0011I1EVAG_snd?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BP@HHBHICDP@M00EVAN_DSGN0078I1EVAN_snd?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BP@CLFKJEFO@M00EVAG_DSGN0005I1EVAG_snd?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BG@OIKCAIKB@?$CFls?5has?5won?5the?5game?$CB?$AA@ ; `string'
PUBLIC	??_C@_0FB@HEJPMFGD@?$CFls?5controlled?5?$CFd?5Tiberium?5Node?$CI@ ; `string'
PUBLIC	??_C@_0NB@BMOMOCHG@When?5you?5die?5you?5will?5be?5asked?5t@ ; `string'
PUBLIC	??_C@_0KH@JMJLPLJA@This?5is?5a?5Domination?5Mode?5match?4@ ; `string'
PUBLIC	??_C@_04KHEKMLOH@?0?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_0L@NIBPICLL@?$CFs?$CI?$CFd?$CJ?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BB@GPOLAEHP@Score?3?5?$CF?40f?1?$CF?40f?$AA@ ; `string'
PUBLIC	??_C@_0BA@NCNLMLDB@Control1_Node_X?$AA@		; `string'
PUBLIC	??_C@_0L@FKCFHJBF@Domination?$AA@		; `string'
PUBLIC	??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0DH@LBOBMIDI@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GO@IKKPOACN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0DD@ODCBLNCJ@VectorClass?$DMclass?5DAPlayerObserv@ ; `string'
PUBLIC	??_C@_0DC@JEMMOOD@VectorClass?$DMclass?5DAPlayerObserv@ ; `string'
PUBLIC	??_C@_0CP@DHEAPCNI@VectorClass?$DMclass?5DAPlayerDataCl@ ; `string'
PUBLIC	??_C@_0CO@NDDDNNIA@VectorClass?$DMclass?5DAPlayerDataCl@ ; `string'
PUBLIC	??_C@_0DP@CMFCBLKD@VectorClass?$DMstruct?5DAPlayerClass@ ; `string'
PUBLIC	??_C@_0DO@MAHPNNNF@VectorClass?$DMstruct?5DAPlayerClass@ ; `string'
PUBLIC	??_C@_0DK@BBINAFLN@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0DJ@MHPEBELA@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0EA@MBLDIHCA@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0DP@JJGAHOFF@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0DM@PKMANBOA@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0DL@IEBGHGHF@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0CD@DPIIFOOF@VectorClass?$DMclass?5Vector3?$DO?3?3Resi@ ; `string'
PUBLIC	??_C@_0CC@HGKCMNMN@VectorClass?$DMclass?5Vector3?$DO?3?3Clea@ ; `string'
PUBLIC	??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@ ; `string'
PUBLIC	??_C@_0BI@DBAHDKIN@VectorClass?$DMint?$DO?3?3Clear?$AA@ ; `string'
PUBLIC	??_C@_0EE@CDJABAN@DAPlayerDataManagerClass?$DMclass?5D@ ; `string'
PUBLIC	??_C@_0DF@JCDNCPAG@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GK@CICFBDGG@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0DI@JCPGKFAB@DASingleton?$DMclass?5DASpawnManager@ ; `string'
PUBLIC	??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0DJ@DNLECMMC@DASingleton?$DMclass?5DASpawnManager@ ; `string'
PUBLIC	??_C@_0CP@BDGJBFMJ@VectorClass?$DMclass?5DASpawnPointCl@ ; `string'
PUBLIC	??_C@_0CO@EOHHGKHD@VectorClass?$DMclass?5DASpawnPointCl@ ; `string'
PUBLIC	??_C@_0DH@JBHKLJEA@DASingleton?$DMclass?5DANodeManagerC@ ; `string'
PUBLIC	??_C@_0DI@DMGMNBNI@DASingleton?$DMclass?5DANodeManagerC@ ; `string'
PUBLIC	??_C@_0CN@JGJEGDPA@VectorClass?$DMclass?5DABaseNodeClas@ ; `string'
PUBLIC	??_C@_0CM@NGDBILCB@VectorClass?$DMclass?5DABaseNodeClas@ ; `string'
PUBLIC	??_C@_0DP@EPFOCLBB@DASingleton?$DMclass?5DAVehicleSpawn@ ; `string'
PUBLIC	??_C@_0EA@CANOJECI@DASingleton?$DMclass?5DAVehicleSpawn@ ; `string'
PUBLIC	??_C@_0DG@LAMFJOBM@VectorClass?$DMclass?5DAVehicleSpawn@ ; `string'
PUBLIC	??_C@_0DF@FOPMMLBB@VectorClass?$DMclass?5DAVehicleSpawn@ ; `string'
PUBLIC	??_C@_0DN@IDMFFIFA@DASingleton?$DMclass?5DATeleporterMa@ ; `string'
PUBLIC	??_C@_0DO@CBMJHOFN@DASingleton?$DMclass?5DATeleporterMa@ ; `string'
PUBLIC	??_C@_0CP@HCNAKDEC@VectorClass?$DMclass?5DATeleporterCl@ ; `string'
PUBLIC	??_C@_0CO@JMDODCKN@VectorClass?$DMclass?5DATeleporterCl@ ; `string'
PUBLIC	??_C@_0EG@HDFDHCGO@DAGameModeRegistrant?$DMclass?5DADom@ ; `string'
PUBLIC	??_C@_0GB@JNPOOKEF@HashTemplateClass?$DMclass?5StringCl@ ; `string'
PUBLIC	??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0CL@ECOCMBOM@VectorClass?$DMclass?5StringClass?$DO?3?3@ ; `string'
PUBLIC	??_C@_0DH@FMPAOODI@VectorClass?$DMclass?5DAPlayerObserv@ ; `string'
PUBLIC	??_C@_0DD@OELEBJCM@VectorClass?$DMclass?5DAPlayerDataCl@ ; `string'
PUBLIC	??_C@_0ED@MCIGMKB@VectorClass?$DMstruct?5DAPlayerClass@ ; `string'
PUBLIC	??_C@_0DP@IOIJJLDO@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0DO@PEJOFHLG@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0EF@EPICALKK@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0EE@JOBDGIII@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0EB@CCPEIKDO@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0EA@DFHGBHJN@VectorClass?$DMstruct?5DAPlayerObser@ ; `string'
PUBLIC	??_C@_0CI@JHCKFMFA@VectorClass?$DMclass?5Vector3?$DO?3?3Vect@ ; `string'
PUBLIC	??_C@_0CH@DLGPEICA@VectorClass?$DMclass?5Vector3?$DO?3?3oper@ ; `string'
PUBLIC	??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@ ; `string'
PUBLIC	??_C@_0BN@BIKGHIDO@VectorClass?$DMint?$DO?3?3operator?5?$DN?$AA@ ; `string'
PUBLIC	??_C@_0DE@EOBPJAFA@VectorClass?$DMclass?5DASpawnPointCl@ ; `string'
PUBLIC	??_C@_0DC@FHJCDJGK@VectorClass?$DMclass?5DABaseNodeClas@ ; `string'
PUBLIC	??_C@_0DL@GABKBKGN@VectorClass?$DMclass?5DAVehicleSpawn@ ; `string'
PUBLIC	??_C@_0DE@GFJJPOM@VectorClass?$DMclass?5DATeleporterCl@ ; `string'
PUBLIC	??_C@_0FG@GMMBDHFC@HashTemplateClass?$DMclass?5StringCl@ ; `string'
PUBLIC	?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
PUBLIC	??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51 ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`local static guard'
PUBLIC	??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@ ; `string'
PUBLIC	??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ ; `string'
PUBLIC	??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@ ; `string'
PUBLIC	??_C@_0CA@OEGNGHEB@DANodeManagerClass?3?3Create_Node?$AA@ ; `string'
PUBLIC	?oh_dear@?7???R?$SafeDataClass@H@@QBEAAHXZ@4HA	; `SafeDataClass<int>::operator()'::`8'::oh_dear
PUBLIC	??_R4ScriptFactory@@6B@				; ScriptFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptFactory@@@8			; ScriptFactory `RTTI Type Descriptor'
PUBLIC	??_R3ScriptFactory@@8				; ScriptFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptFactory@@8				; ScriptFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptFactory@@8			; ScriptFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ScriptClass@@6B@				; ScriptClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptClass@@@8				; ScriptClass `RTTI Type Descriptor'
PUBLIC	??_R3ScriptClass@@8				; ScriptClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptClass@@8				; ScriptClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptClass@@8			; ScriptClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@GameObjObserverClass@@8		; GameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGameObjObserverClass@@@8		; GameObjObserverClass `RTTI Type Descriptor'
PUBLIC	??_R3GameObjObserverClass@@8			; GameObjObserverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GameObjObserverClass@@8			; GameObjObserverClass::`RTTI Base Class Array'
PUBLIC	??_R4GameObjObserverClass@@6B@			; GameObjObserverClass::`RTTI Complete Object Locator'
PUBLIC	??_R4ScriptImpClass@@6B@			; ScriptImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptImpClass@@@8			; ScriptImpClass `RTTI Type Descriptor'
PUBLIC	??_R3ScriptImpClass@@8				; ScriptImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptImpClass@@8				; ScriptImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptImpClass@@8			; ScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INIClass@@6B@				; INIClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVINIClass@@@8				; INIClass `RTTI Type Descriptor'
PUBLIC	??_R3INIClass@@8				; INIClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INIClass@@8				; INIClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INIClass@@8			; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@PostLoadableClass@@8		; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPostLoadableClass@@@8			; PostLoadableClass `RTTI Type Descriptor'
PUBLIC	??_R3PostLoadableClass@@8			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PostLoadableClass@@8			; PostLoadableClass::`RTTI Base Class Array'
PUBLIC	??_R4PostLoadableClass@@6B@			; PostLoadableClass::`RTTI Complete Object Locator'
PUBLIC	??_R4ReferencerClass@@6B@			; ReferencerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReferencerClass@@@8			; ReferencerClass `RTTI Type Descriptor'
PUBLIC	??_R3ReferencerClass@@8				; ReferencerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ReferencerClass@@8				; ReferencerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ReferencerClass@@8		; ReferencerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@H@@6B@		; DynamicVectorClass<int>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@H@@@8		; DynamicVectorClass<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@H@@8			; DynamicVectorClass<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@H@@8			; DynamicVectorClass<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@H@@8		; DynamicVectorClass<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@H@@8		; VectorClass<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@H@@@8			; VectorClass<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@H@@8				; VectorClass<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@H@@8				; VectorClass<int>::`RTTI Base Class Array'
PUBLIC	??_R4JFW_Key_Hook_Base@@6B@			; JFW_Key_Hook_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVJFW_Key_Hook_Base@@@8			; JFW_Key_Hook_Base `RTTI Type Descriptor'
PUBLIC	??_R3JFW_Key_Hook_Base@@8			; JFW_Key_Hook_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2JFW_Key_Hook_Base@@8			; JFW_Key_Hook_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@JFW_Key_Hook_Base@@8		; JFW_Key_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MultiKeyHookScriptImpClass@@6B@		; MultiKeyHookScriptImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMultiKeyHookScriptImpClass@@@8		; MultiKeyHookScriptImpClass `RTTI Type Descriptor'
PUBLIC	??_R3MultiKeyHookScriptImpClass@@8		; MultiKeyHookScriptImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MultiKeyHookScriptImpClass@@8		; MultiKeyHookScriptImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8	; MultiKeyHookScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct> `RTTI Type Descriptor'
PUBLIC	??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4JFW_Object_Created_Hook_Base@@6B@		; JFW_Object_Created_Hook_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVJFW_Object_Created_Hook_Base@@@8	; JFW_Object_Created_Hook_Base `RTTI Type Descriptor'
PUBLIC	??_R3JFW_Object_Created_Hook_Base@@8		; JFW_Object_Created_Hook_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2JFW_Object_Created_Hook_Base@@8		; JFW_Object_Created_Hook_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8	; JFW_Object_Created_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAEventClass@@6B@				; DAEventClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAEventClass@@@8			; DAEventClass `RTTI Type Descriptor'
PUBLIC	??_R3DAEventClass@@8				; DAEventClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAEventClass@@8				; DAEventClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAEventClass@@8			; DAEventClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAGameModeClass@@6B@			; DAGameModeClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAGameModeClass@@@8			; DAGameModeClass `RTTI Type Descriptor'
PUBLIC	??_R3DAGameModeClass@@8				; DAGameModeClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAGameModeClass@@8				; DAGameModeClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAGameModeClass@@8		; DAGameModeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAGameModeFactoryClass@@6B@		; DAGameModeFactoryClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAGameModeFactoryClass@@@8		; DAGameModeFactoryClass `RTTI Type Descriptor'
PUBLIC	??_R3DAGameModeFactoryClass@@8			; DAGameModeFactoryClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAGameModeFactoryClass@@8			; DAGameModeFactoryClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAGameModeFactoryClass@@8		; DAGameModeFactoryClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAPlayerDataFactoryClass@@6B@		; DAPlayerDataFactoryClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAPlayerDataFactoryClass@@@8		; DAPlayerDataFactoryClass `RTTI Type Descriptor'
PUBLIC	??_R3DAPlayerDataFactoryClass@@8		; DAPlayerDataFactoryClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAPlayerDataFactoryClass@@8		; DAPlayerDataFactoryClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAPlayerDataFactoryClass@@8	; DAPlayerDataFactoryClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAPlayerObserverClass@@6B@			; DAPlayerObserverClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAPlayerObserverClass@@@8		; DAPlayerObserverClass `RTTI Type Descriptor'
PUBLIC	??_R3DAPlayerObserverClass@@8			; DAPlayerObserverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAPlayerObserverClass@@8			; DAPlayerObserverClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAPlayerObserverClass@@8		; DAPlayerObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAPlayerDataClass@@6B@			; DAPlayerDataClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAPlayerDataClass@@@8			; DAPlayerDataClass `RTTI Type Descriptor'
PUBLIC	??_R3DAPlayerDataClass@@8			; DAPlayerDataClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAPlayerDataClass@@8			; DAPlayerDataClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAPlayerDataClass@@8		; DAPlayerDataClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@6B@ ; DynamicVectorClass<DAPlayerObserverClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@@8 ; DynamicVectorClass<DAPlayerObserverClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8 ; DynamicVectorClass<DAPlayerObserverClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8 ; DynamicVectorClass<DAPlayerObserverClass *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8 ; DynamicVectorClass<DAPlayerObserverClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerObserverClass@@@@8 ; VectorClass<DAPlayerObserverClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAVDAPlayerObserverClass@@@@@8 ; VectorClass<DAPlayerObserverClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAVDAPlayerObserverClass@@@@8 ; VectorClass<DAPlayerObserverClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAVDAPlayerObserverClass@@@@8 ; VectorClass<DAPlayerObserverClass *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAVDAPlayerObserverClass@@@@6B@ ; VectorClass<DAPlayerObserverClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@6B@ ; DynamicVectorClass<DAPlayerDataClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAVDAPlayerDataClass@@@@@8 ; DynamicVectorClass<DAPlayerDataClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8 ; DynamicVectorClass<DAPlayerDataClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8 ; DynamicVectorClass<DAPlayerDataClass *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8 ; DynamicVectorClass<DAPlayerDataClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerDataClass@@@@8 ; VectorClass<DAPlayerDataClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAVDAPlayerDataClass@@@@@8 ; VectorClass<DAPlayerDataClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAVDAPlayerDataClass@@@@8	; VectorClass<DAPlayerDataClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAVDAPlayerDataClass@@@@8	; VectorClass<DAPlayerDataClass *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAVDAPlayerDataClass@@@@6B@	; VectorClass<DAPlayerDataClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8 ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8 ; VectorClass<DAPlayerClass::DAPlayerTagStruct *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@@8 ; DynamicVectorClass<DAPlayerObserverTimerStruct *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8 ; VectorClass<DAPlayerObserverTimerStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@@8 ; VectorClass<DAPlayerObserverTimerStruct *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8 ; VectorClass<DAPlayerObserverTimerStruct *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8 ; VectorClass<DAPlayerObserverTimerStruct *>::`RTTI Base Class Array'
PUBLIC	??_R4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8 ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 ; VectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8 ; VectorClass<DAPlayerObserverChatCommandStruct *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 ; VectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 ; VectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Base Class Array'
PUBLIC	??_R4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8 ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 ; VectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8 ; VectorClass<DAPlayerObserverKeyHookStruct *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 ; VectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 ; VectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ ; VectorClass<DAPlayerObserverTimerStruct *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ ; VectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ ; VectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Complete Object Locator'
PUBLIC	??_R4DASpawnPlayerDataClass@@6B@		; DASpawnPlayerDataClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDASpawnPlayerDataClass@@@8		; DASpawnPlayerDataClass `RTTI Type Descriptor'
PUBLIC	??_R3DASpawnPlayerDataClass@@8			; DASpawnPlayerDataClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DASpawnPlayerDataClass@@8			; DASpawnPlayerDataClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DASpawnPlayerDataClass@@8		; DASpawnPlayerDataClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DASpawnPointClass@@6B@			; DASpawnPointClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDASpawnPointClass@@@8			; DASpawnPointClass `RTTI Type Descriptor'
PUBLIC	??_R3DASpawnPointClass@@8			; DASpawnPointClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DASpawnPointClass@@8			; DASpawnPointClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DASpawnPointClass@@8		; DASpawnPointClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DASpawnManagerClass@@6BDAEventClass@@@	; DASpawnManagerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDASpawnManagerClass@@@8			; DASpawnManagerClass `RTTI Type Descriptor'
PUBLIC	??_R3DASpawnManagerClass@@8			; DASpawnManagerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DASpawnManagerClass@@8			; DASpawnManagerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DASpawnManagerClass@@8		; DASpawnManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@8 ; DAPlayerDataManagerClass<DASpawnPlayerDataClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@DAPlayerDataFactoryClass@@8	; DAPlayerDataFactoryClass::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$DASingleton@VDASpawnManagerClass@@@@8 ; DASingleton<DASpawnManagerClass>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$DASingleton@VDASpawnManagerClass@@@@@8 ; DASingleton<DASpawnManagerClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$DASingleton@VDASpawnManagerClass@@@@8	; DASingleton<DASpawnManagerClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DASingleton@VDASpawnManagerClass@@@@8	; DASingleton<DASpawnManagerClass>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DASingleton@VDASpawnManagerClass@@@@8 ; DASingleton<DASpawnManagerClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@ ; DASpawnManagerClass::`RTTI Complete Object Locator'
PUBLIC	??_R4?$DynamicVectorClass@VVector3@@@@6B@	; DynamicVectorClass<Vector3>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@VVector3@@@@@8	; DynamicVectorClass<Vector3> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@VVector3@@@@8		; DynamicVectorClass<Vector3>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@VVector3@@@@8		; DynamicVectorClass<Vector3>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@VVector3@@@@8 ; DynamicVectorClass<Vector3>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@VVector3@@@@8	; VectorClass<Vector3>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@VVector3@@@@@8		; VectorClass<Vector3> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@VVector3@@@@8		; VectorClass<Vector3>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@VVector3@@@@8		; VectorClass<Vector3>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@VVector3@@@@6B@		; VectorClass<Vector3>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$VectorClass@H@@6B@			; VectorClass<int>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$DynamicVectorClass@PAVDASpawnPointClass@@@@6B@ ; DynamicVectorClass<DASpawnPointClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAVDASpawnPointClass@@@@@8 ; DynamicVectorClass<DASpawnPointClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAVDASpawnPointClass@@@@8 ; DynamicVectorClass<DASpawnPointClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAVDASpawnPointClass@@@@8 ; DynamicVectorClass<DASpawnPointClass *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAVDASpawnPointClass@@@@8 ; DynamicVectorClass<DASpawnPointClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAVDASpawnPointClass@@@@8 ; VectorClass<DASpawnPointClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAVDASpawnPointClass@@@@@8 ; VectorClass<DASpawnPointClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAVDASpawnPointClass@@@@8	; VectorClass<DASpawnPointClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAVDASpawnPointClass@@@@8	; VectorClass<DASpawnPointClass *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAVDASpawnPointClass@@@@6B@	; VectorClass<DASpawnPointClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R4DANodeManagerClass@@6B@			; DANodeManagerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDANodeManagerClass@@@8			; DANodeManagerClass `RTTI Type Descriptor'
PUBLIC	??_R3DANodeManagerClass@@8			; DANodeManagerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DANodeManagerClass@@8			; DANodeManagerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DANodeManagerClass@@8		; DANodeManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$DASingleton@VDANodeManagerClass@@@@8 ; DASingleton<DANodeManagerClass>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$DASingleton@VDANodeManagerClass@@@@@8	; DASingleton<DANodeManagerClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$DASingleton@VDANodeManagerClass@@@@8	; DASingleton<DANodeManagerClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DASingleton@VDANodeManagerClass@@@@8	; DASingleton<DANodeManagerClass>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DASingleton@VDANodeManagerClass@@@@8 ; DASingleton<DANodeManagerClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DABaseNodeClass@@6B@			; DABaseNodeClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDABaseNodeClass@@@8			; DABaseNodeClass `RTTI Type Descriptor'
PUBLIC	??_R3DABaseNodeClass@@8				; DABaseNodeClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DABaseNodeClass@@8				; DABaseNodeClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DABaseNodeClass@@8		; DABaseNodeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DASpawnNodeClass@@6B@			; DASpawnNodeClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDASpawnNodeClass@@@8			; DASpawnNodeClass `RTTI Type Descriptor'
PUBLIC	??_R3DASpawnNodeClass@@8			; DASpawnNodeClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DASpawnNodeClass@@8			; DASpawnNodeClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DASpawnNodeClass@@8		; DASpawnNodeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@PAVDABaseNodeClass@@@@6B@ ; DynamicVectorClass<DABaseNodeClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAVDABaseNodeClass@@@@@8 ; DynamicVectorClass<DABaseNodeClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAVDABaseNodeClass@@@@8 ; DynamicVectorClass<DABaseNodeClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAVDABaseNodeClass@@@@8 ; DynamicVectorClass<DABaseNodeClass *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAVDABaseNodeClass@@@@8 ; DynamicVectorClass<DABaseNodeClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAVDABaseNodeClass@@@@8 ; VectorClass<DABaseNodeClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAVDABaseNodeClass@@@@@8	; VectorClass<DABaseNodeClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAVDABaseNodeClass@@@@8	; VectorClass<DABaseNodeClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAVDABaseNodeClass@@@@8	; VectorClass<DABaseNodeClass *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAVDABaseNodeClass@@@@6B@	; VectorClass<DABaseNodeClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R4DAGameObjObserverClass@@6B@		; DAGameObjObserverClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAGameObjObserverClass@@@8		; DAGameObjObserverClass `RTTI Type Descriptor'
PUBLIC	??_R3DAGameObjObserverClass@@8			; DAGameObjObserverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAGameObjObserverClass@@8			; DAGameObjObserverClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAGameObjObserverClass@@8		; DAGameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAVehicleSpawnPointClass@@6B@		; DAVehicleSpawnPointClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAVehicleSpawnPointClass@@@8		; DAVehicleSpawnPointClass `RTTI Type Descriptor'
PUBLIC	??_R3DAVehicleSpawnPointClass@@8		; DAVehicleSpawnPointClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAVehicleSpawnPointClass@@8		; DAVehicleSpawnPointClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAVehicleSpawnPointClass@@8	; DAVehicleSpawnPointClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAVehicleSpawnManagerClass@@6B@		; DAVehicleSpawnManagerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAVehicleSpawnManagerClass@@@8		; DAVehicleSpawnManagerClass `RTTI Type Descriptor'
PUBLIC	??_R3DAVehicleSpawnManagerClass@@8		; DAVehicleSpawnManagerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAVehicleSpawnManagerClass@@8		; DAVehicleSpawnManagerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAVehicleSpawnManagerClass@@8	; DAVehicleSpawnManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 ; DASingleton<DAVehicleSpawnManagerClass>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$DASingleton@VDAVehicleSpawnManagerClass@@@@@8 ; DASingleton<DAVehicleSpawnManagerClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 ; DASingleton<DAVehicleSpawnManagerClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 ; DASingleton<DAVehicleSpawnManagerClass>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 ; DASingleton<DAVehicleSpawnManagerClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DAVehicleAirDropPointClass@@6B@		; DAVehicleAirDropPointClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAVehicleAirDropPointClass@@@8		; DAVehicleAirDropPointClass `RTTI Type Descriptor'
PUBLIC	??_R3DAVehicleAirDropPointClass@@8		; DAVehicleAirDropPointClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAVehicleAirDropPointClass@@8		; DAVehicleAirDropPointClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAVehicleAirDropPointClass@@8	; DAVehicleAirDropPointClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@@8 ; DynamicVectorClass<DAVehicleSpawnPointClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8 ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8 ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8 ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8 ; VectorClass<DAVehicleSpawnPointClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAVDAVehicleSpawnPointClass@@@@@8 ; VectorClass<DAVehicleSpawnPointClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8 ; VectorClass<DAVehicleSpawnPointClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8 ; VectorClass<DAVehicleSpawnPointClass *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ ; VectorClass<DAVehicleSpawnPointClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R4DATeleporterClass@@6B@			; DATeleporterClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDATeleporterClass@@@8			; DATeleporterClass `RTTI Type Descriptor'
PUBLIC	??_R3DATeleporterClass@@8			; DATeleporterClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DATeleporterClass@@8			; DATeleporterClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DATeleporterClass@@8		; DATeleporterClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@PAVDATeleporterClass@@@@6B@ ; DynamicVectorClass<DATeleporterClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAVDATeleporterClass@@@@@8 ; DynamicVectorClass<DATeleporterClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAVDATeleporterClass@@@@8 ; DynamicVectorClass<DATeleporterClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAVDATeleporterClass@@@@8 ; DynamicVectorClass<DATeleporterClass *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAVDATeleporterClass@@@@8 ; DynamicVectorClass<DATeleporterClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAVDATeleporterClass@@@@8 ; VectorClass<DATeleporterClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAVDATeleporterClass@@@@@8 ; VectorClass<DATeleporterClass *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAVDATeleporterClass@@@@8	; VectorClass<DATeleporterClass *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAVDATeleporterClass@@@@8	; VectorClass<DATeleporterClass *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAVDATeleporterClass@@@@6B@	; VectorClass<DATeleporterClass *>::`RTTI Complete Object Locator'
PUBLIC	??_R4DAControlNodeClass@@6B@			; DAControlNodeClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDAControlNodeClass@@@8			; DAControlNodeClass `RTTI Type Descriptor'
PUBLIC	??_R3DAControlNodeClass@@8			; DAControlNodeClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DAControlNodeClass@@8			; DAControlNodeClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DAControlNodeClass@@8		; DAControlNodeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DATiberiumNodeClass@@6B@			; DATiberiumNodeClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDATiberiumNodeClass@@@8			; DATiberiumNodeClass `RTTI Type Descriptor'
PUBLIC	??_R3DATiberiumNodeClass@@8			; DATiberiumNodeClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DATiberiumNodeClass@@8			; DATiberiumNodeClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DATiberiumNodeClass@@8		; DATiberiumNodeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DADominationManagerClass@@6BDAEventClass@@@ ; DADominationManagerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDADominationManagerClass@@@8		; DADominationManagerClass `RTTI Type Descriptor'
PUBLIC	??_R3DADominationManagerClass@@8		; DADominationManagerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DADominationManagerClass@@8		; DADominationManagerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DADominationManagerClass@@8	; DADominationManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@DAGameModeClass@@8			; DAGameModeClass::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4DADominationManagerClass@@6BDAGameModeClass@@@ ; DADominationManagerClass::`RTTI Complete Object Locator'
PUBLIC	??_R4?$DAGameModeRegistrant@VDADominationManagerClass@@@@6B@ ; DAGameModeRegistrant<DADominationManagerClass>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DAGameModeRegistrant@VDADominationManagerClass@@@@@8 ; DAGameModeRegistrant<DADominationManagerClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$DAGameModeRegistrant@VDADominationManagerClass@@@@8 ; DAGameModeRegistrant<DADominationManagerClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DAGameModeRegistrant@VDADominationManagerClass@@@@8 ; DAGameModeRegistrant<DADominationManagerClass>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DAGameModeRegistrant@VDADominationManagerClass@@@@8 ; DAGameModeRegistrant<DADominationManagerClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@02081cea
PUBLIC	__real@3f79999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41200000
PUBLIC	__real@437f0000
PUBLIC	__real@44000000
PUBLIC	__real@447a0000
PUBLIC	__real@44800000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___wassert:PROC
EXTRN	__imp__atof:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__atoi:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__vsnprintf:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	?Random_Float@WWMath@@SAMXZ:PROC		; WWMath::Random_Float
EXTRN	??0ScriptImpClass@@QAE@XZ:PROC			; ScriptImpClass::ScriptImpClass
EXTRN	??1ScriptImpClass@@UAE@XZ:PROC			; ScriptImpClass::~ScriptImpClass
EXTRN	?Get_Name@ScriptImpClass@@UAEPBDXZ:PROC		; ScriptImpClass::Get_Name
EXTRN	?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z:PROC ; ScriptImpClass::Set_Parameters_String
EXTRN	?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z:PROC ; ScriptImpClass::Get_Parameters_String
EXTRN	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z:PROC	; ScriptImpClass::Get_Parameter
EXTRN	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z:PROC ; ScriptImpClass::Get_Int_Parameter
EXTRN	?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z:PROC ; ScriptImpClass::Attach
EXTRN	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z:PROC ; ScriptImpClass::Detach
EXTRN	?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z:PROC ; ScriptImpClass::Save
EXTRN	?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z:PROC ; ScriptImpClass::Load
EXTRN	??1ScriptFactory@@UAE@XZ:PROC			; ScriptFactory::~ScriptFactory
EXTRN	?Console_Input@@YAXPBD@Z:PROC			; Console_Input
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	?Get_Hash_Value@?$HashTemplateKeyClass@I@@SAIABI@Z:PROC ; HashTemplateKeyClass<unsigned int>::Get_Hash_Value
EXTRN	__imp_?Format@StringClass@@QAAHPBDZZ:PROC
EXTRN	__imp_?Get_String@StringClass@@AAEXH_N@Z:PROC
EXTRN	__imp_?Resize@StringClass@@AAEXH@Z:PROC
EXTRN	__imp_?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC
EXTRN	__imp_?Free_String@StringClass@@AAEXXZ:PROC
EXTRN	__imp_?Free_String@WideStringClass@@AAEXXZ:PROC
EXTRN	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z:PROC ; INIClass::Find_Entry
EXTRN	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z:PROC ; INIClass::Find_Section
EXTRN	??1INIClass@@UAE@XZ:PROC			; INIClass::~INIClass
EXTRN	?Get_Definition_ID@@YAHPBD@Z:PROC		; Get_Definition_ID
EXTRN	?Find_Named_Definition@@YAPAVDefinitionClass@@PBD@Z:PROC ; Find_Named_Definition
EXTRN	?Find_Definition@@YAPAVDefinitionClass@@K@Z:PROC ; Find_Definition
EXTRN	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z:PROC ; Matrix3D::Set
EXTRN	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z:PROC ; Matrix3D::Set
EXTRN	?Get_Player_ID@@YAJPAVScriptableGameObj@@@Z:PROC ; Get_Player_ID
EXTRN	?Find_Player@@YAPAVcPlayer@@H@Z:PROC		; Find_Player
EXTRN	?Set@Matrix3@@QAEXABVQuaternion@@@Z:PROC	; Matrix3::Set
EXTRN	?Get@SysTimeClass@@QAEIXZ:PROC			; SysTimeClass::Get
EXTRN	?Get_Entry@GenericDataSafeClass@@SAPAVDataSafeEntryClass@@VDataSafeHandleClass@@@Z:PROC ; GenericDataSafeClass::Get_Entry
EXTRN	?Shuffle@GenericDataSafeClass@@KAX_N@Z:PROC	; GenericDataSafeClass::Shuffle
EXTRN	?Decrypt@GenericDataSafeClass@@KAXPAXHK_N@Z:PROC ; GenericDataSafeClass::Decrypt
EXTRN	?Mem_Copy_Encrypt@GenericDataSafeClass@@KAXPAX0H_N@Z:PROC ; GenericDataSafeClass::Mem_Copy_Encrypt
EXTRN	?Mem_Copy_Decrypt@GenericDataSafeClass@@KAXPAX0H_N@Z:PROC ; GenericDataSafeClass::Mem_Copy_Decrypt
EXTRN	?Say_Security_Fault@GenericDataSafeClass@@KAXXZ:PROC ; GenericDataSafeClass::Say_Security_Fault
EXTRN	??1ReferencerClass@@UAE@XZ:PROC			; ReferencerClass::~ReferencerClass
EXTRN	?On_Post_Load@ReferencerClass@@UAEXXZ:PROC	; ReferencerClass::On_Post_Load
EXTRN	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z:PROC ; ReferencerClass::operator=
EXTRN	??4ReferencerClass@@QAEAAV0@ABV0@@Z:PROC	; ReferencerClass::operator=
EXTRN	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ:PROC ; ReferencerClass::operator ScriptableGameObj *
EXTRN	?Set@LineSegClass@@QAEXABV1@ABVMatrix3D@@@Z:PROC ; LineSegClass::Set
EXTRN	?Get_Definition@PhysicalGameObj@@QBEABVPhysicalGameObjDef@@XZ:PROC ; PhysicalGameObj::Get_Definition
EXTRN	?The_Game@@YAPAVcGameData@@XZ:PROC		; The_Game
EXTRN	?Get_Wide_Team_Name@@YAPB_WH@Z:PROC		; Get_Wide_Team_Name
EXTRN	?Find_Definition@PurchaseSettingsDefClass@@SAPAV1@W4TYPE@1@W4TEAM@1@@Z:PROC ; PurchaseSettingsDefClass::Find_Definition
EXTRN	?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::Detach
EXTRN	?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::Destroyed
EXTRN	??1JFW_Key_Hook_Base@@UAE@XZ:PROC		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
EXTRN	?Detach@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z:PROC ; MultiKeyHookScriptImpClass::Detach
EXTRN	?Destroyed@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z:PROC ; MultiKeyHookScriptImpClass::Destroyed
EXTRN	??_E?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z:PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vector deleting destructor'
EXTRN	?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Object_Created_Hook_Base::Detach
EXTRN	?Created@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Object_Created_Hook_Base::Created
EXTRN	??1JFW_Object_Created_Hook_Base@@UAE@XZ:PROC	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
EXTRN	__imp_?Get_First@DefinitionMgrClass@@SAPAVDefinitionClass@@IW4ID_TYPE@1@@Z:PROC
EXTRN	__imp_?Get_Next@DefinitionMgrClass@@SAPAVDefinitionClass@@PAV2@IW4ID_TYPE@1@@Z:PROC
EXTRN	?Set_Kills@cTeam@@QAEXH@Z:PROC			; cTeam::Set_Kills
EXTRN	?Set_Deaths@cTeam@@QAEXH@Z:PROC			; cTeam::Set_Deaths
EXTRN	?Set_Score@cTeam@@QAEXM@Z:PROC			; cTeam::Set_Score
EXTRN	?Find_Team@@YAPAVcTeam@@H@Z:PROC		; Find_Team
EXTRN	?Give_Credits_Team@@YAXHM@Z:PROC		; Give_Credits_Team
EXTRN	?Host_Message@DA@@SAXPBDZZ:PROC			; DA::Host_Message
EXTRN	?Private_Admin_Message@DA@@SAXHPBDZZ:PROC	; DA::Private_Admin_Message
EXTRN	?Private_Color_Message@DA@@SAXHIIIPBDZZ:PROC	; DA::Private_Color_Message
EXTRN	?Private_Color_Message_With_Team_Color@DA@@SAXHHPBDZZ:PROC ; DA::Private_Color_Message_With_Team_Color
EXTRN	?Create_2D_Sound_Team@DA@@SAXHPBD@Z:PROC	; DA::Create_2D_Sound_Team
EXTRN	?Register_Event@DAEventManager@@SAXPAVDAEventClass@@W4Type@DAEvent@@H@Z:PROC ; DAEventManager::Register_Event
EXTRN	?Unregister_Event@DAEventManager@@SAXPAVDAEventClass@@W4Type@DAEvent@@@Z:PROC ; DAEventManager::Unregister_Event
EXTRN	?Clear_Events@DAEventManager@@SAXPAVDAEventClass@@@Z:PROC ; DAEventManager::Clear_Events
EXTRN	?Register_Object_Event@DAEventManager@@SAXPAVDAEventClass@@W4Type@DAObjectEvent@@W4ObjectType@4@H@Z:PROC ; DAEventManager::Register_Object_Event
EXTRN	?Unregister_Object_Event@DAEventManager@@SAXPAVDAEventClass@@W4Type@DAObjectEvent@@@Z:PROC ; DAEventManager::Unregister_Object_Event
EXTRN	?Clear_Object_Events@DAEventManager@@SAXPAVDAEventClass@@@Z:PROC ; DAEventManager::Clear_Object_Events
EXTRN	?Start_Timer@DAEventManager@@SAXPAVDAEventClass@@HM_NI@Z:PROC ; DAEventManager::Start_Timer
EXTRN	?Stop_Timer@DAEventManager@@SAXPAVDAEventClass@@HI@Z:PROC ; DAEventManager::Stop_Timer
EXTRN	?Is_Timer@DAEventManager@@SA_NPAVDAEventClass@@HI@Z:PROC ; DAEventManager::Is_Timer
EXTRN	?Clear_Timers@DAEventManager@@SAXPAVDAEventClass@@@Z:PROC ; DAEventManager::Clear_Timers
EXTRN	?Register_Chat_Command@DAEventClass@@QAEXP81@AE_NPAVcPlayer@@ABVDATokenClass@@W4TextMessageEnum@@@ZPBDHW4Level@DAAccessLevel@@W4Type@DAChatType@@@Z:PROC ; DAEventClass::Register_Chat_Command
EXTRN	?Clear_Chat_Commands@DAEventClass@@QAEXXZ:PROC	; DAEventClass::Clear_Chat_Commands
EXTRN	?Clear_Key_Hooks@DAEventClass@@QAEXXZ:PROC	; DAEventClass::Clear_Key_Hooks
EXTRN	??0DAGameModeFactoryClass@@QAE@PBD00@Z:PROC	; DAGameModeFactoryClass::DAGameModeFactoryClass
EXTRN	??_EDAGameModeFactoryClass@@UAEPAXI@Z:PROC	; DAGameModeFactoryClass::`vector deleting destructor'
EXTRN	??_EDAGameModeClass@@UAEPAXI@Z:PROC		; DAGameModeClass::`vector deleting destructor'
EXTRN	?Find_Data@DAPlayerClass@@QAEPAVDAPlayerDataClass@@PBVDAPlayerDataFactoryClass@@@Z:PROC ; DAPlayerClass::Find_Data
EXTRN	??_E?$VectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z:PROC ; VectorClass<DAPlayerObserverClass *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DAPlayerObserverClass *>::`vector deleting destructor'
EXTRN	??_E?$VectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z:PROC ; VectorClass<DAPlayerDataClass *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DAPlayerDataClass *>::`vector deleting destructor'
EXTRN	??_E?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z:PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`vector deleting destructor'
EXTRN	?Clear_Timers@DAPlayerObserverClass@@QAEXXZ:PROC ; DAPlayerObserverClass::Clear_Timers
EXTRN	?Clear_Chat_Commands@DAPlayerObserverClass@@QAEXXZ:PROC ; DAPlayerObserverClass::Clear_Chat_Commands
EXTRN	?Clear_Key_Hooks@DAPlayerObserverClass@@QAEXXZ:PROC ; DAPlayerObserverClass::Clear_Key_Hooks
EXTRN	??_E?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z:PROC ; VectorClass<DAPlayerObserverTimerStruct *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`vector deleting destructor'
EXTRN	??_E?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z:PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`vector deleting destructor'
EXTRN	??_E?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z:PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`vector deleting destructor'
EXTRN	?Add_Data_Factory@DAPlayerManager@@SAXPAVDAPlayerDataFactoryClass@@@Z:PROC ; DAPlayerManager::Add_Data_Factory
EXTRN	?Remove_Data_Factory@DAPlayerManager@@SAXPAVDAPlayerDataFactoryClass@@@Z:PROC ; DAPlayerManager::Remove_Data_Factory
EXTRN	?Set_Disable_Team_Kill_Counter@DAPlayerManager@@SAX_N@Z:PROC ; DAPlayerManager::Set_Disable_Team_Kill_Counter
EXTRN	?Set_Disable_Team_Death_Counter@DAPlayerManager@@SAX_N@Z:PROC ; DAPlayerManager::Set_Disable_Team_Death_Counter
EXTRN	?Set_Disable_Team_Score_Counter@DAPlayerManager@@SAX_N@Z:PROC ; DAPlayerManager::Set_Disable_Team_Score_Counter
EXTRN	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ:PROC ; DASettingsClass::Get_INI
EXTRN	?Get_Float@DASettingsClass@@QBEMPBDM@Z:PROC	; DASettingsClass::Get_Float
EXTRN	?Get_Float@DASettingsClass@@QBEMPBD0M@Z:PROC	; DASettingsClass::Get_Float
EXTRN	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD1@Z:PROC ; DASettingsClass::Get_String
EXTRN	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD11@Z:PROC ; DASettingsClass::Get_String
EXTRN	?Get_Settings@DASettingsManager@@SAPBVDASettingsClass@@H@Z:PROC ; DASettingsManager::Get_Settings
EXTRN	?Get_Settings_Count@DASettingsManager@@SAHXZ:PROC ; DASettingsManager::Get_Settings_Count
EXTRN	?Clear_Spawn_List_Find_New_Spawn@DASpawnPointClass@@QAEXXZ:PROC ; DASpawnPointClass::Clear_Spawn_List_Find_New_Spawn
EXTRN	?Init@DASpawnPointClass@@AAEXPBVINIClass@@ABVStringClass@@@Z:PROC ; DASpawnPointClass::Init
EXTRN	?Think@DASpawnPointClass@@EAEXXZ:PROC		; DASpawnPointClass::Think
EXTRN	?Check_Spawn_List@DASpawnPointClass@@AAEXXZ:PROC ; DASpawnPointClass::Check_Spawn_List
EXTRN	??_E?$VectorClass@VVector3@@@@UAEPAXI@Z:PROC	; VectorClass<Vector3>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@VVector3@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<Vector3>::`vector deleting destructor'
EXTRN	??_E?$VectorClass@H@@UAEPAXI@Z:PROC		; VectorClass<int>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@H@@UAEPAXI@Z:PROC	; DynamicVectorClass<int>::`vector deleting destructor'
EXTRN	?Init@DASpawnManagerClass@@QAEXPBVINIClass@@@Z:PROC ; DASpawnManagerClass::Init
EXTRN	?Vehicle_Purchase_Event@DASpawnManagerClass@@EAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z:PROC ; DASpawnManagerClass::Vehicle_Purchase_Event
EXTRN	?PowerUp_Purchase_Event@DASpawnManagerClass@@EAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z:PROC ; DASpawnManagerClass::PowerUp_Purchase_Event
EXTRN	?Suicide_Event@DASpawnManagerClass@@EAE_NPAVcPlayer@@@Z:PROC ; DASpawnManagerClass::Suicide_Event
EXTRN	?Chat_Command_Event@DASpawnManagerClass@@EAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z:PROC ; DASpawnManagerClass::Chat_Command_Event
EXTRN	?Timer_Expired@DASpawnManagerClass@@EAEXHI@Z:PROC ; DASpawnManagerClass::Timer_Expired
EXTRN	?Object_Created_Event@DASpawnManagerClass@@EAEXPAVScriptableGameObj@@@Z:PROC ; DASpawnManagerClass::Object_Created_Event
EXTRN	?Object_Destroyed_Event@DASpawnManagerClass@@EAEXPAVScriptableGameObj@@@Z:PROC ; DASpawnManagerClass::Object_Destroyed_Event
EXTRN	??_E?$VectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z:PROC ; VectorClass<DASpawnPointClass *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DASpawnPointClass *>::`vector deleting destructor'
EXTRN	?Init@DABaseNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z:PROC ; DABaseNodeClass::Init
EXTRN	?Think@DABaseNodeClass@@MAEXXZ:PROC		; DABaseNodeClass::Think
EXTRN	?Capture_Event@DASpawnNodeClass@@MAEXXZ:PROC	; DASpawnNodeClass::Capture_Event
EXTRN	?Contested_Event@DASpawnNodeClass@@MAEXXZ:PROC	; DASpawnNodeClass::Contested_Event
EXTRN	?Init@DASpawnNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z:PROC ; DASpawnNodeClass::Init
EXTRN	?Init@DANodeManagerClass@@QAEXPBVINIClass@@@Z:PROC ; DANodeManagerClass::Init
EXTRN	??_E?$VectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z:PROC ; VectorClass<DABaseNodeClass *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DABaseNodeClass *>::`vector deleting destructor'
EXTRN	?Owner@DAGameObjObserverClass@@EAEPAVScriptableGameObj@@XZ:PROC ; DAGameObjObserverClass::Owner
EXTRN	?Attach@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z:PROC ; DAGameObjObserverClass::Attach
EXTRN	?Detach@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z:PROC ; DAGameObjObserverClass::Detach
EXTRN	?Spawn_Vehicle@DAVehicleSpawnPointClass@@UAEXPBVVehicleGameObjDef@@PAVSoldierGameObj@@@Z:PROC ; DAVehicleSpawnPointClass::Spawn_Vehicle
EXTRN	?Set_Enabled@DAVehicleSpawnPointClass@@QAEX_N@Z:PROC ; DAVehicleSpawnPointClass::Set_Enabled
EXTRN	?Set_Team@DAVehicleSpawnPointClass@@QAEXH@Z:PROC ; DAVehicleSpawnPointClass::Set_Team
EXTRN	?Init@DAVehicleSpawnPointClass@@MAEXPBVINIClass@@ABVStringClass@@@Z:PROC ; DAVehicleSpawnPointClass::Init
EXTRN	?Spawn_Vehicle@DAVehicleAirDropPointClass@@UAEXPBVVehicleGameObjDef@@PAVSoldierGameObj@@@Z:PROC ; DAVehicleAirDropPointClass::Spawn_Vehicle
EXTRN	?Init@DAVehicleSpawnManagerClass@@QAEXPBVINIClass@@@Z:PROC ; DAVehicleSpawnManagerClass::Init
EXTRN	?Request_Vehicle_Event@DAVehicleSpawnManagerClass@@MAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z:PROC ; DAVehicleSpawnManagerClass::Request_Vehicle_Event
EXTRN	?Timer_Expired@DAVehicleSpawnManagerClass@@MAEXHI@Z:PROC ; DAVehicleSpawnManagerClass::Timer_Expired
EXTRN	??_E?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z:PROC ; VectorClass<DAVehicleSpawnPointClass *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`vector deleting destructor'
EXTRN	?Init@DATeleporterClass@@AAEXPBVINIClass@@ABVStringClass@@@Z:PROC ; DATeleporterClass::Init
EXTRN	?Entered@DATeleporterClass@@EAEXPAVScriptableGameObj@@0@Z:PROC ; DATeleporterClass::Entered
EXTRN	?Exited@DATeleporterClass@@EAEXPAVScriptableGameObj@@0@Z:PROC ; DATeleporterClass::Exited
EXTRN	??_E?$VectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z:PROC ; VectorClass<DATeleporterClass *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<DATeleporterClass *>::`vector deleting destructor'
EXTRN	??_EDAControlNodeClass@@UAEPAXI@Z:PROC		; DAControlNodeClass::`vector deleting destructor'
EXTRN	??_EDATiberiumNodeClass@@UAEPAXI@Z:PROC		; DATiberiumNodeClass::`vector deleting destructor'
EXTRN	??_EDADominationManagerClass@@EAEPAXI@Z:PROC	; DADominationManagerClass::`vector deleting destructor'
EXTRN	??_E?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAXI@Z:PROC ; DAGameModeRegistrant<DADominationManagerClass>::`vector deleting destructor'
EXTRN	?Clean_Level@DALevelCleaner@@SAXXZ:PROC		; DALevelCleaner::Clean_Level
EXTRN	?Load_Blockers@DALevelCleaner@@SAXPBVINIClass@@@Z:PROC ; DALevelCleaner::Load_Blockers
EXTRN	?Get_Definition@TeamPurchaseSettingsDefClass@@SAPAV1@W4TEAM@1@@Z:PROC ; TeamPurchaseSettingsDefClass::Get_Definition
EXTRN	__CIatan2:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_asin_precise:PROC
EXTRN	__libm_sse2_atan_precise:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__libm_sse2_tan_precise:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAcosTable
EXTRN	?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAsinTable
EXTRN	?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastSinTable
EXTRN	?Commands@@3PAUScriptCommands@@A:DWORD		; Commands
EXTRN	__imp_?m_EmptyString@StringClass@@0AAPADA:DWORD
EXTRN	__imp_?m_NullChar@StringClass@@0AADA:DWORD
EXTRN	?SystemTime@SysTimeClass@@2AAV1@A:DWORD		; SysTimeClass::SystemTime
EXTRN	?SimpleKey@GenericDataSafeClass@@1AAKA:DWORD	; GenericDataSafeClass::SimpleKey
EXTRN	?HandleKey@GenericDataSafeClass@@1AAKA:DWORD	; GenericDataSafeClass::HandleKey
EXTRN	?NumLists@GenericDataSafeClass@@1AAHA:DWORD	; GenericDataSafeClass::NumLists
EXTRN	?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A:DWORD ; GenericDataSafeClass::Safe
EXTRN	?Checksum@GenericDataSafeClass@@1AAKA:DWORD	; GenericDataSafeClass::Checksum
EXTRN	?SecurityCheckDelay@GenericDataSafeClass@@1AAKA:DWORD ; GenericDataSafeClass::SecurityCheckDelay
EXTRN	?SentinelOne@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A:DWORD ; GenericDataSafeClass::SentinelOne
EXTRN	?SentinelTwo@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A:DWORD ; GenericDataSafeClass::SentinelTwo
EXTRN	?CRCErrors@GenericDataSafeClass@@1AAHA:DWORD	; GenericDataSafeClass::CRCErrors
EXTRN	?ReturnList@?$DataSafeClass@H@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A:DWORD ; DataSafeClass<int>::ReturnList
EXTRN	?ReturnIndex@?$DataSafeClass@H@@0AAHA:DWORD	; DataSafeClass<int>::ReturnIndex
EXTRN	?MessagePrefix@DA@@0VStringClass@@A:DWORD	; DA::MessagePrefix
EXTRN	?ConsoleFunctions@DA@@0V?$DynamicVectorClass@PAVConsoleFunctionClass@@@@A:BYTE ; DA::ConsoleFunctions
EXTRN	?Instance@?$DASingleton@VDASpawnManagerClass@@@@0PAVDASpawnManagerClass@@A:DWORD ; DASingleton<DASpawnManagerClass>::Instance
EXTRN	?Instance@?$DASingleton@VDANodeManagerClass@@@@0PAVDANodeManagerClass@@A:DWORD ; DASingleton<DANodeManagerClass>::Instance
EXTRN	?Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@0PAVDAVehicleSpawnManagerClass@@A:DWORD ; DASingleton<DAVehicleSpawnManagerClass>::Instance
EXTRN	?Instance@?$DASingleton@VDATeleporterManagerClass@@@@0PAVDATeleporterManagerClass@@A:DWORD ; DASingleton<DATeleporterManagerClass>::Instance
EXTRN	__fltused:DWORD
;	COMDAT ?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA
_BSS	SEGMENT
?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA DB 01H DUP (?) ; `GenericDataSafeClass::Security_Check'::`2'::_checking
_BSS	ENDS
;	COMDAT ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA
_BSS	SEGMENT
?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA DD 01H DUP (?) ; `GenericDataSafeClass::Security_Check'::`2'::_calls
_BSS	ENDS
_BSS	SEGMENT
?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A DB 014H DUP (?) ; DADominationManagerClassRegistrant
_BSS	ENDS
;	COMDAT ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A
_BSS	SEGMENT
?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A DB 014H DUP (?) ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
_BSS	ENDS
;	COMDAT ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
_BSS	SEGMENT
??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51 DD 01H DUP (?) ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`local static guard'
_BSS	ENDS
;	COMDAT ?oh_dear@?7???R?$SafeDataClass@H@@QBEAAHXZ@4HA
_BSS	SEGMENT
?oh_dear@?7???R?$SafeDataClass@H@@QBEAAHXZ@4HA DD 01H DUP (?) ; `SafeDataClass<int>::operator()'::`8'::oh_dear
_BSS	ENDS
CRT$XCU	SEGMENT
_DADominationManagerClassRegistrant$initializer$ DD FLAT:??__EDADominationManagerClassRegistrant@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f79999a
CONST	SEGMENT
__real@3f79999a DD 03f79999ar			; 0.975
CONST	ENDS
;	COMDAT __real@02081cea
CONST	SEGMENT
__real@02081cea DD 002081cear			; 1e-037
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DAGameModeRegistrant@VDADominationManagerClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DAGameModeRegistrant@VDADominationManagerClass@@@@8 DD FLAT:??_R0?AV?$DAGameModeRegistrant@VDADominationManagerClass@@@@@8 ; DAGameModeRegistrant<DADominationManagerClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DAGameModeRegistrant@VDADominationManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DAGameModeRegistrant@VDADominationManagerClass@@@@8
rdata$r	SEGMENT
??_R2?$DAGameModeRegistrant@VDADominationManagerClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DAGameModeRegistrant@VDADominationManagerClass@@@@8 ; DAGameModeRegistrant<DADominationManagerClass>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAGameModeFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DAGameModeRegistrant@VDADominationManagerClass@@@@8
rdata$r	SEGMENT
??_R3?$DAGameModeRegistrant@VDADominationManagerClass@@@@8 DD 00H ; DAGameModeRegistrant<DADominationManagerClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DAGameModeRegistrant@VDADominationManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DAGameModeRegistrant@VDADominationManagerClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DAGameModeRegistrant@VDADominationManagerClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DAGameModeRegistrant<DADominationManagerClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DAGameModeRegistrant@VDADominationManagerClass@@@@'
	DB	00H
_DATA	ENDS
;	COMDAT ??_R4?$DAGameModeRegistrant@VDADominationManagerClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DAGameModeRegistrant@VDADominationManagerClass@@@@6B@ DD 00H ; DAGameModeRegistrant<DADominationManagerClass>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DAGameModeRegistrant@VDADominationManagerClass@@@@@8
	DD	FLAT:??_R3?$DAGameModeRegistrant@VDADominationManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R4DADominationManagerClass@@6BDAGameModeClass@@@
rdata$r	SEGMENT
??_R4DADominationManagerClass@@6BDAGameModeClass@@@ DD 00H ; DADominationManagerClass::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVDADominationManagerClass@@@8
	DD	FLAT:??_R3DADominationManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@DAGameModeClass@@8
rdata$r	SEGMENT
??_R13?0A@EA@DAGameModeClass@@8 DD FLAT:??_R0?AVDAGameModeClass@@@8 ; DAGameModeClass::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAGameModeClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DADominationManagerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DADominationManagerClass@@8 DD FLAT:??_R0?AVDADominationManagerClass@@@8 ; DADominationManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DADominationManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DADominationManagerClass@@8
rdata$r	SEGMENT
??_R2DADominationManagerClass@@8 DD FLAT:??_R1A@?0A@EA@DADominationManagerClass@@8 ; DADominationManagerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
	DD	FLAT:??_R13?0A@EA@DAGameModeClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DADominationManagerClass@@8
rdata$r	SEGMENT
??_R3DADominationManagerClass@@8 DD 00H			; DADominationManagerClass::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2DADominationManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDADominationManagerClass@@@8
_DATA	SEGMENT
??_R0?AVDADominationManagerClass@@@8 DD FLAT:??_7type_info@@6B@ ; DADominationManagerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDADominationManagerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DADominationManagerClass@@6BDAEventClass@@@
rdata$r	SEGMENT
??_R4DADominationManagerClass@@6BDAEventClass@@@ DD 00H	; DADominationManagerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDADominationManagerClass@@@8
	DD	FLAT:??_R3DADominationManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DATiberiumNodeClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DATiberiumNodeClass@@8 DD FLAT:??_R0?AVDATiberiumNodeClass@@@8 ; DATiberiumNodeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DATiberiumNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DATiberiumNodeClass@@8
rdata$r	SEGMENT
??_R2DATiberiumNodeClass@@8 DD FLAT:??_R1A@?0A@EA@DATiberiumNodeClass@@8 ; DATiberiumNodeClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DABaseNodeClass@@8
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DATiberiumNodeClass@@8
rdata$r	SEGMENT
??_R3DATiberiumNodeClass@@8 DD 00H			; DATiberiumNodeClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2DATiberiumNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDATiberiumNodeClass@@@8
_DATA	SEGMENT
??_R0?AVDATiberiumNodeClass@@@8 DD FLAT:??_7type_info@@6B@ ; DATiberiumNodeClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDATiberiumNodeClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DATiberiumNodeClass@@6B@
rdata$r	SEGMENT
??_R4DATiberiumNodeClass@@6B@ DD 00H			; DATiberiumNodeClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDATiberiumNodeClass@@@8
	DD	FLAT:??_R3DATiberiumNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAControlNodeClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAControlNodeClass@@8 DD FLAT:??_R0?AVDAControlNodeClass@@@8 ; DAControlNodeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAControlNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAControlNodeClass@@8
rdata$r	SEGMENT
??_R2DAControlNodeClass@@8 DD FLAT:??_R1A@?0A@EA@DAControlNodeClass@@8 ; DAControlNodeClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DASpawnNodeClass@@8
	DD	FLAT:??_R1A@?0A@EA@DABaseNodeClass@@8
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DAControlNodeClass@@8
rdata$r	SEGMENT
??_R3DAControlNodeClass@@8 DD 00H			; DAControlNodeClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2DAControlNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAControlNodeClass@@@8
_DATA	SEGMENT
??_R0?AVDAControlNodeClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAControlNodeClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAControlNodeClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAControlNodeClass@@6B@
rdata$r	SEGMENT
??_R4DAControlNodeClass@@6B@ DD 00H			; DAControlNodeClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAControlNodeClass@@@8
	DD	FLAT:??_R3DAControlNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAVDATeleporterClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAVDATeleporterClass@@@@6B@ DD 00H	; VectorClass<DATeleporterClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAVDATeleporterClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAVDATeleporterClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAVDATeleporterClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAVDATeleporterClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDATeleporterClass@@@@8 ; VectorClass<DATeleporterClass *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAVDATeleporterClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAVDATeleporterClass@@@@8 DD 00H	; VectorClass<DATeleporterClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAVDATeleporterClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAVDATeleporterClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAVDATeleporterClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DATeleporterClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAVDATeleporterClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAVDATeleporterClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAVDATeleporterClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAVDATeleporterClass@@@@@8 ; VectorClass<DATeleporterClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAVDATeleporterClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAVDATeleporterClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAVDATeleporterClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAVDATeleporterClass@@@@@8 ; DynamicVectorClass<DATeleporterClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDATeleporterClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAVDATeleporterClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAVDATeleporterClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAVDATeleporterClass@@@@8 ; DynamicVectorClass<DATeleporterClass *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDATeleporterClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAVDATeleporterClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAVDATeleporterClass@@@@8 DD 00H ; DynamicVectorClass<DATeleporterClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAVDATeleporterClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAVDATeleporterClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAVDATeleporterClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DATeleporterClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAVDATeleporterClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAVDATeleporterClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAVDATeleporterClass@@@@6B@ DD 00H ; DynamicVectorClass<DATeleporterClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAVDATeleporterClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDATeleporterClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DATeleporterClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DATeleporterClass@@8 DD FLAT:??_R0?AVDATeleporterClass@@@8 ; DATeleporterClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DATeleporterClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DATeleporterClass@@8
rdata$r	SEGMENT
??_R2DATeleporterClass@@8 DD FLAT:??_R1A@?0A@EA@DATeleporterClass@@8 ; DATeleporterClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAGameObjObserverClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DATeleporterClass@@8
rdata$r	SEGMENT
??_R3DATeleporterClass@@8 DD 00H			; DATeleporterClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2DATeleporterClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDATeleporterClass@@@8
_DATA	SEGMENT
??_R0?AVDATeleporterClass@@@8 DD FLAT:??_7type_info@@6B@ ; DATeleporterClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDATeleporterClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DATeleporterClass@@6B@
rdata$r	SEGMENT
??_R4DATeleporterClass@@6B@ DD 00H			; DATeleporterClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDATeleporterClass@@@8
	DD	FLAT:??_R3DATeleporterClass@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ DD 00H ; VectorClass<DAVehicleSpawnPointClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAVDAVehicleSpawnPointClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8 ; VectorClass<DAVehicleSpawnPointClass *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8 DD 00H ; VectorClass<DAVehicleSpawnPointClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAVDAVehicleSpawnPointClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAVDAVehicleSpawnPointClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DAVehicleSpawnPointClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAVDAVehicleSpawnPointClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAVDAVehicleSpawnPointClass@@@@@8 ; VectorClass<DAVehicleSpawnPointClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@@8 ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8 ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8 DD 00H ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DAVehicleSpawnPointClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@'
	DB	00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ DD 00H ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAVehicleAirDropPointClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAVehicleAirDropPointClass@@8 DD FLAT:??_R0?AVDAVehicleAirDropPointClass@@@8 ; DAVehicleAirDropPointClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAVehicleAirDropPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAVehicleAirDropPointClass@@8
rdata$r	SEGMENT
??_R2DAVehicleAirDropPointClass@@8 DD FLAT:??_R1A@?0A@EA@DAVehicleAirDropPointClass@@8 ; DAVehicleAirDropPointClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAVehicleSpawnPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DAVehicleAirDropPointClass@@8
rdata$r	SEGMENT
??_R3DAVehicleAirDropPointClass@@8 DD 00H		; DAVehicleAirDropPointClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DAVehicleAirDropPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAVehicleAirDropPointClass@@@8
_DATA	SEGMENT
??_R0?AVDAVehicleAirDropPointClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAVehicleAirDropPointClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAVehicleAirDropPointClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAVehicleAirDropPointClass@@6B@
rdata$r	SEGMENT
??_R4DAVehicleAirDropPointClass@@6B@ DD 00H		; DAVehicleAirDropPointClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAVehicleAirDropPointClass@@@8
	DD	FLAT:??_R3DAVehicleAirDropPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DASingleton@VDAVehicleSpawnManagerClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 DD FLAT:??_R0?AV?$DASingleton@VDAVehicleSpawnManagerClass@@@@@8 ; DASingleton<DAVehicleSpawnManagerClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DASingleton@VDAVehicleSpawnManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DASingleton@VDAVehicleSpawnManagerClass@@@@8
rdata$r	SEGMENT
??_R2?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 ; DASingleton<DAVehicleSpawnManagerClass>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$DASingleton@VDAVehicleSpawnManagerClass@@@@8
rdata$r	SEGMENT
??_R3?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 DD 00H ; DASingleton<DAVehicleSpawnManagerClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$DASingleton@VDAVehicleSpawnManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DASingleton@VDAVehicleSpawnManagerClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DASingleton@VDAVehicleSpawnManagerClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DASingleton<DAVehicleSpawnManagerClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DASingleton@VDAVehicleSpawnManagerClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$DASingleton@VDAVehicleSpawnManagerClass@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$DASingleton@VDAVehicleSpawnManagerClass@@@@8 DD FLAT:??_R0?AV?$DASingleton@VDAVehicleSpawnManagerClass@@@@@8 ; DASingleton<DAVehicleSpawnManagerClass>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DASingleton@VDAVehicleSpawnManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAVehicleSpawnManagerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAVehicleSpawnManagerClass@@8 DD FLAT:??_R0?AVDAVehicleSpawnManagerClass@@@8 ; DAVehicleSpawnManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAVehicleSpawnManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAVehicleSpawnManagerClass@@8
rdata$r	SEGMENT
??_R2DAVehicleSpawnManagerClass@@8 DD FLAT:??_R1A@?0A@EA@DAVehicleSpawnManagerClass@@8 ; DAVehicleSpawnManagerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
	DD	FLAT:??_R13?0A@EA@?$DASingleton@VDAVehicleSpawnManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3DAVehicleSpawnManagerClass@@8
rdata$r	SEGMENT
??_R3DAVehicleSpawnManagerClass@@8 DD 00H		; DAVehicleSpawnManagerClass::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2DAVehicleSpawnManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAVehicleSpawnManagerClass@@@8
_DATA	SEGMENT
??_R0?AVDAVehicleSpawnManagerClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAVehicleSpawnManagerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAVehicleSpawnManagerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAVehicleSpawnManagerClass@@6B@
rdata$r	SEGMENT
??_R4DAVehicleSpawnManagerClass@@6B@ DD 00H		; DAVehicleSpawnManagerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAVehicleSpawnManagerClass@@@8
	DD	FLAT:??_R3DAVehicleSpawnManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAVehicleSpawnPointClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAVehicleSpawnPointClass@@8 DD FLAT:??_R0?AVDAVehicleSpawnPointClass@@@8 ; DAVehicleSpawnPointClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAVehicleSpawnPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAVehicleSpawnPointClass@@8
rdata$r	SEGMENT
??_R2DAVehicleSpawnPointClass@@8 DD FLAT:??_R1A@?0A@EA@DAVehicleSpawnPointClass@@8 ; DAVehicleSpawnPointClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DAVehicleSpawnPointClass@@8
rdata$r	SEGMENT
??_R3DAVehicleSpawnPointClass@@8 DD 00H			; DAVehicleSpawnPointClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DAVehicleSpawnPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAVehicleSpawnPointClass@@@8
_DATA	SEGMENT
??_R0?AVDAVehicleSpawnPointClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAVehicleSpawnPointClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAVehicleSpawnPointClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAVehicleSpawnPointClass@@6B@
rdata$r	SEGMENT
??_R4DAVehicleSpawnPointClass@@6B@ DD 00H		; DAVehicleSpawnPointClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAVehicleSpawnPointClass@@@8
	DD	FLAT:??_R3DAVehicleSpawnPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAGameObjObserverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAGameObjObserverClass@@8 DD FLAT:??_R0?AVDAGameObjObserverClass@@@8 ; DAGameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAGameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAGameObjObserverClass@@8
rdata$r	SEGMENT
??_R2DAGameObjObserverClass@@8 DD FLAT:??_R1A@?0A@EA@DAGameObjObserverClass@@8 ; DAGameObjObserverClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DAGameObjObserverClass@@8
rdata$r	SEGMENT
??_R3DAGameObjObserverClass@@8 DD 00H			; DAGameObjObserverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DAGameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAGameObjObserverClass@@@8
_DATA	SEGMENT
??_R0?AVDAGameObjObserverClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAGameObjObserverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAGameObjObserverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAGameObjObserverClass@@6B@
rdata$r	SEGMENT
??_R4DAGameObjObserverClass@@6B@ DD 00H			; DAGameObjObserverClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAGameObjObserverClass@@@8
	DD	FLAT:??_R3DAGameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAVDABaseNodeClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAVDABaseNodeClass@@@@6B@ DD 00H	; VectorClass<DABaseNodeClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAVDABaseNodeClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAVDABaseNodeClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAVDABaseNodeClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAVDABaseNodeClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDABaseNodeClass@@@@8 ; VectorClass<DABaseNodeClass *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAVDABaseNodeClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAVDABaseNodeClass@@@@8 DD 00H	; VectorClass<DABaseNodeClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAVDABaseNodeClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAVDABaseNodeClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAVDABaseNodeClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DABaseNodeClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAVDABaseNodeClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAVDABaseNodeClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAVDABaseNodeClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAVDABaseNodeClass@@@@@8 ; VectorClass<DABaseNodeClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAVDABaseNodeClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAVDABaseNodeClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAVDABaseNodeClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAVDABaseNodeClass@@@@@8 ; DynamicVectorClass<DABaseNodeClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDABaseNodeClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAVDABaseNodeClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAVDABaseNodeClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAVDABaseNodeClass@@@@8 ; DynamicVectorClass<DABaseNodeClass *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDABaseNodeClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAVDABaseNodeClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAVDABaseNodeClass@@@@8 DD 00H ; DynamicVectorClass<DABaseNodeClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAVDABaseNodeClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAVDABaseNodeClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAVDABaseNodeClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DABaseNodeClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAVDABaseNodeClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAVDABaseNodeClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAVDABaseNodeClass@@@@6B@ DD 00H ; DynamicVectorClass<DABaseNodeClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAVDABaseNodeClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDABaseNodeClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DASpawnNodeClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DASpawnNodeClass@@8 DD FLAT:??_R0?AVDASpawnNodeClass@@@8 ; DASpawnNodeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DASpawnNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DASpawnNodeClass@@8
rdata$r	SEGMENT
??_R2DASpawnNodeClass@@8 DD FLAT:??_R1A@?0A@EA@DASpawnNodeClass@@8 ; DASpawnNodeClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DABaseNodeClass@@8
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DASpawnNodeClass@@8
rdata$r	SEGMENT
??_R3DASpawnNodeClass@@8 DD 00H				; DASpawnNodeClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2DASpawnNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDASpawnNodeClass@@@8
_DATA	SEGMENT
??_R0?AVDASpawnNodeClass@@@8 DD FLAT:??_7type_info@@6B@	; DASpawnNodeClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDASpawnNodeClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DASpawnNodeClass@@6B@
rdata$r	SEGMENT
??_R4DASpawnNodeClass@@6B@ DD 00H			; DASpawnNodeClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDASpawnNodeClass@@@8
	DD	FLAT:??_R3DASpawnNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DABaseNodeClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DABaseNodeClass@@8 DD FLAT:??_R0?AVDABaseNodeClass@@@8 ; DABaseNodeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DABaseNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DABaseNodeClass@@8
rdata$r	SEGMENT
??_R2DABaseNodeClass@@8 DD FLAT:??_R1A@?0A@EA@DABaseNodeClass@@8 ; DABaseNodeClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DABaseNodeClass@@8
rdata$r	SEGMENT
??_R3DABaseNodeClass@@8 DD 00H				; DABaseNodeClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DABaseNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDABaseNodeClass@@@8
_DATA	SEGMENT
??_R0?AVDABaseNodeClass@@@8 DD FLAT:??_7type_info@@6B@	; DABaseNodeClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDABaseNodeClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DABaseNodeClass@@6B@
rdata$r	SEGMENT
??_R4DABaseNodeClass@@6B@ DD 00H			; DABaseNodeClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDABaseNodeClass@@@8
	DD	FLAT:??_R3DABaseNodeClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DASingleton@VDANodeManagerClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DASingleton@VDANodeManagerClass@@@@8 DD FLAT:??_R0?AV?$DASingleton@VDANodeManagerClass@@@@@8 ; DASingleton<DANodeManagerClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DASingleton@VDANodeManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DASingleton@VDANodeManagerClass@@@@8
rdata$r	SEGMENT
??_R2?$DASingleton@VDANodeManagerClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DASingleton@VDANodeManagerClass@@@@8 ; DASingleton<DANodeManagerClass>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$DASingleton@VDANodeManagerClass@@@@8
rdata$r	SEGMENT
??_R3?$DASingleton@VDANodeManagerClass@@@@8 DD 00H	; DASingleton<DANodeManagerClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$DASingleton@VDANodeManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DASingleton@VDANodeManagerClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DASingleton@VDANodeManagerClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DASingleton<DANodeManagerClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DASingleton@VDANodeManagerClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$DASingleton@VDANodeManagerClass@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$DASingleton@VDANodeManagerClass@@@@8 DD FLAT:??_R0?AV?$DASingleton@VDANodeManagerClass@@@@@8 ; DASingleton<DANodeManagerClass>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DASingleton@VDANodeManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DANodeManagerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DANodeManagerClass@@8 DD FLAT:??_R0?AVDANodeManagerClass@@@8 ; DANodeManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DANodeManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DANodeManagerClass@@8
rdata$r	SEGMENT
??_R2DANodeManagerClass@@8 DD FLAT:??_R1A@?0A@EA@DANodeManagerClass@@8 ; DANodeManagerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
	DD	FLAT:??_R13?0A@EA@?$DASingleton@VDANodeManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3DANodeManagerClass@@8
rdata$r	SEGMENT
??_R3DANodeManagerClass@@8 DD 00H			; DANodeManagerClass::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2DANodeManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDANodeManagerClass@@@8
_DATA	SEGMENT
??_R0?AVDANodeManagerClass@@@8 DD FLAT:??_7type_info@@6B@ ; DANodeManagerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDANodeManagerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DANodeManagerClass@@6B@
rdata$r	SEGMENT
??_R4DANodeManagerClass@@6B@ DD 00H			; DANodeManagerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDANodeManagerClass@@@8
	DD	FLAT:??_R3DANodeManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAVDASpawnPointClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAVDASpawnPointClass@@@@6B@ DD 00H	; VectorClass<DASpawnPointClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAVDASpawnPointClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAVDASpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAVDASpawnPointClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAVDASpawnPointClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDASpawnPointClass@@@@8 ; VectorClass<DASpawnPointClass *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAVDASpawnPointClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAVDASpawnPointClass@@@@8 DD 00H	; VectorClass<DASpawnPointClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAVDASpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAVDASpawnPointClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAVDASpawnPointClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DASpawnPointClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAVDASpawnPointClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAVDASpawnPointClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAVDASpawnPointClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAVDASpawnPointClass@@@@@8 ; VectorClass<DASpawnPointClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAVDASpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAVDASpawnPointClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAVDASpawnPointClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAVDASpawnPointClass@@@@@8 ; DynamicVectorClass<DASpawnPointClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDASpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAVDASpawnPointClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAVDASpawnPointClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAVDASpawnPointClass@@@@8 ; DynamicVectorClass<DASpawnPointClass *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDASpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAVDASpawnPointClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAVDASpawnPointClass@@@@8 DD 00H ; DynamicVectorClass<DASpawnPointClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAVDASpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAVDASpawnPointClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAVDASpawnPointClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DASpawnPointClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAVDASpawnPointClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAVDASpawnPointClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAVDASpawnPointClass@@@@6B@ DD 00H ; DynamicVectorClass<DASpawnPointClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAVDASpawnPointClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDASpawnPointClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@ DD 00H ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@8
	DD	FLAT:??_R3?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@H@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@H@@6B@ DD 00H			; VectorClass<int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@H@@@8
	DD	FLAT:??_R3?$VectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@VVector3@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@VVector3@@@@6B@ DD 00H		; VectorClass<Vector3>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@VVector3@@@@@8
	DD	FLAT:??_R3?$VectorClass@VVector3@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@VVector3@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@VVector3@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@VVector3@@@@8 ; VectorClass<Vector3>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@VVector3@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@VVector3@@@@8 DD 00H			; VectorClass<Vector3>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@VVector3@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@VVector3@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@VVector3@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<Vector3> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@VVector3@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@VVector3@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@VVector3@@@@8 DD FLAT:??_R0?AV?$VectorClass@VVector3@@@@@8 ; VectorClass<Vector3>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@VVector3@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@VVector3@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@VVector3@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@VVector3@@@@@8 ; DynamicVectorClass<Vector3>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@VVector3@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@VVector3@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@VVector3@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@VVector3@@@@8 ; DynamicVectorClass<Vector3>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@VVector3@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@VVector3@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@VVector3@@@@8 DD 00H		; DynamicVectorClass<Vector3>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@VVector3@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@VVector3@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@VVector3@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<Vector3> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@VVector3@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@VVector3@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@VVector3@@@@6B@ DD 00H	; DynamicVectorClass<Vector3>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@VVector3@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@VVector3@@@@8
rdata$r	ENDS
;	COMDAT ??_R4DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@
rdata$r	SEGMENT
??_R4DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@ DD 00H ; DASpawnManagerClass::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVDASpawnManagerClass@@@8
	DD	FLAT:??_R3DASpawnManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DASingleton@VDASpawnManagerClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DASingleton@VDASpawnManagerClass@@@@8 DD FLAT:??_R0?AV?$DASingleton@VDASpawnManagerClass@@@@@8 ; DASingleton<DASpawnManagerClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DASingleton@VDASpawnManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DASingleton@VDASpawnManagerClass@@@@8
rdata$r	SEGMENT
??_R2?$DASingleton@VDASpawnManagerClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DASingleton@VDASpawnManagerClass@@@@8 ; DASingleton<DASpawnManagerClass>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$DASingleton@VDASpawnManagerClass@@@@8
rdata$r	SEGMENT
??_R3?$DASingleton@VDASpawnManagerClass@@@@8 DD 00H	; DASingleton<DASpawnManagerClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$DASingleton@VDASpawnManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DASingleton@VDASpawnManagerClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DASingleton@VDASpawnManagerClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DASingleton<DASpawnManagerClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DASingleton@VDASpawnManagerClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@?$DASingleton@VDASpawnManagerClass@@@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$DASingleton@VDASpawnManagerClass@@@@8 DD FLAT:??_R0?AV?$DASingleton@VDASpawnManagerClass@@@@@8 ; DASingleton<DASpawnManagerClass>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DASingleton@VDASpawnManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@DAPlayerDataFactoryClass@@8
rdata$r	SEGMENT
??_R13?0A@EA@DAPlayerDataFactoryClass@@8 DD FLAT:??_R0?AVDAPlayerDataFactoryClass@@@8 ; DAPlayerDataFactoryClass::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAPlayerDataFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 DD FLAT:??_R0?AV?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@8 ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R2?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAPlayerDataFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R3?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 DD 00H ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@'
	DB	'@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8 DD FLAT:??_R0?AV?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@8 ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DASpawnManagerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DASpawnManagerClass@@8 DD FLAT:??_R0?AVDASpawnManagerClass@@@8 ; DASpawnManagerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DASpawnManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DASpawnManagerClass@@8
rdata$r	SEGMENT
??_R2DASpawnManagerClass@@8 DD FLAT:??_R1A@?0A@EA@DASpawnManagerClass@@8 ; DASpawnManagerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
	DD	FLAT:??_R13?0A@EA@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@8
	DD	FLAT:??_R13?0A@EA@DAPlayerDataFactoryClass@@8
	DD	FLAT:??_R17?0A@EA@?$DASingleton@VDASpawnManagerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3DASpawnManagerClass@@8
rdata$r	SEGMENT
??_R3DASpawnManagerClass@@8 DD 00H			; DASpawnManagerClass::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2DASpawnManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDASpawnManagerClass@@@8
_DATA	SEGMENT
??_R0?AVDASpawnManagerClass@@@8 DD FLAT:??_7type_info@@6B@ ; DASpawnManagerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDASpawnManagerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DASpawnManagerClass@@6BDAEventClass@@@
rdata$r	SEGMENT
??_R4DASpawnManagerClass@@6BDAEventClass@@@ DD 00H	; DASpawnManagerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDASpawnManagerClass@@@8
	DD	FLAT:??_R3DASpawnManagerClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DASpawnPointClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DASpawnPointClass@@8 DD FLAT:??_R0?AVDASpawnPointClass@@@8 ; DASpawnPointClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DASpawnPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DASpawnPointClass@@8
rdata$r	SEGMENT
??_R2DASpawnPointClass@@8 DD FLAT:??_R1A@?0A@EA@DASpawnPointClass@@8 ; DASpawnPointClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAEventClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DASpawnPointClass@@8
rdata$r	SEGMENT
??_R3DASpawnPointClass@@8 DD 00H			; DASpawnPointClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DASpawnPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDASpawnPointClass@@@8
_DATA	SEGMENT
??_R0?AVDASpawnPointClass@@@8 DD FLAT:??_7type_info@@6B@ ; DASpawnPointClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDASpawnPointClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DASpawnPointClass@@6B@
rdata$r	SEGMENT
??_R4DASpawnPointClass@@6B@ DD 00H			; DASpawnPointClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDASpawnPointClass@@@8
	DD	FLAT:??_R3DASpawnPointClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DASpawnPlayerDataClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DASpawnPlayerDataClass@@8 DD FLAT:??_R0?AVDASpawnPlayerDataClass@@@8 ; DASpawnPlayerDataClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DASpawnPlayerDataClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DASpawnPlayerDataClass@@8
rdata$r	SEGMENT
??_R2DASpawnPlayerDataClass@@8 DD FLAT:??_R1A@?0A@EA@DASpawnPlayerDataClass@@8 ; DASpawnPlayerDataClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DAPlayerDataClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DASpawnPlayerDataClass@@8
rdata$r	SEGMENT
??_R3DASpawnPlayerDataClass@@8 DD 00H			; DASpawnPlayerDataClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DASpawnPlayerDataClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDASpawnPlayerDataClass@@@8
_DATA	SEGMENT
??_R0?AVDASpawnPlayerDataClass@@@8 DD FLAT:??_7type_info@@6B@ ; DASpawnPlayerDataClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDASpawnPlayerDataClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DASpawnPlayerDataClass@@6B@
rdata$r	SEGMENT
??_R4DASpawnPlayerDataClass@@6B@ DD 00H			; DASpawnPlayerDataClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDASpawnPlayerDataClass@@@8
	DD	FLAT:??_R3DASpawnPlayerDataClass@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ DD 00H ; VectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ DD 00H ; VectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ DD 00H ; VectorClass<DAPlayerObserverTimerStruct *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 ; VectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 DD 00H ; VectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DAPlayerObserverKeyHookStruct *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8 ; VectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8 ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8 DD 00H ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruc'
	DB	't@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ DD 00H ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 ; VectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 DD 00H ; VectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DAPlayerObserverChatCommandStruct *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@'
	DB	'@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8 ; VectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8 ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8 DD 00H ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandS'
	DB	'truct@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ DD 00H ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8 ; VectorClass<DAPlayerObserverTimerStruct *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8 DD 00H ; VectorClass<DAPlayerObserverTimerStruct *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DAPlayerObserverTimerStruct *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@@8 ; VectorClass<DAPlayerObserverTimerStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@@8 ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8 ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8 DD 00H ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DAPlayerObserverTimerStruct *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@'
	DB	'@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ DD 00H ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ DD 00H ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 DD 00H ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@'
	DB	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8 ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8 ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8 DD 00H ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerCl'
	DB	'ass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ DD 00H ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAVDAPlayerDataClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAVDAPlayerDataClass@@@@6B@ DD 00H	; VectorClass<DAPlayerDataClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAVDAPlayerDataClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAVDAPlayerDataClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerDataClass@@@@8 ; VectorClass<DAPlayerDataClass *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAVDAPlayerDataClass@@@@8 DD 00H	; VectorClass<DAPlayerDataClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAVDAPlayerDataClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAVDAPlayerDataClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DAPlayerDataClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAVDAPlayerDataClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerDataClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAVDAPlayerDataClass@@@@@8 ; VectorClass<DAPlayerDataClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAVDAPlayerDataClass@@@@@8 ; DynamicVectorClass<DAPlayerDataClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8 ; DynamicVectorClass<DAPlayerDataClass *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8 DD 00H ; DynamicVectorClass<DAPlayerDataClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAVDAPlayerDataClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAVDAPlayerDataClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DAPlayerDataClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAVDAPlayerDataClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@6B@ DD 00H ; DynamicVectorClass<DAPlayerDataClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAVDAPlayerDataClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDAPlayerDataClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAVDAPlayerObserverClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAVDAPlayerObserverClass@@@@6B@ DD 00H ; VectorClass<DAPlayerObserverClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAVDAPlayerObserverClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAVDAPlayerObserverClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerObserverClass@@@@8 ; VectorClass<DAPlayerObserverClass *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAVDAPlayerObserverClass@@@@8 DD 00H	; VectorClass<DAPlayerObserverClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAVDAPlayerObserverClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAVDAPlayerObserverClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<DAPlayerObserverClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAVDAPlayerObserverClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerObserverClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAVDAPlayerObserverClass@@@@@8 ; VectorClass<DAPlayerObserverClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@@8 ; DynamicVectorClass<DAPlayerObserverClass *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8 ; DynamicVectorClass<DAPlayerObserverClass *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8 DD 00H ; DynamicVectorClass<DAPlayerObserverClass *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<DAPlayerObserverClass *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@6B@ DD 00H ; DynamicVectorClass<DAPlayerObserverClass *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAPlayerDataClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAPlayerDataClass@@8 DD FLAT:??_R0?AVDAPlayerDataClass@@@8 ; DAPlayerDataClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAPlayerDataClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAPlayerDataClass@@8
rdata$r	SEGMENT
??_R2DAPlayerDataClass@@8 DD FLAT:??_R1A@?0A@EA@DAPlayerDataClass@@8 ; DAPlayerDataClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DAPlayerDataClass@@8
rdata$r	SEGMENT
??_R3DAPlayerDataClass@@8 DD 00H			; DAPlayerDataClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DAPlayerDataClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAPlayerDataClass@@@8
_DATA	SEGMENT
??_R0?AVDAPlayerDataClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAPlayerDataClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAPlayerDataClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAPlayerDataClass@@6B@
rdata$r	SEGMENT
??_R4DAPlayerDataClass@@6B@ DD 00H			; DAPlayerDataClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAPlayerDataClass@@@8
	DD	FLAT:??_R3DAPlayerDataClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAPlayerObserverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAPlayerObserverClass@@8 DD FLAT:??_R0?AVDAPlayerObserverClass@@@8 ; DAPlayerObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAPlayerObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAPlayerObserverClass@@8
rdata$r	SEGMENT
??_R2DAPlayerObserverClass@@8 DD FLAT:??_R1A@?0A@EA@DAPlayerObserverClass@@8 ; DAPlayerObserverClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DAPlayerObserverClass@@8
rdata$r	SEGMENT
??_R3DAPlayerObserverClass@@8 DD 00H			; DAPlayerObserverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DAPlayerObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAPlayerObserverClass@@@8
_DATA	SEGMENT
??_R0?AVDAPlayerObserverClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAPlayerObserverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAPlayerObserverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAPlayerObserverClass@@6B@
rdata$r	SEGMENT
??_R4DAPlayerObserverClass@@6B@ DD 00H			; DAPlayerObserverClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAPlayerObserverClass@@@8
	DD	FLAT:??_R3DAPlayerObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAPlayerDataFactoryClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAPlayerDataFactoryClass@@8 DD FLAT:??_R0?AVDAPlayerDataFactoryClass@@@8 ; DAPlayerDataFactoryClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAPlayerDataFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAPlayerDataFactoryClass@@8
rdata$r	SEGMENT
??_R2DAPlayerDataFactoryClass@@8 DD FLAT:??_R1A@?0A@EA@DAPlayerDataFactoryClass@@8 ; DAPlayerDataFactoryClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DAPlayerDataFactoryClass@@8
rdata$r	SEGMENT
??_R3DAPlayerDataFactoryClass@@8 DD 00H			; DAPlayerDataFactoryClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DAPlayerDataFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAPlayerDataFactoryClass@@@8
_DATA	SEGMENT
??_R0?AVDAPlayerDataFactoryClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAPlayerDataFactoryClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAPlayerDataFactoryClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAPlayerDataFactoryClass@@6B@
rdata$r	SEGMENT
??_R4DAPlayerDataFactoryClass@@6B@ DD 00H		; DAPlayerDataFactoryClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAPlayerDataFactoryClass@@@8
	DD	FLAT:??_R3DAPlayerDataFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAGameModeFactoryClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAGameModeFactoryClass@@8 DD FLAT:??_R0?AVDAGameModeFactoryClass@@@8 ; DAGameModeFactoryClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAGameModeFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAGameModeFactoryClass@@8
rdata$r	SEGMENT
??_R2DAGameModeFactoryClass@@8 DD FLAT:??_R1A@?0A@EA@DAGameModeFactoryClass@@8 ; DAGameModeFactoryClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DAGameModeFactoryClass@@8
rdata$r	SEGMENT
??_R3DAGameModeFactoryClass@@8 DD 00H			; DAGameModeFactoryClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DAGameModeFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAGameModeFactoryClass@@@8
_DATA	SEGMENT
??_R0?AVDAGameModeFactoryClass@@@8 DD FLAT:??_7type_info@@6B@ ; DAGameModeFactoryClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAGameModeFactoryClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAGameModeFactoryClass@@6B@
rdata$r	SEGMENT
??_R4DAGameModeFactoryClass@@6B@ DD 00H			; DAGameModeFactoryClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAGameModeFactoryClass@@@8
	DD	FLAT:??_R3DAGameModeFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAGameModeClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAGameModeClass@@8 DD FLAT:??_R0?AVDAGameModeClass@@@8 ; DAGameModeClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAGameModeClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAGameModeClass@@8
rdata$r	SEGMENT
??_R2DAGameModeClass@@8 DD FLAT:??_R1A@?0A@EA@DAGameModeClass@@8 ; DAGameModeClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DAGameModeClass@@8
rdata$r	SEGMENT
??_R3DAGameModeClass@@8 DD 00H				; DAGameModeClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DAGameModeClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAGameModeClass@@@8
_DATA	SEGMENT
??_R0?AVDAGameModeClass@@@8 DD FLAT:??_7type_info@@6B@	; DAGameModeClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAGameModeClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAGameModeClass@@6B@
rdata$r	SEGMENT
??_R4DAGameModeClass@@6B@ DD 00H			; DAGameModeClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAGameModeClass@@@8
	DD	FLAT:??_R3DAGameModeClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DAEventClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DAEventClass@@8 DD FLAT:??_R0?AVDAEventClass@@@8 ; DAEventClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DAEventClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DAEventClass@@8
rdata$r	SEGMENT
??_R2DAEventClass@@8 DD FLAT:??_R1A@?0A@EA@DAEventClass@@8 ; DAEventClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DAEventClass@@8
rdata$r	SEGMENT
??_R3DAEventClass@@8 DD 00H				; DAEventClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DAEventClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDAEventClass@@@8
_DATA	SEGMENT
??_R0?AVDAEventClass@@@8 DD FLAT:??_7type_info@@6B@	; DAEventClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDAEventClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DAEventClass@@6B@
rdata$r	SEGMENT
??_R4DAEventClass@@6B@ DD 00H				; DAEventClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDAEventClass@@@8
	DD	FLAT:??_R3DAEventClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8 DD FLAT:??_R0?AVJFW_Object_Created_Hook_Base@@@8 ; JFW_Object_Created_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R2JFW_Object_Created_Hook_Base@@8 DD FLAT:??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8 ; JFW_Object_Created_Hook_Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R3JFW_Object_Created_Hook_Base@@8 DD 00H		; JFW_Object_Created_Hook_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVJFW_Object_Created_Hook_Base@@@8
_DATA	SEGMENT
??_R0?AVJFW_Object_Created_Hook_Base@@@8 DD FLAT:??_7type_info@@6B@ ; JFW_Object_Created_Hook_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVJFW_Object_Created_Hook_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4JFW_Object_Created_Hook_Base@@6B@
rdata$r	SEGMENT
??_R4JFW_Object_Created_Hook_Base@@6B@ DD 00H		; JFW_Object_Created_Hook_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVJFW_Object_Created_Hook_Base@@@8
	DD	FLAT:??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD FLAT:??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD 00H ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpC'
	DB	'lass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
rdata$r	SEGMENT
??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ DD 00H ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8
	DD	FLAT:??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8 DD FLAT:??_R0?AVMultiKeyHookScriptImpClass@@@8 ; MultiKeyHookScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R2MultiKeyHookScriptImpClass@@8 DD FLAT:??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8 ; MultiKeyHookScriptImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R3MultiKeyHookScriptImpClass@@8 DD 00H		; MultiKeyHookScriptImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMultiKeyHookScriptImpClass@@@8
_DATA	SEGMENT
??_R0?AVMultiKeyHookScriptImpClass@@@8 DD FLAT:??_7type_info@@6B@ ; MultiKeyHookScriptImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMultiKeyHookScriptImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MultiKeyHookScriptImpClass@@6B@
rdata$r	SEGMENT
??_R4MultiKeyHookScriptImpClass@@6B@ DD 00H		; MultiKeyHookScriptImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMultiKeyHookScriptImpClass@@@8
	DD	FLAT:??_R3MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@JFW_Key_Hook_Base@@8 DD FLAT:??_R0?AVJFW_Key_Hook_Base@@@8 ; JFW_Key_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R2JFW_Key_Hook_Base@@8 DD FLAT:??_R1A@?0A@EA@JFW_Key_Hook_Base@@8 ; JFW_Key_Hook_Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R3JFW_Key_Hook_Base@@8 DD 00H			; JFW_Key_Hook_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVJFW_Key_Hook_Base@@@8
_DATA	SEGMENT
??_R0?AVJFW_Key_Hook_Base@@@8 DD FLAT:??_7type_info@@6B@ ; JFW_Key_Hook_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVJFW_Key_Hook_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4JFW_Key_Hook_Base@@6B@
rdata$r	SEGMENT
??_R4JFW_Key_Hook_Base@@6B@ DD 00H			; JFW_Key_Hook_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVJFW_Key_Hook_Base@@@8
	DD	FLAT:??_R3JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@H@@8
rdata$r	SEGMENT
??_R2?$VectorClass@H@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@H@@8 ; VectorClass<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@H@@8
rdata$r	SEGMENT
??_R3?$VectorClass@H@@8 DD 00H				; VectorClass<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@H@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@H@@@8 DD FLAT:??_7type_info@@6B@	; VectorClass<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@H@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@H@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@H@@8 DD FLAT:??_R0?AV?$VectorClass@H@@@8 ; VectorClass<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@H@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@H@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@H@@@8 ; DynamicVectorClass<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@H@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@H@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@H@@8 ; DynamicVectorClass<int>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@H@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@H@@8 DD 00H			; DynamicVectorClass<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@H@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@H@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@H@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@H@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@H@@6B@ DD 00H			; DynamicVectorClass<int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@H@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ReferencerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ReferencerClass@@8 DD FLAT:??_R0?AVReferencerClass@@@8 ; ReferencerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ReferencerClass@@8
rdata$r	SEGMENT
??_R2ReferencerClass@@8 DD FLAT:??_R1A@?0A@EA@ReferencerClass@@8 ; ReferencerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ReferencerClass@@8
rdata$r	SEGMENT
??_R3ReferencerClass@@8 DD 00H				; ReferencerClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReferencerClass@@@8
_DATA	SEGMENT
??_R0?AVReferencerClass@@@8 DD FLAT:??_7type_info@@6B@	; ReferencerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReferencerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ReferencerClass@@6B@
rdata$r	SEGMENT
??_R4ReferencerClass@@6B@ DD 00H			; ReferencerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReferencerClass@@@8
	DD	FLAT:??_R3ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R4PostLoadableClass@@6B@
rdata$r	SEGMENT
??_R4PostLoadableClass@@6B@ DD 00H			; PostLoadableClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPostLoadableClass@@@8
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PostLoadableClass@@8
rdata$r	SEGMENT
??_R2PostLoadableClass@@8 DD FLAT:??_R1A@?0A@EA@PostLoadableClass@@8 ; PostLoadableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PostLoadableClass@@8
rdata$r	SEGMENT
??_R3PostLoadableClass@@8 DD 00H			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPostLoadableClass@@@8
_DATA	SEGMENT
??_R0?AVPostLoadableClass@@@8 DD FLAT:??_7type_info@@6B@ ; PostLoadableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPostLoadableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PostLoadableClass@@8 DD FLAT:??_R0?AVPostLoadableClass@@@8 ; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INIClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INIClass@@8 DD FLAT:??_R0?AVINIClass@@@8	; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R2INIClass@@8
rdata$r	SEGMENT
??_R2INIClass@@8 DD FLAT:??_R1A@?0A@EA@INIClass@@8	; INIClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INIClass@@8
rdata$r	SEGMENT
??_R3INIClass@@8 DD 00H					; INIClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVINIClass@@@8
_DATA	SEGMENT
??_R0?AVINIClass@@@8 DD FLAT:??_7type_info@@6B@		; INIClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVINIClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INIClass@@6B@
rdata$r	SEGMENT
??_R4INIClass@@6B@ DD 00H				; INIClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVINIClass@@@8
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptImpClass@@8 DD FLAT:??_R0?AVScriptImpClass@@@8 ; ScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptImpClass@@8
rdata$r	SEGMENT
??_R2ScriptImpClass@@8 DD FLAT:??_R1A@?0A@EA@ScriptImpClass@@8 ; ScriptImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ScriptImpClass@@8
rdata$r	SEGMENT
??_R3ScriptImpClass@@8 DD 00H				; ScriptImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptImpClass@@@8
_DATA	SEGMENT
??_R0?AVScriptImpClass@@@8 DD FLAT:??_7type_info@@6B@	; ScriptImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptImpClass@@6B@
rdata$r	SEGMENT
??_R4ScriptImpClass@@6B@ DD 00H				; ScriptImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptImpClass@@@8
	DD	FLAT:??_R3ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R4GameObjObserverClass@@6B@
rdata$r	SEGMENT
??_R4GameObjObserverClass@@6B@ DD 00H			; GameObjObserverClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGameObjObserverClass@@@8
	DD	FLAT:??_R3GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R2GameObjObserverClass@@8
rdata$r	SEGMENT
??_R2GameObjObserverClass@@8 DD FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8 ; GameObjObserverClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GameObjObserverClass@@8
rdata$r	SEGMENT
??_R3GameObjObserverClass@@8 DD 00H			; GameObjObserverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGameObjObserverClass@@@8
_DATA	SEGMENT
??_R0?AVGameObjObserverClass@@@8 DD FLAT:??_7type_info@@6B@ ; GameObjObserverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGameObjObserverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GameObjObserverClass@@8 DD FLAT:??_R0?AVGameObjObserverClass@@@8 ; GameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptClass@@8 DD FLAT:??_R0?AVScriptClass@@@8 ; ScriptClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptClass@@8
rdata$r	SEGMENT
??_R2ScriptClass@@8 DD FLAT:??_R1A@?0A@EA@ScriptClass@@8 ; ScriptClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ScriptClass@@8
rdata$r	SEGMENT
??_R3ScriptClass@@8 DD 00H				; ScriptClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptClass@@@8
_DATA	SEGMENT
??_R0?AVScriptClass@@@8 DD FLAT:??_7type_info@@6B@	; ScriptClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptClass@@6B@
rdata$r	SEGMENT
??_R4ScriptClass@@6B@ DD 00H				; ScriptClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptClass@@@8
	DD	FLAT:??_R3ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptFactory@@8 DD FLAT:??_R0?AVScriptFactory@@@8 ; ScriptFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptFactory@@8
rdata$r	SEGMENT
??_R2ScriptFactory@@8 DD FLAT:??_R1A@?0A@EA@ScriptFactory@@8 ; ScriptFactory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ScriptFactory@@8
rdata$r	SEGMENT
??_R3ScriptFactory@@8 DD 00H				; ScriptFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptFactory@@@8
_DATA	SEGMENT
??_R0?AVScriptFactory@@@8 DD FLAT:??_7type_info@@6B@	; ScriptFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptFactory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptFactory@@6B@
rdata$r	SEGMENT
??_R4ScriptFactory@@6B@ DD 00H				; ScriptFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptFactory@@@8
	DD	FLAT:??_R3ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CA@OEGNGHEB@DANodeManagerClass?3?3Create_Node?$AA@
CONST	SEGMENT
??_C@_0CA@OEGNGHEB@DANodeManagerClass?3?3Create_Node?$AA@ DB 'DANodeManag'
	DB	'erClass::Create_Node', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@
CONST	SEGMENT
??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@ DB 'ObjectPoolCl'
	DB	'ass<class GenericSLNode,256>::~ObjectPoolClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
CONST	SEGMENT
??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ DB '%d memor'
	DB	'y leaks found in ObjectPoolClass<class GenericSLNode,256>::~O'
	DB	'bjectPoolClass', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@
CONST	SEGMENT
??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@ DB 'ObjectPoolCl'
	DB	'ass<class GenericSLNode,256>::Allocate_Object_Memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@GMMBDHFC@HashTemplateClass?$DMclass?5StringCl@
CONST	SEGMENT
??_C@_0FG@GMMBDHFC@HashTemplateClass?$DMclass?5StringCl@ DB 'HashTemplate'
	DB	'Class<class StringClass,class PairClass<int,class StringClass'
	DB	'> >::Re_Hash', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GFJJPOM@VectorClass?$DMclass?5DATeleporterCl@
CONST	SEGMENT
??_C@_0DE@GFJJPOM@VectorClass?$DMclass?5DATeleporterCl@ DB 'VectorClass<c'
	DB	'lass DATeleporterClass *>::VectorClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GABKBKGN@VectorClass?$DMclass?5DAVehicleSpawn@
CONST	SEGMENT
??_C@_0DL@GABKBKGN@VectorClass?$DMclass?5DAVehicleSpawn@ DB 'VectorClass<'
	DB	'class DAVehicleSpawnPointClass *>::VectorClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@FHJCDJGK@VectorClass?$DMclass?5DABaseNodeClas@
CONST	SEGMENT
??_C@_0DC@FHJCDJGK@VectorClass?$DMclass?5DABaseNodeClas@ DB 'VectorClass<'
	DB	'class DABaseNodeClass *>::VectorClass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@EOBPJAFA@VectorClass?$DMclass?5DASpawnPointCl@
CONST	SEGMENT
??_C@_0DE@EOBPJAFA@VectorClass?$DMclass?5DASpawnPointCl@ DB 'VectorClass<'
	DB	'class DASpawnPointClass *>::VectorClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BIKGHIDO@VectorClass?$DMint?$DO?3?3operator?5?$DN?$AA@
CONST	SEGMENT
??_C@_0BN@BIKGHIDO@VectorClass?$DMint?$DO?3?3operator?5?$DN?$AA@ DB 'Vect'
	DB	'orClass<int>::operator =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@
CONST	SEGMENT
??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@ DB 'VectorC'
	DB	'lass<int>::VectorClass', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DLGPEICA@VectorClass?$DMclass?5Vector3?$DO?3?3oper@
CONST	SEGMENT
??_C@_0CH@DLGPEICA@VectorClass?$DMclass?5Vector3?$DO?3?3oper@ DB 'VectorC'
	DB	'lass<class Vector3>::operator =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JHCKFMFA@VectorClass?$DMclass?5Vector3?$DO?3?3Vect@
CONST	SEGMENT
??_C@_0CI@JHCKFMFA@VectorClass?$DMclass?5Vector3?$DO?3?3Vect@ DB 'VectorC'
	DB	'lass<class Vector3>::VectorClass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@DFHGBHJN@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0EA@DFHGBHJN@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverKeyHookStruct *>::operator =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@CCPEIKDO@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0EB@CCPEIKDO@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverKeyHookStruct *>::VectorClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JOBDGIII@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0EE@JOBDGIII@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverChatCommandStruct *>::operator =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@EPICALKK@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0EF@EPICALKK@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverChatCommandStruct *>::VectorClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PEJOFHLG@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0DO@PEJOFHLG@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverTimerStruct *>::operator =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@IOIJJLDO@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0DP@IOIJJLDO@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverTimerStruct *>::VectorClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@MCIGMKB@VectorClass?$DMstruct?5DAPlayerClass@
CONST	SEGMENT
??_C@_0ED@MCIGMKB@VectorClass?$DMstruct?5DAPlayerClass@ DB 'VectorClass<s'
	DB	'truct DAPlayerClass::DAPlayerTagStruct *>::operator =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OELEBJCM@VectorClass?$DMclass?5DAPlayerDataCl@
CONST	SEGMENT
??_C@_0DD@OELEBJCM@VectorClass?$DMclass?5DAPlayerDataCl@ DB 'VectorClass<'
	DB	'class DAPlayerDataClass *>::operator =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FMPAOODI@VectorClass?$DMclass?5DAPlayerObserv@
CONST	SEGMENT
??_C@_0DH@FMPAOODI@VectorClass?$DMclass?5DAPlayerObserv@ DB 'VectorClass<'
	DB	'class DAPlayerObserverClass *>::operator =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ECOCMBOM@VectorClass?$DMclass?5StringClass?$DO?3?3@
CONST	SEGMENT
??_C@_0CL@ECOCMBOM@VectorClass?$DMclass?5StringClass?$DO?3?3@ DB 'VectorC'
	DB	'lass<class StringClass>::operator =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'h', 00H, 'a', 00H, 's', 00H, 'h', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\hashtemplateclass.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@JNPOOKEF@HashTemplateClass?$DMclass?5StringCl@
CONST	SEGMENT
??_C@_0GB@JNPOOKEF@HashTemplateClass?$DMclass?5StringCl@ DB 'HashTemplate'
	DB	'Class<class StringClass,class PairClass<int,class StringClass'
	DB	'> >::~HashTemplateClass', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@HDFDHCGO@DAGameModeRegistrant?$DMclass?5DADom@
CONST	SEGMENT
??_C@_0EG@HDFDHCGO@DAGameModeRegistrant?$DMclass?5DADom@ DB 'DAGameModeRe'
	DB	'gistrant<class DADominationManagerClass>::Create_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JMDODCKN@VectorClass?$DMclass?5DATeleporterCl@
CONST	SEGMENT
??_C@_0CO@JMDODCKN@VectorClass?$DMclass?5DATeleporterCl@ DB 'VectorClass<'
	DB	'class DATeleporterClass *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HCNAKDEC@VectorClass?$DMclass?5DATeleporterCl@
CONST	SEGMENT
??_C@_0CP@HCNAKDEC@VectorClass?$DMclass?5DATeleporterCl@ DB 'VectorClass<'
	DB	'class DATeleporterClass *>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@CBMJHOFN@DASingleton?$DMclass?5DATeleporterMa@
CONST	SEGMENT
??_C@_0DO@CBMJHOFN@DASingleton?$DMclass?5DATeleporterMa@ DB 'DASingleton<'
	DB	'class DATeleporterManagerClass>::Destroy_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@IDMFFIFA@DASingleton?$DMclass?5DATeleporterMa@
CONST	SEGMENT
??_C@_0DN@IDMFFIFA@DASingleton?$DMclass?5DATeleporterMa@ DB 'DASingleton<'
	DB	'class DATeleporterManagerClass>::Create_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FOPMMLBB@VectorClass?$DMclass?5DAVehicleSpawn@
CONST	SEGMENT
??_C@_0DF@FOPMMLBB@VectorClass?$DMclass?5DAVehicleSpawn@ DB 'VectorClass<'
	DB	'class DAVehicleSpawnPointClass *>::Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LAMFJOBM@VectorClass?$DMclass?5DAVehicleSpawn@
CONST	SEGMENT
??_C@_0DG@LAMFJOBM@VectorClass?$DMclass?5DAVehicleSpawn@ DB 'VectorClass<'
	DB	'class DAVehicleSpawnPointClass *>::Resize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@CANOJECI@DASingleton?$DMclass?5DAVehicleSpawn@
CONST	SEGMENT
??_C@_0EA@CANOJECI@DASingleton?$DMclass?5DAVehicleSpawn@ DB 'DASingleton<'
	DB	'class DAVehicleSpawnManagerClass>::Destroy_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@EPFOCLBB@DASingleton?$DMclass?5DAVehicleSpawn@
CONST	SEGMENT
??_C@_0DP@EPFOCLBB@DASingleton?$DMclass?5DAVehicleSpawn@ DB 'DASingleton<'
	DB	'class DAVehicleSpawnManagerClass>::Create_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NGDBILCB@VectorClass?$DMclass?5DABaseNodeClas@
CONST	SEGMENT
??_C@_0CM@NGDBILCB@VectorClass?$DMclass?5DABaseNodeClas@ DB 'VectorClass<'
	DB	'class DABaseNodeClass *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JGJEGDPA@VectorClass?$DMclass?5DABaseNodeClas@
CONST	SEGMENT
??_C@_0CN@JGJEGDPA@VectorClass?$DMclass?5DABaseNodeClas@ DB 'VectorClass<'
	DB	'class DABaseNodeClass *>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DMGMNBNI@DASingleton?$DMclass?5DANodeManagerC@
CONST	SEGMENT
??_C@_0DI@DMGMNBNI@DASingleton?$DMclass?5DANodeManagerC@ DB 'DASingleton<'
	DB	'class DANodeManagerClass>::Destroy_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@JBHKLJEA@DASingleton?$DMclass?5DANodeManagerC@
CONST	SEGMENT
??_C@_0DH@JBHKLJEA@DASingleton?$DMclass?5DANodeManagerC@ DB 'DASingleton<'
	DB	'class DANodeManagerClass>::Create_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EOHHGKHD@VectorClass?$DMclass?5DASpawnPointCl@
CONST	SEGMENT
??_C@_0CO@EOHHGKHD@VectorClass?$DMclass?5DASpawnPointCl@ DB 'VectorClass<'
	DB	'class DASpawnPointClass *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BDGJBFMJ@VectorClass?$DMclass?5DASpawnPointCl@
CONST	SEGMENT
??_C@_0CP@BDGJBFMJ@VectorClass?$DMclass?5DASpawnPointCl@ DB 'VectorClass<'
	DB	'class DASpawnPointClass *>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DNLECMMC@DASingleton?$DMclass?5DASpawnManager@
CONST	SEGMENT
??_C@_0DJ@DNLECMMC@DASingleton?$DMclass?5DASpawnManager@ DB 'DASingleton<'
	DB	'class DASpawnManagerClass>::Destroy_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'a', 00H, '_', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\da_event.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JCPGKFAB@DASingleton?$DMclass?5DASpawnManager@
CONST	SEGMENT
??_C@_0DI@JCPGKFAB@DASingleton?$DMclass?5DASpawnManager@ DB 'DASingleton<'
	DB	'class DASpawnManagerClass>::Create_Instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@CICFBDGG@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GK@CICFBDGG@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'a', 00H, '_', 00H, 'p', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'h', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JCDNCPAG@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DF@JCDNCPAG@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\da_player.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@CDJABAN@DAPlayerDataManagerClass?$DMclass?5D@
CONST	SEGMENT
??_C@_0EE@CDJABAN@DAPlayerDataManagerClass?$DMclass?5D@ DB 'DAPlayerDataM'
	DB	'anagerClass<class DASpawnPlayerDataClass>::Create_Data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DBAHDKIN@VectorClass?$DMint?$DO?3?3Clear?$AA@
CONST	SEGMENT
??_C@_0BI@DBAHDKIN@VectorClass?$DMint?$DO?3?3Clear?$AA@ DB 'VectorClass<i'
	DB	'nt>::Clear', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@
CONST	SEGMENT
??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@ DB 'VectorClass<'
	DB	'int>::Resize', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HGKCMNMN@VectorClass?$DMclass?5Vector3?$DO?3?3Clea@
CONST	SEGMENT
??_C@_0CC@HGKCMNMN@VectorClass?$DMclass?5Vector3?$DO?3?3Clea@ DB 'VectorC'
	DB	'lass<class Vector3>::Clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DPIIFOOF@VectorClass?$DMclass?5Vector3?$DO?3?3Resi@
CONST	SEGMENT
??_C@_0CD@DPIIFOOF@VectorClass?$DMclass?5Vector3?$DO?3?3Resi@ DB 'VectorC'
	DB	'lass<class Vector3>::Resize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@IEBGHGHF@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0DL@IEBGHGHF@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverKeyHookStruct *>::Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@PKMANBOA@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0DM@PKMANBOA@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverKeyHookStruct *>::Resize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@JJGAHOFF@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0DP@JJGAHOFF@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverChatCommandStruct *>::Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MBLDIHCA@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0EA@MBLDIHCA@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverChatCommandStruct *>::Resize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MHPEBELA@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0DJ@MHPEBELA@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverTimerStruct *>::Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@BBINAFLN@VectorClass?$DMstruct?5DAPlayerObser@
CONST	SEGMENT
??_C@_0DK@BBINAFLN@VectorClass?$DMstruct?5DAPlayerObser@ DB 'VectorClass<'
	DB	'struct DAPlayerObserverTimerStruct *>::Resize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@MAHPNNNF@VectorClass?$DMstruct?5DAPlayerClass@
CONST	SEGMENT
??_C@_0DO@MAHPNNNF@VectorClass?$DMstruct?5DAPlayerClass@ DB 'VectorClass<'
	DB	'struct DAPlayerClass::DAPlayerTagStruct *>::Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CMFCBLKD@VectorClass?$DMstruct?5DAPlayerClass@
CONST	SEGMENT
??_C@_0DP@CMFCBLKD@VectorClass?$DMstruct?5DAPlayerClass@ DB 'VectorClass<'
	DB	'struct DAPlayerClass::DAPlayerTagStruct *>::Resize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NDDDNNIA@VectorClass?$DMclass?5DAPlayerDataCl@
CONST	SEGMENT
??_C@_0CO@NDDDNNIA@VectorClass?$DMclass?5DAPlayerDataCl@ DB 'VectorClass<'
	DB	'class DAPlayerDataClass *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DHEAPCNI@VectorClass?$DMclass?5DAPlayerDataCl@
CONST	SEGMENT
??_C@_0CP@DHEAPCNI@VectorClass?$DMclass?5DAPlayerDataCl@ DB 'VectorClass<'
	DB	'class DAPlayerDataClass *>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JEMMOOD@VectorClass?$DMclass?5DAPlayerObserv@
CONST	SEGMENT
??_C@_0DC@JEMMOOD@VectorClass?$DMclass?5DAPlayerObserv@ DB 'VectorClass<c'
	DB	'lass DAPlayerObserverClass *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@ODCBLNCJ@VectorClass?$DMclass?5DAPlayerObserv@
CONST	SEGMENT
??_C@_0DD@ODCBLNCJ@VectorClass?$DMclass?5DAPlayerObserv@ DB 'VectorClass<'
	DB	'class DAPlayerObserverClass *>::Resize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@IKKPOACN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GO@IKKPOACN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'a', 00H, '_', 00H, 'g', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@LBOBMIDI@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DH@LBOBMIDI@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\da_gamemode.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct '
	DB	'MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Aft'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Be'
	DB	'fore', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Al'
	DB	'l', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_He'
	DB	'ad', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\slist.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct '
	DB	'MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FKCFHJBF@Domination?$AA@
CONST	SEGMENT
??_C@_0L@FKCFHJBF@Domination?$AA@ DB 'Domination', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NCNLMLDB@Control1_Node_X?$AA@
CONST	SEGMENT
??_C@_0BA@NCNLMLDB@Control1_Node_X?$AA@ DB 'Control1_Node_X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GPOLAEHP@Score?3?5?$CF?40f?1?$CF?40f?$AA@
CONST	SEGMENT
??_C@_0BB@GPOLAEHP@Score?3?5?$CF?40f?1?$CF?40f?$AA@ DB 'Score: %.0f/%.0f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NIBPICLL@?$CFs?$CI?$CFd?$CJ?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0L@NIBPICLL@?$CFs?$CI?$CFd?$CJ?3?5?$CFs?$AA@ DB '%s(%d): %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KHEKMLOH@?0?5?$CFs?$AA@
CONST	SEGMENT
??_C@_04KHEKMLOH@?0?5?$CFs?$AA@ DB ', %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0KH@JMJLPLJA@This?5is?5a?5Domination?5Mode?5match?4@
CONST	SEGMENT
??_C@_0KH@JMJLPLJA@This?5is?5a?5Domination?5Mode?5match?4@ DB 'This is a '
	DB	'Domination Mode match. The objective is to capture and hold T'
	DB	'iberium Nodes for money and Control Nodes for points. The fir'
	DB	'st team to reach %.0f points wins.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0NB@BMOMOCHG@When?5you?5die?5you?5will?5be?5asked?5t@
CONST	SEGMENT
??_C@_0NB@BMOMOCHG@When?5you?5die?5you?5will?5be?5asked?5t@ DB 'When you '
	DB	'die you will be asked to use the Purchase Terminal to select '
	DB	'a character to spawn as. Once selected you will spawn at eith'
	DB	'er the closest node controlled by your team or your team''s s'
	DB	'tarting location.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@HEJPMFGD@?$CFls?5controlled?5?$CFd?5Tiberium?5Node?$CI@
CONST	SEGMENT
??_C@_0FB@HEJPMFGD@?$CFls?5controlled?5?$CFd?5Tiberium?5Node?$CI@ DB '%ls'
	DB	' controlled %d Tiberium Node(s), %d Control Node(s), and had '
	DB	'a score of %.0f.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OIKCAIKB@?$CFls?5has?5won?5the?5game?$CB?$AA@
CONST	SEGMENT
??_C@_0BG@OIKCAIKB@?$CFls?5has?5won?5the?5game?$CB?$AA@ DB '%ls has won t'
	DB	'he game!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CLFKJEFO@M00EVAG_DSGN0005I1EVAG_snd?4wav?$AA@
CONST	SEGMENT
??_C@_0BP@CLFKJEFO@M00EVAG_DSGN0005I1EVAG_snd?4wav?$AA@ DB 'M00EVAG_DSGN0'
	DB	'005I1EVAG_snd.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HHBHICDP@M00EVAN_DSGN0078I1EVAN_snd?4wav?$AA@
CONST	SEGMENT
??_C@_0BP@HHBHICDP@M00EVAN_DSGN0078I1EVAN_snd?4wav?$AA@ DB 'M00EVAN_DSGN0'
	DB	'078I1EVAN_snd.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HIMNBDJK@M00EVAG_DSGN0011I1EVAG_snd?4wav?$AA@
CONST	SEGMENT
??_C@_0BP@HIMNBDJK@M00EVAG_DSGN0011I1EVAG_snd?4wav?$AA@ DB 'M00EVAG_DSGN0'
	DB	'011I1EVAG_snd.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PJPNOFAF@M00EVAN_DSGN0077I1EVAN_snd?4wav?$AA@
CONST	SEGMENT
??_C@_0BP@PJPNOFAF@M00EVAN_DSGN0077I1EVAN_snd?4wav?$AA@ DB 'M00EVAN_DSGN0'
	DB	'077I1EVAN_snd.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDHNKDGP@timeout?$AA@
CONST	SEGMENT
??_C@_07DDHNKDGP@timeout?$AA@ DB 'timeout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@JHMFIDMG@?$CBnodes?$HM?$CBnode?$HM?$CBscore?$HM?$CBpoints?$HM?$CBcap@
CONST	SEGMENT
??_C@_0DO@JHMFIDMG@?$CBnodes?$HM?$CBnode?$HM?$CBscore?$HM?$CBpoints?$HM?$CBcap@ DB '!'
	DB	'nodes|!node|!score|!points|!captures|!caps|!cap|!flag|!flags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OPFBCKCF@Weapon_RamjetRifle_Player?$AA@
CONST	SEGMENT
??_C@_0BK@OPFBCKCF@Weapon_RamjetRifle_Player?$AA@ DB 'Weapon_RamjetRifle_'
	DB	'Player', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BEJOHP@CnC_Weapon_RamjetRifle_Player?$AA@
CONST	SEGMENT
??_C@_0BO@BEJOHP@CnC_Weapon_RamjetRifle_Player?$AA@ DB 'CnC_Weapon_Ramjet'
	DB	'Rifle_Player', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EPHIGEJG@CnC_Weapon_RocketLauncher_Player@
CONST	SEGMENT
??_C@_0CB@EPHIGEJG@CnC_Weapon_RocketLauncher_Player@ DB 'CnC_Weapon_Rocke'
	DB	'tLauncher_Player', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PCAMMIOK@CnC_Nod_MiniGunner_2SF_Skirmish?$AA@
CONST	SEGMENT
??_C@_0CA@PCAMMIOK@CnC_Nod_MiniGunner_2SF_Skirmish?$AA@ DB 'CnC_Nod_MiniG'
	DB	'unner_2SF_Skirmish', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HIKMPHIB@CnC_Nod_FlameThrower_2SF?$AA@
CONST	SEGMENT
??_C@_0BJ@HIKMPHIB@CnC_Nod_FlameThrower_2SF?$AA@ DB 'CnC_Nod_FlameThrower'
	DB	'_2SF', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OOJAAJNC@POW_MineRemote_Player?$AA@
CONST	SEGMENT
??_C@_0BG@OOJAAJNC@POW_MineRemote_Player?$AA@ DB 'POW_MineRemote_Player', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OMGBBNCN@CnC_POW_Nuclear_Missle_Beacon?$AA@
CONST	SEGMENT
??_C@_0BO@OMGBBNCN@CnC_POW_Nuclear_Missle_Beacon?$AA@ DB 'CnC_POW_Nuclear'
	DB	'_Missle_Beacon', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GFDJBLDK@CnC_Nod_Recon_Bike?$AA@
CONST	SEGMENT
??_C@_0BD@GFDJBLDK@CnC_Nod_Recon_Bike?$AA@ DB 'CnC_Nod_Recon_Bike', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EIMMMIOI@CnC_Nod_Stealth_Tank?$AA@
CONST	SEGMENT
??_C@_0BF@EIMMMIOI@CnC_Nod_Stealth_Tank?$AA@ DB 'CnC_Nod_Stealth_Tank', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IBGDNKL@Tiberium?$CFd?$AA@
CONST	SEGMENT
??_C@_0L@IBGDNKL@Tiberium?$CFd?$AA@ DB 'Tiberium%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GIHHJKKB@?$CFs_Node_X?$AA@
CONST	SEGMENT
??_C@_09GIHHJKKB@?$CFs_Node_X?$AA@ DB '%s_Node_X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CEALANKL@Control?$CFd?$AA@
CONST	SEGMENT
??_C@_09CEALANKL@Control?$CFd?$AA@ DB 'Control%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CCBKOFN@?$CFs_TeleporterEntrance_X?$AA@
CONST	SEGMENT
??_C@_0BI@CCBKOFN@?$CFs_TeleporterEntrance_X?$AA@ DB '%s_TeleporterEntran'
	DB	'ce_X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FJJGHBNM@Teleporter?$CFd?$AA@
CONST	SEGMENT
??_C@_0N@FJJGHBNM@Teleporter?$CFd?$AA@ DB 'Teleporter%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EAMMBIFA@Teleporter1_TeleporterEntrance_X@
CONST	SEGMENT
??_C@_0CB@EAMMBIFA@Teleporter1_TeleporterEntrance_X@ DB 'Teleporter1_Tele'
	DB	'porterEntrance_X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EFIOFKDD@GDI_Vehicle_X?$AA@
CONST	SEGMENT
??_C@_0O@EFIOFKDD@GDI_Vehicle_X?$AA@ DB 'GDI_Vehicle_X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IOFAJBDH@GDI?$AA@
CONST	SEGMENT
??_C@_03IOFAJBDH@GDI?$AA@ DB 'GDI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OHGKCNFD@Nod?$AA@
CONST	SEGMENT
??_C@_03OHGKCNFD@Nod?$AA@ DB 'Nod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EBHECGJM@GDI_Spawn1_X?$AA@
CONST	SEGMENT
??_C@_0N@EBHECGJM@GDI_Spawn1_X?$AA@ DB 'GDI_Spawn1_X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OAGMNPNI@DominationWinningPoints?$AA@
CONST	SEGMENT
??_C@_0BI@OAGMNPNI@DominationWinningPoints?$AA@ DB 'DominationWinningPoin'
	DB	'ts', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BCIIMMLE@DominationCreditTickTime?$AA@
CONST	SEGMENT
??_C@_0BJ@BCIIMMLE@DominationCreditTickTime?$AA@ DB 'DominationCreditTick'
	DB	'Time', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JPMPFIPH@DominationCreditTickAmount?$AA@
CONST	SEGMENT
??_C@_0BL@JPMPFIPH@DominationCreditTickAmount?$AA@ DB 'DominationCreditTi'
	DB	'ckAmount', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OEAKIFBD@DominationPointTickTime?$AA@
CONST	SEGMENT
??_C@_0BI@OEAKIFBD@DominationPointTickTime?$AA@ DB 'DominationPointTickTi'
	DB	'me', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HBIJHNGP@DominationPointTickAmount?$AA@
CONST	SEGMENT
??_C@_0BK@HBIJHNGP@DominationPointTickAmount?$AA@ DB 'DominationPointTick'
	DB	'Amount', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JMKIDKPA@TiberiumNodeAnimation?$AA@
CONST	SEGMENT
??_C@_0BG@JMKIDKPA@TiberiumNodeAnimation?$AA@ DB 'TiberiumNodeAnimation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKJFMBGJ@TiberiumNodeModel?$AA@
CONST	SEGMENT
??_C@_0BC@GKJFMBGJ@TiberiumNodeModel?$AA@ DB 'TiberiumNodeModel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IBNFAGPI@TiberiumNodePreset?$AA@
CONST	SEGMENT
??_C@_0BD@IBNFAGPI@TiberiumNodePreset?$AA@ DB 'TiberiumNodePreset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HANGKPH@ControlNodeAnimation?$AA@
CONST	SEGMENT
??_C@_0BF@HANGKPH@ControlNodeAnimation?$AA@ DB 'ControlNodeAnimation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BMHLIFHB@ControlNodeModel?$AA@
CONST	SEGMENT
??_C@_0BB@BMHLIFHB@ControlNodeModel?$AA@ DB 'ControlNodeModel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JCMPHAOK@ControlNodePreset?$AA@
CONST	SEGMENT
??_C@_0BC@JCMPHAOK@ControlNodePreset?$AA@ DB 'ControlNodePreset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PPHAGAFJ@M00EVAG_DSGN0049I1EVAG_snd?4wav?$AA@
CONST	SEGMENT
??_C@_0BP@PPHAGAFJ@M00EVAG_DSGN0049I1EVAG_snd?4wav?$AA@ DB 'M00EVAG_DSGN0'
	DB	'049I1EVAG_snd.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FBBIPBMI@M00EVAG_DSGN0048I1EVAG_snd?4wav?$AA@
CONST	SEGMENT
??_C@_0BP@FBBIPBMI@M00EVAG_DSGN0048I1EVAG_snd?4wav?$AA@ DB 'M00EVAG_DSGN0'
	DB	'048I1EVAG_snd.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$DAGameModeRegistrant@VDADominationManagerClass@@@@6B@
CONST	SEGMENT
??_7?$DAGameModeRegistrant@VDADominationManagerClass@@@@6B@ DD FLAT:??_R4?$DAGameModeRegistrant@VDADominationManagerClass@@@@6B@ ; DAGameModeRegistrant<DADominationManagerClass>::`vftable'
	DD	FLAT:??_E?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAXI@Z
	DD	FLAT:?Create_Instance@?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAVDAGameModeClass@@XZ
CONST	ENDS
;	COMDAT ??_7DADominationManagerClass@@6BDAGameModeClass@@@
CONST	SEGMENT
??_7DADominationManagerClass@@6BDAGameModeClass@@@ DD FLAT:??_R4DADominationManagerClass@@6BDAGameModeClass@@@ ; DADominationManagerClass::`vftable'
	DD	FLAT:?Init@DADominationManagerClass@@EAEXXZ
	DD	FLAT:??_EDADominationManagerClass@@G3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7DADominationManagerClass@@6BDAEventClass@@@
CONST	SEGMENT
??_7DADominationManagerClass@@6BDAEventClass@@@ DD FLAT:??_R4DADominationManagerClass@@6BDAEventClass@@@ ; DADominationManagerClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DADominationManagerClass@@EAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DADominationManagerClass@@EAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DAEventClass@@UAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DADominationManagerClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DADominationManagerClass@@EAEXHI@Z
	DD	FLAT:??_EDADominationManagerClass@@EAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_08PKKJDHOJ@Tiberium?$AA@
CONST	SEGMENT
??_C@_08PKKJDHOJ@Tiberium?$AA@ DB 'Tiberium', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7DATiberiumNodeClass@@6B@
CONST	SEGMENT
??_7DATiberiumNodeClass@@6B@ DD FLAT:??_R4DATiberiumNodeClass@@6B@ ; DATiberiumNodeClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DABaseNodeClass@@MAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DATiberiumNodeClass@@UAEXHI@Z
	DD	FLAT:??_EDATiberiumNodeClass@@UAEPAXI@Z
	DD	FLAT:?Get_Type@DATiberiumNodeClass@@UBEPBDXZ
	DD	FLAT:?Init@DATiberiumNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z
	DD	FLAT:?Contested_Event@DATiberiumNodeClass@@UAEXXZ
	DD	FLAT:?Capture_Event@DATiberiumNodeClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_07DFGIDBBA@Control?$AA@
CONST	SEGMENT
??_C@_07DFGIDBBA@Control?$AA@ DB 'Control', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7DAControlNodeClass@@6B@
CONST	SEGMENT
??_7DAControlNodeClass@@6B@ DD FLAT:??_R4DAControlNodeClass@@6B@ ; DAControlNodeClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DABaseNodeClass@@MAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DAControlNodeClass@@UAEXHI@Z
	DD	FLAT:??_EDAControlNodeClass@@UAEPAXI@Z
	DD	FLAT:?Get_Type@DAControlNodeClass@@UBEPBDXZ
	DD	FLAT:?Init@DAControlNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z
	DD	FLAT:?Contested_Event@DAControlNodeClass@@UAEXXZ
	DD	FLAT:?Capture_Event@DAControlNodeClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_1HC@GFLDAOOA@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@GFLDAOOA@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'a', 00H, '_', 00H, 't', 00H, 'e', 00H
	DB	'l', 00H, 'e', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FHBOOADJ@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@FHBOOADJ@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\da_teleporter.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HFDEGNLF@DATeleporterManagerClass?3?3Create@
CONST	SEGMENT
??_C@_0CM@HFDEGNLF@DATeleporterManagerClass?3?3Create@ DB 'DATeleporterMa'
	DB	'nagerClass::Create_Teleporter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAVDATeleporterClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAVDATeleporterClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAVDATeleporterClass@@@@6B@ ; DynamicVectorClass<DATeleporterClass *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDATeleporterClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAVDATeleporterClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAVDATeleporterClass@@@@6B@ DD FLAT:??_R4?$VectorClass@PAVDATeleporterClass@@@@6B@ ; VectorClass<DATeleporterClass *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDATeleporterClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAVDATeleporterClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z
	DD	FLAT:?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z
CONST	ENDS
;	COMDAT ??_C@_0BC@HEFMPENO@DATeleporterClass?$AA@
CONST	SEGMENT
??_C@_0BC@HEFMPENO@DATeleporterClass?$AA@ DB 'DATeleporterClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null?$AA@
CONST	SEGMENT
??_C@_04MLLLIHIP@null?$AA@ DB 'null', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7DATeleporterClass@@6B@
CONST	SEGMENT
??_7DATeleporterClass@@6B@ DD FLAT:??_R4DATeleporterClass@@6B@ ; DATeleporterClass::`vftable'
	DD	FLAT:??_EDATeleporterClass@@EAEPAXI@Z
	DD	FLAT:?Get_Name@DATeleporterClass@@UAEPBDXZ
	DD	FLAT:?Attach@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@DATeleporterClass@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@DATeleporterClass@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@DAGameObjObserverClass@@EAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Init@DAGameObjObserverClass@@UAEXXZ
	DD	FLAT:?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z
	DD	FLAT:?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z
	DD	FLAT:?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z
	DD	FLAT:?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Flip@DAGameObjObserverClass@@UAE_NXZ
	DD	FLAT:?Damage_Dealt_Request@DAGameObjObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Received_Request@DAGameObjObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?PowerUp_Grant@DAGameObjObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant@DAGameObjObserverClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Add_Weapon_Request@DAGameObjObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons@DAGameObjObserverClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_0DI@CFPPNDBF@DAVehicleSpawnManagerClass?3?3?$HODAV@
CONST	SEGMENT
??_C@_0DI@CFPPNDBF@DAVehicleSpawnManagerClass?3?3?$HODAV@ DB 'DAVehicleSp'
	DB	'awnManagerClass::~DAVehicleSpawnManagerClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JJABCFEP@DAVehicleSpawnManagerClass?3?3Crea@
CONST	SEGMENT
??_C@_0DC@JJABCFEP@DAVehicleSpawnManagerClass?3?3Crea@ DB 'DAVehicleSpawn'
	DB	'ManagerClass::Create_Air_Drop_Point', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@BDBAIANB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HG@BDBAIANB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'a', 00H, '_', 00H, 'v', 00H, 'e', 00H
	DB	'h', 00H, 'i', 00H, 'c', 00H, 'l', 00H, 'e', 00H, 's', 00H, 'p'
	DB	00H, 'a', 00H, 'w', 00H, 'n', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@OCMHCKEN@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DL@OCMHCKEN@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\da_vehiclespawn.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NDJNDFON@DAVehicleSpawnManagerClass?3?3Crea@
CONST	SEGMENT
??_C@_0CP@NDJNDFON@DAVehicleSpawnManagerClass?3?3Crea@ DB 'DAVehicleSpawn'
	DB	'ManagerClass::Create_Spawn_Point', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7DAVehicleSpawnManagerClass@@6B@
CONST	SEGMENT
??_7DAVehicleSpawnManagerClass@@6B@ DD FLAT:??_R4DAVehicleSpawnManagerClass@@6B@ ; DAVehicleSpawnManagerClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAVehicleSpawnManagerClass@@MAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DAEventClass@@UAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DAVehicleSpawnManagerClass@@MAEXHI@Z
	DD	FLAT:??_EDAVehicleSpawnManagerClass@@MAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ DD FLAT:??_R4?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@ ; VectorClass<DAVehicleSpawnPointClass *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z
	DD	FLAT:?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z
CONST	ENDS
;	COMDAT ??_7DAVehicleAirDropPointClass@@6B@
CONST	SEGMENT
??_7DAVehicleAirDropPointClass@@6B@ DD FLAT:??_R4DAVehicleAirDropPointClass@@6B@ ; DAVehicleAirDropPointClass::`vftable'
	DD	FLAT:?Spawn_Vehicle@DAVehicleAirDropPointClass@@UAEXPBVVehicleGameObjDef@@PAVSoldierGameObj@@@Z
	DD	FLAT:?Init@DAVehicleSpawnPointClass@@MAEXPBVINIClass@@ABVStringClass@@@Z
	DD	FLAT:??_EDAVehicleAirDropPointClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7DAVehicleSpawnPointClass@@6B@
CONST	SEGMENT
??_7DAVehicleSpawnPointClass@@6B@ DD FLAT:??_R4DAVehicleSpawnPointClass@@6B@ ; DAVehicleSpawnPointClass::`vftable'
	DD	FLAT:?Spawn_Vehicle@DAVehicleSpawnPointClass@@UAEXPBVVehicleGameObjDef@@PAVSoldierGameObj@@@Z
	DD	FLAT:?Init@DAVehicleSpawnPointClass@@MAEXPBVINIClass@@ABVStringClass@@@Z
	DD	FLAT:??_EDAVehicleSpawnPointClass@@MAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7DAGameObjObserverClass@@6B@
CONST	SEGMENT
??_7DAGameObjObserverClass@@6B@ DD FLAT:??_R4DAGameObjObserverClass@@6B@ ; DAGameObjObserverClass::`vftable'
	DD	FLAT:??_EDAGameObjObserverClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?Attach@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@DAGameObjObserverClass@@EAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Init@DAGameObjObserverClass@@UAEXXZ
	DD	FLAT:?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z
	DD	FLAT:?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z
	DD	FLAT:?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z
	DD	FLAT:?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Flip@DAGameObjObserverClass@@UAE_NXZ
	DD	FLAT:?Damage_Dealt_Request@DAGameObjObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Received_Request@DAGameObjObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?PowerUp_Grant@DAGameObjObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant@DAGameObjObserverClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Add_Weapon_Request@DAGameObjObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons@DAGameObjObserverClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_1HE@NOMOPGHL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HE@NOMOPGHL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'a', 00H, '_', 00H, 'n', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'a', 00H, 'g'
	DB	00H, 'e', 00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@BEAEGMFO@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DK@BEAEGMFO@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\da_nodemanager.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IEDAACLK@DANodeManagerClass?3?3?$HODANodeManag@
CONST	SEGMENT
??_C@_0CI@IEDAACLK@DANodeManagerClass?3?3?$HODANodeManag@ DB 'DANodeManag'
	DB	'erClass::~DANodeManagerClass', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7DANodeManagerClass@@6B@
CONST	SEGMENT
??_7DANodeManagerClass@@6B@ DD FLAT:??_R4DANodeManagerClass@@6B@ ; DANodeManagerClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DAEventClass@@UAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DAEventClass@@UAEXHI@Z
	DD	FLAT:??_EDANodeManagerClass@@EAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAVDABaseNodeClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAVDABaseNodeClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAVDABaseNodeClass@@@@6B@ ; DynamicVectorClass<DABaseNodeClass *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDABaseNodeClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAVDABaseNodeClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAVDABaseNodeClass@@@@6B@ DD FLAT:??_R4?$VectorClass@PAVDABaseNodeClass@@@@6B@ ; VectorClass<DABaseNodeClass *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDABaseNodeClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAVDABaseNodeClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z
	DD	FLAT:?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z
CONST	ENDS
;	COMDAT ??_C@_05BEKPGMFA@Spawn?$AA@
CONST	SEGMENT
??_C@_05BEKPGMFA@Spawn?$AA@ DB 'Spawn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7DASpawnNodeClass@@6B@
CONST	SEGMENT
??_7DASpawnNodeClass@@6B@ DD FLAT:??_R4DASpawnNodeClass@@6B@ ; DASpawnNodeClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DABaseNodeClass@@MAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DAEventClass@@UAEXHI@Z
	DD	FLAT:??_EDASpawnNodeClass@@UAEPAXI@Z
	DD	FLAT:?Get_Type@DASpawnNodeClass@@UBEPBDXZ
	DD	FLAT:?Init@DASpawnNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z
	DD	FLAT:?Contested_Event@DASpawnNodeClass@@MAEXXZ
	DD	FLAT:?Capture_Event@DASpawnNodeClass@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7DABaseNodeClass@@6B@
CONST	SEGMENT
??_7DABaseNodeClass@@6B@ DD FLAT:??_R4DABaseNodeClass@@6B@ ; DABaseNodeClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DABaseNodeClass@@MAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DAEventClass@@UAEXHI@Z
	DD	FLAT:??_EDABaseNodeClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?Init@DABaseNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z
	DD	FLAT:?Contested_Event@DABaseNodeClass@@MAEXXZ
	DD	FLAT:?Capture_Event@DABaseNodeClass@@MAEXXZ
CONST	ENDS
;	COMDAT ??_C@_0CK@PCAAENII@DASpawnManagerClass?3?3?$HODASpawnMan@
CONST	SEGMENT
??_C@_0CK@PCAAENII@DASpawnManagerClass?3?3?$HODASpawnMan@ DB 'DASpawnMana'
	DB	'gerClass::~DASpawnManagerClass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@EBKBOLIB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HE@EBKBOLIB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'a', 00H, '_', 00H, 's', 00H, 'p', 00H
	DB	'a', 00H, 'w', 00H, 'n', 00H, 's', 00H, 'y', 00H, 's', 00H, 't'
	DB	00H, 'e', 00H, 'm', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@FKAEAKEB@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DK@FKAEAKEB@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\da_spawnsystem.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GLNDKKDP@DASpawnManagerClass?3?3Create_Spaw@
CONST	SEGMENT
??_C@_0CI@GLNDKKDP@DASpawnManagerClass?3?3Create_Spaw@ DB 'DASpawnManager'
	DB	'Class::Create_Spawn_Point', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@
CONST	SEGMENT
??_7DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@ DD FLAT:??_R4DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@ ; DASpawnManagerClass::`vftable'
	DD	FLAT:??_EDASpawnManagerClass@@G3AEPAXI@Z
	DD	FLAT:?Create_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@EAEPAVDAPlayerDataClass@@XZ
CONST	ENDS
;	COMDAT ??_7DASpawnManagerClass@@6BDAEventClass@@@
CONST	SEGMENT
??_7DASpawnManagerClass@@6BDAEventClass@@@ DD FLAT:??_R4DASpawnManagerClass@@6BDAEventClass@@@ ; DASpawnManagerClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DASpawnManagerClass@@EAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DASpawnManagerClass@@EAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DASpawnManagerClass@@EAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DASpawnManagerClass@@EAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DAEventClass@@UAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DASpawnManagerClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DASpawnManagerClass@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DASpawnManagerClass@@EAEXHI@Z
	DD	FLAT:??_EDASpawnManagerClass@@EAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAVDASpawnPointClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAVDASpawnPointClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAVDASpawnPointClass@@@@6B@ ; DynamicVectorClass<DASpawnPointClass *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDASpawnPointClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAVDASpawnPointClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAVDASpawnPointClass@@@@6B@ DD FLAT:??_R4?$VectorClass@PAVDASpawnPointClass@@@@6B@ ; VectorClass<DASpawnPointClass *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDASpawnPointClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAVDASpawnPointClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z
	DD	FLAT:?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@
CONST	SEGMENT
??_7?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@ DD FLAT:??_R4?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`vftable'
	DD	FLAT:??_E?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z
	DD	FLAT:?Create_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@EAEPAVDAPlayerDataClass@@XZ
CONST	ENDS
;	COMDAT ??_7DASpawnPointClass@@6B@
CONST	SEGMENT
??_7DASpawnPointClass@@6B@ DD FLAT:??_R4DASpawnPointClass@@6B@ ; DASpawnPointClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DASpawnPointClass@@EAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DAEventClass@@UAEXHI@Z
	DD	FLAT:??_EDASpawnPointClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@H@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@H@@6B@ DD FLAT:??_R4?$DynamicVectorClass@H@@6B@ ; DynamicVectorClass<int>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@H@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@H@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@H@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@H@@UAEHABH@Z
	DD	FLAT:?ID@?$DynamicVectorClass@H@@UAEHPBH@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@H@@6B@
CONST	SEGMENT
??_7?$VectorClass@H@@6B@ DD FLAT:??_R4?$VectorClass@H@@6B@ ; VectorClass<int>::`vftable'
	DD	FLAT:??_E?$VectorClass@H@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@H@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@H@@UAE_NHPBH@Z
	DD	FLAT:?Clear@?$VectorClass@H@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@H@@UAEHABH@Z
	DD	FLAT:?ID@?$VectorClass@H@@UAEHPBH@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@VVector3@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@VVector3@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@VVector3@@@@6B@ ; DynamicVectorClass<Vector3>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@VVector3@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@VVector3@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@VVector3@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@VVector3@@@@UAEHABVVector3@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@VVector3@@@@UAEHPBVVector3@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@VVector3@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@VVector3@@@@6B@ DD FLAT:??_R4?$VectorClass@VVector3@@@@6B@ ; VectorClass<Vector3>::`vftable'
	DD	FLAT:??_E?$VectorClass@VVector3@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@VVector3@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z
	DD	FLAT:?Clear@?$VectorClass@VVector3@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@VVector3@@@@UAEHABVVector3@@@Z
	DD	FLAT:?ID@?$VectorClass@VVector3@@@@UAEHPBVVector3@@@Z
CONST	ENDS
;	COMDAT ??_7DASpawnPlayerDataClass@@6B@
CONST	SEGMENT
??_7DASpawnPlayerDataClass@@6B@ DD FLAT:??_R4DASpawnPlayerDataClass@@6B@ ; DASpawnPlayerDataClass::`vftable'
	DD	FLAT:??_EDASpawnPlayerDataClass@@UAEPAXI@Z
	DD	FLAT:?Init@DASpawnPlayerDataClass@@EAEXXZ
	DD	FLAT:?Clear_Level@DAPlayerDataClass@@UAEXXZ
	DD	FLAT:?Clear_Session@DAPlayerDataClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7DAPlayerDataClass@@6B@
CONST	SEGMENT
??_7DAPlayerDataClass@@6B@ DD FLAT:??_R4DAPlayerDataClass@@6B@ ; DAPlayerDataClass::`vftable'
	DD	FLAT:??_EDAPlayerDataClass@@UAEPAXI@Z
	DD	FLAT:?Init@DAPlayerDataClass@@UAEXXZ
	DD	FLAT:?Clear_Level@DAPlayerDataClass@@UAEXXZ
	DD	FLAT:?Clear_Session@DAPlayerDataClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7DAPlayerDataFactoryClass@@6B@
CONST	SEGMENT
??_7DAPlayerDataFactoryClass@@6B@ DD FLAT:??_R4DAPlayerDataFactoryClass@@6B@ ; DAPlayerDataFactoryClass::`vftable'
	DD	FLAT:??_EDAPlayerDataFactoryClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7DAPlayerObserverClass@@6B@
CONST	SEGMENT
??_7DAPlayerObserverClass@@6B@ DD FLAT:??_R4DAPlayerObserverClass@@6B@ ; DAPlayerObserverClass::`vftable'
	DD	FLAT:??_EDAPlayerObserverClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?Init@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Join@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Leave@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Level_Loaded@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Player_Loaded@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Name_Change@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Team_Change@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Character_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request@DAPlayerObserverClass@@UAEHAAMI@Z
	DD	FLAT:?Character_Purchase@DAPlayerObserverClass@@UAEXMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase@DAPlayerObserverClass@@UAEXMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase@DAPlayerObserverClass@@UAEXMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase@DAPlayerObserverClass@@UAEXMI@Z
	DD	FLAT:?Vehicle_Entry_Request@DAPlayerObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z
	DD	FLAT:?Vehicle_Enter@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z
	DD	FLAT:?Vehicle_Exit@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z
	DD	FLAT:?PowerUp_Grant_Request@DAPlayerObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant@DAPlayerObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request@DAPlayerObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?C4_Detonate_Request@DAPlayerObserverClass@@UAE_NPAVC4GameObj@@@Z
	DD	FLAT:?C4_Detonate@DAPlayerObserverClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character@DAPlayerObserverClass@@UAEXPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Dialog_Message@DAPlayerObserverClass@@UAEXW4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Created@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Destroyed@DAPlayerObserverClass@@UAEXXZ
	DD	FLAT:?Damage_Dealt_Request@DAPlayerObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Received_Request@DAPlayerObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom@DAPlayerObserverClass@@UAEXPAVScriptableGameObj@@HH@Z
	DD	FLAT:?Poked@DAPlayerObserverClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Timer_Expired@DAPlayerObserverClass@@UAEXHI@Z
	DD	FLAT:?Think@DAPlayerObserverClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ DD FLAT:??_R4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@ ; VectorClass<DAPlayerObserverKeyHookStruct *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z
	DD	FLAT:?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ DD FLAT:??_R4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@ ; VectorClass<DAPlayerObserverChatCommandStruct *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z
	DD	FLAT:?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ DD FLAT:??_R4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@ ; VectorClass<DAPlayerObserverTimerStruct *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z
	DD	FLAT:?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ DD FLAT:??_R4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z
	DD	FLAT:?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAVDAPlayerDataClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAVDAPlayerDataClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@6B@ ; DynamicVectorClass<DAPlayerDataClass *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDAPlayerDataClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAVDAPlayerDataClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAVDAPlayerDataClass@@@@6B@ DD FLAT:??_R4?$VectorClass@PAVDAPlayerDataClass@@@@6B@ ; VectorClass<DAPlayerDataClass *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDAPlayerDataClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAVDAPlayerDataClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z
	DD	FLAT:?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@6B@ ; DynamicVectorClass<DAPlayerObserverClass *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDAPlayerObserverClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAVDAPlayerObserverClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAVDAPlayerObserverClass@@@@6B@ DD FLAT:??_R4?$VectorClass@PAVDAPlayerObserverClass@@@@6B@ ; VectorClass<DAPlayerObserverClass *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVDAPlayerObserverClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z
	DD	FLAT:?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z
CONST	ENDS
;	COMDAT ??_7DAGameModeClass@@6B@
CONST	SEGMENT
??_7DAGameModeClass@@6B@ DD FLAT:??_R4DAGameModeClass@@6B@ ; DAGameModeClass::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:??_EDAGameModeClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7DAGameModeFactoryClass@@6B@
CONST	SEGMENT
??_7DAGameModeFactoryClass@@6B@ DD FLAT:??_R4DAGameModeFactoryClass@@6B@ ; DAGameModeFactoryClass::`vftable'
	DD	FLAT:??_EDAGameModeFactoryClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7DAEventClass@@6B@
CONST	SEGMENT
??_7DAEventClass@@6B@ DD FLAT:??_R4DAEventClass@@6B@	; DAEventClass::`vftable'
	DD	FLAT:?Settings_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
	DD	FLAT:?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
	DD	FLAT:?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
	DD	FLAT:?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
	DD	FLAT:?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
	DD	FLAT:?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
	DD	FLAT:?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
	DD	FLAT:?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Level_Loaded_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Remix_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Rebalance_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Swap_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Game_Over_Event@DAEventClass@@UAEXXZ
	DD	FLAT:?Console_Output_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
	DD	FLAT:?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
	DD	FLAT:?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
	DD	FLAT:?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
	DD	FLAT:?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
	DD	FLAT:?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
	DD	FLAT:?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
	DD	FLAT:?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
	DD	FLAT:?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
	DD	FLAT:?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
	DD	FLAT:?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
	DD	FLAT:?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
	DD	FLAT:?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
	DD	FLAT:?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
	DD	FLAT:?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
	DD	FLAT:?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
	DD	FLAT:?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
	DD	FLAT:?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
	DD	FLAT:?Think@DAEventClass@@UAEXXZ
	DD	FLAT:?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
	DD	FLAT:?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
	DD	FLAT:?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
	DD	FLAT:?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
	DD	FLAT:?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
	DD	FLAT:?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
	DD	FLAT:?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Timer_Expired@DAEventClass@@UAEXHI@Z
	DD	FLAT:??_EDAEventClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7JFW_Object_Created_Hook_Base@@6B@
CONST	SEGMENT
??_7JFW_Object_Created_Hook_Base@@6B@ DD FLAT:??_R4JFW_Object_Created_Hook_Base@@6B@ ; JFW_Object_Created_Hook_Base::`vftable'
	DD	FLAT:??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7MultiKeyHookScriptImpClass@@6B@
CONST	SEGMENT
??_7MultiKeyHookScriptImpClass@@6B@ DD FLAT:??_R4MultiKeyHookScriptImpClass@@6B@ ; MultiKeyHookScriptImpClass::`vftable'
	DD	FLAT:??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
CONST	SEGMENT
??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ DD FLAT:??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vftable'
	DD	FLAT:??_E?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z
	DD	FLAT:?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
	DD	FLAT:?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
	DD	FLAT:?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ
	DD	FLAT:?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
	DD	FLAT:?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
	DD	FLAT:?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ
	DD	FLAT:?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ
CONST	ENDS
;	COMDAT ??_7JFW_Key_Hook_Base@@6B@
CONST	SEGMENT
??_7JFW_Key_Hook_Base@@6B@ DD FLAT:??_R4JFW_Key_Hook_Base@@6B@ ; JFW_Key_Hook_Base::`vftable'
	DD	FLAT:??_EJFW_Key_Hook_Base@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ReferencerClass@@6B@
CONST	SEGMENT
??_7ReferencerClass@@6B@ DD FLAT:??_R4ReferencerClass@@6B@ ; ReferencerClass::`vftable'
	DD	FLAT:??_EReferencerClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@ReferencerClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7PostLoadableClass@@6B@
CONST	SEGMENT
??_7PostLoadableClass@@6B@ DD FLAT:??_R4PostLoadableClass@@6B@ ; PostLoadableClass::`vftable'
	DD	FLAT:??_EPostLoadableClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7INIClass@@6B@
CONST	SEGMENT
??_7INIClass@@6B@ DD FLAT:??_R4INIClass@@6B@		; INIClass::`vftable'
	DD	FLAT:??_EINIClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_vector.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ScriptFactory@@6B@
CONST	SEGMENT
??_7ScriptFactory@@6B@ DD FLAT:??_R4ScriptFactory@@6B@	; ScriptFactory::`vftable'
	DD	FLAT:??_EScriptFactory@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ScriptImpClass@@6B@
CONST	SEGMENT
??_7ScriptImpClass@@6B@ DD FLAT:??_R4ScriptImpClass@@6B@ ; ScriptImpClass::`vftable'
	DD	FLAT:??_EScriptImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7ScriptClass@@6B@
CONST	SEGMENT
??_7ScriptClass@@6B@ DD FLAT:??_R4ScriptClass@@6B@	; ScriptClass::`vftable'
	DD	FLAT:??_EScriptClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7GameObjObserverClass@@6B@
CONST	SEGMENT
??_7GameObjObserverClass@@6B@ DD FLAT:??_R4GameObjObserverClass@@6B@ ; GameObjObserverClass::`vftable'
	DD	FLAT:??_EGameObjObserverClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
CONST	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ??_EDADominationManagerClass@@G3AEPAXI@Z
_TEXT	SEGMENT
??_EDADominationManagerClass@@G3AEPAXI@Z PROC		; [thunk]:DADominationManagerClass::`vector deleting destructor', COMDAT
	sub	ecx, 4
	jmp	??_EDADominationManagerClass@@EAEPAXI@Z
??_EDADominationManagerClass@@G3AEPAXI@Z ENDP		; [thunk]:DADominationManagerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ??_EDASpawnManagerClass@@G3AEPAXI@Z
_TEXT	SEGMENT
??_EDASpawnManagerClass@@G3AEPAXI@Z PROC		; [thunk]:DASpawnManagerClass::`vector deleting destructor', COMDAT
	sub	ecx, 4
	jmp	??_EDASpawnManagerClass@@EAEPAXI@Z
??_EDASpawnManagerClass@@G3AEPAXI@Z ENDP		; [thunk]:DASpawnManagerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ PROC ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 46   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ENDP ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??B?$RefArray@D$03@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArray@D$03@@QAEPADXZ PROC			; RefArray<char,4>::operator char *, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 46   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArray@D$03@@QAEPADXZ ENDP			; RefArray<char,4>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ
text$yd	SEGMENT
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ PROC ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
	call	??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ENDP ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplatekeyclass.h
;	COMDAT ?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z PROC ; HashTemplateKeyClass<StringClass>::Get_Hash_Value, COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 34   : 	return key.GetHash();

	mov	ecx, DWORD PTR _key$[ebp]
	call	?GetHash@StringClass@@QBEIXZ		; StringClass::GetHash

; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z ENDP ; HashTemplateKeyClass<StringClass>::Get_Hash_Value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z
_TEXT	SEGMENT
_endDword$ = -12					; size = 4
_dword$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
_pattern$ = 12						; size = 4
?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z PROC ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern, COMDAT
; _this$ = ecx

; 1445 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1446 : #ifdef DEBUG
; 1447 : 		static_assert(sizeof(T) % 4 == 0, "Expected type size to be a multiple of 4.");
; 1448 : 		DWORD* dword = (DWORD*)&object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _dword$[ebp], eax

; 1449 : 		DWORD* endDword = (DWORD*)(&object+1);

	mov	eax, DWORD PTR _object$[ebp]
	add	eax, 8
	mov	DWORD PTR _endDword$[ebp], eax

; 1450 : 		for (; dword < endDword; ++dword)

	jmp	SHORT $LN3@writeDummy
$LN2@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	add	eax, 4
	mov	DWORD PTR _dword$[ebp], eax
$LN3@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	cmp	eax, DWORD PTR _endDword$[ebp]
	jae	SHORT $LN4@writeDummy

; 1451 : 			*dword = pattern;

	mov	eax, DWORD PTR _dword$[ebp]
	mov	ecx, DWORD PTR _pattern$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN2@writeDummy
$LN4@writeDummy:

; 1452 : #endif
; 1453 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ENDP ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z
_TEXT	SEGMENT
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z PROC ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory, COMDAT
; _this$ = ecx

; 1436 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1437 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1438 : 		writeDummyPattern(object, 0xEDE7E10D);

	push	-303570675				; ede7e10dH
	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern

; 1439 : 		(T*&)object = FreeListHead;

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1440 : 		FreeListHead = &object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx

; 1441 : 		FreeObjectCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1442 : 	}

	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ENDP ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ
_TEXT	SEGMENT
tv82 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
_object$ = -20						; size = 4
_i$3 = -16						; size = 4
_newBlockListHead$4 = -12				; size = 4
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory, COMDAT
; _this$ = ecx

; 1413 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1415 :  		if (!FreeListHead)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN4@Allocate_O

; 1416 : 		{
; 1417 : 			void* newBlockListHead = (void*)((void*)new char[sizeof(void*) + sizeof(T[BLOCK_SIZE])]);

	push	OFFSET ??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@
	push	1417					; 00000589H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Allocate_O
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_O
	push	1417					; 00000589H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN7@Allocate_O:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN9@Allocate_O
$LN8@Allocate_O:
	push	2052					; 00000804H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN9@Allocate_O:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _newBlockListHead$4[ebp], ecx

; 1418 : 			*(void**)newBlockListHead = BlockListHead;

	mov	eax, DWORD PTR _newBlockListHead$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1419 : 			BlockListHead = newBlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newBlockListHead$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1420 : 			FreeListHead = (T*)((intptr_t)BlockListHead + sizeof(void*));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1421 : 			for (int i = 0; i < BLOCK_SIZE; i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@Allocate_O
$LN2@Allocate_O:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@Allocate_O:
	cmp	DWORD PTR _i$3[ebp], 256		; 00000100H
	jge	SHORT $LN1@Allocate_O

; 1422 : 				(T*&)FreeListHead[i] = &FreeListHead[i+1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
	jmp	SHORT $LN2@Allocate_O
$LN1@Allocate_O:

; 1423 : 			
; 1424 : 			(T*&)FreeListHead[BLOCK_SIZE-1] = NULL;

	mov	eax, 8
	imul	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], 0

; 1425 : 			FreeObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1426 : 			TotalObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN4@Allocate_O:

; 1427 : 		}
; 1428 : 
; 1429 : 		T* object = FreeListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _object$[ebp], ecx

; 1430 : 		FreeListHead = *(T**)(FreeListHead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1431 : 		FreeObjectCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1432 : 		return object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	mov	eax, DWORD PTR $T2[ebp]

; 1433 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
$T1 = -336						; size = 4
_nextBlock$2 = -268					; size = 4
_block$ = -264						; size = 4
_buffer$3 = -260					; size = 256
_this$ = -4						; size = 4
??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>, COMDAT
; _this$ = ecx

; 1393 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1394 : 		// If you hit the following assert, one or more objects were not freed.
; 1395 : 		if (FreeObjectCount != TotalObjectCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN3@ObjectPool

; 1396 : 		{
; 1397 : 			char buffer[256];
; 1398 : 			sprintf(buffer, "%d memory leaks found in " __FUNCTION__ "\n", TotalObjectCount - FreeObjectCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 1399 : 			OutputDebugStringA(buffer);

	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN3@ObjectPool:

; 1400 : 			// TODO: There are quite a few mem leaks of this kind. Fix them.
; 1401 : 		}
; 1402 : 
; 1403 : 		void* block = BlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _block$[ebp], ecx
$LN2@ObjectPool:

; 1404 :  		while (block)

	cmp	DWORD PTR _block$[ebp], 0
	je	SHORT $LN4@ObjectPool

; 1405 : 		{
; 1406 : 			void* nextBlock = *(void**)block;

	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nextBlock$2[ebp], ecx

; 1407 : 			delete[] block;

	push	OFFSET ??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@
	push	1407					; 0000057fH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@ObjectPool
	xor	ecx, ecx
	jne	SHORT $LN6@ObjectPool
	push	1407					; 0000057fH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@ObjectPool:
	jmp	SHORT $LN8@ObjectPool
$LN7@ObjectPool:
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@ObjectPool:

; 1408 : 			block = nextBlock;

	mov	eax, DWORD PTR _nextBlock$2[ebp]
	mov	DWORD PTR _block$[ebp], eax

; 1409 : 		}

	jmp	SHORT $LN2@ObjectPool
$LN4@ObjectPool:

; 1410 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>, COMDAT
; _this$ = ecx

; 1384 : 	ObjectPoolClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::FastCriticalSectionClass
	mov	eax, DWORD PTR [eax]

; 1385 : 	{
; 1386 : 		FreeListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1387 : 		BlockListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1388 : 		FreeObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1389 : 		TotalObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1390 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\singleton.h
;	COMDAT ?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ
_TEXT	SEGMENT
?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ PROC ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 		static T instancex;

	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getInstanc
	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
	or	eax, 1
	mov	DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51, eax
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
	call	??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
	push	OFFSET ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
	call	_atexit
	add	esp, 4
$LN1@getInstanc:

; 61   : 		return instancex;

	mov	eax, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex

; 62   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ENDP ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EEntry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EEntry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEPAXI@Z PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EEntry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEPAXI@Z ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::~Entry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$PairClass@HVStringClass@@@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::~Entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::Entry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$PairClass@HVStringClass@@@@QAE@XZ	; PairClass<int,StringClass>::PairClass<int,StringClass>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Entry::Entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVDATeleporterClass@@@std@@YA$$QAPAVDATeleporterClass@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVDATeleporterClass@@@std@@YA$$QAPAVDATeleporterClass@@AAPAV1@@Z PROC ; std::move<DATeleporterClass * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVDATeleporterClass@@@std@@YA$$QAPAVDATeleporterClass@@AAPAV1@@Z ENDP ; std::move<DATeleporterClass * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVDAVehicleSpawnPointClass@@@std@@YA$$QAPAVDAVehicleSpawnPointClass@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVDAVehicleSpawnPointClass@@@std@@YA$$QAPAVDAVehicleSpawnPointClass@@AAPAV1@@Z PROC ; std::move<DAVehicleSpawnPointClass * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVDAVehicleSpawnPointClass@@@std@@YA$$QAPAVDAVehicleSpawnPointClass@@AAPAV1@@Z ENDP ; std::move<DAVehicleSpawnPointClass * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVDABaseNodeClass@@@std@@YA$$QAPAVDABaseNodeClass@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVDABaseNodeClass@@@std@@YA$$QAPAVDABaseNodeClass@@AAPAV1@@Z PROC ; std::move<DABaseNodeClass * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVDABaseNodeClass@@@std@@YA$$QAPAVDABaseNodeClass@@AAPAV1@@Z ENDP ; std::move<DABaseNodeClass * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVDASpawnPointClass@@@std@@YA$$QAPAVDASpawnPointClass@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVDASpawnPointClass@@@std@@YA$$QAPAVDASpawnPointClass@@AAPAV1@@Z PROC ; std::move<DASpawnPointClass * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVDASpawnPointClass@@@std@@YA$$QAPAVDASpawnPointClass@@AAPAV1@@Z ENDP ; std::move<DASpawnPointClass * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAH@std@@YA$$QAHAAH@Z PROC			; std::move<int &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAVVector3@@@std@@YA$$QAVVector3@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVVector3@@@std@@YA$$QAVVector3@@AAV1@@Z PROC	; std::move<Vector3 &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAVVector3@@@std@@YA$$QAVVector3@@AAV1@@Z ENDP	; std::move<Vector3 &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAUDAPlayerObserverKeyHookStruct@@@std@@YA$$QAPAUDAPlayerObserverKeyHookStruct@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAUDAPlayerObserverKeyHookStruct@@@std@@YA$$QAPAUDAPlayerObserverKeyHookStruct@@AAPAU1@@Z PROC ; std::move<DAPlayerObserverKeyHookStruct * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAUDAPlayerObserverKeyHookStruct@@@std@@YA$$QAPAUDAPlayerObserverKeyHookStruct@@AAPAU1@@Z ENDP ; std::move<DAPlayerObserverKeyHookStruct * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAUDAPlayerObserverChatCommandStruct@@@std@@YA$$QAPAUDAPlayerObserverChatCommandStruct@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAUDAPlayerObserverChatCommandStruct@@@std@@YA$$QAPAUDAPlayerObserverChatCommandStruct@@AAPAU1@@Z PROC ; std::move<DAPlayerObserverChatCommandStruct * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAUDAPlayerObserverChatCommandStruct@@@std@@YA$$QAPAUDAPlayerObserverChatCommandStruct@@AAPAU1@@Z ENDP ; std::move<DAPlayerObserverChatCommandStruct * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAUDAPlayerObserverTimerStruct@@@std@@YA$$QAPAUDAPlayerObserverTimerStruct@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAUDAPlayerObserverTimerStruct@@@std@@YA$$QAPAUDAPlayerObserverTimerStruct@@AAPAU1@@Z PROC ; std::move<DAPlayerObserverTimerStruct * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAUDAPlayerObserverTimerStruct@@@std@@YA$$QAPAUDAPlayerObserverTimerStruct@@AAPAU1@@Z ENDP ; std::move<DAPlayerObserverTimerStruct * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAUDAPlayerTagStruct@DAPlayerClass@@@std@@YA$$QAPAUDAPlayerTagStruct@DAPlayerClass@@AAPAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAUDAPlayerTagStruct@DAPlayerClass@@@std@@YA$$QAPAUDAPlayerTagStruct@DAPlayerClass@@AAPAU12@@Z PROC ; std::move<DAPlayerClass::DAPlayerTagStruct * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAUDAPlayerTagStruct@DAPlayerClass@@@std@@YA$$QAPAUDAPlayerTagStruct@DAPlayerClass@@AAPAU12@@Z ENDP ; std::move<DAPlayerClass::DAPlayerTagStruct * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVDAPlayerDataClass@@@std@@YA$$QAPAVDAPlayerDataClass@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVDAPlayerDataClass@@@std@@YA$$QAPAVDAPlayerDataClass@@AAPAV1@@Z PROC ; std::move<DAPlayerDataClass * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVDAPlayerDataClass@@@std@@YA$$QAPAVDAPlayerDataClass@@AAPAV1@@Z ENDP ; std::move<DAPlayerDataClass * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVDAPlayerObserverClass@@@std@@YA$$QAPAVDAPlayerObserverClass@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVDAPlayerObserverClass@@@std@@YA$$QAPAVDAPlayerObserverClass@@AAPAV1@@Z PROC ; std::move<DAPlayerObserverClass * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVDAPlayerObserverClass@@@std@@YA$$QAPAVDAPlayerObserverClass@@AAPAV1@@Z ENDP ; std::move<DAPlayerObserverClass * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 69   : 	SLNode(T *obj) : GenericSLNode(obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericSLNode@@IAE@PAX@Z		; GenericSLNode::GenericSLNode
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (T*)NodeData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		return (SLNode<T>*)NodeNext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next, COMDAT
; _this$ = ecx

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 		NodeNext = n;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx

; 59   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FDADominationManagerClassRegistrant@@YAXXZ
text$yd	SEGMENT
??__FDADominationManagerClassRegistrant@@YAXXZ PROC	; `dynamic atexit destructor for 'DADominationManagerClassRegistrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	??1?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FDADominationManagerClassRegistrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'DADominationManagerClassRegistrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ??__EDADominationManagerClassRegistrant@@YAXXZ
text$yc	SEGMENT
??__EDADominationManagerClassRegistrant@@YAXXZ PROC	; `dynamic initializer for 'DADominationManagerClassRegistrant'', COMDAT

; 400  : Register_Game_Mode(DADominationManagerClass,"Domination","Domination","Control1_Node_X");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BA@NCNLMLDB@Control1_Node_X?$AA@
	push	OFFSET ??_C@_0L@FKCFHJBF@Domination?$AA@
	push	OFFSET ??_C@_0L@FKCFHJBF@Domination?$AA@
	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	??0?$DAGameModeRegistrant@VDADominationManagerClass@@@@QAE@PBD00@Z ; DAGameModeRegistrant<DADominationManagerClass>::DAGameModeRegistrant<DADominationManagerClass>
	push	OFFSET ??__FDADominationManagerClassRegistrant@@YAXXZ ; `dynamic atexit destructor for 'DADominationManagerClassRegistrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EDADominationManagerClassRegistrant@@YAXXZ ENDP	; `dynamic initializer for 'DADominationManagerClassRegistrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateiterator.h
;	COMDAT ??B?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
??B?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBE_NXZ PROC ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator bool, COMDAT
; _this$ = ecx

; 86   : 	operator bool() const { return index != -1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBE_NXZ ENDP ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateiterator.h
;	COMDAT ??E?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ PROC ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator++, COMDAT
; _this$ = ecx

; 85   : 	void operator++() { increment(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?increment@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::increment
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ ENDP ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateiterator.h
;	COMDAT ?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ PROC ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue, COMDAT
; _this$ = ecx

; 83   : 	Value& getValue() { return table->entries[index].value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [ecx+eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ ENDP ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateiterator.h
;	COMDAT ?getKey@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getKey@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEABVStringClass@@XZ PROC ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getKey, COMDAT
; _this$ = ecx

; 82   : 	const Key& getKey() { return table->entries[index].key; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [ecx+eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getKey@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEABVStringClass@@XZ ENDP ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateiterator.h
;	COMDAT ?reset@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?reset@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ PROC ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::reset, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 		index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], -1

; 62   : 		
; 63   : 		for (hash = 0; hash < table->maxHashCount; hash++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN4@reset
$LN3@reset:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@reset:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+12]
	jae	SHORT $LN5@reset

; 64   : 		{
; 65   : 			index = table->indices[hash];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+4], eax

; 66   : 			if (index != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN1@reset

; 67   : 				break;

	jmp	SHORT $LN5@reset
$LN1@reset:

; 68   : 		}

	jmp	SHORT $LN3@reset
$LN5@reset:

; 69   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?reset@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ ENDP ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::reset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateiterator.h
;	COMDAT ??0?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@AAV?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__table$ = 8						; size = 4
??0?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@AAV?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@@Z PROC ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::HashTemplateIterator<StringClass,PairClass<int,StringClass> >, COMDAT
; _this$ = ecx

; 51   : 	HashTemplateIterator(HashTemplateClass<Key, Value>& _table)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 	{
; 53   : 		table = &_table;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __table$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 54   : 		reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?reset@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::reset

; 55   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@AAV?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@@Z ENDP ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::HashTemplateIterator<StringClass,PairClass<int,StringClass> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateiterator.h
;	COMDAT ?increment@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?increment@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ PROC ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::increment, COMDAT
; _this$ = ecx

; 32   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 		index = table->entries[index].next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx+4], eax

; 34   : 		if (index == -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN6@increment

; 35   : 		{
; 36   : 			for (hash++; hash < table->maxHashCount; hash++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN4@increment
$LN3@increment:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@increment:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+12]
	jae	SHORT $LN6@increment

; 37   : 			{
; 38   : 				index = table->indices[hash];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+4], eax

; 39   : 				if (index != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN1@increment

; 40   : 					break;

	jmp	SHORT $LN6@increment
$LN1@increment:

; 41   : 			}

	jmp	SHORT $LN3@increment
$LN6@increment:

; 42   : 		}
; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?increment@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ ENDP ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::increment
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$PairClass@HVStringClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$PairClass@HVStringClass@@@@QAE@XZ PROC		; PairClass<int,StringClass>::~PairClass<int,StringClass>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$PairClass@HVStringClass@@@@QAE@XZ ENDP		; PairClass<int,StringClass>::~PairClass<int,StringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_da.h
;	COMDAT ??4?$PairClass@HVStringClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_That$ = 8						; size = 4
??4?$PairClass@HVStringClass@@@@QAEAAV0@ABV0@@Z PROC	; PairClass<int,StringClass>::operator=, COMDAT
; _this$ = ecx

; 46   : 	inline PairClass &operator=(const PairClass &That) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		First = That.First;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _That$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 48   : 		Second = That.Second;

	mov	eax, DWORD PTR _That$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 49   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$PairClass@HVStringClass@@@@QAEAAV0@ABV0@@Z ENDP	; PairClass<int,StringClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_da.h
;	COMDAT ??0?$PairClass@HVStringClass@@@@QAE@ABHABVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_second$ = 12						; size = 4
??0?$PairClass@HVStringClass@@@@QAE@ABHABVStringClass@@@Z PROC ; PairClass<int,StringClass>::PairClass<int,StringClass>, COMDAT
; _this$ = ecx

; 39   : 	inline PairClass(const A &first,const B &second) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 40   : 		First = first;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _first$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 41   : 		Second = second;

	mov	eax, DWORD PTR _second$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$PairClass@HVStringClass@@@@QAE@ABHABVStringClass@@@Z ENDP ; PairClass<int,StringClass>::PairClass<int,StringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_da.h
;	COMDAT ??0?$PairClass@HVStringClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$PairClass@HVStringClass@@@@QAE@XZ PROC		; PairClass<int,StringClass>::PairClass<int,StringClass>, COMDAT
; _this$ = ecx

; 38   : 	inline PairClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$PairClass@HVStringClass@@@@QAE@XZ ENDP		; PairClass<int,StringClass>::PairClass<int,StringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Insert@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXABVStringClass@@ABV?$PairClass@HVStringClass@@@@@Z
_TEXT	SEGMENT
_hash$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_value$ = 12						; size = 4
?Insert@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXABVStringClass@@ABV?$PairClass@HVStringClass@@@@@Z PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Insert, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		// If all entries are in use, enlarge the table
; 154  : 		if (unusedEntryIndex == -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], -1
	jne	SHORT $LN1@Insert

; 155  : 			Re_Hash();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Re_Hash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Re_Hash
$LN1@Insert:

; 156  : 		
; 157  : 		uint index = unusedEntryIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _index$[ebp], ecx

; 158  : 		unusedEntryIndex = entries[index].next;

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], edx

; 159  : 		
; 160  : 		uint hash = computeHash(key);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@ABEIABVStringClass@@@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash
	mov	DWORD PTR _hash$[ebp], eax

; 161  : 		entries[index].key = key;

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx+4]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 162  : 		entries[index].value = value;

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx+8]
	call	??4?$PairClass@HVStringClass@@@@QAEAAV0@ABV0@@Z ; PairClass<int,StringClass>::operator=

; 163  : 		entries[index].next = indices[hash];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esi, DWORD PTR _hash$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx], ecx

; 164  : 		indices[hash] = index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 165  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXABVStringClass@@ABV?$PairClass@HVStringClass@@@@@Z ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Get@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBEPAV?$PairClass@HVStringClass@@@@ABVStringClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?Get@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBEPAV?$PairClass@HVStringClass@@@@ABVStringClass@@@Z PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Get, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 		if (indices)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Get

; 127  : 			for (uint index = indices[computeHash(key)]; index != -1; index = entries[index].next)

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@ABEIABVStringClass@@@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _index$1[ebp], eax
	jmp	SHORT $LN4@Get
$LN3@Get:
	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _index$1[ebp], eax
$LN4@Get:
	cmp	DWORD PTR _index$1[ebp], -1
	je	SHORT $LN5@Get

; 128  : 				if (entries[index].key == key)

	mov	ecx, DWORD PTR _key$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [edx+eax+4]
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Get

; 129  : 					return &entries[index].value;

	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax+8]
	jmp	SHORT $LN6@Get
$LN1@Get:

; 130  : 		
; 131  : 		return NULL;

	jmp	SHORT $LN3@Get
$LN5@Get:
	xor	eax, eax
$LN6@Get:

; 132  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBEPAV?$PairClass@HVStringClass@@@@ABVStringClass@@@Z ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ??1?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ
_TEXT	SEGMENT
tv88 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
_this$ = -4						; size = 4
??1?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::~HashTemplateClass<StringClass,PairClass<int,StringClass> >, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 		delete[] indices;

	push	OFFSET ??_C@_0GB@JNPOOKEF@HashTemplateClass?$DMclass?5StringCl@
	push	118					; 00000076H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN4@HashTempla
	xor	ecx, ecx
	jne	SHORT $LN3@HashTempla
	push	118					; 00000076H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@HashTempla:
	jmp	SHORT $LN5@HashTempla
$LN4@HashTempla:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN5@HashTempla:

; 119  : 		delete[] entries;

	push	OFFSET ??_C@_0GB@JNPOOKEF@HashTemplateClass?$DMclass?5StringCl@
	push	119					; 00000077H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@HashTempla
	xor	ecx, ecx
	jne	SHORT $LN6@HashTempla
	push	119					; 00000077H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@HashTempla:
	jmp	SHORT $LN1@HashTempla
$LN9@HashTempla:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@HashTempla
	push	3
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_EEntry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEPAXI@Z
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN1@HashTempla
$LN7@HashTempla:
	mov	DWORD PTR tv88[ebp], 0
$LN1@HashTempla:

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::~HashTemplateClass<StringClass,PairClass<int,StringClass> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ??0?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::HashTemplateClass<StringClass,PairClass<int,StringClass> >, COMDAT
; _this$ = ecx

; 106  : 	HashTemplateClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 	{
; 108  : 		indices = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 109  : 		entries = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 110  : 		unusedEntryIndex = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 111  : 		maxHashCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 112  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::HashTemplateClass<StringClass,PairClass<int,StringClass> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Re_Hash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ
_TEXT	SEGMENT
tv129 = -132						; size = 4
tv232 = -128						; size = 4
tv148 = -128						; size = 4
tv131 = -128						; size = 4
tv69 = -128						; size = 4
$T1 = -124						; size = 4
$T2 = -120						; size = 4
$T3 = -116						; size = 4
$T4 = -112						; size = 4
$T5 = -108						; size = 4
$T6 = -104						; size = 4
_i$7 = -36						; size = 4
_hash2$8 = -32						; size = 4
_index$9 = -28						; size = 4
_hash$10 = -24						; size = 4
_index$11 = -20						; size = 4
_newIndices$ = -16					; size = 4
_newEntries$ = -12					; size = 4
_newMaxHashCount$ = -8					; size = 4
_this$ = -4						; size = 4
?Re_Hash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Re_Hash, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		uint newMaxHashCount = max(maxHashCount * 2, 4); // Increase the size and make sure there are at least 4 entries.

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	cmp	ecx, 4
	jbe	SHORT $LN15@Re_Hash
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shl	eax, 1
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN16@Re_Hash
$LN15@Re_Hash:
	mov	DWORD PTR tv69[ebp], 4
$LN16@Re_Hash:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _newMaxHashCount$[ebp], ecx

; 64   : 		
; 65   : 		Entry* newEntries = new Entry[newMaxHashCount];

	push	OFFSET ??_C@_0FG@GMMBDHFC@HashTemplateClass?$DMclass?5StringCl@
	push	65					; 00000041H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN20@Re_Hash
	xor	ecx, ecx
	jne	SHORT $LN17@Re_Hash
	push	65					; 00000041H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN17@Re_Hash:
	mov	DWORD PTR tv131[ebp], 0
	jmp	SHORT $LN21@Re_Hash
$LN20@Re_Hash:
	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN18@Re_Hash
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??0Entry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN19@Re_Hash
$LN18@Re_Hash:
	mov	DWORD PTR tv129[ebp], 0
$LN19@Re_Hash:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR tv131[ebp], eax
$LN21@Re_Hash:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _newEntries$[ebp], ecx

; 66   : 		int* newIndices = new int[newMaxHashCount];

	push	OFFSET ??_C@_0FG@GMMBDHFC@HashTemplateClass?$DMclass?5StringCl@
	push	66					; 00000042H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN23@Re_Hash
	xor	ecx, ecx
	jne	SHORT $LN22@Re_Hash
	push	66					; 00000042H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN22@Re_Hash:
	mov	DWORD PTR tv148[ebp], 0
	jmp	SHORT $LN24@Re_Hash
$LN23@Re_Hash:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv148[ebp], eax
$LN24@Re_Hash:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR _newIndices$[ebp], ecx

; 67   : 		unusedEntryIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 68   : 		
; 69   : 		for (uint index = 0; index < newMaxHashCount; index++)

	mov	DWORD PTR _index$11[ebp], 0
	jmp	SHORT $LN12@Re_Hash
$LN11@Re_Hash:
	mov	eax, DWORD PTR _index$11[ebp]
	add	eax, 1
	mov	DWORD PTR _index$11[ebp], eax
$LN12@Re_Hash:
	mov	eax, DWORD PTR _index$11[ebp]
	cmp	eax, DWORD PTR _newMaxHashCount$[ebp]
	jae	SHORT $LN10@Re_Hash

; 70   : 			newIndices[index] = -1;

	mov	eax, DWORD PTR _index$11[ebp]
	mov	ecx, DWORD PTR _newIndices$[ebp]
	mov	DWORD PTR [ecx+eax*4], -1
	jmp	SHORT $LN11@Re_Hash
$LN10@Re_Hash:

; 71   : 		
; 72   : 		for (uint hash = 0; hash < maxHashCount; hash++)

	mov	DWORD PTR _hash$10[ebp], 0
	jmp	SHORT $LN9@Re_Hash
$LN8@Re_Hash:
	mov	eax, DWORD PTR _hash$10[ebp]
	add	eax, 1
	mov	DWORD PTR _hash$10[ebp], eax
$LN9@Re_Hash:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hash$10[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	$LN7@Re_Hash

; 73   : 		{
; 74   : 			for (int index = indices[hash]; index != -1; index = entries[index].next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hash$10[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _index$9[ebp], eax
	jmp	SHORT $LN6@Re_Hash
$LN5@Re_Hash:
	mov	eax, DWORD PTR _index$9[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _index$9[ebp], eax
$LN6@Re_Hash:
	cmp	DWORD PTR _index$9[ebp], -1
	je	$LN4@Re_Hash

; 75   : 			{
; 76   : 				uint hash2 = computeHash(entries[index].key, newMaxHashCount);

	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$9[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx+4]
	push	ecx
	call	?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@CAIABVStringClass@@I@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash
	add	esp, 8
	mov	DWORD PTR _hash2$8[ebp], eax

; 77   : 				
; 78   : 				newEntries[unusedEntryIndex].next = newIndices[hash2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 4
	mov	edx, DWORD PTR _newEntries$[ebp]
	mov	eax, DWORD PTR _hash2$8[ebp]
	mov	esi, DWORD PTR _newIndices$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx], eax

; 79   : 				newEntries[unusedEntryIndex].key = entries[index].key;

	mov	eax, DWORD PTR _index$9[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 4
	mov	eax, DWORD PTR _newEntries$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 80   : 				newEntries[unusedEntryIndex].value = entries[index].value;

	mov	eax, DWORD PTR _index$9[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 4
	mov	eax, DWORD PTR _newEntries$[ebp]
	lea	ecx, DWORD PTR [eax+edx+8]
	call	??4?$PairClass@HVStringClass@@@@QAEAAV0@ABV0@@Z ; PairClass<int,StringClass>::operator=

; 81   : 				
; 82   : 				newIndices[hash2] = unusedEntryIndex;

	mov	eax, DWORD PTR _hash2$8[ebp]
	mov	ecx, DWORD PTR _newIndices$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax*4], edx

; 83   : 				unusedEntryIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 84   : 			}

	jmp	$LN5@Re_Hash
$LN4@Re_Hash:

; 85   : 		}

	jmp	$LN8@Re_Hash
$LN7@Re_Hash:

; 86   : 		
; 87   : 		delete[] indices;

	push	OFFSET ??_C@_0FG@GMMBDHFC@HashTemplateClass?$DMclass?5StringCl@
	push	87					; 00000057H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN26@Re_Hash
	xor	ecx, ecx
	jne	SHORT $LN25@Re_Hash
	push	87					; 00000057H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN25@Re_Hash:
	jmp	SHORT $LN27@Re_Hash
$LN26@Re_Hash:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN27@Re_Hash:

; 88   : 		delete[] entries;

	push	OFFSET ??_C@_0FG@GMMBDHFC@HashTemplateClass?$DMclass?5StringCl@
	push	88					; 00000058H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN31@Re_Hash
	xor	ecx, ecx
	jne	SHORT $LN28@Re_Hash
	push	88					; 00000058H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN28@Re_Hash:
	jmp	SHORT $LN32@Re_Hash
$LN31@Re_Hash:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN29@Re_Hash
	push	3
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_EEntry@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEPAXI@Z
	mov	DWORD PTR tv232[ebp], eax
	jmp	SHORT $LN32@Re_Hash
$LN29@Re_Hash:
	mov	DWORD PTR tv232[ebp], 0
$LN32@Re_Hash:

; 89   : 		
; 90   : 		for (uint i = unusedEntryIndex; i < newMaxHashCount-1; i++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _i$7[ebp], ecx
	jmp	SHORT $LN3@Re_Hash
$LN2@Re_Hash:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN3@Re_Hash:
	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$7[ebp], eax
	jae	SHORT $LN1@Re_Hash

; 91   : 			newEntries[i].next = i + 1;

	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _i$7[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _newEntries$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	jmp	SHORT $LN2@Re_Hash
$LN1@Re_Hash:

; 92   : 	
; 93   : 		newEntries[newMaxHashCount-1].next = -1;

	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	sub	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _newEntries$[ebp]
	mov	DWORD PTR [ecx+eax], -1

; 94   : 		
; 95   : 		indices = newIndices;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newIndices$[ebp]
	mov	DWORD PTR [eax], ecx

; 96   : 		entries = newEntries;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newEntries$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 97   : 		maxHashCount = newMaxHashCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMaxHashCount$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Re_Hash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@AAEXXZ ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Re_Hash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@ABEIABVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@ABEIABVStringClass@@@Z PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return computeHash(key, maxHashCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@CAIABVStringClass@@I@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash
	add	esp, 8

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@ABEIABVStringClass@@@Z ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@CAIABVStringClass@@I@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
_maxHashCount$ = 12					; size = 4
?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@CAIABVStringClass@@I@Z PROC ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash, COMDAT

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN3@computeHas:

; 48   : 		TT_ASSERT(isPowerOfTwo(maxHashCount)); // Make sure maxHashCount is a power of two, or the fast modulo code below will not work

	xor	eax, eax
	jne	SHORT $LN3@computeHas
	mov	eax, DWORD PTR _maxHashCount$[ebp]
	push	eax
	call	?isPowerOfTwo@@YA_NH@Z			; isPowerOfTwo
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@computeHas
	int	3
$LN1@computeHas:

; 49   : 		return HashTemplateKeyClass<Key>::Get_Hash_Value(key) & (maxHashCount - 1);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z ; HashTemplateKeyClass<StringClass>::Get_Hash_Value
	add	esp, 4
	mov	ecx, DWORD PTR _maxHashCount$[ebp]
	sub	ecx, 1
	and	eax, ecx

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?computeHash@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@CAIABVStringClass@@I@Z ENDP ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::computeHash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ??$Create_Node@VDATiberiumNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv82 = -80						; size = 4
$T1 = -76						; size = 4
_NewNode$ = -8						; size = 4
_this$ = -4						; size = 4
_INI$ = 8						; size = 4
_Header$ = 12						; size = 4
??$Create_Node@VDATiberiumNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z PROC ; DANodeManagerClass::Create_Node<DATiberiumNodeClass>, COMDAT
; _this$ = ecx

; 131  : 	template<typename N> DABaseNodeClass *Create_Node(const INIClass *INI,const StringClass &Header) {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 132  : 		DABaseNodeClass *NewNode = new N;

	push	OFFSET ??_C@_0CA@OEGNGHEB@DANodeManagerClass?3?3Create_Node?$AA@
	push	132					; 00000084H
	push	OFFSET ??_C@_0DK@BEAEGMFO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create_Nod
	xor	ecx, ecx
	jne	SHORT $LN3@Create_Nod
	push	132					; 00000084H
	push	OFFSET ??_C@_1HE@NOMOPGHL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create_Nod:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN7@Create_Nod
$LN6@Create_Nod:
	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create_Nod
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DATiberiumNodeClass@@QAE@XZ
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@Create_Nod
$LN4@Create_Nod:
	mov	DWORD PTR tv80[ebp], 0
$LN5@Create_Nod:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN7@Create_Nod:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _NewNode$[ebp], ecx

; 133  : 		NewNode->Init(INI,Header);

	mov	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _INI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _NewNode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _NewNode$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 134  : 		Nodes.Add(NewNode);

	lea	eax, DWORD PTR _NewNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Add@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE_NABQAVDABaseNodeClass@@@Z ; DynamicVectorClass<DABaseNodeClass *>::Add

; 135  : 		return NewNode;

	mov	eax, DWORD PTR _NewNode$[ebp]

; 136  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??$Create_Node@VDATiberiumNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z ENDP ; DANodeManagerClass::Create_Node<DATiberiumNodeClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ??$Create_Node@VDAControlNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv82 = -80						; size = 4
$T1 = -76						; size = 4
_NewNode$ = -8						; size = 4
_this$ = -4						; size = 4
_INI$ = 8						; size = 4
_Header$ = 12						; size = 4
??$Create_Node@VDAControlNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z PROC ; DANodeManagerClass::Create_Node<DAControlNodeClass>, COMDAT
; _this$ = ecx

; 131  : 	template<typename N> DABaseNodeClass *Create_Node(const INIClass *INI,const StringClass &Header) {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 132  : 		DABaseNodeClass *NewNode = new N;

	push	OFFSET ??_C@_0CA@OEGNGHEB@DANodeManagerClass?3?3Create_Node?$AA@
	push	132					; 00000084H
	push	OFFSET ??_C@_0DK@BEAEGMFO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create_Nod
	xor	ecx, ecx
	jne	SHORT $LN3@Create_Nod
	push	132					; 00000084H
	push	OFFSET ??_C@_1HE@NOMOPGHL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create_Nod:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN7@Create_Nod
$LN6@Create_Nod:
	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create_Nod
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DAControlNodeClass@@QAE@XZ
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@Create_Nod
$LN4@Create_Nod:
	mov	DWORD PTR tv80[ebp], 0
$LN5@Create_Nod:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN7@Create_Nod:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _NewNode$[ebp], ecx

; 133  : 		NewNode->Init(INI,Header);

	mov	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _INI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _NewNode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _NewNode$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 134  : 		Nodes.Add(NewNode);

	lea	eax, DWORD PTR _NewNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Add@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE_NABQAVDABaseNodeClass@@@Z ; DynamicVectorClass<DABaseNodeClass *>::Add

; 135  : 		return NewNode;

	mov	eax, DWORD PTR _NewNode$[ebp]

; 136  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??$Create_Node@VDAControlNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z ENDP ; DANodeManagerClass::Create_Node<DAControlNodeClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\teampurchasesettingsdefclass.h
;	COMDAT ?Set_Beacon_Cost@TeamPurchaseSettingsDefClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cost$ = 8						; size = 4
?Set_Beacon_Cost@TeamPurchaseSettingsDefClass@@QAEXH@Z PROC ; TeamPurchaseSettingsDefClass::Set_Beacon_Cost, COMDAT
; _this$ = ecx

; 146  : 	void Set_Beacon_Cost(int cost) { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		beaconcost = cost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cost$[ebp]
	mov	DWORD PTR [eax+1824], ecx

; 148  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Beacon_Cost@TeamPurchaseSettingsDefClass@@QAEXH@Z ENDP ; TeamPurchaseSettingsDefClass::Set_Beacon_Cost
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\teampurchasesettingsdefclass.h
;	COMDAT ?Set_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_preset$ = 8						; size = 4
?Set_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEXH@Z PROC ; TeamPurchaseSettingsDefClass::Set_Beacon_Definition, COMDAT
; _this$ = ecx

; 143  : 	void Set_Beacon_Definition(int preset) { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		beaconpresetid = preset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _preset$[ebp]
	mov	DWORD PTR [eax+1828], ecx

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEXH@Z ENDP ; TeamPurchaseSettingsDefClass::Set_Beacon_Definition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\teampurchasesettingsdefclass.h
;	COMDAT ?Get_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEHXZ PROC ; TeamPurchaseSettingsDefClass::Get_Beacon_Definition, COMDAT
; _this$ = ecx

; 97   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 		return beaconpresetid;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1828]

; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEHXZ ENDP ; TeamPurchaseSettingsDefClass::Get_Beacon_Definition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DALevelCleaner@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DALevelCleaner@@QAEAAV0@ABV0@@Z PROC			; DALevelCleaner::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DALevelCleaner@@QAEAAV0@ABV0@@Z ENDP			; DALevelCleaner::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAXI@Z PROC ; DAGameModeRegistrant<DADominationManagerClass>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAXI@Z ENDP ; DAGameModeRegistrant<DADominationManagerClass>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAE@XZ PROC ; DAGameModeRegistrant<DADominationManagerClass>::~DAGameModeRegistrant<DADominationManagerClass>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAGameModeFactoryClass@@UAE@XZ	; DAGameModeFactoryClass::~DAGameModeFactoryClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAE@XZ ENDP ; DAGameModeRegistrant<DADominationManagerClass>::~DAGameModeRegistrant<DADominationManagerClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gamemode.h
;	COMDAT ?Create_Instance@?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAVDAGameModeClass@@XZ
_TEXT	SEGMENT
tv95 = -84						; size = 4
tv91 = -80						; size = 4
tv93 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Create_Instance@?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAVDAGameModeClass@@XZ PROC ; DAGameModeRegistrant<DADominationManagerClass>::Create_Instance, COMDAT
; _this$ = ecx

; 68   : 	virtual DAGameModeClass *Create_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (!Instance) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	$LN1@Create_Ins

; 70   : 			Instance = new T;

	push	OFFSET ??_C@_0EG@HDFDHCGO@DAGameModeRegistrant?$DMclass?5DADom@
	push	70					; 00000046H
	push	OFFSET ??_C@_0DH@LBOBMIDI@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Create_Ins
	xor	ecx, ecx
	jne	SHORT $LN4@Create_Ins
	push	70					; 00000046H
	push	OFFSET ??_C@_1GO@IKKPOACN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Create_Ins:
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN8@Create_Ins
$LN7@Create_Ins:
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Create_Ins
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DADominationManagerClass@@QAE@XZ
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN6@Create_Ins
$LN5@Create_Ins:
	mov	DWORD PTR tv91[ebp], 0
$LN6@Create_Ins:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR tv93[ebp], eax
$LN8@Create_Ins:
	cmp	DWORD PTR tv93[ebp], 0
	je	SHORT $LN9@Create_Ins
	mov	ecx, DWORD PTR tv93[ebp]
	add	ecx, 4
	mov	DWORD PTR tv95[ebp], ecx
	jmp	SHORT $LN10@Create_Ins
$LN9@Create_Ins:
	mov	DWORD PTR tv95[ebp], 0
$LN10@Create_Ins:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR [edx+16], eax

; 71   : 			Instance->Set_Factory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?Set_Factory@DAGameModeClass@@QAEXPBVDAGameModeFactoryClass@@@Z ; DAGameModeClass::Set_Factory

; 72   : 			Instance->Init();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN1@Create_Ins:

; 73   : 		}
; 74   : 		return Instance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 75   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create_Instance@?$DAGameModeRegistrant@VDADominationManagerClass@@@@UAEPAVDAGameModeClass@@XZ ENDP ; DAGameModeRegistrant<DADominationManagerClass>::Create_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gamemode.h
;	COMDAT ??0?$DAGameModeRegistrant@VDADominationManagerClass@@@@QAE@PBD00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ShortName$ = 8						; size = 4
_LongName$ = 12						; size = 4
_RequiredData$ = 16					; size = 4
??0?$DAGameModeRegistrant@VDADominationManagerClass@@@@QAE@PBD00@Z PROC ; DAGameModeRegistrant<DADominationManagerClass>::DAGameModeRegistrant<DADominationManagerClass>, COMDAT
; _this$ = ecx

; 67   : 	DAGameModeRegistrant(const char *ShortName,const char *LongName,const char *RequiredData = 0) : DAGameModeFactoryClass(ShortName,LongName,RequiredData) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _RequiredData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LongName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ShortName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAGameModeFactoryClass@@QAE@PBD00@Z	; DAGameModeFactoryClass::DAGameModeFactoryClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DAGameModeRegistrant@VDADominationManagerClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$DAGameModeRegistrant@VDADominationManagerClass@@@@QAE@PBD00@Z ENDP ; DAGameModeRegistrant<DADominationManagerClass>::DAGameModeRegistrant<DADominationManagerClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDADominationManagerClass@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDADominationManagerClass@@EAEPAXI@Z PROC		; DADominationManagerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DADominationManagerClass@@EAE@XZ	; DADominationManagerClass::~DADominationManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDADominationManagerClass@@EAEPAXI@Z ENDP		; DADominationManagerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DADominationManagerClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DADominationManagerClass@@QAE@XZ PROC		; DADominationManagerClass::DADominationManagerClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAEventClass@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0DAGameModeClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DADominationManagerClass@@6BDAEventClass@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ??_7DADominationManagerClass@@6BDAGameModeClass@@@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DADominationManagerClass@@QAE@XZ ENDP		; DADominationManagerClass::DADominationManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ??1DADominationManagerClass@@EAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DADominationManagerClass@@EAE@XZ PROC		; DADominationManagerClass::~DADominationManagerClass, COMDAT
; _this$ = ecx

; 109  : 	virtual ~DADominationManagerClass() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DADominationManagerClass@@6BDAEventClass@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ??_7DADominationManagerClass@@6BDAGameModeClass@@@

; 110  : 		DANodeManager->Destroy_Instance();

	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	call	?Destroy_Instance@?$DASingleton@VDANodeManagerClass@@@@SAXXZ ; DASingleton<DANodeManagerClass>::Destroy_Instance

; 111  : 		DATeleporterManager->Destroy_Instance();

	call	?Get_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ ; DASingleton<DATeleporterManagerClass>::Get_Instance
	call	?Destroy_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAXXZ ; DASingleton<DATeleporterManagerClass>::Destroy_Instance

; 112  : 		DAVehicleSpawnManager->Destroy_Instance();

	call	?Get_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ; DASingleton<DAVehicleSpawnManagerClass>::Get_Instance
	call	?Destroy_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAXXZ ; DASingleton<DAVehicleSpawnManagerClass>::Destroy_Instance

; 113  : 		DASpawnManager->Destroy_Instance();

	call	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
	call	?Destroy_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAXXZ ; DASingleton<DASpawnManagerClass>::Destroy_Instance

; 114  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1DAGameModeClass@@UAE@XZ		; DAGameModeClass::~DAGameModeClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAEventClass@@UAE@XZ			; DAEventClass::~DAEventClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DADominationManagerClass@@EAE@XZ ENDP		; DADominationManagerClass::~DADominationManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Nodes_Chat_Command@DADominationManagerClass@@AAE_NPAVcPlayer@@ABVDATokenClass@@W4TextMessageEnum@@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
$T2 = -196						; size = 4
$T3 = -192						; size = 8
$T4 = -184						; size = 4
$T5 = -180						; size = 4
$T6 = -173						; size = 1
_it$7 = -108						; size = 12
_it$8 = -96						; size = 12
_it$9 = -84						; size = 12
_ID$ = -72						; size = 4
_Pair$10 = -68						; size = 4
_Team$11 = -64						; size = 4
_Node$12 = -60						; size = 4
_i$13 = -56						; size = 4
_NodeMap$ = -52						; size = 48
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Text$ = 12						; size = 4
_ChatType$ = 16						; size = 4
?Nodes_Chat_Command@DADominationManagerClass@@AAE_NPAVcPlayer@@ABVDATokenClass@@W4TextMessageEnum@@@Z PROC ; DADominationManagerClass::Nodes_Chat_Command, COMDAT
; _this$ = ecx

; 369  : bool DADominationManagerClass::Nodes_Chat_Command(cPlayer *Player,const DATokenClass &Text,TextMessageEnum ChatType) {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 370  : 	HashTemplateClass<StringClass,PairClass<int,StringClass>> NodeMap[3];

	push	OFFSET ??0?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::HashTemplateClass<StringClass,PairClass<int,StringClass> >
	push	3
	push	16					; 00000010H
	lea	eax, DWORD PTR _NodeMap$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 371  : 	for (int i = 0;i < DANodeManager->Get_Node_Count();i++) {

	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN15@Nodes_Chat
$LN14@Nodes_Chat:
	mov	eax, DWORD PTR _i$13[ebp]
	add	eax, 1
	mov	DWORD PTR _i$13[ebp], eax
$LN15@Nodes_Chat:
	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Get_Node_Count@DANodeManagerClass@@QAEHXZ ; DANodeManagerClass::Get_Node_Count
	cmp	DWORD PTR _i$13[ebp], eax
	jge	$LN13@Nodes_Chat

; 372  : 		DABaseNodeClass *Node = DANodeManager->Get_Node(i);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Get_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@H@Z ; DANodeManagerClass::Get_Node
	mov	DWORD PTR _Node$12[ebp], eax

; 373  : 		if (!Node->Get_Name().Is_Empty()) {

	mov	ecx, DWORD PTR _Node$12[ebp]
	call	?Get_Name@DABaseNodeClass@@QBEABVStringClass@@XZ ; DABaseNodeClass::Get_Name
	mov	ecx, eax
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	jne	$LN10@Nodes_Chat

; 374  : 			int Team = Node->Get_Team();

	mov	ecx, DWORD PTR _Node$12[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	mov	DWORD PTR _Team$11[ebp], eax

; 375  : 			PairClass<int,StringClass> *Pair = NodeMap[Team].Get(Node->Get_Type());

	push	0
	mov	eax, DWORD PTR _Node$12[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Node$12[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _Team$11[ebp]
	shl	edx, 4
	lea	ecx, DWORD PTR _NodeMap$[ebp+edx]
	call	?Get@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBEPAV?$PairClass@HVStringClass@@@@ABVStringClass@@@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Get
	mov	DWORD PTR _Pair$10[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 376  : 			if (Pair) {

	cmp	DWORD PTR _Pair$10[ebp], 0
	je	SHORT $LN11@Nodes_Chat

; 377  : 				Pair->First++;

	mov	eax, DWORD PTR _Pair$10[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _Pair$10[ebp]
	mov	DWORD PTR [edx], ecx

; 378  : 				Pair->Second += StringFormat(", %s",Node->Get_Name());

	mov	ecx, DWORD PTR _Node$12[ebp]
	call	?Get_Name@DABaseNodeClass@@QBEABVStringClass@@XZ ; DABaseNodeClass::Get_Name
	mov	eax, DWORD PTR [eax]
	push	eax
	push	OFFSET ??_C@_04KHEKMLOH@?0?5?$CFs?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	?StringFormat@@YA?AVStringClass@@PBDZZ	; StringFormat
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _Pair$10[ebp]
	add	ecx, 4
	call	??YStringClass@@QAEABV0@ABV0@@Z		; StringClass::operator+=
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 379  : 			}
; 380  : 			else {

	jmp	SHORT $LN10@Nodes_Chat
$LN11@Nodes_Chat:

; 381  : 				NodeMap[Team].Insert(Node->Get_Type(),PairClass<int,StringClass>(1,Node->Get_Name()));

	mov	DWORD PTR $T4[ebp], 1
	push	0
	mov	eax, DWORD PTR _Node$12[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Node$12[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _Node$12[ebp]
	call	?Get_Name@DABaseNodeClass@@QBEABVStringClass@@XZ ; DABaseNodeClass::Get_Name
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$PairClass@HVStringClass@@@@QAE@ABHABVStringClass@@@Z ; PairClass<int,StringClass>::PairClass<int,StringClass>
	push	eax
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	eax, DWORD PTR _Team$11[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _NodeMap$[ebp+eax]
	call	?Insert@?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXABVStringClass@@ABV?$PairClass@HVStringClass@@@@@Z ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::Insert
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$PairClass@HVStringClass@@@@QAE@XZ
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN10@Nodes_Chat:

; 382  : 			}
; 383  : 		}
; 384  : 	}

	jmp	$LN14@Nodes_Chat
$LN13@Nodes_Chat:

; 385  : 	int ID = Player->Get_Id();

	mov	ecx, DWORD PTR _Player$[ebp]
	call	?Get_Id@cPlayer@@QBEHXZ			; cPlayer::Get_Id
	mov	DWORD PTR _ID$[ebp], eax

; 386  : 	for (HashTemplateIterator<StringClass,PairClass<int,StringClass>> it = NodeMap[2];it;++it) {

	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _NodeMap$[ebp+eax]
	push	ecx
	lea	ecx, DWORD PTR _it$9[ebp]
	call	??0?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@AAV?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@@Z ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::HashTemplateIterator<StringClass,PairClass<int,StringClass> >
	jmp	SHORT $LN9@Nodes_Chat
$LN8@Nodes_Chat:
	lea	ecx, DWORD PTR _it$9[ebp]
	call	??E?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator++
$LN9@Nodes_Chat:
	lea	ecx, DWORD PTR _it$9[ebp]
	call	??B?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBE_NXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@Nodes_Chat

; 387  : 		DA::Private_Color_Message(ID,COLORWHITE,"%s(%d): %s",it.getKey(),it.getValue().First,it.getValue().Second);

	lea	ecx, DWORD PTR _it$9[ebp]
	call	?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue
	mov	eax, DWORD PTR [eax+4]
	push	eax
	lea	ecx, DWORD PTR _it$9[ebp]
	call	?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _it$9[ebp]
	call	?getKey@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEABVStringClass@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getKey
	mov	edx, DWORD PTR [eax]
	push	edx
	push	OFFSET ??_C@_0L@NIBPICLL@?$CFs?$CI?$CFd?$CJ?3?5?$CFs?$AA@
	push	240					; 000000f0H
	push	255					; 000000ffH
	push	255					; 000000ffH
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?Private_Color_Message@DA@@SAXHIIIPBDZZ	; DA::Private_Color_Message
	add	esp, 32					; 00000020H

; 388  : 	}

	jmp	SHORT $LN8@Nodes_Chat
$LN7@Nodes_Chat:

; 389  : 	for (HashTemplateIterator<StringClass,PairClass<int,StringClass>> it = NodeMap[0];it;++it) {

	mov	eax, 16					; 00000010H
	imul	eax, 0
	lea	ecx, DWORD PTR _NodeMap$[ebp+eax]
	push	ecx
	lea	ecx, DWORD PTR _it$8[ebp]
	call	??0?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@AAV?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@@Z ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::HashTemplateIterator<StringClass,PairClass<int,StringClass> >
	jmp	SHORT $LN6@Nodes_Chat
$LN5@Nodes_Chat:
	lea	ecx, DWORD PTR _it$8[ebp]
	call	??E?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator++
$LN6@Nodes_Chat:
	lea	ecx, DWORD PTR _it$8[ebp]
	call	??B?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBE_NXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Nodes_Chat

; 390  : 		DA::Private_Color_Message_With_Team_Color(ID,0,"%s(%d): %s",it.getKey(),it.getValue().First,it.getValue().Second);

	lea	ecx, DWORD PTR _it$8[ebp]
	call	?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue
	mov	eax, DWORD PTR [eax+4]
	push	eax
	lea	ecx, DWORD PTR _it$8[ebp]
	call	?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _it$8[ebp]
	call	?getKey@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEABVStringClass@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getKey
	mov	edx, DWORD PTR [eax]
	push	edx
	push	OFFSET ??_C@_0L@NIBPICLL@?$CFs?$CI?$CFd?$CJ?3?5?$CFs?$AA@
	push	0
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?Private_Color_Message_With_Team_Color@DA@@SAXHHPBDZZ ; DA::Private_Color_Message_With_Team_Color
	add	esp, 24					; 00000018H

; 391  : 	}

	jmp	SHORT $LN5@Nodes_Chat
$LN4@Nodes_Chat:

; 392  : 	DA::Private_Color_Message_With_Team_Color(ID,0,"Score: %.0f/%.0f",Score[0],WinningPoints);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+60]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx+12]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BB@GPOLAEHP@Score?3?5?$CF?40f?1?$CF?40f?$AA@
	push	0
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?Private_Color_Message_With_Team_Color@DA@@SAXHHPBDZZ ; DA::Private_Color_Message_With_Team_Color
	add	esp, 28					; 0000001cH

; 393  : 	for (HashTemplateIterator<StringClass,PairClass<int,StringClass>> it = NodeMap[1];it;++it) {

	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _NodeMap$[ebp+eax]
	push	ecx
	lea	ecx, DWORD PTR _it$7[ebp]
	call	??0?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@AAV?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@@Z ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::HashTemplateIterator<StringClass,PairClass<int,StringClass> >
	jmp	SHORT $LN3@Nodes_Chat
$LN2@Nodes_Chat:
	lea	ecx, DWORD PTR _it$7[ebp]
	call	??E?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEXXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator++
$LN3@Nodes_Chat:
	lea	ecx, DWORD PTR _it$7[ebp]
	call	??B?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QBE_NXZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Nodes_Chat

; 394  : 		DA::Private_Color_Message_With_Team_Color(ID,1,"%s(%d): %s",it.getKey(),it.getValue().First,it.getValue().Second);

	lea	ecx, DWORD PTR _it$7[ebp]
	call	?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue
	mov	eax, DWORD PTR [eax+4]
	push	eax
	lea	ecx, DWORD PTR _it$7[ebp]
	call	?getValue@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEAAV?$PairClass@HVStringClass@@@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getValue
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _it$7[ebp]
	call	?getKey@?$HashTemplateIterator@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAEABVStringClass@@XZ ; HashTemplateIterator<StringClass,PairClass<int,StringClass> >::getKey
	mov	edx, DWORD PTR [eax]
	push	edx
	push	OFFSET ??_C@_0L@NIBPICLL@?$CFs?$CI?$CFd?$CJ?3?5?$CFs?$AA@
	push	1
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?Private_Color_Message_With_Team_Color@DA@@SAXHHPBDZZ ; DA::Private_Color_Message_With_Team_Color
	add	esp, 24					; 00000018H

; 395  : 	}

	jmp	SHORT $LN2@Nodes_Chat
$LN1@Nodes_Chat:

; 396  : 	DA::Private_Color_Message_With_Team_Color(ID,1,"Score: %.0f/%.0f",Score[1],WinningPoints);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+60]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx+12]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BB@GPOLAEHP@Score?3?5?$CF?40f?1?$CF?40f?$AA@
	push	1
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?Private_Color_Message_With_Team_Color@DA@@SAXHHPBDZZ ; DA::Private_Color_Message_With_Team_Color
	add	esp, 28					; 0000001cH

; 397  : 	return true;

	mov	BYTE PTR $T6[ebp], 1
	push	OFFSET ??1?$HashTemplateClass@VStringClass@@V?$PairClass@HVStringClass@@@@@@QAE@XZ ; HashTemplateClass<StringClass,PairClass<int,StringClass> >::~HashTemplateClass<StringClass,PairClass<int,StringClass> >
	push	3
	push	16					; 00000010H
	lea	eax, DWORD PTR _NodeMap$[ebp]
	push	eax
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	al, BYTE PTR $T6[ebp]

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Nodes_Chat_Command@DADominationManagerClass@@AAE_NPAVcPlayer@@ABVDATokenClass@@W4TextMessageEnum@@@Z ENDP ; DADominationManagerClass::Nodes_Chat_Command
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Send_Info_Message@DADominationManagerClass@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Send_Info_Message@DADominationManagerClass@@AAEXH@Z PROC ; DADominationManagerClass::Send_Info_Message, COMDAT
; _this$ = ecx

; 358  : void DADominationManagerClass::Send_Info_Message(int ID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 359  : 	if (DASpawnManager && DASpawnManager->Using_Waiting_Room()) {

	call	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
	test	eax, eax
	je	SHORT $LN2@Send_Info_
	call	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Using_Waiting_Room@DASpawnManagerClass@@QBE_NXZ ; DASpawnManagerClass::Using_Waiting_Room
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Send_Info_

; 360  : 		DA::Private_Admin_Message(ID,"When you die you will be asked to use the Purchase Terminal to select a character to spawn as. Once selected you will spawn at either the closest node controlled by your team or your team's starting location.");

	push	OFFSET ??_C@_0NB@BMOMOCHG@When?5you?5die?5you?5will?5be?5asked?5t@
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?Private_Admin_Message@DA@@SAXHPBDZZ	; DA::Private_Admin_Message
	add	esp, 8
$LN2@Send_Info_:

; 361  : 	}
; 362  : 	DA::Private_Color_Message(ID,COLORWHITE,"This is a Domination Mode match. The objective is to capture and hold Tiberium Nodes for money and Control Nodes for points. The first team to reach %.0f points wins.",WinningPoints);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+60]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0KH@JMJLPLJA@This?5is?5a?5Domination?5Mode?5match?4@
	push	240					; 000000f0H
	push	255					; 000000ffH
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	call	?Private_Color_Message@DA@@SAXHIIIPBDZZ	; DA::Private_Color_Message
	add	esp, 28					; 0000001cH

; 363  : 	DA::Private_Admin_Message(ID,"This is a Domination Mode match. The objective is to capture and hold Tiberium Nodes for money and Control Nodes for points. The first team to reach %.0f points wins.",WinningPoints);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+60]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0KH@JMJLPLJA@This?5is?5a?5Domination?5Mode?5match?4@
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	call	?Private_Admin_Message@DA@@SAXHPBDZZ	; DA::Private_Admin_Message
	add	esp, 16					; 00000010H

; 364  : 	if (DASpawnManager && DASpawnManager->Using_Waiting_Room()) {

	call	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
	test	eax, eax
	je	SHORT $LN1@Send_Info_
	call	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Using_Waiting_Room@DASpawnManagerClass@@QBE_NXZ ; DASpawnManagerClass::Using_Waiting_Room
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Send_Info_

; 365  : 		DA::Private_Color_Message(ID,COLORWHITE,"When you die you will be asked to use the Purchase Terminal to select a character to spawn as. Once selected you will spawn at either the closest node controlled by your team or your team's starting location.");

	push	OFFSET ??_C@_0NB@BMOMOCHG@When?5you?5die?5you?5will?5be?5asked?5t@
	push	240					; 000000f0H
	push	255					; 000000ffH
	push	255					; 000000ffH
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?Private_Color_Message@DA@@SAXHIIIPBDZZ	; DA::Private_Color_Message
	add	esp, 20					; 00000014H
$LN1@Send_Info_:

; 366  : 	}
; 367  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Send_Info_Message@DADominationManagerClass@@AAEXH@Z ENDP ; DADominationManagerClass::Send_Info_Message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Timer_Expired@DADominationManagerClass@@EAEXHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Number$ = 8						; size = 4
_Data$ = 12						; size = 4
?Timer_Expired@DADominationManagerClass@@EAEXHI@Z PROC	; DADominationManagerClass::Timer_Expired, COMDAT
; _this$ = ecx

; 264  : void DADominationManagerClass::Timer_Expired(int Number,unsigned int Data) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 	if (Number == 10) {

	cmp	DWORD PTR _Number$[ebp], 10		; 0000000aH
	jne	SHORT $LN3@Timer_Expi

; 266  : 		Increment_Credits(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Increment_Credits@DADominationManagerClass@@QAEXH@Z ; DADominationManagerClass::Increment_Credits

; 267  : 		Increment_Credits(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Increment_Credits@DADominationManagerClass@@QAEXH@Z ; DADominationManagerClass::Increment_Credits
	jmp	SHORT $LN4@Timer_Expi
$LN3@Timer_Expi:

; 268  : 	}
; 269  : 	else if (Number == 11) {

	cmp	DWORD PTR _Number$[ebp], 11		; 0000000bH
	jne	SHORT $LN4@Timer_Expi

; 270  : 		Console_Input("timeout");

	push	OFFSET ??_C@_07DDHNKDGP@timeout?$AA@
	call	?Console_Input@@YAXPBD@Z		; Console_Input
	add	esp, 4
$LN4@Timer_Expi:

; 271  : 	}
; 272  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@DADominationManagerClass@@EAEXHI@Z ENDP	; DADominationManagerClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Object_Created_Event@DADominationManagerClass@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Object_Created_Event@DADominationManagerClass@@EAEXPAVScriptableGameObj@@@Z PROC ; DADominationManagerClass::Object_Created_Event, COMDAT
; _this$ = ecx

; 258  : void DADominationManagerClass::Object_Created_Event(GameObject *obj) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 259  : 	((SoldierGameObj*)obj)->Give_Key(1);

	push	1
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Give_Key@SoldierGameObj@@QAEXH@Z	; SoldierGameObj::Give_Key

; 260  : 	((SoldierGameObj*)obj)->Give_Key(2);

	push	2
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Give_Key@SoldierGameObj@@QAEXH@Z	; SoldierGameObj::Give_Key

; 261  : 	((SoldierGameObj*)obj)->Give_Key(3);

	push	3
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Give_Key@SoldierGameObj@@QAEXH@Z	; SoldierGameObj::Give_Key

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Object_Created_Event@DADominationManagerClass@@EAEXPAVScriptableGameObj@@@Z ENDP ; DADominationManagerClass::Object_Created_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Player_Loaded_Event@DADominationManagerClass@@EAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Player_Loaded_Event@DADominationManagerClass@@EAEXPAVcPlayer@@@Z PROC ; DADominationManagerClass::Player_Loaded_Event, COMDAT
; _this$ = ecx

; 254  : void DADominationManagerClass::Player_Loaded_Event(cPlayer *Player) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 	Send_Info_Message(Player->Get_Id());

	mov	ecx, DWORD PTR _Player$[ebp]
	call	?Get_Id@cPlayer@@QBEHXZ			; cPlayer::Get_Id
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Send_Info_Message@DADominationManagerClass@@AAEXH@Z ; DADominationManagerClass::Send_Info_Message

; 256  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Player_Loaded_Event@DADominationManagerClass@@EAEXPAVcPlayer@@@Z ENDP ; DADominationManagerClass::Player_Loaded_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Settings_Loaded_Event@DADominationManagerClass@@EAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Settings_Loaded_Event@DADominationManagerClass@@EAEXXZ PROC ; DADominationManagerClass::Settings_Loaded_Event, COMDAT
; _this$ = ecx

; 248  : void DADominationManagerClass::Settings_Loaded_Event() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 	DAPlayerManager::Set_Disable_Team_Kill_Counter(true);

	push	1
	call	?Set_Disable_Team_Kill_Counter@DAPlayerManager@@SAX_N@Z ; DAPlayerManager::Set_Disable_Team_Kill_Counter
	add	esp, 4

; 250  : 	DAPlayerManager::Set_Disable_Team_Death_Counter(true);

	push	1
	call	?Set_Disable_Team_Death_Counter@DAPlayerManager@@SAX_N@Z ; DAPlayerManager::Set_Disable_Team_Death_Counter
	add	esp, 4

; 251  : 	DAPlayerManager::Set_Disable_Team_Score_Counter(true);

	push	1
	call	?Set_Disable_Team_Score_Counter@DAPlayerManager@@SAX_N@Z ; DAPlayerManager::Set_Disable_Team_Score_Counter
	add	esp, 4

; 252  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Settings_Loaded_Event@DADominationManagerClass@@EAEXXZ ENDP ; DADominationManagerClass::Settings_Loaded_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Init@DADominationManagerClass@@EAEXXZ
_TEXT	SEGMENT
tv814 = -192						; size = 4
tv796 = -192						; size = 4
tv778 = -192						; size = 4
$T1 = -188						; size = 4
$T2 = -184						; size = 4
$T3 = -180						; size = 4
$T4 = -176						; size = 4
$T5 = -172						; size = 4
$T6 = -168						; size = 4
$T7 = -164						; size = 4
$T8 = -160						; size = 4
$T9 = -156						; size = 4
_SoldierDef$10 = -88					; size = 4
_PowerUpDef$11 = -84					; size = 4
_NewWeaponDef$ = -80					; size = 4
_OldWeaponDef$ = -76					; size = 4
_BHRS$12 = -72						; size = 4
_SBH$ = -68						; size = 4
_RemoteWeapon$13 = -64					; size = 4
_RemotePowerUp$14 = -60					; size = 4
_PT2$ = -56						; size = 4
_Recon$15 = -52						; size = 4
_PT$ = -48						; size = 4
_X$16 = -44						; size = 4
_Header$17 = -40					; size = 4
_i$18 = -36						; size = 4
_X$19 = -32						; size = 4
_Header$20 = -28					; size = 4
_i$21 = -24						; size = 4
_X$22 = -20						; size = 4
_Header$23 = -16					; size = 4
_i$24 = -12						; size = 4
_Settings$ = -8						; size = 4
_this$ = -4						; size = 4
?Init@DADominationManagerClass@@EAEXXZ PROC		; DADominationManagerClass::Init, COMDAT
; _this$ = ecx

; 98   : void DADominationManagerClass::Init() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 	Score[0] = 0.0f;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+8], xmm0

; 100  : 	Score[1] = 0.0f;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+8], xmm0

; 101  : 	
; 102  : 	const DASettingsClass *Settings = DASettingsManager::Get_Settings(DASettingsManager::Get_Settings_Count()-1); //Gamemode.ini will be last in settings chain at this point.

	call	?Get_Settings_Count@DASettingsManager@@SAHXZ ; DASettingsManager::Get_Settings_Count
	sub	eax, 1
	push	eax
	call	?Get_Settings@DASettingsManager@@SAPBVDASettingsClass@@H@Z ; DASettingsManager::Get_Settings
	add	esp, 4
	mov	DWORD PTR _Settings$[ebp], eax

; 103  : 	Settings->Get_String(ControlNodePreset,"ControlNodePreset",0);

	push	0
	push	OFFSET ??_C@_0BC@JCMPHAOK@ControlNodePreset?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD1@Z ; DASettingsClass::Get_String

; 104  : 	Settings->Get_String(ControlNodeModel,"ControlNodeModel",0);

	push	0
	push	OFFSET ??_C@_0BB@BMHLIFHB@ControlNodeModel?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD1@Z ; DASettingsClass::Get_String

; 105  : 	Settings->Get_String(ControlNodeAnimation,"ControlNodeAnimation",0);

	push	0
	push	OFFSET ??_C@_0BF@HANGKPH@ControlNodeAnimation?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD1@Z ; DASettingsClass::Get_String

; 106  : 
; 107  : 	Settings->Get_String(TiberiumNodePreset,"TiberiumNodePreset",0);

	push	0
	push	OFFSET ??_C@_0BD@IBNFAGPI@TiberiumNodePreset?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD1@Z ; DASettingsClass::Get_String

; 108  : 	Settings->Get_String(TiberiumNodeModel,"TiberiumNodeModel",0);

	push	0
	push	OFFSET ??_C@_0BC@GKJFMBGJ@TiberiumNodeModel?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD1@Z ; DASettingsClass::Get_String

; 109  : 	Settings->Get_String(TiberiumNodeAnimation,"TiberiumNodeAnimation",0);

	push	0
	push	OFFSET ??_C@_0BG@JMKIDKPA@TiberiumNodeAnimation?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD1@Z ; DASettingsClass::Get_String

; 110  : 
; 111  : 	PointTickAmount = Settings->Get_Float("DominationPointTickAmount",10.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BK@HBIJHNGP@DominationPointTickAmount?$AA@
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_Float@DASettingsClass@@QBEMPBDM@Z	; DASettingsClass::Get_Float
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+40]

; 112  : 	PointTickTime = Settings->Get_Float("DominationPointTickTime",10.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BI@OEAKIFBD@DominationPointTickTime?$AA@
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_Float@DASettingsClass@@QBEMPBDM@Z	; DASettingsClass::Get_Float
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+44]

; 113  : 	CreditTickAmount = Settings->Get_Float("DominationCreditTickAmount",10.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BL@JPMPFIPH@DominationCreditTickAmount?$AA@
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_Float@DASettingsClass@@QBEMPBDM@Z	; DASettingsClass::Get_Float
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+48]

; 114  : 	CreditTickTime = Settings->Get_Float("DominationCreditTickTime",10.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BJ@BCIIMMLE@DominationCreditTickTime?$AA@
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_Float@DASettingsClass@@QBEMPBDM@Z	; DASettingsClass::Get_Float
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+52]

; 115  : 
; 116  : 	WinningPoints = Settings->Get_Float("DominationWinningPoints",1000.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BI@OAGMNPNI@DominationWinningPoints?$AA@
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_Float@DASettingsClass@@QBEMPBDM@Z	; DASettingsClass::Get_Float
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+56]

; 117  : 
; 118  : 	if ((The_Game()->MapName[0] == 'M' || The_Game()->MapName[0] == 'm')) {

	push	0
	call	?The_Game@@YAPAVcGameData@@XZ		; The_Game
	add	eax, 40					; 00000028H
	mov	ecx, eax
	call	??AStringClass@@QAEAADH@Z		; StringClass::operator[]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN36@Init
	push	0
	call	?The_Game@@YAPAVcGameData@@XZ		; The_Game
	add	eax, 40					; 00000028H
	mov	ecx, eax
	call	??AStringClass@@QAEAADH@Z		; StringClass::operator[]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 109				; 0000006dH
	jne	SHORT $LN37@Init
$LN36@Init:

; 119  : 		DALevelCleaner::Clean_Level();

	call	?Clean_Level@DALevelCleaner@@SAXXZ	; DALevelCleaner::Clean_Level

; 120  : 		DALevelCleaner::Load_Blockers(Settings->Get_INI());

	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Load_Blockers@DALevelCleaner@@SAXPBVINIClass@@@Z ; DALevelCleaner::Load_Blockers
	add	esp, 4
$LN37@Init:

; 121  : 	}
; 122  : 
; 123  : 	if (Settings->Get_Float(The_Game()->MapName,"GDI_Spawn1_X",0)) {

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0N@EBHECGJM@GDI_Spawn1_X?$AA@
	call	?The_Game@@YAPAVcGameData@@XZ		; The_Game
	add	eax, 40					; 00000028H
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_Float@DASettingsClass@@QBEMPBD0M@Z	; DASettingsClass::Get_Float
	fstp	DWORD PTR tv778[ebp]
	movss	xmm0, DWORD PTR tv778[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN35@Init

; 124  : 		DASpawnManager->Create_Instance()->Init(Settings->Get_INI());

	call	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Create_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Create_Instance
	mov	ecx, eax
	call	?Init@DASpawnManagerClass@@QAEXPBVINIClass@@@Z ; DASpawnManagerClass::Init

; 125  : 		DASpawnManager->Create_Spawn_Point(Settings->Get_INI(),"Nod"); //Starting spawners

	push	0
	push	OFFSET ??_C@_03OHGKCNFD@Nod?$AA@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Create_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z ; DASpawnManagerClass::Create_Spawn_Point
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 126  : 		DASpawnManager->Create_Spawn_Point(Settings->Get_INI(),"GDI");

	push	0
	push	OFFSET ??_C@_03IOFAJBDH@GDI?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ; DASingleton<DASpawnManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Create_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z ; DASpawnManagerClass::Create_Spawn_Point
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN35@Init:

; 127  : 	}
; 128  : 	if (Settings->Get_Float(The_Game()->MapName,"GDI_Vehicle_X",0)) {

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0O@EFIOFKDD@GDI_Vehicle_X?$AA@
	call	?The_Game@@YAPAVcGameData@@XZ		; The_Game
	add	eax, 40					; 00000028H
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_Float@DASettingsClass@@QBEMPBD0M@Z	; DASettingsClass::Get_Float
	fstp	DWORD PTR tv796[ebp]
	movss	xmm0, DWORD PTR tv796[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN34@Init

; 129  : 		DAVehicleSpawnManager->Create_Instance()->Init(Settings->Get_INI());

	call	?Get_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ; DASingleton<DAVehicleSpawnManagerClass>::Get_Instance
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Create_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ; DASingleton<DAVehicleSpawnManagerClass>::Create_Instance
	mov	ecx, eax
	call	?Init@DAVehicleSpawnManagerClass@@QAEXPBVINIClass@@@Z ; DAVehicleSpawnManagerClass::Init

; 130  : 		DAVehicleSpawnManager->Create_Air_Drop_Point(Settings->Get_INI(),"Nod"); //Vehicle spawn locations

	push	0
	push	OFFSET ??_C@_03OHGKCNFD@Nod?$AA@
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Get_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ; DASingleton<DAVehicleSpawnManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Create_Air_Drop_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleAirDropPointClass@@PBVINIClass@@ABVStringClass@@@Z ; DAVehicleSpawnManagerClass::Create_Air_Drop_Point
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 131  : 		DAVehicleSpawnManager->Create_Air_Drop_Point(Settings->Get_INI(),"GDI");

	push	0
	push	OFFSET ??_C@_03IOFAJBDH@GDI?$AA@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Get_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ; DASingleton<DAVehicleSpawnManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Create_Air_Drop_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleAirDropPointClass@@PBVINIClass@@ABVStringClass@@@Z ; DAVehicleSpawnManagerClass::Create_Air_Drop_Point
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN34@Init:

; 132  : 	}
; 133  : 	if (Settings->Get_Float(The_Game()->MapName,"Teleporter1_TeleporterEntrance_X",0)) {

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0CB@EAMMBIFA@Teleporter1_TeleporterEntrance_X@
	call	?The_Game@@YAPAVcGameData@@XZ		; The_Game
	add	eax, 40					; 00000028H
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_Float@DASettingsClass@@QBEMPBD0M@Z	; DASettingsClass::Get_Float
	fstp	DWORD PTR tv814[ebp]
	movss	xmm0, DWORD PTR tv814[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN30@Init

; 134  : 		DATeleporterManager->Create_Instance();

	call	?Get_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ ; DASingleton<DATeleporterManagerClass>::Get_Instance
	call	?Create_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ ; DASingleton<DATeleporterManagerClass>::Create_Instance

; 135  : 		for (int i = 1;;i++) {

	mov	DWORD PTR _i$24[ebp], 1
	jmp	SHORT $LN32@Init
$LN31@Init:
	mov	eax, DWORD PTR _i$24[ebp]
	add	eax, 1
	mov	DWORD PTR _i$24[ebp], eax
$LN32@Init:

; 136  : 			StringClass Header;

	push	0
	push	0
	lea	ecx, DWORD PTR _Header$23[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 137  : 			Header.Format("Teleporter%d",i);

	mov	eax, DWORD PTR _i$24[ebp]
	push	eax
	push	OFFSET ??_C@_0N@FJJGHBNM@Teleporter?$CFd?$AA@
	lea	ecx, DWORD PTR _Header$23[ebp]
	push	ecx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 12					; 0000000cH

; 138  : 			StringClass X;

	push	0
	push	0
	lea	ecx, DWORD PTR _X$22[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 139  : 			Settings->Get_String(X,The_Game()->MapName,StringFormat("%s_TeleporterEntrance_X",Header),0);

	push	0
	mov	eax, DWORD PTR _Header$23[ebp]
	push	eax
	push	OFFSET ??_C@_0BI@CCBKOFN@?$CFs_TeleporterEntrance_X?$AA@
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	?StringFormat@@YA?AVStringClass@@PBDZZ	; StringFormat
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	?The_Game@@YAPAVcGameData@@XZ		; The_Game
	add	eax, 40					; 00000028H
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	lea	edx, DWORD PTR _X$22[ebp]
	push	edx
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD11@Z ; DASettingsClass::Get_String
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 140  : 			if (!X.Is_Empty()) {

	lea	ecx, DWORD PTR _X$22[ebp]
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN29@Init

; 141  : 				DATeleporterManager->Create_Teleporter(Settings->Get_INI(),Header);

	lea	eax, DWORD PTR _Header$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Get_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ ; DASingleton<DATeleporterManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Create_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@PBVINIClass@@ABVStringClass@@@Z ; DATeleporterManagerClass::Create_Teleporter

; 142  : 			}
; 143  : 			else {

	jmp	SHORT $LN28@Init
$LN29@Init:

; 144  : 				break;

	lea	ecx, DWORD PTR _X$22[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _Header$23[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	SHORT $LN30@Init
$LN28@Init:

; 145  : 			}
; 146  : 		}

	lea	ecx, DWORD PTR _X$22[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _Header$23[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN31@Init
$LN30@Init:

; 147  : 	}
; 148  : 	
; 149  : 	DANodeManager->Create_Instance()->Init(Settings->Get_INI());

	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Create_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Create_Instance
	mov	ecx, eax
	call	?Init@DANodeManagerClass@@QAEXPBVINIClass@@@Z ; DANodeManagerClass::Init

; 150  : 	
; 151  : 	for (int i = 1;;i++) {

	mov	DWORD PTR _i$21[ebp], 1
	jmp	SHORT $LN27@Init
$LN26@Init:
	mov	eax, DWORD PTR _i$21[ebp]
	add	eax, 1
	mov	DWORD PTR _i$21[ebp], eax
$LN27@Init:

; 152  : 		StringClass Header;

	push	0
	push	0
	lea	ecx, DWORD PTR _Header$20[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 153  : 		Header.Format("Control%d",i);

	mov	eax, DWORD PTR _i$21[ebp]
	push	eax
	push	OFFSET ??_C@_09CEALANKL@Control?$CFd?$AA@
	lea	ecx, DWORD PTR _Header$20[ebp]
	push	ecx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 12					; 0000000cH

; 154  : 		StringClass X;

	push	0
	push	0
	lea	ecx, DWORD PTR _X$19[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 155  : 		Settings->Get_String(X,The_Game()->MapName,StringFormat("%s_Node_X",Header),0);

	push	0
	mov	eax, DWORD PTR _Header$20[ebp]
	push	eax
	push	OFFSET ??_C@_09GIHHJKKB@?$CFs_Node_X?$AA@
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	?StringFormat@@YA?AVStringClass@@PBDZZ	; StringFormat
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	?The_Game@@YAPAVcGameData@@XZ		; The_Game
	add	eax, 40					; 00000028H
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	lea	edx, DWORD PTR _X$19[ebp]
	push	edx
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD11@Z ; DASettingsClass::Get_String
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 156  : 		if (!X.Is_Empty()) {

	lea	ecx, DWORD PTR _X$19[ebp]
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN24@Init

; 157  : 			DANodeManager->Create_Node<DAControlNodeClass>(Settings->Get_INI(),Header);

	lea	eax, DWORD PTR _Header$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, eax
	call	??$Create_Node@VDAControlNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z ; DANodeManagerClass::Create_Node<DAControlNodeClass>

; 158  : 		}
; 159  : 		else {

	jmp	SHORT $LN23@Init
$LN24@Init:

; 160  : 			break;

	lea	ecx, DWORD PTR _X$19[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _Header$20[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	SHORT $LN25@Init
$LN23@Init:

; 161  : 		}
; 162  : 	}

	lea	ecx, DWORD PTR _X$19[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _Header$20[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN26@Init
$LN25@Init:

; 163  : 	for (int i = 1;;i++) {

	mov	DWORD PTR _i$18[ebp], 1
	jmp	SHORT $LN22@Init
$LN21@Init:
	mov	eax, DWORD PTR _i$18[ebp]
	add	eax, 1
	mov	DWORD PTR _i$18[ebp], eax
$LN22@Init:

; 164  : 		StringClass Header;

	push	0
	push	0
	lea	ecx, DWORD PTR _Header$17[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 165  : 		Header.Format("Tiberium%d",i);

	mov	eax, DWORD PTR _i$18[ebp]
	push	eax
	push	OFFSET ??_C@_0L@IBGDNKL@Tiberium?$CFd?$AA@
	lea	ecx, DWORD PTR _Header$17[ebp]
	push	ecx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 12					; 0000000cH

; 166  : 		StringClass X;

	push	0
	push	0
	lea	ecx, DWORD PTR _X$16[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 167  : 		Settings->Get_String(X,The_Game()->MapName,StringFormat("%s_Node_X",Header),0);

	push	0
	mov	eax, DWORD PTR _Header$17[ebp]
	push	eax
	push	OFFSET ??_C@_09GIHHJKKB@?$CFs_Node_X?$AA@
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	?StringFormat@@YA?AVStringClass@@PBDZZ	; StringFormat
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	?The_Game@@YAPAVcGameData@@XZ		; The_Game
	add	eax, 40					; 00000028H
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	lea	edx, DWORD PTR _X$16[ebp]
	push	edx
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_String@DASettingsClass@@QBEAAVStringClass@@AAV2@PBD11@Z ; DASettingsClass::Get_String
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 168  : 		if (!X.Is_Empty()) {

	lea	ecx, DWORD PTR _X$16[ebp]
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN19@Init

; 169  : 			DANodeManager->Create_Node<DATiberiumNodeClass>(Settings->Get_INI(),Header);

	lea	eax, DWORD PTR _Header$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _Settings$[ebp]
	call	?Get_INI@DASettingsClass@@QBEPBVINIClass@@XZ ; DASettingsClass::Get_INI
	push	eax
	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, eax
	call	??$Create_Node@VDATiberiumNodeClass@@@DANodeManagerClass@@QAEPAVDABaseNodeClass@@PBVINIClass@@ABVStringClass@@@Z ; DANodeManagerClass::Create_Node<DATiberiumNodeClass>

; 170  : 		}
; 171  : 		else {

	jmp	SHORT $LN18@Init
$LN19@Init:

; 172  : 			break;

	lea	ecx, DWORD PTR _X$16[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _Header$17[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	SHORT $LN20@Init
$LN18@Init:

; 173  : 		}
; 174  : 	}

	lea	ecx, DWORD PTR _X$16[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _Header$17[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN21@Init
$LN20@Init:

; 175  : 	
; 176  : 	//Change Stealth Tanks into Recon Bikes.
; 177  : 	PurchaseSettingsDefClass *PT = PurchaseSettingsDefClass::Find_Definition(PurchaseSettingsDefClass::TYPE_VEHICLES,PurchaseSettingsDefClass::TEAM_NOD);

	push	1
	push	1
	call	?Find_Definition@PurchaseSettingsDefClass@@SAPAV1@W4TYPE@1@W4TEAM@1@@Z ; PurchaseSettingsDefClass::Find_Definition
	add	esp, 8
	mov	DWORD PTR _PT$[ebp], eax

; 178  : 	if (PT->Get_Definition(5) == Get_Definition_ID("CnC_Nod_Stealth_Tank")) {

	push	5
	mov	ecx, DWORD PTR _PT$[ebp]
	call	?Get_Definition@PurchaseSettingsDefClass@@QAEHH@Z ; PurchaseSettingsDefClass::Get_Definition
	mov	esi, eax
	push	OFFSET ??_C@_0BF@EIMMMIOI@CnC_Nod_Stealth_Tank?$AA@
	call	?Get_Definition_ID@@YAHPBD@Z		; Get_Definition_ID
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN16@Init

; 179  : 		VehicleGameObjDef *Recon = (VehicleGameObjDef*)Find_Named_Definition("CnC_Nod_Recon_Bike");

	push	OFFSET ??_C@_0BD@GFDJBLDK@CnC_Nod_Recon_Bike?$AA@
	call	?Find_Named_Definition@@YAPAVDefinitionClass@@PBD@Z ; Find_Named_Definition
	add	esp, 4
	mov	DWORD PTR _Recon$15[ebp], eax

; 180  : 		if (Recon) {

	cmp	DWORD PTR _Recon$15[ebp], 0
	je	SHORT $LN16@Init

; 181  : 			PT->Set_Definition(5,Recon->Get_ID());

	mov	eax, DWORD PTR _Recon$15[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Recon$15[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	push	eax
	push	5
	mov	ecx, DWORD PTR _PT$[ebp]
	call	?Set_Definition@PurchaseSettingsDefClass@@QAEXHH@Z ; PurchaseSettingsDefClass::Set_Definition

; 182  : 			PT->Set_Cost(5,500);

	push	500					; 000001f4H
	push	5
	mov	ecx, DWORD PTR _PT$[ebp]
	call	?Set_Cost@PurchaseSettingsDefClass@@QAEXHH@Z ; PurchaseSettingsDefClass::Set_Cost
$LN16@Init:

; 183  : 		}
; 184  : 	}
; 185  : 
; 186  : 	//Change beacons into Remote C4.
; 187  : 	TeamPurchaseSettingsDefClass *PT2 = TeamPurchaseSettingsDefClass::Get_Definition(TeamPurchaseSettingsDefClass::TEAM_NOD);

	push	1
	call	?Get_Definition@TeamPurchaseSettingsDefClass@@SAPAV1@W4TEAM@1@@Z ; TeamPurchaseSettingsDefClass::Get_Definition
	add	esp, 4
	mov	DWORD PTR _PT2$[ebp], eax

; 188  : 	if (PT2->Get_Beacon_Definition() == Get_Definition_ID("CnC_POW_Nuclear_Missle_Beacon")) {

	mov	ecx, DWORD PTR _PT2$[ebp]
	call	?Get_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEHXZ ; TeamPurchaseSettingsDefClass::Get_Beacon_Definition
	mov	esi, eax
	push	OFFSET ??_C@_0BO@OMGBBNCN@CnC_POW_Nuclear_Missle_Beacon?$AA@
	call	?Get_Definition_ID@@YAHPBD@Z		; Get_Definition_ID
	add	esp, 4
	cmp	esi, eax
	jne	$LN13@Init

; 189  : 		PowerUpGameObjDef *RemotePowerUp = (PowerUpGameObjDef*)Find_Named_Definition("POW_MineRemote_Player");

	push	OFFSET ??_C@_0BG@OOJAAJNC@POW_MineRemote_Player?$AA@
	call	?Find_Named_Definition@@YAPAVDefinitionClass@@PBD@Z ; Find_Named_Definition
	add	esp, 4
	mov	DWORD PTR _RemotePowerUp$14[ebp], eax

; 190  : 		if (RemotePowerUp) {

	cmp	DWORD PTR _RemotePowerUp$14[ebp], 0
	je	$LN13@Init

; 191  : 			WeaponDefinitionClass *RemoteWeapon = (WeaponDefinitionClass*)Find_Definition(RemotePowerUp->GrantWeaponID);

	mov	eax, DWORD PTR _RemotePowerUp$14[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call	?Find_Definition@@YAPAVDefinitionClass@@K@Z ; Find_Definition
	add	esp, 4
	mov	DWORD PTR _RemoteWeapon$13[ebp], eax

; 192  : 			if (RemoteWeapon) {

	cmp	DWORD PTR _RemoteWeapon$13[ebp], 0
	je	SHORT $LN13@Init

; 193  : 				RemoteWeapon->MaxInventoryRounds = 1;

	mov	DWORD PTR $T8[ebp], 1
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	mov	ecx, DWORD PTR _RemoteWeapon$13[ebp]
	add	ecx, 132				; 00000084H
	call	??4?$SafeDataClass@H@@QAEAAHABH@Z	; SafeDataClass<int>::operator=

; 194  : 				RemoteWeapon->CanReceiveGenericCnCAmmo = false;

	mov	eax, DWORD PTR _RemoteWeapon$13[ebp]
	mov	BYTE PTR [eax+61], 0

; 195  : 
; 196  : 				PT2->Set_Beacon_Definition(RemotePowerUp->Get_ID());

	mov	eax, DWORD PTR _RemotePowerUp$14[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _RemotePowerUp$14[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _PT2$[ebp]
	call	?Set_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEXH@Z ; TeamPurchaseSettingsDefClass::Set_Beacon_Definition

; 197  : 				PT2->Set_Beacon_Cost(200);

	push	200					; 000000c8H
	mov	ecx, DWORD PTR _PT2$[ebp]
	call	?Set_Beacon_Cost@TeamPurchaseSettingsDefClass@@QAEXH@Z ; TeamPurchaseSettingsDefClass::Set_Beacon_Cost

; 198  : 
; 199  : 				PT2 = TeamPurchaseSettingsDefClass::Get_Definition(TeamPurchaseSettingsDefClass::TEAM_GDI);

	push	0
	call	?Get_Definition@TeamPurchaseSettingsDefClass@@SAPAV1@W4TEAM@1@@Z ; TeamPurchaseSettingsDefClass::Get_Definition
	add	esp, 4
	mov	DWORD PTR _PT2$[ebp], eax

; 200  : 				PT2->Set_Beacon_Definition(RemotePowerUp->Get_ID());

	mov	eax, DWORD PTR _RemotePowerUp$14[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _RemotePowerUp$14[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _PT2$[ebp]
	call	?Set_Beacon_Definition@TeamPurchaseSettingsDefClass@@QAEXH@Z ; TeamPurchaseSettingsDefClass::Set_Beacon_Definition

; 201  : 				PT2->Set_Beacon_Cost(200);

	push	200					; 000000c8H
	mov	ecx, DWORD PTR _PT2$[ebp]
	call	?Set_Beacon_Cost@TeamPurchaseSettingsDefClass@@QAEXH@Z ; TeamPurchaseSettingsDefClass::Set_Beacon_Cost
$LN13@Init:

; 202  : 			}
; 203  : 		}
; 204  : 	}
; 205  : 
; 206  : 	//Change Stealth Black Hand into Black Hand Rocket Soldier.
; 207  : 	PT = PurchaseSettingsDefClass::Find_Definition(PurchaseSettingsDefClass::TYPE_CLASSES,PurchaseSettingsDefClass::TEAM_NOD);

	push	1
	push	0
	call	?Find_Definition@PurchaseSettingsDefClass@@SAPAV1@W4TYPE@1@W4TEAM@1@@Z ; PurchaseSettingsDefClass::Find_Definition
	add	esp, 8
	mov	DWORD PTR _PT$[ebp], eax

; 208  : 	SoldierGameObjDef *SBH = (SoldierGameObjDef*)Find_Named_Definition("CnC_Nod_FlameThrower_2SF");

	push	OFFSET ??_C@_0BJ@HIKMPHIB@CnC_Nod_FlameThrower_2SF?$AA@
	call	?Find_Named_Definition@@YAPAVDefinitionClass@@PBD@Z ; Find_Named_Definition
	add	esp, 4
	mov	DWORD PTR _SBH$[ebp], eax

; 209  : 	if (SBH && PT->Get_Definition(5) == (int)SBH->Get_ID()) {

	cmp	DWORD PTR _SBH$[ebp], 0
	je	$LN11@Init
	push	5
	mov	ecx, DWORD PTR _PT$[ebp]
	call	?Get_Definition@PurchaseSettingsDefClass@@QAEHH@Z ; PurchaseSettingsDefClass::Get_Definition
	mov	esi, eax
	mov	eax, DWORD PTR _SBH$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _SBH$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, eax
	jne	$LN11@Init

; 210  : 		SoldierGameObjDef *BHRS = (SoldierGameObjDef*)Find_Named_Definition("CnC_Nod_MiniGunner_2SF_Skirmish");

	push	OFFSET ??_C@_0CA@PCAMMIOK@CnC_Nod_MiniGunner_2SF_Skirmish?$AA@
	call	?Find_Named_Definition@@YAPAVDefinitionClass@@PBD@Z ; Find_Named_Definition
	add	esp, 4
	mov	DWORD PTR _BHRS$12[ebp], eax

; 211  : 		if (BHRS) {

	cmp	DWORD PTR _BHRS$12[ebp], 0
	je	SHORT $LN11@Init

; 212  : 			BHRS->WeaponDefID = Get_Definition_ID("CnC_Weapon_RocketLauncher_Player");

	push	OFFSET ??_C@_0CB@EPHIGEJG@CnC_Weapon_RocketLauncher_Player@
	call	?Get_Definition_ID@@YAHPBD@Z		; Get_Definition_ID
	add	esp, 4
	mov	ecx, DWORD PTR _BHRS$12[ebp]
	mov	DWORD PTR [ecx+196], eax

; 213  : 			BHRS->WeaponRounds = 42;

	mov	DWORD PTR $T9[ebp], 42			; 0000002aH
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	mov	ecx, DWORD PTR _BHRS$12[ebp]
	add	ecx, 204				; 000000ccH
	call	??4?$SafeDataClass@H@@QAEAAHABH@Z	; SafeDataClass<int>::operator=

; 214  : 			BHRS->ScriptNameList = SBH->ScriptNameList;

	mov	eax, DWORD PTR _SBH$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _BHRS$12[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$DynamicVectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<StringClass>::operator=

; 215  : 			BHRS->ScriptParameterList = SBH->ScriptParameterList;

	mov	eax, DWORD PTR _SBH$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _BHRS$12[ebp]
	add	ecx, 52					; 00000034H
	call	??4?$DynamicVectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<StringClass>::operator=

; 216  : 			PT->Set_Definition(5,BHRS->Get_ID());

	mov	eax, DWORD PTR _BHRS$12[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _BHRS$12[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	push	eax
	push	5
	mov	ecx, DWORD PTR _PT$[ebp]
	call	?Set_Definition@PurchaseSettingsDefClass@@QAEXHH@Z ; PurchaseSettingsDefClass::Set_Definition
$LN11@Init:

; 217  : 		}
; 218  : 	}
; 219  : 
; 220  : 	//Change 4 shot Ramjets into 1 shot.
; 221  : 	DefinitionClass *OldWeaponDef = Find_Named_Definition("CnC_Weapon_RamjetRifle_Player");

	push	OFFSET ??_C@_0BO@BEJOHP@CnC_Weapon_RamjetRifle_Player?$AA@
	call	?Find_Named_Definition@@YAPAVDefinitionClass@@PBD@Z ; Find_Named_Definition
	add	esp, 4
	mov	DWORD PTR _OldWeaponDef$[ebp], eax

; 222  : 	DefinitionClass *NewWeaponDef = Find_Named_Definition("Weapon_RamjetRifle_Player");

	push	OFFSET ??_C@_0BK@OPFBCKCF@Weapon_RamjetRifle_Player?$AA@
	call	?Find_Named_Definition@@YAPAVDefinitionClass@@PBD@Z ; Find_Named_Definition
	add	esp, 4
	mov	DWORD PTR _NewWeaponDef$[ebp], eax

; 223  : 	if (OldWeaponDef && OldWeaponDef->Get_Class_ID() == CID_Weapon && NewWeaponDef && NewWeaponDef->Get_Class_ID() == CID_Weapon) {

	cmp	DWORD PTR _OldWeaponDef$[ebp], 0
	je	$LN3@Init
	mov	eax, DWORD PTR _OldWeaponDef$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _OldWeaponDef$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	eax, 45057				; 0000b001H
	jne	$LN3@Init
	cmp	DWORD PTR _NewWeaponDef$[ebp], 0
	je	$LN3@Init
	mov	eax, DWORD PTR _NewWeaponDef$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _NewWeaponDef$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	eax, 45057				; 0000b001H
	jne	$LN3@Init

; 224  : 		for (PowerUpGameObjDef *PowerUpDef = (PowerUpGameObjDef*)DefinitionMgrClass::Get_First(CID_PowerUp);PowerUpDef;PowerUpDef = (PowerUpGameObjDef*)DefinitionMgrClass::Get_Next(PowerUpDef,CID_PowerUp)) {

	push	1
	push	12291					; 00003003H
	call	DWORD PTR __imp_?Get_First@DefinitionMgrClass@@SAPAVDefinitionClass@@IW4ID_TYPE@1@@Z
	add	esp, 8
	mov	DWORD PTR _PowerUpDef$11[ebp], eax
	jmp	SHORT $LN9@Init
$LN8@Init:
	push	1
	push	12291					; 00003003H
	mov	eax, DWORD PTR _PowerUpDef$11[ebp]
	push	eax
	call	DWORD PTR __imp_?Get_Next@DefinitionMgrClass@@SAPAVDefinitionClass@@PAV2@IW4ID_TYPE@1@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PowerUpDef$11[ebp], eax
$LN9@Init:
	cmp	DWORD PTR _PowerUpDef$11[ebp], 0
	je	SHORT $LN7@Init

; 225  : 			if ((unsigned int)PowerUpDef->GrantWeaponID == OldWeaponDef->Get_ID()) {

	mov	eax, DWORD PTR _OldWeaponDef$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _OldWeaponDef$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, DWORD PTR _PowerUpDef$11[ebp]
	cmp	DWORD PTR [ecx+196], eax
	jne	SHORT $LN6@Init

; 226  : 				PowerUpDef->GrantWeaponID = NewWeaponDef->Get_ID();

	mov	eax, DWORD PTR _NewWeaponDef$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _NewWeaponDef$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, DWORD PTR _PowerUpDef$11[ebp]
	mov	DWORD PTR [ecx+196], eax
$LN6@Init:

; 227  : 			}
; 228  : 		}

	jmp	SHORT $LN8@Init
$LN7@Init:

; 229  : 		for (SoldierGameObjDef *SoldierDef = (SoldierGameObjDef*)DefinitionMgrClass::Get_First(CID_Soldier);SoldierDef;SoldierDef = (SoldierGameObjDef*)DefinitionMgrClass::Get_Next(SoldierDef,CID_Soldier)) {

	push	1
	push	12289					; 00003001H
	call	DWORD PTR __imp_?Get_First@DefinitionMgrClass@@SAPAVDefinitionClass@@IW4ID_TYPE@1@@Z
	add	esp, 8
	mov	DWORD PTR _SoldierDef$10[ebp], eax
	jmp	SHORT $LN5@Init
$LN4@Init:
	push	1
	push	12289					; 00003001H
	mov	eax, DWORD PTR _SoldierDef$10[ebp]
	push	eax
	call	DWORD PTR __imp_?Get_Next@DefinitionMgrClass@@SAPAVDefinitionClass@@PAV2@IW4ID_TYPE@1@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _SoldierDef$10[ebp], eax
$LN5@Init:
	cmp	DWORD PTR _SoldierDef$10[ebp], 0
	je	SHORT $LN3@Init

; 230  : 			if ((unsigned int)SoldierDef->WeaponDefID == OldWeaponDef->Get_ID()) {

	mov	eax, DWORD PTR _OldWeaponDef$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _OldWeaponDef$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, DWORD PTR _SoldierDef$10[ebp]
	cmp	DWORD PTR [ecx+196], eax
	jne	SHORT $LN2@Init

; 231  : 				SoldierDef->WeaponDefID = NewWeaponDef->Get_ID();

	mov	eax, DWORD PTR _NewWeaponDef$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _NewWeaponDef$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, DWORD PTR _SoldierDef$10[ebp]
	mov	DWORD PTR [ecx+196], eax
$LN2@Init:

; 232  : 			}
; 233  : 			if ((unsigned int)SoldierDef->SecondaryWeaponDefID == OldWeaponDef->Get_ID()) {

	mov	eax, DWORD PTR _OldWeaponDef$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _OldWeaponDef$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, DWORD PTR _SoldierDef$10[ebp]
	cmp	DWORD PTR [ecx+200], eax
	jne	SHORT $LN1@Init

; 234  : 				SoldierDef->SecondaryWeaponDefID = NewWeaponDef->Get_ID();

	mov	eax, DWORD PTR _NewWeaponDef$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _NewWeaponDef$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, DWORD PTR _SoldierDef$10[ebp]
	mov	DWORD PTR [ecx+200], eax
$LN1@Init:

; 235  : 			}
; 236  : 		}

	jmp	SHORT $LN4@Init
$LN3@Init:

; 237  : 	}
; 238  : 	
; 239  : 	Register_Event(DAEvent::SETTINGSLOADED);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?Register_Event@DAEventClass@@QAEXW4Type@DAEvent@@H@Z ; DAEventClass::Register_Event

; 240  : 	Register_Event(DAEvent::PLAYERLOADED);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?Register_Event@DAEventClass@@QAEXW4Type@DAEvent@@H@Z ; DAEventClass::Register_Event

; 241  : 	Register_Object_Event(DAObjectEvent::CREATED,DAObjectEvent::PLAYER);

	push	0
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?Register_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@W4ObjectType@3@H@Z ; DAEventClass::Register_Object_Event

; 242  : 	
; 243  : 	Start_Timer(10,CreditTickTime,true);

	push	0
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?Start_Timer@DAEventClass@@QAEXHM_NI@Z	; DAEventClass::Start_Timer

; 244  : 
; 245  : 	Register_Chat_Command((DAECC)&DADominationManagerClass::Nodes_Chat_Command,"!nodes|!node|!score|!points|!captures|!caps|!cap|!flag|!flags");

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0DO@JHMFIDMG@?$CBnodes?$HM?$CBnode?$HM?$CBscore?$HM?$CBpoints?$HM?$CBcap@
	push	OFFSET ?Nodes_Chat_Command@DADominationManagerClass@@AAE_NPAVcPlayer@@ABVDATokenClass@@W4TextMessageEnum@@@Z ; DADominationManagerClass::Nodes_Chat_Command
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?Register_Chat_Command@DAEventClass@@QAEXP81@AE_NPAVcPlayer@@ABVDATokenClass@@W4TextMessageEnum@@@ZPBDHW4Level@DAAccessLevel@@W4Type@DAChatType@@@Z ; DAEventClass::Register_Chat_Command

; 246  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@DADominationManagerClass@@EAEXXZ ENDP		; DADominationManagerClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Update_Score@DADominationManagerClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
?Update_Score@DADominationManagerClass@@QAEXH@Z PROC	; DADominationManagerClass::Update_Score, COMDAT
; _this$ = ecx

; 96   : 	inline void Update_Score(int Team) { 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		Find_Team(Team)->Set_Score(Score[Team]);

	mov	eax, DWORD PTR _Team$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+12]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _Team$[ebp]
	push	edx
	call	?Find_Team@@YAPAVcTeam@@H@Z		; Find_Team
	add	esp, 4
	mov	ecx, eax
	call	?Set_Score@cTeam@@QAEXM@Z		; cTeam::Set_Score

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Update_Score@DADominationManagerClass@@QAEXH@Z ENDP	; DADominationManagerClass::Update_Score
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Update_Node_Count@DADominationManagerClass@@QAEXXZ
_TEXT	SEGMENT
_GDI$ = -36						; size = 4
_Nod$ = -32						; size = 4
_Node$1 = -28						; size = 4
_i$2 = -24						; size = 4
_TiberiumNodeCount$ = -20				; size = 8
_ControlNodeCount$ = -12				; size = 8
_this$ = -4						; size = 4
?Update_Node_Count@DADominationManagerClass@@QAEXXZ PROC ; DADominationManagerClass::Update_Node_Count, COMDAT
; _this$ = ecx

; 322  : void DADominationManagerClass::Update_Node_Count() {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	int ControlNodeCount[2];
; 324  : 	ControlNodeCount[0] = 0;

	mov	eax, 4
	imul	eax, 0
	mov	DWORD PTR _ControlNodeCount$[ebp+eax], 0

; 325  : 	ControlNodeCount[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _ControlNodeCount$[ebp+eax], 0

; 326  : 
; 327  : 	int TiberiumNodeCount[2];
; 328  : 	TiberiumNodeCount[0] = 0;

	mov	eax, 4
	imul	eax, 0
	mov	DWORD PTR _TiberiumNodeCount$[ebp+eax], 0

; 329  : 	TiberiumNodeCount[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _TiberiumNodeCount$[ebp+eax], 0

; 330  : 
; 331  : 	for (int i = 0;i < DANodeManager->Get_Node_Count();i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN12@Update_Nod
$LN11@Update_Nod:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN12@Update_Nod:
	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Get_Node_Count@DANodeManagerClass@@QAEHXZ ; DANodeManagerClass::Get_Node_Count
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN10@Update_Nod

; 332  : 		DABaseNodeClass *Node = DANodeManager->Get_Node(i);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Get_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@H@Z ; DANodeManagerClass::Get_Node
	mov	DWORD PTR _Node$1[ebp], eax

; 333  : 		if (!_stricmp(Node->Get_Type(),ControlNodeType)) {

	push	OFFSET ??_C@_07DFGIDBBA@Control?$AA@
	mov	eax, DWORD PTR _Node$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Node$1[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@Update_Nod

; 334  : 			if (Node->Get_Team() == 0) {

	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	test	eax, eax
	jne	SHORT $LN8@Update_Nod

; 335  : 				ControlNodeCount[0]++;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _ControlNodeCount$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR _ControlNodeCount$[ebp+edx], ecx
	jmp	SHORT $LN7@Update_Nod
$LN8@Update_Nod:

; 336  : 			}
; 337  : 			else if (Node->Get_Team() == 1) {

	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	cmp	eax, 1
	jne	SHORT $LN7@Update_Nod

; 338  : 				ControlNodeCount[1]++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ControlNodeCount$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _ControlNodeCount$[ebp+edx], ecx
$LN7@Update_Nod:

; 339  : 			}
; 340  : 		}

	jmp	SHORT $LN5@Update_Nod
$LN9@Update_Nod:

; 341  : 		else if (!_stricmp(Node->Get_Type(),TiberiumNodeType)) {

	push	OFFSET ??_C@_08PKKJDHOJ@Tiberium?$AA@
	mov	eax, DWORD PTR _Node$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Node$1[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@Update_Nod

; 342  : 			if (Node->Get_Team() == 0) {

	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	test	eax, eax
	jne	SHORT $LN3@Update_Nod

; 343  : 				TiberiumNodeCount[0]++;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _TiberiumNodeCount$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR _TiberiumNodeCount$[ebp+edx], ecx
	jmp	SHORT $LN5@Update_Nod
$LN3@Update_Nod:

; 344  : 			}
; 345  : 			else if (Node->Get_Team() == 1) {

	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	cmp	eax, 1
	jne	SHORT $LN5@Update_Nod

; 346  : 				TiberiumNodeCount[1]++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _TiberiumNodeCount$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _TiberiumNodeCount$[ebp+edx], ecx
$LN5@Update_Nod:

; 347  : 			}
; 348  : 		}
; 349  : 	}

	jmp	$LN11@Update_Nod
$LN10@Update_Nod:

; 350  : 	cTeam *Nod = Find_Team(0);

	push	0
	call	?Find_Team@@YAPAVcTeam@@H@Z		; Find_Team
	add	esp, 4
	mov	DWORD PTR _Nod$[ebp], eax

; 351  : 	cTeam *GDI = Find_Team(1);

	push	1
	call	?Find_Team@@YAPAVcTeam@@H@Z		; Find_Team
	add	esp, 4
	mov	DWORD PTR _GDI$[ebp], eax

; 352  : 	Nod->Set_Kills(ControlNodeCount[0]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _ControlNodeCount$[ebp+eax]
	push	ecx
	mov	ecx, DWORD PTR _Nod$[ebp]
	call	?Set_Kills@cTeam@@QAEXH@Z		; cTeam::Set_Kills

; 353  : 	Nod->Set_Deaths(TiberiumNodeCount[0]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _TiberiumNodeCount$[ebp+eax]
	push	ecx
	mov	ecx, DWORD PTR _Nod$[ebp]
	call	?Set_Deaths@cTeam@@QAEXH@Z		; cTeam::Set_Deaths

; 354  : 	GDI->Set_Kills(ControlNodeCount[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ControlNodeCount$[ebp+eax]
	push	ecx
	mov	ecx, DWORD PTR _GDI$[ebp]
	call	?Set_Kills@cTeam@@QAEXH@Z		; cTeam::Set_Kills

; 355  : 	GDI->Set_Deaths(TiberiumNodeCount[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _TiberiumNodeCount$[ebp+eax]
	push	ecx
	mov	ecx, DWORD PTR _GDI$[ebp]
	call	?Set_Deaths@cTeam@@QAEXH@Z		; cTeam::Set_Deaths

; 356  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Update_Node_Count@DADominationManagerClass@@QAEXXZ ENDP ; DADominationManagerClass::Update_Node_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Credit_Tick_Time@DADominationManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Credit_Tick_Time@DADominationManagerClass@@QBEMXZ PROC ; DADominationManagerClass::Get_Credit_Tick_Time, COMDAT
; _this$ = ecx

; 92   : 	inline float Get_Credit_Tick_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		return CreditTickTime;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]

; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Credit_Tick_Time@DADominationManagerClass@@QBEMXZ ENDP ; DADominationManagerClass::Get_Credit_Tick_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Point_Tick_Time@DADominationManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Point_Tick_Time@DADominationManagerClass@@QBEMXZ PROC ; DADominationManagerClass::Get_Point_Tick_Time, COMDAT
; _this$ = ecx

; 86   : 	inline float Get_Point_Tick_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 		return PointTickTime;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]

; 88   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Point_Tick_Time@DADominationManagerClass@@QBEMXZ ENDP ; DADominationManagerClass::Get_Point_Tick_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Tiberium_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Tiberium_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ PROC ; DADominationManagerClass::Get_Tiberium_Node_Animation, COMDAT
; _this$ = ecx

; 80   : 	inline const StringClass &Get_Tiberium_Node_Animation() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		return TiberiumNodeAnimation;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H

; 82   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Tiberium_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ ENDP ; DADominationManagerClass::Get_Tiberium_Node_Animation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Tiberium_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Tiberium_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ PROC ; DADominationManagerClass::Get_Tiberium_Node_Model, COMDAT
; _this$ = ecx

; 77   : 	inline const StringClass &Get_Tiberium_Node_Model() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 		return TiberiumNodeModel;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H

; 79   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Tiberium_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ ENDP ; DADominationManagerClass::Get_Tiberium_Node_Model
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Tiberium_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Tiberium_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ PROC ; DADominationManagerClass::Get_Tiberium_Node_Preset, COMDAT
; _this$ = ecx

; 74   : 	inline const StringClass &Get_Tiberium_Node_Preset() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		return TiberiumNodePreset;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H

; 76   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Tiberium_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ ENDP ; DADominationManagerClass::Get_Tiberium_Node_Preset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Control_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Control_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ PROC ; DADominationManagerClass::Get_Control_Node_Animation, COMDAT
; _this$ = ecx

; 71   : 	inline const StringClass &Get_Control_Node_Animation() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 		return ControlNodeAnimation;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Control_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ ENDP ; DADominationManagerClass::Get_Control_Node_Animation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Control_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Control_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ PROC ; DADominationManagerClass::Get_Control_Node_Model, COMDAT
; _this$ = ecx

; 68   : 	inline const StringClass &Get_Control_Node_Model() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		return ControlNodeModel;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H

; 70   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Control_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ ENDP ; DADominationManagerClass::Get_Control_Node_Model
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Control_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Control_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ PROC ; DADominationManagerClass::Get_Control_Node_Preset, COMDAT
; _this$ = ecx

; 65   : 	inline const StringClass &Get_Control_Node_Preset() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return ControlNodePreset;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Control_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ ENDP ; DADominationManagerClass::Get_Control_Node_Preset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Set_Winner@DADominationManagerClass@@QAEXH@Z
_TEXT	SEGMENT
tv239 = -96						; size = 4
_Node$1 = -28						; size = 4
_i$2 = -24						; size = 4
_TiberiumNodeCount$ = -20				; size = 8
_ControlNodeCount$ = -12				; size = 8
_this$ = -4						; size = 4
_Winner$ = 8						; size = 4
?Set_Winner@DADominationManagerClass@@QAEXH@Z PROC	; DADominationManagerClass::Set_Winner, COMDAT
; _this$ = ecx

; 274  : void DADominationManagerClass::Set_Winner(int Winner) {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 	if (Winner == 0) {

	cmp	DWORD PTR _Winner$[ebp], 0
	jne	SHORT $LN15@Set_Winner

; 276  : 		DA::Create_2D_Sound_Team(0,"M00EVAN_DSGN0077I1EVAN_snd.wav");

	push	OFFSET ??_C@_0BP@PJPNOFAF@M00EVAN_DSGN0077I1EVAN_snd?4wav?$AA@
	push	0
	call	?Create_2D_Sound_Team@DA@@SAXHPBD@Z	; DA::Create_2D_Sound_Team
	add	esp, 8

; 277  : 		DA::Create_2D_Sound_Team(1,"M00EVAG_DSGN0011I1EVAG_snd.wav");

	push	OFFSET ??_C@_0BP@HIMNBDJK@M00EVAG_DSGN0011I1EVAG_snd?4wav?$AA@
	push	1
	call	?Create_2D_Sound_Team@DA@@SAXHPBD@Z	; DA::Create_2D_Sound_Team
	add	esp, 8
	jmp	SHORT $LN13@Set_Winner
$LN15@Set_Winner:

; 278  : 	}
; 279  : 	else if (Winner == 1) {

	cmp	DWORD PTR _Winner$[ebp], 1
	jne	SHORT $LN13@Set_Winner

; 280  : 		DA::Create_2D_Sound_Team(0,"M00EVAN_DSGN0078I1EVAN_snd.wav");

	push	OFFSET ??_C@_0BP@HHBHICDP@M00EVAN_DSGN0078I1EVAN_snd?4wav?$AA@
	push	0
	call	?Create_2D_Sound_Team@DA@@SAXHPBD@Z	; DA::Create_2D_Sound_Team
	add	esp, 8

; 281  : 		DA::Create_2D_Sound_Team(1,"M00EVAG_DSGN0005I1EVAG_snd.wav");

	push	OFFSET ??_C@_0BP@CLFKJEFO@M00EVAG_DSGN0005I1EVAG_snd?4wav?$AA@
	push	1
	call	?Create_2D_Sound_Team@DA@@SAXHPBD@Z	; DA::Create_2D_Sound_Team
	add	esp, 8
$LN13@Set_Winner:

; 282  : 	}
; 283  : 	DA::Host_Message("%ls has won the game!",Get_Wide_Team_Name(Winner));

	mov	eax, DWORD PTR _Winner$[ebp]
	push	eax
	call	?Get_Wide_Team_Name@@YAPB_WH@Z		; Get_Wide_Team_Name
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0BG@OIKCAIKB@?$CFls?5has?5won?5the?5game?$CB?$AA@
	call	?Host_Message@DA@@SAXPBDZZ		; DA::Host_Message
	add	esp, 8

; 284  : 
; 285  : 	int ControlNodeCount[2];
; 286  : 	ControlNodeCount[0] = 0;

	mov	eax, 4
	imul	eax, 0
	mov	DWORD PTR _ControlNodeCount$[ebp+eax], 0

; 287  : 	ControlNodeCount[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _ControlNodeCount$[ebp+eax], 0

; 288  : 
; 289  : 	int TiberiumNodeCount[2];
; 290  : 	TiberiumNodeCount[0] = 0;

	mov	eax, 4
	imul	eax, 0
	mov	DWORD PTR _TiberiumNodeCount$[ebp+eax], 0

; 291  : 	TiberiumNodeCount[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _TiberiumNodeCount$[ebp+eax], 0

; 292  : 
; 293  : 	for (int i = 0;i < DANodeManager->Get_Node_Count();i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN12@Set_Winner
$LN11@Set_Winner:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN12@Set_Winner:
	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Get_Node_Count@DANodeManagerClass@@QAEHXZ ; DANodeManagerClass::Get_Node_Count
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN10@Set_Winner

; 294  : 		DABaseNodeClass *Node = DANodeManager->Get_Node(i);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	call	?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ; DASingleton<DANodeManagerClass>::Get_Instance
	mov	ecx, eax
	call	?Get_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@H@Z ; DANodeManagerClass::Get_Node
	mov	DWORD PTR _Node$1[ebp], eax

; 295  : 		Node->Unregister_Event(DAEvent::THINK);

	push	48					; 00000030H
	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Unregister_Event@DAEventClass@@QAEXW4Type@DAEvent@@@Z ; DAEventClass::Unregister_Event

; 296  : 		Node->Stop_Timer(10);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Stop_Timer@DAEventClass@@QAEXHI@Z	; DAEventClass::Stop_Timer

; 297  : 		if (!_stricmp(Node->Get_Type(),ControlNodeType)) {

	push	OFFSET ??_C@_07DFGIDBBA@Control?$AA@
	mov	eax, DWORD PTR _Node$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Node$1[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@Set_Winner

; 298  : 			if (Node->Get_Team() == 0) {

	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	test	eax, eax
	jne	SHORT $LN8@Set_Winner

; 299  : 				ControlNodeCount[0]++;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _ControlNodeCount$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR _ControlNodeCount$[ebp+edx], ecx
	jmp	SHORT $LN6@Set_Winner
$LN8@Set_Winner:

; 300  : 			}
; 301  : 			else if (Node->Get_Team() == 1) {

	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	cmp	eax, 1
	jne	SHORT $LN6@Set_Winner

; 302  : 				ControlNodeCount[1]++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ControlNodeCount$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _ControlNodeCount$[ebp+edx], ecx
$LN6@Set_Winner:

; 303  : 			}
; 304  : 		}

	jmp	SHORT $LN1@Set_Winner
$LN9@Set_Winner:

; 305  : 		else if (!_stricmp(Node->Get_Type(),TiberiumNodeType)) {

	push	OFFSET ??_C@_08PKKJDHOJ@Tiberium?$AA@
	mov	eax, DWORD PTR _Node$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Node$1[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Set_Winner

; 306  : 			if (Node->Get_Team() == 0) {

	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	test	eax, eax
	jne	SHORT $LN3@Set_Winner

; 307  : 				TiberiumNodeCount[0]++;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _TiberiumNodeCount$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR _TiberiumNodeCount$[ebp+edx], ecx
	jmp	SHORT $LN1@Set_Winner
$LN3@Set_Winner:

; 308  : 			}
; 309  : 			else if (Node->Get_Team() == 1) {

	mov	ecx, DWORD PTR _Node$1[ebp]
	call	?Get_Team@DABaseNodeClass@@QBEHXZ	; DABaseNodeClass::Get_Team
	cmp	eax, 1
	jne	SHORT $LN1@Set_Winner

; 310  : 				TiberiumNodeCount[1]++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _TiberiumNodeCount$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _TiberiumNodeCount$[ebp+edx], ecx
$LN1@Set_Winner:

; 311  : 			}
; 312  : 		}
; 313  : 	}

	jmp	$LN11@Set_Winner
$LN10@Set_Winner:

; 314  : 
; 315  : 	DA::Host_Message("%ls controlled %d Tiberium Node(s), %d Control Node(s), and had a score of %.0f.",Get_Wide_Team_Name(0),TiberiumNodeCount[0],ControlNodeCount[0],Score[0]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax+12]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _ControlNodeCount$[ebp+edx]
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _TiberiumNodeCount$[ebp+ecx]
	push	edx
	push	0
	call	?Get_Wide_Team_Name@@YAPB_WH@Z		; Get_Wide_Team_Name
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FB@HEJPMFGD@?$CFls?5controlled?5?$CFd?5Tiberium?5Node?$CI@
	call	?Host_Message@DA@@SAXPBDZZ		; DA::Host_Message
	add	esp, 24					; 00000018H

; 316  : 	DA::Host_Message("%ls controlled %d Tiberium Node(s), %d Control Node(s), and had a score of %.0f.",Get_Wide_Team_Name(1),TiberiumNodeCount[1],ControlNodeCount[1],Score[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax+12]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _ControlNodeCount$[ebp+edx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _TiberiumNodeCount$[ebp+ecx]
	push	edx
	push	1
	call	?Get_Wide_Team_Name@@YAPB_WH@Z		; Get_Wide_Team_Name
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FB@HEJPMFGD@?$CFls?5controlled?5?$CFd?5Tiberium?5Node?$CI@
	call	?Host_Message@DA@@SAXPBDZZ		; DA::Host_Message
	add	esp, 24					; 00000018H

; 317  : 
; 318  : 	Stop_Timer(10);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop_Timer@DAEventClass@@QAEXHI@Z	; DAEventClass::Stop_Timer

; 319  : 	Start_Timer(11,5.0f,false,Winner?0:1);

	cmp	DWORD PTR _Winner$[ebp], 0
	je	SHORT $LN18@Set_Winner
	mov	DWORD PTR tv239[ebp], 0
	jmp	SHORT $LN19@Set_Winner
$LN18@Set_Winner:
	mov	DWORD PTR tv239[ebp], 1
$LN19@Set_Winner:
	mov	eax, DWORD PTR tv239[ebp]
	push	eax
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Timer@DAEventClass@@QAEXHM_NI@Z	; DAEventClass::Start_Timer

; 320  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Winner@DADominationManagerClass@@QAEXH@Z ENDP	; DADominationManagerClass::Set_Winner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Increment_Credits@DADominationManagerClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
?Increment_Credits@DADominationManagerClass@@QAEXH@Z PROC ; DADominationManagerClass::Increment_Credits, COMDAT
; _this$ = ecx

; 61   : 	inline void Increment_Credits(int Team) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		Give_Credits_Team(Team,CreditTickAmount);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _Team$[ebp]
	push	ecx
	call	?Give_Credits_Team@@YAXHM@Z		; Give_Credits_Team
	add	esp, 8

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Increment_Credits@DADominationManagerClass@@QAEXH@Z ENDP ; DADominationManagerClass::Increment_Credits
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Increment_Score@DADominationManagerClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
?Increment_Score@DADominationManagerClass@@QAEXH@Z PROC	; DADominationManagerClass::Increment_Score, COMDAT
; _this$ = ecx

; 53   : 	inline void Increment_Score(int Team) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 		Score[Team] += PointTickAmount;

	mov	eax, DWORD PTR _Team$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+12]
	addss	xmm0, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _Team$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+12], xmm0

; 55   : 		Update_Score(Team);

	mov	eax, DWORD PTR _Team$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update_Score@DADominationManagerClass@@QAEXH@Z ; DADominationManagerClass::Update_Score

; 56   : 
; 57   : 		if (Score[Team] >= WinningPoints) {

	mov	eax, DWORD PTR _Team$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+12]
	comiss	xmm0, DWORD PTR [edx+60]
	jb	SHORT $LN1@Increment_

; 58   : 			Set_Winner(Team);

	mov	eax, DWORD PTR _Team$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Winner@DADominationManagerClass@@QAEXH@Z ; DADominationManagerClass::Set_Winner
$LN1@Increment_:

; 59   : 		}
; 60   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Increment_Score@DADominationManagerClass@@QAEXH@Z ENDP	; DADominationManagerClass::Increment_Score
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDATiberiumNodeClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDATiberiumNodeClass@@UAEPAXI@Z PROC			; DATiberiumNodeClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DATiberiumNodeClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDATiberiumNodeClass@@UAEPAXI@Z ENDP			; DATiberiumNodeClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DATiberiumNodeClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DATiberiumNodeClass@@UAE@XZ PROC			; DATiberiumNodeClass::~DATiberiumNodeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DABaseNodeClass@@UAE@XZ		; DABaseNodeClass::~DABaseNodeClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DATiberiumNodeClass@@UAE@XZ ENDP			; DATiberiumNodeClass::~DATiberiumNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DATiberiumNodeClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DATiberiumNodeClass@@QAE@XZ PROC			; DATiberiumNodeClass::DATiberiumNodeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DABaseNodeClass@@IAE@XZ		; DABaseNodeClass::DABaseNodeClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DATiberiumNodeClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DATiberiumNodeClass@@QAE@XZ ENDP			; DATiberiumNodeClass::DATiberiumNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Init@DATiberiumNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
tv157 = -76						; size = 4
tv135 = -76						; size = 4
tv81 = -76						; size = 4
tv158 = -72						; size = 4
tv136 = -72						; size = 4
tv82 = -72						; size = 4
_this$ = -4						; size = 4
_INI$ = 8						; size = 4
_Header$ = 12						; size = 4
?Init@DATiberiumNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z PROC ; DATiberiumNodeClass::Init, COMDAT
; _this$ = ecx

; 65   : void DATiberiumNodeClass::Init(const INIClass *INI,const StringClass &Header) {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 	Preset = DADominationManager->Get_Tiberium_Node_Preset();

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN3@Init
	mov	eax, DWORD PTR tv82[ebp]
	sub	eax, 4
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN4@Init
$LN3@Init:
	mov	DWORD PTR tv81[ebp], 0
$LN4@Init:
	mov	ecx, DWORD PTR tv81[ebp]
	call	?Get_Tiberium_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Tiberium_Node_Preset
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 67   : 	Model = DADominationManager->Get_Tiberium_Node_Model();

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv136[ebp], eax
	cmp	DWORD PTR tv136[ebp], 0
	je	SHORT $LN5@Init
	mov	eax, DWORD PTR tv136[ebp]
	sub	eax, 4
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN6@Init
$LN5@Init:
	mov	DWORD PTR tv135[ebp], 0
$LN6@Init:
	mov	ecx, DWORD PTR tv135[ebp]
	call	?Get_Tiberium_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Tiberium_Node_Model
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 68   : 	Animation = DADominationManager->Get_Tiberium_Node_Animation();

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv158[ebp], eax
	cmp	DWORD PTR tv158[ebp], 0
	je	SHORT $LN7@Init
	mov	eax, DWORD PTR tv158[ebp]
	sub	eax, 4
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN8@Init
$LN7@Init:
	mov	DWORD PTR tv157[ebp], 0
$LN8@Init:
	mov	ecx, DWORD PTR tv157[ebp]
	call	?Get_Tiberium_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Tiberium_Node_Animation
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 69   : 	DABaseNodeClass::Init(INI,Header);

	mov	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _INI$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@DABaseNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z ; DABaseNodeClass::Init

; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@DATiberiumNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z ENDP ; DATiberiumNodeClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Type@DATiberiumNodeClass@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Type@DATiberiumNodeClass@@UBEPBDXZ PROC		; DATiberiumNodeClass::Get_Type, COMDAT
; _this$ = ecx

; 44   : 	virtual const char *Get_Type() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return TiberiumNodeType;

	mov	eax, OFFSET ??_C@_08PKKJDHOJ@Tiberium?$AA@

; 46   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Type@DATiberiumNodeClass@@UBEPBDXZ ENDP		; DATiberiumNodeClass::Get_Type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Contested_Event@DATiberiumNodeClass@@UAEXXZ
_TEXT	SEGMENT
tv128 = -76						; size = 4
tv129 = -72						; size = 4
_this$ = -4						; size = 4
?Contested_Event@DATiberiumNodeClass@@UAEXXZ PROC	; DATiberiumNodeClass::Contested_Event, COMDAT
; _this$ = ecx

; 89   : void DATiberiumNodeClass::Contested_Event() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	if (Is_Contested()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Contested@DABaseNodeClass@@QBE_NXZ	; DABaseNodeClass::Is_Contested
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Contested_

; 91   : 		Stop_Timer(10);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop_Timer@DAEventClass@@QAEXHI@Z	; DAEventClass::Stop_Timer

; 92   : 	}
; 93   : 	else {

	jmp	SHORT $LN1@Contested_
$LN2@Contested_:

; 94   : 		Start_Timer(10,DADominationManager->Get_Credit_Tick_Time(),true);

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv129[ebp], eax
	cmp	DWORD PTR tv129[ebp], 0
	je	SHORT $LN5@Contested_
	mov	eax, DWORD PTR tv129[ebp]
	sub	eax, 4
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN6@Contested_
$LN5@Contested_:
	mov	DWORD PTR tv128[ebp], 0
$LN6@Contested_:
	push	0
	push	1
	mov	ecx, DWORD PTR tv128[ebp]
	call	?Get_Credit_Tick_Time@DADominationManagerClass@@QBEMXZ ; DADominationManagerClass::Get_Credit_Tick_Time
	push	ecx
	fstp	DWORD PTR [esp]
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Timer@DAEventClass@@QAEXHM_NI@Z	; DAEventClass::Start_Timer
$LN1@Contested_:

; 95   : 	}
; 96   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Contested_Event@DATiberiumNodeClass@@UAEXXZ ENDP	; DATiberiumNodeClass::Contested_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Capture_Event@DATiberiumNodeClass@@UAEXXZ
_TEXT	SEGMENT
tv144 = -76						; size = 4
tv88 = -76						; size = 4
tv145 = -72						; size = 4
tv89 = -72						; size = 4
_this$ = -4						; size = 4
?Capture_Event@DATiberiumNodeClass@@UAEXXZ PROC		; DATiberiumNodeClass::Capture_Event, COMDAT
; _this$ = ecx

; 82   : void DATiberiumNodeClass::Capture_Event() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	Stop_Timer(10);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop_Timer@DAEventClass@@QAEXHI@Z	; DAEventClass::Stop_Timer

; 84   : 	Start_Timer(10,DADominationManager->Get_Credit_Tick_Time(),true);

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv89[ebp], eax
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN3@Capture_Ev
	mov	eax, DWORD PTR tv89[ebp]
	sub	eax, 4
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN4@Capture_Ev
$LN3@Capture_Ev:
	mov	DWORD PTR tv88[ebp], 0
$LN4@Capture_Ev:
	push	0
	push	1
	mov	ecx, DWORD PTR tv88[ebp]
	call	?Get_Credit_Tick_Time@DADominationManagerClass@@QBEMXZ ; DADominationManagerClass::Get_Credit_Tick_Time
	push	ecx
	fstp	DWORD PTR [esp]
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Timer@DAEventClass@@QAEXHM_NI@Z	; DAEventClass::Start_Timer

; 85   : 	DA::Create_2D_Sound_Team(Team,"M00EVAG_DSGN0049I1EVAG_snd.wav");

	push	OFFSET ??_C@_0BP@PPHAGAFJ@M00EVAG_DSGN0049I1EVAG_snd?4wav?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?Create_2D_Sound_Team@DA@@SAXHPBD@Z	; DA::Create_2D_Sound_Team
	add	esp, 8

; 86   : 	DADominationManager->Update_Node_Count();

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv145[ebp], eax
	cmp	DWORD PTR tv145[ebp], 0
	je	SHORT $LN5@Capture_Ev
	mov	eax, DWORD PTR tv145[ebp]
	sub	eax, 4
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN6@Capture_Ev
$LN5@Capture_Ev:
	mov	DWORD PTR tv144[ebp], 0
$LN6@Capture_Ev:
	mov	ecx, DWORD PTR tv144[ebp]
	call	?Update_Node_Count@DADominationManagerClass@@QAEXXZ ; DADominationManagerClass::Update_Node_Count

; 87   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Capture_Event@DATiberiumNodeClass@@UAEXXZ ENDP		; DATiberiumNodeClass::Capture_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Timer_Expired@DATiberiumNodeClass@@UAEXHI@Z
_TEXT	SEGMENT
tv75 = -76						; size = 4
tv76 = -72						; size = 4
_this$ = -4						; size = 4
_Number$ = 8						; size = 4
_Data$ = 12						; size = 4
?Timer_Expired@DATiberiumNodeClass@@UAEXHI@Z PROC	; DATiberiumNodeClass::Timer_Expired, COMDAT
; _this$ = ecx

; 72   : void DATiberiumNodeClass::Timer_Expired(int Number,unsigned int Data) {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 	if (Number == 10) {

	cmp	DWORD PTR _Number$[ebp], 10		; 0000000aH
	jne	SHORT $LN2@Timer_Expi

; 74   : 		DADominationManager->Increment_Credits(Team);

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv76[ebp], eax
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN5@Timer_Expi
	mov	eax, DWORD PTR tv76[ebp]
	sub	eax, 4
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Timer_Expi
$LN5@Timer_Expi:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Timer_Expi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR tv75[ebp]
	call	?Increment_Credits@DADominationManagerClass@@QAEXH@Z ; DADominationManagerClass::Increment_Credits

; 75   : 	}
; 76   : 	else {

	jmp	SHORT $LN3@Timer_Expi
$LN2@Timer_Expi:

; 77   : 		Stop_Timer(10);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop_Timer@DAEventClass@@QAEXHI@Z	; DAEventClass::Stop_Timer

; 78   : 		DABaseNodeClass::Timer_Expired(Number,Data);

	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Number$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Timer_Expired@DAEventClass@@UAEXHI@Z	; DAEventClass::Timer_Expired
$LN3@Timer_Expi:

; 79   : 	}
; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@DATiberiumNodeClass@@UAEXHI@Z ENDP	; DATiberiumNodeClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAControlNodeClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAControlNodeClass@@UAEPAXI@Z PROC			; DAControlNodeClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAControlNodeClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAControlNodeClass@@UAEPAXI@Z ENDP			; DAControlNodeClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DAControlNodeClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAControlNodeClass@@UAE@XZ PROC			; DAControlNodeClass::~DAControlNodeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnNodeClass@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAControlNodeClass@@UAE@XZ ENDP			; DAControlNodeClass::~DAControlNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAControlNodeClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAControlNodeClass@@QAE@XZ PROC			; DAControlNodeClass::DAControlNodeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DASpawnNodeClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAControlNodeClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAControlNodeClass@@QAE@XZ ENDP			; DAControlNodeClass::DAControlNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Init@DAControlNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
tv157 = -76						; size = 4
tv135 = -76						; size = 4
tv81 = -76						; size = 4
tv158 = -72						; size = 4
tv136 = -72						; size = 4
tv82 = -72						; size = 4
_this$ = -4						; size = 4
_INI$ = 8						; size = 4
_Header$ = 12						; size = 4
?Init@DAControlNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z PROC ; DAControlNodeClass::Init, COMDAT
; _this$ = ecx

; 30   : void DAControlNodeClass::Init(const INIClass *INI,const StringClass &Header) {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 	Preset = DADominationManager->Get_Control_Node_Preset();

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN3@Init
	mov	eax, DWORD PTR tv82[ebp]
	sub	eax, 4
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN4@Init
$LN3@Init:
	mov	DWORD PTR tv81[ebp], 0
$LN4@Init:
	mov	ecx, DWORD PTR tv81[ebp]
	call	?Get_Control_Node_Preset@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Control_Node_Preset
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 32   : 	Model = DADominationManager->Get_Control_Node_Model();

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv136[ebp], eax
	cmp	DWORD PTR tv136[ebp], 0
	je	SHORT $LN5@Init
	mov	eax, DWORD PTR tv136[ebp]
	sub	eax, 4
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN6@Init
$LN5@Init:
	mov	DWORD PTR tv135[ebp], 0
$LN6@Init:
	mov	ecx, DWORD PTR tv135[ebp]
	call	?Get_Control_Node_Model@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Control_Node_Model
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 33   : 	Animation = DADominationManager->Get_Control_Node_Animation();

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv158[ebp], eax
	cmp	DWORD PTR tv158[ebp], 0
	je	SHORT $LN7@Init
	mov	eax, DWORD PTR tv158[ebp]
	sub	eax, 4
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN8@Init
$LN7@Init:
	mov	DWORD PTR tv157[ebp], 0
$LN8@Init:
	mov	ecx, DWORD PTR tv157[ebp]
	call	?Get_Control_Node_Animation@DADominationManagerClass@@QBEABVStringClass@@XZ ; DADominationManagerClass::Get_Control_Node_Animation
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 34   : 	DASpawnNodeClass::Init(INI,Header);

	mov	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _INI$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@DASpawnNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z ; DASpawnNodeClass::Init

; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@DAControlNodeClass@@MAEXPBVINIClass@@ABVStringClass@@@Z ENDP ; DAControlNodeClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.h
;	COMDAT ?Get_Type@DAControlNodeClass@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Type@DAControlNodeClass@@UBEPBDXZ PROC		; DAControlNodeClass::Get_Type, COMDAT
; _this$ = ecx

; 32   : 	virtual const char *Get_Type() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 		return ControlNodeType;

	mov	eax, OFFSET ??_C@_07DFGIDBBA@Control?$AA@

; 34   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Type@DAControlNodeClass@@UBEPBDXZ ENDP		; DAControlNodeClass::Get_Type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Contested_Event@DAControlNodeClass@@UAEXXZ
_TEXT	SEGMENT
tv135 = -76						; size = 4
tv136 = -72						; size = 4
_this$ = -4						; size = 4
?Contested_Event@DAControlNodeClass@@UAEXXZ PROC	; DAControlNodeClass::Contested_Event, COMDAT
; _this$ = ecx

; 54   : void DAControlNodeClass::Contested_Event() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	if (Is_Contested()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Contested@DABaseNodeClass@@QBE_NXZ	; DABaseNodeClass::Is_Contested
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Contested_

; 56   : 		Stop_Timer(10);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop_Timer@DAEventClass@@QAEXHI@Z	; DAEventClass::Stop_Timer

; 57   : 	}
; 58   : 	else {

	jmp	SHORT $LN1@Contested_
$LN2@Contested_:

; 59   : 		Stop_Timer(10);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop_Timer@DAEventClass@@QAEXHI@Z	; DAEventClass::Stop_Timer

; 60   : 		Start_Timer(10,DADominationManager->Get_Point_Tick_Time(),true);

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv136[ebp], eax
	cmp	DWORD PTR tv136[ebp], 0
	je	SHORT $LN5@Contested_
	mov	eax, DWORD PTR tv136[ebp]
	sub	eax, 4
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN6@Contested_
$LN5@Contested_:
	mov	DWORD PTR tv135[ebp], 0
$LN6@Contested_:
	push	0
	push	1
	mov	ecx, DWORD PTR tv135[ebp]
	call	?Get_Point_Tick_Time@DADominationManagerClass@@QBEMXZ ; DADominationManagerClass::Get_Point_Tick_Time
	push	ecx
	fstp	DWORD PTR [esp]
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Timer@DAEventClass@@QAEXHM_NI@Z	; DAEventClass::Start_Timer
$LN1@Contested_:

; 61   : 	}
; 62   : 	DASpawnNodeClass::Contested_Event();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Contested_Event@DASpawnNodeClass@@MAEXXZ ; DASpawnNodeClass::Contested_Event

; 63   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Contested_Event@DAControlNodeClass@@UAEXXZ ENDP	; DAControlNodeClass::Contested_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Capture_Event@DAControlNodeClass@@UAEXXZ
_TEXT	SEGMENT
tv149 = -76						; size = 4
tv93 = -76						; size = 4
tv150 = -72						; size = 4
tv94 = -72						; size = 4
_this$ = -4						; size = 4
?Capture_Event@DAControlNodeClass@@UAEXXZ PROC		; DAControlNodeClass::Capture_Event, COMDAT
; _this$ = ecx

; 46   : void DAControlNodeClass::Capture_Event() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 	DASpawnNodeClass::Capture_Event();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Capture_Event@DASpawnNodeClass@@MAEXXZ	; DASpawnNodeClass::Capture_Event

; 48   : 	Stop_Timer(10);

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop_Timer@DAEventClass@@QAEXHI@Z	; DAEventClass::Stop_Timer

; 49   : 	Start_Timer(10,DADominationManager->Get_Point_Tick_Time(),true);

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv94[ebp], eax
	cmp	DWORD PTR tv94[ebp], 0
	je	SHORT $LN3@Capture_Ev
	mov	eax, DWORD PTR tv94[ebp]
	sub	eax, 4
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN4@Capture_Ev
$LN3@Capture_Ev:
	mov	DWORD PTR tv93[ebp], 0
$LN4@Capture_Ev:
	push	0
	push	1
	mov	ecx, DWORD PTR tv93[ebp]
	call	?Get_Point_Tick_Time@DADominationManagerClass@@QBEMXZ ; DADominationManagerClass::Get_Point_Tick_Time
	push	ecx
	fstp	DWORD PTR [esp]
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Timer@DAEventClass@@QAEXHM_NI@Z	; DAEventClass::Start_Timer

; 50   : 	DA::Create_2D_Sound_Team(Team,"M00EVAG_DSGN0048I1EVAG_snd.wav");

	push	OFFSET ??_C@_0BP@FBBIPBMI@M00EVAG_DSGN0048I1EVAG_snd?4wav?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?Create_2D_Sound_Team@DA@@SAXHPBD@Z	; DA::Create_2D_Sound_Team
	add	esp, 8

; 51   : 	DADominationManager->Update_Node_Count();

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv150[ebp], eax
	cmp	DWORD PTR tv150[ebp], 0
	je	SHORT $LN5@Capture_Ev
	mov	eax, DWORD PTR tv150[ebp]
	sub	eax, 4
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN6@Capture_Ev
$LN5@Capture_Ev:
	mov	DWORD PTR tv149[ebp], 0
$LN6@Capture_Ev:
	mov	ecx, DWORD PTR tv149[ebp]
	call	?Update_Node_Count@DADominationManagerClass@@QAEXXZ ; DADominationManagerClass::Update_Node_Count

; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Capture_Event@DAControlNodeClass@@UAEXXZ ENDP		; DAControlNodeClass::Capture_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_domination.cpp
;	COMDAT ?Timer_Expired@DAControlNodeClass@@UAEXHI@Z
_TEXT	SEGMENT
tv75 = -76						; size = 4
tv76 = -72						; size = 4
_this$ = -4						; size = 4
_Number$ = 8						; size = 4
_Data$ = 12						; size = 4
?Timer_Expired@DAControlNodeClass@@UAEXHI@Z PROC	; DAControlNodeClass::Timer_Expired, COMDAT
; _this$ = ecx

; 37   : void DAControlNodeClass::Timer_Expired(int Number,unsigned int Data) {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	if (Number == 10) {

	cmp	DWORD PTR _Number$[ebp], 10		; 0000000aH
	jne	SHORT $LN2@Timer_Expi

; 39   : 		DADominationManager->Increment_Score(Team);

	mov	ecx, OFFSET ?DADominationManagerClassRegistrant@@3V?$DAGameModeRegistrant@VDADominationManagerClass@@@@A ; DADominationManagerClassRegistrant
	call	?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ; DAGameModeFactoryClass::Get_Instance
	mov	DWORD PTR tv76[ebp], eax
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN5@Timer_Expi
	mov	eax, DWORD PTR tv76[ebp]
	sub	eax, 4
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Timer_Expi
$LN5@Timer_Expi:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Timer_Expi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR tv75[ebp]
	call	?Increment_Score@DADominationManagerClass@@QAEXH@Z ; DADominationManagerClass::Increment_Score

; 40   : 	}
; 41   : 	else {

	jmp	SHORT $LN3@Timer_Expi
$LN2@Timer_Expi:

; 42   : 		DASpawnNodeClass::Timer_Expired(Number,Data);

	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Number$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Timer_Expired@DAEventClass@@UAEXHI@Z	; DAEventClass::Timer_Expired
$LN3@Timer_Expi:

; 43   : 	}
; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@DAControlNodeClass@@UAEXHI@Z ENDP	; DAControlNodeClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDATeleporterManagerClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDATeleporterManagerClass@@QAEPAXI@Z PROC		; DATeleporterManagerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DATeleporterManagerClass@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDATeleporterManagerClass@@QAEPAXI@Z ENDP		; DATeleporterManagerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DATeleporterManagerClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DATeleporterManagerClass@@QAE@XZ PROC		; DATeleporterManagerClass::~DATeleporterManagerClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DATeleporterManagerClass@@QAE@XZ ENDP		; DATeleporterManagerClass::~DATeleporterManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DATeleporterClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DATeleporterClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE@XZ PROC ; DynamicVectorClass<DATeleporterClass *>::~DynamicVectorClass<DATeleporterClass *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDATeleporterClass@@@@UAE@XZ ; VectorClass<DATeleporterClass *>::~VectorClass<DATeleporterClass *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE@XZ ENDP ; DynamicVectorClass<DATeleporterClass *>::~DynamicVectorClass<DATeleporterClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z PROC ; DynamicVectorClass<DATeleporterClass *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVDATeleporterClass@@@@QBEHXZ ; DynamicVectorClass<DATeleporterClass *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z ENDP ; DynamicVectorClass<DATeleporterClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z PROC ; DynamicVectorClass<DATeleporterClass *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z ; VectorClass<DATeleporterClass *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z ENDP ; DynamicVectorClass<DATeleporterClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE_NABQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE_NABQAVDATeleporterClass@@@Z PROC ; DynamicVectorClass<DATeleporterClass *>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ ; VectorClass<DATeleporterClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ ; VectorClass<DATeleporterClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE_NABQAVDATeleporterClass@@@Z ENDP ; DynamicVectorClass<DATeleporterClass *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVDATeleporterClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVDATeleporterClass@@@@QBEHXZ PROC ; DynamicVectorClass<DATeleporterClass *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVDATeleporterClass@@@@QBEHXZ ENDP ; DynamicVectorClass<DATeleporterClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEXXZ PROC ; DynamicVectorClass<DATeleporterClass *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDATeleporterClass@@@@UAEXXZ ; VectorClass<DATeleporterClass *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAEXXZ ENDP ; DynamicVectorClass<DATeleporterClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z PROC ; DynamicVectorClass<DATeleporterClass *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z ; VectorClass<DATeleporterClass *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ ; VectorClass<DATeleporterClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ ; VectorClass<DATeleporterClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z ENDP ; DynamicVectorClass<DATeleporterClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE@IPBQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE@IPBQAVDATeleporterClass@@@Z PROC ; DynamicVectorClass<DATeleporterClass *>::DynamicVectorClass<DATeleporterClass *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAVDATeleporterClass@@@@QAE@HPBQAVDATeleporterClass@@@Z ; VectorClass<DATeleporterClass *>::VectorClass<DATeleporterClass *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAVDATeleporterClass@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE@IPBQAVDATeleporterClass@@@Z ENDP ; DynamicVectorClass<DATeleporterClass *>::DynamicVectorClass<DATeleporterClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z PROC ; VectorClass<DATeleporterClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDATeleporterClass@@@@UAE@XZ ; VectorClass<DATeleporterClass *>::~VectorClass<DATeleporterClass *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAVDATeleporterClass@@@@UAEPAXI@Z ENDP ; VectorClass<DATeleporterClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z PROC ; VectorClass<DATeleporterClass *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHABQAVDATeleporterClass@@@Z ENDP ; VectorClass<DATeleporterClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z PROC ; VectorClass<DATeleporterClass *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDATeleporterClass@@@@UAEHPBQAVDATeleporterClass@@@Z ENDP ; VectorClass<DATeleporterClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ PROC ; VectorClass<DATeleporterClass *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ ENDP ; VectorClass<DATeleporterClass *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAVDATeleporterClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAVDATeleporterClass@@@@UAEXXZ PROC ; VectorClass<DATeleporterClass *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CO@JMDODCKN@VectorClass?$DMclass?5DATeleporterCl@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAVDATeleporterClass@@@@UAEXXZ ENDP ; VectorClass<DATeleporterClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z PROC ; VectorClass<DATeleporterClass *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CP@HCNAKDEC@VectorClass?$DMclass?5DATeleporterCl@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CP@HCNAKDEC@VectorClass?$DMclass?5DATeleporterCl@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAVDATeleporterClass@@@std@@YA$$QAPAVDATeleporterClass@@AAPAV1@@Z ; std::move<DATeleporterClass * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CP@HCNAKDEC@VectorClass?$DMclass?5DATeleporterCl@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAVDATeleporterClass@@@@UAE_NHPBQAVDATeleporterClass@@@Z ENDP ; VectorClass<DATeleporterClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAVDATeleporterClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAVDATeleporterClass@@@@UBE_NABV0@@Z PROC ; VectorClass<DATeleporterClass *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVDATeleporterClass@@@@QBEHXZ ; VectorClass<DATeleporterClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVDATeleporterClass@@@@QBEABQAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAVDATeleporterClass@@@@UBE_NABV0@@Z ENDP ; VectorClass<DATeleporterClass *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDATeleporterClass@@@@QBEABQAVDATeleporterClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDATeleporterClass@@@@QBEABQAVDATeleporterClass@@H@Z PROC ; VectorClass<DATeleporterClass *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDATeleporterClass@@@@QBEABQAVDATeleporterClass@@H@Z ENDP ; VectorClass<DATeleporterClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z PROC ; VectorClass<DATeleporterClass *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z ENDP ; VectorClass<DATeleporterClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAVDATeleporterClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAVDATeleporterClass@@@@UAE@XZ PROC	; VectorClass<DATeleporterClass *>::~VectorClass<DATeleporterClass *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDATeleporterClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDATeleporterClass@@@@UAEXXZ ; VectorClass<DATeleporterClass *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAVDATeleporterClass@@@@UAE@XZ ENDP	; VectorClass<DATeleporterClass *>::~VectorClass<DATeleporterClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAVDATeleporterClass@@@@QAE@HPBQAVDATeleporterClass@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAVDATeleporterClass@@@@QAE@HPBQAVDATeleporterClass@@@Z PROC ; VectorClass<DATeleporterClass *>::VectorClass<DATeleporterClass *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDATeleporterClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0DE@GFJJPOM@VectorClass?$DMclass?5DATeleporterCl@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0DE@GFJJPOM@VectorClass?$DMclass?5DATeleporterCl@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAVDATeleporterClass@@@@QAE@HPBQAVDATeleporterClass@@@Z ENDP ; VectorClass<DATeleporterClass *>::VectorClass<DATeleporterClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ??0DATeleporterManagerClass@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DATeleporterManagerClass@@AAE@XZ PROC		; DATeleporterManagerClass::DATeleporterManagerClass, COMDAT
; _this$ = ecx

; 107  : 	DATeleporterManagerClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE@IPBQAVDATeleporterClass@@@Z ; DynamicVectorClass<DATeleporterClass *>::DynamicVectorClass<DATeleporterClass *>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DATeleporterManagerClass@@AAE@XZ ENDP		; DATeleporterManagerClass::DATeleporterManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Find_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Group$ = 8						; size = 4
?Find_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@ABVStringClass@@@Z PROC ; DATeleporterManagerClass::Find_Teleporter, COMDAT
; _this$ = ecx

; 97   : 	DATeleporterClass *Find_Teleporter(const StringClass &Group) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 		for (int i = 0;i < Teleporters.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Find_Telep
$LN3@Find_Telep:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Telep:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVDATeleporterClass@@@@QBEHXZ ; DynamicVectorClass<DATeleporterClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@Find_Telep

; 99   : 			if (Teleporters[i]->Get_Group() == Group) {

	mov	ecx, DWORD PTR _Group$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Group@DATeleporterClass@@QBEABVStringClass@@XZ ; DATeleporterClass::Get_Group
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Find_Telep

; 100  : 				return Teleporters[i];

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDATeleporterClass@@@@QAEAAPAVDATeleporterClass@@H@Z ; VectorClass<DATeleporterClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN5@Find_Telep
$LN1@Find_Telep:

; 101  : 			}
; 102  : 		}

	jmp	SHORT $LN3@Find_Telep
$LN2@Find_Telep:

; 103  : 		return 0;

	xor	eax, eax
$LN5@Find_Telep:

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Find_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@ABVStringClass@@@Z ENDP ; DATeleporterManagerClass::Find_Teleporter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Create_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@PBVINIClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_NewTeleporter$ = -8					; size = 4
_this$ = -4						; size = 4
_INI$ = 8						; size = 4
_Header$ = 12						; size = 4
?Create_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@PBVINIClass@@ABVStringClass@@@Z PROC ; DATeleporterManagerClass::Create_Teleporter, COMDAT
; _this$ = ecx

; 91   : 	DATeleporterClass *Create_Teleporter(const INIClass *INI,const StringClass &Header) {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 		DATeleporterClass *NewTeleporter = new DATeleporterClass;

	push	OFFSET ??_C@_0CM@HFDEGNLF@DATeleporterManagerClass?3?3Create@
	push	92					; 0000005cH
	push	OFFSET ??_C@_0DJ@FHBOOADJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create_Tel
	xor	ecx, ecx
	jne	SHORT $LN3@Create_Tel
	push	92					; 0000005cH
	push	OFFSET ??_C@_1HC@GFLDAOOA@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create_Tel:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create_Tel
$LN6@Create_Tel:
	push	112					; 00000070H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create_Tel
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DATeleporterClass@@AAE@XZ		; DATeleporterClass::DATeleporterClass
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create_Tel
$LN4@Create_Tel:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create_Tel:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create_Tel:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _NewTeleporter$[ebp], ecx

; 93   : 		NewTeleporter->Init(INI,Header);

	mov	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _INI$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _NewTeleporter$[ebp]
	call	?Init@DATeleporterClass@@AAEXPBVINIClass@@ABVStringClass@@@Z ; DATeleporterClass::Init

; 94   : 		Teleporters.Add(NewTeleporter);

	lea	eax, DWORD PTR _NewTeleporter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$DynamicVectorClass@PAVDATeleporterClass@@@@QAE_NABQAVDATeleporterClass@@@Z ; DynamicVectorClass<DATeleporterClass *>::Add

; 95   : 		return NewTeleporter;

	mov	eax, DWORD PTR _NewTeleporter$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Create_Teleporter@DATeleporterManagerClass@@QAEPAVDATeleporterClass@@PBVINIClass@@ABVStringClass@@@Z ENDP ; DATeleporterManagerClass::Create_Teleporter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$DASingleton@VDATeleporterManagerClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$DASingleton@VDATeleporterManagerClass@@@@QAEAAV0@ABV0@@Z PROC ; DASingleton<DATeleporterManagerClass>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DASingleton@VDATeleporterManagerClass@@@@QAEAAV0@ABV0@@Z ENDP ; DASingleton<DATeleporterManagerClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Get_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ
_TEXT	SEGMENT
?Get_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ PROC ; DASingleton<DATeleporterManagerClass>::Get_Instance, COMDAT

; 507  : 	static inline T *Get_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 508  : 		return Instance;

	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDATeleporterManagerClass@@@@0PAVDATeleporterManagerClass@@A ; DASingleton<DATeleporterManagerClass>::Instance

; 509  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ ENDP ; DASingleton<DATeleporterManagerClass>::Get_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Destroy_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAXXZ
_TEXT	SEGMENT
tv77 = -76						; size = 4
$T1 = -72						; size = 4
$T2 = -68						; size = 4
?Destroy_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAXXZ PROC ; DASingleton<DATeleporterManagerClass>::Destroy_Instance, COMDAT

; 501  : 	static inline void Destroy_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 502  : 		if (Instance) {

	cmp	DWORD PTR ?Instance@?$DASingleton@VDATeleporterManagerClass@@@@0PAVDATeleporterManagerClass@@A, 0 ; DASingleton<DATeleporterManagerClass>::Instance
	je	SHORT $LN2@Destroy_In

; 503  : 			delete Instance;

	push	OFFSET ??_C@_0DO@CBMJHOFN@DASingleton?$DMclass?5DATeleporterMa@
	push	503					; 000001f7H
	push	OFFSET ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Destroy_In
	xor	ecx, ecx
	jne	SHORT $LN4@Destroy_In
	push	503					; 000001f7H
	push	OFFSET ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Destroy_In:
	jmp	SHORT $LN8@Destroy_In
$LN7@Destroy_In:
	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDATeleporterManagerClass@@@@0PAVDATeleporterManagerClass@@A ; DASingleton<DATeleporterManagerClass>::Instance
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Destroy_In
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GDATeleporterManagerClass@@QAEPAXI@Z
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN8@Destroy_In
$LN5@Destroy_In:
	mov	DWORD PTR tv77[ebp], 0
$LN8@Destroy_In:

; 504  : 			Instance = 0;

	mov	DWORD PTR ?Instance@?$DASingleton@VDATeleporterManagerClass@@@@0PAVDATeleporterManagerClass@@A, 0 ; DASingleton<DATeleporterManagerClass>::Instance
$LN2@Destroy_In:

; 505  : 		}
; 506  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAXXZ ENDP ; DASingleton<DATeleporterManagerClass>::Destroy_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Create_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ
_TEXT	SEGMENT
tv78 = -76						; size = 4
tv80 = -72						; size = 4
$T1 = -68						; size = 4
?Create_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ PROC ; DASingleton<DATeleporterManagerClass>::Create_Instance, COMDAT

; 495  : 	static inline T *Create_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 496  : 		if (!Instance) {

	cmp	DWORD PTR ?Instance@?$DASingleton@VDATeleporterManagerClass@@@@0PAVDATeleporterManagerClass@@A, 0 ; DASingleton<DATeleporterManagerClass>::Instance
	jne	SHORT $LN1@Create_Ins

; 497  : 			Instance = new T;

	push	OFFSET ??_C@_0DN@IDMFFIFA@DASingleton?$DMclass?5DATeleporterMa@
	push	497					; 000001f1H
	push	OFFSET ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Create_Ins
	xor	ecx, ecx
	jne	SHORT $LN4@Create_Ins
	push	497					; 000001f1H
	push	OFFSET ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Create_Ins:
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN8@Create_Ins
$LN7@Create_Ins:
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Create_Ins
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DATeleporterManagerClass@@AAE@XZ	; DATeleporterManagerClass::DATeleporterManagerClass
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN6@Create_Ins
$LN5@Create_Ins:
	mov	DWORD PTR tv78[ebp], 0
$LN6@Create_Ins:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv80[ebp], eax
$LN8@Create_Ins:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR ?Instance@?$DASingleton@VDATeleporterManagerClass@@@@0PAVDATeleporterManagerClass@@A, ecx ; DASingleton<DATeleporterManagerClass>::Instance
$LN1@Create_Ins:

; 498  : 		}
; 499  : 		return Instance;

	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDATeleporterManagerClass@@@@0PAVDATeleporterManagerClass@@A ; DASingleton<DATeleporterManagerClass>::Instance

; 500  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create_Instance@?$DASingleton@VDATeleporterManagerClass@@@@SAPAVDATeleporterManagerClass@@XZ ENDP ; DASingleton<DATeleporterManagerClass>::Create_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDATeleporterClass@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDATeleporterClass@@EAEPAXI@Z PROC			; DATeleporterClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DATeleporterClass@@EAE@XZ	; DATeleporterClass::~DATeleporterClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	112					; 00000070H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DATeleporterClass@@EAE@XZ		; DATeleporterClass::~DATeleporterClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDATeleporterClass@@EAEPAXI@Z ENDP			; DATeleporterClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDATeleporterClass@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDATeleporterClass@@EAEPAXI@Z PROC			; DATeleporterClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DATeleporterClass@@EAE@XZ		; DATeleporterClass::~DATeleporterClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDATeleporterClass@@EAEPAXI@Z ENDP			; DATeleporterClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ??1DATeleporterClass@@EAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DATeleporterClass@@EAE@XZ PROC			; DATeleporterClass::~DATeleporterClass, COMDAT
; _this$ = ecx

; 73   : 	virtual ~DATeleporterClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DATeleporterClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??1?$DynamicVectorClass@H@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$DynamicVectorClass@VVector3@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAGameObjObserverClass@@UAE@XZ	; DAGameObjObserverClass::~DAGameObjObserverClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DATeleporterClass@@EAE@XZ ENDP			; DATeleporterClass::~DATeleporterClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ??0DATeleporterClass@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DATeleporterClass@@AAE@XZ PROC			; DATeleporterClass::DATeleporterClass, COMDAT
; _this$ = ecx

; 70   : 	DATeleporterClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAGameObjObserverClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DATeleporterClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0ReferencerClass@@QAE@XZ		; ReferencerClass::ReferencerClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$DynamicVectorClass@VVector3@@@@QAE@IPBVVector3@@@Z ; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0?$DynamicVectorClass@H@@QAE@IPBH@Z	; DynamicVectorClass<int>::DynamicVectorClass<int>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DATeleporterClass@@AAE@XZ ENDP			; DATeleporterClass::DATeleporterClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Get_Name@DATeleporterClass@@UAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@DATeleporterClass@@UAEPBDXZ PROC		; DATeleporterClass::Get_Name, COMDAT
; _this$ = ecx

; 62   : 	virtual const char *Get_Name() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		return "DATeleporterClass";

	mov	eax, OFFSET ??_C@_0BC@HEFMPENO@DATeleporterClass?$AA@

; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@DATeleporterClass@@UAEPBDXZ ENDP		; DATeleporterClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Get_Name@DATeleporterClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@DATeleporterClass@@QBEABVStringClass@@XZ PROC	; DATeleporterClass::Get_Name, COMDAT
; _this$ = ecx

; 59   : 	inline const StringClass &Get_Name() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		return Name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@DATeleporterClass@@QBEABVStringClass@@XZ ENDP	; DATeleporterClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Get_Group@DATeleporterClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Group@DATeleporterClass@@QBEABVStringClass@@XZ PROC ; DATeleporterClass::Get_Group, COMDAT
; _this$ = ecx

; 56   : 	inline const StringClass &Get_Group() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 		return Group;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Group@DATeleporterClass@@QBEABVStringClass@@XZ ENDP ; DATeleporterClass::Get_Group
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Get_Team@DATeleporterClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Team@DATeleporterClass@@QBEHXZ PROC		; DATeleporterClass::Get_Team, COMDAT
; _this$ = ecx

; 53   : 	inline int Get_Team() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 		return Team;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 55   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Team@DATeleporterClass@@QBEHXZ ENDP		; DATeleporterClass::Get_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Set_Team@DATeleporterClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_team$ = 8						; size = 4
?Set_Team@DATeleporterClass@@QAEXH@Z PROC		; DATeleporterClass::Set_Team, COMDAT
; _this$ = ecx

; 50   : 	inline void Set_Team(int team) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		Team = team;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _team$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Team@DATeleporterClass@@QAEXH@Z ENDP		; DATeleporterClass::Set_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Is_Enabled@DATeleporterClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Enabled@DATeleporterClass@@QBE_NXZ PROC		; DATeleporterClass::Is_Enabled, COMDAT
; _this$ = ecx

; 47   : 	inline bool Is_Enabled() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		return Enable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+56]

; 49   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Enabled@DATeleporterClass@@QBE_NXZ ENDP		; DATeleporterClass::Is_Enabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Set_Enabled@DATeleporterClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_enable$ = 8						; size = 1
?Set_Enabled@DATeleporterClass@@QAEX_N@Z PROC		; DATeleporterClass::Set_Enabled, COMDAT
; _this$ = ecx

; 38   : 	inline void Set_Enabled(bool enable) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		Enable = enable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _enable$[ebp]
	mov	BYTE PTR [eax+56], cl

; 40   : 		if (Enable) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN2@Set_Enable

; 41   : 			Commands->Set_Model(Display,Model);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+160]
	call	ecx
	add	esp, 8

; 42   : 		}
; 43   : 		else {

	jmp	SHORT $LN3@Set_Enable
$LN2@Set_Enable:

; 44   : 			Commands->Set_Model(Display,"null");

	push	OFFSET ??_C@_04MLLLIHIP@null?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+160]
	call	ecx
	add	esp, 8
$LN3@Set_Enable:

; 45   : 		}
; 46   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Enabled@DATeleporterClass@@QAEX_N@Z ENDP		; DATeleporterClass::Set_Enabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Get_Spawners@DATeleporterClass@@QBEABV?$DynamicVectorClass@VVector3@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Spawners@DATeleporterClass@@QBEABV?$DynamicVectorClass@VVector3@@@@XZ PROC ; DATeleporterClass::Get_Spawners, COMDAT
; _this$ = ecx

; 35   : 	inline const DynamicVectorClass<Vector3> &Get_Spawners() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 		return Spawners;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H

; 37   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Spawners@DATeleporterClass@@QBEABV?$DynamicVectorClass@VVector3@@@@XZ ENDP ; DATeleporterClass::Get_Spawners
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Is_In_Ignore_List@DATeleporterClass@@QAE_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv79 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Is_In_Ignore_List@DATeleporterClass@@QAE_NPAVScriptableGameObj@@@Z PROC ; DATeleporterClass::Is_In_Ignore_List, COMDAT
; _this$ = ecx

; 32   : 	bool Is_In_Ignore_List(GameObject *obj) {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 		return !(IgnoreList.ID(Commands->Get_ID(obj)) == -1);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	eax, -1
	je	SHORT $LN3@Is_In_Igno
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@Is_In_Igno
$LN3@Is_In_Igno:
	mov	DWORD PTR tv79[ebp], 0
$LN4@Is_In_Igno:
	mov	al, BYTE PTR tv79[ebp]

; 34   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_In_Ignore_List@DATeleporterClass@@QAE_NPAVScriptableGameObj@@@Z ENDP ; DATeleporterClass::Is_In_Ignore_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Remove_Ignore_List@DATeleporterClass@@QAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Remove_Ignore_List@DATeleporterClass@@QAEXPAVScriptableGameObj@@@Z PROC ; DATeleporterClass::Remove_Ignore_List, COMDAT
; _this$ = ecx

; 29   : 	void Remove_Ignore_List(GameObject *obj) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 		IgnoreList.DeleteObj(Commands->Get_ID(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?DeleteObj@?$DynamicVectorClass@H@@QAE_NABH@Z ; DynamicVectorClass<int>::DeleteObj

; 31   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_Ignore_List@DATeleporterClass@@QAEXPAVScriptableGameObj@@@Z ENDP ; DATeleporterClass::Remove_Ignore_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_teleporter.h
;	COMDAT ?Add_Ignore_List@DATeleporterClass@@QAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_ID$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Add_Ignore_List@DATeleporterClass@@QAEXPAVScriptableGameObj@@@Z PROC ; DATeleporterClass::Add_Ignore_List, COMDAT
; _this$ = ecx

; 23   : 	void Add_Ignore_List(GameObject *obj) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 		int ID = Commands->Get_ID(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	DWORD PTR _ID$[ebp], eax

; 25   : 		if (IgnoreList.ID(ID) == -1) {

	lea	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	eax, -1
	jne	SHORT $LN2@Add_Ignore

; 26   : 			IgnoreList.Add(ID);

	lea	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Add@?$DynamicVectorClass@H@@QAE_NABH@Z	; DynamicVectorClass<int>::Add
$LN2@Add_Ignore:

; 27   : 		}
; 28   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Ignore_List@DATeleporterClass@@QAEXPAVScriptableGameObj@@@Z ENDP ; DATeleporterClass::Add_Ignore_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDAVehicleSpawnManagerClass@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDAVehicleSpawnManagerClass@@MAEPAXI@Z PROC		; DAVehicleSpawnManagerClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DAVehicleSpawnManagerClass@@MAE@XZ ; DAVehicleSpawnManagerClass::~DAVehicleSpawnManagerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAVehicleSpawnManagerClass@@MAE@XZ	; DAVehicleSpawnManagerClass::~DAVehicleSpawnManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDAVehicleSpawnManagerClass@@MAEPAXI@Z ENDP		; DAVehicleSpawnManagerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAVehicleSpawnManagerClass@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAVehicleSpawnManagerClass@@MAEPAXI@Z PROC		; DAVehicleSpawnManagerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAVehicleSpawnManagerClass@@MAE@XZ	; DAVehicleSpawnManagerClass::~DAVehicleSpawnManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAVehicleSpawnManagerClass@@MAEPAXI@Z ENDP		; DAVehicleSpawnManagerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::~DynamicVectorClass<DAVehicleSpawnPointClass *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ ; VectorClass<DAVehicleSpawnPointClass *>::~VectorClass<DAVehicleSpawnPointClass *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::~DynamicVectorClass<DAVehicleSpawnPointClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z ; VectorClass<DAVehicleSpawnPointClass *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete_All@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAEXXZ
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?Delete_All@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAEXXZ PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Delete_All, COMDAT
; _this$ = ecx

; 457  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		int len = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _len$[ebp], ecx

; 459  : 		Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 460  : 		Resize(len);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 461  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete_All@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAEXXZ ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Delete_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE_NABQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE_NABQAVDAVehicleSpawnPointClass@@@Z PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; VectorClass<DAVehicleSpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; VectorClass<DAVehicleSpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE_NABQAVDAVehicleSpawnPointClass@@@Z ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ ; VectorClass<DAVehicleSpawnPointClass *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z ; VectorClass<DAVehicleSpawnPointClass *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; VectorClass<DAVehicleSpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; VectorClass<DAVehicleSpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@IPBQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@IPBQAVDAVehicleSpawnPointClass@@@Z PROC ; DynamicVectorClass<DAVehicleSpawnPointClass *>::DynamicVectorClass<DAVehicleSpawnPointClass *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@HPBQAVDAVehicleSpawnPointClass@@@Z ; VectorClass<DAVehicleSpawnPointClass *>::VectorClass<DAVehicleSpawnPointClass *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@IPBQAVDAVehicleSpawnPointClass@@@Z ENDP ; DynamicVectorClass<DAVehicleSpawnPointClass *>::DynamicVectorClass<DAVehicleSpawnPointClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z PROC ; VectorClass<DAVehicleSpawnPointClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ ; VectorClass<DAVehicleSpawnPointClass *>::~VectorClass<DAVehicleSpawnPointClass *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEPAXI@Z ENDP ; VectorClass<DAVehicleSpawnPointClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z PROC ; VectorClass<DAVehicleSpawnPointClass *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHABQAVDAVehicleSpawnPointClass@@@Z ENDP ; VectorClass<DAVehicleSpawnPointClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z PROC ; VectorClass<DAVehicleSpawnPointClass *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEHPBQAVDAVehicleSpawnPointClass@@@Z ENDP ; VectorClass<DAVehicleSpawnPointClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ PROC ; VectorClass<DAVehicleSpawnPointClass *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ENDP ; VectorClass<DAVehicleSpawnPointClass *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ PROC ; VectorClass<DAVehicleSpawnPointClass *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0DF@FOPMMLBB@VectorClass?$DMclass?5DAVehicleSpawn@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ ENDP ; VectorClass<DAVehicleSpawnPointClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z PROC ; VectorClass<DAVehicleSpawnPointClass *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0DG@LAMFJOBM@VectorClass?$DMclass?5DAVehicleSpawn@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0DG@LAMFJOBM@VectorClass?$DMclass?5DAVehicleSpawn@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAVDAVehicleSpawnPointClass@@@std@@YA$$QAPAVDAVehicleSpawnPointClass@@AAPAV1@@Z ; std::move<DAVehicleSpawnPointClass * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0DG@LAMFJOBM@VectorClass?$DMclass?5DAVehicleSpawn@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE_NHPBQAVDAVehicleSpawnPointClass@@@Z ENDP ; VectorClass<DAVehicleSpawnPointClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UBE_NABV0@@Z PROC ; VectorClass<DAVehicleSpawnPointClass *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; VectorClass<DAVehicleSpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEABQAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UBE_NABV0@@Z ENDP ; VectorClass<DAVehicleSpawnPointClass *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEABQAVDAVehicleSpawnPointClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEABQAVDAVehicleSpawnPointClass@@H@Z PROC ; VectorClass<DAVehicleSpawnPointClass *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QBEABQAVDAVehicleSpawnPointClass@@H@Z ENDP ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z PROC ; VectorClass<DAVehicleSpawnPointClass *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ENDP ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ PROC ; VectorClass<DAVehicleSpawnPointClass *>::~VectorClass<DAVehicleSpawnPointClass *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAEXXZ ; VectorClass<DAVehicleSpawnPointClass *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ ENDP ; VectorClass<DAVehicleSpawnPointClass *>::~VectorClass<DAVehicleSpawnPointClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@HPBQAVDAVehicleSpawnPointClass@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@HPBQAVDAVehicleSpawnPointClass@@@Z PROC ; VectorClass<DAVehicleSpawnPointClass *>::VectorClass<DAVehicleSpawnPointClass *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDAVehicleSpawnPointClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0DL@GABKBKGN@VectorClass?$DMclass?5DAVehicleSpawn@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0DL@GABKBKGN@VectorClass?$DMclass?5DAVehicleSpawn@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@HPBQAVDAVehicleSpawnPointClass@@@Z ENDP ; VectorClass<DAVehicleSpawnPointClass *>::VectorClass<DAVehicleSpawnPointClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ??0DAVehicleSpawnManagerClass@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAVehicleSpawnManagerClass@@IAE@XZ PROC		; DAVehicleSpawnManagerClass::DAVehicleSpawnManagerClass, COMDAT
; _this$ = ecx

; 180  : 	DAVehicleSpawnManagerClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAEventClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAVehicleSpawnManagerClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE@IPBQAVDAVehicleSpawnPointClass@@@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::DynamicVectorClass<DAVehicleSpawnPointClass *>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAVehicleSpawnManagerClass@@IAE@XZ ENDP		; DAVehicleSpawnManagerClass::DAVehicleSpawnManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ??1DAVehicleSpawnManagerClass@@MAE@XZ
_TEXT	SEGMENT
tv135 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
??1DAVehicleSpawnManagerClass@@MAE@XZ PROC		; DAVehicleSpawnManagerClass::~DAVehicleSpawnManagerClass, COMDAT
; _this$ = ecx

; 174  : 	virtual ~DAVehicleSpawnManagerClass() {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAVehicleSpawnManagerClass@@6B@

; 175  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@DAVehicleS
$LN2@DAVehicleS:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@DAVehicleS:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN1@DAVehicleS

; 176  : 			delete SpawnPoints[i];

	push	OFFSET ??_C@_0DI@CFPPNDBF@DAVehicleSpawnManagerClass?3?3?$HODAV@
	push	176					; 000000b0H
	push	OFFSET ??_C@_0DL@OCMHCKEN@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@DAVehicleS
	xor	ecx, ecx
	jne	SHORT $LN6@DAVehicleS
	push	176					; 000000b0H
	push	OFFSET ??_C@_1HG@BDBAIANB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@DAVehicleS:
	jmp	SHORT $LN10@DAVehicleS
$LN9@DAVehicleS:
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@DAVehicleS
	push	1
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN10@DAVehicleS
$LN7@DAVehicleS:
	mov	DWORD PTR tv135[ebp], 0
$LN10@DAVehicleS:

; 177  : 		}

	jmp	$LN2@DAVehicleS
$LN1@DAVehicleS:

; 178  : 		SpawnPoints.Delete_All();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Delete_All@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAEXXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Delete_All

; 179  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAEventClass@@UAE@XZ			; DAEventClass::~DAEventClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAVehicleSpawnManagerClass@@MAE@XZ ENDP		; DAVehicleSpawnManagerClass::~DAVehicleSpawnManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Set_Vehicle_Factory_Busy@DAVehicleSpawnManagerClass@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
_Busy$ = 12						; size = 1
?Set_Vehicle_Factory_Busy@DAVehicleSpawnManagerClass@@QAEXH_N@Z PROC ; DAVehicleSpawnManagerClass::Set_Vehicle_Factory_Busy, COMDAT
; _this$ = ecx

; 166  : 	inline void Set_Vehicle_Factory_Busy(int Team,bool Busy) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 		VF[Team]->Set_Busy(Busy);

	movzx	eax, BYTE PTR _Busy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Team$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+28]
	call	?Set_Busy@VehicleFactoryGameObj@@QAEX_N@Z ; VehicleFactoryGameObj::Set_Busy

; 168  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set_Vehicle_Factory_Busy@DAVehicleSpawnManagerClass@@QAEXH_N@Z ENDP ; DAVehicleSpawnManagerClass::Set_Vehicle_Factory_Busy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Enable_Vehicle_Factory@DAVehicleSpawnManagerClass@@QAEXH_N@Z
_TEXT	SEGMENT
tv74 = -69						; size = 1
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
_Enable$ = 12						; size = 1
?Enable_Vehicle_Factory@DAVehicleSpawnManagerClass@@QAEXH_N@Z PROC ; DAVehicleSpawnManagerClass::Enable_Vehicle_Factory, COMDAT
; _this$ = ecx

; 163  : 	inline void Enable_Vehicle_Factory(int Team,bool Enable) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		VF[Team]->Set_Is_Destroyed(!Enable);

	movzx	eax, BYTE PTR _Enable$[ebp]
	test	eax, eax
	jne	SHORT $LN3@Enable_Veh
	mov	BYTE PTR tv74[ebp], 1
	jmp	SHORT $LN4@Enable_Veh
$LN3@Enable_Veh:
	mov	BYTE PTR tv74[ebp], 0
$LN4@Enable_Veh:
	movzx	ecx, BYTE PTR tv74[ebp]
	push	ecx
	mov	edx, DWORD PTR _Team$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+28]
	call	?Set_Is_Destroyed@BuildingGameObj@@QAEX_N@Z ; BuildingGameObj::Set_Is_Destroyed

; 165  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enable_Vehicle_Factory@DAVehicleSpawnManagerClass@@QAEXH_N@Z ENDP ; DAVehicleSpawnManagerClass::Enable_Vehicle_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?All_Spawn_Points_Disabled_Team@DAVehicleSpawnManagerClass@@QAE_NH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
?All_Spawn_Points_Disabled_Team@DAVehicleSpawnManagerClass@@QAE_NH@Z PROC ; DAVehicleSpawnManagerClass::All_Spawn_Points_Disabled_Team, COMDAT
; _this$ = ecx

; 155  : 	inline bool All_Spawn_Points_Disabled_Team(int Team) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@All_Spawn_
$LN3@All_Spawn_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@All_Spawn_:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@All_Spawn_

; 157  : 			if (SpawnPoints[i]->Get_Team() == Team && SpawnPoints[i]->Is_Enabled()) {

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Team@DAVehicleSpawnPointClass@@QBEHXZ ; DAVehicleSpawnPointClass::Get_Team
	cmp	eax, DWORD PTR _Team$[ebp]
	jne	SHORT $LN1@All_Spawn_
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Is_Enabled@DAVehicleSpawnPointClass@@QBE_NXZ ; DAVehicleSpawnPointClass::Is_Enabled
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@All_Spawn_

; 158  : 				return false;

	xor	al, al
	jmp	SHORT $LN5@All_Spawn_
$LN1@All_Spawn_:

; 159  : 			}
; 160  : 		}

	jmp	SHORT $LN3@All_Spawn_
$LN2@All_Spawn_:

; 161  : 		return true;

	mov	al, 1
$LN5@All_Spawn_:

; 162  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?All_Spawn_Points_Disabled_Team@DAVehicleSpawnManagerClass@@QAE_NH@Z ENDP ; DAVehicleSpawnManagerClass::All_Spawn_Points_Disabled_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Set_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
?Set_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z PROC ; DAVehicleSpawnManagerClass::Set_All_Spawn_Points_Team, COMDAT
; _this$ = ecx

; 150  : 	inline void Set_All_Spawn_Points_Team(int Team) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Set_All_Sp
$LN2@Set_All_Sp:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Set_All_Sp:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN4@Set_All_Sp

; 152  : 			SpawnPoints[i]->Set_Team(Team);

	mov	eax, DWORD PTR _Team$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Team@DAVehicleSpawnPointClass@@QAEXH@Z ; DAVehicleSpawnPointClass::Set_Team

; 153  : 		}

	jmp	SHORT $LN2@Set_All_Sp
$LN4@Set_All_Sp:

; 154  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z ENDP ; DAVehicleSpawnManagerClass::Set_All_Spawn_Points_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Enable_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
?Enable_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z PROC ; DAVehicleSpawnManagerClass::Enable_All_Spawn_Points_Team, COMDAT
; _this$ = ecx

; 143  : 	inline void Enable_All_Spawn_Points_Team(int Team) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Enable_All
$LN3@Enable_All:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Enable_All:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN5@Enable_All

; 145  : 			if (SpawnPoints[i]->Get_Team() == Team) {

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Team@DAVehicleSpawnPointClass@@QBEHXZ ; DAVehicleSpawnPointClass::Get_Team
	cmp	eax, DWORD PTR _Team$[ebp]
	jne	SHORT $LN1@Enable_All

; 146  : 				SpawnPoints[i]->Set_Enabled(true);

	push	1
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DAVehicleSpawnPointClass@@QAEX_N@Z ; DAVehicleSpawnPointClass::Set_Enabled
$LN1@Enable_All:

; 147  : 			}
; 148  : 		}

	jmp	SHORT $LN3@Enable_All
$LN5@Enable_All:

; 149  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Enable_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z ENDP ; DAVehicleSpawnManagerClass::Enable_All_Spawn_Points_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Disable_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Team$ = 8						; size = 4
?Disable_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z PROC ; DAVehicleSpawnManagerClass::Disable_All_Spawn_Points_Team, COMDAT
; _this$ = ecx

; 136  : 	inline void Disable_All_Spawn_Points_Team(int Team) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Disable_Al
$LN3@Disable_Al:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Disable_Al:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN5@Disable_Al

; 138  : 			if (SpawnPoints[i]->Get_Team() == Team) {

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Team@DAVehicleSpawnPointClass@@QBEHXZ ; DAVehicleSpawnPointClass::Get_Team
	cmp	eax, DWORD PTR _Team$[ebp]
	jne	SHORT $LN1@Disable_Al

; 139  : 				SpawnPoints[i]->Set_Enabled(false);

	push	0
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DAVehicleSpawnPointClass@@QAEX_N@Z ; DAVehicleSpawnPointClass::Set_Enabled
$LN1@Disable_Al:

; 140  : 			}
; 141  : 		}

	jmp	SHORT $LN3@Disable_Al
$LN5@Disable_Al:

; 142  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Disable_All_Spawn_Points_Team@DAVehicleSpawnManagerClass@@QAEXH@Z ENDP ; DAVehicleSpawnManagerClass::Disable_All_Spawn_Points_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Disable_All_Spawn_Points_Except@DAVehicleSpawnManagerClass@@QAEXABVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Group$ = 8						; size = 4
?Disable_All_Spawn_Points_Except@DAVehicleSpawnManagerClass@@QAEXABVStringClass@@@Z PROC ; DAVehicleSpawnManagerClass::Disable_All_Spawn_Points_Except, COMDAT
; _this$ = ecx

; 126  : 	inline void Disable_All_Spawn_Points_Except(const StringClass &Group) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@Disable_Al
$LN4@Disable_Al:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Disable_Al:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN6@Disable_Al

; 128  : 			if (SpawnPoints[i]->Get_Group() == Group) {

	mov	ecx, DWORD PTR _Group$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Group@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ ; DAVehicleSpawnPointClass::Get_Group
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Disable_Al

; 129  : 				SpawnPoints[i]->Set_Enabled(true);

	push	1
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DAVehicleSpawnPointClass@@QAEX_N@Z ; DAVehicleSpawnPointClass::Set_Enabled

; 130  : 			}
; 131  : 			else {

	jmp	SHORT $LN1@Disable_Al
$LN2@Disable_Al:

; 132  : 				SpawnPoints[i]->Set_Enabled(false);

	push	0
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DAVehicleSpawnPointClass@@QAEX_N@Z ; DAVehicleSpawnPointClass::Set_Enabled
$LN1@Disable_Al:

; 133  : 			}
; 134  : 		}

	jmp	SHORT $LN4@Disable_Al
$LN6@Disable_Al:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Disable_All_Spawn_Points_Except@DAVehicleSpawnManagerClass@@QAEXABVStringClass@@@Z ENDP ; DAVehicleSpawnManagerClass::Disable_All_Spawn_Points_Except
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Enable_All_Spawn_Points_Except@DAVehicleSpawnManagerClass@@QAEXABVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Group$ = 8						; size = 4
?Enable_All_Spawn_Points_Except@DAVehicleSpawnManagerClass@@QAEXABVStringClass@@@Z PROC ; DAVehicleSpawnManagerClass::Enable_All_Spawn_Points_Except, COMDAT
; _this$ = ecx

; 116  : 	inline void Enable_All_Spawn_Points_Except(const StringClass &Group) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@Enable_All
$LN4@Enable_All:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Enable_All:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN6@Enable_All

; 118  : 			if (SpawnPoints[i]->Get_Group() == Group) {

	mov	ecx, DWORD PTR _Group$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Group@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ ; DAVehicleSpawnPointClass::Get_Group
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Enable_All

; 119  : 				SpawnPoints[i]->Set_Enabled(false);

	push	0
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DAVehicleSpawnPointClass@@QAEX_N@Z ; DAVehicleSpawnPointClass::Set_Enabled

; 120  : 			}
; 121  : 			else {

	jmp	SHORT $LN1@Enable_All
$LN2@Enable_All:

; 122  : 				SpawnPoints[i]->Set_Enabled(true);

	push	1
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DAVehicleSpawnPointClass@@QAEX_N@Z ; DAVehicleSpawnPointClass::Set_Enabled
$LN1@Enable_All:

; 123  : 			}
; 124  : 		}

	jmp	SHORT $LN4@Enable_All
$LN6@Enable_All:

; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Enable_All_Spawn_Points_Except@DAVehicleSpawnManagerClass@@QAEXABVStringClass@@@Z ENDP ; DAVehicleSpawnManagerClass::Enable_All_Spawn_Points_Except
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Find_Spawn_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleSpawnPointClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Group$ = 8						; size = 4
?Find_Spawn_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleSpawnPointClass@@ABVStringClass@@@Z PROC ; DAVehicleSpawnManagerClass::Find_Spawn_Point, COMDAT
; _this$ = ecx

; 108  : 	inline DAVehicleSpawnPointClass *Find_Spawn_Point(const StringClass &Group) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Find_Spawn
$LN3@Find_Spawn:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Spawn:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@Find_Spawn

; 110  : 			if (SpawnPoints[i]->Get_Group() == Group) {

	mov	ecx, DWORD PTR _Group$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Group@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ ; DAVehicleSpawnPointClass::Get_Group
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Find_Spawn

; 111  : 				return SpawnPoints[i];

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDAVehicleSpawnPointClass@@@@QAEAAPAVDAVehicleSpawnPointClass@@H@Z ; VectorClass<DAVehicleSpawnPointClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN5@Find_Spawn
$LN1@Find_Spawn:

; 112  : 			}
; 113  : 		}

	jmp	SHORT $LN3@Find_Spawn
$LN2@Find_Spawn:

; 114  : 		return 0;

	xor	eax, eax
$LN5@Find_Spawn:

; 115  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Find_Spawn_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleSpawnPointClass@@ABVStringClass@@@Z ENDP ; DAVehicleSpawnManagerClass::Find_Spawn_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Create_Air_Drop_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleAirDropPointClass@@PBVINIClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
tv77 = -88						; size = 4
tv79 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_NewPoint$ = -8						; size = 4
_this$ = -4						; size = 4
_INI$ = 8						; size = 4
_Header$ = 12						; size = 4
?Create_Air_Drop_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleAirDropPointClass@@PBVINIClass@@ABVStringClass@@@Z PROC ; DAVehicleSpawnManagerClass::Create_Air_Drop_Point, COMDAT
; _this$ = ecx

; 101  : 	inline DAVehicleAirDropPointClass *Create_Air_Drop_Point(const INIClass *INI,const StringClass &Header) {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 		DAVehicleAirDropPointClass *NewPoint = new DAVehicleAirDropPointClass;

	push	OFFSET ??_C@_0DC@JJABCFEP@DAVehicleSpawnManagerClass?3?3Crea@
	push	102					; 00000066H
	push	OFFSET ??_C@_0DL@OCMHCKEN@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create_Air
	xor	ecx, ecx
	jne	SHORT $LN3@Create_Air
	push	102					; 00000066H
	push	OFFSET ??_C@_1HG@BDBAIANB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create_Air:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create_Air
$LN6@Create_Air:
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create_Air
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DAVehicleAirDropPointClass@@IAE@XZ	; DAVehicleAirDropPointClass::DAVehicleAirDropPointClass
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create_Air
$LN4@Create_Air:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create_Air:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create_Air:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _NewPoint$[ebp], ecx

; 103  : 		NewPoint->Init(INI,Header);

	mov	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _INI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _NewPoint$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _NewPoint$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 104  : 		SpawnPoints.Add(NewPoint);

	mov	eax, DWORD PTR _NewPoint$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Add@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE_NABQAVDAVehicleSpawnPointClass@@@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Add

; 105  : 		return NewPoint;

	mov	eax, DWORD PTR _NewPoint$[ebp]

; 106  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Create_Air_Drop_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleAirDropPointClass@@PBVINIClass@@ABVStringClass@@@Z ENDP ; DAVehicleSpawnManagerClass::Create_Air_Drop_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Create_Spawn_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleSpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_NewPoint$ = -8						; size = 4
_this$ = -4						; size = 4
_INI$ = 8						; size = 4
_Header$ = 12						; size = 4
?Create_Spawn_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleSpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z PROC ; DAVehicleSpawnManagerClass::Create_Spawn_Point, COMDAT
; _this$ = ecx

; 94   : 	inline DAVehicleSpawnPointClass *Create_Spawn_Point(const INIClass *INI,const StringClass &Header) {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		DAVehicleSpawnPointClass *NewPoint = new DAVehicleSpawnPointClass;

	push	OFFSET ??_C@_0CP@NDJNDFON@DAVehicleSpawnManagerClass?3?3Crea@
	push	95					; 0000005fH
	push	OFFSET ??_C@_0DL@OCMHCKEN@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create_Spa
	xor	ecx, ecx
	jne	SHORT $LN3@Create_Spa
	push	95					; 0000005fH
	push	OFFSET ??_C@_1HG@BDBAIANB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create_Spa:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create_Spa
$LN6@Create_Spa:
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create_Spa
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DAVehicleSpawnPointClass@@IAE@XZ	; DAVehicleSpawnPointClass::DAVehicleSpawnPointClass
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create_Spa
$LN4@Create_Spa:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create_Spa:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create_Spa:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _NewPoint$[ebp], ecx

; 96   : 		NewPoint->Init(INI,Header);

	mov	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _INI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _NewPoint$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _NewPoint$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 97   : 		SpawnPoints.Add(NewPoint);

	lea	eax, DWORD PTR _NewPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Add@?$DynamicVectorClass@PAVDAVehicleSpawnPointClass@@@@QAE_NABQAVDAVehicleSpawnPointClass@@@Z ; DynamicVectorClass<DAVehicleSpawnPointClass *>::Add

; 98   : 		return NewPoint;

	mov	eax, DWORD PTR _NewPoint$[ebp]

; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Create_Spawn_Point@DAVehicleSpawnManagerClass@@QAEPAVDAVehicleSpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z ENDP ; DAVehicleSpawnManagerClass::Create_Spawn_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$DASingleton@VDAVehicleSpawnManagerClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$DASingleton@VDAVehicleSpawnManagerClass@@@@QAEAAV0@ABV0@@Z PROC ; DASingleton<DAVehicleSpawnManagerClass>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DASingleton@VDAVehicleSpawnManagerClass@@@@QAEAAV0@ABV0@@Z ENDP ; DASingleton<DAVehicleSpawnManagerClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Get_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ
_TEXT	SEGMENT
?Get_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ PROC ; DASingleton<DAVehicleSpawnManagerClass>::Get_Instance, COMDAT

; 507  : 	static inline T *Get_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 508  : 		return Instance;

	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@0PAVDAVehicleSpawnManagerClass@@A ; DASingleton<DAVehicleSpawnManagerClass>::Instance

; 509  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ENDP ; DASingleton<DAVehicleSpawnManagerClass>::Get_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Destroy_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAXXZ
_TEXT	SEGMENT
tv83 = -76						; size = 4
$T1 = -72						; size = 4
$T2 = -68						; size = 4
?Destroy_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAXXZ PROC ; DASingleton<DAVehicleSpawnManagerClass>::Destroy_Instance, COMDAT

; 501  : 	static inline void Destroy_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 502  : 		if (Instance) {

	cmp	DWORD PTR ?Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@0PAVDAVehicleSpawnManagerClass@@A, 0 ; DASingleton<DAVehicleSpawnManagerClass>::Instance
	je	SHORT $LN2@Destroy_In

; 503  : 			delete Instance;

	push	OFFSET ??_C@_0EA@CANOJECI@DASingleton?$DMclass?5DAVehicleSpawn@
	push	503					; 000001f7H
	push	OFFSET ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Destroy_In
	xor	ecx, ecx
	jne	SHORT $LN4@Destroy_In
	push	503					; 000001f7H
	push	OFFSET ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Destroy_In:
	jmp	SHORT $LN8@Destroy_In
$LN7@Destroy_In:
	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@0PAVDAVehicleSpawnManagerClass@@A ; DASingleton<DAVehicleSpawnManagerClass>::Instance
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Destroy_In
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN8@Destroy_In
$LN5@Destroy_In:
	mov	DWORD PTR tv83[ebp], 0
$LN8@Destroy_In:

; 504  : 			Instance = 0;

	mov	DWORD PTR ?Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@0PAVDAVehicleSpawnManagerClass@@A, 0 ; DASingleton<DAVehicleSpawnManagerClass>::Instance
$LN2@Destroy_In:

; 505  : 		}
; 506  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAXXZ ENDP ; DASingleton<DAVehicleSpawnManagerClass>::Destroy_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Create_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ
_TEXT	SEGMENT
tv78 = -76						; size = 4
tv80 = -72						; size = 4
$T1 = -68						; size = 4
?Create_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ PROC ; DASingleton<DAVehicleSpawnManagerClass>::Create_Instance, COMDAT

; 495  : 	static inline T *Create_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 496  : 		if (!Instance) {

	cmp	DWORD PTR ?Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@0PAVDAVehicleSpawnManagerClass@@A, 0 ; DASingleton<DAVehicleSpawnManagerClass>::Instance
	jne	SHORT $LN1@Create_Ins

; 497  : 			Instance = new T;

	push	OFFSET ??_C@_0DP@EPFOCLBB@DASingleton?$DMclass?5DAVehicleSpawn@
	push	497					; 000001f1H
	push	OFFSET ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Create_Ins
	xor	ecx, ecx
	jne	SHORT $LN4@Create_Ins
	push	497					; 000001f1H
	push	OFFSET ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Create_Ins:
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN8@Create_Ins
$LN7@Create_Ins:
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Create_Ins
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DAVehicleSpawnManagerClass@@IAE@XZ	; DAVehicleSpawnManagerClass::DAVehicleSpawnManagerClass
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN6@Create_Ins
$LN5@Create_Ins:
	mov	DWORD PTR tv78[ebp], 0
$LN6@Create_Ins:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv80[ebp], eax
$LN8@Create_Ins:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR ?Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@0PAVDAVehicleSpawnManagerClass@@A, ecx ; DASingleton<DAVehicleSpawnManagerClass>::Instance
$LN1@Create_Ins:

; 498  : 		}
; 499  : 		return Instance;

	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@0PAVDAVehicleSpawnManagerClass@@A ; DASingleton<DAVehicleSpawnManagerClass>::Instance

; 500  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create_Instance@?$DASingleton@VDAVehicleSpawnManagerClass@@@@SAPAVDAVehicleSpawnManagerClass@@XZ ENDP ; DASingleton<DAVehicleSpawnManagerClass>::Create_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDAVehicleAirDropPointClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDAVehicleAirDropPointClass@@UAEPAXI@Z PROC		; DAVehicleAirDropPointClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DAVehicleAirDropPointClass@@UAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAVehicleAirDropPointClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDAVehicleAirDropPointClass@@UAEPAXI@Z ENDP		; DAVehicleAirDropPointClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAVehicleAirDropPointClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAVehicleAirDropPointClass@@UAEPAXI@Z PROC		; DAVehicleAirDropPointClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAVehicleAirDropPointClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAVehicleAirDropPointClass@@UAEPAXI@Z ENDP		; DAVehicleAirDropPointClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DAVehicleAirDropPointClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAVehicleAirDropPointClass@@UAE@XZ PROC		; DAVehicleAirDropPointClass::~DAVehicleAirDropPointClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAVehicleSpawnPointClass@@MAE@XZ	; DAVehicleSpawnPointClass::~DAVehicleSpawnPointClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAVehicleAirDropPointClass@@UAE@XZ ENDP		; DAVehicleAirDropPointClass::~DAVehicleAirDropPointClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ??0DAVehicleAirDropPointClass@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAVehicleAirDropPointClass@@IAE@XZ PROC		; DAVehicleAirDropPointClass::DAVehicleAirDropPointClass, COMDAT
; _this$ = ecx

; 81   : 	DAVehicleAirDropPointClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAVehicleSpawnPointClass@@IAE@XZ	; DAVehicleSpawnPointClass::DAVehicleSpawnPointClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAVehicleAirDropPointClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAVehicleAirDropPointClass@@IAE@XZ ENDP		; DAVehicleAirDropPointClass::DAVehicleAirDropPointClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDAVehicleSpawnPointClass@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDAVehicleSpawnPointClass@@MAEPAXI@Z PROC		; DAVehicleSpawnPointClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DAVehicleSpawnPointClass@@MAE@XZ ; DAVehicleSpawnPointClass::~DAVehicleSpawnPointClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAVehicleSpawnPointClass@@MAE@XZ	; DAVehicleSpawnPointClass::~DAVehicleSpawnPointClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDAVehicleSpawnPointClass@@MAEPAXI@Z ENDP		; DAVehicleSpawnPointClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAVehicleSpawnPointClass@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAVehicleSpawnPointClass@@MAEPAXI@Z PROC		; DAVehicleSpawnPointClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAVehicleSpawnPointClass@@MAE@XZ	; DAVehicleSpawnPointClass::~DAVehicleSpawnPointClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAVehicleSpawnPointClass@@MAEPAXI@Z ENDP		; DAVehicleSpawnPointClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ??0DAVehicleSpawnPointClass@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAVehicleSpawnPointClass@@IAE@XZ PROC		; DAVehicleSpawnPointClass::DAVehicleSpawnPointClass, COMDAT
; _this$ = ecx

; 62   : 	DAVehicleSpawnPointClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAVehicleSpawnPointClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAVehicleSpawnPointClass@@IAE@XZ ENDP		; DAVehicleSpawnPointClass::DAVehicleSpawnPointClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ??1DAVehicleSpawnPointClass@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAVehicleSpawnPointClass@@MAE@XZ PROC		; DAVehicleSpawnPointClass::~DAVehicleSpawnPointClass, COMDAT
; _this$ = ecx

; 61   : 	virtual ~DAVehicleSpawnPointClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAVehicleSpawnPointClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAVehicleSpawnPointClass@@MAE@XZ ENDP		; DAVehicleSpawnPointClass::~DAVehicleSpawnPointClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Get_Distance@DAVehicleSpawnPointClass@@QAEMABVVector3@@@Z
_TEXT	SEGMENT
_Dis$ = -8						; size = 4
_this$ = -4						; size = 4
_Pos$ = 8						; size = 4
?Get_Distance@DAVehicleSpawnPointClass@@QAEMABVVector3@@@Z PROC ; DAVehicleSpawnPointClass::Get_Distance, COMDAT
; _this$ = ecx

; 54   : 	inline float Get_Distance(const Vector3 &Pos) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		float Dis = Commands->Get_Distance(Position,Pos);

	mov	eax, DWORD PTR _Pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 8
	fstp	DWORD PTR _Dis$[ebp]

; 56   : 		return Dis;

	fld	DWORD PTR _Dis$[ebp]

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Distance@DAVehicleSpawnPointClass@@QAEMABVVector3@@@Z ENDP ; DAVehicleSpawnPointClass::Get_Distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Dec_Priority@DAVehicleSpawnPointClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Dec_Priority@DAVehicleSpawnPointClass@@QAEXXZ PROC	; DAVehicleSpawnPointClass::Dec_Priority, COMDAT
; _this$ = ecx

; 51   : 	inline void Dec_Priority() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 		Priority--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 53   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Dec_Priority@DAVehicleSpawnPointClass@@QAEXXZ ENDP	; DAVehicleSpawnPointClass::Dec_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Inc_Priority@DAVehicleSpawnPointClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Inc_Priority@DAVehicleSpawnPointClass@@QAEXXZ PROC	; DAVehicleSpawnPointClass::Inc_Priority, COMDAT
; _this$ = ecx

; 48   : 	inline void Inc_Priority() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		Priority++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inc_Priority@DAVehicleSpawnPointClass@@QAEXXZ ENDP	; DAVehicleSpawnPointClass::Inc_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Set_Priority@DAVehicleSpawnPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_priority$ = 8						; size = 4
?Set_Priority@DAVehicleSpawnPointClass@@QAEXH@Z PROC	; DAVehicleSpawnPointClass::Set_Priority, COMDAT
; _this$ = ecx

; 45   : 	inline void Set_Priority(int priority) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		Priority = priority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Priority@DAVehicleSpawnPointClass@@QAEXH@Z ENDP	; DAVehicleSpawnPointClass::Set_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Get_Priority@DAVehicleSpawnPointClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Priority@DAVehicleSpawnPointClass@@QBEHXZ PROC	; DAVehicleSpawnPointClass::Get_Priority, COMDAT
; _this$ = ecx

; 42   : 	inline int Get_Priority() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 		return Priority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]

; 44   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Priority@DAVehicleSpawnPointClass@@QBEHXZ ENDP	; DAVehicleSpawnPointClass::Get_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Get_Team@DAVehicleSpawnPointClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Team@DAVehicleSpawnPointClass@@QBEHXZ PROC		; DAVehicleSpawnPointClass::Get_Team, COMDAT
; _this$ = ecx

; 38   : 	inline int Get_Team() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		return Team;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Team@DAVehicleSpawnPointClass@@QBEHXZ ENDP		; DAVehicleSpawnPointClass::Get_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Is_Enabled@DAVehicleSpawnPointClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Enabled@DAVehicleSpawnPointClass@@QBE_NXZ PROC	; DAVehicleSpawnPointClass::Is_Enabled, COMDAT
; _this$ = ecx

; 34   : 	inline bool Is_Enabled() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return Enable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+24]

; 36   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Enabled@DAVehicleSpawnPointClass@@QBE_NXZ ENDP	; DAVehicleSpawnPointClass::Is_Enabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Get_Position@DAVehicleSpawnPointClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Position@DAVehicleSpawnPointClass@@QBEABVVector3@@XZ PROC ; DAVehicleSpawnPointClass::Get_Position, COMDAT
; _this$ = ecx

; 31   : 	inline const Vector3 &Get_Position() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 		return Position;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 33   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Position@DAVehicleSpawnPointClass@@QBEABVVector3@@XZ ENDP ; DAVehicleSpawnPointClass::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Get_Name@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ PROC ; DAVehicleSpawnPointClass::Get_Name, COMDAT
; _this$ = ecx

; 28   : 	inline const StringClass &Get_Name() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 		return Name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 30   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ ENDP ; DAVehicleSpawnPointClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_vehiclespawn.h
;	COMDAT ?Get_Group@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Group@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ PROC ; DAVehicleSpawnPointClass::Get_Group, COMDAT
; _this$ = ecx

; 25   : 	inline const StringClass &Get_Group() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 		return Group;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 27   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Group@DAVehicleSpawnPointClass@@QBEABVStringClass@@XZ ENDP ; DAVehicleSpawnPointClass::Get_Group
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDAGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDAGameObjObserverClass@@UAEPAXI@Z PROC		; DAGameObjObserverClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DAGameObjObserverClass@@UAE@XZ ; DAGameObjObserverClass::~DAGameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAGameObjObserverClass@@UAE@XZ	; DAGameObjObserverClass::~DAGameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDAGameObjObserverClass@@UAEPAXI@Z ENDP		; DAGameObjObserverClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAGameObjObserverClass@@UAEPAXI@Z PROC		; DAGameObjObserverClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAGameObjObserverClass@@UAE@XZ	; DAGameObjObserverClass::~DAGameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAGameObjObserverClass@@UAEPAXI@Z ENDP		; DAGameObjObserverClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DAGameObjObserverClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DAGameObjObserverClass@@QAEAAV0@ABV0@@Z PROC		; DAGameObjObserverClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4ReferencerClass@@QAEAAV0@ABV0@@Z	; ReferencerClass::operator=
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DAGameObjObserverClass@@QAEAAV0@ABV0@@Z ENDP		; DAGameObjObserverClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAGameObjObserverClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DAGameObjObserverClass@@QAE@ABV0@@Z PROC		; DAGameObjObserverClass::DAGameObjObserverClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAGameObjObserverClass@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ReferencerClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DAGameObjObserverClass@@QAE@ABV0@@Z ENDP		; DAGameObjObserverClass::DAGameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAGameObjObserverClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAGameObjObserverClass@@QAE@XZ PROC			; DAGameObjObserverClass::DAGameObjObserverClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@XZ		; GameObjObserverClass::GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAGameObjObserverClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ReferencerClass@@QAE@XZ		; ReferencerClass::ReferencerClass
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAGameObjObserverClass@@QAE@XZ ENDP			; DAGameObjObserverClass::DAGameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Created@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z PROC ; DAGameObjObserverClass::Created, COMDAT
; _this$ = ecx

; 69   : 	__declspec(deprecated("Replaced by Init.")) virtual void Created(GameObject *obj) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@@Z ENDP ; DAGameObjObserverClass::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Damaged@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Damager$ = 12						; size = 4
_Damage$ = 16						; size = 4
?Damaged@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0M@Z PROC ; DAGameObjObserverClass::Damaged, COMDAT
; _this$ = ecx

; 68   : 	__declspec(deprecated("Replaced by Damage_Received.")) virtual void Damaged(GameObject *obj,GameObject *Damager,float Damage) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; DAGameObjObserverClass::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Killed@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Killer$ = 12						; size = 4
?Killed@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0@Z PROC ; DAGameObjObserverClass::Killed, COMDAT
; _this$ = ecx

; 67   : 	__declspec(deprecated("Replaced by Kill_Received.")) virtual void Killed(GameObject *obj,GameObject *Killer) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@DAGameObjObserverClass@@EAEXPAVScriptableGameObj@@0@Z ENDP ; DAGameObjObserverClass::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Get_Owner@DAGameObjObserverClass@@QAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Owner@DAGameObjObserverClass@@QAEPAVScriptableGameObj@@XZ PROC ; DAGameObjObserverClass::Get_Owner, COMDAT
; _this$ = ecx

; 58   : 	inline GameObject *Get_Owner() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		return _Owner;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *

; 60   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Owner@DAGameObjObserverClass@@QAEPAVScriptableGameObj@@XZ ENDP ; DAGameObjObserverClass::Get_Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Clear_Weapons@DAGameObjObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear_Weapons@DAGameObjObserverClass@@UAEXXZ PROC	; DAGameObjObserverClass::Clear_Weapons, COMDAT
; _this$ = ecx

; 57   : 	virtual void Clear_Weapons() { } //Called when the soldier this observer is attached to's weapons are cleared.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Weapons@DAGameObjObserverClass@@UAEXXZ ENDP	; DAGameObjObserverClass::Clear_Weapons
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Remove_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Weapon$ = 8						; size = 4
?Remove_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z PROC ; DAGameObjObserverClass::Remove_Weapon, COMDAT
; _this$ = ecx

; 56   : 	virtual void Remove_Weapon(WeaponClass *Weapon) { } //Called when a weapon is removed from the soldier this observer is attached to.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z ENDP ; DAGameObjObserverClass::Remove_Weapon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Add_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Weapon$ = 8						; size = 4
?Add_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z PROC ; DAGameObjObserverClass::Add_Weapon, COMDAT
; _this$ = ecx

; 55   : 	virtual void Add_Weapon(WeaponClass *Weapon) { } //Called when the soldier this observer is attached to is granted a weapon.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Weapon@DAGameObjObserverClass@@UAEXPAVWeaponClass@@@Z ENDP ; DAGameObjObserverClass::Add_Weapon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Add_Weapon_Request@DAGameObjObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Weapon$ = 8						; size = 4
?Add_Weapon_Request@DAGameObjObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z PROC ; DAGameObjObserverClass::Add_Weapon_Request, COMDAT
; _this$ = ecx

; 54   : 	virtual bool Add_Weapon_Request(const WeaponDefinitionClass *Weapon) { return true; } //Called when something tries to grant the soldier this observer is attached to a weapon.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Weapon_Request@DAGameObjObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z ENDP ; DAGameObjObserverClass::Add_Weapon_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?PowerUp_Grant@DAGameObjObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_PowerUp$ = 8						; size = 4
_PowerUpObj$ = 12					; size = 4
?PowerUp_Grant@DAGameObjObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z PROC ; DAGameObjObserverClass::PowerUp_Grant, COMDAT
; _this$ = ecx

; 53   : 	virtual void PowerUp_Grant(const PowerUpGameObjDef *PowerUp,PowerUpGameObj *PowerUpObj) { } //Called when the soldier this observer is attached to picks up a powerup.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?PowerUp_Grant@DAGameObjObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ENDP ; DAGameObjObserverClass::PowerUp_Grant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?PowerUp_Grant@DAGameObjObserverClass@@UAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?PowerUp_Grant@DAGameObjObserverClass@@UAEXPAVcPlayer@@@Z PROC ; DAGameObjObserverClass::PowerUp_Grant, COMDAT
; _this$ = ecx

; 52   : 	virtual void PowerUp_Grant(cPlayer *Player) { } //Called when a soldier picks up the powerup this observer is attached to.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?PowerUp_Grant@DAGameObjObserverClass@@UAEXPAVcPlayer@@@Z ENDP ; DAGameObjObserverClass::PowerUp_Grant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_PowerUp$ = 8						; size = 4
_PowerUpObj$ = 12					; size = 4
?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z PROC ; DAGameObjObserverClass::PowerUp_Grant_Request, COMDAT
; _this$ = ecx

; 51   : 	virtual bool PowerUp_Grant_Request(const PowerUpGameObjDef *PowerUp,PowerUpGameObj *PowerUpObj) { return true; } //Called when the soldier this observer is attached to attempts to pickup a powerup. Return false to block the pickup.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ENDP ; DAGameObjObserverClass::PowerUp_Grant_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@@Z PROC ; DAGameObjObserverClass::PowerUp_Grant_Request, COMDAT
; _this$ = ecx

; 50   : 	virtual bool PowerUp_Grant_Request(cPlayer *Player) { return true; } //Called when a soldier attempts to pickup the powerup this observer is attached to. Return false to block the pickup.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?PowerUp_Grant_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@@Z ENDP ; DAGameObjObserverClass::PowerUp_Grant_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Kill_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Killer$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Kill_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAGameObjObserverClass::Kill_Received, COMDAT
; _this$ = ecx

; 49   : 	virtual void Kill_Received(ArmedGameObj *Killer,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { } //Called when the object this observer is attached to is killed.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Kill_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAGameObjObserverClass::Kill_Received
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Kill_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Kill_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAGameObjObserverClass::Kill_Dealt, COMDAT
; _this$ = ecx

; 48   : 	virtual void Kill_Dealt(DamageableGameObj *Victim,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { } //Called when the object this observer is attached to kills another object.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Kill_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAGameObjObserverClass::Kill_Dealt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Damage_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Damager$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Damage_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAGameObjObserverClass::Damage_Received, COMDAT
; _this$ = ecx

; 47   : 	virtual void Damage_Received(ArmedGameObj *Damager,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { } //Called when the object this observer is attached to is damaged.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Damage_Received@DAGameObjObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAGameObjObserverClass::Damage_Received
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Damage_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Damage_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAGameObjObserverClass::Damage_Dealt, COMDAT
; _this$ = ecx

; 46   : 	virtual void Damage_Dealt(DamageableGameObj *Victim,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { } //Called when the object this observer is attached to damages another object.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Damage_Dealt@DAGameObjObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAGameObjObserverClass::Damage_Dealt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Damage_Received_Request@DAGameObjObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Damager$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Damage_Received_Request@DAGameObjObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z PROC ; DAGameObjObserverClass::Damage_Received_Request, COMDAT
; _this$ = ecx

; 45   : 	virtual bool Damage_Received_Request(ArmedGameObj *Damager,float &Damage,unsigned int &Warhead,float Scale,DADamageType::Type Type) { return true; } //Called when the object this observer is attached to is damaged. Damage can be changed by modifying the OffenseObjectClass.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Damage_Received_Request@DAGameObjObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z ENDP ; DAGameObjObserverClass::Damage_Received_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Damage_Dealt_Request@DAGameObjObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Damage_Dealt_Request@DAGameObjObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z PROC ; DAGameObjObserverClass::Damage_Dealt_Request, COMDAT
; _this$ = ecx

; 44   : 	virtual bool Damage_Dealt_Request(DamageableGameObj *Victim,float &Damage,unsigned int &Warhead,float Scale,DADamageType::Type Type) { return true; } //Called when the object this observer is attached to damages another object. Damage can be changed by modifying the OffenseObjectClass.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Damage_Dealt_Request@DAGameObjObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z ENDP ; DAGameObjObserverClass::Damage_Dealt_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Vehicle_Flip@DAGameObjObserverClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Vehicle_Flip@DAGameObjObserverClass@@UAE_NXZ PROC	; DAGameObjObserverClass::Vehicle_Flip, COMDAT
; _this$ = ecx

; 43   : 	virtual bool Vehicle_Flip() { return true; } //Called when the vehicle this observer is attached to tries to flip. Return bool to block the flip.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Vehicle_Flip@DAGameObjObserverClass@@UAE_NXZ ENDP	; DAGameObjObserverClass::Vehicle_Flip
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z PROC ; DAGameObjObserverClass::Vehicle_Exit, COMDAT
; _this$ = ecx

; 42   : 	virtual void Vehicle_Exit(VehicleGameObj *Vehicle,int Seat) { } //Called when the soldier this observer is attached to exits a vehicle.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z ENDP ; DAGameObjObserverClass::Vehicle_Exit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z PROC ; DAGameObjObserverClass::Vehicle_Exit, COMDAT
; _this$ = ecx

; 41   : 	virtual void Vehicle_Exit(cPlayer *Player,int Seat) { } //Called when a soldier exits the vehicle this observer is attached to.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Exit@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z ENDP ; DAGameObjObserverClass::Vehicle_Exit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z PROC ; DAGameObjObserverClass::Vehicle_Enter, COMDAT
; _this$ = ecx

; 40   : 	virtual void Vehicle_Enter(VehicleGameObj *Vehicle,int Seat) { } //Called when the soldier this observer is attached to enters a vehicle.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVVehicleGameObj@@H@Z ENDP ; DAGameObjObserverClass::Vehicle_Enter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z PROC ; DAGameObjObserverClass::Vehicle_Enter, COMDAT
; _this$ = ecx

; 39   : 	virtual void Vehicle_Enter(cPlayer *Player,int Seat) { } //Called when a soldier enters the vehicle this observer is attached to.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Enter@DAGameObjObserverClass@@UAEXPAVcPlayer@@H@Z ENDP ; DAGameObjObserverClass::Vehicle_Enter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z PROC ; DAGameObjObserverClass::Vehicle_Entry_Request, COMDAT
; _this$ = ecx

; 38   : 	virtual bool Vehicle_Entry_Request(VehicleGameObj *Vehicle,int &Seat) { return true; } //Called when the soldier this observer is attached to tries to enter a vehicle. Return bool to block entry or change Seat to change the seat the soldier will get in.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z ENDP ; DAGameObjObserverClass::Vehicle_Entry_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@AAH@Z PROC ; DAGameObjObserverClass::Vehicle_Entry_Request, COMDAT
; _this$ = ecx

; 37   : 	virtual bool Vehicle_Entry_Request(cPlayer *Player,int &Seat) { return true; } //Called when a soldier tries to enter the vehicle this observer is attached to. Return bool to block entry or change Seat to change the seat the soldier will get in.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Entry_Request@DAGameObjObserverClass@@UAE_NPAVcPlayer@@AAH@Z ENDP ; DAGameObjObserverClass::Vehicle_Entry_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Init@DAGameObjObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@DAGameObjObserverClass@@UAEXXZ PROC		; DAGameObjObserverClass::Init, COMDAT
; _this$ = ecx

; 36   : 	virtual void Init() { } //Called when the observer is attached to an object.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@DAGameObjObserverClass@@UAEXXZ ENDP		; DAGameObjObserverClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Animation_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Name$ = 12						; size = 4
?Animation_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; DAGameObjObserverClass::Animation_Complete, COMDAT
; _this$ = ecx

; 33   : 	virtual void Animation_Complete(GameObject *obj,const char *Name) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; DAGameObjObserverClass::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Timer_Expired@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Number$ = 12						; size = 4
?Timer_Expired@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@H@Z PROC ; DAGameObjObserverClass::Timer_Expired, COMDAT
; _this$ = ecx

; 32   : 	virtual void Timer_Expired(GameObject *obj,int Number) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@H@Z ENDP ; DAGameObjObserverClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Action_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_ActionID$ = 12						; size = 4
_CompleteReason$ = 16					; size = 4
?Action_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; DAGameObjObserverClass::Action_Complete, COMDAT
; _this$ = ecx

; 31   : 	virtual void Action_Complete(GameObject *obj,int ActionID,ActionCompleteReason CompleteReason) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; DAGameObjObserverClass::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Enemy_Seen@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Enemy$ = 12						; size = 4
?Enemy_Seen@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; DAGameObjObserverClass::Enemy_Seen, COMDAT
; _this$ = ecx

; 30   : 	virtual void Enemy_Seen(GameObject *obj,GameObject *Enemy) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; DAGameObjObserverClass::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Sound_Heard@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Sound$ = 12						; size = 4
?Sound_Heard@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z PROC ; DAGameObjObserverClass::Sound_Heard, COMDAT
; _this$ = ecx

; 29   : 	virtual void Sound_Heard(GameObject *obj,const CombatSound &Sound) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Sound_Heard@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ENDP ; DAGameObjObserverClass::Sound_Heard
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Exited@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Exiter$ = 12						; size = 4
?Exited@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; DAGameObjObserverClass::Exited, COMDAT
; _this$ = ecx

; 27   : 	virtual void Exited(GameObject *obj,GameObject *Exiter) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; DAGameObjObserverClass::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Entered@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Enterer$ = 12						; size = 4
?Entered@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; DAGameObjObserverClass::Entered, COMDAT
; _this$ = ecx

; 26   : 	virtual void Entered(GameObject *obj,GameObject *Enterer) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; DAGameObjObserverClass::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Poked@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Poker$ = 12						; size = 4
?Poked@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; DAGameObjObserverClass::Poked, COMDAT
; _this$ = ecx

; 25   : 	virtual void Poked(GameObject *obj,GameObject *Poker) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; DAGameObjObserverClass::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Custom@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Message$ = 12						; size = 4
_Param$ = 16						; size = 4
_Sender$ = 20						; size = 4
?Custom@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; DAGameObjObserverClass::Custom, COMDAT
; _this$ = ecx

; 24   : 	virtual void Custom(GameObject *obj,int Message,int Param,GameObject *Sender) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; DAGameObjObserverClass::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ?Destroyed@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@@Z PROC ; DAGameObjObserverClass::Destroyed, COMDAT
; _this$ = ecx

; 23   : 	virtual void Destroyed(GameObject *obj) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@DAGameObjObserverClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; DAGameObjObserverClass::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gameobj.h
;	COMDAT ??1DAGameObjObserverClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAGameObjObserverClass@@UAE@XZ PROC			; DAGameObjObserverClass::~DAGameObjObserverClass, COMDAT
; _this$ = ecx

; 22   : 	virtual ~DAGameObjObserverClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAGameObjObserverClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAGameObjObserverClass@@UAE@XZ ENDP			; DAGameObjObserverClass::~DAGameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDANodeManagerClass@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDANodeManagerClass@@EAEPAXI@Z PROC			; DANodeManagerClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DANodeManagerClass@@EAE@XZ	; DANodeManagerClass::~DANodeManagerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	60					; 0000003cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DANodeManagerClass@@EAE@XZ		; DANodeManagerClass::~DANodeManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDANodeManagerClass@@EAEPAXI@Z ENDP			; DANodeManagerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDANodeManagerClass@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDANodeManagerClass@@EAEPAXI@Z PROC			; DANodeManagerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DANodeManagerClass@@EAE@XZ		; DANodeManagerClass::~DANodeManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDANodeManagerClass@@EAEPAXI@Z ENDP			; DANodeManagerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DABaseNodeClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DABaseNodeClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE@XZ PROC ; DynamicVectorClass<DABaseNodeClass *>::~DynamicVectorClass<DABaseNodeClass *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDABaseNodeClass@@@@UAE@XZ ; VectorClass<DABaseNodeClass *>::~VectorClass<DABaseNodeClass *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE@XZ ENDP ; DynamicVectorClass<DABaseNodeClass *>::~DynamicVectorClass<DABaseNodeClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z PROC ; DynamicVectorClass<DABaseNodeClass *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; DynamicVectorClass<DABaseNodeClass *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z ENDP ; DynamicVectorClass<DABaseNodeClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z PROC ; DynamicVectorClass<DABaseNodeClass *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z ; VectorClass<DABaseNodeClass *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z ENDP ; DynamicVectorClass<DABaseNodeClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete_All@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAEXXZ
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?Delete_All@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAEXXZ PROC ; DynamicVectorClass<DABaseNodeClass *>::Delete_All, COMDAT
; _this$ = ecx

; 457  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		int len = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _len$[ebp], ecx

; 459  : 		Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 460  : 		Resize(len);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 461  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete_All@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAEXXZ ENDP ; DynamicVectorClass<DABaseNodeClass *>::Delete_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE_NABQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE_NABQAVDABaseNodeClass@@@Z PROC ; DynamicVectorClass<DABaseNodeClass *>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; VectorClass<DABaseNodeClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; VectorClass<DABaseNodeClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE_NABQAVDABaseNodeClass@@@Z ENDP ; DynamicVectorClass<DABaseNodeClass *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QBEHXZ PROC ; DynamicVectorClass<DABaseNodeClass *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QBEHXZ ENDP ; DynamicVectorClass<DABaseNodeClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEXXZ PROC ; DynamicVectorClass<DABaseNodeClass *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDABaseNodeClass@@@@UAEXXZ ; VectorClass<DABaseNodeClass *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAEXXZ ENDP ; DynamicVectorClass<DABaseNodeClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z PROC ; DynamicVectorClass<DABaseNodeClass *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z ; VectorClass<DABaseNodeClass *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; VectorClass<DABaseNodeClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; VectorClass<DABaseNodeClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z ENDP ; DynamicVectorClass<DABaseNodeClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE@IPBQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE@IPBQAVDABaseNodeClass@@@Z PROC ; DynamicVectorClass<DABaseNodeClass *>::DynamicVectorClass<DABaseNodeClass *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAVDABaseNodeClass@@@@QAE@HPBQAVDABaseNodeClass@@@Z ; VectorClass<DABaseNodeClass *>::VectorClass<DABaseNodeClass *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAVDABaseNodeClass@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE@IPBQAVDABaseNodeClass@@@Z ENDP ; DynamicVectorClass<DABaseNodeClass *>::DynamicVectorClass<DABaseNodeClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z PROC	; VectorClass<DABaseNodeClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDABaseNodeClass@@@@UAE@XZ ; VectorClass<DABaseNodeClass *>::~VectorClass<DABaseNodeClass *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAVDABaseNodeClass@@@@UAEPAXI@Z ENDP	; VectorClass<DABaseNodeClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z PROC ; VectorClass<DABaseNodeClass *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHABQAVDABaseNodeClass@@@Z ENDP ; VectorClass<DABaseNodeClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z PROC ; VectorClass<DABaseNodeClass *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDABaseNodeClass@@@@UAEHPBQAVDABaseNodeClass@@@Z ENDP ; VectorClass<DABaseNodeClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ PROC	; VectorClass<DABaseNodeClass *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ ENDP	; VectorClass<DABaseNodeClass *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAVDABaseNodeClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAVDABaseNodeClass@@@@UAEXXZ PROC	; VectorClass<DABaseNodeClass *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CM@NGDBILCB@VectorClass?$DMclass?5DABaseNodeClas@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAVDABaseNodeClass@@@@UAEXXZ ENDP	; VectorClass<DABaseNodeClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z PROC ; VectorClass<DABaseNodeClass *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CN@JGJEGDPA@VectorClass?$DMclass?5DABaseNodeClas@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CN@JGJEGDPA@VectorClass?$DMclass?5DABaseNodeClas@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAVDABaseNodeClass@@@std@@YA$$QAPAVDABaseNodeClass@@AAPAV1@@Z ; std::move<DABaseNodeClass * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CN@JGJEGDPA@VectorClass?$DMclass?5DABaseNodeClas@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAVDABaseNodeClass@@@@UAE_NHPBQAVDABaseNodeClass@@@Z ENDP ; VectorClass<DABaseNodeClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAVDABaseNodeClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAVDABaseNodeClass@@@@UBE_NABV0@@Z PROC ; VectorClass<DABaseNodeClass *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; VectorClass<DABaseNodeClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QBEABQAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAVDABaseNodeClass@@@@UBE_NABV0@@Z ENDP ; VectorClass<DABaseNodeClass *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDABaseNodeClass@@@@QBEABQAVDABaseNodeClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDABaseNodeClass@@@@QBEABQAVDABaseNodeClass@@H@Z PROC ; VectorClass<DABaseNodeClass *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDABaseNodeClass@@@@QBEABQAVDABaseNodeClass@@H@Z ENDP ; VectorClass<DABaseNodeClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z PROC ; VectorClass<DABaseNodeClass *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ENDP ; VectorClass<DABaseNodeClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAVDABaseNodeClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAVDABaseNodeClass@@@@UAE@XZ PROC	; VectorClass<DABaseNodeClass *>::~VectorClass<DABaseNodeClass *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDABaseNodeClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDABaseNodeClass@@@@UAEXXZ ; VectorClass<DABaseNodeClass *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAVDABaseNodeClass@@@@UAE@XZ ENDP	; VectorClass<DABaseNodeClass *>::~VectorClass<DABaseNodeClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAVDABaseNodeClass@@@@QAE@HPBQAVDABaseNodeClass@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAVDABaseNodeClass@@@@QAE@HPBQAVDABaseNodeClass@@@Z PROC ; VectorClass<DABaseNodeClass *>::VectorClass<DABaseNodeClass *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDABaseNodeClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0DC@FHJCDJGK@VectorClass?$DMclass?5DABaseNodeClas@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0DC@FHJCDJGK@VectorClass?$DMclass?5DABaseNodeClas@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAVDABaseNodeClass@@@@QAE@HPBQAVDABaseNodeClass@@@Z ENDP ; VectorClass<DABaseNodeClass *>::VectorClass<DABaseNodeClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ??0DANodeManagerClass@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DANodeManagerClass@@AAE@XZ PROC			; DANodeManagerClass::DANodeManagerClass, COMDAT
; _this$ = ecx

; 185  : 	DANodeManagerClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAEventClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DANodeManagerClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAE@IPBQAVDABaseNodeClass@@@Z ; DynamicVectorClass<DABaseNodeClass *>::DynamicVectorClass<DABaseNodeClass *>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DANodeManagerClass@@AAE@XZ ENDP			; DANodeManagerClass::DANodeManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ??1DANodeManagerClass@@EAE@XZ
_TEXT	SEGMENT
tv139 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
??1DANodeManagerClass@@EAE@XZ PROC			; DANodeManagerClass::~DANodeManagerClass, COMDAT
; _this$ = ecx

; 179  : 	virtual ~DANodeManagerClass() {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DANodeManagerClass@@6B@

; 180  : 		for (int i = 0;i < Nodes.Count();i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@DANodeMana
$LN2@DANodeMana:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@DANodeMana:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; DynamicVectorClass<DABaseNodeClass *>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN1@DANodeMana

; 181  : 			delete Nodes[i];

	push	OFFSET ??_C@_0CI@IEDAACLK@DANodeManagerClass?3?3?$HODANodeManag@
	push	181					; 000000b5H
	push	OFFSET ??_C@_0DK@BEAEGMFO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@DANodeMana
	xor	ecx, ecx
	jne	SHORT $LN6@DANodeMana
	push	181					; 000000b5H
	push	OFFSET ??_C@_1HE@NOMOPGHL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@DANodeMana:
	jmp	SHORT $LN10@DANodeMana
$LN9@DANodeMana:
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@DANodeMana
	push	1
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN10@DANodeMana
$LN7@DANodeMana:
	mov	DWORD PTR tv139[ebp], 0
$LN10@DANodeMana:

; 182  : 		}

	jmp	$LN2@DANodeMana
$LN1@DANodeMana:

; 183  : 		Nodes.Delete_All();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Delete_All@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QAEXXZ ; DynamicVectorClass<DABaseNodeClass *>::Delete_All

; 184  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$DynamicVectorClass@PAVDABaseNodeClass@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAEventClass@@UAE@XZ			; DAEventClass::~DAEventClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DANodeManagerClass@@EAE@XZ ENDP			; DANodeManagerClass::~DANodeManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Find_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Group$ = 8						; size = 4
?Find_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@ABVStringClass@@@Z PROC ; DANodeManagerClass::Find_Node, COMDAT
; _this$ = ecx

; 168  : 	inline DABaseNodeClass *Find_Node(const StringClass &Group) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		for (int i = 0;i < Nodes.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Find_Node
$LN3@Find_Node:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Node:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; DynamicVectorClass<DABaseNodeClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@Find_Node

; 170  : 			if (Nodes[i]->Get_Group() == Group) {

	mov	ecx, DWORD PTR _Group$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Group@DABaseNodeClass@@QBEABVStringClass@@XZ ; DABaseNodeClass::Get_Group
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Find_Node

; 171  : 				return Nodes[i];

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN5@Find_Node
$LN1@Find_Node:

; 172  : 			}
; 173  : 		}

	jmp	SHORT $LN3@Find_Node
$LN2@Find_Node:

; 174  : 		return 0;

	xor	eax, eax
$LN5@Find_Node:

; 175  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Find_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@ABVStringClass@@@Z ENDP ; DANodeManagerClass::Find_Node
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Index$ = 8						; size = 4
?Get_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@H@Z PROC ; DANodeManagerClass::Get_Node, COMDAT
; _this$ = ecx

; 165  : 	inline DABaseNodeClass *Get_Node(int Index) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		return Nodes[Index];

	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$VectorClass@PAVDABaseNodeClass@@@@QAEAAPAVDABaseNodeClass@@H@Z ; VectorClass<DABaseNodeClass *>::operator[]
	mov	eax, DWORD PTR [eax]

; 167  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Node@DANodeManagerClass@@QAEPAVDABaseNodeClass@@H@Z ENDP ; DANodeManagerClass::Get_Node
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Node_Count@DANodeManagerClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Node_Count@DANodeManagerClass@@QAEHXZ PROC		; DANodeManagerClass::Get_Node_Count, COMDAT
; _this$ = ecx

; 162  : 	inline int Get_Node_Count() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return Nodes.Count();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Count@?$DynamicVectorClass@PAVDABaseNodeClass@@@@QBEHXZ ; DynamicVectorClass<DABaseNodeClass *>::Count

; 164  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Node_Count@DANodeManagerClass@@QAEHXZ ENDP		; DANodeManagerClass::Get_Node_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Contested_Spawn_Time@DANodeManagerClass@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Contested_Spawn_Time@DANodeManagerClass@@QBEIXZ PROC ; DANodeManagerClass::Get_Contested_Spawn_Time, COMDAT
; _this$ = ecx

; 159  : 	inline unsigned int Get_Contested_Spawn_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		return ContestedSpawnTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]

; 161  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Contested_Spawn_Time@DANodeManagerClass@@QBEIXZ ENDP ; DANodeManagerClass::Get_Contested_Spawn_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Capture_Veteran_Points@DANodeManagerClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Capture_Veteran_Points@DANodeManagerClass@@QBEHXZ PROC ; DANodeManagerClass::Get_Capture_Veteran_Points, COMDAT
; _this$ = ecx

; 156  : 	inline int Get_Capture_Veteran_Points() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		return CaptureVeteranPoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]

; 158  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Capture_Veteran_Points@DANodeManagerClass@@QBEHXZ ENDP ; DANodeManagerClass::Get_Capture_Veteran_Points
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Capture_Points@DANodeManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Capture_Points@DANodeManagerClass@@QBEMXZ PROC	; DANodeManagerClass::Get_Capture_Points, COMDAT
; _this$ = ecx

; 153  : 	inline float Get_Capture_Points() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 154  : 		return CapturePoints;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Capture_Points@DANodeManagerClass@@QBEMXZ ENDP	; DANodeManagerClass::Get_Capture_Points
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Attack_Defend_Tick_Veteran_Points@DANodeManagerClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Attack_Defend_Tick_Veteran_Points@DANodeManagerClass@@QBEHXZ PROC ; DANodeManagerClass::Get_Attack_Defend_Tick_Veteran_Points, COMDAT
; _this$ = ecx

; 150  : 	inline int Get_Attack_Defend_Tick_Veteran_Points() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		return AttackDefendTickVeteranPoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]

; 152  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Attack_Defend_Tick_Veteran_Points@DANodeManagerClass@@QBEHXZ ENDP ; DANodeManagerClass::Get_Attack_Defend_Tick_Veteran_Points
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Attack_Defend_Tick_Points@DANodeManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Attack_Defend_Tick_Points@DANodeManagerClass@@QBEMXZ PROC ; DANodeManagerClass::Get_Attack_Defend_Tick_Points, COMDAT
; _this$ = ecx

; 147  : 	inline float Get_Attack_Defend_Tick_Points() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		return AttackDefendTickPoints;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]

; 149  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Attack_Defend_Tick_Points@DANodeManagerClass@@QBEMXZ ENDP ; DANodeManagerClass::Get_Attack_Defend_Tick_Points
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Attack_Defend_Tick_Time@DANodeManagerClass@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Attack_Defend_Tick_Time@DANodeManagerClass@@QBEIXZ PROC ; DANodeManagerClass::Get_Attack_Defend_Tick_Time, COMDAT
; _this$ = ecx

; 144  : 	inline unsigned int Get_Attack_Defend_Tick_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return AttackDefendTickTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]

; 146  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Attack_Defend_Tick_Time@DANodeManagerClass@@QBEIXZ ENDP ; DANodeManagerClass::Get_Attack_Defend_Tick_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Attack_Defend_Tick_Amount@DANodeManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Attack_Defend_Tick_Amount@DANodeManagerClass@@QBEMXZ PROC ; DANodeManagerClass::Get_Attack_Defend_Tick_Amount, COMDAT
; _this$ = ecx

; 141  : 	inline float Get_Attack_Defend_Tick_Amount() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 		return AttackDefendTickAmount;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]

; 143  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Attack_Defend_Tick_Amount@DANodeManagerClass@@QBEMXZ ENDP ; DANodeManagerClass::Get_Attack_Defend_Tick_Amount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Attack_Defend_Distance@DANodeManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Attack_Defend_Distance@DANodeManagerClass@@QBEMXZ PROC ; DANodeManagerClass::Get_Attack_Defend_Distance, COMDAT
; _this$ = ecx

; 138  : 	inline float Get_Attack_Defend_Distance() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 		return AttackDefendDistance;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Attack_Defend_Distance@DANodeManagerClass@@QBEMXZ ENDP ; DANodeManagerClass::Get_Attack_Defend_Distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$DASingleton@VDANodeManagerClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$DASingleton@VDANodeManagerClass@@@@QAEAAV0@ABV0@@Z PROC ; DASingleton<DANodeManagerClass>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DASingleton@VDANodeManagerClass@@@@QAEAAV0@ABV0@@Z ENDP ; DASingleton<DANodeManagerClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ
_TEXT	SEGMENT
?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ PROC ; DASingleton<DANodeManagerClass>::Get_Instance, COMDAT

; 507  : 	static inline T *Get_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 508  : 		return Instance;

	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDANodeManagerClass@@@@0PAVDANodeManagerClass@@A ; DASingleton<DANodeManagerClass>::Instance

; 509  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ENDP ; DASingleton<DANodeManagerClass>::Get_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Destroy_Instance@?$DASingleton@VDANodeManagerClass@@@@SAXXZ
_TEXT	SEGMENT
tv83 = -76						; size = 4
$T1 = -72						; size = 4
$T2 = -68						; size = 4
?Destroy_Instance@?$DASingleton@VDANodeManagerClass@@@@SAXXZ PROC ; DASingleton<DANodeManagerClass>::Destroy_Instance, COMDAT

; 501  : 	static inline void Destroy_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 502  : 		if (Instance) {

	cmp	DWORD PTR ?Instance@?$DASingleton@VDANodeManagerClass@@@@0PAVDANodeManagerClass@@A, 0 ; DASingleton<DANodeManagerClass>::Instance
	je	SHORT $LN2@Destroy_In

; 503  : 			delete Instance;

	push	OFFSET ??_C@_0DI@DMGMNBNI@DASingleton?$DMclass?5DANodeManagerC@
	push	503					; 000001f7H
	push	OFFSET ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Destroy_In
	xor	ecx, ecx
	jne	SHORT $LN4@Destroy_In
	push	503					; 000001f7H
	push	OFFSET ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Destroy_In:
	jmp	SHORT $LN8@Destroy_In
$LN7@Destroy_In:
	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDANodeManagerClass@@@@0PAVDANodeManagerClass@@A ; DASingleton<DANodeManagerClass>::Instance
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Destroy_In
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN8@Destroy_In
$LN5@Destroy_In:
	mov	DWORD PTR tv83[ebp], 0
$LN8@Destroy_In:

; 504  : 			Instance = 0;

	mov	DWORD PTR ?Instance@?$DASingleton@VDANodeManagerClass@@@@0PAVDANodeManagerClass@@A, 0 ; DASingleton<DANodeManagerClass>::Instance
$LN2@Destroy_In:

; 505  : 		}
; 506  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy_Instance@?$DASingleton@VDANodeManagerClass@@@@SAXXZ ENDP ; DASingleton<DANodeManagerClass>::Destroy_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Create_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ
_TEXT	SEGMENT
tv78 = -76						; size = 4
tv80 = -72						; size = 4
$T1 = -68						; size = 4
?Create_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ PROC ; DASingleton<DANodeManagerClass>::Create_Instance, COMDAT

; 495  : 	static inline T *Create_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 496  : 		if (!Instance) {

	cmp	DWORD PTR ?Instance@?$DASingleton@VDANodeManagerClass@@@@0PAVDANodeManagerClass@@A, 0 ; DASingleton<DANodeManagerClass>::Instance
	jne	SHORT $LN1@Create_Ins

; 497  : 			Instance = new T;

	push	OFFSET ??_C@_0DH@JBHKLJEA@DASingleton?$DMclass?5DANodeManagerC@
	push	497					; 000001f1H
	push	OFFSET ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Create_Ins
	xor	ecx, ecx
	jne	SHORT $LN4@Create_Ins
	push	497					; 000001f1H
	push	OFFSET ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Create_Ins:
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN8@Create_Ins
$LN7@Create_Ins:
	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Create_Ins
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DANodeManagerClass@@AAE@XZ		; DANodeManagerClass::DANodeManagerClass
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN6@Create_Ins
$LN5@Create_Ins:
	mov	DWORD PTR tv78[ebp], 0
$LN6@Create_Ins:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv80[ebp], eax
$LN8@Create_Ins:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR ?Instance@?$DASingleton@VDANodeManagerClass@@@@0PAVDANodeManagerClass@@A, ecx ; DASingleton<DANodeManagerClass>::Instance
$LN1@Create_Ins:

; 498  : 		}
; 499  : 		return Instance;

	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDANodeManagerClass@@@@0PAVDANodeManagerClass@@A ; DASingleton<DANodeManagerClass>::Instance

; 500  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create_Instance@?$DASingleton@VDANodeManagerClass@@@@SAPAVDANodeManagerClass@@XZ ENDP ; DASingleton<DANodeManagerClass>::Create_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDASpawnNodeClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDASpawnNodeClass@@UAEPAXI@Z PROC			; DASpawnNodeClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DASpawnNodeClass@@UAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	100					; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnNodeClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDASpawnNodeClass@@UAEPAXI@Z ENDP			; DASpawnNodeClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDASpawnNodeClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDASpawnNodeClass@@UAEPAXI@Z PROC			; DASpawnNodeClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnNodeClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDASpawnNodeClass@@UAEPAXI@Z ENDP			; DASpawnNodeClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DASpawnNodeClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DASpawnNodeClass@@QAEAAV0@ABV0@@Z PROC		; DASpawnNodeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DABaseNodeClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+96], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DASpawnNodeClass@@QAEAAV0@ABV0@@Z ENDP		; DASpawnNodeClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DASpawnNodeClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DASpawnNodeClass@@QAE@ABV0@@Z PROC			; DASpawnNodeClass::DASpawnNodeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DABaseNodeClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DASpawnNodeClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+96], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DASpawnNodeClass@@QAE@ABV0@@Z ENDP			; DASpawnNodeClass::DASpawnNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DASpawnNodeClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DASpawnNodeClass@@UAE@XZ PROC			; DASpawnNodeClass::~DASpawnNodeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DABaseNodeClass@@UAE@XZ		; DABaseNodeClass::~DABaseNodeClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DASpawnNodeClass@@UAE@XZ ENDP			; DASpawnNodeClass::~DASpawnNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DASpawnNodeClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DASpawnNodeClass@@QAE@XZ PROC			; DASpawnNodeClass::DASpawnNodeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DABaseNodeClass@@IAE@XZ		; DABaseNodeClass::DABaseNodeClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DASpawnNodeClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DASpawnNodeClass@@QAE@XZ ENDP			; DASpawnNodeClass::DASpawnNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Type@DASpawnNodeClass@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Type@DASpawnNodeClass@@UBEPBDXZ PROC		; DASpawnNodeClass::Get_Type, COMDAT
; _this$ = ecx

; 118  : 	virtual const char *Get_Type() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 		return SpawnNodeType;

	mov	eax, OFFSET ??_C@_05BEKPGMFA@Spawn?$AA@

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Type@DASpawnNodeClass@@UBEPBDXZ ENDP		; DASpawnNodeClass::Get_Type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDABaseNodeClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDABaseNodeClass@@UAEPAXI@Z PROC			; DABaseNodeClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DABaseNodeClass@@UAE@XZ	; DABaseNodeClass::~DABaseNodeClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	96					; 00000060H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DABaseNodeClass@@UAE@XZ		; DABaseNodeClass::~DABaseNodeClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDABaseNodeClass@@UAEPAXI@Z ENDP			; DABaseNodeClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDABaseNodeClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDABaseNodeClass@@UAEPAXI@Z PROC			; DABaseNodeClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DABaseNodeClass@@UAE@XZ		; DABaseNodeClass::~DABaseNodeClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDABaseNodeClass@@UAEPAXI@Z ENDP			; DABaseNodeClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DABaseNodeClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S4$1 = -16						; size = 4
_$S3$2 = -12						; size = 4
_$S2$3 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DABaseNodeClass@@QAEAAV0@ABV0@@Z PROC		; DABaseNodeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DAEventClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR _$S2$3[ebp], 0
	jmp	SHORT $LN9@operator
$LN8@operator:
	mov	eax, DWORD PTR _$S2$3[ebp]
	add	eax, 1
	mov	DWORD PTR _$S2$3[ebp], eax
$LN9@operator:
	cmp	DWORD PTR _$S2$3[ebp], 2
	jae	SHORT $LN7@operator
	mov	eax, DWORD PTR _$S2$3[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _$S2$3[ebp]
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+16]
	mov	DWORD PTR [ecx+eax*4+16], edx
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+24]
	mov	BYTE PTR [eax+24], dl
	mov	DWORD PTR _$S3$2[ebp], 0
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	eax, DWORD PTR _$S3$2[ebp]
	add	eax, 1
	mov	DWORD PTR _$S3$2[ebp], eax
$LN6@operator:
	cmp	DWORD PTR _$S3$2[ebp], 2
	jae	SHORT $LN4@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S3$2[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S3$2[ebp]
	mov	dl, BYTE PTR [ecx+25]
	mov	BYTE PTR [eax+25], dl
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	DWORD PTR _$S4$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S4$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S4$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S4$1[ebp], 2
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _$S4$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _$S4$1[ebp]
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+40]
	mov	DWORD PTR [ecx+eax*4+40], edx
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR [eax+52], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+92]
	mov	BYTE PTR [eax+92], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+93]
	mov	BYTE PTR [eax+93], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+94]
	mov	BYTE PTR [eax+94], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DABaseNodeClass@@QAEAAV0@ABV0@@Z ENDP		; DABaseNodeClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DABaseNodeClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DABaseNodeClass@@QAE@ABV0@@Z PROC			; DABaseNodeClass::DABaseNodeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAEventClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DABaseNodeClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+24]
	mov	BYTE PTR [eax+24], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+25]
	mov	WORD PTR [eax+25], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	ecx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR [eax+52], dl
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+92]
	mov	BYTE PTR [eax+92], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+93]
	mov	BYTE PTR [eax+93], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+94]
	mov	BYTE PTR [eax+94], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DABaseNodeClass@@QAE@ABV0@@Z ENDP			; DABaseNodeClass::DABaseNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ??0DABaseNodeClass@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DABaseNodeClass@@IAE@XZ PROC				; DABaseNodeClass::DABaseNodeClass, COMDAT
; _this$ = ecx

; 88   : 	DABaseNodeClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAEventClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DABaseNodeClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DABaseNodeClass@@IAE@XZ ENDP				; DABaseNodeClass::DABaseNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Capture_Event@DABaseNodeClass@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Capture_Event@DABaseNodeClass@@MAEXXZ PROC		; DABaseNodeClass::Capture_Event, COMDAT
; _this$ = ecx

; 82   : 	virtual void Capture_Event() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Capture_Event@DABaseNodeClass@@MAEXXZ ENDP		; DABaseNodeClass::Capture_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Contested_Event@DABaseNodeClass@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Contested_Event@DABaseNodeClass@@MAEXXZ PROC		; DABaseNodeClass::Contested_Event, COMDAT
; _this$ = ecx

; 81   : 	virtual void Contested_Event() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Contested_Event@DABaseNodeClass@@MAEXXZ ENDP		; DABaseNodeClass::Contested_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Set_Capture_Once@DABaseNodeClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cap$ = 8						; size = 1
?Set_Capture_Once@DABaseNodeClass@@QAEX_N@Z PROC	; DABaseNodeClass::Set_Capture_Once, COMDAT
; _this$ = ecx

; 70   : 	inline void Set_Capture_Once(bool cap) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		CaptureOnce = cap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _cap$[ebp]
	mov	BYTE PTR [eax+94], cl

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Capture_Once@DABaseNodeClass@@QAEX_N@Z ENDP	; DABaseNodeClass::Set_Capture_Once
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Is_Capture_Once@DABaseNodeClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Capture_Once@DABaseNodeClass@@QBE_NXZ PROC		; DABaseNodeClass::Is_Capture_Once, COMDAT
; _this$ = ecx

; 67   : 	inline bool Is_Capture_Once() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 		return CaptureOnce;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+94]

; 69   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Capture_Once@DABaseNodeClass@@QBE_NXZ ENDP		; DABaseNodeClass::Is_Capture_Once
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Set_Capturable@DABaseNodeClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cap$ = 8						; size = 1
?Set_Capturable@DABaseNodeClass@@QAEX_N@Z PROC		; DABaseNodeClass::Set_Capturable, COMDAT
; _this$ = ecx

; 64   : 	inline void Set_Capturable(bool cap) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		IsCapturable = cap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _cap$[ebp]
	mov	BYTE PTR [eax+93], cl

; 66   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Capturable@DABaseNodeClass@@QAEX_N@Z ENDP		; DABaseNodeClass::Set_Capturable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Is_Capturable@DABaseNodeClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Capturable@DABaseNodeClass@@QBE_NXZ PROC		; DABaseNodeClass::Is_Capturable, COMDAT
; _this$ = ecx

; 61   : 	inline bool Is_Capturable() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		return IsCapturable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+93]

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Capturable@DABaseNodeClass@@QBE_NXZ ENDP		; DABaseNodeClass::Is_Capturable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Set_Contested@DABaseNodeClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_contested$ = 8						; size = 1
?Set_Contested@DABaseNodeClass@@QAEX_N@Z PROC		; DABaseNodeClass::Set_Contested, COMDAT
; _this$ = ecx

; 55   : 	void Set_Contested(bool contested) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		if (IsContested != contested) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+52]
	movzx	edx, BYTE PTR _contested$[ebp]
	cmp	ecx, edx
	je	SHORT $LN2@Set_Contes

; 57   : 			IsContested = contested;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _contested$[ebp]
	mov	BYTE PTR [eax+52], cl

; 58   : 			Contested_Event();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	call	eax
$LN2@Set_Contes:

; 59   : 		}
; 60   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Contested@DABaseNodeClass@@QAEX_N@Z ENDP		; DABaseNodeClass::Set_Contested
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Is_Contested@DABaseNodeClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Contested@DABaseNodeClass@@QBE_NXZ PROC		; DABaseNodeClass::Is_Contested, COMDAT
; _this$ = ecx

; 52   : 	inline bool Is_Contested() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		return IsContested;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+52]

; 54   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Contested@DABaseNodeClass@@QBE_NXZ ENDP		; DABaseNodeClass::Is_Contested
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Name@DABaseNodeClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@DABaseNodeClass@@QBEABVStringClass@@XZ PROC	; DABaseNodeClass::Get_Name, COMDAT
; _this$ = ecx

; 49   : 	inline const StringClass &Get_Name() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 		return Name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H

; 51   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@DABaseNodeClass@@QBEABVStringClass@@XZ ENDP	; DABaseNodeClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Group@DABaseNodeClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Group@DABaseNodeClass@@QBEABVStringClass@@XZ PROC	; DABaseNodeClass::Get_Group, COMDAT
; _this$ = ecx

; 46   : 	inline const StringClass &Get_Group() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return Group;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H

; 48   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Group@DABaseNodeClass@@QBEABVStringClass@@XZ ENDP	; DABaseNodeClass::Get_Group
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Team@DABaseNodeClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Team@DABaseNodeClass@@QBEHXZ PROC			; DABaseNodeClass::Get_Team, COMDAT
; _this$ = ecx

; 43   : 	inline int Get_Team() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		return Team;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 45   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Team@DABaseNodeClass@@QBEHXZ ENDP			; DABaseNodeClass::Get_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Model@DABaseNodeClass@@QBEPBDXZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?Get_Model@DABaseNodeClass@@QBEPBDXZ PROC		; DABaseNodeClass::Get_Model, COMDAT
; _this$ = ecx

; 40   : 	inline const char *Get_Model() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return Object->Peek_Model()->Get_Base_Model_Name();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ ; PhysicalGameObj::Peek_Model
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 42   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Model@DABaseNodeClass@@QBEPBDXZ ENDP		; DABaseNodeClass::Get_Model
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Preset@DABaseNodeClass@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?Get_Preset@DABaseNodeClass@@QBEPBDXZ PROC		; DABaseNodeClass::Get_Preset, COMDAT
; _this$ = ecx

; 37   : 	inline const char *Get_Preset() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return Object->Get_Definition().Get_Name();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Get_Definition@PhysicalGameObj@@QBEABVPhysicalGameObjDef@@XZ ; PhysicalGameObj::Get_Definition
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Preset@DABaseNodeClass@@QBEPBDXZ ENDP		; DABaseNodeClass::Get_Preset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ?Get_Position@DABaseNodeClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Position@DABaseNodeClass@@QBEABVVector3@@XZ PROC	; DABaseNodeClass::Get_Position, COMDAT
; _this$ = ecx

; 34   : 	inline const Vector3 &Get_Position() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return Position;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H

; 36   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Position@DABaseNodeClass@@QBEABVVector3@@XZ ENDP	; DABaseNodeClass::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ??9DABaseNodeClass@@QAE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_That$ = 8						; size = 4
??9DABaseNodeClass@@QAE_NABV0@@Z PROC			; DABaseNodeClass::operator!=, COMDAT
; _this$ = ecx

; 31   : 	bool operator !=(const DABaseNodeClass &That) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 		return true;

	mov	al, 1

; 33   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9DABaseNodeClass@@QAE_NABV0@@Z ENDP			; DABaseNodeClass::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ??8DABaseNodeClass@@QAE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_That$ = 8						; size = 4
??8DABaseNodeClass@@QAE_NABV0@@Z PROC			; DABaseNodeClass::operator==, COMDAT
; _this$ = ecx

; 28   : 	bool operator ==(const DABaseNodeClass &That) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 		return false;

	xor	al, al

; 30   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8DABaseNodeClass@@QAE_NABV0@@Z ENDP			; DABaseNodeClass::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_nodemanager.h
;	COMDAT ??1DABaseNodeClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DABaseNodeClass@@UAE@XZ PROC				; DABaseNodeClass::~DABaseNodeClass, COMDAT
; _this$ = ecx

; 27   : 	virtual ~DABaseNodeClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DABaseNodeClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAEventClass@@UAE@XZ			; DAEventClass::~DAEventClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DABaseNodeClass@@UAE@XZ ENDP				; DABaseNodeClass::~DABaseNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDASpawnManagerClass@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDASpawnManagerClass@@EAEPAXI@Z PROC			; DASpawnManagerClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DASpawnManagerClass@@EAE@XZ	; DASpawnManagerClass::~DASpawnManagerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	112					; 00000070H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnManagerClass@@EAE@XZ		; DASpawnManagerClass::~DASpawnManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDASpawnManagerClass@@EAEPAXI@Z ENDP			; DASpawnManagerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDASpawnManagerClass@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDASpawnManagerClass@@EAEPAXI@Z PROC			; DASpawnManagerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnManagerClass@@EAE@XZ		; DASpawnManagerClass::~DASpawnManagerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDASpawnManagerClass@@EAEPAXI@Z ENDP			; DASpawnManagerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DASpawnPointClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DASpawnPointClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE@XZ PROC ; DynamicVectorClass<DASpawnPointClass *>::~DynamicVectorClass<DASpawnPointClass *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDASpawnPointClass@@@@UAE@XZ ; VectorClass<DASpawnPointClass *>::~VectorClass<DASpawnPointClass *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE@XZ ENDP ; DynamicVectorClass<DASpawnPointClass *>::~DynamicVectorClass<DASpawnPointClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z PROC ; DynamicVectorClass<DASpawnPointClass *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DASpawnPointClass *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z ENDP ; DynamicVectorClass<DASpawnPointClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z PROC ; DynamicVectorClass<DASpawnPointClass *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z ; VectorClass<DASpawnPointClass *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z ENDP ; DynamicVectorClass<DASpawnPointClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete_All@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAEXXZ
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?Delete_All@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAEXXZ PROC ; DynamicVectorClass<DASpawnPointClass *>::Delete_All, COMDAT
; _this$ = ecx

; 457  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		int len = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _len$[ebp], ecx

; 459  : 		Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 460  : 		Resize(len);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 461  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete_All@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAEXXZ ENDP ; DynamicVectorClass<DASpawnPointClass *>::Delete_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE_NABQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE_NABQAVDASpawnPointClass@@@Z PROC ; DynamicVectorClass<DASpawnPointClass *>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; VectorClass<DASpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; VectorClass<DASpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE_NABQAVDASpawnPointClass@@@Z ENDP ; DynamicVectorClass<DASpawnPointClass *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ PROC ; DynamicVectorClass<DASpawnPointClass *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ ENDP ; DynamicVectorClass<DASpawnPointClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEXXZ PROC ; DynamicVectorClass<DASpawnPointClass *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDASpawnPointClass@@@@UAEXXZ ; VectorClass<DASpawnPointClass *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAEXXZ ENDP ; DynamicVectorClass<DASpawnPointClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z PROC ; DynamicVectorClass<DASpawnPointClass *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z ; VectorClass<DASpawnPointClass *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; VectorClass<DASpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; VectorClass<DASpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z ENDP ; DynamicVectorClass<DASpawnPointClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE@IPBQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE@IPBQAVDASpawnPointClass@@@Z PROC ; DynamicVectorClass<DASpawnPointClass *>::DynamicVectorClass<DASpawnPointClass *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAVDASpawnPointClass@@@@QAE@HPBQAVDASpawnPointClass@@@Z ; VectorClass<DASpawnPointClass *>::VectorClass<DASpawnPointClass *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAVDASpawnPointClass@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE@IPBQAVDASpawnPointClass@@@Z ENDP ; DynamicVectorClass<DASpawnPointClass *>::DynamicVectorClass<DASpawnPointClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z PROC ; VectorClass<DASpawnPointClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDASpawnPointClass@@@@UAE@XZ ; VectorClass<DASpawnPointClass *>::~VectorClass<DASpawnPointClass *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAVDASpawnPointClass@@@@UAEPAXI@Z ENDP ; VectorClass<DASpawnPointClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z PROC ; VectorClass<DASpawnPointClass *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHABQAVDASpawnPointClass@@@Z ENDP ; VectorClass<DASpawnPointClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z PROC ; VectorClass<DASpawnPointClass *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDASpawnPointClass@@@@UAEHPBQAVDASpawnPointClass@@@Z ENDP ; VectorClass<DASpawnPointClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ PROC ; VectorClass<DASpawnPointClass *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ ENDP ; VectorClass<DASpawnPointClass *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAVDASpawnPointClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAVDASpawnPointClass@@@@UAEXXZ PROC ; VectorClass<DASpawnPointClass *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CO@EOHHGKHD@VectorClass?$DMclass?5DASpawnPointCl@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAVDASpawnPointClass@@@@UAEXXZ ENDP ; VectorClass<DASpawnPointClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z PROC ; VectorClass<DASpawnPointClass *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CP@BDGJBFMJ@VectorClass?$DMclass?5DASpawnPointCl@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CP@BDGJBFMJ@VectorClass?$DMclass?5DASpawnPointCl@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAVDASpawnPointClass@@@std@@YA$$QAPAVDASpawnPointClass@@AAPAV1@@Z ; std::move<DASpawnPointClass * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CP@BDGJBFMJ@VectorClass?$DMclass?5DASpawnPointCl@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAVDASpawnPointClass@@@@UAE_NHPBQAVDASpawnPointClass@@@Z ENDP ; VectorClass<DASpawnPointClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAVDASpawnPointClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAVDASpawnPointClass@@@@UBE_NABV0@@Z PROC ; VectorClass<DASpawnPointClass *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; VectorClass<DASpawnPointClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QBEABQAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAVDASpawnPointClass@@@@UBE_NABV0@@Z ENDP ; VectorClass<DASpawnPointClass *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDASpawnPointClass@@@@QBEABQAVDASpawnPointClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDASpawnPointClass@@@@QBEABQAVDASpawnPointClass@@H@Z PROC ; VectorClass<DASpawnPointClass *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDASpawnPointClass@@@@QBEABQAVDASpawnPointClass@@H@Z ENDP ; VectorClass<DASpawnPointClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z PROC ; VectorClass<DASpawnPointClass *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ENDP ; VectorClass<DASpawnPointClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAVDASpawnPointClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAVDASpawnPointClass@@@@UAE@XZ PROC	; VectorClass<DASpawnPointClass *>::~VectorClass<DASpawnPointClass *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDASpawnPointClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDASpawnPointClass@@@@UAEXXZ ; VectorClass<DASpawnPointClass *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAVDASpawnPointClass@@@@UAE@XZ ENDP	; VectorClass<DASpawnPointClass *>::~VectorClass<DASpawnPointClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAVDASpawnPointClass@@@@QAE@HPBQAVDASpawnPointClass@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAVDASpawnPointClass@@@@QAE@HPBQAVDASpawnPointClass@@@Z PROC ; VectorClass<DASpawnPointClass *>::VectorClass<DASpawnPointClass *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDASpawnPointClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0DE@EOBPJAFA@VectorClass?$DMclass?5DASpawnPointCl@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0DE@EOBPJAFA@VectorClass?$DMclass?5DASpawnPointCl@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAVDASpawnPointClass@@@@QAE@HPBQAVDASpawnPointClass@@@Z ENDP ; VectorClass<DASpawnPointClass *>::VectorClass<DASpawnPointClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ??0DASpawnManagerClass@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DASpawnManagerClass@@AAE@XZ PROC			; DASpawnManagerClass::DASpawnManagerClass, COMDAT
; _this$ = ecx

; 253  : 	DASpawnManagerClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAEventClass@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DASpawnManagerClass@@6BDAEventClass@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ??_7DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	2
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE@IPBQAVDASpawnPointClass@@@Z ; DynamicVectorClass<DASpawnPointClass *>::DynamicVectorClass<DASpawnPointClass *>
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$DynamicVectorClass@H@@QAE@IPBH@Z	; DynamicVectorClass<int>::DynamicVectorClass<int>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DASpawnManagerClass@@AAE@XZ ENDP			; DASpawnManagerClass::DASpawnManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ??1DASpawnManagerClass@@EAE@XZ
_TEXT	SEGMENT
tv151 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
??1DASpawnManagerClass@@EAE@XZ PROC			; DASpawnManagerClass::~DASpawnManagerClass, COMDAT
; _this$ = ecx

; 246  : 	virtual ~DASpawnManagerClass() {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DASpawnManagerClass@@6BDAEventClass@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ??_7DASpawnManagerClass@@6B?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@@

; 247  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@DASpawnMan
$LN2@DASpawnMan:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@DASpawnMan:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DASpawnPointClass *>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN1@DASpawnMan

; 248  : 			delete SpawnPoints[i];

	push	OFFSET ??_C@_0CK@PCAAENII@DASpawnManagerClass?3?3?$HODASpawnMan@
	push	248					; 000000f8H
	push	OFFSET ??_C@_0DK@FKAEAKEB@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@DASpawnMan
	xor	ecx, ecx
	jne	SHORT $LN6@DASpawnMan
	push	248					; 000000f8H
	push	OFFSET ??_C@_1HE@EBKBOLIB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@DASpawnMan:
	jmp	SHORT $LN10@DASpawnMan
$LN9@DASpawnMan:
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@DASpawnMan
	push	1
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN10@DASpawnMan
$LN7@DASpawnMan:
	mov	DWORD PTR tv151[ebp], 0
$LN10@DASpawnMan:

; 249  : 		}

	jmp	$LN2@DASpawnMan
$LN1@DASpawnMan:

; 250  : 		SpawnPoints.Delete_All();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Delete_All@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAEXXZ ; DynamicVectorClass<DASpawnPointClass *>::Delete_All

; 251  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1?$DynamicVectorClass@H@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$DynamicVectorClass@PAVDASpawnPointClass@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAE@XZ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::~DAPlayerDataManagerClass<DASpawnPlayerDataClass>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAEventClass@@UAE@XZ			; DAEventClass::~DAEventClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DASpawnManagerClass@@EAE@XZ ENDP			; DASpawnManagerClass::~DASpawnManagerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Death_Position@DASpawnManagerClass@@QBEABVVector3@@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Get_Death_Position@DASpawnManagerClass@@QBEABVVector3@@PAVScriptableGameObj@@@Z PROC ; DASpawnManagerClass::Get_Death_Position, COMDAT
; _this$ = ecx

; 228  : 	inline const Vector3 &Get_Death_Position(GameObject *obj) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 		return Get_Player_Data(obj)->DeathPosition;

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVScriptableGameObj@@@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
	add	eax, 20					; 00000014H

; 230  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Death_Position@DASpawnManagerClass@@QBEABVVector3@@PAVScriptableGameObj@@@Z ENDP ; DASpawnManagerClass::Get_Death_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Death_Position@DASpawnManagerClass@@QBEABVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Get_Death_Position@DASpawnManagerClass@@QBEABVVector3@@H@Z PROC ; DASpawnManagerClass::Get_Death_Position, COMDAT
; _this$ = ecx

; 225  : 	inline const Vector3 &Get_Death_Position(int ID) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 		return Get_Player_Data(ID)->DeathPosition;

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@H@Z ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
	add	eax, 20					; 00000014H

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Death_Position@DASpawnManagerClass@@QBEABVVector3@@H@Z ENDP ; DASpawnManagerClass::Get_Death_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Protect_Time@DASpawnManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Protect_Time@DASpawnManagerClass@@QBEMXZ PROC	; DASpawnManagerClass::Get_Protect_Time, COMDAT
; _this$ = ecx

; 222  : 	inline float Get_Protect_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 		return ProtectTime;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+108]

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Protect_Time@DASpawnManagerClass@@QBEMXZ ENDP	; DASpawnManagerClass::Get_Protect_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Using_Waiting_Room@DASpawnManagerClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Using_Waiting_Room@DASpawnManagerClass@@QBE_NXZ PROC	; DASpawnManagerClass::Using_Waiting_Room, COMDAT
; _this$ = ecx

; 219  : 	inline bool Using_Waiting_Room() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 220  : 		return UseWaitingRoom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+80]

; 221  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Using_Waiting_Room@DASpawnManagerClass@@QBE_NXZ ENDP	; DASpawnManagerClass::Using_Waiting_Room
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Max_Enemy_Distance@DASpawnManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Max_Enemy_Distance@DASpawnManagerClass@@QBEMXZ PROC ; DASpawnManagerClass::Get_Max_Enemy_Distance, COMDAT
; _this$ = ecx

; 216  : 	inline float Get_Max_Enemy_Distance() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 		return MaxEnemyDistance;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+104]

; 218  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Max_Enemy_Distance@DASpawnManagerClass@@QBEMXZ ENDP ; DASpawnManagerClass::Get_Max_Enemy_Distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Min_Enemy_Distance@DASpawnManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Min_Enemy_Distance@DASpawnManagerClass@@QBEMXZ PROC ; DASpawnManagerClass::Get_Min_Enemy_Distance, COMDAT
; _this$ = ecx

; 213  : 	inline float Get_Min_Enemy_Distance() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 		return MinEnemyDistance;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+100]

; 215  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Min_Enemy_Distance@DASpawnManagerClass@@QBEMXZ ENDP ; DASpawnManagerClass::Get_Min_Enemy_Distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Max_Ally_Distance@DASpawnManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Max_Ally_Distance@DASpawnManagerClass@@QBEMXZ PROC	; DASpawnManagerClass::Get_Max_Ally_Distance, COMDAT
; _this$ = ecx

; 210  : 	inline float Get_Max_Ally_Distance() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 		return MaxAllyDistance;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+96]

; 212  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Max_Ally_Distance@DASpawnManagerClass@@QBEMXZ ENDP	; DASpawnManagerClass::Get_Max_Ally_Distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Min_Ally_Distance@DASpawnManagerClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Min_Ally_Distance@DASpawnManagerClass@@QBEMXZ PROC	; DASpawnManagerClass::Get_Min_Ally_Distance, COMDAT
; _this$ = ecx

; 207  : 	inline float Get_Min_Ally_Distance() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 		return MinAllyDistance;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+92]

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Min_Ally_Distance@DASpawnManagerClass@@QBEMXZ ENDP	; DASpawnManagerClass::Get_Min_Ally_Distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Intermission_Time@DASpawnManagerClass@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Intermission_Time@DASpawnManagerClass@@QBEIXZ PROC	; DASpawnManagerClass::Get_Intermission_Time, COMDAT
; _this$ = ecx

; 204  : 	inline unsigned int Get_Intermission_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 		return IntermissionTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+88]

; 206  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Intermission_Time@DASpawnManagerClass@@QBEIXZ ENDP	; DASpawnManagerClass::Get_Intermission_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Spawn_Time@DASpawnManagerClass@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Spawn_Time@DASpawnManagerClass@@QBEIXZ PROC	; DASpawnManagerClass::Get_Spawn_Time, COMDAT
; _this$ = ecx

; 201  : 	inline unsigned int Get_Spawn_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		return SpawnTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+84]

; 203  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Spawn_Time@DASpawnManagerClass@@QBEIXZ ENDP	; DASpawnManagerClass::Get_Spawn_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Disable_All_Except@DASpawnManagerClass@@QAEXABVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Group$ = 8						; size = 4
?Disable_All_Except@DASpawnManagerClass@@QAEXABVStringClass@@@Z PROC ; DASpawnManagerClass::Disable_All_Except, COMDAT
; _this$ = ecx

; 191  : 	inline void Disable_All_Except(const StringClass &Group) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@Disable_Al
$LN4@Disable_Al:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Disable_Al:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DASpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN6@Disable_Al

; 193  : 			if (SpawnPoints[i]->Get_Group() == Group) {

	mov	ecx, DWORD PTR _Group$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Group@DASpawnPointClass@@QBEABVStringClass@@XZ ; DASpawnPointClass::Get_Group
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Disable_Al

; 194  : 				SpawnPoints[i]->Set_Enabled(true);

	push	1
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DASpawnPointClass@@QAEX_N@Z ; DASpawnPointClass::Set_Enabled

; 195  : 			}
; 196  : 			else {

	jmp	SHORT $LN1@Disable_Al
$LN2@Disable_Al:

; 197  : 				SpawnPoints[i]->Set_Enabled(false);

	push	0
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DASpawnPointClass@@QAEX_N@Z ; DASpawnPointClass::Set_Enabled
$LN1@Disable_Al:

; 198  : 			}
; 199  : 		}

	jmp	SHORT $LN4@Disable_Al
$LN6@Disable_Al:

; 200  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Disable_All_Except@DASpawnManagerClass@@QAEXABVStringClass@@@Z ENDP ; DASpawnManagerClass::Disable_All_Except
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Enable_All_Except@DASpawnManagerClass@@QAEXABVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Group$ = 8						; size = 4
?Enable_All_Except@DASpawnManagerClass@@QAEXABVStringClass@@@Z PROC ; DASpawnManagerClass::Enable_All_Except, COMDAT
; _this$ = ecx

; 181  : 	inline void Enable_All_Except(const StringClass &Group) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@Enable_All
$LN4@Enable_All:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Enable_All:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DASpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN6@Enable_All

; 183  : 			if (SpawnPoints[i]->Get_Group() == Group) {

	mov	ecx, DWORD PTR _Group$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Group@DASpawnPointClass@@QBEABVStringClass@@XZ ; DASpawnPointClass::Get_Group
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Enable_All

; 184  : 				SpawnPoints[i]->Set_Enabled(false);

	push	0
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DASpawnPointClass@@QAEX_N@Z ; DASpawnPointClass::Set_Enabled

; 185  : 			}
; 186  : 			else {

	jmp	SHORT $LN1@Enable_All
$LN2@Enable_All:

; 187  : 				SpawnPoints[i]->Set_Enabled(true);

	push	1
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Set_Enabled@DASpawnPointClass@@QAEX_N@Z ; DASpawnPointClass::Set_Enabled
$LN1@Enable_All:

; 188  : 			}
; 189  : 		}

	jmp	SHORT $LN4@Enable_All
$LN6@Enable_All:

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Enable_All_Except@DASpawnManagerClass@@QAEXABVStringClass@@@Z ENDP ; DASpawnManagerClass::Enable_All_Except
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Find_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Group$ = 8						; size = 4
?Find_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@ABVStringClass@@@Z PROC ; DASpawnManagerClass::Find_Spawn_Point, COMDAT
; _this$ = ecx

; 173  : 	inline DASpawnPointClass *Find_Spawn_Point(const StringClass &Group) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		for (int i = 0;i < SpawnPoints.Count();i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Find_Spawn
$LN3@Find_Spawn:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Spawn:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QBEHXZ ; DynamicVectorClass<DASpawnPointClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@Find_Spawn

; 175  : 			if (SpawnPoints[i]->Get_Group() == Group) {

	mov	ecx, DWORD PTR _Group$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Group@DASpawnPointClass@@QBEABVStringClass@@XZ ; DASpawnPointClass::Get_Group
	mov	ecx, eax
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Find_Spawn

; 176  : 				return SpawnPoints[i];

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@PAVDASpawnPointClass@@@@QAEAAPAVDASpawnPointClass@@H@Z ; VectorClass<DASpawnPointClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN5@Find_Spawn
$LN1@Find_Spawn:

; 177  : 			}
; 178  : 		}

	jmp	SHORT $LN3@Find_Spawn
$LN2@Find_Spawn:

; 179  : 		return 0;

	xor	eax, eax
$LN5@Find_Spawn:

; 180  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Find_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@ABVStringClass@@@Z ENDP ; DASpawnManagerClass::Find_Spawn_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Create_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_SpawnPoint$ = -8					; size = 4
_this$ = -4						; size = 4
_INI$ = 8						; size = 4
_Header$ = 12						; size = 4
?Create_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z PROC ; DASpawnManagerClass::Create_Spawn_Point, COMDAT
; _this$ = ecx

; 167  : 	inline DASpawnPointClass *Create_Spawn_Point(const INIClass *INI,const StringClass &Header) {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		DASpawnPointClass *SpawnPoint = new DASpawnPointClass;

	push	OFFSET ??_C@_0CI@GLNDKKDP@DASpawnManagerClass?3?3Create_Spaw@
	push	168					; 000000a8H
	push	OFFSET ??_C@_0DK@FKAEAKEB@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create_Spa
	xor	ecx, ecx
	jne	SHORT $LN3@Create_Spa
	push	168					; 000000a8H
	push	OFFSET ??_C@_1HE@EBKBOLIB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create_Spa:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create_Spa
$LN6@Create_Spa:
	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create_Spa
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DASpawnPointClass@@AAE@XZ		; DASpawnPointClass::DASpawnPointClass
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create_Spa
$LN4@Create_Spa:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create_Spa:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create_Spa:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _SpawnPoint$[ebp], ecx

; 169  : 		SpawnPoint->Init(INI,Header);

	mov	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _INI$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _SpawnPoint$[ebp]
	call	?Init@DASpawnPointClass@@AAEXPBVINIClass@@ABVStringClass@@@Z ; DASpawnPointClass::Init

; 170  : 		SpawnPoints.Add(SpawnPoint);

	lea	eax, DWORD PTR _SpawnPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Add@?$DynamicVectorClass@PAVDASpawnPointClass@@@@QAE_NABQAVDASpawnPointClass@@@Z ; DynamicVectorClass<DASpawnPointClass *>::Add

; 171  : 		return SpawnPoint;

	mov	eax, DWORD PTR _SpawnPoint$[ebp]

; 172  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Create_Spawn_Point@DASpawnManagerClass@@QAEPAVDASpawnPointClass@@PBVINIClass@@ABVStringClass@@@Z ENDP ; DASpawnManagerClass::Create_Spawn_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$DASingleton@VDASpawnManagerClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$DASingleton@VDASpawnManagerClass@@@@QAEAAV0@ABV0@@Z PROC ; DASingleton<DASpawnManagerClass>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DASingleton@VDASpawnManagerClass@@@@QAEAAV0@ABV0@@Z ENDP ; DASingleton<DASpawnManagerClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ
_TEXT	SEGMENT
?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ PROC ; DASingleton<DASpawnManagerClass>::Get_Instance, COMDAT

; 507  : 	static inline T *Get_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 508  : 		return Instance;

	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDASpawnManagerClass@@@@0PAVDASpawnManagerClass@@A ; DASingleton<DASpawnManagerClass>::Instance

; 509  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ENDP ; DASingleton<DASpawnManagerClass>::Get_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Destroy_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAXXZ
_TEXT	SEGMENT
tv83 = -76						; size = 4
$T1 = -72						; size = 4
$T2 = -68						; size = 4
?Destroy_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAXXZ PROC ; DASingleton<DASpawnManagerClass>::Destroy_Instance, COMDAT

; 501  : 	static inline void Destroy_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 502  : 		if (Instance) {

	cmp	DWORD PTR ?Instance@?$DASingleton@VDASpawnManagerClass@@@@0PAVDASpawnManagerClass@@A, 0 ; DASingleton<DASpawnManagerClass>::Instance
	je	SHORT $LN2@Destroy_In

; 503  : 			delete Instance;

	push	OFFSET ??_C@_0DJ@DNLECMMC@DASingleton?$DMclass?5DASpawnManager@
	push	503					; 000001f7H
	push	OFFSET ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Destroy_In
	xor	ecx, ecx
	jne	SHORT $LN4@Destroy_In
	push	503					; 000001f7H
	push	OFFSET ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Destroy_In:
	jmp	SHORT $LN8@Destroy_In
$LN7@Destroy_In:
	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDASpawnManagerClass@@@@0PAVDASpawnManagerClass@@A ; DASingleton<DASpawnManagerClass>::Instance
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Destroy_In
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN8@Destroy_In
$LN5@Destroy_In:
	mov	DWORD PTR tv83[ebp], 0
$LN8@Destroy_In:

; 504  : 			Instance = 0;

	mov	DWORD PTR ?Instance@?$DASingleton@VDASpawnManagerClass@@@@0PAVDASpawnManagerClass@@A, 0 ; DASingleton<DASpawnManagerClass>::Instance
$LN2@Destroy_In:

; 505  : 		}
; 506  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAXXZ ENDP ; DASingleton<DASpawnManagerClass>::Destroy_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Create_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ
_TEXT	SEGMENT
tv78 = -76						; size = 4
tv80 = -72						; size = 4
$T1 = -68						; size = 4
?Create_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ PROC ; DASingleton<DASpawnManagerClass>::Create_Instance, COMDAT

; 495  : 	static inline T *Create_Instance() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 496  : 		if (!Instance) {

	cmp	DWORD PTR ?Instance@?$DASingleton@VDASpawnManagerClass@@@@0PAVDASpawnManagerClass@@A, 0 ; DASingleton<DASpawnManagerClass>::Instance
	jne	SHORT $LN1@Create_Ins

; 497  : 			Instance = new T;

	push	OFFSET ??_C@_0DI@JCPGKFAB@DASingleton?$DMclass?5DASpawnManager@
	push	497					; 000001f1H
	push	OFFSET ??_C@_0DE@DJEMIOEA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Create_Ins
	xor	ecx, ecx
	jne	SHORT $LN4@Create_Ins
	push	497					; 000001f1H
	push	OFFSET ??_C@_1GI@JPDACJJH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Create_Ins:
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN8@Create_Ins
$LN7@Create_Ins:
	push	112					; 00000070H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Create_Ins
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DASpawnManagerClass@@AAE@XZ		; DASpawnManagerClass::DASpawnManagerClass
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN6@Create_Ins
$LN5@Create_Ins:
	mov	DWORD PTR tv78[ebp], 0
$LN6@Create_Ins:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv80[ebp], eax
$LN8@Create_Ins:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR ?Instance@?$DASingleton@VDASpawnManagerClass@@@@0PAVDASpawnManagerClass@@A, ecx ; DASingleton<DASpawnManagerClass>::Instance
$LN1@Create_Ins:

; 498  : 		}
; 499  : 		return Instance;

	mov	eax, DWORD PTR ?Instance@?$DASingleton@VDASpawnManagerClass@@@@0PAVDASpawnManagerClass@@A ; DASingleton<DASpawnManagerClass>::Instance

; 500  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create_Instance@?$DASingleton@VDASpawnManagerClass@@@@SAPAVDASpawnManagerClass@@XZ ENDP ; DASingleton<DASpawnManagerClass>::Create_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_E?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_E?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAE@XZ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::~DAPlayerDataManagerClass<DASpawnPlayerDataClass>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAE@XZ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::~DAPlayerDataManagerClass<DASpawnPlayerDataClass>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_E?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAE@XZ ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::~DAPlayerDataManagerClass<DASpawnPlayerDataClass>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAEPAXI@Z ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAEAAV0@ABV0@@Z PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DAPlayerDataFactoryClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAEAAV0@ABV0@@Z ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@ABV0@@Z PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::DAPlayerDataManagerClass<DASpawnPlayerDataClass>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAPlayerDataFactoryClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@ABV0@@Z ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::DAPlayerDataManagerClass<DASpawnPlayerDataClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@XZ PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::DAPlayerDataManagerClass<DASpawnPlayerDataClass>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAPlayerDataFactoryClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QAE@XZ ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::DAPlayerDataManagerClass<DASpawnPlayerDataClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Create_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@EAEPAVDAPlayerDataClass@@XZ
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv82 = -80						; size = 4
$T1 = -76						; size = 4
_Data$ = -8						; size = 4
_this$ = -4						; size = 4
?Create_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@EAEPAVDAPlayerDataClass@@XZ PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Create_Data, COMDAT
; _this$ = ecx

; 425  : 	virtual DAPlayerDataClass *Create_Data() {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 426  : 		DAPlayerDataClass *Data = new T;

	push	OFFSET ??_C@_0EE@CDJABAN@DAPlayerDataManagerClass?$DMclass?5D@
	push	426					; 000001aaH
	push	OFFSET ??_C@_0DF@JCDNCPAG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create_Dat
	xor	ecx, ecx
	jne	SHORT $LN3@Create_Dat
	push	426					; 000001aaH
	push	OFFSET ??_C@_1GK@CICFBDGG@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create_Dat:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN7@Create_Dat
$LN6@Create_Dat:
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create_Dat
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DASpawnPlayerDataClass@@QAE@XZ
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@Create_Dat
$LN4@Create_Dat:
	mov	DWORD PTR tv80[ebp], 0
$LN5@Create_Dat:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN7@Create_Dat:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _Data$[ebp], ecx

; 427  : 		Data->Set_Factory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Data$[ebp]
	call	?Set_Factory@DAPlayerDataClass@@QAEXPBVDAPlayerDataFactoryClass@@@Z ; DAPlayerDataClass::Set_Factory

; 428  : 		return Data;

	mov	eax, DWORD PTR _Data$[ebp]

; 429  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@EAEPAVDAPlayerDataClass@@XZ ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Create_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Init@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@IAEXXZ PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Init, COMDAT
; _this$ = ecx

; 420  : 	inline void Init() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 421  : 		DAPlayerManager::Add_Data_Factory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Add_Data_Factory@DAPlayerManager@@SAXPAVDAPlayerDataFactoryClass@@@Z ; DAPlayerManager::Add_Data_Factory
	add	esp, 4

; 422  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@IAEXXZ ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVDAPlayerClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVDAPlayerClass@@@Z PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data, COMDAT
; _this$ = ecx

; 415  : 	inline T *Get_Player_Data(DAPlayerClass *Player) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 		return static_cast<T*>(Player->Find_Data(this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Player$[ebp]
	call	?Find_Data@DAPlayerClass@@QAEPAVDAPlayerDataClass@@PBVDAPlayerDataFactoryClass@@@Z ; DAPlayerClass::Find_Data

; 417  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVDAPlayerClass@@@Z ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVcPlayer@@@Z PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data, COMDAT
; _this$ = ecx

; 412  : 	inline T *Get_Player_Data(cPlayer *Player) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 		return static_cast<T*>(Player->Get_DA_Player()->Find_Data(this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Player$[ebp]
	call	?Get_DA_Player@cPlayer@@QAEPAVDAPlayerClass@@XZ ; cPlayer::Get_DA_Player
	mov	ecx, eax
	call	?Find_Data@DAPlayerClass@@QAEPAVDAPlayerDataClass@@PBVDAPlayerDataFactoryClass@@@Z ; DAPlayerClass::Find_Data

; 414  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVcPlayer@@@Z ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVScriptableGameObj@@@Z PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data, COMDAT
; _this$ = ecx

; 406  : 	inline T *Get_Player_Data(GameObject *obj) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 407  : 		if (Is_Player(obj)) {

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Is_Player@@YA_NPAVScriptableGameObj@@@Z ; Is_Player
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Get_Player

; 408  : 			return static_cast<T*>(((SoldierGameObj*)obj)->Get_Player()->Get_DA_Player()->Find_Data(this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_Player@SoldierGameObj@@QAEPAVcPlayer@@XZ ; SoldierGameObj::Get_Player
	mov	ecx, eax
	call	?Get_DA_Player@cPlayer@@QAEPAVDAPlayerClass@@XZ ; cPlayer::Get_DA_Player
	mov	ecx, eax
	call	?Find_Data@DAPlayerClass@@QAEPAVDAPlayerDataClass@@PBVDAPlayerDataFactoryClass@@@Z ; DAPlayerClass::Find_Data
	jmp	SHORT $LN2@Get_Player
$LN1@Get_Player:

; 409  : 		}
; 410  : 		return 0;

	xor	eax, eax
$LN2@Get_Player:

; 411  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@PAVScriptableGameObj@@@Z ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@H@Z
_TEXT	SEGMENT
_Player$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@H@Z PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data, COMDAT
; _this$ = ecx

; 399  : 	inline T *Get_Player_Data(int ID) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 400  : 		cPlayer *Player = Find_Player(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?Find_Player@@YAPAVcPlayer@@H@Z		; Find_Player
	add	esp, 4
	mov	DWORD PTR _Player$[ebp], eax

; 401  : 		if (Player) {

	cmp	DWORD PTR _Player$[ebp], 0
	je	SHORT $LN1@Get_Player

; 402  : 			return static_cast<T*>(Player->Get_DA_Player()->Find_Data(this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Player$[ebp]
	call	?Get_DA_Player@cPlayer@@QAEPAVDAPlayerClass@@XZ ; cPlayer::Get_DA_Player
	mov	ecx, eax
	call	?Find_Data@DAPlayerClass@@QAEPAVDAPlayerDataClass@@PBVDAPlayerDataFactoryClass@@@Z ; DAPlayerClass::Find_Data
	jmp	SHORT $LN2@Get_Player
$LN1@Get_Player:

; 403  : 		}
; 404  : 		return 0;

	xor	eax, eax
$LN2@Get_Player:

; 405  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Player_Data@?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@QBEPAVDASpawnPlayerDataClass@@H@Z ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::Get_Player_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ??1?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAE@XZ PROC ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::~DAPlayerDataManagerClass<DASpawnPlayerDataClass>, COMDAT
; _this$ = ecx

; 396  : 	virtual ~DAPlayerDataManagerClass() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@6B@

; 397  : 		DAPlayerManager::Remove_Data_Factory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Remove_Data_Factory@DAPlayerManager@@SAXPAVDAPlayerDataFactoryClass@@@Z ; DAPlayerManager::Remove_Data_Factory
	add	esp, 4

; 398  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAPlayerDataFactoryClass@@UAE@XZ	; DAPlayerDataFactoryClass::~DAPlayerDataFactoryClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DAPlayerDataManagerClass@VDASpawnPlayerDataClass@@@@UAE@XZ ENDP ; DAPlayerDataManagerClass<DASpawnPlayerDataClass>::~DAPlayerDataManagerClass<DASpawnPlayerDataClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDASpawnPointClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDASpawnPointClass@@UAEPAXI@Z PROC			; DASpawnPointClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DASpawnPointClass@@UAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	100					; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnPointClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDASpawnPointClass@@UAEPAXI@Z ENDP			; DASpawnPointClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDASpawnPointClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDASpawnPointClass@@UAEPAXI@Z PROC			; DASpawnPointClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnPointClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDASpawnPointClass@@UAEPAXI@Z ENDP			; DASpawnPointClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DASpawnPointClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DASpawnPointClass@@QAEAAV0@ABV0@@Z PROC		; DASpawnPointClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DAEventClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR [eax+12], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4?$DynamicVectorClass@VVector3@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<Vector3>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??4?$DynamicVectorClass@H@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<int>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DASpawnPointClass@@QAEAAV0@ABV0@@Z ENDP		; DASpawnPointClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DASpawnPointClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DASpawnPointClass@@QAE@ABV0@@Z PROC			; DASpawnPointClass::DASpawnPointClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAEventClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DASpawnPointClass@@6B@
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR [eax+12], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$DynamicVectorClass@VVector3@@@@QAE@ABV0@@Z ; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$DynamicVectorClass@H@@QAE@ABV0@@Z	; DynamicVectorClass<int>::DynamicVectorClass<int>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DASpawnPointClass@@QAE@ABV0@@Z ENDP			; DASpawnPointClass::DASpawnPointClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DASpawnPointClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DASpawnPointClass@@UAE@XZ PROC			; DASpawnPointClass::~DASpawnPointClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??1?$DynamicVectorClass@H@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$DynamicVectorClass@VVector3@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAEventClass@@UAE@XZ			; DAEventClass::~DAEventClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DASpawnPointClass@@UAE@XZ ENDP			; DASpawnPointClass::~DASpawnPointClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@H@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@H@@UAEPAXI@Z PROC		; DynamicVectorClass<int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@H@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@H@@UAEPAXI@Z ENDP		; DynamicVectorClass<int>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@H@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@H@@UAE@XZ PROC			; DynamicVectorClass<int>::~DynamicVectorClass<int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@H@@UAE@XZ		; VectorClass<int>::~VectorClass<int>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@H@@UAE@XZ ENDP			; DynamicVectorClass<int>::~DynamicVectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@H@@UAEHABH@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@H@@UAEHABH@Z PROC		; DynamicVectorClass<int>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@H@@QBEHXZ	; DynamicVectorClass<int>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@H@@UAEHABH@Z ENDP		; DynamicVectorClass<int>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@H@@UAEHPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@H@@UAEHPBH@Z PROC		; DynamicVectorClass<int>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@H@@UAEHPBH@Z		; VectorClass<int>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@H@@UAEHPBH@Z ENDP		; DynamicVectorClass<int>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete@?$DynamicVectorClass@H@@QAE_NH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$DynamicVectorClass@H@@QAE_NH@Z PROC		; DynamicVectorClass<int>::Delete, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		if (index < ActiveCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN4@Delete

; 446  : 		{
; 447  : 			ActiveCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 448  : 			for (int i = index; i < ActiveCount; i++)

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN3@Delete
$LN2@Delete:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Delete:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN1@Delete

; 449  : 			{
; 450  : 				(*this)[i] = std::move((*this)[i+1]);

	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	push	eax
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 451  : 			}

	jmp	SHORT $LN2@Delete
$LN1@Delete:

; 452  : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Delete
$LN4@Delete:

; 453  : 		}
; 454  : 		return false;

	xor	al, al
$LN5@Delete:

; 455  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$DynamicVectorClass@H@@QAE_NH@Z ENDP		; DynamicVectorClass<int>::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?DeleteObj@?$DynamicVectorClass@H@@QAE_NABH@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?DeleteObj@?$DynamicVectorClass@H@@QAE_NABH@Z PROC	; DynamicVectorClass<int>::DeleteObj, COMDAT
; _this$ = ecx

; 435  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 		int id = ID(object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR _id$[ebp], eax

; 437  : 		if (id != -1)

	cmp	DWORD PTR _id$[ebp], -1
	je	SHORT $LN1@DeleteObj

; 438  : 		{
; 439  : 			return Delete(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$DynamicVectorClass@H@@QAE_NH@Z ; DynamicVectorClass<int>::Delete
	jmp	SHORT $LN2@DeleteObj
$LN1@DeleteObj:

; 440  : 		}
; 441  : 		return false;

	xor	al, al
$LN2@DeleteObj:

; 442  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteObj@?$DynamicVectorClass@H@@QAE_NABH@Z ENDP	; DynamicVectorClass<int>::DeleteObj
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@H@@QAE_NABH@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@H@@QAE_NABH@Z PROC		; DynamicVectorClass<int>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@H@@QAE_NABH@Z ENDP		; DynamicVectorClass<int>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@H@@QBEHXZ PROC		; DynamicVectorClass<int>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@H@@QBEHXZ ENDP		; DynamicVectorClass<int>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@H@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@H@@UAEXXZ PROC		; DynamicVectorClass<int>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@H@@UAEXXZ		; VectorClass<int>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@H@@UAEXXZ ENDP		; DynamicVectorClass<int>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z PROC	; DynamicVectorClass<int>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@H@@UAE_NHPBH@Z	; VectorClass<int>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z ENDP	; DynamicVectorClass<int>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@H@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@H@@QAEAAV0@ABV0@@Z PROC		; DynamicVectorClass<int>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@H@@QAEAAV0@ABV0@@Z	; VectorClass<int>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@H@@QAEAAV0@ABV0@@Z ENDP		; DynamicVectorClass<int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@H@@QAE@ABV0@@Z PROC		; DynamicVectorClass<int>::DynamicVectorClass<int>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@H@@QAE@ABV0@@Z		; VectorClass<int>::VectorClass<int>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@H@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@H@@QAE@ABV0@@Z ENDP		; DynamicVectorClass<int>::DynamicVectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@H@@QAE@IPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@H@@QAE@IPBH@Z PROC		; DynamicVectorClass<int>::DynamicVectorClass<int>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@H@@QAE@HPBH@Z		; VectorClass<int>::VectorClass<int>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@H@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@H@@QAE@IPBH@Z ENDP		; DynamicVectorClass<int>::DynamicVectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@H@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@H@@UAEPAXI@Z PROC			; VectorClass<int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@H@@UAE@XZ		; VectorClass<int>::~VectorClass<int>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@H@@UAEPAXI@Z ENDP			; VectorClass<int>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@H@@UAEHABH@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@H@@UAEHABH@Z PROC			; VectorClass<int>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@H@@UAEHABH@Z ENDP			; VectorClass<int>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@H@@UAEHPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@H@@UAEHPBH@Z PROC			; VectorClass<int>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@H@@UAEHPBH@Z ENDP			; VectorClass<int>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@H@@QBEHXZ PROC			; VectorClass<int>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@H@@QBEHXZ ENDP			; VectorClass<int>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@H@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@H@@UAEXXZ PROC			; VectorClass<int>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0BI@DBAHDKIN@VectorClass?$DMint?$DO?3?3Clear?$AA@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@H@@UAEXXZ ENDP			; VectorClass<int>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@H@@UAE_NHPBH@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@H@@UAE_NHPBH@Z PROC		; VectorClass<int>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@H@@UAE_NHPBH@Z ENDP		; VectorClass<int>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@H@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@H@@UBE_NABV0@@Z PROC			; VectorClass<int>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@H@@QBEABHH@Z		; VectorClass<int>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@H@@UBE_NABV0@@Z ENDP			; VectorClass<int>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@H@@QBEABHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@H@@QBEABHH@Z PROC			; VectorClass<int>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@H@@QBEABHH@Z ENDP			; VectorClass<int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@H@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@H@@QAEAAHH@Z PROC			; VectorClass<int>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@H@@QAEAAHH@Z ENDP			; VectorClass<int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@H@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@H@@UAE@XZ PROC				; VectorClass<int>::~VectorClass<int>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@H@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@H@@UAEXXZ		; VectorClass<int>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@H@@UAE@XZ ENDP				; VectorClass<int>::~VectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@H@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@H@@QAEAAV0@ABV0@@Z PROC		; VectorClass<int>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0BN@BIKGHIDO@VectorClass?$DMint?$DO?3?3operator?5?$DN?$AA@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN11@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN12@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@H@@QBEABHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@H@@QAEAAV0@ABV0@@Z ENDP		; VectorClass<int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@H@@QAE@ABV0@@Z PROC			; VectorClass<int>::VectorClass<int>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@H@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@H@@QAEAAV0@ABV0@@Z	; VectorClass<int>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@H@@QAE@ABV0@@Z ENDP			; VectorClass<int>::VectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@H@@QAE@HPBH@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@H@@QAE@HPBH@Z PROC			; VectorClass<int>::VectorClass<int>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@H@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@H@@QAE@HPBH@Z ENDP			; VectorClass<int>::VectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@VVector3@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@VVector3@@@@UAEPAXI@Z PROC	; DynamicVectorClass<Vector3>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@VVector3@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@VVector3@@@@UAEPAXI@Z ENDP	; DynamicVectorClass<Vector3>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@VVector3@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@VVector3@@@@UAE@XZ PROC		; DynamicVectorClass<Vector3>::~DynamicVectorClass<Vector3>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@VVector3@@@@UAE@XZ	; VectorClass<Vector3>::~VectorClass<Vector3>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@VVector3@@@@UAE@XZ ENDP		; DynamicVectorClass<Vector3>::~DynamicVectorClass<Vector3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@VVector3@@@@UAEHABVVector3@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@VVector3@@@@UAEHABVVector3@@@Z PROC ; DynamicVectorClass<Vector3>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@VVector3@@@@QBEHXZ ; DynamicVectorClass<Vector3>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VVector3@@@@QAEAAVVector3@@H@Z ; VectorClass<Vector3>::operator[]
	push	eax
	call	??8@YA_NABVVector3@@0@Z			; operator==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@VVector3@@@@UAEHABVVector3@@@Z ENDP ; DynamicVectorClass<Vector3>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@VVector3@@@@UAEHPBVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@VVector3@@@@UAEHPBVVector3@@@Z PROC ; DynamicVectorClass<Vector3>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@VVector3@@@@UAEHPBVVector3@@@Z ; VectorClass<Vector3>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@VVector3@@@@UAEHPBVVector3@@@Z ENDP ; DynamicVectorClass<Vector3>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@VVector3@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@VVector3@@@@QBEHXZ PROC	; DynamicVectorClass<Vector3>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@VVector3@@@@QBEHXZ ENDP	; DynamicVectorClass<Vector3>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@VVector3@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@VVector3@@@@UAEXXZ PROC	; DynamicVectorClass<Vector3>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@VVector3@@@@UAEXXZ	; VectorClass<Vector3>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@VVector3@@@@UAEXXZ ENDP	; DynamicVectorClass<Vector3>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z PROC ; DynamicVectorClass<Vector3>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z ; VectorClass<Vector3>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VVector3@@@@QBEHXZ ; VectorClass<Vector3>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VVector3@@@@QBEHXZ ; VectorClass<Vector3>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z ENDP ; DynamicVectorClass<Vector3>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@VVector3@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@VVector3@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<Vector3>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@VVector3@@@@QAEAAV0@ABV0@@Z ; VectorClass<Vector3>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@VVector3@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<Vector3>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@VVector3@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@VVector3@@@@QAE@ABV0@@Z PROC	; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@VVector3@@@@QAE@ABV0@@Z ; VectorClass<Vector3>::VectorClass<Vector3>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@VVector3@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@VVector3@@@@QAE@ABV0@@Z ENDP	; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@VVector3@@@@QAE@IPBVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@VVector3@@@@QAE@IPBVVector3@@@Z PROC ; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@VVector3@@@@QAE@HPBVVector3@@@Z ; VectorClass<Vector3>::VectorClass<Vector3>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@VVector3@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@VVector3@@@@QAE@IPBVVector3@@@Z ENDP ; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@VVector3@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@VVector3@@@@UAEPAXI@Z PROC		; VectorClass<Vector3>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@VVector3@@@@UAE@XZ	; VectorClass<Vector3>::~VectorClass<Vector3>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@VVector3@@@@UAEPAXI@Z ENDP		; VectorClass<Vector3>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@VVector3@@@@UAEHABVVector3@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@VVector3@@@@UAEHABVVector3@@@Z PROC	; VectorClass<Vector3>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VVector3@@@@QAEAAVVector3@@H@Z ; VectorClass<Vector3>::operator[]
	push	eax
	call	??8@YA_NABVVector3@@0@Z			; operator==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@VVector3@@@@UAEHABVVector3@@@Z ENDP	; VectorClass<Vector3>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@VVector3@@@@UAEHPBVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@VVector3@@@@UAEHPBVVector3@@@Z PROC	; VectorClass<Vector3>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VVector3@@@@QAEAAVVector3@@H@Z ; VectorClass<Vector3>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	xor	edx, edx
	mov	ecx, 12					; 0000000cH
	div	ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@VVector3@@@@UAEHPBVVector3@@@Z ENDP	; VectorClass<Vector3>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@VVector3@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@VVector3@@@@QBEHXZ PROC		; VectorClass<Vector3>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@VVector3@@@@QBEHXZ ENDP		; VectorClass<Vector3>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@VVector3@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@VVector3@@@@UAEXXZ PROC		; VectorClass<Vector3>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CC@HGKCMNMN@VectorClass?$DMclass?5Vector3?$DO?3?3Clea@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@VVector3@@@@UAEXXZ ENDP		; VectorClass<Vector3>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z
_TEXT	SEGMENT
tv143 = -108						; size = 4
tv87 = -108						; size = 4
tv186 = -104						; size = 4
tv153 = -104						; size = 4
tv145 = -104						; size = 4
tv89 = -104						; size = 4
$T1 = -100						; size = 4
$T2 = -96						; size = 4
$T3 = -92						; size = 4
$T4 = -88						; size = 4
$T5 = -84						; size = 4
_index$6 = -16						; size = 4
_copycount$7 = -12					; size = 4
_newptr$8 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z PROC ; VectorClass<Vector3>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	$LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CD@DPIIFOOF@VectorClass?$DMclass?5Vector3?$DO?3?3Resi@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN16@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN17@Resize
$LN16@Resize:
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN14@Resize
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	mov	DWORD PTR tv87[ebp], 0
$LN15@Resize:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN17@Resize:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _newptr$8[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	$LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CD@DPIIFOOF@VectorClass?$DMclass?5Vector3?$DO?3?3Resi@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN21@Resize
	xor	ecx, ecx
	jne	SHORT $LN18@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN18@Resize:
	mov	DWORD PTR tv145[ebp], 0
	jmp	SHORT $LN22@Resize
$LN21@Resize:
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _array$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN19@Resize
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	DWORD PTR tv143[ebp], 0
$LN20@Resize:
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv145[ebp], eax
$LN22@Resize:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _newptr$8[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$8[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN23@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv153[ebp], edx
	jmp	SHORT $LN24@Resize
$LN23@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv153[ebp], ecx
$LN24@Resize:
	mov	edx, DWORD PTR tv153[ebp]
	mov	DWORD PTR _copycount$7[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$6[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$6[ebp]
	add	eax, 1
	mov	DWORD PTR _index$6[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$6[ebp]
	cmp	eax, DWORD PTR _copycount$7[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _index$6[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	call	??$move@AAVVector3@@@std@@YA$$QAVVector3@@AAV1@@Z ; std::move<Vector3 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _index$6[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _newptr$8[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CD@DPIIFOOF@VectorClass?$DMclass?5Vector3?$DO?3?3Resi@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN26@Resize
	xor	ecx, ecx
	jne	SHORT $LN25@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN25@Resize:
	jmp	SHORT $LN27@Resize
$LN26@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN27@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$8[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN28@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN28@Resize
	mov	DWORD PTR tv186[ebp], 1
	jmp	SHORT $LN29@Resize
$LN28@Resize:
	mov	DWORD PTR tv186[ebp], 0
$LN29@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv186[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@VVector3@@@@UAE_NHPBVVector3@@@Z ENDP ; VectorClass<Vector3>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@VVector3@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@VVector3@@@@UBE_NABV0@@Z PROC		; VectorClass<Vector3>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@VVector3@@@@QBEHXZ ; VectorClass<Vector3>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@VVector3@@@@QBEABVVector3@@H@Z ; VectorClass<Vector3>::operator[]
	push	eax
	mov	ecx, DWORD PTR _index$1[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	call	??9@YA_NABVVector3@@0@Z			; operator!=
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@VVector3@@@@UBE_NABV0@@Z ENDP		; VectorClass<Vector3>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@VVector3@@@@QBEABVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@VVector3@@@@QBEABVVector3@@H@Z PROC	; VectorClass<Vector3>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@VVector3@@@@QBEABVVector3@@H@Z ENDP	; VectorClass<Vector3>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@VVector3@@@@QAEAAVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@VVector3@@@@QAEAAVVector3@@H@Z PROC	; VectorClass<Vector3>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@VVector3@@@@QAEAAVVector3@@H@Z ENDP	; VectorClass<Vector3>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@VVector3@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@VVector3@@@@UAE@XZ PROC		; VectorClass<Vector3>::~VectorClass<Vector3>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@VVector3@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@VVector3@@@@UAEXXZ	; VectorClass<Vector3>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@VVector3@@@@UAE@XZ ENDP		; VectorClass<Vector3>::~VectorClass<Vector3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@VVector3@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv95 = -88						; size = 4
tv129 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_index$3 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@VVector3@@@@QAEAAV0@ABV0@@Z PROC	; VectorClass<Vector3>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@VVector3@@@@QBEHXZ ; VectorClass<Vector3>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0CH@DLGPEICA@VectorClass?$DMclass?5Vector3?$DO?3?3oper@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN14@operator
$LN13@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN11@operator
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN12@operator
$LN11@operator:
	mov	DWORD PTR tv95[ebp], 0
$LN12@operator:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv129[ebp], eax
$LN14@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$3[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$3[ebp]
	add	eax, 1
	mov	DWORD PTR _index$3[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@VVector3@@@@QBEABVVector3@@H@Z ; VectorClass<Vector3>::operator[]
	push	eax
	mov	ecx, DWORD PTR _index$3[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@VVector3@@@@QAEAAV0@ABV0@@Z ENDP	; VectorClass<Vector3>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@VVector3@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@VVector3@@@@QAE@ABV0@@Z PROC		; VectorClass<Vector3>::VectorClass<Vector3>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@VVector3@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@VVector3@@@@QAEAAV0@ABV0@@Z ; VectorClass<Vector3>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@VVector3@@@@QAE@ABV0@@Z ENDP		; VectorClass<Vector3>::VectorClass<Vector3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@VVector3@@@@QAE@HPBVVector3@@@Z
_TEXT	SEGMENT
tv149 = -92						; size = 4
tv93 = -92						; size = 4
tv151 = -88						; size = 4
tv95 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
$T3 = -76						; size = 4
$T4 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@VVector3@@@@QAE@HPBVVector3@@@Z PROC	; VectorClass<Vector3>::VectorClass<Vector3>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@VVector3@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	$LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0CI@JHCKFMFA@VectorClass?$DMclass?5Vector3?$DO?3?3Vect@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN10@VectorClas
$LN9@VectorClas:
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _array$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@VectorClas
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	DWORD PTR tv93[ebp], 0
$LN8@VectorClas:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR tv95[ebp], eax
$LN10@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	$LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0CI@JHCKFMFA@VectorClass?$DMclass?5Vector3?$DO?3?3Vect@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN11@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@VectorClas:
	mov	DWORD PTR tv151[ebp], 0
	jmp	SHORT $LN15@VectorClas
$LN14@VectorClas:
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN12@VectorClas
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN13@VectorClas
$LN12@VectorClas:
	mov	DWORD PTR tv149[ebp], 0
$LN13@VectorClas:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR tv151[ebp], eax
$LN15@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@VVector3@@@@QAE@HPBVVector3@@@Z ENDP	; VectorClass<Vector3>::VectorClass<Vector3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ??0DASpawnPointClass@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DASpawnPointClass@@AAE@XZ PROC			; DASpawnPointClass::DASpawnPointClass, COMDAT
; _this$ = ecx

; 143  : 	DASpawnPointClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAEventClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DASpawnPointClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$DynamicVectorClass@VVector3@@@@QAE@IPBVVector3@@@Z ; DynamicVectorClass<Vector3>::DynamicVectorClass<Vector3>
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$DynamicVectorClass@H@@QAE@IPBH@Z	; DynamicVectorClass<int>::DynamicVectorClass<int>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DASpawnPointClass@@AAE@XZ ENDP			; DASpawnPointClass::DASpawnPointClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Remove_Spawn_List@DASpawnPointClass@@AAE_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Remove_Spawn_List@DASpawnPointClass@@AAE_NPAVScriptableGameObj@@@Z PROC ; DASpawnPointClass::Remove_Spawn_List, COMDAT
; _this$ = ecx

; 139  : 	inline bool Remove_Spawn_List(GameObject *obj) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		return SpawnList.DeleteObj(Get_Player_ID(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Player_ID@@YAJPAVScriptableGameObj@@@Z ; Get_Player_ID
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?DeleteObj@?$DynamicVectorClass@H@@QAE_NABH@Z ; DynamicVectorClass<int>::DeleteObj

; 141  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_Spawn_List@DASpawnPointClass@@AAE_NPAVScriptableGameObj@@@Z ENDP ; DASpawnPointClass::Remove_Spawn_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Remove_Spawn_List@DASpawnPointClass@@AAE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Remove_Spawn_List@DASpawnPointClass@@AAE_NH@Z PROC	; DASpawnPointClass::Remove_Spawn_List, COMDAT
; _this$ = ecx

; 136  : 	inline bool Remove_Spawn_List(int ID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		return SpawnList.DeleteObj(ID);

	lea	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?DeleteObj@?$DynamicVectorClass@H@@QAE_NABH@Z ; DynamicVectorClass<int>::DeleteObj

; 138  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_Spawn_List@DASpawnPointClass@@AAE_NH@Z ENDP	; DASpawnPointClass::Remove_Spawn_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Is_In_Spawn_List@DASpawnPointClass@@AAE_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Is_In_Spawn_List@DASpawnPointClass@@AAE_NPAVScriptableGameObj@@@Z PROC ; DASpawnPointClass::Is_In_Spawn_List, COMDAT
; _this$ = ecx

; 133  : 	inline bool Is_In_Spawn_List(GameObject *obj) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		return Is_In_Spawn_List(Get_Player_ID(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Player_ID@@YAJPAVScriptableGameObj@@@Z ; Get_Player_ID
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_In_Spawn_List@DASpawnPointClass@@AAE_NH@Z ; DASpawnPointClass::Is_In_Spawn_List

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_In_Spawn_List@DASpawnPointClass@@AAE_NPAVScriptableGameObj@@@Z ENDP ; DASpawnPointClass::Is_In_Spawn_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Is_In_Spawn_List@DASpawnPointClass@@AAE_NH@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Is_In_Spawn_List@DASpawnPointClass@@AAE_NH@Z PROC	; DASpawnPointClass::Is_In_Spawn_List, COMDAT
; _this$ = ecx

; 130  : 	inline bool Is_In_Spawn_List(int ID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 		return (SpawnList.ID(ID) != -1);

	lea	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	eax, -1
	je	SHORT $LN3@Is_In_Spaw
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Is_In_Spaw
$LN3@Is_In_Spaw:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Is_In_Spaw:
	mov	al, BYTE PTR tv76[ebp]

; 132  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_In_Spawn_List@DASpawnPointClass@@AAE_NH@Z ENDP	; DASpawnPointClass::Is_In_Spawn_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Dec_Priority@DASpawnPointClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Dec_Priority@DASpawnPointClass@@QAEXXZ PROC		; DASpawnPointClass::Dec_Priority, COMDAT
; _this$ = ecx

; 108  : 	inline void Dec_Priority() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 		Priority--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 110  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Dec_Priority@DASpawnPointClass@@QAEXXZ ENDP		; DASpawnPointClass::Dec_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Inc_Priority@DASpawnPointClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Inc_Priority@DASpawnPointClass@@QAEXXZ PROC		; DASpawnPointClass::Inc_Priority, COMDAT
; _this$ = ecx

; 105  : 	inline void Inc_Priority() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 		Priority++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inc_Priority@DASpawnPointClass@@QAEXXZ ENDP		; DASpawnPointClass::Inc_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Set_Priority@DASpawnPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_priority$ = 8						; size = 4
?Set_Priority@DASpawnPointClass@@QAEXH@Z PROC		; DASpawnPointClass::Set_Priority, COMDAT
; _this$ = ecx

; 102  : 	inline void Set_Priority(int priority) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		Priority = priority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Priority@DASpawnPointClass@@QAEXH@Z ENDP		; DASpawnPointClass::Set_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Priority@DASpawnPointClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Priority@DASpawnPointClass@@QBEHXZ PROC		; DASpawnPointClass::Get_Priority, COMDAT
; _this$ = ecx

; 99   : 	inline int Get_Priority() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return Priority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]

; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Priority@DASpawnPointClass@@QBEHXZ ENDP		; DASpawnPointClass::Get_Priority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Set_Protect_Time@DASpawnPointClass@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 4
?Set_Protect_Time@DASpawnPointClass@@QAEXM@Z PROC	; DASpawnPointClass::Set_Protect_Time, COMDAT
; _this$ = ecx

; 96   : 	inline void Set_Protect_Time(float time) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		ProtectTime = time;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _time$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Protect_Time@DASpawnPointClass@@QAEXM@Z ENDP	; DASpawnPointClass::Set_Protect_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Protect_Time@DASpawnPointClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Protect_Time@DASpawnPointClass@@QBEMXZ PROC	; DASpawnPointClass::Get_Protect_Time, COMDAT
; _this$ = ecx

; 93   : 	inline float Get_Protect_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 		return ProtectTime;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]

; 95   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Protect_Time@DASpawnPointClass@@QBEMXZ ENDP	; DASpawnPointClass::Get_Protect_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Base_Spawn_Time@DASpawnPointClass@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Base_Spawn_Time@DASpawnPointClass@@QBEIXZ PROC	; DASpawnPointClass::Get_Base_Spawn_Time, COMDAT
; _this$ = ecx

; 90   : 	inline unsigned int Get_Base_Spawn_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 		return BaseSpawnTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Base_Spawn_Time@DASpawnPointClass@@QBEIXZ ENDP	; DASpawnPointClass::Get_Base_Spawn_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Spawn_Time@DASpawnPointClass@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Spawn_Time@DASpawnPointClass@@QBEIXZ PROC		; DASpawnPointClass::Get_Spawn_Time, COMDAT
; _this$ = ecx

; 87   : 	inline unsigned int Get_Spawn_Time() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		return SpawnTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Spawn_Time@DASpawnPointClass@@QBEIXZ ENDP		; DASpawnPointClass::Get_Spawn_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Set_Spawn_Time@DASpawnPointClass@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 4
?Set_Spawn_Time@DASpawnPointClass@@QAEXI@Z PROC		; DASpawnPointClass::Set_Spawn_Time, COMDAT
; _this$ = ecx

; 83   : 	inline void Set_Spawn_Time(unsigned int time) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 		SpawnTime = time;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _time$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 85   : 		Check_Spawn_List();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Check_Spawn_List@DASpawnPointClass@@AAEXXZ ; DASpawnPointClass::Check_Spawn_List

; 86   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Spawn_Time@DASpawnPointClass@@QAEXI@Z ENDP		; DASpawnPointClass::Set_Spawn_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Name@DASpawnPointClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@DASpawnPointClass@@QBEABVStringClass@@XZ PROC	; DASpawnPointClass::Get_Name, COMDAT
; _this$ = ecx

; 80   : 	inline const StringClass &Get_Name() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		return Name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 82   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@DASpawnPointClass@@QBEABVStringClass@@XZ ENDP	; DASpawnPointClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Group@DASpawnPointClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Group@DASpawnPointClass@@QBEABVStringClass@@XZ PROC ; DASpawnPointClass::Get_Group, COMDAT
; _this$ = ecx

; 77   : 	inline const StringClass &Get_Group() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 		return Group;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 79   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Group@DASpawnPointClass@@QBEABVStringClass@@XZ ENDP ; DASpawnPointClass::Get_Group
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Team@DASpawnPointClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Team@DASpawnPointClass@@QBEHXZ PROC		; DASpawnPointClass::Get_Team, COMDAT
; _this$ = ecx

; 74   : 	inline int Get_Team() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		return Team;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 76   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Team@DASpawnPointClass@@QBEHXZ ENDP		; DASpawnPointClass::Get_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Set_Team@DASpawnPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_team$ = 8						; size = 4
?Set_Team@DASpawnPointClass@@QAEXH@Z PROC		; DASpawnPointClass::Set_Team, COMDAT
; _this$ = ecx

; 70   : 	inline void Set_Team(int team) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Team = team;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _team$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 72   : 		Clear_Spawn_List_Find_New_Spawn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Spawn_List_Find_New_Spawn@DASpawnPointClass@@QAEXXZ ; DASpawnPointClass::Clear_Spawn_List_Find_New_Spawn

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Team@DASpawnPointClass@@QAEXH@Z ENDP		; DASpawnPointClass::Set_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Is_Enabled@DASpawnPointClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Enabled@DASpawnPointClass@@QBE_NXZ PROC		; DASpawnPointClass::Is_Enabled, COMDAT
; _this$ = ecx

; 67   : 	inline bool Is_Enabled() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 		return Enable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+12]

; 69   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Enabled@DASpawnPointClass@@QBE_NXZ ENDP		; DASpawnPointClass::Is_Enabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Set_Enabled@DASpawnPointClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_enable$ = 8						; size = 1
?Set_Enabled@DASpawnPointClass@@QAEX_N@Z PROC		; DASpawnPointClass::Set_Enabled, COMDAT
; _this$ = ecx

; 61   : 	inline void Set_Enabled(bool enable) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		Enable = enable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _enable$[ebp]
	mov	BYTE PTR [eax+12], cl

; 63   : 		if (!Enable) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN2@Set_Enable

; 64   : 			Clear_Spawn_List_Find_New_Spawn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Spawn_List_Find_New_Spawn@DASpawnPointClass@@QAEXXZ ; DASpawnPointClass::Clear_Spawn_List_Find_New_Spawn
$LN2@Set_Enable:

; 65   : 		}
; 66   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Enabled@DASpawnPointClass@@QAEX_N@Z ENDP		; DASpawnPointClass::Set_Enabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Spawners@DASpawnPointClass@@QBEABV?$DynamicVectorClass@VVector3@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Spawners@DASpawnPointClass@@QBEABV?$DynamicVectorClass@VVector3@@@@XZ PROC ; DASpawnPointClass::Get_Spawners, COMDAT
; _this$ = ecx

; 58   : 	inline const DynamicVectorClass<Vector3> &Get_Spawners() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		return Spawners;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H

; 60   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Spawners@DASpawnPointClass@@QBEABV?$DynamicVectorClass@VVector3@@@@XZ ENDP ; DASpawnPointClass::Get_Spawners
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Get_Center_Point@DASpawnPointClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Center_Point@DASpawnPointClass@@QBEABVVector3@@XZ PROC ; DASpawnPointClass::Get_Center_Point, COMDAT
; _this$ = ecx

; 55   : 	inline const Vector3 &Get_Center_Point() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return CenterPoint;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Center_Point@DASpawnPointClass@@QBEABVVector3@@XZ ENDP ; DASpawnPointClass::Get_Center_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Set_Center_Point@DASpawnPointClass@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Pos$ = 8						; size = 4
?Set_Center_Point@DASpawnPointClass@@QAEXABVVector3@@@Z PROC ; DASpawnPointClass::Set_Center_Point, COMDAT
; _this$ = ecx

; 52   : 	inline void Set_Center_Point(const Vector3 &Pos) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		CenterPoint = Pos;

	mov	eax, DWORD PTR _Pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 54   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Center_Point@DASpawnPointClass@@QAEXABVVector3@@@Z ENDP ; DASpawnPointClass::Set_Center_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDASpawnPlayerDataClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDASpawnPlayerDataClass@@UAEPAXI@Z PROC		; DASpawnPlayerDataClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DASpawnPlayerDataClass@@UAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnPlayerDataClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDASpawnPlayerDataClass@@UAEPAXI@Z ENDP		; DASpawnPlayerDataClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDASpawnPlayerDataClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDASpawnPlayerDataClass@@UAEPAXI@Z PROC		; DASpawnPlayerDataClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DASpawnPlayerDataClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDASpawnPlayerDataClass@@UAEPAXI@Z ENDP		; DASpawnPlayerDataClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DASpawnPlayerDataClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DASpawnPlayerDataClass@@QAEAAV0@ABV0@@Z PROC		; DASpawnPlayerDataClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DAPlayerDataClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DASpawnPlayerDataClass@@QAEAAV0@ABV0@@Z ENDP		; DASpawnPlayerDataClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DASpawnPlayerDataClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DASpawnPlayerDataClass@@QAE@ABV0@@Z PROC		; DASpawnPlayerDataClass::DASpawnPlayerDataClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAPlayerDataClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DASpawnPlayerDataClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DASpawnPlayerDataClass@@QAE@ABV0@@Z ENDP		; DASpawnPlayerDataClass::DASpawnPlayerDataClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DASpawnPlayerDataClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DASpawnPlayerDataClass@@UAE@XZ PROC			; DASpawnPlayerDataClass::~DASpawnPlayerDataClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAPlayerDataClass@@UAE@XZ		; DAPlayerDataClass::~DAPlayerDataClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DASpawnPlayerDataClass@@UAE@XZ ENDP			; DASpawnPlayerDataClass::~DASpawnPlayerDataClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DASpawnPlayerDataClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DASpawnPlayerDataClass@@QAE@XZ PROC			; DASpawnPlayerDataClass::DASpawnPlayerDataClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DAPlayerDataClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DASpawnPlayerDataClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DASpawnPlayerDataClass@@QAE@XZ ENDP			; DASpawnPlayerDataClass::DASpawnPlayerDataClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_spawnsystem.h
;	COMDAT ?Init@DASpawnPlayerDataClass@@EAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
?Init@DASpawnPlayerDataClass@@EAEXXZ PROC		; DASpawnPlayerDataClass::Init, COMDAT
; _this$ = ecx

; 33   : 	virtual void Init() {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 		SpawnState = DASpawnState::DEAD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 35   : 		DeathTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 36   : 		DeathPosition = Vector3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 37   : 		NextSpawnLocation = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 38   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@DASpawnPlayerDataClass@@EAEXXZ ENDP		; DASpawnPlayerDataClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DASettingsManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DASettingsManager@@QAEAAV0@ABV0@@Z PROC		; DASettingsManager::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DASettingsManager@@QAEAAV0@ABV0@@Z ENDP		; DASettingsManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DASettingsClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DASettingsClass@@QAEAAV0@ABV0@@Z PROC		; DASettingsClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DASettingsClass@@QAEAAV0@ABV0@@Z ENDP		; DASettingsClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDAPlayerDataClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDAPlayerDataClass@@UAEPAXI@Z PROC			; DAPlayerDataClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DAPlayerDataClass@@UAE@XZ	; DAPlayerDataClass::~DAPlayerDataClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAPlayerDataClass@@UAE@XZ		; DAPlayerDataClass::~DAPlayerDataClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDAPlayerDataClass@@UAEPAXI@Z ENDP			; DAPlayerDataClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAPlayerDataClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAPlayerDataClass@@UAEPAXI@Z PROC			; DAPlayerDataClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAPlayerDataClass@@UAE@XZ		; DAPlayerDataClass::~DAPlayerDataClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAPlayerDataClass@@UAEPAXI@Z ENDP			; DAPlayerDataClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DAPlayerDataClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DAPlayerDataClass@@QAEAAV0@ABV0@@Z PROC		; DAPlayerDataClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DAPlayerDataClass@@QAEAAV0@ABV0@@Z ENDP		; DAPlayerDataClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAPlayerDataClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DAPlayerDataClass@@QAE@ABV0@@Z PROC			; DAPlayerDataClass::DAPlayerDataClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerDataClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DAPlayerDataClass@@QAE@ABV0@@Z ENDP			; DAPlayerDataClass::DAPlayerDataClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAPlayerDataClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAPlayerDataClass@@QAE@XZ PROC			; DAPlayerDataClass::DAPlayerDataClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerDataClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAPlayerDataClass@@QAE@XZ ENDP			; DAPlayerDataClass::DAPlayerDataClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Clear_Session@DAPlayerDataClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear_Session@DAPlayerDataClass@@UAEXXZ PROC		; DAPlayerDataClass::Clear_Session, COMDAT
; _this$ = ecx

; 387  : 	virtual void Clear_Session() { };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Session@DAPlayerDataClass@@UAEXXZ ENDP		; DAPlayerDataClass::Clear_Session
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Clear_Level@DAPlayerDataClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear_Level@DAPlayerDataClass@@UAEXXZ PROC		; DAPlayerDataClass::Clear_Level, COMDAT
; _this$ = ecx

; 386  : 	virtual void Clear_Level() { };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Level@DAPlayerDataClass@@UAEXXZ ENDP		; DAPlayerDataClass::Clear_Level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Init@DAPlayerDataClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@DAPlayerDataClass@@UAEXXZ PROC			; DAPlayerDataClass::Init, COMDAT
; _this$ = ecx

; 385  : 	virtual void Init() { };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@DAPlayerDataClass@@UAEXXZ ENDP			; DAPlayerDataClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Team@DAPlayerDataClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Team@DAPlayerDataClass@@QAEHXZ PROC		; DAPlayerDataClass::Get_Team, COMDAT
; _this$ = ecx

; 382  : 	inline int Get_Team() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 383  : 		return Get_Owner()->Get_Player_Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerDataClass@@QAEPAVcPlayer@@XZ ; DAPlayerDataClass::Get_Owner
	mov	ecx, eax
	call	?Get_Player_Type@cPlayer@@QBEHXZ	; cPlayer::Get_Player_Type

; 384  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Team@DAPlayerDataClass@@QAEHXZ ENDP		; DAPlayerDataClass::Get_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_GameObj@DAPlayerDataClass@@QAEPAVSoldierGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_GameObj@DAPlayerDataClass@@QAEPAVSoldierGameObj@@XZ PROC ; DAPlayerDataClass::Get_GameObj, COMDAT
; _this$ = ecx

; 379  : 	inline SoldierGameObj *Get_GameObj() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		return Get_Owner()->Get_GameObj();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerDataClass@@QAEPAVcPlayer@@XZ ; DAPlayerDataClass::Get_Owner
	mov	ecx, eax
	call	?Get_GameObj@cPlayer@@QBEPAVSoldierGameObj@@XZ ; cPlayer::Get_GameObj

; 381  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_GameObj@DAPlayerDataClass@@QAEPAVSoldierGameObj@@XZ ENDP ; DAPlayerDataClass::Get_GameObj
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Name@DAPlayerDataClass@@QAEABVWideStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@DAPlayerDataClass@@QAEABVWideStringClass@@XZ PROC ; DAPlayerDataClass::Get_Name, COMDAT
; _this$ = ecx

; 376  : 	inline const WideStringClass &Get_Name() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return Get_Owner()->Get_Name();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerDataClass@@QAEPAVcPlayer@@XZ ; DAPlayerDataClass::Get_Owner
	mov	ecx, eax
	call	?Get_Name@cPlayer@@QBEABVWideStringClass@@XZ ; cPlayer::Get_Name

; 378  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@DAPlayerDataClass@@QAEABVWideStringClass@@XZ ENDP ; DAPlayerDataClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_ID@DAPlayerDataClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@DAPlayerDataClass@@QAEHXZ PROC			; DAPlayerDataClass::Get_ID, COMDAT
; _this$ = ecx

; 373  : 	inline int Get_ID() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 		return Get_Owner()->Get_Id();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerDataClass@@QAEPAVcPlayer@@XZ ; DAPlayerDataClass::Get_Owner
	mov	ecx, eax
	call	?Get_Id@cPlayer@@QBEHXZ			; cPlayer::Get_Id

; 375  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@DAPlayerDataClass@@QAEHXZ ENDP			; DAPlayerDataClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Set_Factory@DAPlayerDataClass@@QAEXPBVDAPlayerDataFactoryClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Fac$ = 8						; size = 4
?Set_Factory@DAPlayerDataClass@@QAEXPBVDAPlayerDataFactoryClass@@@Z PROC ; DAPlayerDataClass::Set_Factory, COMDAT
; _this$ = ecx

; 370  : 	inline void Set_Factory(const DAPlayerDataFactoryClass *Fac) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 371  : 		Factory = Fac;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Fac$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 372  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Factory@DAPlayerDataClass@@QAEXPBVDAPlayerDataFactoryClass@@@Z ENDP ; DAPlayerDataClass::Set_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Factory@DAPlayerDataClass@@QAEPBVDAPlayerDataFactoryClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Factory@DAPlayerDataClass@@QAEPBVDAPlayerDataFactoryClass@@XZ PROC ; DAPlayerDataClass::Get_Factory, COMDAT
; _this$ = ecx

; 367  : 	inline const DAPlayerDataFactoryClass *Get_Factory() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 368  : 		return Factory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 369  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Factory@DAPlayerDataClass@@QAEPBVDAPlayerDataFactoryClass@@XZ ENDP ; DAPlayerDataClass::Get_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Set_Owner@DAPlayerDataClass@@QAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Set_Owner@DAPlayerDataClass@@QAEXPAVcPlayer@@@Z PROC	; DAPlayerDataClass::Set_Owner, COMDAT
; _this$ = ecx

; 364  : 	inline void Set_Owner(cPlayer *Player) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 365  : 		Owner = Player;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Player$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 366  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Owner@DAPlayerDataClass@@QAEXPAVcPlayer@@@Z ENDP	; DAPlayerDataClass::Set_Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Owner@DAPlayerDataClass@@QAEPAVcPlayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Owner@DAPlayerDataClass@@QAEPAVcPlayer@@XZ PROC	; DAPlayerDataClass::Get_Owner, COMDAT
; _this$ = ecx

; 361  : 	inline cPlayer *Get_Owner() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 		return Owner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 363  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Owner@DAPlayerDataClass@@QAEPAVcPlayer@@XZ ENDP	; DAPlayerDataClass::Get_Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ??1DAPlayerDataClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAPlayerDataClass@@UAE@XZ PROC			; DAPlayerDataClass::~DAPlayerDataClass, COMDAT
; _this$ = ecx

; 360  : 	virtual ~DAPlayerDataClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerDataClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAPlayerDataClass@@UAE@XZ ENDP			; DAPlayerDataClass::~DAPlayerDataClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDAPlayerDataFactoryClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDAPlayerDataFactoryClass@@UAEPAXI@Z PROC		; DAPlayerDataFactoryClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DAPlayerDataFactoryClass@@UAE@XZ ; DAPlayerDataFactoryClass::~DAPlayerDataFactoryClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAPlayerDataFactoryClass@@UAE@XZ	; DAPlayerDataFactoryClass::~DAPlayerDataFactoryClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDAPlayerDataFactoryClass@@UAEPAXI@Z ENDP		; DAPlayerDataFactoryClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAPlayerDataFactoryClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAPlayerDataFactoryClass@@UAEPAXI@Z PROC		; DAPlayerDataFactoryClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAPlayerDataFactoryClass@@UAE@XZ	; DAPlayerDataFactoryClass::~DAPlayerDataFactoryClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAPlayerDataFactoryClass@@UAEPAXI@Z ENDP		; DAPlayerDataFactoryClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DAPlayerDataFactoryClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DAPlayerDataFactoryClass@@QAEAAV0@ABV0@@Z PROC	; DAPlayerDataFactoryClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DAPlayerDataFactoryClass@@QAEAAV0@ABV0@@Z ENDP	; DAPlayerDataFactoryClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAPlayerDataFactoryClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DAPlayerDataFactoryClass@@QAE@ABV0@@Z PROC		; DAPlayerDataFactoryClass::DAPlayerDataFactoryClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerDataFactoryClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DAPlayerDataFactoryClass@@QAE@ABV0@@Z ENDP		; DAPlayerDataFactoryClass::DAPlayerDataFactoryClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAPlayerDataFactoryClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAPlayerDataFactoryClass@@QAE@XZ PROC		; DAPlayerDataFactoryClass::DAPlayerDataFactoryClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerDataFactoryClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAPlayerDataFactoryClass@@QAE@XZ ENDP		; DAPlayerDataFactoryClass::DAPlayerDataFactoryClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ??1DAPlayerDataFactoryClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAPlayerDataFactoryClass@@UAE@XZ PROC		; DAPlayerDataFactoryClass::~DAPlayerDataFactoryClass, COMDAT
; _this$ = ecx

; 354  : 	virtual ~DAPlayerDataFactoryClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerDataFactoryClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAPlayerDataFactoryClass@@UAE@XZ ENDP		; DAPlayerDataFactoryClass::~DAPlayerDataFactoryClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDAPlayerObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDAPlayerObserverClass@@UAEPAXI@Z PROC		; DAPlayerObserverClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DAPlayerObserverClass@@UAE@XZ	; DAPlayerObserverClass::~DAPlayerObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAPlayerObserverClass@@UAE@XZ	; DAPlayerObserverClass::~DAPlayerObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDAPlayerObserverClass@@UAEPAXI@Z ENDP		; DAPlayerObserverClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAPlayerObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAPlayerObserverClass@@UAEPAXI@Z PROC		; DAPlayerObserverClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAPlayerObserverClass@@UAE@XZ	; DAPlayerObserverClass::~DAPlayerObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAPlayerObserverClass@@UAEPAXI@Z ENDP		; DAPlayerObserverClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DAPlayerObserverClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DAPlayerObserverClass@@QAEAAV0@ABV0@@Z PROC		; DAPlayerObserverClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+84]
	mov	BYTE PTR [eax+84], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DAPlayerObserverClass@@QAEAAV0@ABV0@@Z ENDP		; DAPlayerObserverClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAPlayerObserverClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DAPlayerObserverClass@@QAE@ABV0@@Z PROC		; DAPlayerObserverClass::DAPlayerObserverClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::DynamicVectorClass<DAPlayerObserverTimerStruct *>
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::DynamicVectorClass<DAPlayerObserverChatCommandStruct *>
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::DynamicVectorClass<DAPlayerObserverKeyHookStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+84]
	mov	BYTE PTR [eax+84], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DAPlayerObserverClass@@QAE@ABV0@@Z ENDP		; DAPlayerObserverClass::DAPlayerObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::~DynamicVectorClass<DAPlayerObserverKeyHookStruct *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::~VectorClass<DAPlayerObserverKeyHookStruct *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::~DynamicVectorClass<DAPlayerObserverKeyHookStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAPAUDAPlayerObserverKeyHookStruct@@H@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::DynamicVectorClass<DAPlayerObserverKeyHookStruct *>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::VectorClass<DAPlayerObserverKeyHookStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::DynamicVectorClass<DAPlayerObserverKeyHookStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@IPBQAUDAPlayerObserverKeyHookStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@IPBQAUDAPlayerObserverKeyHookStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::DynamicVectorClass<DAPlayerObserverKeyHookStruct *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@HPBQAUDAPlayerObserverKeyHookStruct@@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::VectorClass<DAPlayerObserverKeyHookStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@IPBQAUDAPlayerObserverKeyHookStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::DynamicVectorClass<DAPlayerObserverKeyHookStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::~VectorClass<DAPlayerObserverKeyHookStruct *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEPAXI@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAPAUDAPlayerObserverKeyHookStruct@@H@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHABQAUDAPlayerObserverKeyHookStruct@@@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAPAUDAPlayerObserverKeyHookStruct@@H@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEHPBQAUDAPlayerObserverKeyHookStruct@@@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0DL@IEBGHGHF@VectorClass?$DMstruct?5DAPlayerObser@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0DM@PKMANBOA@VectorClass?$DMstruct?5DAPlayerObser@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0DM@PKMANBOA@VectorClass?$DMstruct?5DAPlayerObser@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAUDAPlayerObserverKeyHookStruct@@@std@@YA$$QAPAUDAPlayerObserverKeyHookStruct@@AAPAU1@@Z ; std::move<DAPlayerObserverKeyHookStruct * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0DM@PKMANBOA@VectorClass?$DMstruct?5DAPlayerObser@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE_NHPBQAUDAPlayerObserverKeyHookStruct@@@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UBE_NABV0@@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEABQAUDAPlayerObserverKeyHookStruct@@H@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UBE_NABV0@@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEABQAUDAPlayerObserverKeyHookStruct@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEABQAUDAPlayerObserverKeyHookStruct@@H@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEABQAUDAPlayerObserverKeyHookStruct@@H@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAPAUDAPlayerObserverKeyHookStruct@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAPAUDAPlayerObserverKeyHookStruct@@H@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAPAUDAPlayerObserverKeyHookStruct@@H@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::~VectorClass<DAPlayerObserverKeyHookStruct *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::~VectorClass<DAPlayerObserverKeyHookStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverKeyHookStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0EA@DFHGBHJN@VectorClass?$DMstruct?5DAPlayerObser@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN11@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN12@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QBEABQAUDAPlayerObserverKeyHookStruct@@H@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::VectorClass<DAPlayerObserverKeyHookStruct *>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverKeyHookStruct *>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@ABV0@@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::VectorClass<DAPlayerObserverKeyHookStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@HPBQAUDAPlayerObserverKeyHookStruct@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@HPBQAUDAPlayerObserverKeyHookStruct@@@Z PROC ; VectorClass<DAPlayerObserverKeyHookStruct *>::VectorClass<DAPlayerObserverKeyHookStruct *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0EB@CCPEIKDO@VectorClass?$DMstruct?5DAPlayerObser@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0EB@CCPEIKDO@VectorClass?$DMstruct?5DAPlayerObser@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@HPBQAUDAPlayerObserverKeyHookStruct@@@Z ENDP ; VectorClass<DAPlayerObserverKeyHookStruct *>::VectorClass<DAPlayerObserverKeyHookStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::~DynamicVectorClass<DAPlayerObserverChatCommandStruct *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::~VectorClass<DAPlayerObserverChatCommandStruct *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::~DynamicVectorClass<DAPlayerObserverChatCommandStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAPAUDAPlayerObserverChatCommandStruct@@H@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::DynamicVectorClass<DAPlayerObserverChatCommandStruct *>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::VectorClass<DAPlayerObserverChatCommandStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::DynamicVectorClass<DAPlayerObserverChatCommandStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@IPBQAUDAPlayerObserverChatCommandStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@IPBQAUDAPlayerObserverChatCommandStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::DynamicVectorClass<DAPlayerObserverChatCommandStruct *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@HPBQAUDAPlayerObserverChatCommandStruct@@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::VectorClass<DAPlayerObserverChatCommandStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@IPBQAUDAPlayerObserverChatCommandStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::DynamicVectorClass<DAPlayerObserverChatCommandStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::~VectorClass<DAPlayerObserverChatCommandStruct *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEPAXI@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAPAUDAPlayerObserverChatCommandStruct@@H@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHABQAUDAPlayerObserverChatCommandStruct@@@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAPAUDAPlayerObserverChatCommandStruct@@H@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEHPBQAUDAPlayerObserverChatCommandStruct@@@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0DP@JJGAHOFF@VectorClass?$DMstruct?5DAPlayerObser@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0EA@MBLDIHCA@VectorClass?$DMstruct?5DAPlayerObser@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0EA@MBLDIHCA@VectorClass?$DMstruct?5DAPlayerObser@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAUDAPlayerObserverChatCommandStruct@@@std@@YA$$QAPAUDAPlayerObserverChatCommandStruct@@AAPAU1@@Z ; std::move<DAPlayerObserverChatCommandStruct * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0EA@MBLDIHCA@VectorClass?$DMstruct?5DAPlayerObser@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE_NHPBQAUDAPlayerObserverChatCommandStruct@@@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UBE_NABV0@@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEABQAUDAPlayerObserverChatCommandStruct@@H@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UBE_NABV0@@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEABQAUDAPlayerObserverChatCommandStruct@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEABQAUDAPlayerObserverChatCommandStruct@@H@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEABQAUDAPlayerObserverChatCommandStruct@@H@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAPAUDAPlayerObserverChatCommandStruct@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAPAUDAPlayerObserverChatCommandStruct@@H@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAPAUDAPlayerObserverChatCommandStruct@@H@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::~VectorClass<DAPlayerObserverChatCommandStruct *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::~VectorClass<DAPlayerObserverChatCommandStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverChatCommandStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0EE@JOBDGIII@VectorClass?$DMstruct?5DAPlayerObser@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN11@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN12@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QBEABQAUDAPlayerObserverChatCommandStruct@@H@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::VectorClass<DAPlayerObserverChatCommandStruct *>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverChatCommandStruct *>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@ABV0@@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::VectorClass<DAPlayerObserverChatCommandStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@HPBQAUDAPlayerObserverChatCommandStruct@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@HPBQAUDAPlayerObserverChatCommandStruct@@@Z PROC ; VectorClass<DAPlayerObserverChatCommandStruct *>::VectorClass<DAPlayerObserverChatCommandStruct *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0EF@EPICALKK@VectorClass?$DMstruct?5DAPlayerObser@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0EF@EPICALKK@VectorClass?$DMstruct?5DAPlayerObser@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@HPBQAUDAPlayerObserverChatCommandStruct@@@Z ENDP ; VectorClass<DAPlayerObserverChatCommandStruct *>::VectorClass<DAPlayerObserverChatCommandStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::~DynamicVectorClass<DAPlayerObserverTimerStruct *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverTimerStruct *>::~VectorClass<DAPlayerObserverTimerStruct *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::~DynamicVectorClass<DAPlayerObserverTimerStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAPAUDAPlayerObserverTimerStruct@@H@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverTimerStruct *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverTimerStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverTimerStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::DynamicVectorClass<DAPlayerObserverTimerStruct *>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::VectorClass<DAPlayerObserverTimerStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::DynamicVectorClass<DAPlayerObserverTimerStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@IPBQAUDAPlayerObserverTimerStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@IPBQAUDAPlayerObserverTimerStruct@@@Z PROC ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::DynamicVectorClass<DAPlayerObserverTimerStruct *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@HPBQAUDAPlayerObserverTimerStruct@@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::VectorClass<DAPlayerObserverTimerStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@IPBQAUDAPlayerObserverTimerStruct@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::DynamicVectorClass<DAPlayerObserverTimerStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ ; VectorClass<DAPlayerObserverTimerStruct *>::~VectorClass<DAPlayerObserverTimerStruct *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEPAXI@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAPAUDAPlayerObserverTimerStruct@@H@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHABQAUDAPlayerObserverTimerStruct@@@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAPAUDAPlayerObserverTimerStruct@@H@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEHPBQAUDAPlayerObserverTimerStruct@@@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ PROC ; VectorClass<DAPlayerObserverTimerStruct *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ PROC ; VectorClass<DAPlayerObserverTimerStruct *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0DJ@MHPEBELA@VectorClass?$DMstruct?5DAPlayerObser@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0DK@BBINAFLN@VectorClass?$DMstruct?5DAPlayerObser@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0DK@BBINAFLN@VectorClass?$DMstruct?5DAPlayerObser@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAUDAPlayerObserverTimerStruct@@@std@@YA$$QAPAUDAPlayerObserverTimerStruct@@AAPAU1@@Z ; std::move<DAPlayerObserverTimerStruct * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0DK@BBINAFLN@VectorClass?$DMstruct?5DAPlayerObser@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE_NHPBQAUDAPlayerObserverTimerStruct@@@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UBE_NABV0@@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverTimerStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEABQAUDAPlayerObserverTimerStruct@@H@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UBE_NABV0@@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEABQAUDAPlayerObserverTimerStruct@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEABQAUDAPlayerObserverTimerStruct@@H@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEABQAUDAPlayerObserverTimerStruct@@H@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAPAUDAPlayerObserverTimerStruct@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAPAUDAPlayerObserverTimerStruct@@H@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAPAUDAPlayerObserverTimerStruct@@H@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ PROC ; VectorClass<DAPlayerObserverTimerStruct *>::~VectorClass<DAPlayerObserverTimerStruct *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAEXXZ ; VectorClass<DAPlayerObserverTimerStruct *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::~VectorClass<DAPlayerObserverTimerStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEHXZ ; VectorClass<DAPlayerObserverTimerStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0DO@PEJOFHLG@VectorClass?$DMstruct?5DAPlayerObser@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN11@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN12@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QBEABQAUDAPlayerObserverTimerStruct@@H@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::VectorClass<DAPlayerObserverTimerStruct *>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverTimerStruct *>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@ABV0@@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::VectorClass<DAPlayerObserverTimerStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@HPBQAUDAPlayerObserverTimerStruct@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@HPBQAUDAPlayerObserverTimerStruct@@@Z PROC ; VectorClass<DAPlayerObserverTimerStruct *>::VectorClass<DAPlayerObserverTimerStruct *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0DP@IOIJJLDO@VectorClass?$DMstruct?5DAPlayerObser@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0DP@IOIJJLDO@VectorClass?$DMstruct?5DAPlayerObser@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@HPBQAUDAPlayerObserverTimerStruct@@@Z ENDP ; VectorClass<DAPlayerObserverTimerStruct *>::VectorClass<DAPlayerObserverTimerStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Think@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Think@DAPlayerObserverClass@@UAEXXZ PROC		; DAPlayerObserverClass::Think, COMDAT
; _this$ = ecx

; 341  : 	virtual void Think() { } //Called on each frame. Requires THINK flag.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Think@DAPlayerObserverClass@@UAEXXZ ENDP		; DAPlayerObserverClass::Think
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Timer_Expired@DAPlayerObserverClass@@UAEXHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Number$ = 8						; size = 4
_Data$ = 12						; size = 4
?Timer_Expired@DAPlayerObserverClass@@UAEXHI@Z PROC	; DAPlayerObserverClass::Timer_Expired, COMDAT
; _this$ = ecx

; 340  : 	virtual void Timer_Expired(int Number,unsigned int Data) { } //Callback for Start_Timer.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@DAPlayerObserverClass@@UAEXHI@Z ENDP	; DAPlayerObserverClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Poked@DAPlayerObserverClass@@UAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Poked@DAPlayerObserverClass@@UAEXPAVcPlayer@@@Z PROC	; DAPlayerObserverClass::Poked, COMDAT
; _this$ = ecx

; 338  : 	virtual void Poked(cPlayer *Player) { } //Called when the player is poked.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Poked@DAPlayerObserverClass@@UAEXPAVcPlayer@@@Z ENDP	; DAPlayerObserverClass::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Custom@DAPlayerObserverClass@@UAEXPAVScriptableGameObj@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Sender$ = 8						; size = 4
_Type$ = 12						; size = 4
_Param$ = 16						; size = 4
?Custom@DAPlayerObserverClass@@UAEXPAVScriptableGameObj@@HH@Z PROC ; DAPlayerObserverClass::Custom, COMDAT
; _this$ = ecx

; 337  : 	virtual void Custom(GameObject *Sender,int Type,int Param) { } //Called when the player receives a custom.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Custom@DAPlayerObserverClass@@UAEXPAVScriptableGameObj@@HH@Z ENDP ; DAPlayerObserverClass::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Kill_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Killer$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Kill_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAPlayerObserverClass::Kill_Received, COMDAT
; _this$ = ecx

; 336  : 	virtual void Kill_Received(ArmedGameObj *Killer,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { } //Called when an object kills the player.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Kill_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAPlayerObserverClass::Kill_Received
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Kill_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Kill_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAPlayerObserverClass::Kill_Dealt, COMDAT
; _this$ = ecx

; 335  : 	virtual void Kill_Dealt(DamageableGameObj *Victim,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { } //Called when the player kills an object.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Kill_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAPlayerObserverClass::Kill_Dealt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Damage_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Damager$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Damage_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAPlayerObserverClass::Damage_Received, COMDAT
; _this$ = ecx

; 334  : 	virtual void Damage_Received(ArmedGameObj *Damager,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { } //Called when an object damages the player.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Damage_Received@DAPlayerObserverClass@@UAEXPAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAPlayerObserverClass::Damage_Received
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Damage_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Damage_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAPlayerObserverClass::Damage_Dealt, COMDAT
; _this$ = ecx

; 333  : 	virtual void Damage_Dealt(DamageableGameObj *Victim,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { } //Called when the player damages an object.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Damage_Dealt@DAPlayerObserverClass@@UAEXPAVDamageableGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAPlayerObserverClass::Damage_Dealt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Damage_Received_Request@DAPlayerObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Damager$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Damage_Received_Request@DAPlayerObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z PROC ; DAPlayerObserverClass::Damage_Received_Request, COMDAT
; _this$ = ecx

; 332  : 	virtual bool Damage_Received_Request(ArmedGameObj *Damager,float &Damage,unsigned int &Warhead,float Scale,DADamageType::Type Type) { return true; } //Called when an object tries to damage the player. Damage can be changed by modifying the OffenseObjectClass.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Damage_Received_Request@DAPlayerObserverClass@@UAE_NPAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z ENDP ; DAPlayerObserverClass::Damage_Received_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Damage_Dealt_Request@DAPlayerObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damage$ = 12						; size = 4
_Warhead$ = 16						; size = 4
_Scale$ = 20						; size = 4
_Type$ = 24						; size = 4
?Damage_Dealt_Request@DAPlayerObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z PROC ; DAPlayerObserverClass::Damage_Dealt_Request, COMDAT
; _this$ = ecx

; 331  : 	virtual bool Damage_Dealt_Request(DamageableGameObj *Victim,float &Damage,unsigned int &Warhead,float Scale,DADamageType::Type Type) { return true; } //Called when the player tries to damage an object. Damage can be changed by modifying the OffenseObjectClass.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Damage_Dealt_Request@DAPlayerObserverClass@@UAE_NPAVDamageableGameObj@@AAMAAIMW4Type@DADamageType@@@Z ENDP ; DAPlayerObserverClass::Damage_Dealt_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Destroyed@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Destroyed@DAPlayerObserverClass@@UAEXXZ PROC		; DAPlayerObserverClass::Destroyed, COMDAT
; _this$ = ecx

; 330  : 	virtual void Destroyed() { } //Called when the player's gameobject is destroyed.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroyed@DAPlayerObserverClass@@UAEXXZ ENDP		; DAPlayerObserverClass::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Created@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Created@DAPlayerObserverClass@@UAEXXZ PROC		; DAPlayerObserverClass::Created, COMDAT
; _this$ = ecx

; 329  : 	virtual void Created() { } //Called when the player changes to a new gameobject.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Created@DAPlayerObserverClass@@UAEXXZ ENDP		; DAPlayerObserverClass::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Dialog_Message@DAPlayerObserverClass@@UAEXW4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 4
_Dialog$ = 12						; size = 4
_Control$ = 16						; size = 4
?Dialog_Message@DAPlayerObserverClass@@UAEXW4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z PROC ; DAPlayerObserverClass::Dialog_Message, COMDAT
; _this$ = ecx

; 327  : 	virtual void Dialog_Message(DialogMessageType Type, ScriptedDialogClass* Dialog, ScriptedControlClass* Control) { } //Called on a dialog notification from client.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Dialog_Message@DAPlayerObserverClass@@UAEXW4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z ENDP ; DAPlayerObserverClass::Dialog_Message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Change_Character@DAPlayerObserverClass@@UAEXPBVSoldierGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Soldier$ = 8						; size = 4
?Change_Character@DAPlayerObserverClass@@UAEXPBVSoldierGameObjDef@@@Z PROC ; DAPlayerObserverClass::Change_Character, COMDAT
; _this$ = ecx

; 326  : 	virtual void Change_Character(const SoldierGameObjDef *Soldier) { } //Called before the player changes characters.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Change_Character@DAPlayerObserverClass@@UAEXPBVSoldierGameObjDef@@@Z ENDP ; DAPlayerObserverClass::Change_Character
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?C4_Detonate@DAPlayerObserverClass@@UAEXPAVC4GameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_C4$ = 8						; size = 4
?C4_Detonate@DAPlayerObserverClass@@UAEXPAVC4GameObj@@@Z PROC ; DAPlayerObserverClass::C4_Detonate, COMDAT
; _this$ = ecx

; 325  : 	virtual void C4_Detonate(C4GameObj *C4) { } //Called when the player triggers a proximity C4.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?C4_Detonate@DAPlayerObserverClass@@UAEXPAVC4GameObj@@@Z ENDP ; DAPlayerObserverClass::C4_Detonate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?C4_Detonate_Request@DAPlayerObserverClass@@UAE_NPAVC4GameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_C4$ = 8						; size = 4
?C4_Detonate_Request@DAPlayerObserverClass@@UAE_NPAVC4GameObj@@@Z PROC ; DAPlayerObserverClass::C4_Detonate_Request, COMDAT
; _this$ = ecx

; 324  : 	virtual bool C4_Detonate_Request(C4GameObj *C4) { return true; } //Called when the player tries to trigger a proximity C4.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?C4_Detonate_Request@DAPlayerObserverClass@@UAE_NPAVC4GameObj@@@Z ENDP ; DAPlayerObserverClass::C4_Detonate_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Clear_Weapons@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear_Weapons@DAPlayerObserverClass@@UAEXXZ PROC	; DAPlayerObserverClass::Clear_Weapons, COMDAT
; _this$ = ecx

; 323  : 	virtual void Clear_Weapons() { } //Called when the player's weapons are cleared.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Weapons@DAPlayerObserverClass@@UAEXXZ ENDP	; DAPlayerObserverClass::Clear_Weapons
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Remove_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Weapon$ = 8						; size = 4
?Remove_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z PROC ; DAPlayerObserverClass::Remove_Weapon, COMDAT
; _this$ = ecx

; 322  : 	virtual void Remove_Weapon(WeaponClass *Weapon) { } //Called when a weapon is removed from the player.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z ENDP ; DAPlayerObserverClass::Remove_Weapon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Add_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Weapon$ = 8						; size = 4
?Add_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z PROC ; DAPlayerObserverClass::Add_Weapon, COMDAT
; _this$ = ecx

; 321  : 	virtual void Add_Weapon(WeaponClass *Weapon) { } //Called when the player is granted a weapon.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Weapon@DAPlayerObserverClass@@UAEXPAVWeaponClass@@@Z ENDP ; DAPlayerObserverClass::Add_Weapon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Add_Weapon_Request@DAPlayerObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Weapon$ = 8						; size = 4
?Add_Weapon_Request@DAPlayerObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z PROC ; DAPlayerObserverClass::Add_Weapon_Request, COMDAT
; _this$ = ecx

; 320  : 	virtual bool Add_Weapon_Request(const WeaponDefinitionClass *Weapon) { return true; } //Called when something tries to grant the player a weapon.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Weapon_Request@DAPlayerObserverClass@@UAE_NPBVWeaponDefinitionClass@@@Z ENDP ; DAPlayerObserverClass::Add_Weapon_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?PowerUp_Grant@DAPlayerObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_PowerUp$ = 8						; size = 4
_PowerUpObj$ = 12					; size = 4
?PowerUp_Grant@DAPlayerObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z PROC ; DAPlayerObserverClass::PowerUp_Grant, COMDAT
; _this$ = ecx

; 319  : 	virtual void PowerUp_Grant(const PowerUpGameObjDef *PowerUp,PowerUpGameObj *PowerUpObj) { } //Called when the player is granted a powerup.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?PowerUp_Grant@DAPlayerObserverClass@@UAEXPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ENDP ; DAPlayerObserverClass::PowerUp_Grant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?PowerUp_Grant_Request@DAPlayerObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_PowerUp$ = 8						; size = 4
_PowerUpObj$ = 12					; size = 4
?PowerUp_Grant_Request@DAPlayerObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z PROC ; DAPlayerObserverClass::PowerUp_Grant_Request, COMDAT
; _this$ = ecx

; 318  : 	virtual bool PowerUp_Grant_Request(const PowerUpGameObjDef *PowerUp,PowerUpGameObj *PowerUpObj) { return true; } //Called when something tries to grant a powerup to the player.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?PowerUp_Grant_Request@DAPlayerObserverClass@@UAE_NPBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ENDP ; DAPlayerObserverClass::PowerUp_Grant_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Vehicle_Exit@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Exit@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z PROC ; DAPlayerObserverClass::Vehicle_Exit, COMDAT
; _this$ = ecx

; 317  : 	virtual void Vehicle_Exit(VehicleGameObj *Vehicle,int Seat) { } //Called when the player exits a vehicle.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Exit@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z ENDP ; DAPlayerObserverClass::Vehicle_Exit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Vehicle_Enter@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Enter@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z PROC ; DAPlayerObserverClass::Vehicle_Enter, COMDAT
; _this$ = ecx

; 316  : 	virtual void Vehicle_Enter(VehicleGameObj *Vehicle,int Seat) { } //Called when the player enters a vehicle.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Enter@DAPlayerObserverClass@@UAEXPAVVehicleGameObj@@H@Z ENDP ; DAPlayerObserverClass::Vehicle_Enter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Vehicle_Entry_Request@DAPlayerObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Seat$ = 12						; size = 4
?Vehicle_Entry_Request@DAPlayerObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z PROC ; DAPlayerObserverClass::Vehicle_Entry_Request, COMDAT
; _this$ = ecx

; 315  : 	virtual bool Vehicle_Entry_Request(VehicleGameObj *Vehicle,int &Seat) { return true; } //Called when tries to enter a vehicle.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Entry_Request@DAPlayerObserverClass@@UAE_NPAVVehicleGameObj@@AAH@Z ENDP ; DAPlayerObserverClass::Vehicle_Entry_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Custom_Purchase@DAPlayerObserverClass@@UAEXMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Cost$ = 8						; size = 4
_ID$ = 12						; size = 4
?Custom_Purchase@DAPlayerObserverClass@@UAEXMI@Z PROC	; DAPlayerObserverClass::Custom_Purchase, COMDAT
; _this$ = ecx

; 314  : 	virtual void Custom_Purchase(float Cost,unsigned int ID) { } //Called after the player has bought a custom object.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Custom_Purchase@DAPlayerObserverClass@@UAEXMI@Z ENDP	; DAPlayerObserverClass::Custom_Purchase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?PowerUp_Purchase@DAPlayerObserverClass@@UAEXMPBVPowerUpGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Cost$ = 8						; size = 4
_Item$ = 12						; size = 4
?PowerUp_Purchase@DAPlayerObserverClass@@UAEXMPBVPowerUpGameObjDef@@@Z PROC ; DAPlayerObserverClass::PowerUp_Purchase, COMDAT
; _this$ = ecx

; 313  : 	virtual void PowerUp_Purchase(float Cost,const PowerUpGameObjDef *Item) { } //Called after the player has bought a powerup.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?PowerUp_Purchase@DAPlayerObserverClass@@UAEXMPBVPowerUpGameObjDef@@@Z ENDP ; DAPlayerObserverClass::PowerUp_Purchase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Vehicle_Purchase@DAPlayerObserverClass@@UAEXMPBVVehicleGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Cost$ = 8						; size = 4
_Item$ = 12						; size = 4
?Vehicle_Purchase@DAPlayerObserverClass@@UAEXMPBVVehicleGameObjDef@@@Z PROC ; DAPlayerObserverClass::Vehicle_Purchase, COMDAT
; _this$ = ecx

; 312  : 	virtual void Vehicle_Purchase(float Cost,const VehicleGameObjDef *Item) { } //Called after the player has bought a vehicle.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Purchase@DAPlayerObserverClass@@UAEXMPBVVehicleGameObjDef@@@Z ENDP ; DAPlayerObserverClass::Vehicle_Purchase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Character_Purchase@DAPlayerObserverClass@@UAEXMPBVSoldierGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Cost$ = 8						; size = 4
_Item$ = 12						; size = 4
?Character_Purchase@DAPlayerObserverClass@@UAEXMPBVSoldierGameObjDef@@@Z PROC ; DAPlayerObserverClass::Character_Purchase, COMDAT
; _this$ = ecx

; 311  : 	virtual void Character_Purchase(float Cost,const SoldierGameObjDef *Item) { } //Called after the player has bought a character.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Character_Purchase@DAPlayerObserverClass@@UAEXMPBVSoldierGameObjDef@@@Z ENDP ; DAPlayerObserverClass::Character_Purchase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Custom_Purchase_Request@DAPlayerObserverClass@@UAEHAAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Cost$ = 8						; size = 4
_ID$ = 12						; size = 4
?Custom_Purchase_Request@DAPlayerObserverClass@@UAEHAAMI@Z PROC ; DAPlayerObserverClass::Custom_Purchase_Request, COMDAT
; _this$ = ecx

; 310  : 	virtual int Custom_Purchase_Request(float &Cost,unsigned int ID) { return -1; } //Called when the player tries to buy a custom object.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Custom_Purchase_Request@DAPlayerObserverClass@@UAEHAAMI@Z ENDP ; DAPlayerObserverClass::Custom_Purchase_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?PowerUp_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVPowerUpGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Cost$ = 8						; size = 4
_Item$ = 12						; size = 4
?PowerUp_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVPowerUpGameObjDef@@@Z PROC ; DAPlayerObserverClass::PowerUp_Purchase_Request, COMDAT
; _this$ = ecx

; 309  : 	virtual int PowerUp_Purchase_Request(float &Cost,const PowerUpGameObjDef *Item) { return -1; } //Called when the player tries to buy a powerup.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?PowerUp_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVPowerUpGameObjDef@@@Z ENDP ; DAPlayerObserverClass::PowerUp_Purchase_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Vehicle_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVVehicleGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Cost$ = 8						; size = 4
_Item$ = 12						; size = 4
?Vehicle_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVVehicleGameObjDef@@@Z PROC ; DAPlayerObserverClass::Vehicle_Purchase_Request, COMDAT
; _this$ = ecx

; 308  : 	virtual int Vehicle_Purchase_Request(float &Cost,const VehicleGameObjDef *Item) { return -1; } //Called when the player tries to buy a vehicle.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Vehicle_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVVehicleGameObjDef@@@Z ENDP ; DAPlayerObserverClass::Vehicle_Purchase_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Character_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVSoldierGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Cost$ = 8						; size = 4
_Item$ = 12						; size = 4
?Character_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVSoldierGameObjDef@@@Z PROC ; DAPlayerObserverClass::Character_Purchase_Request, COMDAT
; _this$ = ecx

; 307  : 	virtual int Character_Purchase_Request(float &Cost,const SoldierGameObjDef *Item) { return -1; } //Called when the player tries to buy a character.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Character_Purchase_Request@DAPlayerObserverClass@@UAEHAAMPBVSoldierGameObjDef@@@Z ENDP ; DAPlayerObserverClass::Character_Purchase_Request
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Team_Change@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Team_Change@DAPlayerObserverClass@@UAEXXZ PROC		; DAPlayerObserverClass::Team_Change, COMDAT
; _this$ = ecx

; 306  : 	virtual void Team_Change() { } //Called when the player changes teams.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Team_Change@DAPlayerObserverClass@@UAEXXZ ENDP		; DAPlayerObserverClass::Team_Change
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Name_Change@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Name_Change@DAPlayerObserverClass@@UAEXXZ PROC		; DAPlayerObserverClass::Name_Change, COMDAT
; _this$ = ecx

; 305  : 	virtual void Name_Change() { } //Called after the player's name is changed for fake color messaging.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Name_Change@DAPlayerObserverClass@@UAEXXZ ENDP		; DAPlayerObserverClass::Name_Change
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Player_Loaded@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Player_Loaded@DAPlayerObserverClass@@UAEXXZ PROC	; DAPlayerObserverClass::Player_Loaded, COMDAT
; _this$ = ecx

; 304  : 	virtual void Player_Loaded() { } //Called after the player has loaded the map and spawned.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Player_Loaded@DAPlayerObserverClass@@UAEXXZ ENDP	; DAPlayerObserverClass::Player_Loaded
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Level_Loaded@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Level_Loaded@DAPlayerObserverClass@@UAEXXZ PROC	; DAPlayerObserverClass::Level_Loaded, COMDAT
; _this$ = ecx

; 303  : 	virtual void Level_Loaded() { } //Called when a new level is loaded.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Level_Loaded@DAPlayerObserverClass@@UAEXXZ ENDP	; DAPlayerObserverClass::Level_Loaded
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Leave@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@DAPlayerObserverClass@@UAEXXZ PROC		; DAPlayerObserverClass::Leave, COMDAT
; _this$ = ecx

; 302  : 	virtual void Leave() { } //Called when the player leaves the game.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@DAPlayerObserverClass@@UAEXXZ ENDP		; DAPlayerObserverClass::Leave
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Join@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Join@DAPlayerObserverClass@@UAEXXZ PROC		; DAPlayerObserverClass::Join, COMDAT
; _this$ = ecx

; 301  : 	virtual void Join() { } //Called when the player rejoins after leaving.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Join@DAPlayerObserverClass@@UAEXXZ ENDP		; DAPlayerObserverClass::Join
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Init@DAPlayerObserverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@DAPlayerObserverClass@@UAEXXZ PROC		; DAPlayerObserverClass::Init, COMDAT
; _this$ = ecx

; 299  : 	virtual void Init() { } //Called when the observer is attached to a player.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@DAPlayerObserverClass@@UAEXXZ ENDP		; DAPlayerObserverClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ??1DAPlayerObserverClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAPlayerObserverClass@@UAE@XZ PROC			; DAPlayerObserverClass::~DAPlayerObserverClass, COMDAT
; _this$ = ecx

; 291  : 	virtual ~DAPlayerObserverClass() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerObserverClass@@6B@

; 292  : 		Clear_Timers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Timers@DAPlayerObserverClass@@QAEXXZ ; DAPlayerObserverClass::Clear_Timers

; 293  : 		Clear_Chat_Commands();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Chat_Commands@DAPlayerObserverClass@@QAEXXZ ; DAPlayerObserverClass::Clear_Chat_Commands

; 294  : 		Clear_Key_Hooks();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Key_Hooks@DAPlayerObserverClass@@QAEXXZ ; DAPlayerObserverClass::Clear_Key_Hooks

; 295  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAPlayerObserverClass@@UAE@XZ ENDP			; DAPlayerObserverClass::~DAPlayerObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Is_Delete_Pending@DAPlayerObserverClass@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Delete_Pending@DAPlayerObserverClass@@QAE_NXZ PROC	; DAPlayerObserverClass::Is_Delete_Pending, COMDAT
; _this$ = ecx

; 287  : 	inline bool Is_Delete_Pending() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 288  : 		return DeletePending;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+84]

; 289  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Delete_Pending@DAPlayerObserverClass@@QAE_NXZ ENDP	; DAPlayerObserverClass::Is_Delete_Pending
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Set_Delete_Pending@DAPlayerObserverClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set_Delete_Pending@DAPlayerObserverClass@@QAEXXZ PROC	; DAPlayerObserverClass::Set_Delete_Pending, COMDAT
; _this$ = ecx

; 284  : 	inline void Set_Delete_Pending() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		DeletePending = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 1

; 286  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set_Delete_Pending@DAPlayerObserverClass@@QAEXXZ ENDP	; DAPlayerObserverClass::Set_Delete_Pending
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Key_Hooks@DAPlayerObserverClass@@QAEABV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Key_Hooks@DAPlayerObserverClass@@QAEABV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@XZ PROC ; DAPlayerObserverClass::Get_Key_Hooks, COMDAT
; _this$ = ecx

; 280  : 	inline const DynamicVectorClass<DAPlayerObserverKeyHookStruct*> &Get_Key_Hooks() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 281  : 		return KeyHooks;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH

; 282  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Key_Hooks@DAPlayerObserverClass@@QAEABV?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@XZ ENDP ; DAPlayerObserverClass::Get_Key_Hooks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Chat_Commands@DAPlayerObserverClass@@QAEABV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Chat_Commands@DAPlayerObserverClass@@QAEABV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@XZ PROC ; DAPlayerObserverClass::Get_Chat_Commands, COMDAT
; _this$ = ecx

; 273  : 	inline const DynamicVectorClass<DAPlayerObserverChatCommandStruct*> &Get_Chat_Commands() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 274  : 		return ChatCommands;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H

; 275  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Chat_Commands@DAPlayerObserverClass@@QAEABV?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@XZ ENDP ; DAPlayerObserverClass::Get_Chat_Commands
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Timers@DAPlayerObserverClass@@QAEAAV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Timers@DAPlayerObserverClass@@QAEAAV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@XZ PROC ; DAPlayerObserverClass::Get_Timers, COMDAT
; _this$ = ecx

; 262  : 	inline DynamicVectorClass<DAPlayerObserverTimerStruct*> &Get_Timers() { 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 		return Timers;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Timers@DAPlayerObserverClass@@QAEAAV?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@XZ ENDP ; DAPlayerObserverClass::Get_Timers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Team@DAPlayerObserverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Team@DAPlayerObserverClass@@QAEHXZ PROC		; DAPlayerObserverClass::Get_Team, COMDAT
; _this$ = ecx

; 258  : 	inline int Get_Team() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 259  : 		return Get_Owner()->Get_Player_Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerObserverClass@@QAEPAVcPlayer@@XZ ; DAPlayerObserverClass::Get_Owner
	mov	ecx, eax
	call	?Get_Player_Type@cPlayer@@QBEHXZ	; cPlayer::Get_Player_Type

; 260  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Team@DAPlayerObserverClass@@QAEHXZ ENDP		; DAPlayerObserverClass::Get_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_GameObj@DAPlayerObserverClass@@QAEPAVSoldierGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_GameObj@DAPlayerObserverClass@@QAEPAVSoldierGameObj@@XZ PROC ; DAPlayerObserverClass::Get_GameObj, COMDAT
; _this$ = ecx

; 255  : 	inline SoldierGameObj *Get_GameObj() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 256  : 		return Get_Owner()->Get_GameObj();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerObserverClass@@QAEPAVcPlayer@@XZ ; DAPlayerObserverClass::Get_Owner
	mov	ecx, eax
	call	?Get_GameObj@cPlayer@@QBEPAVSoldierGameObj@@XZ ; cPlayer::Get_GameObj

; 257  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_GameObj@DAPlayerObserverClass@@QAEPAVSoldierGameObj@@XZ ENDP ; DAPlayerObserverClass::Get_GameObj
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Name@DAPlayerObserverClass@@QAEABVWideStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@DAPlayerObserverClass@@QAEABVWideStringClass@@XZ PROC ; DAPlayerObserverClass::Get_Name, COMDAT
; _this$ = ecx

; 252  : 	inline const WideStringClass &Get_Name() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 		return Get_Owner()->Get_Name();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerObserverClass@@QAEPAVcPlayer@@XZ ; DAPlayerObserverClass::Get_Owner
	mov	ecx, eax
	call	?Get_Name@cPlayer@@QBEABVWideStringClass@@XZ ; cPlayer::Get_Name

; 254  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@DAPlayerObserverClass@@QAEABVWideStringClass@@XZ ENDP ; DAPlayerObserverClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_ID@DAPlayerObserverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@DAPlayerObserverClass@@QAEHXZ PROC		; DAPlayerObserverClass::Get_ID, COMDAT
; _this$ = ecx

; 249  : 	inline int Get_ID() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 250  : 		return Get_Owner()->Get_Id();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerObserverClass@@QAEPAVcPlayer@@XZ ; DAPlayerObserverClass::Get_Owner
	mov	ecx, eax
	call	?Get_Id@cPlayer@@QBEHXZ			; cPlayer::Get_Id

; 251  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@DAPlayerObserverClass@@QAEHXZ ENDP		; DAPlayerObserverClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Has_Flag@DAPlayerObserverClass@@QAE_NW4Flag@DAPlayerFlags@@@Z
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_Flag$ = 8						; size = 4
?Has_Flag@DAPlayerObserverClass@@QAE_NW4Flag@DAPlayerFlags@@@Z PROC ; DAPlayerObserverClass::Has_Flag, COMDAT
; _this$ = ecx

; 246  : 	inline bool Has_Flag(DAPlayerFlags::Flag Flag) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 		return (Flags & Flag) == Flag;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR _Flag$[ebp]
	cmp	ecx, DWORD PTR _Flag$[ebp]
	jne	SHORT $LN3@Has_Flag
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@Has_Flag
$LN3@Has_Flag:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Has_Flag:
	mov	al, BYTE PTR tv67[ebp]

; 248  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Has_Flag@DAPlayerObserverClass@@QAE_NW4Flag@DAPlayerFlags@@@Z ENDP ; DAPlayerObserverClass::Has_Flag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Remove_Flag@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Flag$ = 8						; size = 4
?Remove_Flag@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z PROC ; DAPlayerObserverClass::Remove_Flag, COMDAT
; _this$ = ecx

; 243  : 	inline void Remove_Flag(DAPlayerFlags::Flag Flag) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		Flags &= ~Flag;

	mov	eax, DWORD PTR _Flag$[ebp]
	push	eax
	call	??S@YA?AW4Flag@DAPlayerFlags@@W401@@Z	; operator~
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	call	??_4@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z ; operator&=
	add	esp, 8

; 245  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_Flag@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z ENDP ; DAPlayerObserverClass::Remove_Flag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Add_Flag@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Flag$ = 8						; size = 4
?Add_Flag@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z PROC ; DAPlayerObserverClass::Add_Flag, COMDAT
; _this$ = ecx

; 240  : 	inline void Add_Flag(DAPlayerFlags::Flag Flag) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 		Flags |= Flag;

	mov	eax, DWORD PTR _Flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	call	??_5@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z ; operator|=
	add	esp, 8

; 242  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Flag@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z ENDP ; DAPlayerObserverClass::Add_Flag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Set_Flags@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Flag$ = 8						; size = 4
?Set_Flags@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z PROC ; DAPlayerObserverClass::Set_Flags, COMDAT
; _this$ = ecx

; 237  : 	inline void Set_Flags(DAPlayerFlags::Flag Flag) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 		Flags = Flag;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Flag$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 239  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Flags@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z ENDP ; DAPlayerObserverClass::Set_Flags
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Flags@DAPlayerObserverClass@@QAE?AW4Flag@DAPlayerFlags@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Flags@DAPlayerObserverClass@@QAE?AW4Flag@DAPlayerFlags@@XZ PROC ; DAPlayerObserverClass::Get_Flags, COMDAT
; _this$ = ecx

; 234  : 	inline DAPlayerFlags::Flag Get_Flags() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		return Flags;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 236  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Flags@DAPlayerObserverClass@@QAE?AW4Flag@DAPlayerFlags@@XZ ENDP ; DAPlayerObserverClass::Get_Flags
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Set_Owner@DAPlayerObserverClass@@QAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Set_Owner@DAPlayerObserverClass@@QAEXPAVcPlayer@@@Z PROC ; DAPlayerObserverClass::Set_Owner, COMDAT
; _this$ = ecx

; 231  : 	inline void Set_Owner(cPlayer *Player) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 		Owner = Player;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Player$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 233  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Owner@DAPlayerObserverClass@@QAEXPAVcPlayer@@@Z ENDP ; DAPlayerObserverClass::Set_Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Owner@DAPlayerObserverClass@@QAEPAVcPlayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Owner@DAPlayerObserverClass@@QAEPAVcPlayer@@XZ PROC ; DAPlayerObserverClass::Get_Owner, COMDAT
; _this$ = ecx

; 228  : 	inline cPlayer *Get_Owner() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 		return Owner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 230  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Owner@DAPlayerObserverClass@@QAEPAVcPlayer@@XZ ENDP ; DAPlayerObserverClass::Get_Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ??0DAPlayerObserverClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAPlayerObserverClass@@QAE@XZ PROC			; DAPlayerObserverClass::DAPlayerObserverClass, COMDAT
; _this$ = ecx

; 224  : 	DAPlayerObserverClass() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAPlayerObserverClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$DynamicVectorClass@PAUDAPlayerObserverTimerStruct@@@@QAE@IPBQAUDAPlayerObserverTimerStruct@@@Z ; DynamicVectorClass<DAPlayerObserverTimerStruct *>::DynamicVectorClass<DAPlayerObserverTimerStruct *>
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$DynamicVectorClass@PAUDAPlayerObserverChatCommandStruct@@@@QAE@IPBQAUDAPlayerObserverChatCommandStruct@@@Z ; DynamicVectorClass<DAPlayerObserverChatCommandStruct *>::DynamicVectorClass<DAPlayerObserverChatCommandStruct *>
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$DynamicVectorClass@PAUDAPlayerObserverKeyHookStruct@@@@QAE@IPBQAUDAPlayerObserverKeyHookStruct@@@Z ; DynamicVectorClass<DAPlayerObserverKeyHookStruct *>::DynamicVectorClass<DAPlayerObserverKeyHookStruct *>

; 225  : 		Set_Flags((DAPlayerFlags::Flag)0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Flags@DAPlayerObserverClass@@QAEXW4Flag@DAPlayerFlags@@@Z ; DAPlayerObserverClass::Set_Flags

; 226  : 		DeletePending = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0

; 227  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAPlayerObserverClass@@QAE@XZ ENDP			; DAPlayerObserverClass::DAPlayerObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DAPlayerClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DAPlayerClass@@QAEAAV0@ABV0@@Z PROC			; DAPlayerClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+8], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+9]
	mov	BYTE PTR [eax+9], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+10]
	mov	BYTE PTR [eax+10], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+36]
	mov	BYTE PTR [eax+36], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+37]
	mov	BYTE PTR [eax+37], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+44]
	mov	BYTE PTR [eax+44], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverClass *>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerDataClass *>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DAPlayerClass@@QAEAAV0@ABV0@@Z ENDP			; DAPlayerClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAPlayerClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DAPlayerClass@@QAE@ABV0@@Z PROC			; DAPlayerClass::DAPlayerClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+8], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+9]
	mov	BYTE PTR [eax+9], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+10]
	mov	BYTE PTR [eax+10], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+36]
	mov	BYTE PTR [eax+36], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+37]
	mov	BYTE PTR [eax+37], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+44]
	mov	BYTE PTR [eax+44], dl
	push	0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerObserverClass *>::DynamicVectorClass<DAPlayerObserverClass *>
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerDataClass *>::DynamicVectorClass<DAPlayerDataClass *>
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DAPlayerClass@@QAE@ABV0@@Z ENDP			; DAPlayerClass::DAPlayerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::~DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::~VectorClass<DAPlayerClass::DAPlayerTagStruct *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::~DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAPAUDAPlayerTagStruct@DAPlayerClass@@H@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::VectorClass<DAPlayerClass::DAPlayerTagStruct *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>::DynamicVectorClass<DAPlayerClass::DAPlayerTagStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::~VectorClass<DAPlayerClass::DAPlayerTagStruct *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEPAXI@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAPAUDAPlayerTagStruct@DAPlayerClass@@H@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHABQAUDAPlayerTagStruct@DAPlayerClass@@@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAPAUDAPlayerTagStruct@DAPlayerClass@@H@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0DO@MAHPNNNF@VectorClass?$DMstruct?5DAPlayerClass@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0DP@CMFCBLKD@VectorClass?$DMstruct?5DAPlayerClass@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0DP@CMFCBLKD@VectorClass?$DMstruct?5DAPlayerClass@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAUDAPlayerTagStruct@DAPlayerClass@@@std@@YA$$QAPAUDAPlayerTagStruct@DAPlayerClass@@AAPAU12@@Z ; std::move<DAPlayerClass::DAPlayerTagStruct * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0DP@CMFCBLKD@VectorClass?$DMstruct?5DAPlayerClass@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE_NHPBQAUDAPlayerTagStruct@DAPlayerClass@@@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UBE_NABV0@@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEABQAUDAPlayerTagStruct@DAPlayerClass@@H@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UBE_NABV0@@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEABQAUDAPlayerTagStruct@DAPlayerClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEABQAUDAPlayerTagStruct@DAPlayerClass@@H@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEABQAUDAPlayerTagStruct@DAPlayerClass@@H@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAPAUDAPlayerTagStruct@DAPlayerClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAPAUDAPlayerTagStruct@DAPlayerClass@@H@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAPAUDAPlayerTagStruct@DAPlayerClass@@H@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::~VectorClass<DAPlayerClass::DAPlayerTagStruct *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAEXXZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@UAE@XZ ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::~VectorClass<DAPlayerClass::DAPlayerTagStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEHXZ ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0ED@MCIGMKB@VectorClass?$DMstruct?5DAPlayerClass@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN11@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN12@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QBEABQAUDAPlayerTagStruct@DAPlayerClass@@H@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z PROC ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::VectorClass<DAPlayerClass::DAPlayerTagStruct *>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@PAUDAPlayerTagStruct@DAPlayerClass@@@@QAE@ABV0@@Z ENDP ; VectorClass<DAPlayerClass::DAPlayerTagStruct *>::VectorClass<DAPlayerClass::DAPlayerTagStruct *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DAPlayerDataClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DAPlayerDataClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE@XZ PROC ; DynamicVectorClass<DAPlayerDataClass *>::~DynamicVectorClass<DAPlayerDataClass *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDAPlayerDataClass@@@@UAE@XZ ; VectorClass<DAPlayerDataClass *>::~VectorClass<DAPlayerDataClass *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE@XZ ENDP ; DynamicVectorClass<DAPlayerDataClass *>::~DynamicVectorClass<DAPlayerDataClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z PROC ; DynamicVectorClass<DAPlayerDataClass *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ; DynamicVectorClass<DAPlayerDataClass *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAPAVDAPlayerDataClass@@H@Z ; VectorClass<DAPlayerDataClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z ENDP ; DynamicVectorClass<DAPlayerDataClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z PROC ; DynamicVectorClass<DAPlayerDataClass *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z ; VectorClass<DAPlayerDataClass *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z ENDP ; DynamicVectorClass<DAPlayerDataClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QBEHXZ PROC ; DynamicVectorClass<DAPlayerDataClass *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ENDP ; DynamicVectorClass<DAPlayerDataClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEXXZ PROC ; DynamicVectorClass<DAPlayerDataClass *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDAPlayerDataClass@@@@UAEXXZ ; VectorClass<DAPlayerDataClass *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAEXXZ ENDP ; DynamicVectorClass<DAPlayerDataClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z PROC ; DynamicVectorClass<DAPlayerDataClass *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z ; VectorClass<DAPlayerDataClass *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ; VectorClass<DAPlayerDataClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ; VectorClass<DAPlayerDataClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z ENDP ; DynamicVectorClass<DAPlayerDataClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerDataClass *>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerDataClass *>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerDataClass *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerDataClass *>::DynamicVectorClass<DAPlayerDataClass *>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerDataClass *>::VectorClass<DAPlayerDataClass *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAVDAPlayerDataClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerDataClass *>::DynamicVectorClass<DAPlayerDataClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z PROC ; VectorClass<DAPlayerDataClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDAPlayerDataClass@@@@UAE@XZ ; VectorClass<DAPlayerDataClass *>::~VectorClass<DAPlayerDataClass *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAVDAPlayerDataClass@@@@UAEPAXI@Z ENDP ; VectorClass<DAPlayerDataClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z PROC ; VectorClass<DAPlayerDataClass *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAPAVDAPlayerDataClass@@H@Z ; VectorClass<DAPlayerDataClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHABQAVDAPlayerDataClass@@@Z ENDP ; VectorClass<DAPlayerDataClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z PROC ; VectorClass<DAPlayerDataClass *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAPAVDAPlayerDataClass@@H@Z ; VectorClass<DAPlayerDataClass *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDAPlayerDataClass@@@@UAEHPBQAVDAPlayerDataClass@@@Z ENDP ; VectorClass<DAPlayerDataClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVDAPlayerDataClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVDAPlayerDataClass@@@@QBEHXZ PROC ; VectorClass<DAPlayerDataClass *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ENDP ; VectorClass<DAPlayerDataClass *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAVDAPlayerDataClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAVDAPlayerDataClass@@@@UAEXXZ PROC ; VectorClass<DAPlayerDataClass *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CO@NDDDNNIA@VectorClass?$DMclass?5DAPlayerDataCl@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAVDAPlayerDataClass@@@@UAEXXZ ENDP ; VectorClass<DAPlayerDataClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z PROC ; VectorClass<DAPlayerDataClass *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CP@DHEAPCNI@VectorClass?$DMclass?5DAPlayerDataCl@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CP@DHEAPCNI@VectorClass?$DMclass?5DAPlayerDataCl@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAVDAPlayerDataClass@@@std@@YA$$QAPAVDAPlayerDataClass@@AAPAV1@@Z ; std::move<DAPlayerDataClass * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CP@DHEAPCNI@VectorClass?$DMclass?5DAPlayerDataCl@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAVDAPlayerDataClass@@@@UAE_NHPBQAVDAPlayerDataClass@@@Z ENDP ; VectorClass<DAPlayerDataClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAVDAPlayerDataClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAVDAPlayerDataClass@@@@UBE_NABV0@@Z PROC ; VectorClass<DAPlayerDataClass *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ; VectorClass<DAPlayerDataClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVDAPlayerDataClass@@@@QBEABQAVDAPlayerDataClass@@H@Z ; VectorClass<DAPlayerDataClass *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAVDAPlayerDataClass@@@@UBE_NABV0@@Z ENDP ; VectorClass<DAPlayerDataClass *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDAPlayerDataClass@@@@QBEABQAVDAPlayerDataClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDAPlayerDataClass@@@@QBEABQAVDAPlayerDataClass@@H@Z PROC ; VectorClass<DAPlayerDataClass *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDAPlayerDataClass@@@@QBEABQAVDAPlayerDataClass@@H@Z ENDP ; VectorClass<DAPlayerDataClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAPAVDAPlayerDataClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAPAVDAPlayerDataClass@@H@Z PROC ; VectorClass<DAPlayerDataClass *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAPAVDAPlayerDataClass@@H@Z ENDP ; VectorClass<DAPlayerDataClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAVDAPlayerDataClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAVDAPlayerDataClass@@@@UAE@XZ PROC	; VectorClass<DAPlayerDataClass *>::~VectorClass<DAPlayerDataClass *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDAPlayerDataClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDAPlayerDataClass@@@@UAEXXZ ; VectorClass<DAPlayerDataClass *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAVDAPlayerDataClass@@@@UAE@XZ ENDP	; VectorClass<DAPlayerDataClass *>::~VectorClass<DAPlayerDataClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z PROC ; VectorClass<DAPlayerDataClass *>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVDAPlayerDataClass@@@@QBEHXZ ; VectorClass<DAPlayerDataClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0DD@OELEBJCM@VectorClass?$DMclass?5DAPlayerDataCl@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN11@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN12@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVDAPlayerDataClass@@@@QBEABQAVDAPlayerDataClass@@H@Z ; VectorClass<DAPlayerDataClass *>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z ENDP ; VectorClass<DAPlayerDataClass *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z PROC ; VectorClass<DAPlayerDataClass *>::VectorClass<DAPlayerDataClass *>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDAPlayerDataClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAVDAPlayerDataClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerDataClass *>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@PAVDAPlayerDataClass@@@@QAE@ABV0@@Z ENDP ; VectorClass<DAPlayerDataClass *>::VectorClass<DAPlayerDataClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z PROC ; DynamicVectorClass<DAPlayerObserverClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ PROC ; DynamicVectorClass<DAPlayerObserverClass *>::~DynamicVectorClass<DAPlayerObserverClass *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ ; VectorClass<DAPlayerObserverClass *>::~VectorClass<DAPlayerObserverClass *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::~DynamicVectorClass<DAPlayerObserverClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z PROC ; DynamicVectorClass<DAPlayerObserverClass *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ; DynamicVectorClass<DAPlayerObserverClass *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAPAVDAPlayerObserverClass@@H@Z ; VectorClass<DAPlayerObserverClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z PROC ; DynamicVectorClass<DAPlayerObserverClass *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z ; VectorClass<DAPlayerObserverClass *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ PROC ; DynamicVectorClass<DAPlayerObserverClass *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ PROC ; DynamicVectorClass<DAPlayerObserverClass *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ ; VectorClass<DAPlayerObserverClass *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z PROC ; DynamicVectorClass<DAPlayerObserverClass *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z ; VectorClass<DAPlayerObserverClass *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ; VectorClass<DAPlayerObserverClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ; VectorClass<DAPlayerObserverClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerObserverClass *>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverClass *>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z PROC ; DynamicVectorClass<DAPlayerObserverClass *>::DynamicVectorClass<DAPlayerObserverClass *>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z ; VectorClass<DAPlayerObserverClass *>::VectorClass<DAPlayerObserverClass *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z ENDP ; DynamicVectorClass<DAPlayerObserverClass *>::DynamicVectorClass<DAPlayerObserverClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z PROC ; VectorClass<DAPlayerObserverClass *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ ; VectorClass<DAPlayerObserverClass *>::~VectorClass<DAPlayerObserverClass *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAVDAPlayerObserverClass@@@@UAEPAXI@Z ENDP ; VectorClass<DAPlayerObserverClass *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z PROC ; VectorClass<DAPlayerObserverClass *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAPAVDAPlayerObserverClass@@H@Z ; VectorClass<DAPlayerObserverClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHABQAVDAPlayerObserverClass@@@Z ENDP ; VectorClass<DAPlayerObserverClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z PROC ; VectorClass<DAPlayerObserverClass *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAPAVDAPlayerObserverClass@@H@Z ; VectorClass<DAPlayerObserverClass *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEHPBQAVDAPlayerObserverClass@@@Z ENDP ; VectorClass<DAPlayerObserverClass *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ PROC ; VectorClass<DAPlayerObserverClass *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ENDP ; VectorClass<DAPlayerObserverClass *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ PROC ; VectorClass<DAPlayerObserverClass *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0DC@JEMMOOD@VectorClass?$DMclass?5DAPlayerObserv@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ ENDP ; VectorClass<DAPlayerObserverClass *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z PROC ; VectorClass<DAPlayerObserverClass *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0DD@ODCBLNCJ@VectorClass?$DMclass?5DAPlayerObserv@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0DD@ODCBLNCJ@VectorClass?$DMclass?5DAPlayerObserv@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAVDAPlayerObserverClass@@@std@@YA$$QAPAVDAPlayerObserverClass@@AAPAV1@@Z ; std::move<DAPlayerObserverClass * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0DD@ODCBLNCJ@VectorClass?$DMclass?5DAPlayerObserv@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAVDAPlayerObserverClass@@@@UAE_NHPBQAVDAPlayerObserverClass@@@Z ENDP ; VectorClass<DAPlayerObserverClass *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAVDAPlayerObserverClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAVDAPlayerObserverClass@@@@UBE_NABV0@@Z PROC ; VectorClass<DAPlayerObserverClass *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ; VectorClass<DAPlayerObserverClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVDAPlayerObserverClass@@@@QBEABQAVDAPlayerObserverClass@@H@Z ; VectorClass<DAPlayerObserverClass *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAVDAPlayerObserverClass@@@@UBE_NABV0@@Z ENDP ; VectorClass<DAPlayerObserverClass *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDAPlayerObserverClass@@@@QBEABQAVDAPlayerObserverClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDAPlayerObserverClass@@@@QBEABQAVDAPlayerObserverClass@@H@Z PROC ; VectorClass<DAPlayerObserverClass *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDAPlayerObserverClass@@@@QBEABQAVDAPlayerObserverClass@@H@Z ENDP ; VectorClass<DAPlayerObserverClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAPAVDAPlayerObserverClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAPAVDAPlayerObserverClass@@H@Z PROC ; VectorClass<DAPlayerObserverClass *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAPAVDAPlayerObserverClass@@H@Z ENDP ; VectorClass<DAPlayerObserverClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ PROC ; VectorClass<DAPlayerObserverClass *>::~VectorClass<DAPlayerObserverClass *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDAPlayerObserverClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVDAPlayerObserverClass@@@@UAEXXZ ; VectorClass<DAPlayerObserverClass *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAVDAPlayerObserverClass@@@@UAE@XZ ENDP ; VectorClass<DAPlayerObserverClass *>::~VectorClass<DAPlayerObserverClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z PROC ; VectorClass<DAPlayerObserverClass *>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVDAPlayerObserverClass@@@@QBEHXZ ; VectorClass<DAPlayerObserverClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0DH@FMPAOODI@VectorClass?$DMclass?5DAPlayerObserv@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN11@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN12@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVDAPlayerObserverClass@@@@QBEABQAVDAPlayerObserverClass@@H@Z ; VectorClass<DAPlayerObserverClass *>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z ENDP ; VectorClass<DAPlayerObserverClass *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z PROC ; VectorClass<DAPlayerObserverClass *>::VectorClass<DAPlayerObserverClass *>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVDAPlayerObserverClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@PAVDAPlayerObserverClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<DAPlayerObserverClass *>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@PAVDAPlayerObserverClass@@@@QAE@ABV0@@Z ENDP ; VectorClass<DAPlayerObserverClass *>::VectorClass<DAPlayerObserverClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Team@DAPlayerClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Team@DAPlayerClass@@QAEHXZ PROC			; DAPlayerClass::Get_Team, COMDAT
; _this$ = ecx

; 76   : 	inline int Get_Team() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		return Get_Owner()->Get_Player_Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerClass@@QAEPAVcPlayer@@XZ ; DAPlayerClass::Get_Owner
	mov	ecx, eax
	call	?Get_Player_Type@cPlayer@@QBEHXZ	; cPlayer::Get_Player_Type

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Team@DAPlayerClass@@QAEHXZ ENDP			; DAPlayerClass::Get_Team
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_GameObj@DAPlayerClass@@QAEPAVSoldierGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_GameObj@DAPlayerClass@@QAEPAVSoldierGameObj@@XZ PROC ; DAPlayerClass::Get_GameObj, COMDAT
; _this$ = ecx

; 73   : 	inline SoldierGameObj *Get_GameObj() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 		return Get_Owner()->Get_GameObj();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerClass@@QAEPAVcPlayer@@XZ ; DAPlayerClass::Get_Owner
	mov	ecx, eax
	call	?Get_GameObj@cPlayer@@QBEPAVSoldierGameObj@@XZ ; cPlayer::Get_GameObj

; 75   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_GameObj@DAPlayerClass@@QAEPAVSoldierGameObj@@XZ ENDP ; DAPlayerClass::Get_GameObj
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Name@DAPlayerClass@@QAEABVWideStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@DAPlayerClass@@QAEABVWideStringClass@@XZ PROC	; DAPlayerClass::Get_Name, COMDAT
; _this$ = ecx

; 70   : 	inline const WideStringClass &Get_Name() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return Get_Owner()->Get_Name();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerClass@@QAEPAVcPlayer@@XZ ; DAPlayerClass::Get_Owner
	mov	ecx, eax
	call	?Get_Name@cPlayer@@QBEABVWideStringClass@@XZ ; cPlayer::Get_Name

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@DAPlayerClass@@QAEABVWideStringClass@@XZ ENDP	; DAPlayerClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_ID@DAPlayerClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@DAPlayerClass@@QAEHXZ PROC			; DAPlayerClass::Get_ID, COMDAT
; _this$ = ecx

; 67   : 	inline int Get_ID() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 		return Get_Owner()->Get_Id();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Owner@DAPlayerClass@@QAEPAVcPlayer@@XZ ; DAPlayerClass::Get_Owner
	mov	ecx, eax
	call	?Get_Id@cPlayer@@QBEHXZ			; cPlayer::Get_Id

; 69   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@DAPlayerClass@@QAEHXZ ENDP			; DAPlayerClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ?Get_Owner@DAPlayerClass@@QAEPAVcPlayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Owner@DAPlayerClass@@QAEPAVcPlayer@@XZ PROC	; DAPlayerClass::Get_Owner, COMDAT
; _this$ = ecx

; 64   : 	inline cPlayer *Get_Owner() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		return Owner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 66   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Owner@DAPlayerClass@@QAEPAVcPlayer@@XZ ENDP	; DAPlayerClass::Get_Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ??S@YA?AW4Flag@DAPlayerFlags@@W401@@Z
_TEXT	SEGMENT
_First$ = 8						; size = 4
??S@YA?AW4Flag@DAPlayerFlags@@W401@@Z PROC		; operator~, COMDAT

; 50   : inline DAPlayerFlags::Flag operator~(DAPlayerFlags::Flag First) {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 51   : 	return (DAPlayerFlags::Flag)(~+First);

	mov	eax, DWORD PTR _First$[ebp]
	not	eax

; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??S@YA?AW4Flag@DAPlayerFlags@@W401@@Z ENDP		; operator~
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ??_4@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z
_TEXT	SEGMENT
_First$ = 8						; size = 4
_Second$ = 12						; size = 4
??_4@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z PROC	; operator&=, COMDAT

; 47   : inline DAPlayerFlags::Flag operator&=(DAPlayerFlags::Flag &First,DAPlayerFlags::Flag Second) {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 48   : 	return First = (DAPlayerFlags::Flag)(+First & +Second);

	mov	eax, DWORD PTR _First$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, DWORD PTR _Second$[ebp]
	mov	edx, DWORD PTR _First$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _First$[ebp]
	mov	eax, DWORD PTR [eax]

; 49   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_4@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z ENDP	; operator&=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_player.h
;	COMDAT ??_5@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z
_TEXT	SEGMENT
_First$ = 8						; size = 4
_Second$ = 12						; size = 4
??_5@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z PROC	; operator|=, COMDAT

; 44   : inline DAPlayerFlags::Flag operator|=(DAPlayerFlags::Flag &First,DAPlayerFlags::Flag Second) {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 45   : 	return First = (DAPlayerFlags::Flag)(+First | +Second);

	mov	eax, DWORD PTR _First$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, DWORD PTR _Second$[ebp]
	mov	edx, DWORD PTR _First$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _First$[ebp]
	mov	eax, DWORD PTR [eax]

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_5@YA?AW4Flag@DAPlayerFlags@@AAW401@W401@@Z ENDP	; operator|=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAGameModeClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAGameModeClass@@UAEPAXI@Z PROC			; DAGameModeClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAGameModeClass@@UAE@XZ		; DAGameModeClass::~DAGameModeClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAGameModeClass@@UAEPAXI@Z ENDP			; DAGameModeClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAGameModeClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAGameModeClass@@QAE@XZ PROC				; DAGameModeClass::DAGameModeClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAGameModeClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAGameModeClass@@QAE@XZ ENDP				; DAGameModeClass::DAGameModeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gamemode.h
;	COMDAT ??1DAGameModeClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAGameModeClass@@UAE@XZ PROC				; DAGameModeClass::~DAGameModeClass, COMDAT
; _this$ = ecx

; 59   : 	virtual ~DAGameModeClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAGameModeClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAGameModeClass@@UAE@XZ ENDP				; DAGameModeClass::~DAGameModeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gamemode.h
;	COMDAT ?Set_Factory@DAGameModeClass@@QAEXPBVDAGameModeFactoryClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Factory$ = 8						; size = 4
?Set_Factory@DAGameModeClass@@QAEXPBVDAGameModeFactoryClass@@@Z PROC ; DAGameModeClass::Set_Factory, COMDAT
; _this$ = ecx

; 55   : 	inline void Set_Factory(const DAGameModeFactoryClass *Factory) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		this->Factory = Factory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Factory$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Factory@DAGameModeClass@@QAEXPBVDAGameModeFactoryClass@@@Z ENDP ; DAGameModeClass::Set_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAGameModeFactoryClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAGameModeFactoryClass@@UAEPAXI@Z PROC		; DAGameModeFactoryClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAGameModeFactoryClass@@UAE@XZ	; DAGameModeFactoryClass::~DAGameModeFactoryClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAGameModeFactoryClass@@UAEPAXI@Z ENDP		; DAGameModeFactoryClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gamemode.h
;	COMDAT ?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ PROC ; DAGameModeFactoryClass::Get_Instance, COMDAT
; _this$ = ecx

; 29   : 	inline DAGameModeClass *Get_Instance() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 		return Instance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 31   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Instance@DAGameModeFactoryClass@@QBEPAVDAGameModeClass@@XZ ENDP ; DAGameModeFactoryClass::Get_Instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_gamemode.h
;	COMDAT ??1DAGameModeFactoryClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAGameModeFactoryClass@@UAE@XZ PROC			; DAGameModeFactoryClass::~DAGameModeFactoryClass, COMDAT
; _this$ = ecx

; 22   : 	virtual ~DAGameModeFactoryClass() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAGameModeFactoryClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAGameModeFactoryClass@@UAE@XZ ENDP			; DAGameModeFactoryClass::~DAGameModeFactoryClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EDAEventClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDAEventClass@@UAEPAXI@Z PROC			; DAEventClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DAEventClass@@UAE@XZ		; DAEventClass::~DAEventClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAEventClass@@UAE@XZ			; DAEventClass::~DAEventClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDAEventClass@@UAEPAXI@Z ENDP			; DAEventClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GDAEventClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDAEventClass@@UAEPAXI@Z PROC			; DAEventClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DAEventClass@@UAE@XZ			; DAEventClass::~DAEventClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDAEventClass@@UAEPAXI@Z ENDP			; DAEventClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DAEventClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DAEventClass@@QAEAAV0@ABV0@@Z PROC			; DAEventClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DAEventClass@@QAEAAV0@ABV0@@Z ENDP			; DAEventClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAEventClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DAEventClass@@QAE@ABV0@@Z PROC			; DAEventClass::DAEventClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAEventClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0DAEventClass@@QAE@ABV0@@Z ENDP			; DAEventClass::DAEventClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DAEventClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DAEventClass@@QAE@XZ PROC				; DAEventClass::DAEventClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAEventClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DAEventClass@@QAE@XZ ENDP				; DAEventClass::DAEventClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ??1DAEventClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DAEventClass@@UAE@XZ PROC				; DAEventClass::~DAEventClass, COMDAT
; _this$ = ecx

; 484  : 	virtual ~DAEventClass() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DAEventClass@@6B@

; 485  : 		Clear_Events();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Events@DAEventClass@@QAEXXZ	; DAEventClass::Clear_Events

; 486  : 		Clear_Object_Events();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Object_Events@DAEventClass@@QAEXXZ ; DAEventClass::Clear_Object_Events

; 487  : 		Clear_Timers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Timers@DAEventClass@@QAEXXZ	; DAEventClass::Clear_Timers

; 488  : 		Clear_Chat_Commands();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Chat_Commands@DAEventClass@@QAEXXZ ; DAEventClass::Clear_Chat_Commands

; 489  : 		Clear_Key_Hooks();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear_Key_Hooks@DAEventClass@@QAEXXZ	; DAEventClass::Clear_Key_Hooks

; 490  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DAEventClass@@UAE@XZ ENDP				; DAEventClass::~DAEventClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Timer_Expired@DAEventClass@@UAEXHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Number$ = 8						; size = 4
_Data$ = 12						; size = 4
?Timer_Expired@DAEventClass@@UAEXHI@Z PROC		; DAEventClass::Timer_Expired, COMDAT
; _this$ = ecx

; 482  : 	virtual void Timer_Expired(int Number,unsigned int Data) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@DAEventClass@@UAEXHI@Z ENDP		; DAEventClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z PROC ; DAEventClass::Object_Destroyed_Event, COMDAT
; _this$ = ecx

; 480  : 	virtual void Object_Destroyed_Event(GameObject *obj) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Object_Destroyed_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; DAEventClass::Object_Destroyed_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Exiter$ = 12						; size = 4
?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z PROC ; DAEventClass::Zone_Exit_Event, COMDAT
; _this$ = ecx

; 479  : 	virtual void Zone_Exit_Event(ScriptZoneGameObj *obj,PhysicalGameObj *Exiter) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Zone_Exit_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z ENDP ; DAEventClass::Zone_Exit_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Enterer$ = 12						; size = 4
?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z PROC ; DAEventClass::Zone_Enter_Event, COMDAT
; _this$ = ecx

; 478  : 	virtual void Zone_Enter_Event(ScriptZoneGameObj *obj,PhysicalGameObj *Enterer) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Zone_Enter_Event@DAEventClass@@UAEXPAVScriptZoneGameObj@@PAVPhysicalGameObj@@@Z ENDP ; DAEventClass::Zone_Enter_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_obj$ = 12						; size = 4
?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z PROC ; DAEventClass::Poke_Event, COMDAT
; _this$ = ecx

; 477  : 	virtual void Poke_Event(cPlayer *Player,PhysicalGameObj *obj) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poke_Event@DAEventClass@@UAEXPAVcPlayer@@PAVPhysicalGameObj@@@Z ENDP ; DAEventClass::Poke_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_Type$ = 12						; size = 4
_Param$ = 16						; size = 4
_Sender$ = 20						; size = 4
?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; DAEventClass::Custom_Event, COMDAT
; _this$ = ecx

; 476  : 	virtual void Custom_Event(GameObject *obj,int Type,int Param,GameObject *Sender) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom_Event@DAEventClass@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; DAEventClass::Custom_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Killer$ = 12						; size = 4
_Damage$ = 16						; size = 4
_Warhead$ = 20						; size = 4
_Scale$ = 24						; size = 4
_Type$ = 28						; size = 4
?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAEventClass::Kill_Event, COMDAT
; _this$ = ecx

; 475  : 	virtual void Kill_Event(DamageableGameObj *Victim,ArmedGameObj *Killer,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Kill_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAEventClass::Kill_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damager$ = 12						; size = 4
_Damage$ = 16						; size = 4
_Warhead$ = 20						; size = 4
_Scale$ = 24						; size = 4
_Type$ = 28						; size = 4
?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z PROC ; DAEventClass::Damage_Event, COMDAT
; _this$ = ecx

; 474  : 	virtual void Damage_Event(DamageableGameObj *Victim,ArmedGameObj *Damager,float Damage,unsigned int Warhead,float Scale,DADamageType::Type Type){ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Damage_Event@DAEventClass@@UAEXPAVDamageableGameObj@@PAVArmedGameObj@@MIMW4Type@DADamageType@@@Z ENDP ; DAEventClass::Damage_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damager$ = 12						; size = 4
_Damage$ = 16						; size = 4
_Warhead$ = 20						; size = 4
_Scale$ = 24						; size = 4
_Type$ = 28						; size = 4
?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z PROC ; DAEventClass::Damage_Request_Event, COMDAT
; _this$ = ecx

; 473  : 	virtual bool Damage_Request_Event(DamageableGameObj *Victim,ArmedGameObj *Damager,float &Damage,unsigned int &Warhead,float Scale,DADamageType::Type Type) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@AAMAAIMW4Type@DADamageType@@@Z ENDP ; DAEventClass::Damage_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damager$ = 12						; size = 4
_Ammo$ = 16						; size = 4
_Bone$ = 20						; size = 4
?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z PROC ; DAEventClass::TT_Client_Damage_Request_Event, COMDAT
; _this$ = ecx

; 472  : 	virtual bool TT_Client_Damage_Request_Event(DamageableGameObj *Victim,ArmedGameObj *Damager,const AmmoDefinitionClass *Ammo,const char *Bone) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?TT_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@PBVAmmoDefinitionClass@@PBD@Z ENDP ; DAEventClass::TT_Client_Damage_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Victim$ = 8						; size = 4
_Damager$ = 12						; size = 4
_Damage$ = 16						; size = 4
_Warhead$ = 20						; size = 4
?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z PROC ; DAEventClass::Stock_Client_Damage_Request_Event, COMDAT
; _this$ = ecx

; 471  : 	virtual bool Stock_Client_Damage_Request_Event(DamageableGameObj *Victim,ArmedGameObj *Damager,float Damage,uint Warhead) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Stock_Client_Damage_Request_Event@DAEventClass@@UAE_NPAVDamageableGameObj@@PAVArmedGameObj@@MI@Z ENDP ; DAEventClass::Stock_Client_Damage_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z PROC ; DAEventClass::Object_Created_Event, COMDAT
; _this$ = ecx

; 470  : 	virtual void Object_Created_Event(GameObject *obj) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Object_Created_Event@DAEventClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; DAEventClass::Object_Created_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Type$ = 12						; size = 4
_Dialog$ = 16						; size = 4
_Control$ = 20						; size = 4
?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z PROC ; DAEventClass::Dialog_Event, COMDAT
; _this$ = ecx

; 468  : 	virtual void Dialog_Event(cPlayer *Player, DialogMessageType Type, ScriptedDialogClass* Dialog, ScriptedControlClass* Control) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dialog_Event@DAEventClass@@UAEXPAVcPlayer@@W4DialogMessageType@@PAVScriptedDialogClass@@PAVScriptedControlClass@@@Z ENDP ; DAEventClass::Dialog_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Think@DAEventClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Think@DAEventClass@@UAEXXZ PROC			; DAEventClass::Think, COMDAT
; _this$ = ecx

; 467  : 	virtual void Think() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Think@DAEventClass@@UAEXXZ ENDP			; DAEventClass::Think
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Factory$ = 8						; size = 4
_Vehicle$ = 12						; size = 4
_Player$ = 16						; size = 4
_Delay$ = 20						; size = 4
_Owner$ = 24						; size = 4
?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z PROC ; DAEventClass::Request_Vehicle_Event, COMDAT
; _this$ = ecx

; 466  : 	virtual bool Request_Vehicle_Event(VehicleFactoryGameObj *Factory,const VehicleGameObjDef *Vehicle,cPlayer *Player,float Delay,SoldierGameObj *Owner) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Request_Vehicle_Event@DAEventClass@@UAE_NPAVVehicleFactoryGameObj@@PBVVehicleGameObjDef@@PAVcPlayer@@MPAVSoldierGameObj@@@Z ENDP ; DAEventClass::Request_Vehicle_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z PROC ; DAEventClass::Vehicle_Flip_Event, COMDAT
; _this$ = ecx

; 465  : 	virtual bool Vehicle_Flip_Event(VehicleGameObj *Vehicle) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Vehicle_Flip_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@@Z ENDP ; DAEventClass::Vehicle_Flip_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Soldier$ = 12						; size = 4
?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z PROC ; DAEventClass::Change_Character_Event, COMDAT
; _this$ = ecx

; 464  : 	virtual void Change_Character_Event(cPlayer *Player,const SoldierGameObjDef *Soldier) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Change_Character_Event@DAEventClass@@UAEXPAVcPlayer@@PBVSoldierGameObjDef@@@Z ENDP ; DAEventClass::Change_Character_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_C4$ = 8						; size = 4
?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z PROC ; DAEventClass::C4_Detonate_Event, COMDAT
; _this$ = ecx

; 463  : 	virtual void C4_Detonate_Event(C4GameObj *C4) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?C4_Detonate_Event@DAEventClass@@UAEXPAVC4GameObj@@@Z ENDP ; DAEventClass::C4_Detonate_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_C4$ = 8						; size = 4
_Triggerer$ = 12					; size = 4
?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z PROC ; DAEventClass::C4_Detonate_Request_Event, COMDAT
; _this$ = ecx

; 462  : 	virtual bool C4_Detonate_Request_Event(C4GameObj *C4,SmartGameObj *Triggerer) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?C4_Detonate_Request_Event@DAEventClass@@UAE_NPAVC4GameObj@@PAVSmartGameObj@@@Z ENDP ; DAEventClass::C4_Detonate_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Beacon$ = 8						; size = 4
?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z PROC ; DAEventClass::Beacon_Detonate_Event, COMDAT
; _this$ = ecx

; 461  : 	virtual void Beacon_Detonate_Event(BeaconGameObj *Beacon) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Beacon_Detonate_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z ENDP ; DAEventClass::Beacon_Detonate_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Beacon$ = 8						; size = 4
?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z PROC ; DAEventClass::Beacon_Deploy_Event, COMDAT
; _this$ = ecx

; 460  : 	virtual void Beacon_Deploy_Event(BeaconGameObj *Beacon) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Beacon_Deploy_Event@DAEventClass@@UAEXPAVBeaconGameObj@@@Z ENDP ; DAEventClass::Beacon_Deploy_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z PROC ; DAEventClass::Clear_Weapons_Event, COMDAT
; _this$ = ecx

; 459  : 	virtual void Clear_Weapons_Event(cPlayer *Player) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Clear_Weapons_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ENDP ; DAEventClass::Clear_Weapons_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Weapon$ = 12						; size = 4
?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z PROC ; DAEventClass::Remove_Weapon_Event, COMDAT
; _this$ = ecx

; 458  : 	virtual void Remove_Weapon_Event(cPlayer *Player,WeaponClass *Weapon) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Remove_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z ENDP ; DAEventClass::Remove_Weapon_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Weapon$ = 12						; size = 4
?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z PROC ; DAEventClass::Add_Weapon_Event, COMDAT
; _this$ = ecx

; 457  : 	virtual void Add_Weapon_Event(cPlayer *Player,WeaponClass *Weapon) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Add_Weapon_Event@DAEventClass@@UAEXPAVcPlayer@@PAVWeaponClass@@@Z ENDP ; DAEventClass::Add_Weapon_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Weapon$ = 12						; size = 4
?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z PROC ; DAEventClass::Add_Weapon_Request_Event, COMDAT
; _this$ = ecx

; 456  : 	virtual bool Add_Weapon_Request_Event(cPlayer *Player,const WeaponDefinitionClass *Weapon) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Add_Weapon_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVWeaponDefinitionClass@@@Z ENDP ; DAEventClass::Add_Weapon_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_PowerUp$ = 12						; size = 4
_PowerUpObj$ = 16					; size = 4
?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z PROC ; DAEventClass::PowerUp_Grant_Event, COMDAT
; _this$ = ecx

; 455  : 	virtual void PowerUp_Grant_Event(cPlayer *Player,const PowerUpGameObjDef *PowerUp,PowerUpGameObj *PowerUpObj) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PowerUp_Grant_Event@DAEventClass@@UAEXPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ENDP ; DAEventClass::PowerUp_Grant_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_PowerUp$ = 12						; size = 4
_PowerUpObj$ = 16					; size = 4
?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z PROC ; DAEventClass::PowerUp_Grant_Request_Event, COMDAT
; _this$ = ecx

; 454  : 	virtual bool PowerUp_Grant_Request_Event(cPlayer *Player,const PowerUpGameObjDef *PowerUp,PowerUpGameObj *PowerUpObj) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PowerUp_Grant_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@PBVPowerUpGameObjDef@@PAVPowerUpGameObj@@@Z ENDP ; DAEventClass::PowerUp_Grant_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Player$ = 12						; size = 4
_Seat$ = 16						; size = 4
?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z PROC ; DAEventClass::Vehicle_Exit_Event, COMDAT
; _this$ = ecx

; 453  : 	virtual void Vehicle_Exit_Event(VehicleGameObj *Vehicle,cPlayer *Player,int Seat) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Vehicle_Exit_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z ENDP ; DAEventClass::Vehicle_Exit_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Player$ = 12						; size = 4
_Seat$ = 16						; size = 4
?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z PROC ; DAEventClass::Vehicle_Enter_Event, COMDAT
; _this$ = ecx

; 452  : 	virtual void Vehicle_Enter_Event(VehicleGameObj *Vehicle,cPlayer *Player,int Seat) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Vehicle_Enter_Event@DAEventClass@@UAEXPAVVehicleGameObj@@PAVcPlayer@@H@Z ENDP ; DAEventClass::Vehicle_Enter_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Vehicle$ = 8						; size = 4
_Player$ = 12						; size = 4
_Seat$ = 16						; size = 4
?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z PROC ; DAEventClass::Vehicle_Entry_Request_Event, COMDAT
; _this$ = ecx

; 451  : 	virtual bool Vehicle_Entry_Request_Event(VehicleGameObj *Vehicle,cPlayer *Player,int &Seat) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Vehicle_Entry_Request_Event@DAEventClass@@UAE_NPAVVehicleGameObj@@PAVcPlayer@@AAH@Z ENDP ; DAEventClass::Vehicle_Entry_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z PROC ; DAEventClass::Team_Change_Event, COMDAT
; _this$ = ecx

; 450  : 	virtual void Team_Change_Event(cPlayer *Player) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Team_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ENDP ; DAEventClass::Team_Change_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z PROC ; DAEventClass::Team_Change_Request_Event, COMDAT
; _this$ = ecx

; 449  : 	virtual bool Team_Change_Request_Event(cPlayer *Player) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Team_Change_Request_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z ENDP ; DAEventClass::Team_Change_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z PROC	; DAEventClass::Suicide_Event, COMDAT
; _this$ = ecx

; 448  : 	virtual bool Suicide_Event(cPlayer *Player) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Suicide_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z ENDP	; DAEventClass::Suicide_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z PROC	; DAEventClass::Refill_Event, COMDAT
; _this$ = ecx

; 447  : 	virtual bool Refill_Event(cPlayer *Player) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Refill_Event@DAEventClass@@UAE_NPAVcPlayer@@@Z ENDP	; DAEventClass::Refill_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Cost$ = 12						; size = 4
_ID$ = 16						; size = 4
?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z PROC ; DAEventClass::Custom_Purchase_Event, COMDAT
; _this$ = ecx

; 446  : 	virtual void Custom_Purchase_Event(cPlayer *Player,float Cost,unsigned int ID) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Custom_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MI@Z ENDP ; DAEventClass::Custom_Purchase_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Cost$ = 12						; size = 4
_Item$ = 16						; size = 4
?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z PROC ; DAEventClass::PowerUp_Purchase_Event, COMDAT
; _this$ = ecx

; 445  : 	virtual void PowerUp_Purchase_Event(cPlayer *Player,float Cost,const PowerUpGameObjDef *Item) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PowerUp_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVPowerUpGameObjDef@@@Z ENDP ; DAEventClass::PowerUp_Purchase_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Cost$ = 12						; size = 4
_Item$ = 16						; size = 4
?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z PROC ; DAEventClass::Vehicle_Purchase_Event, COMDAT
; _this$ = ecx

; 444  : 	virtual void Vehicle_Purchase_Event(cPlayer *Player,float Cost,const VehicleGameObjDef *Item) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Vehicle_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVVehicleGameObjDef@@@Z ENDP ; DAEventClass::Vehicle_Purchase_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Cost$ = 12						; size = 4
_Item$ = 16						; size = 4
?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z PROC ; DAEventClass::Character_Purchase_Event, COMDAT
; _this$ = ecx

; 443  : 	virtual void Character_Purchase_Event(cPlayer *Player,float Cost,const SoldierGameObjDef *Item) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Character_Purchase_Event@DAEventClass@@UAEXPAVcPlayer@@MPBVSoldierGameObjDef@@@Z ENDP ; DAEventClass::Character_Purchase_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Base$ = 8						; size = 4
_Player$ = 12						; size = 4
_Cost$ = 16						; size = 4
_ID$ = 20						; size = 4
?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z PROC ; DAEventClass::Custom_Purchase_Request_Event, COMDAT
; _this$ = ecx

; 442  : 	virtual int Custom_Purchase_Request_Event(BaseControllerClass *Base,cPlayer *Player,float &Cost,unsigned int ID) { return -1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMI@Z ENDP ; DAEventClass::Custom_Purchase_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Base$ = 8						; size = 4
_Player$ = 12						; size = 4
_Cost$ = 16						; size = 4
_Item$ = 20						; size = 4
?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z PROC ; DAEventClass::PowerUp_Purchase_Request_Event, COMDAT
; _this$ = ecx

; 441  : 	virtual int PowerUp_Purchase_Request_Event(BaseControllerClass *Base,cPlayer *Player,float &Cost,const PowerUpGameObjDef *Item) { return -1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?PowerUp_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVPowerUpGameObjDef@@@Z ENDP ; DAEventClass::PowerUp_Purchase_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Base$ = 8						; size = 4
_Player$ = 12						; size = 4
_Cost$ = 16						; size = 4
_Item$ = 20						; size = 4
?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z PROC ; DAEventClass::Vehicle_Purchase_Request_Event, COMDAT
; _this$ = ecx

; 440  : 	virtual int Vehicle_Purchase_Request_Event(BaseControllerClass *Base,cPlayer *Player,float &Cost,const VehicleGameObjDef *Item) { return -1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Vehicle_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVVehicleGameObjDef@@@Z ENDP ; DAEventClass::Vehicle_Purchase_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Base$ = 8						; size = 4
_Player$ = 12						; size = 4
_Cost$ = 16						; size = 4
_Item$ = 20						; size = 4
?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z PROC ; DAEventClass::Character_Purchase_Request_Event, COMDAT
; _this$ = ecx

; 439  : 	virtual int Character_Purchase_Request_Event(BaseControllerClass *Base,cPlayer *Player,float &Cost,const SoldierGameObjDef *Item) { return -1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Character_Purchase_Request_Event@DAEventClass@@UAEHPAVBaseControllerClass@@PAVcPlayer@@AAMPBVSoldierGameObjDef@@@Z ENDP ; DAEventClass::Character_Purchase_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?DA_Log_Event@DAEventClass@@UAEXPBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Header$ = 8						; size = 4
_Output$ = 12						; size = 4
?DA_Log_Event@DAEventClass@@UAEXPBD0@Z PROC		; DAEventClass::DA_Log_Event, COMDAT
; _this$ = ecx

; 438  : 	virtual void DA_Log_Event(const char *Header,const char *Output) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?DA_Log_Event@DAEventClass@@UAEXPBD0@Z ENDP		; DAEventClass::DA_Log_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Ren_Log_Event@DAEventClass@@UAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Output$ = 8						; size = 4
?Ren_Log_Event@DAEventClass@@UAEXPBD@Z PROC		; DAEventClass::Ren_Log_Event, COMDAT
; _this$ = ecx

; 437  : 	virtual void Ren_Log_Event(const char *Output) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Ren_Log_Event@DAEventClass@@UAEXPBD@Z ENDP		; DAEventClass::Ren_Log_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Console_Output_Event@DAEventClass@@UAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Output$ = 8						; size = 4
?Console_Output_Event@DAEventClass@@UAEXPBD@Z PROC	; DAEventClass::Console_Output_Event, COMDAT
; _this$ = ecx

; 436  : 	virtual void Console_Output_Event(const char *Output) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Console_Output_Event@DAEventClass@@UAEXPBD@Z ENDP	; DAEventClass::Console_Output_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Game_Over_Event@DAEventClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Game_Over_Event@DAEventClass@@UAEXXZ PROC		; DAEventClass::Game_Over_Event, COMDAT
; _this$ = ecx

; 435  : 	virtual void Game_Over_Event() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Game_Over_Event@DAEventClass@@UAEXXZ ENDP		; DAEventClass::Game_Over_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Swap_Event@DAEventClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Swap_Event@DAEventClass@@UAEXXZ PROC			; DAEventClass::Swap_Event, COMDAT
; _this$ = ecx

; 434  : 	virtual void Swap_Event() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Swap_Event@DAEventClass@@UAEXXZ ENDP			; DAEventClass::Swap_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Rebalance_Event@DAEventClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Rebalance_Event@DAEventClass@@UAEXXZ PROC		; DAEventClass::Rebalance_Event, COMDAT
; _this$ = ecx

; 433  : 	virtual void Rebalance_Event() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rebalance_Event@DAEventClass@@UAEXXZ ENDP		; DAEventClass::Rebalance_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Remix_Event@DAEventClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Remix_Event@DAEventClass@@UAEXXZ PROC			; DAEventClass::Remix_Event, COMDAT
; _this$ = ecx

; 432  : 	virtual void Remix_Event() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remix_Event@DAEventClass@@UAEXXZ ENDP			; DAEventClass::Remix_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Level_Loaded_Event@DAEventClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Level_Loaded_Event@DAEventClass@@UAEXXZ PROC		; DAEventClass::Level_Loaded_Event, COMDAT
; _this$ = ecx

; 431  : 	virtual void Level_Loaded_Event() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Level_Loaded_Event@DAEventClass@@UAEXXZ ENDP		; DAEventClass::Level_Loaded_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z PROC ; DAEventClass::Name_Change_Event, COMDAT
; _this$ = ecx

; 430  : 	virtual void Name_Change_Event(cPlayer *Player) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Name_Change_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ENDP ; DAEventClass::Name_Change_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z PROC ; DAEventClass::Player_Loaded_Event, COMDAT
; _this$ = ecx

; 429  : 	virtual void Player_Loaded_Event(cPlayer *Player) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Player_Loaded_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ENDP ; DAEventClass::Player_Loaded_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z PROC ; DAEventClass::Player_Leave_Event, COMDAT
; _this$ = ecx

; 428  : 	virtual void Player_Leave_Event(cPlayer *Player) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Player_Leave_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ENDP ; DAEventClass::Player_Leave_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z PROC ; DAEventClass::Player_Join_Event, COMDAT
; _this$ = ecx

; 427  : 	virtual void Player_Join_Event(cPlayer *Player) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Player_Join_Event@DAEventClass@@UAEXPAVcPlayer@@@Z ENDP ; DAEventClass::Player_Join_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Request$ = 8						; size = 4
?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z PROC ; DAEventClass::Player_Pre_Join_Event, COMDAT
; _this$ = ecx

; 426  : 	virtual void Player_Pre_Join_Event(ConnectionRequest &Request) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Player_Pre_Join_Event@DAEventClass@@UAEXAAUConnectionRequest@@@Z ENDP ; DAEventClass::Player_Pre_Join_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Request$ = 8						; size = 4
_RefusalMessage$ = 12					; size = 4
?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z PROC ; DAEventClass::Connection_Request_Event, COMDAT
; _this$ = ecx

; 425  : 	virtual ConnectionAcceptanceFilter::STATUS Connection_Request_Event(ConnectionRequest &Request,WideStringClass &RefusalMessage) { return ConnectionAcceptanceFilter::STATUS_ACCEPTING; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 2
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Connection_Request_Event@DAEventClass@@UAE?AW4STATUS@ConnectionAcceptanceFilter@@AAUConnectionRequest@@AAVWideStringClass@@@Z ENDP ; DAEventClass::Connection_Request_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_PlayerType$ = 12					; size = 4
_AnnouncementID$ = 16					; size = 4
_IconID$ = 20						; size = 4
_AnnouncementType$ = 24					; size = 4
?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z PROC ; DAEventClass::Radio_Event, COMDAT
; _this$ = ecx

; 424  : 	virtual bool Radio_Event(cPlayer *Player,int PlayerType,int AnnouncementID,int IconID,AnnouncementEnum AnnouncementType) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Radio_Event@DAEventClass@@UAE_NPAVcPlayer@@HHHW4AnnouncementEnum@@@Z ENDP ; DAEventClass::Radio_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_Type$ = 12						; size = 4
_Message$ = 16						; size = 4
?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z PROC ; DAEventClass::Host_Chat_Event, COMDAT
; _this$ = ecx

; 423  : 	virtual bool Host_Chat_Event(int ID,TextMessageEnum Type,const char *Message) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Host_Chat_Event@DAEventClass@@UAE_NHW4TextMessageEnum@@PBD@Z ENDP ; DAEventClass::Host_Chat_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Key$ = 12						; size = 4
?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z PROC ; DAEventClass::Key_Hook_Event, COMDAT
; _this$ = ecx

; 422  : 	virtual bool Key_Hook_Event(cPlayer *Player,const StringClass &Key) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Key_Hook_Event@DAEventClass@@UAE_NPAVcPlayer@@ABVStringClass@@@Z ENDP ; DAEventClass::Key_Hook_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Type$ = 12						; size = 4
_Command$ = 16						; size = 4
_Text$ = 20						; size = 4
_ReceiverID$ = 24					; size = 4
?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z PROC ; DAEventClass::Chat_Command_Event, COMDAT
; _this$ = ecx

; 421  : 	virtual bool Chat_Command_Event(cPlayer *Player,TextMessageEnum Type,const StringClass &Command,const DATokenClass &Text,int ReceiverID) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Chat_Command_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@ABVStringClass@@ABVDATokenClass@@H@Z ENDP ; DAEventClass::Chat_Command_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Player$ = 8						; size = 4
_Type$ = 12						; size = 4
_Message$ = 16						; size = 4
_ReceiverID$ = 20					; size = 4
?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z PROC ; DAEventClass::Chat_Event, COMDAT
; _this$ = ecx

; 420  : 	virtual bool Chat_Event(cPlayer *Player,TextMessageEnum Type,const wchar_t *Message,int ReceiverID) { return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Chat_Event@DAEventClass@@UAE_NPAVcPlayer@@W4TextMessageEnum@@PB_WH@Z ENDP ; DAEventClass::Chat_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Settings_Loaded_Event@DAEventClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Settings_Loaded_Event@DAEventClass@@UAEXXZ PROC	; DAEventClass::Settings_Loaded_Event, COMDAT
; _this$ = ecx

; 419  : 	virtual void Settings_Loaded_Event() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Settings_Loaded_Event@DAEventClass@@UAEXXZ ENDP	; DAEventClass::Settings_Loaded_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Clear_Timers@DAEventClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear_Timers@DAEventClass@@QAEXXZ PROC			; DAEventClass::Clear_Timers, COMDAT
; _this$ = ecx

; 409  : 	inline void Clear_Timers() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 410  : 		DAEventManager::Clear_Timers(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Clear_Timers@DAEventManager@@SAXPAVDAEventClass@@@Z ; DAEventManager::Clear_Timers
	add	esp, 4

; 411  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Timers@DAEventClass@@QAEXXZ ENDP			; DAEventClass::Clear_Timers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Is_Timer@DAEventClass@@QAE_NHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Number$ = 8						; size = 4
_Data$ = 12						; size = 4
?Is_Timer@DAEventClass@@QAE_NHI@Z PROC			; DAEventClass::Is_Timer, COMDAT
; _this$ = ecx

; 406  : 	inline bool Is_Timer(int Number,unsigned int Data = 0) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 407  : 		return DAEventManager::Is_Timer(this,Number,Data);

	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Number$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?Is_Timer@DAEventManager@@SA_NPAVDAEventClass@@HI@Z ; DAEventManager::Is_Timer
	add	esp, 12					; 0000000cH

; 408  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Is_Timer@DAEventClass@@QAE_NHI@Z ENDP			; DAEventClass::Is_Timer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Stop_Timer@DAEventClass@@QAEXHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Number$ = 8						; size = 4
_Data$ = 12						; size = 4
?Stop_Timer@DAEventClass@@QAEXHI@Z PROC			; DAEventClass::Stop_Timer, COMDAT
; _this$ = ecx

; 403  : 	inline void Stop_Timer(int Number,unsigned int Data = 0) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 404  : 		DAEventManager::Stop_Timer(this,Number,Data);

	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Number$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?Stop_Timer@DAEventManager@@SAXPAVDAEventClass@@HI@Z ; DAEventManager::Stop_Timer
	add	esp, 12					; 0000000cH

; 405  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Stop_Timer@DAEventClass@@QAEXHI@Z ENDP			; DAEventClass::Stop_Timer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Start_Timer@DAEventClass@@QAEXHM_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Number$ = 8						; size = 4
_Duration$ = 12						; size = 4
_Repeat$ = 16						; size = 1
_Data$ = 20						; size = 4
?Start_Timer@DAEventClass@@QAEXHM_NI@Z PROC		; DAEventClass::Start_Timer, COMDAT
; _this$ = ecx

; 400  : 	inline void Start_Timer(int Number,float Duration,bool Repeat = false,unsigned int Data = 0) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 401  : 		DAEventManager::Start_Timer(this,Number,Duration,Repeat,Data);

	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Repeat$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _Duration$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _Number$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Start_Timer@DAEventManager@@SAXPAVDAEventClass@@HM_NI@Z ; DAEventManager::Start_Timer
	add	esp, 20					; 00000014H

; 402  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Start_Timer@DAEventClass@@QAEXHM_NI@Z ENDP		; DAEventClass::Start_Timer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Clear_Object_Events@DAEventClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear_Object_Events@DAEventClass@@QAEXXZ PROC		; DAEventClass::Clear_Object_Events, COMDAT
; _this$ = ecx

; 397  : 	inline void Clear_Object_Events() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 398  : 		DAEventManager::Clear_Object_Events(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Clear_Object_Events@DAEventManager@@SAXPAVDAEventClass@@@Z ; DAEventManager::Clear_Object_Events
	add	esp, 4

; 399  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Object_Events@DAEventClass@@QAEXXZ ENDP		; DAEventClass::Clear_Object_Events
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Unregister_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 4
?Unregister_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@@Z PROC ; DAEventClass::Unregister_Object_Event, COMDAT
; _this$ = ecx

; 394  : 	inline void Unregister_Object_Event(DAObjectEvent::Type Type) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 395  : 		DAEventManager::Unregister_Object_Event(this,Type);

	mov	eax, DWORD PTR _Type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Unregister_Object_Event@DAEventManager@@SAXPAVDAEventClass@@W4Type@DAObjectEvent@@@Z ; DAEventManager::Unregister_Object_Event
	add	esp, 8

; 396  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Unregister_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@@Z ENDP ; DAEventClass::Unregister_Object_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Register_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@W4ObjectType@3@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 4
_ObjectType$ = 12					; size = 4
_Priority$ = 16						; size = 4
?Register_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@W4ObjectType@3@H@Z PROC ; DAEventClass::Register_Object_Event, COMDAT
; _this$ = ecx

; 391  : 	inline void Register_Object_Event(DAObjectEvent::Type Type,DAObjectEvent::ObjectType ObjectType,int Priority = 0) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 		DAEventManager::Register_Object_Event(this,Type,ObjectType,Priority);

	mov	eax, DWORD PTR _Priority$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ObjectType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Type$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Register_Object_Event@DAEventManager@@SAXPAVDAEventClass@@W4Type@DAObjectEvent@@W4ObjectType@4@H@Z ; DAEventManager::Register_Object_Event
	add	esp, 16					; 00000010H

; 393  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Register_Object_Event@DAEventClass@@QAEXW4Type@DAObjectEvent@@W4ObjectType@3@H@Z ENDP ; DAEventClass::Register_Object_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Clear_Events@DAEventClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear_Events@DAEventClass@@QAEXXZ PROC			; DAEventClass::Clear_Events, COMDAT
; _this$ = ecx

; 388  : 	inline void Clear_Events() {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 389  : 		DAEventManager::Clear_Events(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Clear_Events@DAEventManager@@SAXPAVDAEventClass@@@Z ; DAEventManager::Clear_Events
	add	esp, 4

; 390  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Events@DAEventClass@@QAEXXZ ENDP			; DAEventClass::Clear_Events
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Unregister_Event@DAEventClass@@QAEXW4Type@DAEvent@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 4
?Unregister_Event@DAEventClass@@QAEXW4Type@DAEvent@@@Z PROC ; DAEventClass::Unregister_Event, COMDAT
; _this$ = ecx

; 385  : 	inline void Unregister_Event(DAEvent::Type Type) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 		DAEventManager::Unregister_Event(this,Type);

	mov	eax, DWORD PTR _Type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Unregister_Event@DAEventManager@@SAXPAVDAEventClass@@W4Type@DAEvent@@@Z ; DAEventManager::Unregister_Event
	add	esp, 8

; 387  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Unregister_Event@DAEventClass@@QAEXW4Type@DAEvent@@@Z ENDP ; DAEventClass::Unregister_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_event.h
;	COMDAT ?Register_Event@DAEventClass@@QAEXW4Type@DAEvent@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 4
_Priority$ = 12						; size = 4
?Register_Event@DAEventClass@@QAEXW4Type@DAEvent@@H@Z PROC ; DAEventClass::Register_Event, COMDAT
; _this$ = ecx

; 382  : 	inline void Register_Event(DAEvent::Type Type,int Priority = 0) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 383  : 		DAEventManager::Register_Event(this,Type,Priority);

	mov	eax, DWORD PTR _Priority$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?Register_Event@DAEventManager@@SAXPAVDAEventClass@@W4Type@DAEvent@@H@Z ; DAEventManager::Register_Event
	add	esp, 12					; 0000000cH

; 384  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Register_Event@DAEventClass@@QAEXW4Type@DAEvent@@H@Z ENDP ; DAEventClass::Register_Event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DAEventManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DAEventManager@@QAEAAV0@ABV0@@Z PROC			; DAEventManager::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DAEventManager@@QAEAAV0@ABV0@@Z ENDP			; DAEventManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4DA@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DA@@QAEAAV0@ABV0@@Z PROC				; DA::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4DA@@QAEAAV0@ABV0@@Z ENDP				; DA::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da.h
;	COMDAT ?Get_Console_Function_List@DA@@SAAAV?$DynamicVectorClass@PAVConsoleFunctionClass@@@@XZ
_TEXT	SEGMENT
?Get_Console_Function_List@DA@@SAAAV?$DynamicVectorClass@PAVConsoleFunctionClass@@@@XZ PROC ; DA::Get_Console_Function_List, COMDAT

; 98   : 	static inline DynamicVectorClass<ConsoleFunctionClass*> &Get_Console_Function_List() {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 99   : 		return ConsoleFunctions;

	mov	eax, OFFSET ?ConsoleFunctions@DA@@0V?$DynamicVectorClass@PAVConsoleFunctionClass@@@@A ; DA::ConsoleFunctions

; 100  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Console_Function_List@DA@@SAAAV?$DynamicVectorClass@PAVConsoleFunctionClass@@@@XZ ENDP ; DA::Get_Console_Function_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da.h
;	COMDAT ?Get_Message_Prefix@DA@@SAABVStringClass@@XZ
_TEXT	SEGMENT
?Get_Message_Prefix@DA@@SAABVStringClass@@XZ PROC	; DA::Get_Message_Prefix, COMDAT

; 94   : 	static const StringClass &Get_Message_Prefix() {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 95   : 		return MessagePrefix;

	mov	eax, OFFSET ?MessagePrefix@DA@@0VStringClass@@A ; DA::MessagePrefix

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Message_Prefix@DA@@SAABVStringClass@@XZ ENDP	; DA::Get_Message_Prefix
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\da_string.h
;	COMDAT ?StringFormat@@YA?AVStringClass@@PBDZZ
_TEXT	SEGMENT
_arg_list$ = -532					; size = 4
_Buffer$ = -528						; size = 526
___$ReturnUdt$ = 8					; size = 4
_Format$ = 12						; size = 4
?StringFormat@@YA?AVStringClass@@PBDZZ PROC		; StringFormat, COMDAT

; 26   : inline StringClass StringFormat(const char *Format,...) {

	push	ebp
	mov	ebp, esp
	sub	esp, 596				; 00000254H
	push	ebx
	push	esi
	push	edi

; 27   : 	char Buffer[526];
; 28   : 	Buffer[525] = '\0'; 

	mov	eax, 1
	imul	eax, 525				; 0000020dH
	mov	BYTE PTR _Buffer$[ebp+eax], 0

; 29   : 	va_list arg_list; 
; 30   : 	va_start(arg_list,Format); 

	lea	eax, DWORD PTR _Format$[ebp+4]
	mov	DWORD PTR _arg_list$[ebp], eax

; 31   : 	vsnprintf(Buffer,526,Format,arg_list); 

	mov	eax, DWORD PTR _arg_list$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Format$[ebp]
	push	ecx
	push	526					; 0000020eH
	lea	edx, DWORD PTR _Buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__vsnprintf
	add	esp, 16					; 00000010H

; 32   : 	va_end(arg_list);

	mov	DWORD PTR _arg_list$[ebp], 0

; 33   : 	return Buffer;

	push	0
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 34   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StringFormat@@YA?AVStringClass@@PBDZZ ENDP		; StringFormat
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_da.h
;	COMDAT ?Is_Player@@YA_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv81 = -68						; size = 4
_obj$ = 8						; size = 4
?Is_Player@@YA_NPAVScriptableGameObj@@@Z PROC		; Is_Player, COMDAT

; 179  : inline bool Is_Player(GameObject *obj) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 180  : 	return (obj && obj->As_SoldierGameObj() && ((SoldierGameObj*)obj)->Get_Player_Data());

	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN3@Is_Player
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	SHORT $LN3@Is_Player
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_Player_Data@SmartGameObj@@QAEPAVPlayerDataClass@@XZ ; SmartGameObj::Get_Player_Data
	test	eax, eax
	je	SHORT $LN3@Is_Player
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN4@Is_Player
$LN3@Is_Player:
	mov	DWORD PTR tv81[ebp], 0
$LN4@Is_Player:
	mov	al, BYTE PTR tv81[ebp]

; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Player@@YA_NPAVScriptableGameObj@@@Z ENDP		; Is_Player
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\soldiergameobj.h
;	COMDAT ?Get_Player@SoldierGameObj@@QAEPAVcPlayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Player@SoldierGameObj@@QAEPAVcPlayer@@XZ PROC	; SoldierGameObj::Get_Player, COMDAT
; _this$ = ecx

; 224  : 	cPlayer *Get_Player() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 225  : 		return (cPlayer*)Get_Player_Data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Player_Data@SmartGameObj@@QAEPAVPlayerDataClass@@XZ ; SmartGameObj::Get_Player_Data

; 226  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Player@SoldierGameObj@@QAEPAVcPlayer@@XZ ENDP	; SoldierGameObj::Get_Player
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\soldiergameobj.h
;	COMDAT ?Give_Key@SoldierGameObj@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key_number$ = 8					; size = 4
?Give_Key@SoldierGameObj@@QAEXH@Z PROC			; SoldierGameObj::Give_Key, COMDAT
; _this$ = ecx

; 171  : 	void					Give_Key( int key_number )		{ KeyRing |= (1 << key_number); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	ecx, DWORD PTR _key_number$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+2584]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2584], eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Give_Key@SoldierGameObj@@QAEXH@Z ENDP			; SoldierGameObj::Give_Key
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z PROC		; ArmorWarheadManager::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z ENDP		; ArmorWarheadManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vehiclefactorygameobj.h
;	COMDAT ?Set_Busy@VehicleFactoryGameObj@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_busy$ = 8						; size = 1
?Set_Busy@VehicleFactoryGameObj@@QAEX_N@Z PROC		; VehicleFactoryGameObj::Set_Busy, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 		IsBusy = busy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _busy$[ebp]
	mov	BYTE PTR [eax+2248], cl

; 51   : 		Set_Object_Dirty_Bit(NetworkObjectClass::BIT_RARE,true);

	push	1
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Busy@VehicleFactoryGameObj@@QAEX_N@Z ENDP		; VehicleFactoryGameObj::Set_Busy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\buildinggameobj.h
;	COMDAT ?Set_Is_Destroyed@BuildingGameObj@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__IsDestroyed$ = 8					; size = 1
?Set_Is_Destroyed@BuildingGameObj@@QAEX_N@Z PROC	; BuildingGameObj::Set_Is_Destroyed, COMDAT
; _this$ = ecx

; 87   : 	void Set_Is_Destroyed(const bool _IsDestroyed) { IsDestroyed = _IsDestroyed; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __IsDestroyed$[ebp]
	mov	BYTE PTR [eax+1912], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Is_Destroyed@BuildingGameObj@@QAEX_N@Z ENDP	; BuildingGameObj::Set_Is_Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\coltest.h
;	COMDAT ?Cull@OBBoxCollisionTestClass@@QAE_NABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_min$ = 8						; size = 4
_max$ = 12						; size = 4
?Cull@OBBoxCollisionTestClass@@QAE_NABVVector3@@0@Z PROC ; OBBoxCollisionTestClass::Cull, COMDAT
; _this$ = ecx

; 148  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 	if ((SweepMin.X > max.X) || (SweepMax.X < min.X))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _max$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	comiss	xmm0, DWORD PTR [ecx]
	ja	SHORT $LN5@Cull
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx+96]
	jbe	SHORT $LN6@Cull
$LN5@Cull:

; 150  : 	{
; 151  : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@Cull
$LN6@Cull:

; 152  : 	}
; 153  : 	if ((SweepMin.Y > max.Y) || (SweepMax.Y < min.Y))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _max$[ebp]
	movss	xmm0, DWORD PTR [eax+88]
	comiss	xmm0, DWORD PTR [ecx+4]
	ja	SHORT $LN3@Cull
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR [ecx+100]
	jbe	SHORT $LN4@Cull
$LN3@Cull:

; 154  : 	{
; 155  : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@Cull
$LN4@Cull:

; 156  : 	}
; 157  : 	if ((SweepMin.Z > max.Z) || (SweepMax.Z < min.Z))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _max$[ebp]
	movss	xmm0, DWORD PTR [eax+92]
	comiss	xmm0, DWORD PTR [ecx+8]
	ja	SHORT $LN1@Cull
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR [ecx+104]
	jbe	SHORT $LN2@Cull
$LN1@Cull:

; 158  : 	{
; 159  : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@Cull
$LN2@Cull:

; 160  : 	}
; 161  : 	return false;

	xor	al, al
$LN7@Cull:

; 162  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Cull@OBBoxCollisionTestClass@@QAE_NABVVector3@@0@Z ENDP ; OBBoxCollisionTestClass::Cull
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\coltest.h
;	COMDAT ?Translate@AABoxCollisionTestClass@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_translation$ = 8					; size = 4
?Translate@AABoxCollisionTestClass@@QAEXABVVector3@@@Z PROC ; AABoxCollisionTestClass::Translate, COMDAT
; _this$ = ecx

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 	Box.Center += translation;

	mov	eax, DWORD PTR _translation$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 108  : 	SweepMin += translation;

	mov	eax, DWORD PTR _translation$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 109  : 	SweepMax += translation;

	mov	eax, DWORD PTR _translation$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@AABoxCollisionTestClass@@QAEXABVVector3@@@Z ENDP ; AABoxCollisionTestClass::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\coltest.h
;	COMDAT ?Cull@AABoxCollisionTestClass@@QAE_NABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_min$ = 8						; size = 4
_max$ = 12						; size = 4
?Cull@AABoxCollisionTestClass@@QAE_NABVVector3@@0@Z PROC ; AABoxCollisionTestClass::Cull, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 	if ((SweepMin.X > max.X) || (SweepMax.X < min.X))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _max$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	comiss	xmm0, DWORD PTR [ecx]
	ja	SHORT $LN5@Cull
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx+60]
	jbe	SHORT $LN6@Cull
$LN5@Cull:

; 115  : 	{
; 116  : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@Cull
$LN6@Cull:

; 117  : 	}
; 118  : 	if ((SweepMin.Y > max.Y) || (SweepMax.Y < min.Y))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _max$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	comiss	xmm0, DWORD PTR [ecx+4]
	ja	SHORT $LN3@Cull
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR [ecx+64]
	jbe	SHORT $LN4@Cull
$LN3@Cull:

; 119  : 	{
; 120  : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@Cull
$LN4@Cull:

; 121  : 	}
; 122  : 	if ((SweepMin.Z > max.Z) || (SweepMax.Z < min.Z))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _max$[ebp]
	movss	xmm0, DWORD PTR [eax+56]
	comiss	xmm0, DWORD PTR [ecx+8]
	ja	SHORT $LN1@Cull
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR [ecx+68]
	jbe	SHORT $LN2@Cull
$LN1@Cull:

; 123  : 	{
; 124  : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@Cull
$LN2@Cull:

; 125  : 	}
; 126  : 	return false;

	xor	al, al
$LN7@Cull:

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Cull@AABoxCollisionTestClass@@QAE_NABVVector3@@0@Z ENDP ; AABoxCollisionTestClass::Cull
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CollisionTestClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CollisionTestClass@@QAEAAV0@ABV0@@Z PROC		; CollisionTestClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CollisionTestClass@@QAEAAV0@ABV0@@Z ENDP		; CollisionTestClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\coltest.h
;	COMDAT ??0CollisionTestClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
??0CollisionTestClass@@QAE@ABV0@@Z PROC			; CollisionTestClass::CollisionTestClass, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 44   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CollisionTestClass@@QAE@ABV0@@Z ENDP			; CollisionTestClass::CollisionTestClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\coltest.h
;	COMDAT ??0CollisionTestClass@@QAE@PAUCastResultStruct@@W4Collision_Type@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_res$ = 8						; size = 4
_collision_type$ = 12					; size = 4
??0CollisionTestClass@@QAE@PAUCastResultStruct@@W4Collision_Type@@@Z PROC ; CollisionTestClass::CollisionTestClass, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _collision_type$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 37   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CollisionTestClass@@QAE@PAUCastResultStruct@@W4Collision_Type@@@Z ENDP ; CollisionTestClass::CollisionTestClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECollideableObjClass@AnimCollisionManagerClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECollideableObjClass@AnimCollisionManagerClass@@QAEPAXI@Z PROC ; AnimCollisionManagerClass::CollideableObjClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CollideableObjClass@AnimCollisionManagerClass@@QAE@XZ ; AnimCollisionManagerClass::CollideableObjClass::~CollideableObjClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	100					; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CollideableObjClass@AnimCollisionManagerClass@@QAE@XZ ; AnimCollisionManagerClass::CollideableObjClass::~CollideableObjClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECollideableObjClass@AnimCollisionManagerClass@@QAEPAXI@Z ENDP ; AnimCollisionManagerClass::CollideableObjClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\animcollisionmanagerclass.h
;	COMDAT ??1CollideableObjClass@AnimCollisionManagerClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CollideableObjClass@AnimCollisionManagerClass@@QAE@XZ PROC ; AnimCollisionManagerClass::CollideableObjClass::~CollideableObjClass, COMDAT
; _this$ = ecx

; 120  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 			REF_PTR_RELEASE(CollisionMesh);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Collideabl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Release_Ref@RefCountClass@@QAEXXZ	; RefCountClass::Release_Ref
$LN1@Collideabl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 122  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CollideableObjClass@AnimCollisionManagerClass@@QAE@XZ ENDP ; AnimCollisionManagerClass::CollideableObjClass::~CollideableObjClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z PROC	; JFW_Object_Created_Hook_Base::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1JFW_Object_Created_Hook_Base@@UAE@XZ ; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z ENDP	; JFW_Object_Created_Hook_Base::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z PROC	; JFW_Object_Created_Hook_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z ENDP	; JFW_Object_Created_Hook_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z PROC	; JFW_Object_Created_Hook_Base::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z ENDP	; JFW_Object_Created_Hook_Base::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z PROC	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Object_Created_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z ENDP	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_tt.h
;	COMDAT ??0JFW_Object_Created_Hook_Base@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0JFW_Object_Created_Hook_Base@@QAE@XZ PROC		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base, COMDAT
; _this$ = ecx

; 556  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Object_Created_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 557  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0JFW_Object_Created_Hook_Base@@QAE@XZ ENDP		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z PROC		; MultiKeyHookScriptImpClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z ENDP		; MultiKeyHookScriptImpClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z PROC		; MultiKeyHookScriptImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z ENDP		; MultiKeyHookScriptImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z PROC	; MultiKeyHookScriptImpClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z ENDP	; MultiKeyHookScriptImpClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z PROC		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MultiKeyHookScriptImpClass@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z ENDP		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1MultiKeyHookScriptImpClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MultiKeyHookScriptImpClass@@UAE@XZ PROC		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1MultiKeyHookScriptImpClass@@UAE@XZ ENDP		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0MultiKeyHookScriptImpClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MultiKeyHookScriptImpClass@@QAE@XZ PROC		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MultiKeyHookScriptImpClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0MultiKeyHookScriptImpClass@@QAE@XZ ENDP		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ
_TEXT	SEGMENT
_node$1 = -12						; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count, COMDAT
; _this$ = ecx

; 302  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		uint32 count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 304  : 
; 305  : 		for (SLNode<T>* node = HeadNode; node; node = node->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _node$1[ebp], ecx
	jmp	SHORT $LN3@Get_Count
$LN2@Get_Count:
	mov	ecx, DWORD PTR _node$1[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _node$1[ebp], eax
$LN3@Get_Count:
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN1@Get_Count

; 306  : 			++count;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN2@Get_Count
$LN1@Get_Count:

; 307  : 
; 308  : 		return count;

	mov	eax, DWORD PTR _count$[ebp]

; 309  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty, COMDAT
; _this$ = ecx

; 296  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return !HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv66[ebp]

; 298  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
_TEXT	SEGMENT
tv140 = -88						; size = 4
tv142 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN8@Insert_Aft

; 269  : 		{
; 270  : 			return false;

	xor	al, al
	jmp	$LN9@Insert_Aft
$LN8@Insert_Aft:

; 271  : 		}
; 272  : 		if (oldnode == NULL || HeadNode == NULL)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN6@Insert_Aft
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@Insert_Aft
$LN6@Insert_Aft:

; 273  : 		{
; 274  : 			return(Add_Head(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN9@Insert_Aft
$LN7@Insert_Aft:

; 275  : 		}
; 276  : 		SLNode<T> *cur;
; 277  : 		for (cur = HeadNode; cur && cur->Data() != oldnode; cur = cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Insert_Aft
$LN4@Insert_Aft:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Insert_Aft:
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN3@Insert_Aft

; 278  : 		{
; 279  : 		}

	jmp	SHORT $LN4@Insert_Aft
$LN3@Insert_Aft:

; 280  : 		if (cur != NULL  && cur->Data() == oldnode)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN2@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN2@Insert_Aft

; 281  : 		{
; 282  : 			if (cur == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Insert_Aft

; 283  : 			{
; 284  : 				return(Add_Tail(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	$LN9@Insert_Aft
$LN1@Insert_Aft:

; 285  : 			}
; 286  : 			SLNode<T> *temp = new SLNode<T>(newnode);

	push	OFFSET ??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@
	push	286					; 0000011eH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Insert_Aft
	xor	ecx, ecx
	jne	SHORT $LN11@Insert_Aft
	push	286					; 0000011eH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@Insert_Aft:
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN15@Insert_Aft
$LN14@Insert_Aft:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN12@Insert_Aft
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN13@Insert_Aft
$LN12@Insert_Aft:
	mov	DWORD PTR tv140[ebp], 0
$LN13@Insert_Aft:
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv142[ebp], ecx
$LN15@Insert_Aft:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 287  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 288  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 289  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Insert_Aft
$LN2@Insert_Aft:

; 290  : 		}
; 291  : 		return false;

	xor	al, al
$LN9@Insert_Aft:

; 292  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
_TEXT	SEGMENT
tv145 = -88						; size = 4
tv147 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN7@Insert_Bef

; 245  : 		{
; 246  : 			return false;

	xor	al, al
	jmp	$LN8@Insert_Bef
$LN7@Insert_Bef:

; 247  : 		}
; 248  : 		if (oldnode == NULL || HeadNode == NULL || HeadNode->Data() == oldnode)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	SHORT $LN6@Insert_Bef
$LN5@Insert_Bef:

; 249  : 		{
; 250  : 			return Add_Head(newnode);

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN8@Insert_Bef
$LN6@Insert_Bef:

; 251  : 		}
; 252  : 		SLNode<T> *cur;
; 253  : 		for (cur=HeadNode; cur->Next() && cur->Next()->Data() != oldnode; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN4@Insert_Bef
$LN3@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN4@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	SHORT $LN2@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN2@Insert_Bef

; 254  : 		{
; 255  : 		}

	jmp	SHORT $LN3@Insert_Bef
$LN2@Insert_Bef:

; 256  : 		if (cur->Next() != NULL && cur->Next()->Data() == oldnode)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	$LN1@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN1@Insert_Bef

; 257  : 		{
; 258  : 			SLNode<T> *temp	= new SLNode<T> (newnode);

	push	OFFSET ??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	258					; 00000102H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@Insert_Bef
	xor	ecx, ecx
	jne	SHORT $LN10@Insert_Bef
	push	258					; 00000102H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Insert_Bef:
	mov	DWORD PTR tv147[ebp], 0
	jmp	SHORT $LN14@Insert_Bef
$LN13@Insert_Bef:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@Insert_Bef
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN12@Insert_Bef
$LN11@Insert_Bef:
	mov	DWORD PTR tv145[ebp], 0
$LN12@Insert_Bef:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv147[ebp], ecx
$LN14@Insert_Bef:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 259  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 260  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 261  : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@Insert_Bef
$LN1@Insert_Bef:

; 262  : 		}
; 263  : 		return false;

	xor	al, al
$LN8@Insert_Bef:

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_cur$2 = -12						; size = 4
_next$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All, COMDAT
; _this$ = ecx

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 		SLNode<T> *next;
; 233  : 		for (SLNode<T> *cur = HeadNode; cur; cur = next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$2[ebp], ecx
	jmp	SHORT $LN3@Remove_All
$LN2@Remove_All:
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$2[ebp], eax
$LN3@Remove_All:
	cmp	DWORD PTR _cur$2[ebp], 0
	je	SHORT $LN1@Remove_All

; 234  : 		{
; 235  : 			next = cur->Next();

	mov	ecx, DWORD PTR _cur$2[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _next$[ebp], eax

; 236  : 			delete cur;

	push	OFFSET ??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@
	push	236					; 000000ecH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Remove_All
	xor	ecx, ecx
	jne	SHORT $LN6@Remove_All
	push	236					; 000000ecH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Remove_All:
	jmp	SHORT $LN8@Remove_All
$LN7@Remove_All:
	mov	eax, DWORD PTR _cur$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN8@Remove_All:

; 237  : 		}

	jmp	SHORT $LN2@Remove_All
$LN1@Remove_All:

; 238  : 		HeadNode = TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 239  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv76 = -81						; size = 1
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_element$ = 8						; size = 4
?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove, COMDAT
; _this$ = ecx

; 202  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		if (element == NULL || HeadNode == NULL)

	cmp	DWORD PTR _element$[ebp], 0
	je	SHORT $LN7@Remove
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@Remove
$LN7@Remove:

; 204  : 		{
; 205  : 			return false;

	xor	al, al
	jmp	$LN9@Remove
$LN8@Remove:

; 206  : 		}
; 207  : 		if (HeadNode->Data() == element)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN6@Remove

; 208  : 		{
; 209  : 			return Remove_Head() != NULL ? true : false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	test	eax, eax
	je	SHORT $LN11@Remove
	mov	BYTE PTR tv76[ebp], 1
	jmp	SHORT $LN12@Remove
$LN11@Remove:
	mov	BYTE PTR tv76[ebp], 0
$LN12@Remove:
	mov	al, BYTE PTR tv76[ebp]
	jmp	$LN9@Remove
$LN6@Remove:

; 210  : 		}
; 211  : 		SLNode<T> *cur;
; 212  : 		for (cur = HeadNode; cur->Next() && cur->Next()->Data() != element; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Remove
$LN4@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	SHORT $LN3@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	je	SHORT $LN3@Remove

; 213  : 		{
; 214  : 		}

	jmp	SHORT $LN4@Remove
$LN3@Remove:

; 215  : 		if (cur->Next() != NULL && cur->Next()->Data() == element)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	$LN2@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN2@Remove

; 216  : 		{
; 217  : 			SLNode<T> *temp	= cur->Next();

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _temp$2[ebp], eax

; 218  : 			cur->Set_Next(temp->Next());

	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 219  : 			if (temp == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Remove

; 220  : 			{
; 221  : 				TailNode = cur;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Remove:

; 222  : 			}
; 223  : 			delete temp;

	push	OFFSET ??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	223					; 000000dfH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Remove
	xor	ecx, ecx
	jne	SHORT $LN13@Remove
	push	223					; 000000dfH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Remove:
	jmp	SHORT $LN15@Remove
$LN14@Remove:
	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN15@Remove:

; 224  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Remove
$LN2@Remove:

; 225  : 		}
; 226  : 		return false;

	xor	al, al
$LN9@Remove:

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
_data$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Tai

; 193  : 		{
; 194  : 			return ((T *)NULL);

	xor	eax, eax
	jmp	SHORT $LN2@Remove_Tai
$LN1@Remove_Tai:

; 195  : 		}
; 196  : 		T* data = TailNode->Data();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	mov	DWORD PTR _data$[ebp], eax

; 197  : 		return (Remove(data) ? data : (T*)NULL);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Remove_Tai
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN5@Remove_Tai
$LN4@Remove_Tai:
	mov	DWORD PTR tv76[ebp], 0
$LN5@Remove_Tai:
	mov	eax, DWORD PTR tv76[ebp]
$LN2@Remove_Tai:

; 198  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_data$ = -12						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Remove_Hea

; 175  : 		{
; 176  : 			return ((T* )NULL);

	xor	eax, eax
	jmp	$LN3@Remove_Hea
$LN2@Remove_Hea:

; 177  : 		}
; 178  : 		SLNode<T> *temp = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 179  : 		HeadNode = HeadNode->Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 180  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Hea

; 181  : 		{
; 182  : 			TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@Remove_Hea:

; 183  : 		}
; 184  : 		T *data = temp->Data();

	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	mov	DWORD PTR _data$[ebp], eax

; 185  : 		delete temp;

	push	OFFSET ??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	185					; 000000b9H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Remove_Hea
	xor	ecx, ecx
	jne	SHORT $LN5@Remove_Hea
	push	185					; 000000b9H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Remove_Hea:
	jmp	SHORT $LN7@Remove_Hea
$LN6@Remove_Hea:
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN7@Remove_Hea:

; 186  : 		return data;

	mov	eax, DWORD PTR _data$[ebp]
$LN3@Remove_Hea:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
_cur$1 = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail, COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@Add_Tail

; 161  : 		{
; 162  : 			return false;

	xor	al, al
	jmp	SHORT $LN5@Add_Tail
$LN4@Add_Tail:

; 163  : 		}
; 164  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next()) 

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$1[ebp], ecx
	jmp	SHORT $LN3@Add_Tail
$LN2@Add_Tail:
	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$1[ebp], eax
$LN3@Add_Tail:
	cmp	DWORD PTR _cur$1[ebp], 0
	je	SHORT $LN1@Add_Tail

; 165  : 		{
; 166  : 			Add_Tail(cur->Data());

	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 167  : 		}

	jmp	SHORT $LN2@Add_Tail
$LN1@Add_Tail:

; 168  : 		return true;

	mov	al, 1
$LN5@Add_Tail:

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		if (data == NULL)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN3@Add_Tail

; 141  : 		{
; 142  : 			return false;

	xor	al, al
	jmp	$LN4@Add_Tail
$LN3@Add_Tail:

; 143  : 		}
; 144  : 		SLNode<T> *temp = new SLNode<T> (data);

	push	OFFSET ??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@
	push	144					; 00000090H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@Add_Tail
	xor	ecx, ecx
	jne	SHORT $LN6@Add_Tail
	push	144					; 00000090H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Add_Tail:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN10@Add_Tail
$LN9@Add_Tail:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@Add_Tail
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN8@Add_Tail
$LN7@Add_Tail:
	mov	DWORD PTR tv82[ebp], 0
$LN8@Add_Tail:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN10@Add_Tail:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 145  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Add_Tail

; 146  : 		{
; 147  : 			HeadNode = TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx+4], eax

; 148  : 		}
; 149  : 		else

	jmp	SHORT $LN1@Add_Tail
$LN2@Add_Tail:

; 150  : 		{
; 151  : 			TailNode->Set_Next(temp);

	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 152  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Tail:

; 153  : 		}
; 154  : 		return true;

	mov	al, 1
$LN4@Add_Tail:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
tv90 = -92						; size = 4
tv92 = -88						; size = 4
$T1 = -84						; size = 4
_temp$2 = -16						; size = 4
_cur$3 = -12						; size = 4
_addpoint$ = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@Add_Head

; 115  : 		{
; 116  : 			return false;

	xor	al, al
	jmp	$LN7@Add_Head
$LN6@Add_Head:

; 117  : 		}
; 118  : 		SLNode<T> *addpoint = NULL;

	mov	DWORD PTR _addpoint$[ebp], 0

; 119  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next())

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$3[ebp], ecx
	jmp	SHORT $LN5@Add_Head
$LN4@Add_Head:
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$3[ebp], eax
$LN5@Add_Head:
	cmp	DWORD PTR _cur$3[ebp], 0
	je	$LN3@Add_Head

; 120  : 		{
; 121  : 			if (addpoint)

	cmp	DWORD PTR _addpoint$[ebp], 0
	je	$LN2@Add_Head

; 122  : 			{
; 123  : 				SLNode<T> *temp = new SLNode<T>(cur->Data());

	push	OFFSET ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
	push	123					; 0000007bH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN12@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN9@Add_Head
	push	123					; 0000007bH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Add_Head:
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN13@Add_Head
$LN12@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN10@Add_Head
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN11@Add_Head
$LN10@Add_Head:
	mov	DWORD PTR tv90[ebp], 0
$LN11@Add_Head:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv92[ebp], eax
$LN13@Add_Head:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _temp$2[ebp], ecx

; 124  : 				temp->Set_Next(addpoint->Next());

	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 125  : 				addpoint->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 126  : 				addpoint = temp;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR _addpoint$[ebp], eax

; 127  : 			}
; 128  : 			else

	jmp	SHORT $LN1@Add_Head
$LN2@Add_Head:

; 129  : 			{
; 130  : 				Add_Head(cur->Data());

	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 131  : 				addpoint = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _addpoint$[ebp], ecx
$LN1@Add_Head:

; 132  : 			}
; 133  : 		}

	jmp	$LN4@Add_Head
$LN3@Add_Head:

; 134  : 		return true;

	mov	al, 1
$LN7@Add_Head:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head, COMDAT
; _this$ = ecx

; 96   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		if (!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN2@Add_Head

; 98   : 		{
; 99   : 			return false;

	xor	al, al
	jmp	$LN3@Add_Head
$LN2@Add_Head:

; 100  : 		}
; 101  : 		SLNode<T> *temp	= new SLNode<T>(data);

	push	OFFSET ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
	push	101					; 00000065H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN5@Add_Head
	push	101					; 00000065H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Add_Head:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN9@Add_Head
$LN8@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Add_Head
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN7@Add_Head
$LN6@Add_Head:
	mov	DWORD PTR tv82[ebp], 0
$LN7@Add_Head:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN9@Add_Head:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 102  : 		temp->Set_Next(HeadNode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 103  : 		HeadNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 104  : 		if (!TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@Add_Head

; 105  : 		{
; 106  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Head:

; 107  : 		}
; 108  : 		return true;

	mov	al, 1
$LN3@Add_Head:

; 109  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 90   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@

; 91   : 		Remove_All();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 86   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 87   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EJFW_Key_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EJFW_Key_Hook_Base@@UAEPAXI@Z PROC			; JFW_Key_Hook_Base::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1JFW_Key_Hook_Base@@UAE@XZ	; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EJFW_Key_Hook_Base@@UAEPAXI@Z ENDP			; JFW_Key_Hook_Base::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GJFW_Key_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJFW_Key_Hook_Base@@UAEPAXI@Z PROC			; JFW_Key_Hook_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJFW_Key_Hook_Base@@UAEPAXI@Z ENDP			; JFW_Key_Hook_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z PROC		; JFW_Key_Hook_Base::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z ENDP		; JFW_Key_Hook_Base::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0JFW_Key_Hook_Base@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0JFW_Key_Hook_Base@@QAE@ABV0@@Z PROC			; JFW_Key_Hook_Base::JFW_Key_Hook_Base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Key_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0JFW_Key_Hook_Base@@QAE@ABV0@@Z ENDP			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_tt.h
;	COMDAT ??0JFW_Key_Hook_Base@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0JFW_Key_Hook_Base@@QAE@XZ PROC			; JFW_Key_Hook_Base::JFW_Key_Hook_Base, COMDAT
; _this$ = ecx

; 491  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Key_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 492  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0JFW_Key_Hook_Base@@QAE@XZ ENDP			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\purchasesettingsdefclass.h
;	COMDAT ?Set_Cost@PurchaseSettingsDefClass@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_cost$ = 12						; size = 4
?Set_Cost@PurchaseSettingsDefClass@@QAEXHH@Z PROC	; PurchaseSettingsDefClass::Set_Cost, COMDAT
; _this$ = ecx

; 193  : 	void Set_Cost(int index, int cost) { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 194  : 		costs[index] = cost;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cost$[ebp]
	mov	DWORD PTR [ecx+eax*4+1752], edx

; 195  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set_Cost@PurchaseSettingsDefClass@@QAEXHH@Z ENDP	; PurchaseSettingsDefClass::Set_Cost
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\purchasesettingsdefclass.h
;	COMDAT ?Set_Definition@PurchaseSettingsDefClass@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_preset$ = 12						; size = 4
?Set_Definition@PurchaseSettingsDefClass@@QAEXHH@Z PROC	; PurchaseSettingsDefClass::Set_Definition, COMDAT
; _this$ = ecx

; 187  : 	void Set_Definition(int index, int preset) { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 		presetids[index] = preset;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _preset$[ebp]
	mov	DWORD PTR [ecx+eax*4+1792], edx

; 189  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set_Definition@PurchaseSettingsDefClass@@QAEXHH@Z ENDP	; PurchaseSettingsDefClass::Set_Definition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\purchasesettingsdefclass.h
;	COMDAT ?Get_Definition@PurchaseSettingsDefClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Definition@PurchaseSettingsDefClass@@QAEHH@Z PROC	; PurchaseSettingsDefClass::Get_Definition, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return presetids[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+1792]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Definition@PurchaseSettingsDefClass@@QAEHH@Z ENDP	; PurchaseSettingsDefClass::Get_Definition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0GenericSLNode@@IAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0GenericSLNode@@IAE@PAX@Z PROC			; GenericSLNode::GenericSLNode, COMDAT
; _this$ = ecx

; 37   : 	GenericSLNode(void *obj)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 		NodeData = obj;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 40   : 		NodeNext = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 41   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0GenericSLNode@@IAE@PAX@Z ENDP			; GenericSLNode::GenericSLNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z PROC ; AutoPoolClass<GenericSLNode,256>::operator delete, COMDAT

; 1485 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1486 : 		if (object)

	cmp	DWORD PTR _object$[ebp], 0
	je	SHORT $LN2@operator

; 1487 : 			objectPoolClass(T, nAlign).Free_Object_Memory(*(T*)object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
	mov	ecx, eax
	call	?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
$LN2@operator:

; 1488 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ENDP ; AutoPoolClass<GenericSLNode,256>::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_file$ = 12						; size = 4
_line$ = 16						; size = 4
_function$ = 20						; size = 4
??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z PROC ; AutoPoolClass<GenericSLNode,256>::operator new, COMDAT

; 1479 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN3@operator:

; 1480 : 		TT_ASSERT(size == sizeof(T));

	xor	eax, eax
	jne	SHORT $LN3@operator
	cmp	DWORD PTR _size$[ebp], 8
	je	SHORT $LN1@operator
	int	3
$LN1@operator:

; 1481 : 		return (void*)objectPoolClass(T, nAlign).Allocate_Object_Memory();

	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
	mov	ecx, eax
	call	?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory

; 1482 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ENDP ; AutoPoolClass<GenericSLNode,256>::operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\cplayer.h
;	COMDAT ?Get_GameObj@cPlayer@@QBEPAVSoldierGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_GameObj@cPlayer@@QBEPAVSoldierGameObj@@XZ PROC	; cPlayer::Get_GameObj, COMDAT
; _this$ = ecx

; 154  : 	inline SoldierGameObj *Get_GameObj() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		return (SoldierGameObj*)Owner.Get_Ptr();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr

; 156  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_GameObj@cPlayer@@QBEPAVSoldierGameObj@@XZ ENDP	; cPlayer::Get_GameObj
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\cplayer.h
;	COMDAT ?Get_DA_Player@cPlayer@@QAEPAVDAPlayerClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_DA_Player@cPlayer@@QAEPAVDAPlayerClass@@XZ PROC	; cPlayer::Get_DA_Player, COMDAT
; _this$ = ecx

; 151  : 	inline DAPlayerClass *Get_DA_Player() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 		return DAPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1984]

; 153  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_DA_Player@cPlayer@@QAEPAVDAPlayerClass@@XZ ENDP	; cPlayer::Get_DA_Player
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\cplayer.h
;	COMDAT ?Get_Player_Type@cPlayer@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Player_Type@cPlayer@@QBEHXZ PROC			; cPlayer::Get_Player_Type, COMDAT
; _this$ = ecx

; 121  : 	int Get_Player_Type() const {return PlayerType;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1900				; 0000076cH
	call	??B?$SafeDataClass@H@@QBEHXZ		; SafeDataClass<int>::operator int
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Player_Type@cPlayer@@QBEHXZ ENDP			; cPlayer::Get_Player_Type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\cplayer.h
;	COMDAT ?Get_Name@cPlayer@@QBEABVWideStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@cPlayer@@QBEABVWideStringClass@@XZ PROC	; cPlayer::Get_Name, COMDAT
; _this$ = ecx

; 120  : 	const WideStringClass &Get_Name() const {return PlayerName;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1880				; 00000758H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@cPlayer@@QBEABVWideStringClass@@XZ ENDP	; cPlayer::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\cplayer.h
;	COMDAT ?Get_Id@cPlayer@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Id@cPlayer@@QBEHXZ PROC				; cPlayer::Get_Id, COMDAT
; _this$ = ecx

; 116  : 	int Get_Id() const { return PlayerId; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1884]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Id@cPlayer@@QBEHXZ ENDP				; cPlayer::Get_Id
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\smartgameobj.h
;	COMDAT ?Get_Player_Data@SmartGameObj@@QAEPAVPlayerDataClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Player_Data@SmartGameObj@@QAEPAVPlayerDataClass@@XZ PROC ; SmartGameObj::Get_Player_Data, COMDAT
; _this$ = ecx

; 59   : 	PlayerDataClass * Get_Player_Data( void )						{ return PlayerData; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+2400]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Player_Data@SmartGameObj@@QAEPAVPlayerDataClass@@XZ ENDP ; SmartGameObj::Get_Player_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??B?$SafeDataClass@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$SafeDataClass@H@@QBEHXZ PROC			; SafeDataClass<int>::operator int, COMDAT
; _this$ = ecx

; 1236 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1237 : 	return (*this)();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$SafeDataClass@H@@QBEAAHXZ		; SafeDataClass<int>::operator()
	mov	eax, DWORD PTR [eax]

; 1238 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$SafeDataClass@H@@QBEHXZ ENDP			; SafeDataClass<int>::operator int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??4?$SafeDataClass@H@@QAEAAHABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
??4?$SafeDataClass@H@@QAEAAHABH@Z PROC			; SafeDataClass<int>::operator=, COMDAT
; _this$ = ecx

; 624  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 625  : 	if (Handle.Is_Valid())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Valid@DataSafeHandleClass@@QBE_NXZ	; DataSafeHandleClass::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator

; 626  : 	{
; 627  : 			DataSafeClass<T>::Set(Handle, (T*) &data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Set@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@PAH@Z ; DataSafeClass<int>::Set
	add	esp, 8
$LN1@operator:

; 628  : 	}
; 629  : 	return (T&)data;

	mov	eax, DWORD PTR _data$[ebp]

; 630  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$SafeDataClass@H@@QAEAAHABH@Z ENDP			; SafeDataClass<int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??R?$SafeDataClass@H@@QBEAAHXZ
_TEXT	SEGMENT
_data_ptr$ = -8						; size = 4
_this$ = -4						; size = 4
??R?$SafeDataClass@H@@QBEAAHXZ PROC			; SafeDataClass<int>::operator(), COMDAT
; _this$ = ecx

; 1221 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1222 : 	T *data_ptr = NULL;

	mov	DWORD PTR _data_ptr$[ebp], 0

; 1223 : 	if (Handle.Is_Valid())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Valid@DataSafeHandleClass@@QBE_NXZ	; DataSafeHandleClass::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@operator

; 1224 : 	{
; 1225 : 		DataSafeClass<T>::Get(Handle, data_ptr);

	lea	eax, DWORD PTR _data_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ; DataSafeClass<int>::Get
	add	esp, 8

; 1226 : 		if (data_ptr)

	cmp	DWORD PTR _data_ptr$[ebp], 0
	je	SHORT $LN2@operator

; 1227 : 		{
; 1228 : 			return *data_ptr;

	mov	eax, DWORD PTR _data_ptr$[ebp]
	jmp	SHORT $LN3@operator
$LN2@operator:

; 1229 : 		}
; 1230 : 	}
; 1231 : 	static T oh_dear;
; 1232 : 	return oh_dear;

	mov	eax, OFFSET ?oh_dear@?7???R?$SafeDataClass@H@@QBEAAHXZ@4HA ; `SafeDataClass<int>::operator()'::`8'::oh_dear
$LN3@operator:

; 1233 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??R?$SafeDataClass@H@@QBEAAHXZ ENDP			; SafeDataClass<int>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ PROC ; PhysicalGameObj::Peek_Model, COMDAT
; _this$ = ecx

; 50   : 	inline RenderObjClass	*	Peek_Model( void ) { return Peek_Physical_Object()->Peek_Model(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ ; PhysClass::Peek_Model
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ ENDP ; PhysicalGameObj::Peek_Model
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
_Return$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ PROC	; PhysicalGameObj::Get_Position, COMDAT
; _this$ = ecx

; 47   : 	SCRIPTS_API Vector3 Get_Position() { Vector3 Return; Peek_Physical_Object()->Get_Position(&Return); return Return; }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR _Return$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	lea	eax, DWORD PTR _Return$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Get_Position@PhysClass@@QBEXPAVVector3@@@Z ; PhysClass::Get_Position
	lea	eax, DWORD PTR _Return$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ ENDP	; PhysicalGameObj::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ PROC ; PhysicalGameObj::Peek_Physical_Object, COMDAT
; _this$ = ecx

; 40   : 	inline PhysClass *	Peek_Physical_Object( void ) const { return PhysObj; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1908]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ENDP ; PhysicalGameObj::Peek_Physical_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physclass.h
;	COMDAT ?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ PROC	; PhysClass::Peek_Model, COMDAT
; _this$ = ecx

; 92   : 	RenderObjClass *	Peek_Model(void) { return Model; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ ENDP	; PhysClass::Peek_Model
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physclass.h
;	COMDAT ?Get_Position@PhysClass@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_pos$ = 8						; size = 4
?Get_Position@PhysClass@@QBEXPAVVector3@@@Z PROC	; PhysClass::Get_Position, COMDAT
; _this$ = ecx

; 73   : 	void								Get_Position(Vector3 * set_pos) const	{ Get_Transform().Get_Translation(set_pos); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _set_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	ecx, eax
	call	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ; Matrix3D::Get_Translation
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Position@PhysClass@@QBEXPAVVector3@@@Z ENDP	; PhysClass::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4LineSegClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4LineSegClass@@QAEAAV0@ABV0@@Z PROC			; LineSegClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4LineSegClass@@QAEAAV0@ABV0@@Z ENDP			; LineSegClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0LineSegClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0LineSegClass@@QAE@ABV0@@Z PROC			; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LineSegClass@@QAE@ABV0@@Z ENDP			; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?recalculate@LineSegClass@@IAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
?recalculate@LineSegClass@@IAEXXZ PROC			; LineSegClass::recalculate, COMDAT
; _this$ = ecx

; 81   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 		DP = P1 - P0;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??G@YA?AVVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 83   : 		Dir = DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 84   : 		Dir.Normalize();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Normalize@Vector3@@QAEXXZ		; Vector3::Normalize

; 85   : 		Length = DP.Length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Length@Vector3@@QBEMXZ			; Vector3::Length
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+48]

; 86   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?recalculate@LineSegClass@@IAEXXZ ENDP			; LineSegClass::recalculate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_set$ = 12						; size = 4
?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z PROC	; LineSegClass::Compute_Point, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		Vector3::Add(P0,t*DP,set);

	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 76   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z ENDP	; LineSegClass::Compute_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_Length@LineSegClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Length@LineSegClass@@QBEMXZ PROC			; LineSegClass::Get_Length, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return Length;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@LineSegClass@@QBEMXZ ENDP			; LineSegClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_Dir@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Dir@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_Dir, COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return Dir;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Dir@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_Dir
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_DP@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_DP@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_DP, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		return DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H

; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_DP@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_DP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_P1@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_P1@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_P1, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		return P1;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 60   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_P1@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_P1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_P0@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_P0@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_P0, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return P0;

	mov	eax, DWORD PTR _this$[ebp]

; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_P0@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_P0
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Set@LineSegClass@@QAEXABVVector3@@0M@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_dir$ = 12						; size = 4
_l$ = 16						; size = 4
?Set@LineSegClass@@QAEXABVVector3@@0M@Z PROC		; LineSegClass::Set, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		DP = dir * l;

	push	ecx
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 46   : 		P0 = p0;

	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 47   : 		P1 = p0 + DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _p0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??H@YA?AVVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 48   : 		Dir = dir;

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 49   : 		Length = l;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@LineSegClass@@QAEXABVVector3@@0M@Z ENDP		; LineSegClass::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Set@LineSegClass@@QAEXABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
?Set@LineSegClass@@QAEXABVVector3@@0@Z PROC		; LineSegClass::Set, COMDAT
; _this$ = ecx

; 38   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		P0 = p0;

	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 		P1 = p1;

	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 41   : 		recalculate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?recalculate@LineSegClass@@IAEXXZ	; LineSegClass::recalculate

; 42   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@LineSegClass@@QAEXABVVector3@@0@Z ENDP		; LineSegClass::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
_tm$ = 12						; size = 4
??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 33   : 	LineSegClass(const LineSegClass & that,const Matrix3D & tm)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 34   : 	{
; 35   : 		Set(that,tm);

	mov	eax, DWORD PTR _tm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _that$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@LineSegClass@@QAEXABV1@ABVMatrix3D@@@Z ; LineSegClass::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABVVector3@@0M@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_dir$ = 12						; size = 4
_l$ = 16						; size = 4
??0LineSegClass@@QAE@ABVVector3@@0M@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 29   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 30   : 		DP = Dir * Length;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??D@YA?AVVector3@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 31   : 		P1 = P0 + DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??H@YA?AVVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0LineSegClass@@QAE@ABVVector3@@0M@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
??0LineSegClass@@QAE@ABVVector3@@0@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 25   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 26   : 		recalculate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?recalculate@LineSegClass@@IAEXXZ	; LineSegClass::recalculate

; 27   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0LineSegClass@@QAE@ABVVector3@@0@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LineSegClass@@QAE@XZ PROC				; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 21   : 	LineSegClass(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 22   : 	{
; 23   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0LineSegClass@@QAE@XZ ENDP				; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<StringClass>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<StringClass>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<StringClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@VStringClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@VStringClass@@@@QBEHXZ PROC	; VectorClass<StringClass>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@VStringClass@@@@QBEHXZ ENDP	; VectorClass<StringClass>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z PROC ; VectorClass<StringClass>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z ENDP ; VectorClass<StringClass>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv134 = -88						; size = 4
tv136 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_index$3 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z PROC	; VectorClass<StringClass>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@VStringClass@@@@QBEHXZ ; VectorClass<StringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0CL@ECOCMBOM@VectorClass?$DMclass?5StringClass?$DO?3?3@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv136[ebp], 0
	jmp	SHORT $LN14@operator
$LN13@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN11@operator
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN12@operator
$LN11@operator:
	mov	DWORD PTR tv134[ebp], 0
$LN12@operator:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv136[ebp], eax
$LN14@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv136[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$3[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$3[ebp]
	add	eax, 1
	mov	DWORD PTR _index$3[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@VStringClass@@@@QBEABVStringClass@@H@Z ; VectorClass<StringClass>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _index$3[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@VStringClass@@@@QAEAAV0@ABV0@@Z ENDP	; VectorClass<StringClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referenceableclass.h
;	COMDAT ?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ PROC ; ReferenceableClass<ScriptableGameObj>::Get_Data, COMDAT
; _this$ = ecx

; 30   : 	T * Get_Data( void ) const	{ return ReferenceData; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ENDP ; ReferenceableClass<ScriptableGameObj>::Get_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EReferencerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EReferencerClass@@UAEPAXI@Z PROC			; ReferencerClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ReferencerClass@@UAE@XZ	; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EReferencerClass@@UAEPAXI@Z ENDP			; ReferencerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GReferencerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GReferencerClass@@UAEPAXI@Z PROC			; ReferencerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GReferencerClass@@UAEPAXI@Z ENDP			; ReferencerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ReferencerClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ReferencerClass@@QAE@ABV0@@Z PROC			; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ReferencerClass@@QAE@ABV0@@Z ENDP			; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z PROC ; ReferencerClass::Set_Ptr, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		*this = object;

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z ENDP ; ReferencerClass::Set_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ PROC ; ReferencerClass::Get_Ptr, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return ReferenceTarget ? ReferenceTarget->Get_Data() : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Get_Ptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ; ReferenceableClass<ScriptableGameObj>::Get_Data
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@Get_Ptr
$LN3@Get_Ptr:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Get_Ptr:
	mov	eax, DWORD PTR tv69[ebp]

; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ENDP ; ReferencerClass::Get_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z PROC	; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 49   : 		*this = object;

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 50   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z ENDP	; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??0ReferencerClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ReferencerClass@@QAE@XZ PROC				; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ReferencerClass@@QAE@XZ ENDP				; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??CReferencerClass@@QAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??CReferencerClass@@QAEPAVScriptableGameObj@@XZ PROC	; ReferencerClass::operator->, COMDAT
; _this$ = ecx

; 37   : 	inline ScriptableGameObj* operator ->() { return Get_Ptr(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ENDP	; ReferencerClass::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1PostLoadableClass@@UAE@XZ	; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4PostLoadableClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z PROC		; PostLoadableClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z ENDP		; PostLoadableClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0PostLoadableClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0PostLoadableClass@@QAE@ABV0@@Z PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0PostLoadableClass@@QAE@ABV0@@Z ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_onoff$ = 8						; size = 1
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z PROC ; PostLoadableClass::Set_Post_Load_Registered, COMDAT
; _this$ = ecx

; 22   : 	void									Set_Post_Load_Registered(bool onoff)	{ IsPostLoadRegistered = onoff; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _onoff$[ebp]
	mov	BYTE PTR [eax+4], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ENDP ; PostLoadableClass::Set_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ PROC ; PostLoadableClass::Is_Post_Load_Registered, COMDAT
; _this$ = ecx

; 21   : 	bool									Is_Post_Load_Registered(void) const				{ return IsPostLoadRegistered; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ENDP ; PostLoadableClass::Is_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?On_Post_Load@PostLoadableClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?On_Post_Load@PostLoadableClass@@UAEXXZ PROC		; PostLoadableClass::On_Post_Load, COMDAT
; _this$ = ecx

; 20   : 	virtual void						On_Post_Load (void)							{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?On_Post_Load@PostLoadableClass@@UAEXXZ ENDP		; PostLoadableClass::On_Post_Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??1PostLoadableClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PostLoadableClass@@UAE@XZ PROC			; PostLoadableClass::~PostLoadableClass, COMDAT
; _this$ = ecx

; 19   : 	virtual ~PostLoadableClass(void)													{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1PostLoadableClass@@UAE@XZ ENDP			; PostLoadableClass::~PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??0PostLoadableClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PostLoadableClass@@QAE@XZ PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx

; 18   : 	PostLoadableClass(void) : IsPostLoadRegistered(false)						{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PostLoadableClass@@QAE@XZ ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Set@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@PAH@Z
_TEXT	SEGMENT
_data_entry_ptr$ = -8					; size = 4
_entry_ptr$ = -4					; size = 4
_handle$ = 8						; size = 4
_data$ = 12						; size = 4
?Set@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@PAH@Z PROC ; DataSafeClass<int>::Set, COMDAT

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 583  : 	DataSafeEntryClass *entry_ptr = Get_Entry(handle);

	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	?Get_Entry@GenericDataSafeClass@@SAPAVDataSafeEntryClass@@VDataSafeHandleClass@@@Z ; GenericDataSafeClass::Get_Entry
	add	esp, 4
	mov	DWORD PTR _entry_ptr$[ebp], eax

; 584  : 	if (entry_ptr == NULL)

	cmp	DWORD PTR _entry_ptr$[ebp], 0
	jne	SHORT $LN1@Set

; 585  : 	{
; 586  : 		return(false);

	xor	al, al
	jmp	SHORT $LN2@Set
$LN1@Set:

; 587  : 	}
; 588  : 	DataSafeEntryDataClass<T> *data_entry_ptr = (DataSafeEntryDataClass<T>*) entry_ptr;

	mov	eax, DWORD PTR _entry_ptr$[ebp]
	mov	DWORD PTR _data_entry_ptr$[ebp], eax

; 589  : 	Decrypt(&data_entry_ptr->Data, sizeof(T), SimpleKey, true);

	push	1
	mov	eax, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	4
	mov	edx, DWORD PTR _data_entry_ptr$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	?Decrypt@GenericDataSafeClass@@KAXPAXHK_N@Z ; GenericDataSafeClass::Decrypt
	add	esp, 16					; 00000010H

; 590  : 	Mem_Copy_Encrypt(&data_entry_ptr->Data, data, sizeof(T), true);

	push	1
	push	4
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data_entry_ptr$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	?Mem_Copy_Encrypt@GenericDataSafeClass@@KAXPAX0H_N@Z ; GenericDataSafeClass::Mem_Copy_Encrypt
	add	esp, 16					; 00000010H

; 591  : 	Shuffle();

	push	0
	call	?Shuffle@GenericDataSafeClass@@KAX_N@Z	; GenericDataSafeClass::Shuffle
	add	esp, 4

; 592  : 	Security_Check();

	call	?Security_Check@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Check

; 593  : 	return true;

	mov	al, 1
$LN2@Set:

; 594  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@PAH@Z ENDP ; DataSafeClass<int>::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z
_TEXT	SEGMENT
_data_entry_ptr$ = -8					; size = 4
_entry_ptr$ = -4					; size = 4
_handle$ = 8						; size = 4
_item$ = 12						; size = 4
?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z PROC ; DataSafeClass<int>::Get, COMDAT

; 561  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 562  : 	DataSafeEntryClass *entry_ptr = Get_Entry(handle);

	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	?Get_Entry@GenericDataSafeClass@@SAPAVDataSafeEntryClass@@VDataSafeHandleClass@@@Z ; GenericDataSafeClass::Get_Entry
	add	esp, 4
	mov	DWORD PTR _entry_ptr$[ebp], eax

; 563  : 	if (entry_ptr == NULL)

	cmp	DWORD PTR _entry_ptr$[ebp], 0
	jne	SHORT $LN2@Get

; 564  : 	{
; 565  : 		return(false);

	xor	al, al
	jmp	$LN3@Get
$LN2@Get:

; 566  : 	}
; 567  : 	DataSafeEntryDataClass<T> *data_entry_ptr = (DataSafeEntryDataClass<T>*) entry_ptr;

	mov	eax, DWORD PTR _entry_ptr$[ebp]
	mov	DWORD PTR _data_entry_ptr$[ebp], eax

; 568  : 	Mem_Copy_Decrypt(&(ReturnList[ReturnIndex][0]), &data_entry_ptr->Data, sizeof(T), false);

	push	0
	push	4
	mov	eax, DWORD PTR _data_entry_ptr$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR ?ReturnList@?$DataSafeClass@H@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A ; DataSafeClass<int>::ReturnList
	call	??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
	mov	ecx, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	call	??B?$RefArray@D$03@@QAEPADXZ		; RefArray<char,4>::operator char *
	mov	ecx, 1
	imul	ecx, 0
	add	eax, ecx
	push	eax
	call	?Mem_Copy_Decrypt@GenericDataSafeClass@@KAXPAX0H_N@Z ; GenericDataSafeClass::Mem_Copy_Decrypt
	add	esp, 16					; 00000010H

; 569  : 	item = (T*)(&(ReturnList[ReturnIndex][0]));

	mov	ecx, DWORD PTR ?ReturnList@?$DataSafeClass@H@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A ; DataSafeClass<int>::ReturnList
	call	??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
	mov	ecx, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	call	??B?$RefArray@D$03@@QAEPADXZ		; RefArray<char,4>::operator char *
	mov	ecx, 1
	imul	ecx, 0
	add	eax, ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx], eax

; 570  : 	ReturnIndex++;

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	DWORD PTR [edx], ecx

; 571  : 	if (ReturnIndex >= MAX_OBJECT_COPIES)

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	cmp	DWORD PTR [eax], 8
	jl	SHORT $LN1@Get

; 572  : 	{
; 573  : 		ReturnIndex = 0;

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	DWORD PTR [eax], 0
$LN1@Get:

; 574  : 	}
; 575  : 	Shuffle();

	push	0
	call	?Shuffle@GenericDataSafeClass@@KAX_N@Z	; GenericDataSafeClass::Shuffle
	add	esp, 4

; 576  : 	Security_Check();

	call	?Security_Check@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Check

; 577  : 	return(true);

	mov	al, 1
$LN3@Get:

; 578  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ENDP ; DataSafeClass<int>::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ PROC ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 46   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ENDP ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Security_Fault@GenericDataSafeClass@@KAXXZ
_TEXT	SEGMENT
?Security_Fault@GenericDataSafeClass@@KAXXZ PROC	; GenericDataSafeClass::Security_Fault, COMDAT

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 300  : 	CRCErrors++;

	mov	eax, DWORD PTR ?CRCErrors@GenericDataSafeClass@@1AAHA ; GenericDataSafeClass::CRCErrors
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR ?CRCErrors@GenericDataSafeClass@@1AAHA ; GenericDataSafeClass::CRCErrors
	mov	DWORD PTR [edx], ecx

; 301  : 	Say_Security_Fault();

	call	?Say_Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Say_Security_Fault

; 302  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Security_Fault@GenericDataSafeClass@@KAXXZ ENDP	; GenericDataSafeClass::Security_Fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Security_Check@GenericDataSafeClass@@KAXXZ
_TEXT	SEGMENT
_got$1 = -38						; size = 1
_got$2 = -37						; size = 1
_val$3 = -36						; size = 4
_z$4 = -32						; size = 4
_j$5 = -28						; size = 4
_data_size$6 = -24					; size = 4
_data$7 = -20						; size = 4
_entry_ptr$8 = -16					; size = 4
_i$9 = -12						; size = 4
_checkey$10 = -8					; size = 4
_time$ = -4						; size = 4
?Security_Check@GenericDataSafeClass@@KAXXZ PROC	; GenericDataSafeClass::Security_Check, COMDAT

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 306  : 	static bool _checking = false;
; 307  : 	static unsigned long _calls = 0;
; 308  : 	_calls++;

	mov	eax, DWORD PTR ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA ; `GenericDataSafeClass::Security_Check'::`2'::_calls
	add	eax, 1
	mov	DWORD PTR ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA, eax ; `GenericDataSafeClass::Security_Check'::`2'::_calls

; 309  : 	if (_calls < DATASAFE_TIME_CHECK_CALLS)

	cmp	DWORD PTR ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA, 100000 ; `GenericDataSafeClass::Security_Check'::`2'::_calls, 000186a0H
	jae	SHORT $LN25@Security_C

; 310  : 	{
; 311  : 		return;

	jmp	$LN26@Security_C
$LN25@Security_C:

; 312  : 	}
; 313  : 	_calls = 0;

	mov	DWORD PTR ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA, 0 ; `GenericDataSafeClass::Security_Check'::`2'::_calls

; 314  : 	if (HandleKey - SimpleKey == HandleKey)

	mov	eax, DWORD PTR ?HandleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::HandleKey
	mov	ecx, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?HandleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::HandleKey
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN24@Security_C

; 315  : 	{
; 316  : 		Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN24@Security_C:

; 317  : 	}
; 318  : 	if (SimpleKey - HandleKey == SimpleKey)

	mov	eax, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	mov	ecx, DWORD PTR ?HandleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::HandleKey
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN23@Security_C

; 319  : 	{
; 320  : 		Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN23@Security_C:

; 321  : 	}
; 322  : 	unsigned long time = TIMEGETTIME();

	mov	ecx, DWORD PTR ?SystemTime@SysTimeClass@@2AAV1@A ; SysTimeClass::SystemTime
	call	?Get@SysTimeClass@@QAEIXZ		; SysTimeClass::Get
	mov	DWORD PTR _time$[ebp], eax

; 323  : 	if (time < SecurityCheckDelay || (time | SecurityCheckDelay) == 0 || (time - SecurityCheckDelay) > SECURITY_CHECK_TIME)

	mov	eax, DWORD PTR ?SecurityCheckDelay@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SecurityCheckDelay
	mov	ecx, DWORD PTR _time$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN21@Security_C
	mov	eax, DWORD PTR ?SecurityCheckDelay@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SecurityCheckDelay
	mov	ecx, DWORD PTR _time$[ebp]
	or	ecx, DWORD PTR [eax]
	je	SHORT $LN21@Security_C
	mov	eax, DWORD PTR ?SecurityCheckDelay@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SecurityCheckDelay
	mov	ecx, DWORD PTR _time$[ebp]
	sub	ecx, DWORD PTR [eax]
	cmp	ecx, 15000				; 00003a98H
	jbe	$LN26@Security_C
$LN21@Security_C:

; 324  : 	{
; 325  : 		if (!_checking)

	movzx	eax, BYTE PTR ?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA ; `GenericDataSafeClass::Security_Check'::`2'::_checking
	test	eax, eax
	jne	$LN26@Security_C

; 326  : 		{
; 327  : 			_checking = true;

	mov	BYTE PTR ?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA, 1 ; `GenericDataSafeClass::Security_Check'::`2'::_checking

; 328  : 			SecurityCheckDelay = time;

	mov	eax, DWORD PTR ?SecurityCheckDelay@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SecurityCheckDelay
	mov	ecx, DWORD PTR _time$[ebp]
	mov	DWORD PTR [eax], ecx

; 329  : 			unsigned long checkey = ~SimpleKey;

	mov	eax, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	mov	ecx, DWORD PTR [eax]
	not	ecx
	mov	DWORD PTR _checkey$10[ebp], ecx

; 330  : 			for (int i=0 ; i<NumLists ; i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN19@Security_C
$LN18@Security_C:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN19@Security_C:
	mov	eax, DWORD PTR ?NumLists@GenericDataSafeClass@@1AAHA ; GenericDataSafeClass::NumLists
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN17@Security_C

; 331  : 			{
; 332  : 				if (Safe[i] != NULL && Safe[i]->EntryCount > 0)

	mov	ecx, DWORD PTR ?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A ; GenericDataSafeClass::Safe
	call	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	$LN16@Security_C
	mov	ecx, DWORD PTR ?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A ; GenericDataSafeClass::Safe
	call	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	DWORD PTR [edx+4], 0
	jle	$LN16@Security_C

; 333  : 				{
; 334  : 					DataSafeEntryClass *entry_ptr = Safe[i]->SafeList;

	mov	ecx, DWORD PTR ?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A ; GenericDataSafeClass::Safe
	call	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _entry_ptr$8[ebp], eax

; 335  : 					unsigned long *data = NULL;

	mov	DWORD PTR _data$7[ebp], 0

; 336  : 					int data_size = entry_ptr->Size;

	mov	eax, DWORD PTR _entry_ptr$8[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _data_size$6[ebp], ecx

; 337  : 					data_size = data_size >> 2;

	mov	eax, DWORD PTR _data_size$6[ebp]
	sar	eax, 2
	mov	DWORD PTR _data_size$6[ebp], eax

; 338  : 					if (entry_ptr)

	cmp	DWORD PTR _entry_ptr$8[ebp], 0
	je	SHORT $LN16@Security_C

; 339  : 					{
; 340  : 						for (int j=0 ; j<Safe[i]->EntryCount ; j++)

	mov	DWORD PTR _j$5[ebp], 0
	jmp	SHORT $LN14@Security_C
$LN13@Security_C:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
$LN14@Security_C:
	mov	ecx, DWORD PTR ?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A ; GenericDataSafeClass::Safe
	call	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _j$5[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN16@Security_C

; 341  : 						{
; 342  : 							checkey ^= entry_ptr->Handle;

	mov	ecx, DWORD PTR _entry_ptr$8[ebp]
	call	??BDataSafeHandleClass@@QAEHXZ		; DataSafeHandleClass::operator int
	xor	eax, DWORD PTR _checkey$10[ebp]
	mov	DWORD PTR _checkey$10[ebp], eax

; 343  : 							data = (unsigned long *) (((char*)entry_ptr) + sizeof(*entry_ptr));

	mov	eax, DWORD PTR _entry_ptr$8[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _data$7[ebp], eax

; 344  : 							for (int z=0 ; z<data_size ; z++)

	mov	DWORD PTR _z$4[ebp], 0
	jmp	SHORT $LN11@Security_C
$LN10@Security_C:
	mov	eax, DWORD PTR _z$4[ebp]
	add	eax, 1
	mov	DWORD PTR _z$4[ebp], eax
$LN11@Security_C:
	mov	eax, DWORD PTR _z$4[ebp]
	cmp	eax, DWORD PTR _data_size$6[ebp]
	jge	SHORT $LN9@Security_C

; 345  : 							{
; 346  : 								checkey ^= *data++;

	mov	eax, DWORD PTR _data$7[ebp]
	mov	ecx, DWORD PTR _checkey$10[ebp]
	xor	ecx, DWORD PTR [eax]
	mov	DWORD PTR _checkey$10[ebp], ecx
	mov	edx, DWORD PTR _data$7[ebp]
	add	edx, 4
	mov	DWORD PTR _data$7[ebp], edx

; 347  : 							}

	jmp	SHORT $LN10@Security_C
$LN9@Security_C:

; 348  : 							entry_ptr = entry_ptr->Next;

	mov	eax, DWORD PTR _entry_ptr$8[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _entry_ptr$8[ebp], ecx

; 349  : 						}

	jmp	SHORT $LN13@Security_C
$LN16@Security_C:

; 350  : 					}
; 351  : 				}
; 352  : 			}

	jmp	$LN18@Security_C
$LN17@Security_C:

; 353  : 			if (checkey != Checksum)

	mov	eax, DWORD PTR ?Checksum@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::Checksum
	mov	ecx, DWORD PTR _checkey$10[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN8@Security_C

; 354  : 			{
; 355  : 				Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN8@Security_C:

; 356  : 			}
; 357  : 			if (NumLists)

	mov	eax, DWORD PTR ?NumLists@GenericDataSafeClass@@1AAHA ; GenericDataSafeClass::NumLists
	cmp	DWORD PTR [eax], 0
	je	$LN7@Security_C

; 358  : 			{
; 359  : 				int *val = NULL;

	mov	DWORD PTR _val$3[ebp], 0

; 360  : 				if ((int)SentinelOne != 0)

	mov	ecx, DWORD PTR ?SentinelOne@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A ; GenericDataSafeClass::SentinelOne
	call	??BDataSafeHandleClass@@QAEHXZ		; DataSafeHandleClass::operator int
	test	eax, eax
	je	SHORT $LN6@Security_C

; 361  : 				{
; 362  : 					bool got = DataSafeClass<int>::Get(SentinelOne, val);

	lea	eax, DWORD PTR _val$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?SentinelOne@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A ; GenericDataSafeClass::SentinelOne
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ; DataSafeClass<int>::Get
	add	esp, 8
	mov	BYTE PTR _got$2[ebp], al

; 363  : 					if (!got || val == NULL || *val != SENTINEL_ONE)

	movzx	eax, BYTE PTR _got$2[ebp]
	test	eax, eax
	je	SHORT $LN4@Security_C
	cmp	DWORD PTR _val$3[ebp], 0
	je	SHORT $LN4@Security_C
	mov	eax, DWORD PTR _val$3[ebp]
	cmp	DWORD PTR [eax], 696730466		; 29874362H
	je	SHORT $LN6@Security_C
$LN4@Security_C:

; 364  : 					{
; 365  : 						Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN6@Security_C:

; 366  : 					}
; 367  : 				}
; 368  : 				val = NULL;

	mov	DWORD PTR _val$3[ebp], 0

; 369  : 				if ((int)SentinelTwo != 0)

	mov	ecx, DWORD PTR ?SentinelTwo@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A ; GenericDataSafeClass::SentinelTwo
	call	??BDataSafeHandleClass@@QAEHXZ		; DataSafeHandleClass::operator int
	test	eax, eax
	je	SHORT $LN7@Security_C

; 370  : 				{
; 371  : 					bool got = DataSafeClass<int>::Get(SentinelTwo, val);

	lea	eax, DWORD PTR _val$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?SentinelTwo@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A ; GenericDataSafeClass::SentinelTwo
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ; DataSafeClass<int>::Get
	add	esp, 8
	mov	BYTE PTR _got$1[ebp], al

; 372  : 					if (!got || val == NULL || *val != SENTINEL_TWO)

	movzx	eax, BYTE PTR _got$1[ebp]
	test	eax, eax
	je	SHORT $LN1@Security_C
	cmp	DWORD PTR _val$3[ebp], 0
	je	SHORT $LN1@Security_C
	mov	eax, DWORD PTR _val$3[ebp]
	cmp	DWORD PTR [eax], 195890093		; 0bad0badH
	je	SHORT $LN7@Security_C
$LN1@Security_C:

; 373  : 					{
; 374  : 						Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN7@Security_C:

; 375  : 					}
; 376  : 				}
; 377  : 			}
; 378  : 			_checking = false;

	mov	BYTE PTR ?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA, 0 ; `GenericDataSafeClass::Security_Check'::`2'::_checking
$LN26@Security_C:

; 379  : 		}
; 380  : 	}
; 381  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Security_Check@GenericDataSafeClass@@KAXXZ ENDP	; GenericDataSafeClass::Security_Check
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??BDataSafeHandleClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BDataSafeHandleClass@@QAEHXZ PROC			; DataSafeHandleClass::operator int, COMDAT
; _this$ = ecx

; 77   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 		return Handle.Whole.WholeHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 79   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BDataSafeHandleClass@@QAEHXZ ENDP			; DataSafeHandleClass::operator int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Is_Valid@DataSafeHandleClass@@QBE_NXZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Valid@DataSafeHandleClass@@QBE_NXZ PROC		; DataSafeHandleClass::Is_Valid, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		return Handle.Whole.WholeHandle != -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN3@Is_Valid
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Is_Valid
$LN3@Is_Valid:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Is_Valid:
	mov	al, BYTE PTR tv68[ebp]

; 70   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid@DataSafeHandleClass@@QBE_NXZ ENDP		; DataSafeHandleClass::Is_Valid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4SysTimeClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SysTimeClass@@QAEAAV0@ABV0@@Z PROC			; SysTimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4SysTimeClass@@QAEAAV0@ABV0@@Z ENDP			; SysTimeClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Inverse@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
tv222 = -188						; size = 4
tv272 = -184						; size = 4
tv212 = -180						; size = 4
$T1 = -176						; size = 12
$T2 = -164						; size = 12
_i1$ = -88						; size = 4
_j$ = -84						; size = 4
_i$ = -80						; size = 4
_b$ = -76						; size = 36
_a$ = -40						; size = 36
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Inverse, COMDAT
; _this$ = ecx

; 309  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 310  : 		Matrix3 a(*this);				// As a evolves from original mat into identity

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3

; 311  : 		Matrix3 b(true);				// b evolves from identity into inverse(a)

	push	1
	lea	ecx, DWORD PTR _b$[ebp]
	call	??0Matrix3@@QAE@_N@Z			; Matrix3::Matrix3

; 312  : 		int i, j, i1;
; 313  : 
; 314  : 		// Loop over cols of a from left to right, eliminating above and below diagonal
; 315  : 		for (j=0; j<3; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@Inverse
$LN11@Inverse:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@Inverse:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN10@Inverse

; 316  : 
; 317  : 			// Find largest pivot in column j among rows j..3
; 318  : 			i1 = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i1$[ebp], eax

; 319  : 			for (i=j+1; i<3; i++) {

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@Inverse
$LN8@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN7@Inverse

; 320  : 				if (WWMath::Fabs(a[i][j]) > WWMath::Fabs(a[i1][j])) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv212[ebp]
	movss	xmm0, DWORD PTR tv212[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv222[ebp]
	movss	xmm0, DWORD PTR tv272[ebp]
	comiss	xmm0, DWORD PTR tv222[ebp]
	jbe	SHORT $LN6@Inverse

; 321  : 					i1 = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i1$[ebp], eax
$LN6@Inverse:

; 322  : 				}
; 323  : 			}

	jmp	$LN8@Inverse
$LN7@Inverse:

; 324  : 
; 325  : 			// Swap rows i1 and j in a and b to put pivot on diagonal
; 326  : 			Swap(a.Row[i1], a.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _a$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 327  : 			Swap(b.Row[i1], b.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _b$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 328  : 
; 329  : 			// Scale row j to have a unit diagonal
; 330  : 			if (a[j][j]==0.) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]

; 331  : 				//Matrix3::inverse: singular matrix; can't invert
; 332  : 			}
; 333  : 			b.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 334  : 			a.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 335  : 
; 336  : 			// Eliminate off-diagonal elems in col j of a, doing identical ops to b
; 337  : 			for (i=0; i<3; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Inverse
$LN3@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN2@Inverse

; 338  : 				if (i != j) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	je	$LN1@Inverse

; 339  : 					b.Row[i] -= a[i][j] * b.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 340  : 					a.Row[i] -= a[i][j] * a.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
$LN1@Inverse:

; 341  : 				}
; 342  : 			}

	jmp	$LN3@Inverse
$LN2@Inverse:

; 343  : 		}

	jmp	$LN11@Inverse
$LN10@Inverse:

; 344  : 		return b;

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 345  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
tv86 = -80						; size = 4
_j$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_extent$ = 8						; size = 4
_new_extent$ = 12					; size = 4
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_AABox_Extent, COMDAT
; _this$ = ecx

; 298  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 		for (int i=0; i<3; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@Rotate_AAB
$LN5@Rotate_AAB:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@Rotate_AAB:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	$LN4@Rotate_AAB

; 300  : 		{
; 301  : 			(*new_extent)[i] = 0.0f;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 302  : 			for (int j=0; j<3; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN3@Rotate_AAB
$LN2@Rotate_AAB:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN3@Rotate_AAB:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	SHORT $LN1@Rotate_AAB

; 303  : 			{
; 304  : 				(*new_extent)[i] += WWMath::Fabs(Row[i][j] * extent[j]);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _j$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _extent$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR tv137[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 305  : 			}

	jmp	SHORT $LN2@Rotate_AAB
$LN1@Rotate_AAB:

; 306  : 		}

	jmp	$LN5@Rotate_AAB
$LN4@Rotate_AAB:

; 307  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_AABox_Extent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Transpose_Rotate_Vector, COMDAT

; 283  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 284  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 285  : 		Vector3 * v;
; 286  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transpose_

; 287  : 		{
; 288  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 289  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 290  : 		} else {

	jmp	SHORT $LN1@Transpose_
$LN2@Transpose_:

; 291  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transpose_:

; 292  : 		}
; 293  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 294  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 295  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 296  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Transpose_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_Vector, COMDAT

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 267  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 268  : 		Vector3 * v;
; 269  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 270  : 		{
; 271  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 272  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 273  : 		}
; 274  : 		else

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 275  : 		{
; 276  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 277  : 		}
; 278  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 279  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 280  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Subtract@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z PROC		; Matrix3::Subtract, COMDAT

; 257  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 258  : 		Vector3::Subtract(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 259  : 		Vector3::Subtract(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 260  : 		Vector3::Subtract(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 261  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z ENDP		; Matrix3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Add@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Add@Matrix3@@SAXABV1@0PAV1@@Z PROC			; Matrix3::Add, COMDAT

; 251  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 252  : 		Vector3::Add(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 253  : 		Vector3::Add(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 254  : 		Vector3::Add(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 255  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Matrix3@@SAXABV1@0PAV1@@Z ENDP			; Matrix3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z
_TEXT	SEGMENT
tv246 = -88						; size = 4
tv244 = -84						; size = 4
tv242 = -80						; size = 4
tv240 = -76						; size = 4
tv238 = -72						; size = 4
tv236 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z PROC		; operator*, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 399  : 	return Vector3(
; 400  : 		a[0][0] * v[0] + a[0][1] * v[1] + a[0][2] * v[2],
; 401  : 		a[1][0] * v[0] + a[1][1] * v[1] + a[1][2] * v[2],
; 402  : 		a[2][0] * v[0] + a[2][1] * v[1] + a[2][2] * v[2] 
; 403  : 	);

	push	0
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv236[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv236[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv238[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv238[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv240[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv242[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv242[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv244[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv246[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv246[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 404  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z ENDP		; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 234  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		set_z->Set(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 236  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 		set_y->Set(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 232  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 226  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 		set_x->Set(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 228  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 222  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 		return Vector3(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 		return Vector3(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 220  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 214  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 		return Vector3(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Z_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Z_Rotation, COMDAT
; _this$ = ecx

; 209  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		Vector3 v = (*this) * Vector3(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 211  : 		return atan2(v[1],v[0]);

	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 212  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Z_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Y_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Y_Rotation, COMDAT
; _this$ = ecx

; 204  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 		Vector3 v = (*this) * Vector3(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 206  : 		return atan2(v[0],v[2]);

	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 207  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Y_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_X_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_X_Rotation, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		Vector3 v = (*this) * Vector3(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 201  : 		return atan2(v[2], v[1]);

	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 202  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_X_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		float tmp1,tmp2;
; 188  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 189  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 190  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 191  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 192  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 193  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 194  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 195  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 196  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		Rotate_Z(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Z@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Z

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 169  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		float tmp1,tmp2;
; 171  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 172  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 173  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 174  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 175  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 176  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 177  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 178  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 180  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		Rotate_Y(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Y@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Y

; 167  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		float tmp1,tmp2;
; 154  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 155  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 156  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 157  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 158  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 159  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 160  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 161  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 162  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 163  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		Rotate_X(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_X@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_X

; 150  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Make_Identity@Matrix3@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3@@QAEXXZ PROC			; Matrix3::Make_Identity, COMDAT
; _this$ = ecx

; 142  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		Row[0].Set(1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 144  : 		Row[1].Set(0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 145  : 		Row[2].Set(0.0f,0.0f,1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 146  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3@@QAEXXZ ENDP			; Matrix3::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??_0Matrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator/=, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		Row[0] /= d; Row[1] /= d; Row[2] /= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 139  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??XMatrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator*=, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=

; 134  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??ZMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator-=, COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 129  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 130  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??YMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator+=, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 124  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??4Matrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator=, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 117  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 118  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Determinant@Matrix3@@QBEMXZ
_TEXT	SEGMENT
tv243 = -92						; size = 4
tv255 = -88						; size = 4
tv253 = -84						; size = 4
tv251 = -80						; size = 4
tv249 = -76						; size = 4
tv247 = -72						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix3@@QBEMXZ PROC			; Matrix3::Determinant, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return   Row[0][0] * (Row[1][1] * Row[2][2] - Row[1][2] * Row[2][1])
; 111  : 				- Row[0][1] * (Row[1][0] * Row[2][2] - Row[1][2] * Row[2][0])
; 112  : 				- Row[0][2] * (Row[1][0] * Row[2][1] - Row[1][1] * Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv247[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm1
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv251[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv249[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv255[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv253[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR tv243[ebp], xmm0
	fld	DWORD PTR tv243[ebp]

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix3@@QBEMXZ ENDP			; Matrix3::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -104						; size = 12
$T2 = -92						; size = 12
$T3 = -80						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Transpose, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 		return Matrix3(
; 103  : 				Vector3(Row[0][0], Row[1][0], Row[2][0]),
; 104  : 				Vector3(Row[0][1], Row[1][1], Row[2][1]),
; 105  : 				Vector3(Row[0][2], Row[1][2], Row[2][2])
; 106  : 		);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABVVector3@@00@Z	; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QBEABVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QBEABVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 99   : 	TT_INLINE const Vector3 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QBEABVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QAEAAVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QAEAAVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 98   : 	TT_INLINE Vector3 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QAEAAVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv359 = -80						; size = 4
tv353 = -80						; size = 4
tv347 = -80						; size = 4
tv357 = -76						; size = 4
tv351 = -76						; size = 4
tv345 = -76						; size = 4
tv355 = -72						; size = 4
tv349 = -72						; size = 4
tv343 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@MM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Row[0].Set(
; 82   : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 83   : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 84   : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s)
; 85   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv343[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv343[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv345[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv345[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv347[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv347[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 86   : 		Row[1].Set(
; 87   : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 88   : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 89   : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s)
; 90   : 		);

	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv349[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv349[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv351[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv351[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv353[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv353[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 91   : 	Row[2].Set(
; 92   : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 93   : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 94   : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2]))
; 95   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv355[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv355[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv357[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv357[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv359[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv359[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@MM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3@@QAEXABVVector3@@M@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Set(axis,sinf(angle),cosf(angle));

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3@@QAEXABVVector3@@M@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
?Set@Matrix3@@QAEXMMMMMMMMM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 72   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 73   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 74   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Set@Matrix3@@QAEXMMMMMMMMM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@00@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 64   : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 66   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 67   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@00@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVQuaternion@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
??0Matrix3@@QAE@ABVQuaternion@@@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE Matrix3(const Quaternion & q)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		this->Set(q);

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVQuaternion@@@Z	; Matrix3::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABVQuaternion@@@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s_angle$ = 12						; size = 4
_c_angle$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@MM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float s_angle,float c_angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{ 
; 55   : 		Set(axis,s_angle,c_angle); 

	push	ecx
	movss	xmm0, DWORD PTR _c_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3@@QAE@ABVVector3@@M@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{ 
; 51   : 		Set(axis,angle); 

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@M@Z	; Matrix3::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3@@QAE@ABVVector3@@M@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
??0Matrix3@@QAE@MMMMMMMMM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 43   : 	TT_INLINE explicit Matrix3(float m11,float m12,float m13,float m21,float m22,float m23,float m31,float m32,float m33)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 44   : 	{
; 45   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 46   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 47   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0Matrix3@@QAE@MMMMMMMMM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@00@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE explicit Matrix3(const Vector3 & v0, const Vector3 & v1, const Vector3 & v2)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 36   : 	{ 
; 37   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 38   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 39   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@00@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix3@@QAE@_N@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE explicit Matrix3(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 27   : 	{
; 28   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	$LN1@Matrix3

; 29   : 		{
; 30   : 			Row[0].Set(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 31   : 			Row[1].Set(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 32   : 			Row[2].Set(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
$LN1@Matrix3:

; 33   : 		}
; 34   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@_N@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3@@QAE@ABV0@@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix3(const Matrix3 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 25   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABV0@@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix3@@QAE@XZ PROC					; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 21   : 	TT_INLINE Matrix3(void) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix3@@QAE@XZ ENDP					; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z
_TEXT	SEGMENT
tv342 = -96						; size = 4
tv336 = -96						; size = 4
tv330 = -96						; size = 4
tv324 = -96						; size = 4
tv340 = -92						; size = 4
tv334 = -92						; size = 4
tv328 = -92						; size = 4
tv322 = -92						; size = 4
tv338 = -88						; size = 4
tv332 = -88						; size = 4
tv326 = -88						; size = 4
tv320 = -88						; size = 4
_v$ = -20						; size = 4
_tmp$ = -16						; size = 16
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 227  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 228  : 		Vector4 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector4@@QAE@XZ			; Vector4::Vector4

; 229  : 		Vector4 * v;
; 230  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 231  : 		{
; 232  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 233  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 234  : 		}
; 235  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 236  : 		{
; 237  : 			v = (Vector4 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 238  : 		}
; 239  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3] * v->W);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv320[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv320[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv322[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv322[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv324[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv324[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax], xmm1

; 240  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3] * v->W);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv326[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv326[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv328[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv328[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv330[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv330[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 241  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3] * v->W);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv332[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv332[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv334[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv334[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv336[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv336[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 242  : 		out->W = (A[3][0] * v->X + A[3][1] * v->Y + A[3][2] * v->Z + A[3][3] * v->W);

	push	0
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv338[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv338[ebp]
	addss	xmm1, xmm0
	push	2
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv340[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv340[ebp]
	addss	xmm1, xmm0
	push	3
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv342[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv342[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 243  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z
_TEXT	SEGMENT
tv265 = -76						; size = 4
tv259 = -76						; size = 4
tv253 = -76						; size = 4
tv263 = -72						; size = 4
tv257 = -72						; size = 4
tv251 = -72						; size = 4
tv261 = -68						; size = 4
tv255 = -68						; size = 4
tv249 = -68						; size = 4
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 220  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 221  : 		out->X = (A[0][0] * in.X + A[0][1] * in.Y + A[0][2] * in.Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv249[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv251[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv251[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv253[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 222  : 		out->Y = (A[1][0] * in.X + A[1][1] * in.Y + A[1][2] * in.Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv255[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv257[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv257[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv259[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv259[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 223  : 		out->Z = (A[2][0] * in.X + A[2][1] * in.Y + A[2][2] * in.Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv261[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv261[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv263[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv263[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv265[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv265[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 224  : 		out->W = 1.0f;

	mov	eax, DWORD PTR _out$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 225  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 204  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 205  : 		Vector3 *v;
; 206  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 207  : 		{
; 208  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 209  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 210  : 		}
; 211  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 212  : 		{
; 213  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 214  : 		}
; 215  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 216  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 217  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 218  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??_0Matrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_ood$ = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator/=, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 		float ood = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _ood$[ebp], xmm0

; 179  : 		Row[0] *= ood; Row[1] *= ood; Row[2] *= ood; Row[3] *= ood;

	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 180  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 181  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??XMatrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator*=, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; Row[3] *= d;

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 174  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 175  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??ZMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator-=, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; Row[3] -= m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 169  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??YMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator+=, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; Row[3] += m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=

; 164  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 165  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??4Matrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 159  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Inverse@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
_t$ = -72						; size = 64
_s$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Inverse, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		float s = Determinant();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Determinant@Matrix4@@QBEMXZ		; Matrix4::Determinant
	fstp	DWORD PTR _s$[ebp]

; 135  : 		if (s == 0.0) return Matrix4();

	cvtss2sd xmm0, DWORD PTR _s$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Inverse
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN2@Inverse
$LN1@Inverse:

; 136  : 		s = 1/s;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _s$[ebp], xmm0

; 137  : 		Matrix4 t;

	lea	ecx, DWORD PTR _t$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4

; 138  : 		t.Row[0].X = s*(Row[1].Y*(Row[2].Z*Row[3].W - Row[2].W*Row[3].Z) + Row[1].Z*(Row[2].W*Row[3].Y - Row[2].Y*Row[3].W) + Row[1].W*(Row[2].Y*Row[3].Z - Row[2].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 139  : 		t.Row[0].Y = s*(Row[2].Y*(Row[0].Z*Row[3].W - Row[0].W*Row[3].Z) + Row[2].Z*(Row[0].W*Row[3].Y - Row[0].Y*Row[3].W) + Row[2].W*(Row[0].Y*Row[3].Z - Row[0].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 140  : 		t.Row[0].Z = s*(Row[3].Y*(Row[0].Z*Row[1].W - Row[0].W*Row[1].Z) + Row[3].Z*(Row[0].W*Row[1].Y - Row[0].Y*Row[1].W) + Row[3].W*(Row[0].Y*Row[1].Z - Row[0].Z*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 141  : 		t.Row[0].W = s*(Row[0].Y*(Row[1].W*Row[2].Z - Row[1].Z*Row[2].W) + Row[0].Z*(Row[1].Y*Row[2].W - Row[1].W*Row[2].Y) + Row[0].W*(Row[1].Z*Row[2].Y - Row[1].Y*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 142  : 		t.Row[1].X = s*(Row[1].Z*(Row[2].X*Row[3].W - Row[2].W*Row[3].X) + Row[1].W*(Row[2].Z*Row[3].X - Row[2].X*Row[3].Z) + Row[1].X*(Row[2].W*Row[3].Z - Row[2].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 143  : 		t.Row[1].Y = s*(Row[2].Z*(Row[0].X*Row[3].W - Row[0].W*Row[3].X) + Row[2].W*(Row[0].Z*Row[3].X - Row[0].X*Row[3].Z) + Row[2].X*(Row[0].W*Row[3].Z - Row[0].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 144  : 		t.Row[1].Z = s*(Row[3].Z*(Row[0].X*Row[1].W - Row[0].W*Row[1].X) + Row[3].W*(Row[0].Z*Row[1].X - Row[0].X*Row[1].Z) + Row[3].X*(Row[0].W*Row[1].Z - Row[0].Z*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 145  : 		t.Row[1].W = s*(Row[0].Z*(Row[1].W*Row[2].X - Row[1].X*Row[2].W) + Row[0].W*(Row[1].X*Row[2].Z - Row[1].Z*Row[2].X) + Row[0].X*(Row[1].Z*Row[2].W - Row[1].W*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 146  : 		t.Row[2].X = s*(Row[1].W*(Row[2].X*Row[3].Y - Row[2].Y*Row[3].X) + Row[1].X*(Row[2].Y*Row[3].W - Row[2].W*Row[3].Y) + Row[1].Y*(Row[2].W*Row[3].X - Row[2].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 147  : 		t.Row[2].Y = s*(Row[2].W*(Row[0].X*Row[3].Y - Row[0].Y*Row[3].X) + Row[2].X*(Row[0].Y*Row[3].W - Row[0].W*Row[3].Y) + Row[2].Y*(Row[0].W*Row[3].X - Row[0].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 148  : 		t.Row[2].Z = s*(Row[3].W*(Row[0].X*Row[1].Y - Row[0].Y*Row[1].X) + Row[3].X*(Row[0].Y*Row[1].W - Row[0].W*Row[1].Y) + Row[3].Y*(Row[0].W*Row[1].X - Row[0].X*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 149  : 		t.Row[2].W = s*(Row[0].W*(Row[1].Y*Row[2].X - Row[1].X*Row[2].Y) + Row[0].X*(Row[1].W*Row[2].Y - Row[1].Y*Row[2].W) + Row[0].Y*(Row[1].X*Row[2].W - Row[1].W*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 150  : 		t.Row[3].X = s*(Row[1].X*(Row[2].Z*Row[3].Y - Row[2].Y*Row[3].Z) + Row[1].Y*(Row[2].X*Row[3].Z - Row[2].Z*Row[3].X) + Row[1].Z*(Row[2].Y*Row[3].X - Row[2].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 151  : 		t.Row[3].Y = s*(Row[2].X*(Row[0].Z*Row[3].Y - Row[0].Y*Row[3].Z) + Row[2].Y*(Row[0].X*Row[3].Z - Row[0].Z*Row[3].X) + Row[2].Z*(Row[0].Y*Row[3].X - Row[0].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 152  : 		t.Row[3].Z = s*(Row[3].X*(Row[0].Z*Row[1].Y - Row[0].Y*Row[1].Z) + Row[3].Y*(Row[0].X*Row[1].Z - Row[0].Z*Row[1].X) + Row[3].Z*(Row[0].Y*Row[1].X - Row[0].X*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 153  : 		t.Row[3].W = s*(Row[0].X*(Row[1].Y*Row[2].Z - Row[1].Z*Row[2].Y) + Row[0].Y*(Row[1].Z*Row[2].X - Row[1].X*Row[2].Z) + Row[0].Z*(Row[1].X*Row[2].Y - Row[1].Y*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 154  : 		return t;

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABV0@@Z			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@Inverse:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Determinant@Matrix4@@QBEMXZ
_TEXT	SEGMENT
_det$ = -8						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix4@@QBEMXZ PROC			; Matrix4::Determinant, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		float det;
; 124  : 		det =	(Row[0].X * Row[1].Y - Row[0].Y * Row[1].X) * (Row[2].Z * Row[3].W - Row[2].W * Row[3].Z);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+8]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR _det$[ebp], xmm0

; 125  : 		det -=	(Row[0].X * Row[1].Z - Row[0].Z * Row[1].X) * (Row[2].Y * Row[3].W - Row[2].W * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 126  : 		det +=	(Row[0].X * Row[1].W - Row[0].W * Row[1].X) * (Row[2].Y * Row[3].Z - Row[2].Z * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 127  : 		det +=	(Row[0].Y * Row[1].Z - Row[0].Z * Row[1].Y) * (Row[2].X * Row[3].W - Row[2].W * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 128  : 		det -=	(Row[0].Y * Row[1].W - Row[0].W * Row[1].Y) * (Row[2].X * Row[3].Z - Row[2].Z * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 129  : 		det +=	(Row[0].Z * Row[1].W - Row[0].W * Row[1].Z) * (Row[2].X * Row[3].Y - Row[2].Y * Row[3].X);		

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+8]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+4]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 130  : 		return det;	

	fld	DWORD PTR _det$[ebp]

; 131  : 	};	

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix4@@QBEMXZ ENDP			; Matrix4::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transpose@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -132						; size = 16
$T2 = -116						; size = 16
$T3 = -100						; size = 16
$T4 = -84						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Transpose, COMDAT
; _this$ = ecx

; 118  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 		return Matrix4(Vector4(Row[0][0], Row[1][0], Row[2][0], Row[3][0]),Vector4(Row[0][1], Row[1][1], Row[2][1], Row[3][1]),Vector4(Row[0][2], Row[1][2], Row[2][2], Row[3][2]),Vector4(Row[0][3], Row[1][3], Row[2][3], Row[3][3]));

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABVVector4@@000@Z	; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QBEABVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 116  : 	TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QBEABVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QAEAAVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 115  : 	TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QAEAAVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv218 = -72						; size = 4
tv216 = -72						; size = 4
tv214 = -72						; size = 4
tv212 = -72						; size = 4
tv210 = -72						; size = 4
tv208 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Perspective, COMDAT
; _this$ = ecx

; 103  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 105  : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv208[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv208[ebp]
	movss	DWORD PTR [eax], xmm0

; 106  : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv210[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv210[ebp]
	movss	DWORD PTR [eax], xmm0

; 107  : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv212[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv212[ebp]
	movss	DWORD PTR [eax], xmm0

; 108  : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv214[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv214[ebp]
	movss	DWORD PTR [eax], xmm0

; 109  : 		Row[2][2] = zfar / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv216[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv216[ebp]
	movss	DWORD PTR [eax], xmm0

; 110  : 		Row[2][3] = (znear * zfar) / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	mulss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	subss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv218[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR [eax], xmm0

; 111  : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 112  : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Perspective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv190 = -72						; size = 4
tv188 = -72						; size = 4
tv186 = -72						; size = 4
tv184 = -72						; size = 4
tv182 = -72						; size = 4
tv180 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z PROC			; Matrix4::Init_Ortho, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 94   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv180[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv180[ebp]
	movss	DWORD PTR [eax], xmm0

; 95   : 		Row[0][3] = (left + right) / (left - right);

	movss	xmm0, DWORD PTR _left$[ebp]
	addss	xmm0, DWORD PTR _right$[ebp]
	movss	xmm1, DWORD PTR _left$[ebp]
	subss	xmm1, DWORD PTR _right$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv182[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv182[ebp]
	movss	DWORD PTR [eax], xmm0

; 96   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv184[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv184[ebp]
	movss	DWORD PTR [eax], xmm0

; 97   : 		Row[1][3] = (top + bottom) / (bottom - top);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _bottom$[ebp]
	subss	xmm1, DWORD PTR _top$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR [eax], xmm0

; 98   : 		Row[2][2] = 1.0f / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv188[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv188[ebp]
	movss	DWORD PTR [eax], xmm0

; 99   : 		Row[2][3] = znear / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv190[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR [eax], xmm0

; 100  : 
; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z ENDP			; Matrix4::Init_Ortho
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv227 = -72						; size = 4
tv225 = -72						; size = 4
tv223 = -72						; size = 4
tv221 = -72						; size = 4
tv219 = -72						; size = 4
tv217 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z PROC	; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 82   : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv217[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv217[ebp]
	movss	DWORD PTR [eax], xmm0

; 83   : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv219[ebp]
	movss	DWORD PTR [eax], xmm0

; 84   : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv221[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv221[ebp]
	movss	DWORD PTR [eax], xmm0

; 85   : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv223[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv223[ebp]
	movss	DWORD PTR [eax], xmm0

; 86   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv225[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv225[ebp]
	movss	DWORD PTR [eax], xmm0

; 87   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv227[ebp]
	movss	DWORD PTR [eax], xmm0

; 88   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 89   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z ENDP	; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z
_TEXT	SEGMENT
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_hfov$ = 8						; size = 4
_vfov$ = 12						; size = 4
_znear$ = 16						; size = 4
_zfar$ = 20						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z PROC		; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 72   : 		Row[0][0] = static_cast<float>(1.0 / tan(hfov*0.5));

	cvtss2sd xmm0, DWORD PTR _hfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 73   : 		Row[1][1] = static_cast<float>(1.0 / tan(vfov*0.5));

	cvtss2sd xmm0, DWORD PTR _vfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 74   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 75   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 76   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 77   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z ENDP		; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv195 = -72						; size = 4
tv193 = -72						; size = 4
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Ortho_OGL, COMDAT
; _this$ = ecx

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 61   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 62   : 		Row[0][3] = -(right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 63   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 64   : 		Row[1][3] = -(top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 65   : 		Row[2][2] = -2.0f / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	subss	xmm0, DWORD PTR _znear$[ebp]
	movss	xmm1, DWORD PTR __real@c0000000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv193[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR [eax], xmm0

; 66   : 		Row[2][3] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv195[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv195[ebp]
	movss	DWORD PTR [eax], xmm0

; 67   : 
; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Ortho_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
?Init@Matrix4@@QAEXABVVector4@@000@Z PROC		; Matrix4::Init, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		Row[0] = v0; Row[1] = v1; Row[2] = v2; Row[3] = v3;

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init@Matrix4@@QAEXABVVector4@@000@Z ENDP		; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVMatrix3D@@@Z
_TEXT	SEGMENT
$T1 = -84						; size = 16
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z PROC			; Matrix4::Init, COMDAT
; _this$ = ecx

; 51   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 		Row[0] = m[0]; Row[1] = m[1]; Row[2] = m[2]; Row[3] = Vector4(0.0,0.0,0.0,1.0); 

	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 53   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z ENDP			; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Make_Identity@Matrix4@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix4@@QAEXXZ PROC			; Matrix4::Make_Identity, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		Row[0].Set(1.0,0.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 46   : 		Row[1].Set(0.0,1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 47   : 		Row[2].Set(0.0,0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 48   : 		Row[3].Set(0.0,0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 49   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix4@@QAEXXZ ENDP			; Matrix4::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0Matrix4@@QAE@ABVVector4@@000@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 40   : 	TT_INLINE explicit Matrix4(const Vector4 & v0, const Vector4 & v1, const Vector4 & v2, const Vector4 & v3)	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 41   : 		Init(v0,v1,v2,v3);

	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVVector4@@000@Z	; Matrix4::Init

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix4@@QAE@ABVVector4@@000@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABVMatrix3D@@@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 36   : 	TT_INLINE explicit Matrix4(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 37   : 	{
; 38   : 		Init(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVMatrix3D@@@Z	; Matrix4::Init

; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABVMatrix3D@@@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix4@@QAE@_N@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 29   : 	TT_INLINE explicit Matrix4(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 30   : 	{
; 31   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix4

; 32   : 		{
; 33   : 			Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity
$LN2@Matrix4:

; 34   : 		}
; 35   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@_N@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABV0@@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 25   : 	TT_INLINE Matrix4(const Matrix4 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 26   : 	{
; 27   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 28   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABV0@@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix4@@QAE@XZ PROC					; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix4(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix4@@QAE@XZ ENDP					; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Rotate_Vector, COMDAT

; 564  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 565  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 566  : 		Vector3 * v;
; 567  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Ro

; 568  : 		{
; 569  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 570  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 571  : 		}
; 572  : 		else

	jmp	SHORT $LN1@Inverse_Ro
$LN2@Inverse_Ro:

; 573  : 		{
; 574  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Ro:

; 575  : 		}
; 576  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 577  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 578  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 579  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
_diff$ = -28						; size = 12
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Transform_Vector, COMDAT

; 548  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 549  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 550  : 		Vector3 * v;
; 551  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Tr

; 552  : 		{
; 553  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 554  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 555  : 		}
; 556  : 		else

	jmp	SHORT $LN1@Inverse_Tr
$LN2@Inverse_Tr:

; 557  : 		{
; 558  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Tr:

; 559  : 		}
; 560  : 		Vector3 diff(v->X - A[0][3], v->Y - A[1][3], v->Z - A[2][3]);

	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _diff$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 561  : 		Matrix3D::Inverse_Rotate_Vector(A, diff, out);

	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	call	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
	add	esp, 12					; 0000000cH

; 562  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Rotate_Vector, COMDAT

; 531  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 532  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 533  : 		Vector3 * v;
; 534  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 535  : 		{
; 536  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 537  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 538  : 		}
; 539  : 		else 

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 540  : 		{
; 541  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 542  : 		}
; 543  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 544  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 545  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 546  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 524  : 	TT_INLINE void Get_Z_Vector(Vector3 * set_z) const { set_z->Set(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 523  : 	TT_INLINE void Get_Y_Vector(Vector3 * set_y) const { set_y->Set(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 522  : 	TT_INLINE void Get_X_Vector(Vector3 * set_x) const { set_x->Set(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 521  : 	TT_INLINE Vector3 Get_Z_Vector() const { return Vector3(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 520  : 	TT_INLINE Vector3 Get_Y_Vector() const { return Vector3(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 519  : 	TT_INLINE Vector3 Get_X_Vector() const { return Vector3(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Transform_Vector, COMDAT

; 503  :    {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 504  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 505  : 		Vector3 * v;
; 506  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 507  : 		{
; 508  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 509  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 510  : 		}
; 511  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 512  : 		{
; 513  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 514  : 		}
; 515  : 		out->X = (A.Row[0][0] * v->X + A.Row[0][1] * v->Y + A.Row[0][2] * v->Z + A.Row[0][3]);

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 516  : 		out->Y = (A.Row[1][0] * v->X + A.Row[1][1] * v->Y + A.Row[1][2] * v->Z + A.Row[1][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 517  : 		out->Z = (A.Row[2][0] * v->X + A.Row[2][1] * v->Y + A.Row[2][2] * v->Z + A.Row[2][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 518  :    }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 486  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 487  : 		float tmp1,tmp2;
; 488  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 489  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 490  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 491  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 492  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 493  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 494  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 495  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 496  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 497  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 473  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 474  : 		float tmp1,tmp2;
; 475  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 476  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 477  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 478  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 479  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 480  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 481  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 482  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 483  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 460  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		float tmp1,tmp2;
; 462  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 463  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 464  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 465  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 466  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 467  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 468  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 469  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 470  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 471  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		float tmp1,tmp2;
; 446  : 		float c,s;
; 447  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 448  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 449  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 450  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 451  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 452  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 453  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 454  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 455  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 456  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 457  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 458  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 428  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 429  : 		float tmp1,tmp2;
; 430  : 		float c,s;
; 431  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 432  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 433  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 434  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 435  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 436  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 437  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 438  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 439  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 440  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 441  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 442  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 412  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 		float tmp1,tmp2;
; 414  : 		float c,s;
; 415  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 416  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 417  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 418  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 419  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 420  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 421  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 422  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 423  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 424  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 425  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 426  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 396  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 		float tmp1,tmp2;
; 398  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 399  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 400  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 401  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 402  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 403  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 404  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 405  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 406  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 407  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 408  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 409  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 410  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv299 = -80						; size = 4
tv297 = -80						; size = 4
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 380  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		float tmp1,tmp2;
; 382  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 383  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 384  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 385  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 386  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 387  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 388  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 389  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 390  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 391  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 392  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 393  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 394  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 364  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 365  : 		float tmp1,tmp2;
; 366  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 367  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 368  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 369  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 370  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 371  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 372  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 373  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 374  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 375  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 376  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 377  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 378  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 		float tmp1,tmp2;
; 347  : 		float c,s;
; 348  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 349  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 350  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 351  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 352  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 353  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 354  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 355  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 356  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 357  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 358  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 359  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 360  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 361  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 362  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv311 = -88						; size = 4
tv309 = -88						; size = 4
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 326  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 327  : 		float tmp1,tmp2;
; 328  : 		float c,s;
; 329  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 330  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 331  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 332  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 333  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 334  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 335  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 336  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 337  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 338  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 339  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 340  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 341  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv309[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv309[ebp]
	movss	DWORD PTR [eax], xmm0

; 342  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv311[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv311[ebp]
	movss	DWORD PTR [eax], xmm0

; 343  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 307  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 		float tmp1,tmp2;
; 309  : 		float c,s;
; 310  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 311  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 312  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 313  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 314  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 315  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 316  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 317  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 318  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 319  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 320  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 321  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 322  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 323  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 324  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXAAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z PROC		; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 		Scale(scale.X, scale.Y, scale.Z);

	mov	eax, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@Matrix3D@@QAEXMMM@Z		; Matrix3D::Scale

; 305  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z ENDP		; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Scale@Matrix3D@@QAEXMMM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 291  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		Row[0][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 293  : 		Row[1][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 294  : 		Row[2][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 295  : 		Row[0][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 296  : 		Row[1][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 297  : 		Row[2][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 298  : 		Row[0][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 299  : 		Row[1][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 300  : 		Row[2][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 301  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Scale@Matrix3D@@QAEXMMM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 279  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 		Row[0][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 281  : 		Row[1][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 282  : 		Row[2][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 283  : 		Row[0][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 284  : 		Row[1][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 285  : 		Row[2][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 286  : 		Row[0][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 287  : 		Row[1][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 288  : 		Row[2][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 289  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 		float tmp1,tmp2;
; 268  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 269  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 270  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 271  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 272  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 273  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 274  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 275  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 276  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 277  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 253  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 254  : 		float tmp1,tmp2;
; 255  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 256  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 257  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 258  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 259  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 260  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 261  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 262  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 263  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 240  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 		float tmp1,tmp2;
; 242  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 243  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 244  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 245  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 246  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 247  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 248  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 249  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 250  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 251  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 224  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 225  : 		float tmp1,tmp2;
; 226  : 		float c,s;
; 227  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 228  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 229  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 230  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 231  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 232  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 233  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 234  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 235  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 236  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 237  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 238  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 208  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 209  : 		float tmp1,tmp2;
; 210  : 		float s,c;
; 211  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 212  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 213  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 214  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 215  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 216  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 217  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 218  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 219  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 220  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 221  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 		float tmp1,tmp2;
; 194  : 		float s,c;
; 195  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 196  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 197  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 198  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 199  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 200  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 201  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 202  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 203  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 204  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 205  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 206  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Translate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		Row[0][3]  += (float)(Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 188  : 		Row[1][3]  += (float)(Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 189  : 		Row[2][3]  += (float)(Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Translate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Y, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		Row[0][3]  += (float)(Row[0][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 182  : 		Row[1][3]  += (float)(Row[1][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 183  : 		Row[2][3]  += (float)(Row[2][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Translate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_X, COMDAT
; _this$ = ecx

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		Row[0][3]  += (float)(Row[0][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 176  : 		Row[1][3]  += (float)(Row[1][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 177  : 		Row[2][3]  += (float)(Row[2][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv278 = -80						; size = 4
tv274 = -80						; size = 4
tv270 = -80						; size = 4
tv276 = -76						; size = 4
tv272 = -76						; size = 4
tv268 = -76						; size = 4
tv214 = -72						; size = 4
tv174 = -72						; size = 4
tv134 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Translate@Matrix3D@@QAEXABVVector3@@@Z PROC		; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		Row[0][3]  += Row[0][0]*t[0] + Row[0][1]*t[1] + Row[0][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv268[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv270[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv134[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm1

; 170  : 		Row[1][3]  += Row[1][0]*t[0] + Row[1][1]*t[1] + Row[1][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv174[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv272[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv274[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv274[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv174[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv174[ebp]
	movss	DWORD PTR [ecx], xmm1

; 171  : 		Row[2][3]  += Row[2][0]*t[0] + Row[2][1]*t[1] + Row[2][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv214[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv276[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv276[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv278[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv278[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv214[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv214[ebp]
	movss	DWORD PTR [ecx], xmm1

; 172  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@Matrix3D@@QAEXABVVector3@@@Z ENDP		; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv241 = -80						; size = 4
tv237 = -80						; size = 4
tv243 = -76						; size = 4
tv239 = -76						; size = 4
tv235 = -76						; size = 4
tv190 = -72						; size = 4
tv158 = -72						; size = 4
tv94 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Translate@Matrix3D@@QAEXMMM@Z PROC			; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0][3]  += (float)(Row[0][0]*x + Row[0][1]*y + Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm1

; 164  : 		Row[1][3]  += (float)(Row[1][0]*x + Row[1][1]*y + Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv239[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv241[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv158[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm1

; 165  : 		Row[2][3]  += (float)(Row[2][0]*x + Row[2][1]*y + Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv190[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv243[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv245[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv190[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv190[ebp]
	movss	DWORD PTR [ecx], xmm1

; 166  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Translate@Matrix3D@@QAEXMMM@Z ENDP			; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Make_Identity@Matrix3D@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3D@@QAEXXZ PROC			; Matrix3D::Make_Identity, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		Row[0].Set(1.0f,0.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 158  : 		Row[1].Set(0.0f,1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 159  : 		Row[2].Set(0.0f,0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3D@@QAEXXZ ENDP			; Matrix3D::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Z_Translation, COMDAT
; _this$ = ecx

; 154  : 	TT_INLINE void Adjust_Z_Translation(float z) { Row[2][3] += z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Y_Translation, COMDAT
; _this$ = ecx

; 153  : 	TT_INLINE void Adjust_Y_Translation(float y) { Row[1][3] += y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_X_Translation, COMDAT
; _this$ = ecx

; 152  : 	TT_INLINE void Adjust_X_Translation(float x) { Row[0][3] += x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv95 = -72						; size = 4
tv84 = -72						; size = 4
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Adjust_Translation, COMDAT
; _this$ = ecx

; 151  : 	TT_INLINE void Adjust_Translation(const Vector3 & t) { Row[0][3] += t[0]; Row[1][3] += t[1]; Row[2][3] += t[2]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv73[ebp], eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv73[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv84[ebp], eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv84[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv84[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv95[ebp], eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv95[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv95[ebp]
	movss	DWORD PTR [edx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Adjust_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Set_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Z_Translation, COMDAT
; _this$ = ecx

; 150  : 	TT_INLINE void Set_Z_Translation(float z) { Row[2][3] = z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Set_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Y_Translation, COMDAT
; _this$ = ecx

; 149  : 	TT_INLINE void Set_Y_Translation(float y) { Row[1][3] = y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Set_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_X_Translation, COMDAT
; _this$ = ecx

; 148  : 	TT_INLINE void Set_X_Translation(float x) { Row[0][3] = x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Z_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Z_Translation, COMDAT
; _this$ = ecx

; 147  : 	TT_INLINE float Get_Z_Translation(void) const { return Row[2][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Y_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Y_Translation, COMDAT
; _this$ = ecx

; 146  : 	TT_INLINE float Get_Y_Translation(void) const { return Row[1][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_X_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_X_Translation, COMDAT
; _this$ = ecx

; 145  : 	TT_INLINE float Get_X_Translation(void) const { return Row[0][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Set_Translation, COMDAT
; _this$ = ecx

; 143  : 	TT_INLINE void Set_Translation(const Vector3 & t)  { Row[0][3] = t[0]; Row[1][3] = t[1];Row[2][3] = t[2]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Set_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set$ = 8						; size = 4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 142  : 	TT_INLINE void Get_Translation(Vector3 * set) const { set->X = Row[0][3]; set->Y = Row[1][3]; set->Z = Row[2][3]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 141  : 	TT_INLINE Vector3 Get_Translation(void) const { return Vector3(Row[0][3],Row[1][3],Row[2][3]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		Row[0].Set(1.0f,0.0f,0.0f,position[0]);

	push	0
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 135  : 		Row[1].Set(0.0f,1.0f,0.0f,position[1]);

	push	1
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 136  : 		Row[2].Set(0.0f,0.0f,1.0f,position[2]);

	push	2
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 137  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXABVVector3@@@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv368 = -80						; size = 4
tv362 = -80						; size = 4
tv356 = -80						; size = 4
tv366 = -76						; size = 4
tv360 = -76						; size = 4
tv354 = -76						; size = 4
tv364 = -72						; size = 4
tv358 = -72						; size = 4
tv352 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@MM@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 112  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 		Row[0].Set(
; 114  : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 115  : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 116  : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s),
; 117  : 			0.0f
; 118  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv352[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv352[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv354[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv354[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv356[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv356[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 119  : 		Row[1].Set(
; 120  : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 121  : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 122  : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s),
; 123  : 			0.0f
; 124  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv358[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv358[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv360[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv362[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv362[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 125  : 		Row[2].Set(
; 126  : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 127  : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 128  : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2])),
; 129  : 			0.0f
; 130  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv364[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv364[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv366[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv366[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv368[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv368[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 131  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3D@@QAEXABVVector3@@MM@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_s$ = -12						; size = 4
_c$ = -8						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@M@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 106  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 		float c = cosf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 108  : 		float s = sinf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 109  : 		Set(axis,s,c);

	push	ecx
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 110  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3D@@QAEXABVVector3@@M@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@000@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 100  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 		Row[0].Set(x[0],y[0],z[0],pos[0]);

	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 102  : 		Row[1].Set(x[1],y[1],z[1],pos[1]);

	push	1
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 103  : 		Row[2].Set(x[2],y[2],z[2],pos[2]);

	push	2
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Matrix3D@@QAEXABVVector3@@000@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m14$ = 20						; size = 4
_m21$ = 24						; size = 4
_m22$ = 28						; size = 4
_m23$ = 32						; size = 4
_m24$ = 36						; size = 4
_m31$ = 40						; size = 4
_m32$ = 44						; size = 4
_m33$ = 48						; size = 4
_m34$ = 52						; size = 4
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		Row[0].Set(m11,m12,m13,m14);

	push	ecx
	movss	xmm0, DWORD PTR _m14$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 96   : 		Row[1].Set(m21,m22,m23,m24);

	push	ecx
	movss	xmm0, DWORD PTR _m24$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 97   : 		Row[2].Set(m31,m32,m33,m34);

	push	ecx
	movss	xmm0, DWORD PTR _m34$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXQAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Set@Matrix3D@@QAEXQAM@Z PROC				; Matrix3D::Set, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 90   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 91   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXQAM@Z ENDP				; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??4Matrix3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3D@@QAEAAV0@ABV0@@Z PROC			; Matrix3D::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 70   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 71   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 72   : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3D@@QAEAAV0@ABV0@@Z ENDP			; Matrix3D::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@ABV0@@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 61   : 	TT_INLINE Matrix3D(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 62   : 	{
; 63   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 64   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 65   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABV0@@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
??0Matrix3D@@QAE@ABVVector3@@@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE explicit Matrix3D(const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		Set(position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABVVector3@@@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3D(const Quaternion & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{
; 55   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z ; Matrix3D::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3D(const Matrix3 & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{
; 51   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z ; Matrix3D::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_sine$ = 12						; size = 4
_cosine$ = 16						; size = 4
??0Matrix3D@@QAE@ABVVector3@@MM@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 45   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float sine,float cosine)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 46   : 	{
; 47   : 		Set(axis,sine,cosine);

	push	ecx
	movss	xmm0, DWORD PTR _cosine$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sine$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3D@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3D@@QAE@ABVVector3@@M@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 41   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 42   : 	{
; 43   : 		Set(axis,angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@M@Z	; Matrix3D::Set

; 44   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVVector3@@M@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
??0Matrix3D@@QAE@ABVVector3@@000@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 37   : 	TT_INLINE explicit Matrix3D(const Vector3	&x,const Vector3	&y,const Vector3	&z,const Vector3	&pos)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 38   : 	{
; 39   : 		Set(x,y,z,pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@000@Z	; Matrix3D::Set

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix3D@@QAE@ABVVector3@@000@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@QAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@QAM@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 31   : 	TT_INLINE explicit Matrix3D(float m[12])

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 32   : 	{
; 33   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 34   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 35   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@QAM@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_init$ = 8						; size = 1
??0Matrix3D@@QAE@_N@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 30   : 	TT_INLINE explicit Matrix3D(bool init) { if (init) Make_Identity(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	movzx	eax, BYTE PTR _init$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix3D
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity
$LN2@Matrix3D:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@_N@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QBEABVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 28   :    TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QBEABVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QAEAAVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 27   :    TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QAEAAVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??XVector4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
??XVector4@@QAEAAV0@M@Z PROC				; Vector4::operator*=, COMDAT
; _this$ = ecx

; 64   : 	TT_INLINE Vector4& operator*=(float f) { X *= f; Y *= f; Z *= f; W *= f; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector4@@QAEAAV0@M@Z ENDP				; Vector4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??ZVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator-=, COMDAT
; _this$ = ecx

; 63   : 	TT_INLINE Vector4& operator-=(const Vector4& v) { X -= v.X; Y -= v.Y; Z -= v.Z; W -= v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??YVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator+=, COMDAT
; _this$ = ecx

; 62   : 	TT_INLINE Vector4& operator+=(const Vector4& v) { X += v.X; Y += v.Y; Z += v.Z; W += v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QBEABMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 39   : 	TT_INLINE const float& operator[](int i) const { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QBEABMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QAEAAMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 38   : 	TT_INLINE float& operator[](int i) { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QAEAAMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ?Set@Vector4@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
?Set@Vector4@@QAEXMMMM@Z PROC				; Vector4::Set, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE void Set(float x, float y, float z, float w) { X = x; Y = y; Z = z; W = w; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Vector4@@QAEXMMMM@Z ENDP				; Vector4::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??4Vector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator=, COMDAT
; _this$ = ecx

; 34   : 	TT_INLINE Vector4& operator=(const Vector4& v) { X = v.X; Y = v.Y; Z = v.Z; W = v.W; return *this; };	

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
??0Vector4@@QAE@MMMM@Z PROC				; Vector4::Vector4, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE Vector4(float x, float y, float z, float w) {	X = x; Y = y; Z = z; W = w;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@@QAE@MMMM@Z ENDP				; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector4@@QAE@XZ PROC					; Vector4::Vector4, COMDAT
; _this$ = ecx

; 24   : 	TT_INLINE Vector4() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector4@@QAE@XZ ENDP					; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_math.h
;	COMDAT ?isPowerOfTwo@@YA_NH@Z
_TEXT	SEGMENT
tv68 = -68						; size = 4
_number$ = 8						; size = 4
?isPowerOfTwo@@YA_NH@Z PROC				; isPowerOfTwo, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 69   : 	return number != 0 && ((number - 1) & number) == 0;

	cmp	DWORD PTR _number$[ebp], 0
	je	SHORT $LN3@isPowerOfT
	mov	eax, DWORD PTR _number$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _number$[ebp]
	jne	SHORT $LN3@isPowerOfT
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@isPowerOfT
$LN3@isPowerOfT:
	mov	DWORD PTR tv68[ebp], 0
$LN4@isPowerOfT:
	mov	al, BYTE PTR tv68[ebp]

; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isPowerOfTwo@@YA_NH@Z ENDP				; isPowerOfTwo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4file_auto_ptr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z PROC			; file_auto_ptr::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z ENDP			; file_auto_ptr::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?get@file_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@file_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::get, COMDAT
; _this$ = ecx

; 202  : 	FileClass* get() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get@file_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Dfile_auto_ptr@@QAEAAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ PROC		; file_auto_ptr::operator*, COMDAT
; _this$ = ecx

; 201  : 	FileClass& operator*() { return *_Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ ENDP		; file_auto_ptr::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Bfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator FileClass *, COMDAT
; _this$ = ecx

; 200  : 	operator FileClass *() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator FileClass *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Cfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator->, COMDAT
; _this$ = ecx

; 199  : 	FileClass* operator ->() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EINIClass@@UAEPAXI@Z PROC				; INIClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1INIClass@@UAE@XZ		; INIClass::~INIClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EINIClass@@UAEPAXI@Z ENDP				; INIClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINIClass@@UAEPAXI@Z PROC				; INIClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINIClass@@UAEPAXI@Z ENDP				; INIClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4INIClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4INIClass@@QAEAAV0@ABV0@@Z PROC			; INIClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4INIClass@@QAEAAV0@ABV0@@Z ENDP			; INIClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0INIClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0INIClass@@QAE@ABV0@@Z PROC				; INIClass::INIClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INIClass@@QAE@ABV0@@Z ENDP				; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Name@INIClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Name@INIClass@@QAEPBDXZ PROC			; INIClass::Get_File_Name, COMDAT
; _this$ = ecx

; 183  : 	const char *Get_File_Name() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 		return Filename;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Name@INIClass@@QAEPBDXZ ENDP			; INIClass::Get_File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ PROC ; INIClass::Get_Section_Index, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		return *SectionIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 182  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ENDP ; INIClass::Get_Section_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ PROC ; INIClass::Get_Section_List, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return *SectionList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ENDP ; INIClass::Get_Section_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Section_Present@INIClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Section_Present@INIClass@@QBE_NPBD@Z PROC		; INIClass::Section_Present, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN3@Section_Pr
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Section_Pr
$LN3@Section_Pr:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Section_Pr:
	mov	al, BYTE PTR tv68[ebp]

; 174  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Section_Present@INIClass@@QBE_NPBD@Z ENDP		; INIClass::Section_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Is_Present@INIClass@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Is_Present@INIClass@@QBE_NPBD0@Z PROC			; INIClass::Is_Present, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@Is_Present

; 163  : 		{
; 164  : 			return Find_Entry(section,entry) != 0;

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	test	eax, eax
	je	SHORT $LN5@Is_Present
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@Is_Present
$LN5@Is_Present:
	mov	DWORD PTR tv70[ebp], 0
$LN6@Is_Present:
	mov	al, BYTE PTR tv70[ebp]
	jmp	SHORT $LN3@Is_Present

; 165  : 		}
; 166  : 		else

	jmp	SHORT $LN3@Is_Present
$LN2@Is_Present:

; 167  : 		{
; 168  : 			return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN7@Is_Present
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN8@Is_Present
$LN7@Is_Present:
	mov	DWORD PTR tv76[ebp], 0
$LN8@Is_Present:
	mov	al, BYTE PTR tv76[ebp]
$LN3@Is_Present:

; 169  : 		}
; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Is_Present@INIClass@@QBE_NPBD0@Z ENDP			; INIClass::Is_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkSaveClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z PROC			; ChunkSaveClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkSaveClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ PROC	; ChunkSaveClass::Set_Contains_Chunks, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		HeaderStack[StackIndex-1].ChunkSize |= 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*8+1028], eax

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ ENDP	; ChunkSaveClass::Set_Contains_Chunks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkLoadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z PROC			; ChunkLoadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkLoadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EWideStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EWideStringClass@@QAEPAXI@Z PROC			; WideStringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1WideStringClass@@QAE@XZ	; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EWideStringClass@@QAEPAXI@Z ENDP			; WideStringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1WideStringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WideStringClass@@QAE@XZ PROC				; WideStringClass::~WideStringClass, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@WideStringClass@@AAEXXZ

; 780  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1WideStringClass@@QAE@XZ ENDP				; WideStringClass::~WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EStringClass@@QAEPAXI@Z PROC				; StringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1StringClass@@QAE@XZ		; StringClass::~StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EStringClass@@QAEPAXI@Z ENDP				; StringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_FStringClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FStringClass@@QAEXXZ PROC				; StringClass::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_FStringClass@@QAEXXZ ENDP				; StringClass::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?GetHash@StringClass@@QBEIXZ
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_hash$2 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?GetHash@StringClass@@QBEIXZ PROC			; StringClass::GetHash, COMDAT
; _this$ = ecx

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		int length = Get_Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _length$[ebp], eax

; 176  : 		if (length >= 8)

	cmp	DWORD PTR _length$[ebp], 8
	jl	SHORT $LN5@GetHash

; 177  : 			return HashTemplateKeyClass<uint>::Get_Hash_Value((uint&)m_Buffer[length - 8]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [ecx+edx-8]
	push	eax
	call	?Get_Hash_Value@?$HashTemplateKeyClass@I@@SAIABI@Z ; HashTemplateKeyClass<unsigned int>::Get_Hash_Value
	add	esp, 4
	jmp	SHORT $LN6@GetHash

; 178  : 		else

	jmp	SHORT $LN6@GetHash
$LN5@GetHash:

; 179  : 		{
; 180  : 			uint hash = 0;

	mov	DWORD PTR _hash$2[ebp], 0

; 181  : 			for (int i = 0; i < length; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@GetHash
$LN2@GetHash:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@GetHash:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN1@GetHash

; 182  : 				hash += m_Buffer[i] + hash * 37;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _hash$2[ebp]
	imul	ecx, 37					; 00000025H
	add	ecx, DWORD PTR _hash$2[ebp]
	add	ecx, eax
	mov	DWORD PTR _hash$2[ebp], ecx
	jmp	SHORT $LN2@GetHash
$LN1@GetHash:

; 183  : 			return hash;

	mov	eax, DWORD PTR _hash$2[ebp]
$LN6@GetHash:

; 184  : 		}
; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHash@StringClass@@QBEIXZ ENDP			; StringClass::GetHash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Is_Empty@StringClass@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@StringClass@@QBE_NXZ PROC			; StringClass::Is_Empty, COMDAT
; _this$ = ecx

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 372  : 	return (m_Buffer[0] == m_NullChar);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+eax]
	mov	ecx, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	edx, DWORD PTR [ecx]
	movsx	ecx, BYTE PTR [edx]
	cmp	eax, ecx
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv71[ebp]

; 373  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@StringClass@@QBE_NXZ ENDP			; StringClass::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv74 = -92						; size = 4
tv91 = -85						; size = 1
tv88 = -84						; size = 4
tv85 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv85[ebp]
	add	edx, 1
	mov	DWORD PTR tv88[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv85[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv91[ebp], cl
	add	DWORD PTR tv85[ebp], 1
	cmp	BYTE PTR tv91[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv85[ebp]
	sub	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv74[ebp], edx
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Compare@StringClass@@QBEHPBD@Z
_TEXT	SEGMENT
tv68 = -88						; size = 4
tv88 = -84						; size = 4
tv83 = -78						; size = 1
tv76 = -77						; size = 1
tv70 = -76						; size = 4
tv72 = -72						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?Compare@StringClass@@QBEHPBD@Z PROC			; StringClass::Compare, COMDAT
; _this$ = ecx

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 	return strcmp (m_Buffer, string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv70[ebp], edx
$LL3@Compare:
	mov	eax, DWORD PTR tv70[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv76[ebp], cl
	mov	edx, DWORD PTR tv72[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN4@Compare
	cmp	BYTE PTR tv76[ebp], 0
	je	SHORT $LN5@Compare
	mov	eax, DWORD PTR tv70[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv83[ebp], cl
	mov	edx, DWORD PTR tv72[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN4@Compare
	add	DWORD PTR tv70[ebp], 2
	add	DWORD PTR tv72[ebp], 2
	cmp	BYTE PTR tv83[ebp], 0
	jne	SHORT $LL3@Compare
$LN5@Compare:
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN6@Compare
$LN4@Compare:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv88[ebp], eax
$LN6@Compare:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	eax, DWORD PTR tv68[ebp]

; 378  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@StringClass@@QBEHPBD@Z ENDP			; StringClass::Compare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BStringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BStringClass@@QBEPBDXZ PROC				; StringClass::operator char const *, COMDAT
; _this$ = ecx

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BStringClass@@QBEPBDXZ ENDP				; StringClass::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??AStringClass@@QAEAADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??AStringClass@@QAEAADH@Z PROC				; StringClass::operator[], COMDAT
; _this$ = ecx

; 391  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 	return m_Buffer[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]

; 393  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AStringClass@@QAEAADH@Z ENDP				; StringClass::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??YStringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_new_len$1 = -16					; size = 4
_cur_len$2 = -12					; size = 4
_src_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??YStringClass@@QAEABV0@ABV0@@Z PROC			; StringClass::operator+=, COMDAT
; _this$ = ecx

; 485  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 486  : 	int src_len = string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _src_len$[ebp], eax

; 487  : 	if (src_len > 0)

	cmp	DWORD PTR _src_len$[ebp], 0
	jle	SHORT $LN1@operator

; 488  : 	{
; 489  : 		int cur_len = Get_Length ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _cur_len$2[ebp], eax

; 490  : 		int new_len = cur_len + src_len;

	mov	eax, DWORD PTR _cur_len$2[ebp]
	add	eax, DWORD PTR _src_len$[ebp]
	mov	DWORD PTR _new_len$1[ebp], eax

; 491  : 		Resize (new_len + 1);

	mov	eax, DWORD PTR _new_len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Resize@StringClass@@AAEXH@Z

; 492  : 		Store_Length (new_len);

	mov	eax, DWORD PTR _new_len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 493  : 		memcpy (&m_Buffer[cur_len], (const char *)string, (src_len + 1) * sizeof (char));				

	mov	eax, DWORD PTR _src_len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _cur_len$2[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 494  : 	}
; 495  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 496  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YStringClass@@QAEABV0@ABV0@@Z ENDP			; StringClass::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@ABV0@@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 279  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	int len = string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _len$[ebp], eax

; 281  : 	Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 282  : 	Store_Length(len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 283  : 	memcpy (m_Buffer, string.m_Buffer, (len+1) * sizeof (char));		

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 284  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@ABV0@@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??8StringClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??8StringClass@@QBE_NPBD@Z PROC				; StringClass::operator==, COMDAT
; _this$ = ecx

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (Compare (rvalue) == 0);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Compare@StringClass@@QBEHPBD@Z		; StringClass::Compare
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]

; 403  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8StringClass@@QBE_NPBD@Z ENDP				; StringClass::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1StringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringClass@@QAE@XZ PROC				; StringClass::~StringClass, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@StringClass@@AAEXXZ

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StringClass@@QAE@XZ ENDP				; StringClass::~StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@PBD_N@Z
_TEXT	SEGMENT
tv70 = -92						; size = 4
tv68 = -88						; size = 4
tv90 = -81						; size = 1
tv87 = -80						; size = 4
tv84 = -76						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@PBD_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 347  : 	int len=string ? (int)strlen(string) : 0;

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN5@StringClas
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	add	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
$LL7@StringClas:
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv90[ebp], al
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL7@StringClas
	mov	ecx, DWORD PTR tv84[ebp]
	sub	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@StringClas
$LN5@StringClas:
	mov	DWORD PTR tv70[ebp], 0
$LN6@StringClas:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 348  : 	if (hint_temporary || len>0)

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 349  : 	{
; 350  : 		Get_String (len+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z
$LN2@StringClas:

; 351  : 	}
; 352  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 353  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@PBD_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@ABV0@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@ABV0@_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 338  : 	if (hint_temporary || (string.Get_Length()>0))

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	test	eax, eax
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 339  : 	{
; 340  : 		Get_String (string.Get_Length()+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z
$LN2@StringClas:

; 341  : 	}
; 342  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 343  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@ABV0@_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@H_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 326  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 327  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 328  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@H_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Release_Ref@RefCountClass@@QAEXXZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?Release_Ref@RefCountClass@@QAEXXZ PROC			; RefCountClass::Release_Ref, COMDAT
; _this$ = ecx

; 1516 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Release_Re:

; 1517 : 		TT_ASSERT(NumRefs > 0);

	xor	eax, eax
	jne	SHORT $LN4@Release_Re
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@Release_Re
	int	3
$LN2@Release_Re:

; 1518 : 		if (--NumRefs == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv69[ebp], 0
	jne	SHORT $LN6@Release_Re

; 1519 : 			Delete_This();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
$LN6@Release_Re:

; 1520 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Release_Ref@RefCountClass@@QAEXXZ ENDP			; RefCountClass::Release_Ref
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FastCriticalSectionClass@@QAE@XZ PROC		; FastCriticalSectionClass::FastCriticalSectionClass, COMDAT
; _this$ = ecx

; 110  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 111  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FastCriticalSectionClass@@QAE@XZ ENDP		; FastCriticalSectionClass::FastCriticalSectionClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??1LockClass@FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LockClass@FastCriticalSectionClass@@QAE@XZ PROC	; FastCriticalSectionClass::LockClass::~LockClass, COMDAT
; _this$ = ecx

; 102  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 			criticalSection.Leave();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Leave

; 104  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1LockClass@FastCriticalSectionClass@@QAE@XZ ENDP	; FastCriticalSectionClass::LockClass::~LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__criticalSection$ = 8					; size = 4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z PROC	; FastCriticalSectionClass::LockClass::LockClass, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __criticalSection$[ebp]
	mov	DWORD PTR [eax], ecx

; 98   : 			criticalSection.Enter();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Enter@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Enter

; 99   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ENDP	; FastCriticalSectionClass::LockClass::LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Leave@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Leave, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Flag = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Leave
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Enter@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Enter, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Enter:

; 66   : 		TT_ASSERT((size_t)&Flag % 4 == 0); // aligned to 4 bytes please

	xor	eax, eax
	jne	SHORT $LN6@Enter
	mov	eax, DWORD PTR _this$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	je	SHORT $LN3@Enter
	int	3
$LN3@Enter:

; 67   : 		for (;;)
; 68   : 		{
; 69   : 			if (_interlockedbittestandset(&Flag, 0) == 0) return;

	mov	eax, DWORD PTR _this$[ebp]
	lock	 bts	 DWORD PTR [eax], 0
	setb	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN1@Enter
	jmp	SHORT $LN8@Enter
$LN1@Enter:

; 70   : 			_mm_pause();

	pause

; 71   : 		};

	jmp	SHORT $LN3@Enter
$LN8@Enter:

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Enter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptRegistrar@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptRegistrar@@QAEAAV0@ABV0@@Z PROC		; ScriptRegistrar::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptRegistrar@@QAEAAV0@ABV0@@Z ENDP		; ScriptRegistrar::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptFactory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptFactory@@UAEPAXI@Z PROC			; ScriptFactory::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptFactory@@UAEPAXI@Z ENDP			; ScriptFactory::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptFactory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptFactory@@UAEPAXI@Z PROC			; ScriptFactory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptFactory@@UAEPAXI@Z ENDP			; ScriptFactory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptFactory@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptFactory@@QAEAAV0@ABV0@@Z PROC			; ScriptFactory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptFactory@@QAEAAV0@ABV0@@Z ENDP			; ScriptFactory::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptFactory@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptFactory@@QAE@ABV0@@Z PROC			; ScriptFactory::ScriptFactory, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptFactory@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptFactory@@QAE@ABV0@@Z ENDP			; ScriptFactory::ScriptFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptImpClass@@UAEPAXI@Z PROC			; ScriptImpClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptImpClass@@UAE@XZ	; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptImpClass@@UAEPAXI@Z ENDP			; ScriptImpClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptImpClass@@UAEPAXI@Z PROC			; ScriptImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptImpClass@@UAEPAXI@Z ENDP			; ScriptImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptImpClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptImpClass@@QAEAAV0@ABV0@@Z PROC			; ScriptImpClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptImpClass@@QAEAAV0@ABV0@@Z ENDP			; ScriptImpClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptImpClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptImpClass@@QAE@ABV0@@Z PROC			; ScriptImpClass::ScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptImpClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptImpClass@@QAE@ABV0@@Z ENDP			; ScriptImpClass::ScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z PROC	; ScriptImpClass::Get_Bool_Parameter, COMDAT
; _this$ = ecx

; 290  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 291  :         return Get_Int_Parameter(index) != 0;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN3@Get_Bool_P
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Get_Bool_P
$LN3@Get_Bool_P:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_Bool_P:
	mov	al, BYTE PTR tv68[ebp]

; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z ENDP	; ScriptImpClass::Get_Bool_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z PROC	; ScriptImpClass::Get_Bool_Parameter, COMDAT
; _this$ = ecx

; 286  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 287  :         return Get_Int_Parameter(name) != 0;

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN3@Get_Bool_P
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Get_Bool_P
$LN3@Get_Bool_P:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_Bool_P:
	mov	al, BYTE PTR tv68[ebp]

; 288  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z ENDP	; ScriptImpClass::Get_Bool_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z PROC	; ScriptImpClass::Get_Float_Parameter, COMDAT
; _this$ = ecx

; 282  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 		return (float)atof(Get_Parameter(index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 284  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z ENDP	; ScriptImpClass::Get_Float_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z PROC		; ScriptImpClass::Get_Int_Parameter, COMDAT
; _this$ = ecx

; 278  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 		return atoi(Get_Parameter(index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4

; 280  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z ENDP		; ScriptImpClass::Get_Int_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Parameter_Count@ScriptImpClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Parameter_Count@ScriptImpClass@@QAEHXZ PROC	; ScriptImpClass::Get_Parameter_Count, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 		return mArgC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 276  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Parameter_Count@ScriptImpClass@@QAEHXZ ENDP	; ScriptImpClass::Get_Parameter_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ PROC ; ScriptImpClass::Register_Auto_Save_Variables, COMDAT
; _this$ = ecx

; 265  : 	virtual	void Register_Auto_Save_Variables()	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ ENDP ; ScriptImpClass::Register_Auto_Save_Variables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loader$ = 8						; size = 4
?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z PROC	; ScriptImpClass::Load_Data, COMDAT
; _this$ = ecx

; 264  : 	virtual void Load_Data(ScriptLoader& loader) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z ENDP	; ScriptImpClass::Load_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_saver$ = 8						; size = 4
?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z PROC	; ScriptImpClass::Save_Data, COMDAT
; _this$ = ecx

; 263  : 	virtual void Save_Data(ScriptSaver& saver) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z ENDP	; ScriptImpClass::Save_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ PROC ; ScriptImpClass::Get_Owner_Ptr, COMDAT
; _this$ = ecx

; 258  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 259  : 		return &mOwner;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 260  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ ENDP ; ScriptImpClass::Get_Owner_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ PROC	; ScriptImpClass::Owner, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		return mOwner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 256  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ ENDP	; ScriptImpClass::Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_exiter$ = 12						; size = 4
?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Exited, COMDAT
; _this$ = ecx

; 251  :   void Exited(GameObject *obj,GameObject *exiter) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enterer$ = 12						; size = 4
?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Entered, COMDAT
; _this$ = ecx

; 244  :   void Entered(GameObject *obj,GameObject *enterer) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_poker$ = 12						; size = 4
?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Poked, COMDAT
; _this$ = ecx

; 237  :   void Poked(GameObject *obj,GameObject *poker) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; ScriptImpClass::Animation_Complete, COMDAT
; _this$ = ecx

; 229  :   void Animation_Complete(GameObject *obj,const char *animation_name) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; ScriptImpClass::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z PROC ; ScriptImpClass::Timer_Expired, COMDAT
; _this$ = ecx

; 221  :   void Timer_Expired(GameObject *obj,int number) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z ENDP ; ScriptImpClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_complete_reason$ = 16					; size = 4
?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; ScriptImpClass::Action_Complete, COMDAT
; _this$ = ecx

; 212  :   void Action_Complete(GameObject *obj,int action_id,ActionCompleteReason complete_reason) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; ScriptImpClass::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enemy$ = 12						; size = 4
?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Enemy_Seen, COMDAT
; _this$ = ecx

; 201  :   void Enemy_Seen(GameObject *obj,GameObject *enemy) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_sound$ = 12						; size = 4
?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z PROC ; ScriptImpClass::Sound_Heard, COMDAT
; _this$ = ecx

; 193  :   void Sound_Heard(GameObject *obj,const CombatSound & sound) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ENDP ; ScriptImpClass::Sound_Heard
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; ScriptImpClass::Custom, COMDAT
; _this$ = ecx

; 184  :   void Custom(GameObject *obj,int type,int param,GameObject *sender) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; ScriptImpClass::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z PROC ; ScriptImpClass::Damaged, COMDAT
; _this$ = ecx

; 174  :   void Damaged(GameObject *obj,GameObject *damager,float amount) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z ENDP ; ScriptImpClass::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Killed, COMDAT
; _this$ = ecx

; 164  :   void Killed(GameObject *obj,GameObject *killer) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z PROC ; ScriptImpClass::Destroyed, COMDAT
; _this$ = ecx

; 155  :   void Destroyed(GameObject *obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; ScriptImpClass::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z PROC ; ScriptImpClass::Created, COMDAT
; _this$ = ecx

; 149  :   void Created(GameObject *obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; ScriptImpClass::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_factory$ = 8						; size = 4
?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z PROC ; ScriptImpClass::SetFactory, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		mFactory = factory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 138  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ENDP ; ScriptImpClass::SetFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptClass@@UAEPAXI@Z PROC				; ScriptClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptClass@@UAE@XZ		; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptClass@@UAE@XZ			; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptClass@@UAEPAXI@Z ENDP				; ScriptClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptClass@@UAEPAXI@Z PROC				; ScriptClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptClass@@UAE@XZ			; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptClass@@UAEPAXI@Z ENDP				; ScriptClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptClass@@QAEAAV0@ABV0@@Z PROC			; ScriptClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptClass@@QAEAAV0@ABV0@@Z ENDP			; ScriptClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptClass@@QAE@ABV0@@Z PROC			; ScriptClass::ScriptClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptClass@@QAE@ABV0@@Z ENDP			; ScriptClass::ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ScriptClass@@QAE@XZ PROC				; ScriptClass::ScriptClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@XZ		; GameObjObserverClass::GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ScriptClass@@QAE@XZ ENDP				; ScriptClass::ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??1ScriptClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ScriptClass@@UAE@XZ PROC				; ScriptClass::~ScriptClass, COMDAT
; _this$ = ecx

; 124  : 	virtual ~ScriptClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1ScriptClass@@UAE@XZ ENDP				; ScriptClass::~ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EGameObjObserverClass@@UAEPAXI@Z PROC		; GameObjObserverClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1GameObjObserverClass@@UAE@XZ	; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EGameObjObserverClass@@UAEPAXI@Z ENDP		; GameObjObserverClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGameObjObserverClass@@UAEPAXI@Z PROC		; GameObjObserverClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGameObjObserverClass@@UAEPAXI@Z ENDP		; GameObjObserverClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4GameObjObserverClass@@QAEAAV0@ABV0@@Z PROC		; GameObjObserverClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4GameObjObserverClass@@QAEAAV0@ABV0@@Z ENDP		; GameObjObserverClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0GameObjObserverClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0GameObjObserverClass@@QAE@ABV0@@Z PROC		; GameObjObserverClass::GameObjObserverClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0GameObjObserverClass@@QAE@ABV0@@Z ENDP		; GameObjObserverClass::GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ PROC ; GameObjObserverClass::Owner, COMDAT
; _this$ = ecx

; 117  : 	virtual GameObject* Owner() {return 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ ENDP ; GameObjObserverClass::Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_ID@GameObjObserverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@GameObjObserverClass@@QAEHXZ PROC		; GameObjObserverClass::Get_ID, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@GameObjObserverClass@@QAEHXZ ENDP		; GameObjObserverClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_ID@GameObjObserverClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Set_ID@GameObjObserverClass@@QAEXH@Z PROC		; GameObjObserverClass::Set_ID, COMDAT
; _this$ = ecx

; 95   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		ID = id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 97   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_ID@GameObjObserverClass@@QAEXH@Z ENDP		; GameObjObserverClass::Set_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??1GameObjObserverClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GameObjObserverClass@@UAE@XZ PROC			; GameObjObserverClass::~GameObjObserverClass, COMDAT
; _this$ = ecx

; 92   : 	virtual	~GameObjObserverClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1GameObjObserverClass@@UAE@XZ ENDP			; GameObjObserverClass::~GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0GameObjObserverClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GameObjObserverClass@@QAE@XZ PROC			; GameObjObserverClass::GameObjObserverClass, COMDAT
; _this$ = ecx

; 91   : 	GameObjObserverClass() : ID( 0 ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0GameObjObserverClass@@QAE@XZ ENDP			; GameObjObserverClass::GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Swap@@YAXAAVVector3@@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Swap@@YAXAAVVector3@@0@Z PROC				; Swap, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 399  : 	Vector3 tmp(a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 400  : 	a = b;

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 401  : 	b = tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Swap@@YAXAAVVector3@@0@Z ENDP				; Swap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Subtract@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Subtract@Vector3@@SAXABV1@0PAV1@@Z PROC		; Vector3::Subtract, COMDAT

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 219  : 		set_result->X = a.X - b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 220  : 		set_result->Y = a.Y - b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 221  : 		set_result->Z = a.Z - b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Vector3@@SAXABV1@0PAV1@@Z ENDP		; Vector3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Add@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Add@Vector3@@SAXABV1@0PAV1@@Z PROC			; Vector3::Add, COMDAT

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 213  : 		set_result->X = a.X + b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 214  : 		set_result->Y = a.Y + b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 215  : 		set_result->Z = a.Z + b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Vector3@@SAXABV1@0PAV1@@Z ENDP			; Vector3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??9@YA_NABVVector3@@0@Z
_TEXT	SEGMENT
tv73 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??9@YA_NABVVector3@@0@Z PROC				; operator!=, COMDAT

; 389  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 390  : 	return ((a.X != b.X) || (a.Y != b.Y) || (a.Z != b.Z));

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	ucomiss	xmm0, DWORD PTR [ecx]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	ucomiss	xmm0, DWORD PTR [eax+4]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	ucomiss	xmm0, DWORD PTR [edx+8]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[ebp], 1
$LN4@operator:
	mov	al, BYTE PTR tv73[ebp]

; 391  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??9@YA_NABVVector3@@0@Z ENDP				; operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??8@YA_NABVVector3@@0@Z
_TEXT	SEGMENT
tv73 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??8@YA_NABVVector3@@0@Z PROC				; operator==, COMDAT

; 385  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 386  : 	return ((a.X == b.X) && (a.Y == b.Y) && (a.Z == b.Z));

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	ucomiss	xmm0, DWORD PTR [ecx]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	ucomiss	xmm0, DWORD PTR [eax+4]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	ucomiss	xmm0, DWORD PTR [edx+8]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv73[ebp]

; 387  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??8@YA_NABVVector3@@0@Z ENDP				; operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??G@YA?AVVector3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??G@YA?AVVector3@@ABV0@0@Z PROC				; operator-, COMDAT

; 377  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 378  : 	return Vector3(a.X - b.X,a.Y - b.Y,a.Z - b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 379  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVVector3@@ABV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??H@YA?AVVector3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??H@YA?AVVector3@@ABV0@0@Z PROC				; operator+, COMDAT

; 373  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 374  : 	return Vector3(a.X + b.X,a.Y + b.Y,a.Z + b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 375  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVVector3@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
_a$ = 16						; size = 4
??D@YA?AVVector3@@MABV0@@Z PROC				; operator*, COMDAT

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 366  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 367  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@ABV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_k$ = 16						; size = 4
??D@YA?AVVector3@@ABV0@M@Z PROC				; operator*, COMDAT

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 362  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 363  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??_0Vector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??_0Vector3@@QAEAAV0@M@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		X = X * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 166  : 		Y = Y * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 167  : 		Z = Z * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 168  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@@QAEAAV0@M@Z ENDP				; Vector3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??XVector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??XVector3@@QAEAAV0@M@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		X = X * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 159  : 		Y = Y * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 160  : 		Z = Z * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 161  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 162  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@@QAEAAV0@M@Z ENDP				; Vector3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??ZVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator-=, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		X -= v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 152  : 		Y -= v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 153  : 		Z -= v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 154  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??YVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator+=, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		X += v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 145  : 		Y += v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 146  : 		Z += v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 147  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 148  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length2@Vector3@@QBEMXZ
_TEXT	SEGMENT
tv85 = -72						; size = 4
_this$ = -4						; size = 4
?Length2@Vector3@@QBEMXZ PROC				; Vector3::Length2, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		return X * X + Y * Y + Z * Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]

; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length2@Vector3@@QBEMXZ ENDP				; Vector3::Length2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length@Vector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@Vector3@@QBEMXZ PROC				; Vector3::Length, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		return WWMath::Sqrt(Length2());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@WWMath@@SAMM@Z			; WWMath::Sqrt
	add	esp, 4

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector3@@QBEMXZ ENDP				; Vector3::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Normalize@Vector3@@QAEXXZ
_TEXT	SEGMENT
tv81 = -80						; size = 4
_oolen$ = -12						; size = 4
_len2$ = -8						; size = 4
_this$ = -4						; size = 4
?Normalize@Vector3@@QAEXXZ PROC				; Vector3::Normalize, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		float len2 = WWMATH_FLOAT_TINY + Length2();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	fstp	DWORD PTR tv81[ebp]
	movss	xmm0, DWORD PTR tv81[ebp]
	addss	xmm0, DWORD PTR __real@02081cea
	movss	DWORD PTR _len2$[ebp], xmm0

; 76   : 		float oolen = WWMath::Inv_Sqrt(len2);

	push	ecx
	movss	xmm0, DWORD PTR _len2$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Inv_Sqrt@WWMath@@SIMM@Z		; WWMath::Inv_Sqrt
	fstp	DWORD PTR _oolen$[ebp]

; 77   : 		X *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 78   : 		Y *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 79   : 		Z *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@Vector3@@QAEXXZ ENDP				; Vector3::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QBEABMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QBEABMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QAEAAMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QAEAAMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Set@Vector3@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Set@Vector3@@QAEXMMM@Z PROC				; Vector3::Set, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 56   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 57   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Vector3@@QAEXMMM@Z ENDP				; Vector3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??4Vector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator=, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 49   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 50   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 51   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0Vector3@@QAE@MMM@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 33   : 	TT_INLINE Vector3(float x, float y, float z)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	{
; 35   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 36   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 37   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 38   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@@QAE@MMM@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@@QAE@ABV0@@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 27   : 	TT_INLINE Vector3(const Vector3 &v)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	{
; 29   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 30   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 31   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@@QAE@ABV0@@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 23   : 	TT_INLINE Vector3()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	{
; 25   : 		X = Y = Z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 26   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ PROC		; RefArrayHelper<float,1024>::operator float *, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 163  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ ENDP		; RefArrayHelper<float,1024>::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4WWMath@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WWMath@@QAEAAV0@ABV0@@Z PROC				; WWMath::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WWMath@@QAEAAV0@ABV0@@Z ENDP				; WWMath::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Double@WWMath@@SA_NN@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 8
?Is_Valid_Double@WWMath@@SA_NN@Z PROC			; WWMath::Is_Valid_Double, COMDAT

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 208  : 	unsigned long * plong = (unsigned long *)(&x) + 1;

	lea	eax, DWORD PTR _x$[ebp+4]
	mov	DWORD PTR _plong$[ebp], eax

; 209  : 	unsigned long exponent = ((*plong) & 0x7FF00000) >> (32-12);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2146435072				; 7ff00000H
	shr	ecx, 20					; 00000014H
	mov	DWORD PTR _exponent$[ebp], ecx

; 210  : 	if (exponent == 0x7FF) {

	cmp	DWORD PTR _exponent$[ebp], 2047		; 000007ffH
	jne	SHORT $LN1@Is_Valid_D

; 211  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_D
$LN1@Is_Valid_D:

; 212  : 	}
; 213  : 	return true;

	mov	al, 1
$LN2@Is_Valid_D:

; 214  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Double@WWMath@@SA_NN@Z ENDP			; WWMath::Is_Valid_Double
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Float@WWMath@@SA_NM@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 4
?Is_Valid_Float@WWMath@@SA_NM@Z PROC			; WWMath::Is_Valid_Float, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 198  : 	unsigned long * plong = (unsigned long *)(&x);

	lea	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _plong$[ebp], eax

; 199  : 	unsigned long exponent = ((*plong) & 0x7F800000) >> (32-9);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2139095040				; 7f800000H
	shr	ecx, 23					; 00000017H
	mov	DWORD PTR _exponent$[ebp], ecx

; 200  : 	if (exponent == 0xFF) {

	cmp	DWORD PTR _exponent$[ebp], 255		; 000000ffH
	jne	SHORT $LN1@Is_Valid_F

; 201  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_F
$LN1@Is_Valid_F:

; 202  : 	}
; 203  : 	return true;

	mov	al, 1
$LN2@Is_Valid_F:

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Float@WWMath@@SA_NM@Z ENDP			; WWMath::Is_Valid_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Byte_To_Unit_Float@WWMath@@SAME@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
_byte$ = 8						; size = 1
?Byte_To_Unit_Float@WWMath@@SAME@Z PROC			; WWMath::Byte_To_Unit_Float, COMDAT

; 97   : 	static float Byte_To_Unit_Float(unsigned char byte) { return ((float)byte) / 255.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	movzx	eax, BYTE PTR _byte$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Byte_To_Unit_Float@WWMath@@SAME@Z ENDP			; WWMath::Byte_To_Unit_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Unit_Float_To_Byte@WWMath@@SAEM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?Unit_Float_To_Byte@WWMath@@SAEM@Z PROC			; WWMath::Unit_Float_To_Byte, COMDAT

; 96   : 	static unsigned char Unit_Float_To_Byte(float f) { return (unsigned char)(f*255.0f); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	movss	xmm0, DWORD PTR _f$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Unit_Float_To_Byte@WWMath@@SAEM@Z ENDP			; WWMath::Unit_Float_To_Byte
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJN@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 8
?Float_To_Long@WWMath@@SAJN@Z PROC			; WWMath::Float_To_Long, COMDAT

; 222  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 223  :     return _mm_cvttsd_si32(_mm_load_pd(&f));

	movupd	xmm0, XMMWORD PTR _f$[ebx]
	movapd	XMMWORD PTR $T1[ebp], xmm0
	movapd	xmm0, XMMWORD PTR $T1[ebp]
	cvttsd2si eax, xmm0

; 224  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJN@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAHHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAHHHM@Z PROC				; WWMath::Lerp, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 193  : 	return (a + (int)((b - a)*lerp));

	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	cvttss2si eax, xmm0
	add	eax, DWORD PTR _a$[ebp]

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAHHHM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SANNNM@Z
_TEXT	SEGMENT
tv73 = -72						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_lerp$ = 24						; size = 4
?Lerp@WWMath@@SANNNM@Z PROC				; WWMath::Lerp, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 188  : 	return (a + (b - a)*lerp);

	movsd	xmm0, QWORD PTR _b$[ebp]
	subsd	xmm0, QWORD PTR _a$[ebp]
	cvtss2sd xmm1, DWORD PTR _lerp$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _a$[ebp]
	movsd	QWORD PTR tv73[ebp], xmm0
	fld	QWORD PTR tv73[ebp]

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SANNNM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAMMMM@Z PROC				; WWMath::Lerp, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 183  : 	return (a + (b - a)*lerp);

	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	addss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAMMMM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Max@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Max@WWMath@@SAMMM@Z PROC				; WWMath::Max, COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 177  : 	if (a>b) return a;

	movss	xmm0, DWORD PTR _a$[ebp]
	comiss	xmm0, DWORD PTR _b$[ebp]
	jbe	SHORT $LN1@Max
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Max
$LN1@Max:

; 178  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Max:

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Max@WWMath@@SAMMM@Z ENDP				; WWMath::Max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Min@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Min@WWMath@@SAMMM@Z PROC				; WWMath::Min, COMDAT

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 171  : 	if (a<b) return a;

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _a$[ebp]
	jbe	SHORT $LN1@Min
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Min
$LN1@Min:

; 172  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Min:

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Min@WWMath@@SAMMM@Z ENDP				; WWMath::Min
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Wrap@WWMath@@SANNNN@Z PROC				; WWMath::Wrap, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 158  : 	if ( val >= max )	val -= (max-min);

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	movsd	xmm1, QWORD PTR _val$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 159  : 	if ( val < min )	val += (max-min);

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	addsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 160  : 	if ( val < min ) {

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 161  : 		val = min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 162  : 	}
; 163  : 	if ( val > max ) {

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 164  : 		val = max;

	movsd	xmm0, QWORD PTR _max$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 165  : 	}
; 166  : 	return val;

	fld	QWORD PTR _val$[ebp]

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SANNNN@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Wrap@WWMath@@SAMMMM@Z PROC				; WWMath::Wrap, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 145  : 	if ( val >= max )	val -= (max-min);

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 146  : 	if ( val < min )	val += (max-min);

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	addss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 147  : 	if ( val < min ) {

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 148  : 		val = min;

	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 149  : 	}
; 150  : 	if ( val > max ) {

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 151  : 		val = max;

	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 152  : 	}
; 153  : 	return val;

	fld	DWORD PTR _val$[ebp]

; 154  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SAMMMM@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp_Int@WWMath@@SAHHHH@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min_val$ = 12						; size = 4
_max_val$ = 16						; size = 4
?Clamp_Int@WWMath@@SAHHHH@Z PROC			; WWMath::Clamp_Int, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 138  : 	if(val < min_val) return min_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _min_val$[ebp]
	jge	SHORT $LN2@Clamp_Int
	mov	eax, DWORD PTR _min_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN2@Clamp_Int:

; 139  : 	if(val > max_val) return max_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _max_val$[ebp]
	jle	SHORT $LN1@Clamp_Int
	mov	eax, DWORD PTR _max_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN1@Clamp_Int:

; 140  : 	return val;

	mov	eax, DWORD PTR _val$[ebp]
$LN3@Clamp_Int:

; 141  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp_Int@WWMath@@SAHHHH@Z ENDP			; WWMath::Clamp_Int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Clamp@WWMath@@SANNNN@Z PROC				; WWMath::Clamp, COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 131  : 	if(val < min) return min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	QWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 132  : 	if(val > max) return max;

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	QWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 133  : 	return val;

	fld	QWORD PTR _val$[ebp]
$LN3@Clamp:

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SANNNN@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Clamp@WWMath@@SAMMMM@Z PROC				; WWMath::Clamp, COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 124  : 	if(val < min) return min;

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	DWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 125  : 	if(val > max) return max;

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	DWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 126  : 	return val;

	fld	DWORD PTR _val$[ebp]
$LN3@Clamp:

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SAMMMM@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Random_Float@WWMath@@SAMMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_min$ = 8						; size = 4
_max$ = 12						; size = 4
?Random_Float@WWMath@@SAMMM@Z PROC			; WWMath::Random_Float, COMDAT

; 118  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 119  : 	return Random_Float() * (max-min) + min; 

	call	?Random_Float@WWMath@@SAMXZ		; WWMath::Random_Float
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	xmm1, DWORD PTR _max$[ebp]
	subss	xmm1, DWORD PTR _min$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Random_Float@WWMath@@SAMMM@Z ENDP			; WWMath::Random_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z PROC		; WWMath::Fast_Is_Float_Positive, COMDAT

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 114  : 	return !((*(int *)(&val)) & 0x80000000);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2147483648			; 80000000H
	jne	SHORT $LN3@Fast_Is_Fl
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Fast_Is_Fl
$LN3@Fast_Is_Fl:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Fast_Is_Fl:
	mov	al, BYTE PTR tv66[ebp]

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z ENDP		; WWMath::Fast_Is_Float_Positive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Floor@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Floor@WWMath@@SAMM@Z PROC				; WWMath::Floor, COMDAT

; 81   : 	static float Floor(float val) { return floorf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Floor@WWMath@@SAMM@Z ENDP				; WWMath::Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Ceil@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Ceil@WWMath@@SAMM@Z PROC				; WWMath::Ceil, COMDAT

; 80   : 	static float Ceil(float val) { return ceilf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_ceilf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Ceil@WWMath@@SAMM@Z ENDP				; WWMath::Ceil
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sign@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sign@WWMath@@SAMM@Z PROC				; WWMath::Sign, COMDAT

; 102  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 103  : 	if (val > 0.0f) { 

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@Sign

; 104  : 		return +1.0f; 

	fld1
	jmp	SHORT $LN3@Sign
$LN2@Sign:

; 105  : 	} 
; 106  : 	if (val < 0.0f) { 

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN1@Sign

; 107  : 		return -1.0f; 

	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN3@Sign
$LN1@Sign:

; 108  : 	} 
; 109  : 	return 0.0f; 

	fldz
$LN3@Sign:

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sign@WWMath@@SAMM@Z ENDP				; WWMath::Sign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan2@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
_x$ = 12						; size = 4
?Atan2@WWMath@@SAMMM@Z PROC				; WWMath::Atan2, COMDAT

; 78   : 	static float Atan2(float y,float x) { return static_cast<float>(atan2(y,x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan2@WWMath@@SAMMM@Z ENDP				; WWMath::Atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan@WWMath@@SAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Atan@WWMath@@SAMM@Z PROC				; WWMath::Atan, COMDAT

; 77   : 	static float Atan(float x) { return static_cast<float>(atan(x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan@WWMath@@SAMM@Z ENDP				; WWMath::Atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Asin@WWMath@@SAMM@Z PROC				; WWMath::Asin, COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 307  : 	return (float)asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Asin@WWMath@@SAMM@Z ENDP				; WWMath::Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Acos@WWMath@@SAMM@Z PROC				; WWMath::Acos, COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 287  : 	return (float)acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4

; 288  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Acos@WWMath@@SAMM@Z ENDP				; WWMath::Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Asin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Asin, COMDAT

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 292  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Asin

; 293  : 		return WWMath::Asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Asin@WWMath@@SAMM@Z			; WWMath::Asin
	add	esp, 4
	jmp	$LN12@Fast_Asin
$LN11@Fast_Asin:

; 294  : 	}
; 295  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 296  : 	int idx0=Float_To_Int_Floor(val); 

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 297  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 298  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 299  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 300  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Asin:

; 301  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Asin
$LN6@Fast_Asin:
	int	3
$LN7@Fast_Asin:

; 302  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Asin
$LN1@Fast_Asin:
	int	3
$LN2@Fast_Asin:

; 303  : 	return (1.0f - frac) * _FastAsinTable[idx0] + frac * _FastAsinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Asin:

; 304  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Asin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Acos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Acos, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 271  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Acos

; 272  : 		return WWMath::Acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Acos@WWMath@@SAMM@Z			; WWMath::Acos
	add	esp, 4
	jmp	$LN12@Fast_Acos
$LN11@Fast_Acos:

; 273  : 	}
; 274  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 275  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 276  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 277  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 278  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 279  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Acos:

; 280  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Acos
$LN6@Fast_Acos:
	int	3
$LN7@Fast_Acos:

; 281  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Acos
$LN1@Fast_Acos:
	int	3
$LN2@Fast_Acos:

; 282  : 	return (1.0f - frac) * _FastAcosTable[idx0] + frac * _FastAcosTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Acos:

; 283  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Acos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Cos@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Cos, COMDAT

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 266  : 	return 1.0f / WWMath::Fast_Cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Cos@WWMath@@SAMM@Z		; WWMath::Fast_Cos
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Cos@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv135 = -88						; size = 4
tv140 = -84						; size = 4
tv138 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Cos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Cos, COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 254  : 	val+=(WWMATH_PI * 0.5f);

	movss	xmm0, DWORD PTR _val$[ebp]
	addss	xmm0, DWORD PTR __real@3fc90fdb
	movss	DWORD PTR _val$[ebp], xmm0

; 255  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 256  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 257  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 258  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 259  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 260  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 261  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv140[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv140[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv135[ebp], xmm1
	fld	DWORD PTR tv135[ebp]

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Cos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Sin@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Sin, COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 249  : 	return 1.0f / WWMath::Fast_Sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Sin@WWMath@@SAMM@Z		; WWMath::Fast_Sin
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 250  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Sin@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv133 = -88						; size = 4
tv138 = -84						; size = 4
tv136 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Sin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Sin, COMDAT

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 238  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 239  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 240  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 241  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 242  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 243  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 244  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv136[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv136[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv138[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv133[ebp], xmm1
	fld	DWORD PTR tv133[ebp]

; 245  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Sin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJM@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 4
?Float_To_Long@WWMath@@SAJM@Z PROC			; WWMath::Float_To_Long, COMDAT

; 217  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 218  :     return _mm_cvtt_ss2si(_mm_load_ss(&f));

	movss	xmm0, DWORD PTR _f$[ebx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	cvttss2si eax, xmm0

; 219  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJM@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Inv_Sqrt@WWMath@@SIMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_number$ = 8						; size = 4
?Inv_Sqrt@WWMath@@SIMM@Z PROC				; WWMath::Inv_Sqrt, COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 342  : 	return 1.f / sqrt(number);

	push	ecx
	movss	xmm0, DWORD PTR _number$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 343  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inv_Sqrt@WWMath@@SIMM@Z ENDP				; WWMath::Inv_Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sqrt@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sqrt@WWMath@@SAMM@Z PROC				; WWMath::Sqrt, COMDAT

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 312  :     return ::sqrtf(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4

; 313  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sqrt@WWMath@@SAMM@Z ENDP				; WWMath::Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sin@WWMath@@SAMM@Z PROC				; WWMath::Sin, COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 233  :     return ::sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sin@WWMath@@SAMM@Z ENDP				; WWMath::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Cos@WWMath@@SAMM@Z PROC				; WWMath::Cos, COMDAT

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 228  :     return ::cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cos@WWMath@@SAMM@Z ENDP				; WWMath::Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Floor@WWMath@@SAHABM@Z
_TEXT	SEGMENT
tv83 = -96						; size = 4
_r$ = -28						; size = 4
_mantissa$ = -24					; size = 4
_imask$ = -20						; size = 4
_expsign$ = -16						; size = 4
_exponent$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Floor@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Floor, COMDAT

; 326  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 327  : 	int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 328  : 	int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 329  : 	a&=0x7fffffff;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _a$[ebp], eax

; 330  : 	int exponent = (a>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 331  : 	int expsign	= ~(exponent>>31);

	mov	eax, DWORD PTR _exponent$[ebp]
	sar	eax, 31					; 0000001fH
	not	eax
	mov	DWORD PTR _expsign$[ebp], eax

; 332  : 	int imask = ( (1<<(31-(exponent))))-1;

	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _imask$[ebp], eax

; 333  : 	int mantissa = (a&((1<<23)-1));

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	mov	DWORD PTR _mantissa$[ebp], eax

; 334  : 	int r = ((unsigned int)(mantissa|(1<<23))<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	or	eax, 8388608				; 00800000H
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 335  : #pragma warning(suppress: 6290) //warning C6290: Bitwise operation on logical result: ! has higher precedence than &. Use && or (!(x & y)) instead
; 336  : 	r = ((r & expsign) ^ (sign)) + ((!((mantissa<<8)&imask)&(expsign^((a-1)>>31)))&sign);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	and	eax, DWORD PTR _imask$[ebp]
	jne	SHORT $LN3@Float_To_I
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@Float_To_I
$LN3@Float_To_I:
	mov	DWORD PTR tv83[ebp], 0
$LN4@Float_To_I:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR _expsign$[ebp]
	xor	ecx, DWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	sub	edx, 1
	sar	edx, 31					; 0000001fH
	xor	edx, DWORD PTR _expsign$[ebp]
	and	edx, DWORD PTR tv83[ebp]
	and	edx, DWORD PTR _sign$[ebp]
	add	ecx, edx
	mov	DWORD PTR _r$[ebp], ecx

; 337  : 	return r;

	mov	eax, DWORD PTR _r$[ebp]

; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Floor@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Chop@WWMath@@SAHABM@Z
_TEXT	SEGMENT
_r$ = -20						; size = 4
_exponent$ = -16					; size = 4
_mantissa$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Chop@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Chop, COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 317  :     int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 318  :     int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 319  :     int mantissa = (a&((1<<23)-1))|(1<<23);

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	or	eax, 8388608				; 00800000H
	mov	DWORD PTR _mantissa$[ebp], eax

; 320  :     int exponent = ((a&0x7fffffff)>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 321  :     int r = ((unsigned int)(mantissa)<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 322  :     return ((r ^ (sign)) - sign ) &~ (exponent>>31);

	mov	eax, DWORD PTR _r$[ebp]
	xor	eax, DWORD PTR _sign$[ebp]
	sub	eax, DWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	sar	ecx, 31					; 0000001fH
	not	ecx
	and	eax, ecx

; 323  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Chop@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Chop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fabs@WWMath@@SAMM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_val$ = 8						; size = 4
?Fabs@WWMath@@SAMM@Z PROC				; WWMath::Fabs, COMDAT

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 58   : 		int value=*(int*)&val;

	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 59   : 		value&=0x7fffffff;

	mov	eax, DWORD PTR _value$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _value$[ebp], eax

; 60   : 		return *(float*)&value;

	fld	DWORD PTR _value$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fabs@WWMath@@SAMM@Z ENDP				; WWMath::Fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??_U@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??_U@YAPAXIPAX@Z PROC					; operator new[], COMDAT

; 71   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 72   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_U@YAPAXIPAX@Z ENDP					; operator new[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 541  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 507  :         {return (atan2f(_Y, _X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv78 = -80						; size = 8
tv72 = -72						; size = 8
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv72[ebp], xmm0
	fld	QWORD PTR tv72[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv78[ebp]
	movsd	xmm0, QWORD PTR tv78[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv80[ebp], xmm0
	fld	DWORD PTR tv80[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_cos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _ceilf
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv74 = -72						; size = 8
__X$ = 8						; size = 4
_ceilf	PROC						; COMDAT

; 408  :         {return ((float)ceil((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__ceil
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ceilf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv85 = -92						; size = 4
tv83 = -88						; size = 8
tv77 = -80						; size = 8
tv75 = -72						; size = 8
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
	fld	QWORD PTR tv75[ebp]
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
	fld	QWORD PTR tv77[ebp]
	call	__CIatan2
	fstp	QWORD PTR tv83[ebp]
	movsd	xmm0, QWORD PTR tv83[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_atan_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_asin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_acos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
