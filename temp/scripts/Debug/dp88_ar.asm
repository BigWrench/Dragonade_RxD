; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\dp88_ar.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?TYPE_OFFENSIVE@dp88_AI_Objective@@2IB		; dp88_AI_Objective::TYPE_OFFENSIVE
PUBLIC	?TYPE_DEFENSIVE@dp88_AI_Objective@@2IB		; dp88_AI_Objective::TYPE_DEFENSIVE
PUBLIC	?TYPE_ENGINEERING@dp88_AI_Objective@@2IB	; dp88_AI_Objective::TYPE_ENGINEERING
PUBLIC	?UNITTYPE_SOLDIER@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_SOLDIER
PUBLIC	?UNITTYPE_LVEHICLE@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_LVEHICLE
PUBLIC	?UNITTYPE_HVEHICLE@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_HVEHICLE
PUBLIC	?UNITTYPE_AIRCRAFT@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_AIRCRAFT
PUBLIC	?UNITTYPE_MAX@dp88_AI_Objective@@1EB		; dp88_AI_Objective::UNITTYPE_MAX
PUBLIC	?UNITTYPE_UNKNOWN@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_UNKNOWN
PUBLIC	??_C@_0M@JIDAOJHN@CLEG_Weapon?$AA@		; `string'
PUBLIC	?MODE_DEFAULT@dp88_conquestController@@1EB	; dp88_conquestController::MODE_DEFAULT
PUBLIC	?MODE_DEDUCTION@dp88_conquestController@@1EB	; dp88_conquestController::MODE_DEDUCTION
PUBLIC	?MAX_TOWERS@dp88_AR_Prism_Tower@@0HB		; dp88_AR_Prism_Tower::MAX_TOWERS
PUBLIC	?prismTowerCount@dp88_AR_Prism_Tower@@0HA	; dp88_AR_Prism_Tower::prismTowerCount
PUBLIC	?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA	; dp88_AR_Prism_Tower::prismTowerIds
PUBLIC	?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A ; dp88_AR_Prism_Tower::prismTowerScripts
PUBLIC	?ACTION_ID_MOVE_TO_OBJECTIVE@dp88_AI_Unit@@1HB	; dp88_AI_Unit::ACTION_ID_MOVE_TO_OBJECTIVE
PUBLIC	?ACTION_ID_ATTACK_TARGET@dp88_AI_Unit@@1HB	; dp88_AI_Unit::ACTION_ID_ATTACK_TARGET
PUBLIC	?MODE_HEALTH@dp88_RegenerateHitpoints@@1HB	; dp88_RegenerateHitpoints::MODE_HEALTH
PUBLIC	?MODE_ARMOUR@dp88_RegenerateHitpoints@@1HB	; dp88_RegenerateHitpoints::MODE_ARMOUR
PUBLIC	?MODE_PILOTED_HEALTH@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_PILOTED_HEALTH
PUBLIC	?MODE_PILOTED_ARMOUR@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_PILOTED_ARMOUR
PUBLIC	?MODE_OCCUPIED_HEALTH@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_OCCUPIED_HEALTH
PUBLIC	?MODE_OCCUPIED_ARMOUR@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_OCCUPIED_ARMOUR
PUBLIC	?MODE_DRIVER_HEALTH@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_DRIVER_HEALTH
PUBLIC	?MODE_DRIVER_ARMOUR@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_DRIVER_ARMOUR
PUBLIC	?MODE_PASSENGERS_HEALTH@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_PASSENGERS_HEALTH
PUBLIC	?MODE_PASSENGERS_ARMOUR@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_PASSENGERS_ARMOUR
PUBLIC	?STATE_UNDEPLOYED@dp88_AI_PopupTurret@@1EB	; dp88_AI_PopupTurret::STATE_UNDEPLOYED
PUBLIC	?STATE_DEPLOYING@dp88_AI_PopupTurret@@1EB	; dp88_AI_PopupTurret::STATE_DEPLOYING
PUBLIC	?STATE_DEPLOYED@dp88_AI_PopupTurret@@1EB	; dp88_AI_PopupTurret::STATE_DEPLOYED
PUBLIC	?STATE_UNDEPLOYING@dp88_AI_PopupTurret@@1EB	; dp88_AI_PopupTurret::STATE_UNDEPLOYING
_BSS	SEGMENT
?prismTowerCount@dp88_AR_Prism_Tower@@0HA DD 01H DUP (?) ; dp88_AR_Prism_Tower::prismTowerCount
?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA DD 014H DUP (?) ; dp88_AR_Prism_Tower::prismTowerIds
?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A DD 014H DUP (?) ; dp88_AR_Prism_Tower::prismTowerScripts
_BSS	ENDS
;	COMDAT ?STATE_UNDEPLOYING@dp88_AI_PopupTurret@@1EB
CONST	SEGMENT
?STATE_UNDEPLOYING@dp88_AI_PopupTurret@@1EB DB 03H	; dp88_AI_PopupTurret::STATE_UNDEPLOYING
CONST	ENDS
;	COMDAT ?STATE_DEPLOYED@dp88_AI_PopupTurret@@1EB
CONST	SEGMENT
?STATE_DEPLOYED@dp88_AI_PopupTurret@@1EB DB 02H		; dp88_AI_PopupTurret::STATE_DEPLOYED
CONST	ENDS
;	COMDAT ?STATE_DEPLOYING@dp88_AI_PopupTurret@@1EB
CONST	SEGMENT
?STATE_DEPLOYING@dp88_AI_PopupTurret@@1EB DB 01H	; dp88_AI_PopupTurret::STATE_DEPLOYING
CONST	ENDS
;	COMDAT ?STATE_UNDEPLOYED@dp88_AI_PopupTurret@@1EB
CONST	SEGMENT
?STATE_UNDEPLOYED@dp88_AI_PopupTurret@@1EB DB 00H	; dp88_AI_PopupTurret::STATE_UNDEPLOYED
CONST	ENDS
;	COMDAT ?MODE_PASSENGERS_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_PASSENGERS_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 0200H ; dp88_RegenerateHitpoints::MODE_PASSENGERS_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_PASSENGERS_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_PASSENGERS_HEALTH@dp88_RegenerateHitpoints@@1HB DD 0100H ; dp88_RegenerateHitpoints::MODE_PASSENGERS_HEALTH
CONST	ENDS
;	COMDAT ?MODE_DRIVER_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_DRIVER_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 080H ; dp88_RegenerateHitpoints::MODE_DRIVER_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_DRIVER_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_DRIVER_HEALTH@dp88_RegenerateHitpoints@@1HB DD 040H ; dp88_RegenerateHitpoints::MODE_DRIVER_HEALTH
CONST	ENDS
;	COMDAT ?MODE_OCCUPIED_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_OCCUPIED_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 020H ; dp88_RegenerateHitpoints::MODE_OCCUPIED_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_OCCUPIED_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_OCCUPIED_HEALTH@dp88_RegenerateHitpoints@@1HB DD 010H ; dp88_RegenerateHitpoints::MODE_OCCUPIED_HEALTH
CONST	ENDS
;	COMDAT ?MODE_PILOTED_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_PILOTED_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 08H ; dp88_RegenerateHitpoints::MODE_PILOTED_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_PILOTED_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_PILOTED_HEALTH@dp88_RegenerateHitpoints@@1HB DD 04H ; dp88_RegenerateHitpoints::MODE_PILOTED_HEALTH
CONST	ENDS
;	COMDAT ?MODE_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 02H	; dp88_RegenerateHitpoints::MODE_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_HEALTH@dp88_RegenerateHitpoints@@1HB DD 01H	; dp88_RegenerateHitpoints::MODE_HEALTH
CONST	ENDS
;	COMDAT ?ACTION_ID_ATTACK_TARGET@dp88_AI_Unit@@1HB
CONST	SEGMENT
?ACTION_ID_ATTACK_TARGET@dp88_AI_Unit@@1HB DD 077c812H	; dp88_AI_Unit::ACTION_ID_ATTACK_TARGET
CONST	ENDS
;	COMDAT ?ACTION_ID_MOVE_TO_OBJECTIVE@dp88_AI_Unit@@1HB
CONST	SEGMENT
?ACTION_ID_MOVE_TO_OBJECTIVE@dp88_AI_Unit@@1HB DD 077c811H ; dp88_AI_Unit::ACTION_ID_MOVE_TO_OBJECTIVE
CONST	ENDS
CONST	SEGMENT
_DONT_MOVE_ARRIVED_DIST DD 0447a0000r		; 1000
CONST	ENDS
;	COMDAT ?MAX_TOWERS@dp88_AR_Prism_Tower@@0HB
CONST	SEGMENT
?MAX_TOWERS@dp88_AR_Prism_Tower@@0HB DD 014H		; dp88_AR_Prism_Tower::MAX_TOWERS
CONST	ENDS
;	COMDAT ?MODE_DEDUCTION@dp88_conquestController@@1EB
CONST	SEGMENT
?MODE_DEDUCTION@dp88_conquestController@@1EB DB 01H	; dp88_conquestController::MODE_DEDUCTION
CONST	ENDS
;	COMDAT ?MODE_DEFAULT@dp88_conquestController@@1EB
CONST	SEGMENT
?MODE_DEFAULT@dp88_conquestController@@1EB DB 00H	; dp88_conquestController::MODE_DEFAULT
CONST	ENDS
;	COMDAT ??_C@_0M@JIDAOJHN@CLEG_Weapon?$AA@
CONST	SEGMENT
??_C@_0M@JIDAOJHN@CLEG_Weapon?$AA@ DB 'CLEG_Weapon', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?Comparison@?1??Damaged@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0M@Z@4PBDB DD FLAT:??_C@_0M@JIDAOJHN@CLEG_Weapon?$AA@ ; `dp88_AR_CLEG_target::Damaged'::`2'::Comparison
_DATA	ENDS
;	COMDAT ?UNITTYPE_UNKNOWN@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_UNKNOWN@dp88_AI_Objective@@1EB DB 0ffH	; dp88_AI_Objective::UNITTYPE_UNKNOWN
CONST	ENDS
;	COMDAT ?UNITTYPE_MAX@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_MAX@dp88_AI_Objective@@1EB DB 03H		; dp88_AI_Objective::UNITTYPE_MAX
CONST	ENDS
;	COMDAT ?UNITTYPE_AIRCRAFT@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_AIRCRAFT@dp88_AI_Objective@@1EB DB 03H	; dp88_AI_Objective::UNITTYPE_AIRCRAFT
CONST	ENDS
;	COMDAT ?UNITTYPE_HVEHICLE@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_HVEHICLE@dp88_AI_Objective@@1EB DB 02H	; dp88_AI_Objective::UNITTYPE_HVEHICLE
CONST	ENDS
;	COMDAT ?UNITTYPE_LVEHICLE@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_LVEHICLE@dp88_AI_Objective@@1EB DB 01H	; dp88_AI_Objective::UNITTYPE_LVEHICLE
CONST	ENDS
;	COMDAT ?UNITTYPE_SOLDIER@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_SOLDIER@dp88_AI_Objective@@1EB DB 00H		; dp88_AI_Objective::UNITTYPE_SOLDIER
CONST	ENDS
;	COMDAT ?TYPE_ENGINEERING@dp88_AI_Objective@@2IB
CONST	SEGMENT
?TYPE_ENGINEERING@dp88_AI_Objective@@2IB DD 03H		; dp88_AI_Objective::TYPE_ENGINEERING
CONST	ENDS
;	COMDAT ?TYPE_DEFENSIVE@dp88_AI_Objective@@2IB
CONST	SEGMENT
?TYPE_DEFENSIVE@dp88_AI_Objective@@2IB DD 02H		; dp88_AI_Objective::TYPE_DEFENSIVE
CONST	ENDS
;	COMDAT ?TYPE_OFFENSIVE@dp88_AI_Objective@@2IB
CONST	SEGMENT
?TYPE_OFFENSIVE@dp88_AI_Objective@@2IB DD 01H		; dp88_AI_Objective::TYPE_OFFENSIVE
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_atanf
PUBLIC	_atan2f
PUBLIC	_ceilf
PUBLIC	_cosf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?abs@@YAMM@Z					; abs
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?ceil@@YAMM@Z					; ceil
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?Fabs@WWMath@@SAMM@Z				; WWMath::Fabs
PUBLIC	?Float_To_Int_Chop@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Chop
PUBLIC	?Float_To_Int_Floor@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Floor
PUBLIC	?Cos@WWMath@@SAMM@Z				; WWMath::Cos
PUBLIC	?Sin@WWMath@@SAMM@Z				; WWMath::Sin
PUBLIC	?Sqrt@WWMath@@SAMM@Z				; WWMath::Sqrt
PUBLIC	?Inv_Sqrt@WWMath@@SIMM@Z			; WWMath::Inv_Sqrt
PUBLIC	?Float_To_Long@WWMath@@SAJM@Z			; WWMath::Float_To_Long
PUBLIC	?Fast_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Sin
PUBLIC	?Fast_Inv_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Sin
PUBLIC	?Fast_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Cos
PUBLIC	?Fast_Inv_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Cos
PUBLIC	?Fast_Acos@WWMath@@SAMM@Z			; WWMath::Fast_Acos
PUBLIC	?Fast_Asin@WWMath@@SAMM@Z			; WWMath::Fast_Asin
PUBLIC	?Acos@WWMath@@SAMM@Z				; WWMath::Acos
PUBLIC	?Asin@WWMath@@SAMM@Z				; WWMath::Asin
PUBLIC	?Atan@WWMath@@SAMM@Z				; WWMath::Atan
PUBLIC	?Atan2@WWMath@@SAMMM@Z				; WWMath::Atan2
PUBLIC	?Sign@WWMath@@SAMM@Z				; WWMath::Sign
PUBLIC	?Ceil@WWMath@@SAMM@Z				; WWMath::Ceil
PUBLIC	?Floor@WWMath@@SAMM@Z				; WWMath::Floor
PUBLIC	?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z	; WWMath::Fast_Is_Float_Positive
PUBLIC	?Random_Float@WWMath@@SAMMM@Z			; WWMath::Random_Float
PUBLIC	?Clamp@WWMath@@SAMMMM@Z				; WWMath::Clamp
PUBLIC	?Clamp@WWMath@@SANNNN@Z				; WWMath::Clamp
PUBLIC	?Clamp_Int@WWMath@@SAHHHH@Z			; WWMath::Clamp_Int
PUBLIC	?Wrap@WWMath@@SAMMMM@Z				; WWMath::Wrap
PUBLIC	?Wrap@WWMath@@SANNNN@Z				; WWMath::Wrap
PUBLIC	?Min@WWMath@@SAMMM@Z				; WWMath::Min
PUBLIC	?Max@WWMath@@SAMMM@Z				; WWMath::Max
PUBLIC	?Lerp@WWMath@@SAMMMM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SANNNM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SAHHHM@Z				; WWMath::Lerp
PUBLIC	?Float_To_Long@WWMath@@SAJN@Z			; WWMath::Float_To_Long
PUBLIC	?Unit_Float_To_Byte@WWMath@@SAEM@Z		; WWMath::Unit_Float_To_Byte
PUBLIC	?Byte_To_Unit_Float@WWMath@@SAME@Z		; WWMath::Byte_To_Unit_Float
PUBLIC	?Is_Valid_Float@WWMath@@SA_NM@Z			; WWMath::Is_Valid_Float
PUBLIC	?Is_Valid_Double@WWMath@@SA_NN@Z		; WWMath::Is_Valid_Double
PUBLIC	??4WWMath@@QAEAAV0@ABV0@@Z			; WWMath::operator=
PUBLIC	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ		; RefArrayHelper<float,1024>::operator float *
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@ABV0@@Z				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@MMM@Z				; Vector3::Vector3
PUBLIC	??4Vector3@@QAEAAV0@ABV0@@Z			; Vector3::operator=
PUBLIC	?Set@Vector3@@QAEXMMM@Z				; Vector3::Set
PUBLIC	??AVector3@@QAEAAMH@Z				; Vector3::operator[]
PUBLIC	??AVector3@@QBEABMH@Z				; Vector3::operator[]
PUBLIC	?Normalize@Vector3@@QAEXXZ			; Vector3::Normalize
PUBLIC	?Length@Vector3@@QBEMXZ				; Vector3::Length
PUBLIC	?Length2@Vector3@@QBEMXZ			; Vector3::Length2
PUBLIC	??YVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator+=
PUBLIC	??ZVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator-=
PUBLIC	??XVector3@@QAEAAV0@M@Z				; Vector3::operator*=
PUBLIC	??_0Vector3@@QAEAAV0@M@Z			; Vector3::operator/=
PUBLIC	??D@YA?AVVector3@@ABV0@M@Z			; operator*
PUBLIC	??D@YA?AVVector3@@MABV0@@Z			; operator*
PUBLIC	??H@YA?AVVector3@@ABV0@0@Z			; operator+
PUBLIC	??G@YA?AVVector3@@ABV0@0@Z			; operator-
PUBLIC	?Add@Vector3@@SAXABV1@0PAV1@@Z			; Vector3::Add
PUBLIC	?Subtract@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Subtract
PUBLIC	?Distance_Squared@Vector3@@SAMABV1@0@Z		; Vector3::Distance_Squared
PUBLIC	?Swap@@YAXAAVVector3@@0@Z			; Swap
PUBLIC	??0GameObjObserverClass@@QAE@XZ			; GameObjObserverClass::GameObjObserverClass
PUBLIC	??1GameObjObserverClass@@UAE@XZ			; GameObjObserverClass::~GameObjObserverClass
PUBLIC	?Set_ID@GameObjObserverClass@@QAEXH@Z		; GameObjObserverClass::Set_ID
PUBLIC	?Get_ID@GameObjObserverClass@@QAEHXZ		; GameObjObserverClass::Get_ID
PUBLIC	?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ ; GameObjObserverClass::Owner
PUBLIC	??0GameObjObserverClass@@QAE@ABV0@@Z		; GameObjObserverClass::GameObjObserverClass
PUBLIC	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z	; GameObjObserverClass::operator=
PUBLIC	??_GGameObjObserverClass@@UAEPAXI@Z		; GameObjObserverClass::`scalar deleting destructor'
PUBLIC	??_EGameObjObserverClass@@UAEPAXI@Z		; GameObjObserverClass::`vector deleting destructor'
PUBLIC	??1ScriptClass@@UAE@XZ				; ScriptClass::~ScriptClass
PUBLIC	??0ScriptClass@@QAE@XZ				; ScriptClass::ScriptClass
PUBLIC	??0ScriptClass@@QAE@ABV0@@Z			; ScriptClass::ScriptClass
PUBLIC	??4ScriptClass@@QAEAAV0@ABV0@@Z			; ScriptClass::operator=
PUBLIC	??_GScriptClass@@UAEPAXI@Z			; ScriptClass::`scalar deleting destructor'
PUBLIC	??_EScriptClass@@UAEPAXI@Z			; ScriptClass::`vector deleting destructor'
PUBLIC	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory
PUBLIC	?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Created
PUBLIC	?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Destroyed
PUBLIC	?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Killed
PUBLIC	?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z ; ScriptImpClass::Damaged
PUBLIC	?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z ; ScriptImpClass::Custom
PUBLIC	?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ; ScriptImpClass::Sound_Heard
PUBLIC	?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Enemy_Seen
PUBLIC	?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; ScriptImpClass::Action_Complete
PUBLIC	?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z ; ScriptImpClass::Timer_Expired
PUBLIC	?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ; ScriptImpClass::Animation_Complete
PUBLIC	?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Poked
PUBLIC	?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Entered
PUBLIC	?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Exited
PUBLIC	?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ ; ScriptImpClass::Owner
PUBLIC	?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ ; ScriptImpClass::Get_Owner_Ptr
PUBLIC	?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z ; ScriptImpClass::Save_Data
PUBLIC	?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z ; ScriptImpClass::Load_Data
PUBLIC	?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ ; ScriptImpClass::Register_Auto_Save_Variables
PUBLIC	?Get_Parameter_Count@ScriptImpClass@@QAEHXZ	; ScriptImpClass::Get_Parameter_Count
PUBLIC	?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z	; ScriptImpClass::Get_Int_Parameter
PUBLIC	?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z	; ScriptImpClass::Get_Float_Parameter
PUBLIC	?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z	; ScriptImpClass::Get_Bool_Parameter
PUBLIC	?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z	; ScriptImpClass::Get_Bool_Parameter
PUBLIC	??0ScriptImpClass@@QAE@ABV0@@Z			; ScriptImpClass::ScriptImpClass
PUBLIC	??4ScriptImpClass@@QAEAAV0@ABV0@@Z		; ScriptImpClass::operator=
PUBLIC	??_GScriptImpClass@@UAEPAXI@Z			; ScriptImpClass::`scalar deleting destructor'
PUBLIC	??_EScriptImpClass@@UAEPAXI@Z			; ScriptImpClass::`vector deleting destructor'
PUBLIC	??0ActionParamsStruct@@QAE@XZ			; ActionParamsStruct::ActionParamsStruct
PUBLIC	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic
PUBLIC	?Set_Movement@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ; ActionParamsStruct::Set_Movement
PUBLIC	??0ScriptFactory@@QAE@ABV0@@Z			; ScriptFactory::ScriptFactory
PUBLIC	??4ScriptFactory@@QAEAAV0@ABV0@@Z		; ScriptFactory::operator=
PUBLIC	??_GScriptFactory@@UAEPAXI@Z			; ScriptFactory::`scalar deleting destructor'
PUBLIC	??_EScriptFactory@@UAEPAXI@Z			; ScriptFactory::`vector deleting destructor'
PUBLIC	??4ScriptRegistrar@@QAEAAV0@ABV0@@Z		; ScriptRegistrar::operator=
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	?Enter@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Enter
PUBLIC	?Leave@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Leave
PUBLIC	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass
PUBLIC	??1LockClass@FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::LockClass::~LockClass
PUBLIC	??0FastCriticalSectionClass@@QAE@XZ		; FastCriticalSectionClass::FastCriticalSectionClass
PUBLIC	??0StringClass@@QAE@_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@H_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@ABV0@_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@PBD_N@Z			; StringClass::StringClass
PUBLIC	??1StringClass@@QAE@XZ				; StringClass::~StringClass
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	??4StringClass@@QAEABV0@ABV0@@Z			; StringClass::operator=
PUBLIC	??YStringClass@@QAEABV0@PBD@Z			; StringClass::operator+=
PUBLIC	??AStringClass@@QAEAADH@Z			; StringClass::operator[]
PUBLIC	??BStringClass@@QBEPBDXZ			; StringClass::operator char const *
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Peek_Buffer@StringClass@@QAEPADXZ		; StringClass::Peek_Buffer
PUBLIC	?getFormattedString@StringClass@@SA?AV1@PBDZZ	; StringClass::getFormattedString
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??_EStringClass@@QAEPAXI@Z			; StringClass::`vector deleting destructor'
PUBLIC	??1WideStringClass@@QAE@XZ			; WideStringClass::~WideStringClass
PUBLIC	??_EWideStringClass@@QAEPAXI@Z			; WideStringClass::`vector deleting destructor'
PUBLIC	??4ChunkLoadClass@@QAEAAV0@ABV0@@Z		; ChunkLoadClass::operator=
PUBLIC	?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ	; ChunkSaveClass::Set_Contains_Chunks
PUBLIC	??4ChunkSaveClass@@QAEAAV0@ABV0@@Z		; ChunkSaveClass::operator=
PUBLIC	?Is_Present@INIClass@@QBE_NPBD0@Z		; INIClass::Is_Present
PUBLIC	?Section_Present@INIClass@@QBE_NPBD@Z		; INIClass::Section_Present
PUBLIC	?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ; INIClass::Get_Section_List
PUBLIC	?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ; INIClass::Get_Section_Index
PUBLIC	?Get_File_Name@INIClass@@QAEPBDXZ		; INIClass::Get_File_Name
PUBLIC	??0INIClass@@QAE@ABV0@@Z			; INIClass::INIClass
PUBLIC	??4INIClass@@QAEAAV0@ABV0@@Z			; INIClass::operator=
PUBLIC	??_GINIClass@@UAEPAXI@Z				; INIClass::`scalar deleting destructor'
PUBLIC	??_EINIClass@@UAEPAXI@Z				; INIClass::`vector deleting destructor'
PUBLIC	??Cfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator->
PUBLIC	??Bfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator FileClass *
PUBLIC	??Dfile_auto_ptr@@QAEAAVFileClass@@XZ		; file_auto_ptr::operator*
PUBLIC	?get@file_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::get
PUBLIC	??4file_auto_ptr@@QAEAAV0@ABV0@@Z		; file_auto_ptr::operator=
PUBLIC	??0Vector4@@QAE@XZ				; Vector4::Vector4
PUBLIC	??0Vector4@@QAE@MMMM@Z				; Vector4::Vector4
PUBLIC	??4Vector4@@QAEAAV0@ABV0@@Z			; Vector4::operator=
PUBLIC	?Set@Vector4@@QAEXMMMM@Z			; Vector4::Set
PUBLIC	??AVector4@@QAEAAMH@Z				; Vector4::operator[]
PUBLIC	??AVector4@@QBEABMH@Z				; Vector4::operator[]
PUBLIC	??YVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator+=
PUBLIC	??ZVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator-=
PUBLIC	??XVector4@@QAEAAV0@M@Z				; Vector4::operator*=
PUBLIC	??AMatrix3D@@QAEAAVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??AMatrix3D@@QBEABVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??0Matrix3D@@QAE@_N@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@QAM@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@000@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@M@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@MM@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@@Z			; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABV0@@Z			; Matrix3D::Matrix3D
PUBLIC	??4Matrix3D@@QAEAAV0@ABV0@@Z			; Matrix3D::operator=
PUBLIC	?Set@Matrix3D@@QAEXQAM@Z			; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@000@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@M@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@MM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Set
PUBLIC	?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Translation
PUBLIC	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Translation
PUBLIC	?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set_Translation
PUBLIC	?Get_X_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_X_Translation
PUBLIC	?Get_Y_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Y_Translation
PUBLIC	?Get_Z_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Z_Translation
PUBLIC	?Set_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_X_Translation
PUBLIC	?Set_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Y_Translation
PUBLIC	?Set_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Z_Translation
PUBLIC	?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ; Matrix3D::Adjust_Translation
PUBLIC	?Adjust_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_X_Translation
PUBLIC	?Adjust_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Y_Translation
PUBLIC	?Adjust_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Z_Translation
PUBLIC	?Make_Identity@Matrix3D@@QAEXXZ			; Matrix3D::Make_Identity
PUBLIC	?Translate@Matrix3D@@QAEXMMM@Z			; Matrix3D::Translate
PUBLIC	?Translate@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Translate
PUBLIC	?Translate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_X
PUBLIC	?Translate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Y
PUBLIC	?Translate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Scale@Matrix3D@@QAEXM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXMMM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXAAVVector3@@@Z		; Matrix3D::Scale
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Z
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Transform_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Z_Vector
PUBLIC	?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Rotate_Vector
PUBLIC	?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Transform_Vector
PUBLIC	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
PUBLIC	?Get_Network_ID@NetworkObjectClass@@QBEHXZ	; NetworkObjectClass::Get_Network_ID
PUBLIC	??0Matrix4@@QAE@XZ				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABV0@@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@_N@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVMatrix3D@@@Z			; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVVector4@@000@Z		; Matrix4::Matrix4
PUBLIC	?Make_Identity@Matrix4@@QAEXXZ			; Matrix4::Make_Identity
PUBLIC	?Init@Matrix4@@QAEXABVMatrix3D@@@Z		; Matrix4::Init
PUBLIC	?Init@Matrix4@@QAEXABVVector4@@000@Z		; Matrix4::Init
PUBLIC	?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Ortho@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho
PUBLIC	?Init_Perspective@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Perspective
PUBLIC	??AMatrix4@@QAEAAVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	??AMatrix4@@QBEABVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	?Transpose@Matrix4@@QBE?AV1@XZ			; Matrix4::Transpose
PUBLIC	?Determinant@Matrix4@@QBEMXZ			; Matrix4::Determinant
PUBLIC	?Inverse@Matrix4@@QBE?AV1@XZ			; Matrix4::Inverse
PUBLIC	??4Matrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator=
PUBLIC	??YMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator+=
PUBLIC	??ZMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator-=
PUBLIC	??XMatrix4@@QAEAAV0@M@Z				; Matrix4::operator*=
PUBLIC	??_0Matrix4@@QAEAAV0@M@Z			; Matrix4::operator/=
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	??0Matrix3@@QAE@XZ				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABV0@@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@_N@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@00@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@MMMMMMMMM@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@M@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@MM@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVQuaternion@@@Z		; Matrix3::Matrix3
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@00@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXMMMMMMMMM@Z			; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@M@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@MM@Z		; Matrix3::Set
PUBLIC	??AMatrix3@@QAEAAVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	??AMatrix3@@QBEABVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	?Transpose@Matrix3@@QBE?AV1@XZ			; Matrix3::Transpose
PUBLIC	?Determinant@Matrix3@@QBEMXZ			; Matrix3::Determinant
PUBLIC	??4Matrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator=
PUBLIC	??YMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator+=
PUBLIC	??ZMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator-=
PUBLIC	??XMatrix3@@QAEAAV0@M@Z				; Matrix3::operator*=
PUBLIC	??_0Matrix3@@QAEAAV0@M@Z			; Matrix3::operator/=
PUBLIC	?Make_Identity@Matrix3@@QAEXXZ			; Matrix3::Make_Identity
PUBLIC	?Rotate_X@Matrix3@@QAEXM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_X@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_Y@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Y@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Z
PUBLIC	?Rotate_Z@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Z
PUBLIC	?Get_X_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_X_Rotation
PUBLIC	?Get_Y_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Y_Rotation
PUBLIC	?Get_Z_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Z_Rotation
PUBLIC	?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Z_Vector
PUBLIC	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z		; operator*
PUBLIC	?Add@Matrix3@@SAXABV1@0PAV1@@Z			; Matrix3::Add
PUBLIC	?Subtract@Matrix3@@SAXABV1@0PAV1@@Z		; Matrix3::Subtract
PUBLIC	?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Rotate_Vector
PUBLIC	?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Transpose_Rotate_Vector
PUBLIC	?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ; Matrix3::Rotate_AABox_Extent
PUBLIC	?Inverse@Matrix3@@QBE?AV1@XZ			; Matrix3::Inverse
PUBLIC	??0OBBoxClass@@QAE@ABVVector3@@0@Z		; OBBoxClass::OBBoxClass
PUBLIC	??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z	; OBBoxClass::OBBoxClass
PUBLIC	??4SysTimeClass@@QAEAAV0@ABV0@@Z		; SysTimeClass::operator=
PUBLIC	??0PostLoadableClass@@QAE@XZ			; PostLoadableClass::PostLoadableClass
PUBLIC	??1PostLoadableClass@@UAE@XZ			; PostLoadableClass::~PostLoadableClass
PUBLIC	?On_Post_Load@PostLoadableClass@@UAEXXZ		; PostLoadableClass::On_Post_Load
PUBLIC	?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ; PostLoadableClass::Is_Post_Load_Registered
PUBLIC	?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ; PostLoadableClass::Set_Post_Load_Registered
PUBLIC	??0PostLoadableClass@@QAE@ABV0@@Z		; PostLoadableClass::PostLoadableClass
PUBLIC	??4PostLoadableClass@@QAEAAV0@ABV0@@Z		; PostLoadableClass::operator=
PUBLIC	??_GPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`scalar deleting destructor'
PUBLIC	??_EPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`vector deleting destructor'
PUBLIC	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ	; ReferencerClass::operator->
PUBLIC	??0ReferencerClass@@QAE@XZ			; ReferencerClass::ReferencerClass
PUBLIC	??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z ; ReferencerClass::ReferencerClass
PUBLIC	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr
PUBLIC	?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z ; ReferencerClass::Set_Ptr
PUBLIC	??0ReferencerClass@@QAE@ABV0@@Z			; ReferencerClass::ReferencerClass
PUBLIC	??_GReferencerClass@@UAEPAXI@Z			; ReferencerClass::`scalar deleting destructor'
PUBLIC	??_EReferencerClass@@UAEPAXI@Z			; ReferencerClass::`vector deleting destructor'
PUBLIC	?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ; ReferenceableClass<ScriptableGameObj>::Get_Data
PUBLIC	?Get_ID@BaseGameObj@@QBEHXZ			; BaseGameObj::Get_ID
PUBLIC	??0LineSegClass@@QAE@XZ				; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABVVector3@@0@Z		; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABVVector3@@0M@Z		; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z	; LineSegClass::LineSegClass
PUBLIC	?Set@LineSegClass@@QAEXABVVector3@@0@Z		; LineSegClass::Set
PUBLIC	?Set@LineSegClass@@QAEXABVVector3@@0M@Z		; LineSegClass::Set
PUBLIC	?Get_P0@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_P0
PUBLIC	?Get_P1@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_P1
PUBLIC	?Get_DP@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_DP
PUBLIC	?Get_Dir@LineSegClass@@QBEABVVector3@@XZ	; LineSegClass::Get_Dir
PUBLIC	?Get_Length@LineSegClass@@QBEMXZ		; LineSegClass::Get_Length
PUBLIC	?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z ; LineSegClass::Compute_Point
PUBLIC	?recalculate@LineSegClass@@IAEXXZ		; LineSegClass::recalculate
PUBLIC	??0LineSegClass@@QAE@ABV0@@Z			; LineSegClass::LineSegClass
PUBLIC	??4LineSegClass@@QAEAAV0@ABV0@@Z		; LineSegClass::operator=
PUBLIC	?Get_Position@PhysClass@@QBEXPAVVector3@@@Z	; PhysClass::Get_Position
PUBLIC	?Set_Collision_Group@PhysClass@@QAEXW4Collision_Group_Type@@@Z ; PhysClass::Set_Collision_Group
PUBLIC	?Get_Collision_Group@PhysClass@@QBE?AW4Collision_Group_Type@@XZ ; PhysClass::Get_Collision_Group
PUBLIC	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
PUBLIC	?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ ; PhysicalGameObj::Get_Position
PUBLIC	?Clear_Animation@PhysicalGameObj@@QAEXXZ	; PhysicalGameObj::Clear_Animation
PUBLIC	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
PUBLIC	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
PUBLIC	??0GenericSLNode@@IAE@PAX@Z			; GenericSLNode::GenericSLNode
PUBLIC	??0JFW_Key_Hook_Base@@QAE@XZ			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
PUBLIC	??0JFW_Key_Hook_Base@@QAE@ABV0@@Z		; JFW_Key_Hook_Base::JFW_Key_Hook_Base
PUBLIC	??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z		; JFW_Key_Hook_Base::operator=
PUBLIC	??_GJFW_Key_Hook_Base@@UAEPAXI@Z		; JFW_Key_Hook_Base::`scalar deleting destructor'
PUBLIC	??_EJFW_Key_Hook_Base@@UAEPAXI@Z		; JFW_Key_Hook_Base::`vector deleting destructor'
PUBLIC	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
PUBLIC	?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
PUBLIC	?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
PUBLIC	?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
PUBLIC	?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head
PUBLIC	?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail
PUBLIC	?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove
PUBLIC	?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All
PUBLIC	?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before
PUBLIC	?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After
PUBLIC	?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty
PUBLIC	?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count
PUBLIC	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=
PUBLIC	??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor'
PUBLIC	??0MultiKeyHookScriptImpClass@@QAE@XZ		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
PUBLIC	??1MultiKeyHookScriptImpClass@@UAE@XZ		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass
PUBLIC	??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z	; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
PUBLIC	??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z	; MultiKeyHookScriptImpClass::operator=
PUBLIC	??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z	; MultiKeyHookScriptImpClass::`scalar deleting destructor'
PUBLIC	??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z	; MultiKeyHookScriptImpClass::`vector deleting destructor'
PUBLIC	??0JFW_Object_Created_Hook_Base@@QAE@XZ		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
PUBLIC	??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
PUBLIC	??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z ; JFW_Object_Created_Hook_Base::operator=
PUBLIC	??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z	; JFW_Object_Created_Hook_Base::`scalar deleting destructor'
PUBLIC	??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z	; JFW_Object_Created_Hook_Base::`vector deleting destructor'
PUBLIC	??0dp88_customAI@@QAE@XZ			; dp88_customAI::dp88_customAI
PUBLIC	??1dp88_customAI@@UAE@XZ			; dp88_customAI::~dp88_customAI
PUBLIC	??_Gdp88_customAI@@UAEPAXI@Z			; dp88_customAI::`scalar deleting destructor'
PUBLIC	??0dp88_AI_Turret@@QAE@XZ			; dp88_AI_Turret::dp88_AI_Turret
PUBLIC	??1dp88_AI_Turret@@UAE@XZ			; dp88_AI_Turret::~dp88_AI_Turret
PUBLIC	??_Gdp88_AI_Turret@@UAEPAXI@Z			; dp88_AI_Turret::`scalar deleting destructor'
PUBLIC	??0dp88_AI_ChargedTurret@@QAE@XZ		; dp88_AI_ChargedTurret::dp88_AI_ChargedTurret
PUBLIC	??1dp88_AI_ChargedTurret@@UAE@XZ		; dp88_AI_ChargedTurret::~dp88_AI_ChargedTurret
PUBLIC	??_Gdp88_AI_ChargedTurret@@UAEPAXI@Z		; dp88_AI_ChargedTurret::`scalar deleting destructor'
PUBLIC	??0dp88_Camo_Controller@@QAE@XZ			; dp88_Camo_Controller::dp88_Camo_Controller
PUBLIC	??1dp88_Camo_Controller@@UAE@XZ			; dp88_Camo_Controller::~dp88_Camo_Controller
PUBLIC	??_Gdp88_Camo_Controller@@UAEPAXI@Z		; dp88_Camo_Controller::`scalar deleting destructor'
PUBLIC	?Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z ; dp88_AR_GameController::Created
PUBLIC	?Custom@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_AR_GameController::Custom
PUBLIC	?Timer_Expired@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AR_GameController::Timer_Expired
PUBLIC	?Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z ; dp88_AR_GameController::Destroyed
PUBLIC	??0dp88_AR_GameController@@QAE@XZ		; dp88_AR_GameController::dp88_AR_GameController
PUBLIC	??1dp88_AR_GameController@@UAE@XZ		; dp88_AR_GameController::~dp88_AR_GameController
PUBLIC	??_Gdp88_AR_GameController@@UAEPAXI@Z		; dp88_AR_GameController::`scalar deleting destructor'
PUBLIC	?Custom@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_AR_Vehicle::Custom
PUBLIC	?Created@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_Vehicle::Created
PUBLIC	?Timer_Expired@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@H@Z ; dp88_AR_Vehicle::Timer_Expired
PUBLIC	?Killed@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@0@Z ; dp88_AR_Vehicle::Killed
PUBLIC	?Damaged@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_Vehicle::Damaged
PUBLIC	?Animation_Complete@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@PBD@Z ; dp88_AR_Vehicle::Animation_Complete
PUBLIC	?Created@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z ; dp88_AR_Deployable_Infantry::Created
PUBLIC	?Killed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@0@Z ; dp88_AR_Deployable_Infantry::Killed
PUBLIC	?Destroyed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z ; dp88_AR_Deployable_Infantry::Destroyed
PUBLIC	?KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ	; dp88_AR_Deployable_Infantry::KeyHook
PUBLIC	?Custom@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_AR_Deployable_Infantry::Custom
PUBLIC	?Timer_Expired@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AR_Deployable_Infantry::Timer_Expired
PUBLIC	?GetArmourType@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetArmourType
PUBLIC	?GetWeaponPowerup@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetWeaponPowerup
PUBLIC	?Deploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z ; dp88_AR_Deployable_Infantry::Deploy
PUBLIC	?Undeploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z ; dp88_AR_Deployable_Infantry::Undeploy
PUBLIC	??0dp88_AR_Deployable_Infantry@@QAE@XZ		; dp88_AR_Deployable_Infantry::dp88_AR_Deployable_Infantry
PUBLIC	??1dp88_AR_Deployable_Infantry@@UAE@XZ		; dp88_AR_Deployable_Infantry::~dp88_AR_Deployable_Infantry
PUBLIC	??_Gdp88_AR_Deployable_Infantry@@UAEPAXI@Z	; dp88_AR_Deployable_Infantry::`scalar deleting destructor'
PUBLIC	?Created@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_CLEG::Created
PUBLIC	?Damaged@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_CLEG::Damaged
PUBLIC	?Killed@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0@Z ; dp88_AR_CLEG::Killed
PUBLIC	?Timer_Expired@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@H@Z ; dp88_AR_CLEG::Timer_Expired
PUBLIC	??0dp88_AR_CLEG@@QAE@XZ				; dp88_AR_CLEG::dp88_AR_CLEG
PUBLIC	??1dp88_AR_CLEG@@UAE@XZ				; dp88_AR_CLEG::~dp88_AR_CLEG
PUBLIC	??_Gdp88_AR_CLEG@@UAEPAXI@Z			; dp88_AR_CLEG::`scalar deleting destructor'
PUBLIC	?Created@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_CLEG_target::Created
PUBLIC	?Damaged@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_CLEG_target::Damaged
PUBLIC	?Killed@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0@Z ; dp88_AR_CLEG_target::Killed
PUBLIC	?Timer_Expired@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@H@Z ; dp88_AR_CLEG_target::Timer_Expired
PUBLIC	??0dp88_AR_CLEG_target@@QAE@XZ			; dp88_AR_CLEG_target::dp88_AR_CLEG_target
PUBLIC	??1dp88_AR_CLEG_target@@UAE@XZ			; dp88_AR_CLEG_target::~dp88_AR_CLEG_target
PUBLIC	??_Gdp88_AR_CLEG_target@@UAEPAXI@Z		; dp88_AR_CLEG_target::`scalar deleting destructor'
PUBLIC	?Created@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::Created
PUBLIC	?Custom@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_Ore_Miner::Custom
PUBLIC	?Action_Complete@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; dp88_Ore_Miner::Action_Complete
PUBLIC	?KeyHook@dp88_Ore_Miner@@UAEXXZ			; dp88_Ore_Miner::KeyHook
PUBLIC	?DriveToOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::DriveToOreField
PUBLIC	?EnteredOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Miner::EnteredOreField
PUBLIC	?ExitedOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Miner::ExitedOreField
PUBLIC	?ReturnToRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::ReturnToRefinery
PUBLIC	?DockAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::DockAtRefinery
PUBLIC	?DockedAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::DockedAtRefinery
PUBLIC	?UndockedFromRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::UndockedFromRefinery
PUBLIC	?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z ; dp88_Ore_Miner::UpdateAnimation
PUBLIC	??0dp88_Ore_Miner@@QAE@XZ			; dp88_Ore_Miner::dp88_Ore_Miner
PUBLIC	??1dp88_Ore_Miner@@UAE@XZ			; dp88_Ore_Miner::~dp88_Ore_Miner
PUBLIC	??_Gdp88_Ore_Miner@@UAEPAXI@Z			; dp88_Ore_Miner::`scalar deleting destructor'
PUBLIC	?Created@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@@Z ; dp88_AR_Chrono_Miner::Created
PUBLIC	?Damaged@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_Chrono_Miner::Damaged
PUBLIC	?Custom@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_AR_Chrono_Miner::Custom
PUBLIC	?KeyHook@dp88_AR_Chrono_Miner@@UAEXXZ		; dp88_AR_Chrono_Miner::KeyHook
PUBLIC	?ReturnToRefinery@dp88_AR_Chrono_Miner@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_Chrono_Miner::ReturnToRefinery
PUBLIC	?Start_Chronoshift@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@@Z ; dp88_AR_Chrono_Miner::Start_Chronoshift
PUBLIC	?Do_Chronoshift@dp88_AR_Chrono_Miner@@AAEXPAVScriptableGameObj@@H@Z ; dp88_AR_Chrono_Miner::Do_Chronoshift
PUBLIC	?CanChronoshiftToLocation@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@AAVVector3@@@Z ; dp88_AR_Chrono_Miner::CanChronoshiftToLocation
PUBLIC	??0dp88_AR_Chrono_Miner@@QAE@XZ			; dp88_AR_Chrono_Miner::dp88_AR_Chrono_Miner
PUBLIC	??1dp88_AR_Chrono_Miner@@UAE@XZ			; dp88_AR_Chrono_Miner::~dp88_AR_Chrono_Miner
PUBLIC	??_Gdp88_AR_Chrono_Miner@@UAEPAXI@Z		; dp88_AR_Chrono_Miner::`scalar deleting destructor'
PUBLIC	?Created@dp88_AR_Chrono_Miner_Chronozone@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_Chrono_Miner_Chronozone::Created
PUBLIC	??0dp88_AR_Chrono_Miner_Chronozone@@QAE@XZ	; dp88_AR_Chrono_Miner_Chronozone::dp88_AR_Chrono_Miner_Chronozone
PUBLIC	??1dp88_AR_Chrono_Miner_Chronozone@@UAE@XZ	; dp88_AR_Chrono_Miner_Chronozone::~dp88_AR_Chrono_Miner_Chronozone
PUBLIC	??_Gdp88_AR_Chrono_Miner_Chronozone@@UAEPAXI@Z	; dp88_AR_Chrono_Miner_Chronozone::`scalar deleting destructor'
PUBLIC	??0dp88_Ore_Field@@QAE@XZ			; dp88_Ore_Field::dp88_Ore_Field
PUBLIC	?Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Field::Created
PUBLIC	?Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Field::Detach
PUBLIC	?Entered@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Field::Entered
PUBLIC	?Exited@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Field::Exited
PUBLIC	?AddOre@dp88_Ore_Field@@QAEXI@Z			; dp88_Ore_Field::AddOre
PUBLIC	?RemoveOre@dp88_Ore_Field@@QAEII@Z		; dp88_Ore_Field::RemoveOre
PUBLIC	?NumOreUnits@dp88_Ore_Field@@QAEIXZ		; dp88_Ore_Field::NumOreUnits
PUBLIC	?GetOreValue@dp88_Ore_Field@@QAEIXZ		; dp88_Ore_Field::GetOreValue
PUBLIC	?IsInfinite@dp88_Ore_Field@@QAE_NXZ		; dp88_Ore_Field::IsInfinite
PUBLIC	?IsSuitableForAI@dp88_Ore_Field@@QAE_NXZ	; dp88_Ore_Field::IsSuitableForAI
PUBLIC	?UpdateAnimationFrame@dp88_Ore_Field@@IAEXXZ	; dp88_Ore_Field::UpdateAnimationFrame
PUBLIC	?UpdateAnimationFrame@dp88_Ore_Field@@IAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Field::UpdateAnimationFrame
PUBLIC	??0dp88_Ore_Field_Observer@dp88_Ore_Field@@QAE@PAV1@@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::dp88_Ore_Field_Observer
PUBLIC	?Entered@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Entered
PUBLIC	?Exited@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Exited
PUBLIC	?Attach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Attach
PUBLIC	?Detach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Detach
PUBLIC	?Animation_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@PBD@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Animation_Complete
PUBLIC	?Created@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Created
PUBLIC	?Destroyed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Destroyed
PUBLIC	?Killed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Killed
PUBLIC	?Damaged@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Damaged
PUBLIC	?Custom@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Custom
PUBLIC	?Sound_Heard@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Sound_Heard
PUBLIC	?Enemy_Seen@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Enemy_Seen
PUBLIC	?Action_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Action_Complete
PUBLIC	?Timer_Expired@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@H@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Timer_Expired
PUBLIC	?Poked@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::Poked
PUBLIC	?Get_Name@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEPBDXZ ; dp88_Ore_Field::dp88_Ore_Field_Observer::Get_Name
PUBLIC	??1dp88_Ore_Field_Observer@dp88_Ore_Field@@UAE@XZ ; dp88_Ore_Field::dp88_Ore_Field_Observer::~dp88_Ore_Field_Observer
PUBLIC	??_Gdp88_Ore_Field_Observer@dp88_Ore_Field@@UAEPAXI@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::`scalar deleting destructor'
PUBLIC	??1dp88_Ore_Field@@UAE@XZ			; dp88_Ore_Field::~dp88_Ore_Field
PUBLIC	??_Gdp88_Ore_Field@@UAEPAXI@Z			; dp88_Ore_Field::`scalar deleting destructor'
PUBLIC	?Created@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Extractor::Created
PUBLIC	?Timer_Expired@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@H@Z ; dp88_Ore_Extractor::Timer_Expired
PUBLIC	?Animation_Complete@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@PBD@Z ; dp88_Ore_Extractor::Animation_Complete
PUBLIC	??0dp88_Ore_Extractor@@QAE@XZ			; dp88_Ore_Extractor::dp88_Ore_Extractor
PUBLIC	??1dp88_Ore_Extractor@@UAE@XZ			; dp88_Ore_Extractor::~dp88_Ore_Extractor
PUBLIC	??_Gdp88_Ore_Extractor@@UAEPAXI@Z		; dp88_Ore_Extractor::`scalar deleting destructor'
PUBLIC	?Entered@dp88_Ore_Dump_Zone@@UAEXPAVScriptableGameObj@@0@Z ; dp88_Ore_Dump_Zone::Entered
PUBLIC	??0dp88_Ore_Dump_Zone@@QAE@XZ			; dp88_Ore_Dump_Zone::dp88_Ore_Dump_Zone
PUBLIC	??1dp88_Ore_Dump_Zone@@UAE@XZ			; dp88_Ore_Dump_Zone::~dp88_Ore_Dump_Zone
PUBLIC	??_Gdp88_Ore_Dump_Zone@@UAEPAXI@Z		; dp88_Ore_Dump_Zone::`scalar deleting destructor'
PUBLIC	?Entered@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z ; dp88_Aircraft_LandingZone::Entered
PUBLIC	?Exited@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z ; dp88_Aircraft_LandingZone::Exited
PUBLIC	??0dp88_Aircraft_LandingZone@@QAE@XZ		; dp88_Aircraft_LandingZone::dp88_Aircraft_LandingZone
PUBLIC	??1dp88_Aircraft_LandingZone@@UAE@XZ		; dp88_Aircraft_LandingZone::~dp88_Aircraft_LandingZone
PUBLIC	??_Gdp88_Aircraft_LandingZone@@UAEPAXI@Z	; dp88_Aircraft_LandingZone::`scalar deleting destructor'
PUBLIC	?Created@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@@Z ; dp88_Aircraft_LandingZone_Aircraft::Created
PUBLIC	?Killed@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@0@Z ; dp88_Aircraft_LandingZone_Aircraft::Killed
PUBLIC	?Custom@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_Aircraft_LandingZone_Aircraft::Custom
PUBLIC	??0dp88_Aircraft_LandingZone_Aircraft@@QAE@XZ	; dp88_Aircraft_LandingZone_Aircraft::dp88_Aircraft_LandingZone_Aircraft
PUBLIC	??1dp88_Aircraft_LandingZone_Aircraft@@UAE@XZ	; dp88_Aircraft_LandingZone_Aircraft::~dp88_Aircraft_LandingZone_Aircraft
PUBLIC	??_Gdp88_Aircraft_LandingZone_Aircraft@@UAEPAXI@Z ; dp88_Aircraft_LandingZone_Aircraft::`scalar deleting destructor'
PUBLIC	?Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::Created
PUBLIC	?Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::Detach
PUBLIC	?Poked@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@0@Z ; dp88_RemoteControlConsole::Poked
PUBLIC	?Custom@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_RemoteControlConsole::Custom
PUBLIC	?Timer_Expired@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@H@Z ; dp88_RemoteControlConsole::Timer_Expired
PUBLIC	?SetEnabled@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@_N@Z ; dp88_RemoteControlConsole::SetEnabled
PUBLIC	?HandleDriverEnter@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z ; dp88_RemoteControlConsole::HandleDriverEnter
PUBLIC	?HandleDriverExit@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z ; dp88_RemoteControlConsole::HandleDriverExit
PUBLIC	?CreateDummy@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@VVector3@@M@Z ; dp88_RemoteControlConsole::CreateDummy
PUBLIC	?DestroyDummy@dp88_RemoteControlConsole@@AAEXXZ	; dp88_RemoteControlConsole::DestroyDummy
PUBLIC	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation
PUBLIC	??0dp88_RemoteControlConsole@@QAE@XZ		; dp88_RemoteControlConsole::dp88_RemoteControlConsole
PUBLIC	??1dp88_RemoteControlConsole@@UAE@XZ		; dp88_RemoteControlConsole::~dp88_RemoteControlConsole
PUBLIC	??_Gdp88_RemoteControlConsole@@UAEPAXI@Z	; dp88_RemoteControlConsole::`scalar deleting destructor'
PUBLIC	?Created@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlVehicle::Created
PUBLIC	?Custom@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_RemoteControlVehicle::Custom
PUBLIC	?Killed@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@0@Z ; dp88_RemoteControlVehicle::Killed
PUBLIC	??0dp88_RemoteControlVehicle@@QAE@XZ		; dp88_RemoteControlVehicle::dp88_RemoteControlVehicle
PUBLIC	??1dp88_RemoteControlVehicle@@UAE@XZ		; dp88_RemoteControlVehicle::~dp88_RemoteControlVehicle
PUBLIC	??_Gdp88_RemoteControlVehicle@@UAEPAXI@Z	; dp88_RemoteControlVehicle::`scalar deleting destructor'
PUBLIC	?Created@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_DemoTruck::Created
PUBLIC	?Custom@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_AR_DemoTruck::Custom
PUBLIC	?Killed@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0@Z ; dp88_AR_DemoTruck::Killed
PUBLIC	?Damaged@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_DemoTruck::Damaged
PUBLIC	?Detonate@dp88_AR_DemoTruck@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_DemoTruck::Detonate
PUBLIC	??0dp88_AR_DemoTruck@@QAE@XZ			; dp88_AR_DemoTruck::dp88_AR_DemoTruck
PUBLIC	??1dp88_AR_DemoTruck@@UAE@XZ			; dp88_AR_DemoTruck::~dp88_AR_DemoTruck
PUBLIC	??_Gdp88_AR_DemoTruck@@UAEPAXI@Z		; dp88_AR_DemoTruck::`scalar deleting destructor'
PUBLIC	?Created@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_paradrop_Console::Created
PUBLIC	?Poked@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@0@Z ; dp88_AR_paradrop_Console::Poked
PUBLIC	??0dp88_AR_paradrop_Console@@QAE@XZ		; dp88_AR_paradrop_Console::dp88_AR_paradrop_Console
PUBLIC	??1dp88_AR_paradrop_Console@@UAE@XZ		; dp88_AR_paradrop_Console::~dp88_AR_paradrop_Console
PUBLIC	??_Gdp88_AR_paradrop_Console@@UAEPAXI@Z		; dp88_AR_paradrop_Console::`scalar deleting destructor'
PUBLIC	??0dp88_AR_Paradrop@@QAE@XZ			; dp88_AR_Paradrop::dp88_AR_Paradrop
PUBLIC	?Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z ; dp88_AR_Paradrop::Created
PUBLIC	?Damaged@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_Paradrop::Damaged
PUBLIC	?Killed@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0@Z ; dp88_AR_Paradrop::Killed
PUBLIC	?Timer_Expired@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@H@Z ; dp88_AR_Paradrop::Timer_Expired
PUBLIC	?Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z ; dp88_AR_Paradrop::Detach
PUBLIC	?Landed@dp88_AR_Paradrop@@IAEXPAVScriptableGameObj@@@Z ; dp88_AR_Paradrop::Landed
PUBLIC	??1dp88_AR_Paradrop@@UAE@XZ			; dp88_AR_Paradrop::~dp88_AR_Paradrop
PUBLIC	??_Gdp88_AR_Paradrop@@UAEPAXI@Z			; dp88_AR_Paradrop::`scalar deleting destructor'
PUBLIC	?registerTower@dp88_AR_Prism_Tower@@CAXHPAV1@@Z	; dp88_AR_Prism_Tower::registerTower
PUBLIC	?deregisterTower@dp88_AR_Prism_Tower@@CAXH@Z	; dp88_AR_Prism_Tower::deregisterTower
PUBLIC	?clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z	; dp88_AR_Prism_Tower::clearTowerMap
PUBLIC	?calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ	; dp88_AR_Prism_Tower::calculateTowerMap
PUBLIC	?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z ; dp88_AR_Prism_Tower::calculateTowerMapPathSearch
PUBLIC	?CanAssistTower@dp88_AR_Prism_Tower@@CA_NPAVScriptableGameObj@@0H@Z ; dp88_AR_Prism_Tower::CanAssistTower
PUBLIC	?Created@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::Created
PUBLIC	?Damaged@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_Prism_Tower::Damaged
PUBLIC	?Killed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0@Z ; dp88_AR_Prism_Tower::Killed
PUBLIC	?Destroyed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::Destroyed
PUBLIC	?Custom@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_AR_Prism_Tower::Custom
PUBLIC	?Timer_Expired@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@H@Z ; dp88_AR_Prism_Tower::Timer_Expired
PUBLIC	?getPriority@dp88_AR_Prism_Tower@@EAEMPAVScriptableGameObj@@0@Z ; dp88_AR_Prism_Tower::getPriority
PUBLIC	?checkTeam@dp88_AR_Prism_Tower@@EAE_NPAVScriptableGameObj@@0@Z ; dp88_AR_Prism_Tower::checkTeam
PUBLIC	?attackTarget@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0_N@Z ; dp88_AR_Prism_Tower::attackTarget
PUBLIC	?attackLocation@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@VVector3@@_N@Z ; dp88_AR_Prism_Tower::attackLocation
PUBLIC	?stopAttacking@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::stopAttacking
PUBLIC	?StartAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_Prism_Tower::StartAssisting
PUBLIC	?StopAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::StopAssisting
PUBLIC	?GetAssistAimPoint@dp88_AR_Prism_Tower@@CA?AVVector3@@PAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::GetAssistAimPoint
PUBLIC	?SendAssistanceRequests@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::SendAssistanceRequests
PUBLIC	?SendEndAssistanceNotifications@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::SendEndAssistanceNotifications
PUBLIC	??0dp88_AR_Prism_Tower@@QAE@XZ			; dp88_AR_Prism_Tower::dp88_AR_Prism_Tower
PUBLIC	??1dp88_AR_Prism_Tower@@UAE@XZ			; dp88_AR_Prism_Tower::~dp88_AR_Prism_Tower
PUBLIC	??_Gdp88_AR_Prism_Tower@@UAEPAXI@Z		; dp88_AR_Prism_Tower::`scalar deleting destructor'
PUBLIC	?Created@dp88_linkHealth@@EAEXPAVScriptableGameObj@@@Z ; dp88_linkHealth::Created
PUBLIC	?Timer_Expired@dp88_linkHealth@@EAEXPAVScriptableGameObj@@H@Z ; dp88_linkHealth::Timer_Expired
PUBLIC	?Killed@dp88_linkHealth@@EAEXPAVScriptableGameObj@@0@Z ; dp88_linkHealth::Killed
PUBLIC	?equaliseHealth@dp88_linkHealth@@AAEXPAVScriptableGameObj@@@Z ; dp88_linkHealth::equaliseHealth
PUBLIC	??0dp88_linkHealth@@QAE@XZ			; dp88_linkHealth::dp88_linkHealth
PUBLIC	??1dp88_linkHealth@@UAE@XZ			; dp88_linkHealth::~dp88_linkHealth
PUBLIC	??_Gdp88_linkHealth@@UAEPAXI@Z			; dp88_linkHealth::`scalar deleting destructor'
PUBLIC	?Get_State@HumanStateClass@@QAE?AW4HumanStateType@1@XZ ; HumanStateClass::Get_State
PUBLIC	??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z		; ArmorWarheadManager::operator=
PUBLIC	?Is_On_Ladder@SoldierGameObj@@QAE_NXZ		; SoldierGameObj::Is_On_Ladder
PUBLIC	?Is_In_Vehicle@SoldierGameObj@@QAE_NXZ		; SoldierGameObj::Is_In_Vehicle
PUBLIC	?Get_State@SoldierGameObj@@QAE?AW4HumanStateType@HumanStateClass@@XZ ; SoldierGameObj::Get_State
PUBLIC	?Set_Can_Drive_Vehicles@SoldierGameObj@@QAEX_N@Z ; SoldierGameObj::Set_Can_Drive_Vehicles
PUBLIC	?Can_Drive_Vehicles@SoldierGameObj@@QAE_NXZ	; SoldierGameObj::Can_Drive_Vehicles
PUBLIC	??0OffenseObjectClass@@QAE@MIPAVArmedGameObj@@@Z ; OffenseObjectClass::OffenseObjectClass
PUBLIC	??1OffenseObjectClass@@QAE@XZ			; OffenseObjectClass::~OffenseObjectClass
PUBLIC	?Set_Owner@OffenseObjectClass@@QAEXPAVArmedGameObj@@@Z ; OffenseObjectClass::Set_Owner
PUBLIC	??0?$SList@VScriptableGameObj@@@@QAE@XZ		; SList<ScriptableGameObj>::SList<ScriptableGameObj>
PUBLIC	??1?$SList@VScriptableGameObj@@@@UAE@XZ		; SList<ScriptableGameObj>::~SList<ScriptableGameObj>
PUBLIC	?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z ; SList<ScriptableGameObj>::Add_Head
PUBLIC	?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z ; SList<ScriptableGameObj>::Add_Head
PUBLIC	?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z ; SList<ScriptableGameObj>::Add_Tail
PUBLIC	?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z ; SList<ScriptableGameObj>::Add_Tail
PUBLIC	?Remove_Head@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ ; SList<ScriptableGameObj>::Remove_Head
PUBLIC	?Remove_Tail@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ ; SList<ScriptableGameObj>::Remove_Tail
PUBLIC	?Remove@?$SList@VScriptableGameObj@@@@UAE_NPBVScriptableGameObj@@@Z ; SList<ScriptableGameObj>::Remove
PUBLIC	?Remove_All@?$SList@VScriptableGameObj@@@@UAEXXZ ; SList<ScriptableGameObj>::Remove_All
PUBLIC	?Insert_Before@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z ; SList<ScriptableGameObj>::Insert_Before
PUBLIC	?Insert_After@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z ; SList<ScriptableGameObj>::Insert_After
PUBLIC	?Is_Empty@?$SList@VScriptableGameObj@@@@UBE_NXZ	; SList<ScriptableGameObj>::Is_Empty
PUBLIC	?Get_Count@?$SList@VScriptableGameObj@@@@UBEIXZ	; SList<ScriptableGameObj>::Get_Count
PUBLIC	?Head@?$SList@VScriptableGameObj@@@@QBEPAV?$SLNode@VScriptableGameObj@@@@XZ ; SList<ScriptableGameObj>::Head
PUBLIC	??_G?$SList@VScriptableGameObj@@@@UAEPAXI@Z	; SList<ScriptableGameObj>::`scalar deleting destructor'
PUBLIC	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next
PUBLIC	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ	; SLNode<ScriptableGameObj>::Next
PUBLIC	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
PUBLIC	??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z ; SLNode<ScriptableGameObj>::SLNode<ScriptableGameObj>
PUBLIC	??0?$ScriptRegistrant@Vdp88_Ore_Miner@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ore_Miner>::ScriptRegistrant<dp88_Ore_Miner>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Ore_Miner>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAE@XZ	; ScriptRegistrant<dp88_Ore_Miner>::~ScriptRegistrant<dp88_Ore_Miner>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Ore_Miner>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Chrono_Miner>::ScriptRegistrant<dp88_AR_Chrono_Miner>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_Chrono_Miner>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_Chrono_Miner>::~ScriptRegistrant<dp88_AR_Chrono_Miner>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::~ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Ore_Field@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ore_Field>::ScriptRegistrant<dp88_Ore_Field>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Ore_Field>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAE@XZ	; ScriptRegistrant<dp88_Ore_Field>::~ScriptRegistrant<dp88_Ore_Field>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Ore_Field>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ore_Extractor>::ScriptRegistrant<dp88_Ore_Extractor>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Ore_Extractor>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAE@XZ ; ScriptRegistrant<dp88_Ore_Extractor>::~ScriptRegistrant<dp88_Ore_Extractor>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Ore_Extractor>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ore_Dump_Zone>::ScriptRegistrant<dp88_Ore_Dump_Zone>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Ore_Dump_Zone>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAE@XZ ; ScriptRegistrant<dp88_Ore_Dump_Zone>::~ScriptRegistrant<dp88_Ore_Dump_Zone>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Paradrop>::ScriptRegistrant<dp88_AR_Paradrop>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_Paradrop>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_Paradrop>::~ScriptRegistrant<dp88_AR_Paradrop>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_Paradrop>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_GameController@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_GameController>::ScriptRegistrant<dp88_AR_GameController>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_GameController>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_GameController>::~ScriptRegistrant<dp88_AR_GameController>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_GameController>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::ScriptRegistrant<dp88_AR_Deployable_Infantry>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::~ScriptRegistrant<dp88_AR_Deployable_Infantry>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_CLEG@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_CLEG>::ScriptRegistrant<dp88_AR_CLEG>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_CLEG>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAE@XZ	; ScriptRegistrant<dp88_AR_CLEG>::~ScriptRegistrant<dp88_AR_CLEG>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_CLEG>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_CLEG_target>::ScriptRegistrant<dp88_AR_CLEG_target>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_CLEG_target>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_CLEG_target>::~ScriptRegistrant<dp88_AR_CLEG_target>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_CLEG_target>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Aircraft_LandingZone>::ScriptRegistrant<dp88_Aircraft_LandingZone>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Aircraft_LandingZone>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAE@XZ ; ScriptRegistrant<dp88_Aircraft_LandingZone>::~ScriptRegistrant<dp88_Aircraft_LandingZone>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAE@XZ ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::~ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_RemoteControlConsole>::ScriptRegistrant<dp88_RemoteControlConsole>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_RemoteControlConsole>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAE@XZ ; ScriptRegistrant<dp88_RemoteControlConsole>::~ScriptRegistrant<dp88_RemoteControlConsole>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_RemoteControlConsole>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_RemoteControlVehicle>::ScriptRegistrant<dp88_RemoteControlVehicle>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_RemoteControlVehicle>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAE@XZ ; ScriptRegistrant<dp88_RemoteControlVehicle>::~ScriptRegistrant<dp88_RemoteControlVehicle>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_RemoteControlVehicle>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_DemoTruck>::ScriptRegistrant<dp88_AR_DemoTruck>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_DemoTruck>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_DemoTruck>::~ScriptRegistrant<dp88_AR_DemoTruck>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_DemoTruck>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_paradrop_Console>::ScriptRegistrant<dp88_AR_paradrop_Console>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_paradrop_Console>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_paradrop_Console>::~ScriptRegistrant<dp88_AR_paradrop_Console>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_paradrop_Console>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Prism_Tower>::ScriptRegistrant<dp88_AR_Prism_Tower>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AR_Prism_Tower>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAE@XZ ; ScriptRegistrant<dp88_AR_Prism_Tower>::~ScriptRegistrant<dp88_AR_Prism_Tower>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AR_Prism_Tower>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_linkHealth@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_linkHealth>::ScriptRegistrant<dp88_linkHealth>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_linkHealth>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_linkHealth@@@@UAE@XZ ; ScriptRegistrant<dp88_linkHealth>::~ScriptRegistrant<dp88_linkHealth>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_linkHealth>::`scalar deleting destructor'
PUBLIC	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next
PUBLIC	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
PUBLIC	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
PUBLIC	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
PUBLIC	??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
PUBLIC	??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
PUBLIC	?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory
PUBLIC	?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
PUBLIC	?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern
PUBLIC	??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
PUBLIC	??_7GameObjObserverClass@@6B@			; GameObjObserverClass::`vftable'
PUBLIC	??_7ScriptClass@@6B@				; ScriptClass::`vftable'
PUBLIC	??_7ScriptImpClass@@6B@				; ScriptImpClass::`vftable'
PUBLIC	??_7ScriptFactory@@6B@				; ScriptFactory::`vftable'
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_7INIClass@@6B@				; INIClass::`vftable'
PUBLIC	??_7PostLoadableClass@@6B@			; PostLoadableClass::`vftable'
PUBLIC	??_7ReferencerClass@@6B@			; ReferencerClass::`vftable'
PUBLIC	??_7JFW_Key_Hook_Base@@6B@			; JFW_Key_Hook_Base::`vftable'
PUBLIC	??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vftable'
PUBLIC	??_7MultiKeyHookScriptImpClass@@6B@		; MultiKeyHookScriptImpClass::`vftable'
PUBLIC	??_7JFW_Object_Created_Hook_Base@@6B@		; JFW_Object_Created_Hook_Base::`vftable'
PUBLIC	??_7dp88_customAI@@6B@				; dp88_customAI::`vftable'
PUBLIC	??_7dp88_AI_Turret@@6B@				; dp88_AI_Turret::`vftable'
PUBLIC	??_7dp88_AI_ChargedTurret@@6B@			; dp88_AI_ChargedTurret::`vftable'
PUBLIC	??_7dp88_Camo_Controller@@6B@			; dp88_Camo_Controller::`vftable'
PUBLIC	??_7dp88_AR_GameController@@6B@			; dp88_AR_GameController::`vftable'
PUBLIC	??_7dp88_AR_Deployable_Infantry@@6B@		; dp88_AR_Deployable_Infantry::`vftable'
PUBLIC	??_7dp88_AR_CLEG@@6B@				; dp88_AR_CLEG::`vftable'
PUBLIC	??_7dp88_AR_CLEG_target@@6B@			; dp88_AR_CLEG_target::`vftable'
PUBLIC	??_7dp88_Ore_Miner@@6B@				; dp88_Ore_Miner::`vftable'
PUBLIC	??_7dp88_AR_Chrono_Miner@@6B@			; dp88_AR_Chrono_Miner::`vftable'
PUBLIC	??_7dp88_AR_Chrono_Miner_Chronozone@@6B@	; dp88_AR_Chrono_Miner_Chronozone::`vftable'
PUBLIC	??_7dp88_Ore_Field_Observer@dp88_Ore_Field@@6B@	; dp88_Ore_Field::dp88_Ore_Field_Observer::`vftable'
PUBLIC	??_7dp88_Ore_Field@@6B@				; dp88_Ore_Field::`vftable'
PUBLIC	??_C@_0BI@PEPLNIMK@dp88_Ore_Field_Observer?$AA@	; `string'
PUBLIC	??_7dp88_Ore_Extractor@@6B@			; dp88_Ore_Extractor::`vftable'
PUBLIC	??_7dp88_Ore_Dump_Zone@@6B@			; dp88_Ore_Dump_Zone::`vftable'
PUBLIC	??_7dp88_Aircraft_LandingZone@@6B@		; dp88_Aircraft_LandingZone::`vftable'
PUBLIC	??_7dp88_Aircraft_LandingZone_Aircraft@@6B@	; dp88_Aircraft_LandingZone_Aircraft::`vftable'
PUBLIC	??_7dp88_RemoteControlConsole@@6B@		; dp88_RemoteControlConsole::`vftable'
PUBLIC	??_7dp88_RemoteControlVehicle@@6B@		; dp88_RemoteControlVehicle::`vftable'
PUBLIC	??_7dp88_AR_DemoTruck@@6B@			; dp88_AR_DemoTruck::`vftable'
PUBLIC	??_7dp88_AR_paradrop_Console@@6B@		; dp88_AR_paradrop_Console::`vftable'
PUBLIC	??_7dp88_AR_Paradrop@@6B@			; dp88_AR_Paradrop::`vftable'
PUBLIC	??_7dp88_AR_Prism_Tower@@6B@			; dp88_AR_Prism_Tower::`vftable'
PUBLIC	??_7dp88_linkHealth@@6B@			; dp88_linkHealth::`vftable'
PUBLIC	??_C@_0BF@IFBCFJNJ@enableCountry_Russia?$AA@	; `string'
PUBLIC	??_C@_0BD@GCMPBKDK@enableCountry_Cuba?$AA@	; `string'
PUBLIC	??_C@_0BD@PNCMJGCK@enableCountry_Iraq?$AA@	; `string'
PUBLIC	??_C@_0BE@PMPLHGNA@enableCountry_Libya?$AA@	; `string'
PUBLIC	??_C@_0FE@FPMFHLI@msg?5GAME?5CONTROLLER?5ERROR?3?5All?5S@ ; `string'
PUBLIC	??_C@_0BG@MOACNKPG@enableCountry_America?$AA@	; `string'
PUBLIC	??_C@_0BF@NKCONKMO@enableCountry_France?$AA@	; `string'
PUBLIC	??_C@_0BG@IIJGIMID@enableCountry_Germany?$AA@	; `string'
PUBLIC	??_C@_0BL@OILODKNF@enableCountry_GreatBritain?$AA@ ; `string'
PUBLIC	??_C@_0BE@CLJLLOED@enableCountry_Korea?$AA@	; `string'
PUBLIC	??_C@_0FF@GFFDLGON@msg?5GAME?5CONTROLLER?5ERROR?3?5All?5A@ ; `string'
PUBLIC	??_C@_0BM@FDMLICBA@The?5Soviets?5are?5playing?5as?5?$AA@ ; `string'
PUBLIC	??_C@_06HBCOHLEJ@Russia?$AA@			; `string'
PUBLIC	??_C@_0FD@OPLPFHP@As?5the?5Russians?5you?5can?5use?5the?5@ ; `string'
PUBLIC	??_C@_04ENNKDPHN@Cuba?$AA@			; `string'
PUBLIC	??_C@_0FA@BCOJLIFF@As?5the?5Cubans?5you?5can?5use?5the?5in@ ; `string'
PUBLIC	??_C@_04NCDJLDGN@Iraq?$AA@			; `string'
PUBLIC	??_C@_0EN@JLNHEEEP@As?5the?5Iraqis?5you?5can?5use?5the?5de@ ; `string'
PUBLIC	??_C@_05BEGMLHMG@Libya?$AA@			; `string'
PUBLIC	??_C@_0FB@JHHKADDP@As?5the?5Libiyans?5you?5can?5use?5the?5@ ; `string'
PUBLIC	??_C@_0CA@DLJOOLKB@?5and?5the?5Allies?5are?5playing?5as?5?$AA@ ; `string'
PUBLIC	??_C@_07DOPJHFJA@America?$AA@			; `string'
PUBLIC	??_C@_0EG@DOHGOOCN@As?5the?5Americans?5you?5can?5use?5par@ ; `string'
PUBLIC	??_C@_06COBCPIFO@France?$AA@			; `string'
PUBLIC	??_C@_0EG@JKHHPBBE@As?5the?5French?5your?5base?5is?5well?5@ ; `string'
PUBLIC	??_C@_07HIGNCDOF@Germany?$AA@			; `string'
PUBLIC	??_C@_0EP@PMBHCLFE@As?5the?5Germans?5you?5can?5use?5the?5T@ ; `string'
PUBLIC	??_C@_0O@IAGENNII@Great?5Britain?$AA@		; `string'
PUBLIC	??_C@_0EM@BBPIKCAE@As?5the?5British?5you?5can?5use?5snipe@ ; `string'
PUBLIC	??_C@_05MDAMHPFF@Korea?$AA@			; `string'
PUBLIC	??_C@_0EG@NCFIPGCK@As?5the?5Koreans?5you?5can?5use?5Black@ ; `string'
PUBLIC	??_C@_0BM@FHCMLMAC@MirageTank_disguisePreset_1?$AA@ ; `string'
PUBLIC	??_C@_04MLLLIHIP@null?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_AR_GameController::Created'::`2'::__LINE__Var
PUBLIC	??_C@_0CA@LFBBGCB@dp88_AR_GameController?3?3Created?$AA@ ; `string'
PUBLIC	??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0BM@HMABOPMB@MirageTank_disguisePreset_2?$AA@ ; `string'
PUBLIC	??_C@_0BM@GFBKNOIA@MirageTank_disguisePreset_3?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_AR_GameController::Destroyed'::`2'::__LINE__Var
PUBLIC	??_C@_0CC@KMBDMHHB@dp88_AR_GameController?3?3Destroye@ ; `string'
PUBLIC	??_C@_0BF@MFBGNGEP@deployedObjectPreset?$AA@	; `string'
PUBLIC	??_C@_0FD@BPGCOALM@dp88_AR_Deployable_Infantry?5?3?3?5S@ ; `string'
PUBLIC	??_C@_0BG@HFLMKGI@deployedWeaponPowerup?$AA@	; `string'
PUBLIC	??_C@_0BO@BDGMBCNO@deployedWeaponPowerup_veteran?$AA@ ; `string'
PUBLIC	??_C@_0BM@ICHLJJHH@deployedWeaponPowerup_elite?$AA@ ; `string'
PUBLIC	??_C@_0BF@IMENNLBL@cannotDeployStringId?$AA@	; `string'
PUBLIC	??_C@_0O@CEFAEEGH@deployKeyhook?$AA@		; `string'
PUBLIC	??_C@_0N@LEPMODEF@undeployTime?$AA@		; `string'
PUBLIC	??_C@_0FK@HJDEIDNN@You?5cannot?5undeploy?5yet?0?5you?5mus@ ; `string'
PUBLIC	??_C@_0L@LGLHGEKK@deployTime?$AA@		; `string'
PUBLIC	??_C@_0FO@HENGAEHL@You?5cannot?5deploy?5yet?0?5you?5must?5@ ; `string'
PUBLIC	??_C@_0BM@LFDCBMI@deployedObjectSpaceRequired?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ@4JA ; `dp88_AR_Deployable_Infantry::KeyHook'::`2'::__LINE__Var
PUBLIC	??_C@_0CF@KIKFMCII@dp88_AR_Deployable_Infantry?3?3Key@ ; `string'
PUBLIC	??_C@_0FI@PHLEFKAJ@Deployment?5abuse?5detected?0?5disab@ ; `string'
PUBLIC	??_C@_0BJ@CJLCKMAB@deployedArmourType_elite?$AA@ ; `string'
PUBLIC	??_C@_0BL@DMLKKDEE@deployedArmourType_veteran?$AA@ ; `string'
PUBLIC	??_C@_0BD@BKAKAJAD@deployedArmourType?$AA@	; `string'
PUBLIC	??_C@_0M@DMJJAGLI@deploySound?$AA@		; `string'
PUBLIC	??_C@_0O@MCOLCNG@undeploySound?$AA@		; `string'
PUBLIC	??_C@_0N@HCFBBNOH@CLEG_DropObj?$AA@		; `string'
PUBLIC	??_C@_0P@JHFLIHBN@Phasing?5in?4?4?4?4?$AA@	; `string'
PUBLIC	??_C@_0DD@CBCDBAII@You?5have?5been?5phased?5out?5too?5lon@ ; `string'
PUBLIC	??_C@_05PGGAFPFO@Death?$AA@			; `string'
PUBLIC	??_C@_0DN@ENAIFJPJ@WARNING?3?5You?5have?5?$CFd?5seconds?5to?5@ ; `string'
PUBLIC	??_C@_0L@GDPBJPKC@resistance?$AA@		; `string'
PUBLIC	??_C@_0BB@PNBLNPBJ@clegEffectPreset?$AA@	; `string'
PUBLIC	??_C@_06MJHGNIM@Use_AI?$AA@			; `string'
PUBLIC	??_C@_0O@ODNOLLNH@Resource_Name?$AA@		; `string'
PUBLIC	??_C@_0N@CKLMCBCD@Ore_Capacity?$AA@		; `string'
PUBLIC	??_C@_0BA@CEKFDMBL@Ore_Mining_Time?$AA@		; `string'
PUBLIC	??_C@_0O@BMHFNGDK@Ore_Dump_Time?$AA@		; `string'
PUBLIC	??_C@_0P@DPBHIJDH@Idle_Animation?$AA@		; `string'
PUBLIC	??_C@_0BB@KCLAFENJ@Mining_Animation?$AA@	; `string'
PUBLIC	??_C@_0P@HBIJGFEI@Dump_Animation?$AA@		; `string'
PUBLIC	??_C@_0N@IFNCGEJN@Mining_Sound?$AA@		; `string'
PUBLIC	??_C@_0L@LICJIGHN@Dump_Sound?$AA@		; `string'
PUBLIC	??_C@_0O@OKGKHHLH@AI_Init_Delay?$AA@		; `string'
PUBLIC	??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@		; `string'
PUBLIC	??_C@_0HH@HMPCAJCL@The?5?$CFs?5field?5is?5depleted?0?5find?5a@ ; `string'
PUBLIC	??_C@_0EK@EMBEDAFA@Fully?5loaded?5with?5?$CFs?0?5dock?5at?5th@ ; `string'
PUBLIC	??_C@_0CB@KJFHADCP@Unloading?5?$CFs?0?5please?5stand?5by?4?4?4@ ; `string'
PUBLIC	??_C@_0GA@KPOINCBL@?$CFs?5unloaded?5successfully?0?5you?5ha@ ; `string'
PUBLIC	??_7?$SList@VScriptableGameObj@@@@6B@		; SList<ScriptableGameObj>::`vftable'
PUBLIC	??_C@_0BB@BAIFIPKL@Collecting?5?$CFs?4?4?4?$AA@	; `string'
PUBLIC	??_C@_0BD@EDKPCDPK@dp88_Ore_Dump_Zone?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Ore_Miner@@@@6B@	; ScriptRegistrant<dp88_Ore_Miner>::`vftable'
PUBLIC	?dp88_Ore_Miner_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Miner@@@@A ; dp88_Ore_Miner_Registrant
PUBLIC	??_C@_0OL@IPNIEICP@Use_AI?$DN1?3int?0Ore_Capacity?$DN10?3int@ ; `string'
PUBLIC	??_C@_0P@PNGCCGHJ@dp88_Ore_Miner?$AA@		; `string'
PUBLIC	??_C@_0CE@GDNCMBMM@emergencyChronoshiftHealthThresh@ ; `string'
PUBLIC	??_C@_0BD@JCAONOKO@chronoshiftKeyhook?$AA@	; `string'
PUBLIC	??_C@_0DL@EGDHOOGB@Unable?5to?5chronoshift?0?5all?5targe@ ; `string'
PUBLIC	??_C@_0FI@PGKDDPLE@The?5AI?5Chronominer?5was?5unable?5to@ ; `string'
PUBLIC	??_C@_0CA@CFCDHMOJ@dp88_AR_Chrono_Miner_Chronozone?$AA@ ; `string'
PUBLIC	??_C@_0BB@DCMPPMMN@chronoshift_time?$AA@	; `string'
PUBLIC	??_C@_0BO@FIFKCKDL@chronoshift_out_effect_preset?$AA@ ; `string'
PUBLIC	??_C@_0BM@ODINNJLO@chronoshift_out_effect_time?$AA@ ; `string'
PUBLIC	??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@	; `string'
PUBLIC	??_C@_0BN@IMGAEHDB@chronoshift_in_effect_preset?$AA@ ; `string'
PUBLIC	??_C@_0BL@HDHHGK@chronoshift_in_effect_time?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@6B@ ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`vftable'
PUBLIC	?dp88_AR_Chrono_Miner_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@A ; dp88_AR_Chrono_Miner_Registrant
PUBLIC	??_C@_0BMK@OGKPIJCA@Use_AI?$DN1?3int?0chronoshift_time?$DN2?4@ ; `string'
PUBLIC	??_C@_0BF@EMHNCJLM@dp88_AR_Chrono_Miner?$AA@	; `string'
PUBLIC	??_C@_0BH@CAOJFLI@dp88_ar_gameController?$AA@	; `string'
PUBLIC	??_C@_0GM@LGOKCEAC@dp88_AR_Chrono_Miner_Chronozone?5@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@6B@ ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`vftable'
PUBLIC	?dp88_AR_Chrono_Miner_Chronozone_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@A ; dp88_AR_Chrono_Miner_Chronozone_Registrant
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_09KFMCNPID@Ore_Value?$AA@			; `string'
PUBLIC	??_C@_09ILICBFCO@Ore_Units?$AA@			; `string'
PUBLIC	??_C@_0P@KOIPOOMD@Animation_Name?$AA@		; `string'
PUBLIC	??_C@_0BF@KOGHJIGL@Animation_Full_Frame?$AA@	; `string'
PUBLIC	??_C@_0BG@LKFEMCPO@Animation_Empty_Frame?$AA@	; `string'
PUBLIC	??_C@_09KINPNLGC@Zone_Size?$AA@			; `string'
PUBLIC	??_C@_0BB@HIBECNLG@Zone_Anim_Step_X?$AA@	; `string'
PUBLIC	??_C@_0BB@GBAPBMPH@Zone_Anim_Step_Y?$AA@	; `string'
PUBLIC	??_C@_09FNOAKNMM@AI_Ignore?$AA@			; `string'
PUBLIC	??_C@_0BA@HNDGJMLL@Script_Zone_All?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_Ore_Field::Created'::`2'::__LINE__Var
PUBLIC	??_C@_0BI@HLHLGIBG@dp88_Ore_Field?3?3Created?$AA@ ; `string'
PUBLIC	??_C@_0FJ@HJNJMOHF@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Unabl@ ; `string'
PUBLIC	?__LINE__Var@?1??Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_Ore_Field::Detach'::`2'::__LINE__Var
PUBLIC	??_C@_0BH@KKKPGEKM@dp88_Ore_Field?3?3Detach?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Ore_Field@@@@6B@	; ScriptRegistrant<dp88_Ore_Field>::`vftable'
PUBLIC	?dp88_Ore_Field_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Field@@@@A ; dp88_Ore_Field_Registrant
PUBLIC	??_C@_0MG@HFFBHDGO@Ore_Value?3int?0Ore_Capacity?3int?0O@ ; `string'
PUBLIC	??_C@_0BE@PJJOFNID@Extraction_Interval?$AA@	; `string'
PUBLIC	??_C@_0BF@HAMAJFGE@Extraction_Animation?$AA@	; `string'
PUBLIC	??_C@_0FF@PEMPDPCP@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Unabl@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@6B@ ; ScriptRegistrant<dp88_Ore_Extractor>::`vftable'
PUBLIC	?dp88_Ore_Extractor_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@A ; dp88_Ore_Extractor_Registrant
PUBLIC	??_C@_0EC@GELKPOJM@Ore_Units?3int?0Extraction_Interva@ ; `string'
PUBLIC	??_C@_0BD@LIFBBGKP@dp88_Ore_Extractor?$AA@	; `string'
PUBLIC	??_C@_04GBPANCCF@Team?$AA@			; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@6B@ ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`vftable'
PUBLIC	?dp88_Ore_Dump_Zone_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@A ; dp88_Ore_Dump_Zone_Registrant
PUBLIC	??_C@_0L@CEMIOEF@Team?$DN0?3int?$AA@		; `string'
PUBLIC	??_C@_0BF@EPONAFJP@require_landing_zone?$AA@	; `string'
PUBLIC	??_C@_0BI@JFPBEDHA@1?40?0547859?05000?40?0Death?$AA@ ; `string'
PUBLIC	??_C@_0BJ@IOLCGKKE@JFW_Timer_Destroy_Object?$AA@ ; `string'
PUBLIC	??_C@_0BI@DCNEIFIO@landing_anim_last_frame?$AA@	; `string'
PUBLIC	??_C@_0BJ@KLMKDHMN@landing_anim_first_frame?$AA@ ; `string'
PUBLIC	??_C@_0BC@KIICMLNP@landing_anim_name?$AA@	; `string'
PUBLIC	??_C@_0L@PPADADDF@chargeTime?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_RemoteControlConsole::Created'::`2'::__LINE__Var
PUBLIC	??_C@_0CD@JPHIBELA@dp88_RemoteControlConsole?3?3Creat@ ; `string'
PUBLIC	?__LINE__Var@?1??Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_RemoteControlConsole::Detach'::`2'::__LINE__Var
PUBLIC	??_C@_0CC@KHBMMJCA@dp88_RemoteControlConsole?3?3Detac@ ; `string'
PUBLIC	??_C@_04KADBPNCB@team?$AA@			; `string'
PUBLIC	??_C@_0BC@ELJPHEC@accessDeniedSound?$AA@	; `string'
PUBLIC	??_C@_0BE@GFAECMKC@consoleOfflineSound?$AA@	; `string'
PUBLIC	??_C@_0BF@MJKOCOEE@consoleChargingSound?$AA@	; `string'
PUBLIC	??_C@_04JJOOIINB@cost?$AA@			; `string'
PUBLIC	??_C@_0BH@GAEICIMG@insufficientFundsSound?$AA@	; `string'
PUBLIC	??_C@_0O@HKFGMBNK@vehiclePreset?$AA@		; `string'
PUBLIC	??_C@_0BA@MCGHCFJE@remoteControlID?$AA@		; `string'
PUBLIC	??_C@_0BL@JNCLKLPE@connectionEstablishedSound?$AA@ ; `string'
PUBLIC	??_C@_0BD@CEGEOPPJ@Invisible_Object_2?$AA@	; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@		; `string'
PUBLIC	??_C@_0BD@MJLACLOO@S_A_HUMAN?4H_A_A0A0?$AA@	; `string'
PUBLIC	??_C@_0BD@DNBLCDKG@animFrameDisabled2?$AA@	; `string'
PUBLIC	??_C@_0BD@BGDGHAGF@animFrameDisabled1?$AA@	; `string'
PUBLIC	??_C@_0O@MKCKBGNB@animationName?$AA@		; `string'
PUBLIC	??_C@_0BB@BEJFHLAJ@animFrameActive2?$AA@	; `string'
PUBLIC	??_C@_0BB@DPLICIMK@animFrameActive1?$AA@	; `string'
PUBLIC	??_C@_0P@CIHEFPAE@animFrameIdle2?$AA@		; `string'
PUBLIC	??_C@_0P@DFJAMMH@animFrameIdle1?$AA@		; `string'
PUBLIC	??_C@_0BD@ONHOLLAC@animFrameCharging2?$AA@	; `string'
PUBLIC	??_C@_0BD@MGFDOIMB@animFrameCharging1?$AA@	; `string'
PUBLIC	??_C@_0BE@NGBPOKKD@animFrameAvailable2?$AA@	; `string'
PUBLIC	??_C@_0BE@PNDCLJGA@animFrameAvailable1?$AA@	; `string'
PUBLIC	??_C@_0BK@EJNIJBHG@dp88_RemoteControlConsole?$AA@ ; `string'
PUBLIC	??_C@_0BA@PJMIDBDG@explosionPreset?$AA@		; `string'
PUBLIC	??_C@_0BE@OCAKJEGI@buildingDamageRange?$AA@	; `string'
PUBLIC	??_C@_0BG@KMGGAABJ@buildingDamageWarhead?$AA@	; `string'
PUBLIC	??_C@_0BH@FCFHJPEP@buildingDamageStrength?$AA@	; `string'
PUBLIC	??_C@_0BA@FNJCPKOH@cinematicPreset?$AA@		; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_0P@JMLOMBPP@RA_DriverDeath?$AA@		; `string'
PUBLIC	??_C@_0BM@PNAKAEKE@Invalid?5Security?5Clearance?6?$AA@ ; `string'
PUBLIC	??_C@_0CM@BGFNOIH@This?5can?5only?5be?5used?5once?5every@ ; `string'
PUBLIC	??_C@_0BD@DKEHFKKN@Allied_GI_Paradrop?$AA@	; `string'
PUBLIC	??_C@_0GL@LLBGFEEK@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ ; `string'
PUBLIC	??_C@_05IKBANCEK@Earth?$AA@			; `string'
PUBLIC	??_C@_0BA@CGGKAAON@Parachute_Model?$AA@		; `string'
PUBLIC	??_C@_0BB@NHJNEILC@Invisible_Object?$AA@	; `string'
PUBLIC	??_C@_0P@HIPDHOEE@Parachute_Bone?$AA@		; `string'
PUBLIC	??_C@_09ONEINPNJ@Animation?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_AR_Paradrop::Created'::`2'::__LINE__Var
PUBLIC	??_C@_0BK@IDPMNJAO@dp88_AR_Paradrop?3?3Created?$AA@ ; `string'
PUBLIC	??_C@_0BB@FIHKMGIB@Animation_Looped?$AA@	; `string'
PUBLIC	??_C@_0BF@LOKKEGED@Animation_Last_Frame?$AA@	; `string'
PUBLIC	??_C@_0BG@IGICMLKJ@Animation_First_Frame?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_AR_Paradrop::Detach'::`2'::__LINE__Var
PUBLIC	??_C@_0BJ@EPLABFHB@dp88_AR_Paradrop?3?3Detach?$AA@ ; `string'
PUBLIC	??_C@_0BA@NHMIOHB@Infantry_Preset?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@6B@	; ScriptRegistrant<dp88_AR_Paradrop>::`vftable'
PUBLIC	?dp88_AR_Paradrop_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@A ; dp88_AR_Paradrop_Registrant
PUBLIC	??_C@_0JN@MOLJIONA@Infantry_Preset?3string?0Parachute@ ; `string'
PUBLIC	??_C@_0BB@IILHOKGK@dp88_AR_Paradrop?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z@4JA@6d493206 ; `dp88_AR_Prism_Tower::clearTowerMap'::`2'::__LINE__Var
PUBLIC	??_C@_0CD@NMNGKBLJ@dp88_AR_Prism_Tower?3?3clearTowerM@ ; `string'
PUBLIC	?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206 ; `dp88_AR_Prism_Tower::calculateTowerMap'::`2'::__LINE__Var
PUBLIC	??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@ ; `string'
PUBLIC	??_C@_0BE@EGGNPPMF@dp88_AR_Prism_Tower?$AA@	; `string'
PUBLIC	??_C@_08HEKCLJAN@muzzlea0?$AA@			; `string'
PUBLIC	??_C@_0P@IPEMGAI@parentObjectId?$AA@		; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_GameController@@@@6B@ ; ScriptRegistrant<dp88_AR_GameController>::`vftable'
PUBLIC	?dp88_AR_GameController_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_GameController@@@@A ; dp88_AR_GameController_Registrant
PUBLIC	??_C@_0BIE@EKBGJJ@enableCountry_Russia?$DN1?3int?0enabl@ ; `string'
PUBLIC	??_C@_0BH@PJCOCBOM@dp88_AR_GameController?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@6B@ ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`vftable'
PUBLIC	?dp88_AR_Deployable_Infantry_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@A ; dp88_AR_Deployable_Infantry_Registrant
PUBLIC	??_C@_0BOM@OOMAMMGA@deployedObjectPreset?$DNnull?3string@ ; `string'
PUBLIC	??_C@_0BM@EGCLMKMH@dp88_AR_Deployable_Infantry?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_CLEG@@@@6B@	; ScriptRegistrant<dp88_AR_CLEG>::`vftable'
PUBLIC	?dp88_AR_CLEG_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_CLEG@@@@A ; dp88_AR_CLEG_Registrant
PUBLIC	??_C@_0N@PFLALNEJ@dp88_AR_CLEG?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@6B@ ; ScriptRegistrant<dp88_AR_CLEG_target>::`vftable'
PUBLIC	?dp88_AR_CLEG_target_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@A ; dp88_AR_CLEG_target_Registrant
PUBLIC	??_C@_0CP@HPCMPHIH@resistance?$DN20?3int?0clegEffectPres@ ; `string'
PUBLIC	??_C@_0BE@KBJNNOAB@dp88_AR_CLEG_target?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@6B@ ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`vftable'
PUBLIC	?dp88_Aircraft_LandingZone_Registrant@@3V?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@A ; dp88_Aircraft_LandingZone_Registrant
PUBLIC	??_C@_0BK@IKKCDGAC@dp88_Aircraft_LandingZone?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@6B@ ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`vftable'
PUBLIC	?dp88_Aircraft_LandingZone_Aircraft_Registrant@@3V?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@A ; dp88_Aircraft_LandingZone_Aircraft_Registrant
PUBLIC	??_C@_0IN@KBAICBIG@landing_anim_name?$DNmodelfile?4anim@ ; `string'
PUBLIC	??_C@_0CD@LOAPGCML@dp88_Aircraft_LandingZone_Aircra@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@6B@ ; ScriptRegistrant<dp88_RemoteControlConsole>::`vftable'
PUBLIC	?dp88_RemoteControlConsole_Registrant@@3V?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@A ; dp88_RemoteControlConsole_Registrant
PUBLIC	??_C@_0BOB@BNNBNENM@remoteControlID?3int?0vehiclePrese@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@6B@ ; ScriptRegistrant<dp88_RemoteControlVehicle>::`vftable'
PUBLIC	?dp88_RemoteControlVehicle_Registrant@@3V?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@A ; dp88_RemoteControlVehicle_Registrant
PUBLIC	??_C@_0BE@PHNHOOHC@remoteControlID?3int?$AA@	; `string'
PUBLIC	??_C@_0BK@GPCMCCPB@dp88_RemoteControlVehicle?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@6B@ ; ScriptRegistrant<dp88_AR_DemoTruck>::`vftable'
PUBLIC	?dp88_AR_DemoTruck_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@A ; dp88_AR_DemoTruck_Registrant
PUBLIC	??_C@_0KO@KLKMOMBJ@explosionPreset?$DNExplosion_NukeBe@ ; `string'
PUBLIC	??_C@_0BC@IIFFAIPL@dp88_AR_DemoTruck?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@6B@ ; ScriptRegistrant<dp88_AR_paradrop_Console>::`vftable'
PUBLIC	?dp88_AR_paradrop_Console_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@A ; dp88_AR_paradrop_Console_Registrant
PUBLIC	??_C@_0L@EPIMNCDH@team?$DN1?3int?$AA@		; `string'
PUBLIC	??_C@_0BJ@IPIIGGCN@dp88_AR_paradrop_Console?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@6B@ ; ScriptRegistrant<dp88_AR_Prism_Tower>::`vftable'
PUBLIC	?dp88_AR_Prism_Tower_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@A ; dp88_AR_Prism_Tower_Registrant
PUBLIC	??_C@_0CGM@JMPONBPF@Priority_Infantry?$DN1?40?3float?0Spla@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_linkHealth@@@@6B@	; ScriptRegistrant<dp88_linkHealth>::`vftable'
PUBLIC	?dp88_linkHealth_Registrant@@3V?$ScriptRegistrant@Vdp88_linkHealth@@@@A ; dp88_linkHealth_Registrant
PUBLIC	??_C@_0BF@OEHKMOBH@parentObjectId?$DN0?3int?$AA@ ; `string'
PUBLIC	??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0CJ@PFIOMDDA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CJ@BJDGPFFE@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CM@EIOKCJAJ@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CH@MNGAMMMC@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CL@NFLHONKO@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CO@GGELGEEA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CN@EGDEANLB@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ ; `string'
PUBLIC	??_C@_0CP@DPGAIJBN@ScriptRegistrant?$DMclass?5dp88_Ore_@ ; `string'
PUBLIC	??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0DF@MJPKOALH@ScriptRegistrant?$DMclass?5dp88_AR_C@ ; `string'
PUBLIC	??_C@_0EA@IKNPFBAM@ScriptRegistrant?$DMclass?5dp88_AR_C@ ; `string'
PUBLIC	??_C@_0CP@NNLHKEFJ@ScriptRegistrant?$DMclass?5dp88_Ore_@ ; `string'
PUBLIC	??_C@_0DD@GNEKOMJM@ScriptRegistrant?$DMclass?5dp88_Ore_@ ; `string'
PUBLIC	??_C@_0DD@NDLGBNOC@ScriptRegistrant?$DMclass?5dp88_Ore_@ ; `string'
PUBLIC	??_C@_0DB@FOECPKBO@ScriptRegistrant?$DMclass?5dp88_AR_P@ ; `string'
PUBLIC	??_C@_0DH@POLJMOBC@ScriptRegistrant?$DMclass?5dp88_AR_G@ ; `string'
PUBLIC	??_C@_0DM@NNLNBAKJ@ScriptRegistrant?$DMclass?5dp88_AR_D@ ; `string'
PUBLIC	??_C@_0CN@HLMLBKJE@ScriptRegistrant?$DMclass?5dp88_AR_C@ ; `string'
PUBLIC	??_C@_0DE@OLPOCJLH@ScriptRegistrant?$DMclass?5dp88_AR_C@ ; `string'
PUBLIC	??_C@_0DK@POENDPMO@ScriptRegistrant?$DMclass?5dp88_Airc@ ; `string'
PUBLIC	??_C@_0ED@OKCGICOM@ScriptRegistrant?$DMclass?5dp88_Airc@ ; `string'
PUBLIC	??_C@_0DK@CMOOKAPN@ScriptRegistrant?$DMclass?5dp88_Remo@ ; `string'
PUBLIC	??_C@_0DK@DHGHOENO@ScriptRegistrant?$DMclass?5dp88_Remo@ ; `string'
PUBLIC	??_C@_0DC@PHAIAMPP@ScriptRegistrant?$DMclass?5dp88_AR_D@ ; `string'
PUBLIC	??_C@_0DJ@DKFLFAOF@ScriptRegistrant?$DMclass?5dp88_AR_p@ ; `string'
PUBLIC	??_C@_0DE@FEDGAINI@ScriptRegistrant?$DMclass?5dp88_AR_P@ ; `string'
PUBLIC	??_C@_0DA@HEHFNHDG@ScriptRegistrant?$DMclass?5dp88_link@ ; `string'
PUBLIC	?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
PUBLIC	??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51 ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`local static guard'
PUBLIC	??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@ ; `string'
PUBLIC	??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ ; `string'
PUBLIC	??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@ ; `string'
PUBLIC	??_R4ScriptFactory@@6B@				; ScriptFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptFactory@@@8			; ScriptFactory `RTTI Type Descriptor'
PUBLIC	??_R3ScriptFactory@@8				; ScriptFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptFactory@@8				; ScriptFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptFactory@@8			; ScriptFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ScriptClass@@6B@				; ScriptClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptClass@@@8				; ScriptClass `RTTI Type Descriptor'
PUBLIC	??_R3ScriptClass@@8				; ScriptClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptClass@@8				; ScriptClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptClass@@8			; ScriptClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@GameObjObserverClass@@8		; GameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGameObjObserverClass@@@8		; GameObjObserverClass `RTTI Type Descriptor'
PUBLIC	??_R3GameObjObserverClass@@8			; GameObjObserverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GameObjObserverClass@@8			; GameObjObserverClass::`RTTI Base Class Array'
PUBLIC	??_R4GameObjObserverClass@@6B@			; GameObjObserverClass::`RTTI Complete Object Locator'
PUBLIC	??_R4ScriptImpClass@@6B@			; ScriptImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptImpClass@@@8			; ScriptImpClass `RTTI Type Descriptor'
PUBLIC	??_R3ScriptImpClass@@8				; ScriptImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptImpClass@@8				; ScriptImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptImpClass@@8			; ScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INIClass@@6B@				; INIClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVINIClass@@@8				; INIClass `RTTI Type Descriptor'
PUBLIC	??_R3INIClass@@8				; INIClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INIClass@@8				; INIClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INIClass@@8			; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@PostLoadableClass@@8		; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPostLoadableClass@@@8			; PostLoadableClass `RTTI Type Descriptor'
PUBLIC	??_R3PostLoadableClass@@8			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PostLoadableClass@@8			; PostLoadableClass::`RTTI Base Class Array'
PUBLIC	??_R4PostLoadableClass@@6B@			; PostLoadableClass::`RTTI Complete Object Locator'
PUBLIC	??_R4ReferencerClass@@6B@			; ReferencerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReferencerClass@@@8			; ReferencerClass `RTTI Type Descriptor'
PUBLIC	??_R3ReferencerClass@@8				; ReferencerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ReferencerClass@@8				; ReferencerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ReferencerClass@@8		; ReferencerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$SList@VScriptableGameObj@@@@6B@		; SList<ScriptableGameObj>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$SList@VScriptableGameObj@@@@@8	; SList<ScriptableGameObj> `RTTI Type Descriptor'
PUBLIC	??_R3?$SList@VScriptableGameObj@@@@8		; SList<ScriptableGameObj>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SList@VScriptableGameObj@@@@8		; SList<ScriptableGameObj>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SList@VScriptableGameObj@@@@8	; SList<ScriptableGameObj>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4JFW_Key_Hook_Base@@6B@			; JFW_Key_Hook_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVJFW_Key_Hook_Base@@@8			; JFW_Key_Hook_Base `RTTI Type Descriptor'
PUBLIC	??_R3JFW_Key_Hook_Base@@8			; JFW_Key_Hook_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2JFW_Key_Hook_Base@@8			; JFW_Key_Hook_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@JFW_Key_Hook_Base@@8		; JFW_Key_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MultiKeyHookScriptImpClass@@6B@		; MultiKeyHookScriptImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMultiKeyHookScriptImpClass@@@8		; MultiKeyHookScriptImpClass `RTTI Type Descriptor'
PUBLIC	??_R3MultiKeyHookScriptImpClass@@8		; MultiKeyHookScriptImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MultiKeyHookScriptImpClass@@8		; MultiKeyHookScriptImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8	; MultiKeyHookScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct> `RTTI Type Descriptor'
PUBLIC	??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4JFW_Object_Created_Hook_Base@@6B@		; JFW_Object_Created_Hook_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVJFW_Object_Created_Hook_Base@@@8	; JFW_Object_Created_Hook_Base `RTTI Type Descriptor'
PUBLIC	??_R3JFW_Object_Created_Hook_Base@@8		; JFW_Object_Created_Hook_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2JFW_Object_Created_Hook_Base@@8		; JFW_Object_Created_Hook_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8	; JFW_Object_Created_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_customAI@@6B@				; dp88_customAI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_customAI@@@8			; dp88_customAI `RTTI Type Descriptor'
PUBLIC	??_R3dp88_customAI@@8				; dp88_customAI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_customAI@@8				; dp88_customAI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_customAI@@8			; dp88_customAI::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_Turret@@6B@			; dp88_AI_Turret::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_Turret@@@8			; dp88_AI_Turret `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_Turret@@8				; dp88_AI_Turret::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_Turret@@8				; dp88_AI_Turret::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_Turret@@8			; dp88_AI_Turret::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_ChargedTurret@@6B@			; dp88_AI_ChargedTurret::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_ChargedTurret@@@8		; dp88_AI_ChargedTurret `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_ChargedTurret@@8			; dp88_AI_ChargedTurret::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_ChargedTurret@@8			; dp88_AI_ChargedTurret::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8		; dp88_AI_ChargedTurret::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Camo_Controller@@6B@			; dp88_Camo_Controller::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Camo_Controller@@@8		; dp88_Camo_Controller `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Camo_Controller@@8			; dp88_Camo_Controller::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Camo_Controller@@8			; dp88_Camo_Controller::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Camo_Controller@@8		; dp88_Camo_Controller::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_GameController@@6B@		; dp88_AR_GameController::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_GameController@@@8		; dp88_AR_GameController `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_GameController@@8			; dp88_AR_GameController::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_GameController@@8			; dp88_AR_GameController::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_GameController@@8		; dp88_AR_GameController::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_Deployable_Infantry@@6B@		; dp88_AR_Deployable_Infantry::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_Deployable_Infantry@@@8		; dp88_AR_Deployable_Infantry `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_Deployable_Infantry@@8		; dp88_AR_Deployable_Infantry::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_Deployable_Infantry@@8		; dp88_AR_Deployable_Infantry::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_Deployable_Infantry@@8	; dp88_AR_Deployable_Infantry::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_CLEG@@6B@				; dp88_AR_CLEG::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_CLEG@@@8			; dp88_AR_CLEG `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_CLEG@@8				; dp88_AR_CLEG::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_CLEG@@8				; dp88_AR_CLEG::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_CLEG@@8			; dp88_AR_CLEG::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_CLEG_target@@6B@			; dp88_AR_CLEG_target::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_CLEG_target@@@8			; dp88_AR_CLEG_target `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_CLEG_target@@8			; dp88_AR_CLEG_target::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_CLEG_target@@8			; dp88_AR_CLEG_target::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_CLEG_target@@8		; dp88_AR_CLEG_target::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Ore_Miner@@6B@			; dp88_Ore_Miner::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Ore_Miner@@@8			; dp88_Ore_Miner `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Ore_Miner@@8				; dp88_Ore_Miner::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Ore_Miner@@8				; dp88_Ore_Miner::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Ore_Miner@@8			; dp88_Ore_Miner::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_Chrono_Miner@@6B@			; dp88_AR_Chrono_Miner::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_Chrono_Miner@@@8		; dp88_AR_Chrono_Miner `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_Chrono_Miner@@8			; dp88_AR_Chrono_Miner::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_Chrono_Miner@@8			; dp88_AR_Chrono_Miner::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_Chrono_Miner@@8		; dp88_AR_Chrono_Miner::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_Chrono_Miner_Chronozone@@6B@	; dp88_AR_Chrono_Miner_Chronozone::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_Chrono_Miner_Chronozone@@@8	; dp88_AR_Chrono_Miner_Chronozone `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_Chrono_Miner_Chronozone@@8		; dp88_AR_Chrono_Miner_Chronozone::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_Chrono_Miner_Chronozone@@8		; dp88_AR_Chrono_Miner_Chronozone::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_Chrono_Miner_Chronozone@@8 ; dp88_AR_Chrono_Miner_Chronozone::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Ore_Field@@6B@			; dp88_Ore_Field::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Ore_Field@@@8			; dp88_Ore_Field `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Ore_Field@@8				; dp88_Ore_Field::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Ore_Field@@8				; dp88_Ore_Field::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Ore_Field@@8			; dp88_Ore_Field::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Ore_Field_Observer@dp88_Ore_Field@@6B@ ; dp88_Ore_Field::dp88_Ore_Field_Observer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Ore_Field_Observer@dp88_Ore_Field@@@8 ; dp88_Ore_Field::dp88_Ore_Field_Observer `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Ore_Field_Observer@dp88_Ore_Field@@8	; dp88_Ore_Field::dp88_Ore_Field_Observer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Ore_Field_Observer@dp88_Ore_Field@@8	; dp88_Ore_Field::dp88_Ore_Field_Observer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Ore_Field_Observer@dp88_Ore_Field@@8 ; dp88_Ore_Field::dp88_Ore_Field_Observer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Ore_Extractor@@6B@			; dp88_Ore_Extractor::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Ore_Extractor@@@8			; dp88_Ore_Extractor `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Ore_Extractor@@8			; dp88_Ore_Extractor::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Ore_Extractor@@8			; dp88_Ore_Extractor::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Ore_Extractor@@8		; dp88_Ore_Extractor::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Ore_Dump_Zone@@6B@			; dp88_Ore_Dump_Zone::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Ore_Dump_Zone@@@8			; dp88_Ore_Dump_Zone `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Ore_Dump_Zone@@8			; dp88_Ore_Dump_Zone::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Ore_Dump_Zone@@8			; dp88_Ore_Dump_Zone::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Ore_Dump_Zone@@8		; dp88_Ore_Dump_Zone::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Aircraft_LandingZone@@6B@		; dp88_Aircraft_LandingZone::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Aircraft_LandingZone@@@8		; dp88_Aircraft_LandingZone `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Aircraft_LandingZone@@8		; dp88_Aircraft_LandingZone::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Aircraft_LandingZone@@8		; dp88_Aircraft_LandingZone::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Aircraft_LandingZone@@8	; dp88_Aircraft_LandingZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Aircraft_LandingZone_Aircraft@@6B@	; dp88_Aircraft_LandingZone_Aircraft::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Aircraft_LandingZone_Aircraft@@@8	; dp88_Aircraft_LandingZone_Aircraft `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Aircraft_LandingZone_Aircraft@@8	; dp88_Aircraft_LandingZone_Aircraft::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Aircraft_LandingZone_Aircraft@@8	; dp88_Aircraft_LandingZone_Aircraft::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Aircraft_LandingZone_Aircraft@@8 ; dp88_Aircraft_LandingZone_Aircraft::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_RemoteControlConsole@@6B@		; dp88_RemoteControlConsole::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_RemoteControlConsole@@@8		; dp88_RemoteControlConsole `RTTI Type Descriptor'
PUBLIC	??_R3dp88_RemoteControlConsole@@8		; dp88_RemoteControlConsole::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_RemoteControlConsole@@8		; dp88_RemoteControlConsole::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_RemoteControlConsole@@8	; dp88_RemoteControlConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_RemoteControlVehicle@@6B@		; dp88_RemoteControlVehicle::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_RemoteControlVehicle@@@8		; dp88_RemoteControlVehicle `RTTI Type Descriptor'
PUBLIC	??_R3dp88_RemoteControlVehicle@@8		; dp88_RemoteControlVehicle::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_RemoteControlVehicle@@8		; dp88_RemoteControlVehicle::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_RemoteControlVehicle@@8	; dp88_RemoteControlVehicle::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_DemoTruck@@6B@			; dp88_AR_DemoTruck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_DemoTruck@@@8			; dp88_AR_DemoTruck `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_DemoTruck@@8			; dp88_AR_DemoTruck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_DemoTruck@@8			; dp88_AR_DemoTruck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_DemoTruck@@8		; dp88_AR_DemoTruck::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_paradrop_Console@@6B@		; dp88_AR_paradrop_Console::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_paradrop_Console@@@8		; dp88_AR_paradrop_Console `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_paradrop_Console@@8		; dp88_AR_paradrop_Console::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_paradrop_Console@@8		; dp88_AR_paradrop_Console::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_paradrop_Console@@8	; dp88_AR_paradrop_Console::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_Paradrop@@6B@			; dp88_AR_Paradrop::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_Paradrop@@@8			; dp88_AR_Paradrop `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_Paradrop@@8			; dp88_AR_Paradrop::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_Paradrop@@8			; dp88_AR_Paradrop::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_Paradrop@@8		; dp88_AR_Paradrop::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AR_Prism_Tower@@6B@			; dp88_AR_Prism_Tower::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AR_Prism_Tower@@@8			; dp88_AR_Prism_Tower `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AR_Prism_Tower@@8			; dp88_AR_Prism_Tower::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AR_Prism_Tower@@8			; dp88_AR_Prism_Tower::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AR_Prism_Tower@@8		; dp88_AR_Prism_Tower::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_linkHealth@@6B@			; dp88_linkHealth::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_linkHealth@@@8			; dp88_linkHealth `RTTI Type Descriptor'
PUBLIC	??_R3dp88_linkHealth@@8				; dp88_linkHealth::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_linkHealth@@8				; dp88_linkHealth::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_linkHealth@@8		; dp88_linkHealth::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Ore_Miner@@@@6B@	; ScriptRegistrant<dp88_Ore_Miner>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Miner@@@@@8 ; ScriptRegistrant<dp88_Ore_Miner> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8	; ScriptRegistrant<dp88_Ore_Miner>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8	; ScriptRegistrant<dp88_Ore_Miner>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8 ; ScriptRegistrant<dp88_Ore_Miner>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@6B@ ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@6B@ ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Ore_Field@@@@6B@	; ScriptRegistrant<dp88_Ore_Field>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Field@@@@@8 ; ScriptRegistrant<dp88_Ore_Field> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Ore_Field@@@@8	; ScriptRegistrant<dp88_Ore_Field>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Ore_Field@@@@8	; ScriptRegistrant<dp88_Ore_Field>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Field@@@@8 ; ScriptRegistrant<dp88_Ore_Field>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@6B@ ; ScriptRegistrant<dp88_Ore_Extractor>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@@8 ; ScriptRegistrant<dp88_Ore_Extractor> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8 ; ScriptRegistrant<dp88_Ore_Extractor>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8 ; ScriptRegistrant<dp88_Ore_Extractor>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8 ; ScriptRegistrant<dp88_Ore_Extractor>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@6B@ ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@@8 ; ScriptRegistrant<dp88_Ore_Dump_Zone> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8 ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8 ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8 ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@6B@ ; ScriptRegistrant<dp88_AR_Paradrop>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@@8 ; ScriptRegistrant<dp88_AR_Paradrop> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8	; ScriptRegistrant<dp88_AR_Paradrop>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8	; ScriptRegistrant<dp88_AR_Paradrop>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8 ; ScriptRegistrant<dp88_AR_Paradrop>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_GameController@@@@6B@ ; ScriptRegistrant<dp88_AR_GameController>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_GameController@@@@@8 ; ScriptRegistrant<dp88_AR_GameController> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_GameController@@@@8 ; ScriptRegistrant<dp88_AR_GameController>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_GameController@@@@8 ; ScriptRegistrant<dp88_AR_GameController>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_GameController@@@@8 ; ScriptRegistrant<dp88_AR_GameController>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@6B@ ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@@8 ; ScriptRegistrant<dp88_AR_Deployable_Infantry> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8 ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8 ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8 ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_CLEG@@@@6B@	; ScriptRegistrant<dp88_AR_CLEG>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG@@@@@8	; ScriptRegistrant<dp88_AR_CLEG> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8	; ScriptRegistrant<dp88_AR_CLEG>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8	; ScriptRegistrant<dp88_AR_CLEG>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8 ; ScriptRegistrant<dp88_AR_CLEG>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@6B@ ; ScriptRegistrant<dp88_AR_CLEG_target>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@@8 ; ScriptRegistrant<dp88_AR_CLEG_target> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8 ; ScriptRegistrant<dp88_AR_CLEG_target>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8 ; ScriptRegistrant<dp88_AR_CLEG_target>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8 ; ScriptRegistrant<dp88_AR_CLEG_target>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@6B@ ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@6B@ ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@6B@ ; ScriptRegistrant<dp88_RemoteControlConsole>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@@8 ; ScriptRegistrant<dp88_RemoteControlConsole> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8 ; ScriptRegistrant<dp88_RemoteControlConsole>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8 ; ScriptRegistrant<dp88_RemoteControlConsole>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8 ; ScriptRegistrant<dp88_RemoteControlConsole>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@6B@ ; ScriptRegistrant<dp88_RemoteControlVehicle>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@@8 ; ScriptRegistrant<dp88_RemoteControlVehicle> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8 ; ScriptRegistrant<dp88_RemoteControlVehicle>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8 ; ScriptRegistrant<dp88_RemoteControlVehicle>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8 ; ScriptRegistrant<dp88_RemoteControlVehicle>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@6B@ ; ScriptRegistrant<dp88_AR_DemoTruck>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@@8 ; ScriptRegistrant<dp88_AR_DemoTruck> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8	; ScriptRegistrant<dp88_AR_DemoTruck>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8	; ScriptRegistrant<dp88_AR_DemoTruck>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8 ; ScriptRegistrant<dp88_AR_DemoTruck>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@6B@ ; ScriptRegistrant<dp88_AR_paradrop_Console>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@@8 ; ScriptRegistrant<dp88_AR_paradrop_Console> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8 ; ScriptRegistrant<dp88_AR_paradrop_Console>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8 ; ScriptRegistrant<dp88_AR_paradrop_Console>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8 ; ScriptRegistrant<dp88_AR_paradrop_Console>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@6B@ ; ScriptRegistrant<dp88_AR_Prism_Tower>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@@8 ; ScriptRegistrant<dp88_AR_Prism_Tower> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8 ; ScriptRegistrant<dp88_AR_Prism_Tower>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8 ; ScriptRegistrant<dp88_AR_Prism_Tower>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8 ; ScriptRegistrant<dp88_AR_Prism_Tower>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_linkHealth@@@@6B@	; ScriptRegistrant<dp88_linkHealth>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_linkHealth@@@@@8 ; ScriptRegistrant<dp88_linkHealth> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_linkHealth@@@@8	; ScriptRegistrant<dp88_linkHealth>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_linkHealth@@@@8	; ScriptRegistrant<dp88_linkHealth>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_linkHealth@@@@8 ; ScriptRegistrant<dp88_linkHealth>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@02081cea
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f79999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@41c80000
PUBLIC	__real@42200000
PUBLIC	__real@42480000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@42ca0000
PUBLIC	__real@42dc0000
PUBLIC	__real@43160000
PUBLIC	__real@43340000
PUBLIC	__real@437f0000
PUBLIC	__real@43fa0000
PUBLIC	__real@44000000
PUBLIC	__real@44800000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__real@c2200000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___wassert:PROC
EXTRN	__imp__atof:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__atoi:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__fclose:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	__imp__strcpy_s:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	__imp__strstr:PROC
EXTRN	__imp__toupper:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp___time64:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	?Random_Float@WWMath@@SAMXZ:PROC		; WWMath::Random_Float
EXTRN	??0ScriptImpClass@@QAE@XZ:PROC			; ScriptImpClass::ScriptImpClass
EXTRN	??1ScriptImpClass@@UAE@XZ:PROC			; ScriptImpClass::~ScriptImpClass
EXTRN	?Get_Name@ScriptImpClass@@UAEPBDXZ:PROC		; ScriptImpClass::Get_Name
EXTRN	?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z:PROC ; ScriptImpClass::Set_Parameters_String
EXTRN	?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z:PROC ; ScriptImpClass::Get_Parameters_String
EXTRN	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z:PROC	; ScriptImpClass::Get_Parameter
EXTRN	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z:PROC	; ScriptImpClass::Get_Parameter
EXTRN	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z:PROC ; ScriptImpClass::Get_Int_Parameter
EXTRN	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z:PROC ; ScriptImpClass::Get_Float_Parameter
EXTRN	?Get_Vector3_Parameter@ScriptImpClass@@QAE?AVVector3@@PBD@Z:PROC ; ScriptImpClass::Get_Vector3_Parameter
EXTRN	?Destroy_Script@ScriptImpClass@@QAEXXZ:PROC	; ScriptImpClass::Destroy_Script
EXTRN	?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z:PROC ; ScriptImpClass::Attach
EXTRN	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z:PROC ; ScriptImpClass::Detach
EXTRN	?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z:PROC ; ScriptImpClass::Save
EXTRN	?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z:PROC ; ScriptImpClass::Load
EXTRN	??1ScriptFactory@@UAE@XZ:PROC			; ScriptFactory::~ScriptFactory
EXTRN	??0ScriptFactory@@IAE@PBD0@Z:PROC		; ScriptFactory::ScriptFactory
EXTRN	?Console_Input@@YAXPBD@Z:PROC			; Console_Input
EXTRN	?Console_Output@@YAXPBDZZ:PROC			; Console_Output
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	__imp_?Format@StringClass@@QAAHPBDZZ:PROC
EXTRN	__imp_?Format_Args@StringClass@@QAAHPBDABQAD@Z:PROC
EXTRN	__imp_?Get_String@StringClass@@AAEXH_N@Z:PROC
EXTRN	__imp_?Resize@StringClass@@AAEXH@Z:PROC
EXTRN	__imp_?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC
EXTRN	__imp_?Free_String@StringClass@@AAEXXZ:PROC
EXTRN	__imp_?Free_String@WideStringClass@@AAEXXZ:PROC
EXTRN	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z:PROC ; INIClass::Find_Entry
EXTRN	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z:PROC ; INIClass::Find_Section
EXTRN	??1INIClass@@UAE@XZ:PROC			; INIClass::~INIClass
EXTRN	?Get_Definition_Name@@YAPBDK@Z:PROC		; Get_Definition_Name
EXTRN	?Find_Definition@@YAPAVDefinitionClass@@K@Z:PROC ; Find_Definition
EXTRN	?Is_Valid_Preset_ID@@YA_NK@Z:PROC		; Is_Valid_Preset_ID
EXTRN	?Is_Valid_Preset@@YA_NPBD@Z:PROC		; Is_Valid_Preset
EXTRN	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z:PROC ; Matrix3D::Set
EXTRN	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z:PROC ; Matrix3D::Set
EXTRN	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Object_Type
EXTRN	?Set_Object_Type@@YAXPAVScriptableGameObj@@H@Z:PROC ; Set_Object_Type
EXTRN	?Get_Velocity@@YA?AVVector3@@PAVScriptableGameObj@@@Z:PROC ; Get_Velocity
EXTRN	?Set_Transform@@YAXPAVScriptableGameObj@@VMatrix3D@@@Z:PROC ; Set_Transform
EXTRN	?Get_Closest_Armed_Object_To_Object@@YAPAVScriptableGameObj@@PAV1@H@Z:PROC ; Get_Closest_Armed_Object_To_Object
EXTRN	?Get_Player_ID@@YAJPAVScriptableGameObj@@@Z:PROC ; Get_Player_ID
EXTRN	?Purchase_Item@@YA_NPAVScriptableGameObj@@H@Z:PROC ; Purchase_Item
EXTRN	?Get_Current_Bullets@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Current_Bullets
EXTRN	?Get_Current_Clip_Bullets@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Current_Clip_Bullets
EXTRN	?Get_Powerup_Weapon@@YAPBDPBD@Z:PROC		; Get_Powerup_Weapon
EXTRN	?Get_Current_Weapon@@YAPBDPAVScriptableGameObj@@@Z:PROC ; Get_Current_Weapon
EXTRN	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z:PROC ; Get_Vehicle
EXTRN	?Change_Character@@YA_NPAVScriptableGameObj@@PBD@Z:PROC ; Change_Character
EXTRN	?Create_Vehicle@@YA_NPBDMPAVScriptableGameObj@@H@Z:PROC ; Create_Vehicle
EXTRN	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z:PROC ; Get_Vehicle_Driver
EXTRN	?Soldier_Transition_Vehicle@@YAXPAVScriptableGameObj@@@Z:PROC ; Soldier_Transition_Vehicle
EXTRN	?Create_Zone@@YAPAVScriptableGameObj@@PBDAAVOBBoxClass@@@Z:PROC ; Create_Zone
EXTRN	?Set@Matrix3@@QAEXABVQuaternion@@@Z:PROC	; Matrix3::Set
EXTRN	??1ReferencerClass@@UAE@XZ:PROC			; ReferencerClass::~ReferencerClass
EXTRN	?On_Post_Load@ReferencerClass@@UAEXXZ:PROC	; ReferencerClass::On_Post_Load
EXTRN	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z:PROC ; ReferencerClass::operator=
EXTRN	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ:PROC ; ReferencerClass::operator ScriptableGameObj *
EXTRN	?Add_Observer@ScriptableGameObj@@QAEXPAVGameObjObserverClass@@@Z:PROC ; ScriptableGameObj::Add_Observer
EXTRN	?Remove_Observer@ScriptableGameObj@@QAEXPAVGameObjObserverClass@@@Z:PROC ; ScriptableGameObj::Remove_Observer
EXTRN	?Set@LineSegClass@@QAEXABV1@ABVMatrix3D@@@Z:PROC ; LineSegClass::Set
EXTRN	?Find_Refinery@@YAPAVScriptableGameObj@@H@Z:PROC ; Find_Refinery
EXTRN	?Get_Translated_String@@YAPBDK@Z:PROC		; Get_Translated_String
EXTRN	?Is_Valid_String_ID@@YA_NK@Z:PROC		; Is_Valid_String_ID
EXTRN	?Get_String_Sound_ID@@YAKK@Z:PROC		; Get_String_Sound_ID
EXTRN	?Set_Max_Health@@YAXPAVScriptableGameObj@@M@Z:PROC ; Set_Max_Health
EXTRN	?Set_Max_Shield_Strength@@YAXPAVScriptableGameObj@@M@Z:PROC ; Set_Max_Shield_Strength
EXTRN	?Get_Shield_Type@@YAPBDPAVScriptableGameObj@@@Z:PROC ; Get_Shield_Type
EXTRN	?Get_Skin@@YAPBDPAVScriptableGameObj@@@Z:PROC	; Get_Skin
EXTRN	?Set_Skin@@YAXPAVScriptableGameObj@@PBD@Z:PROC	; Set_Skin
EXTRN	?Ranged_Scale_Damage_To_Buildings@@YAXMPBDVVector3@@MPAVScriptableGameObj@@@Z:PROC ; Ranged_Scale_Damage_To_Buildings
EXTRN	?Get_Model@@YAPBDPAVScriptableGameObj@@@Z:PROC	; Get_Model
EXTRN	?Wake_Up_Objects_In_OBBox@@YAXAAVOBBoxClass@@@Z:PROC ; Wake_Up_Objects_In_OBBox
EXTRN	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z:PROC ; Is_Script_Attached
EXTRN	?Attach_Script_Once@@YAXPAVScriptableGameObj@@PBD1@Z:PROC ; Attach_Script_Once
EXTRN	?Find_Object_With_Script@@YAPAVScriptableGameObj@@PBD@Z:PROC ; Find_Object_With_Script
EXTRN	?Find_Closest_Object_With_Script@@YAPAVScriptableGameObj@@PBDVVector3@@@Z:PROC ; Find_Closest_Object_With_Script
EXTRN	?Find_All_Objects_With_Script@@YAXPBDAAV?$SList@VScriptableGameObj@@@@@Z:PROC ; Find_All_Objects_With_Script
EXTRN	?Find_All_Objects_With_Script_By_Distance@@YAXPBDAAV?$SList@VScriptableGameObj@@@@VVector3@@@Z:PROC ; Find_All_Objects_With_Script_By_Distance
EXTRN	?Send_Custom_Event_To_Objects_With_Script@@YAXPAVScriptableGameObj@@PBDHHM@Z:PROC ; Send_Custom_Event_To_Objects_With_Script
EXTRN	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z:PROC ; Find_Script_On_Object
EXTRN	?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::Detach
EXTRN	?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::Destroyed
EXTRN	?InstallHook@JFW_Key_Hook_Base@@QAEXPBDPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::InstallHook
EXTRN	?RemoveHook@JFW_Key_Hook_Base@@QAEXXZ:PROC	; JFW_Key_Hook_Base::RemoveHook
EXTRN	??1JFW_Key_Hook_Base@@UAE@XZ:PROC		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
EXTRN	?Detach@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z:PROC ; MultiKeyHookScriptImpClass::Detach
EXTRN	?Destroyed@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z:PROC ; MultiKeyHookScriptImpClass::Destroyed
EXTRN	??_E?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z:PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vector deleting destructor'
EXTRN	?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Object_Created_Hook_Base::Detach
EXTRN	?Created@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Object_Created_Hook_Base::Created
EXTRN	??1JFW_Object_Created_Hook_Base@@UAE@XZ:PROC	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
EXTRN	?Send_Message_Team@@YAXHIIIPBD@Z:PROC		; Send_Message_Team
EXTRN	?Force_Vehicle_Entry@@YAXPAVScriptableGameObj@@0@Z:PROC ; Force_Vehicle_Entry
EXTRN	??0LoopedAnimationController@@QAE@PAVScriptableGameObj@@@Z:PROC ; LoopedAnimationController::LoopedAnimationController
EXTRN	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z:PROC ; LoopedAnimationController::PlayAnimation
EXTRN	?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z:PROC ; dp88_customAI::Created
EXTRN	?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z:PROC ; dp88_customAI::Timer_Expired
EXTRN	?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z:PROC ; dp88_customAI::Custom
EXTRN	?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z:PROC ; dp88_customAI::Action_Complete
EXTRN	?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z:PROC ; dp88_customAI::Init
EXTRN	?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z:PROC ; dp88_customAI::loadSettings
EXTRN	?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z:PROC ; dp88_customAI::AIStateChanged
EXTRN	?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z:PROC ; dp88_customAI::ResetAllActions
EXTRN	?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z:PROC ; dp88_customAI::getBasePriority
EXTRN	?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z:PROC ; dp88_customAI::getPriority
EXTRN	?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z:PROC ; dp88_customAI::getPriority
EXTRN	?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z:PROC ; dp88_customAI::IsVehicleEmpty
EXTRN	?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z:PROC ; dp88_customAI::IsVehicleAIEnabled
EXTRN	??_Edp88_customAI@@UAEPAXI@Z:PROC		; dp88_customAI::`vector deleting destructor'
EXTRN	?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z:PROC ; dp88_AI_Turret::Enemy_Seen
EXTRN	?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z:PROC ; dp88_AI_Turret::Timer_Expired
EXTRN	?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z:PROC ; dp88_AI_Turret::Damaged
EXTRN	?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z:PROC ; dp88_AI_Turret::Init
EXTRN	?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z:PROC ; dp88_AI_Turret::loadSettings
EXTRN	?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z:PROC ; dp88_AI_Turret::AIStateChanged
EXTRN	?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z:PROC ; dp88_AI_Turret::checkTeam
EXTRN	?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z:PROC ; dp88_AI_Turret::checkRange
EXTRN	?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z:PROC ; dp88_AI_Turret::checkPowerState
EXTRN	?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z:PROC ; dp88_AI_Turret::attackTarget
EXTRN	?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z:PROC ; dp88_AI_Turret::attackLocation
EXTRN	?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z:PROC ; dp88_AI_Turret::stopAttacking
EXTRN	??_Edp88_AI_Turret@@UAEPAXI@Z:PROC		; dp88_AI_Turret::`vector deleting destructor'
EXTRN	?Timer_Expired@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@H@Z:PROC ; dp88_AI_ChargedTurret::Timer_Expired
EXTRN	?Animation_Complete@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@PBD@Z:PROC ; dp88_AI_ChargedTurret::Animation_Complete
EXTRN	?Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z:PROC ; dp88_AI_ChargedTurret::Destroyed
EXTRN	?Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z:PROC ; dp88_AI_ChargedTurret::Init
EXTRN	?loadSettings@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@_N1@Z:PROC ; dp88_AI_ChargedTurret::loadSettings
EXTRN	?attackTarget@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@0_N@Z:PROC ; dp88_AI_ChargedTurret::attackTarget
EXTRN	?attackLocation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z:PROC ; dp88_AI_ChargedTurret::attackLocation
EXTRN	?StartCharging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z:PROC ; dp88_AI_ChargedTurret::StartCharging
EXTRN	?StartDischarging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z:PROC ; dp88_AI_ChargedTurret::StartDischarging
EXTRN	?GetAnimationObject@dp88_AI_ChargedTurret@@MAEPAVScriptableGameObj@@PAV2@@Z:PROC ; dp88_AI_ChargedTurret::GetAnimationObject
EXTRN	?ApplyIdleAnimation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z:PROC ; dp88_AI_ChargedTurret::ApplyIdleAnimation
EXTRN	??_Edp88_AI_ChargedTurret@@UAEPAXI@Z:PROC	; dp88_AI_ChargedTurret::`vector deleting destructor'
EXTRN	?Created@dp88_Camo_Controller@@UAEXPAVScriptableGameObj@@@Z:PROC ; dp88_Camo_Controller::Created
EXTRN	??_Edp88_Camo_Controller@@UAEPAXI@Z:PROC	; dp88_Camo_Controller::`vector deleting destructor'
EXTRN	??_Edp88_AR_GameController@@UAEPAXI@Z:PROC	; dp88_AR_GameController::`vector deleting destructor'
EXTRN	??_Edp88_AR_Deployable_Infantry@@UAEPAXI@Z:PROC	; dp88_AR_Deployable_Infantry::`vector deleting destructor'
EXTRN	??_Edp88_AR_CLEG@@UAEPAXI@Z:PROC		; dp88_AR_CLEG::`vector deleting destructor'
EXTRN	??_Edp88_AR_CLEG_target@@UAEPAXI@Z:PROC		; dp88_AR_CLEG_target::`vector deleting destructor'
EXTRN	??_Edp88_Ore_Miner@@UAEPAXI@Z:PROC		; dp88_Ore_Miner::`vector deleting destructor'
EXTRN	??_Edp88_AR_Chrono_Miner@@UAEPAXI@Z:PROC	; dp88_AR_Chrono_Miner::`vector deleting destructor'
EXTRN	??_Edp88_AR_Chrono_Miner_Chronozone@@UAEPAXI@Z:PROC ; dp88_AR_Chrono_Miner_Chronozone::`vector deleting destructor'
EXTRN	??_Edp88_Ore_Field_Observer@dp88_Ore_Field@@UAEPAXI@Z:PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::`vector deleting destructor'
EXTRN	??_Edp88_Ore_Field@@UAEPAXI@Z:PROC		; dp88_Ore_Field::`vector deleting destructor'
EXTRN	??_Edp88_Ore_Extractor@@UAEPAXI@Z:PROC		; dp88_Ore_Extractor::`vector deleting destructor'
EXTRN	??_Edp88_Ore_Dump_Zone@@UAEPAXI@Z:PROC		; dp88_Ore_Dump_Zone::`vector deleting destructor'
EXTRN	??_Edp88_Aircraft_LandingZone@@UAEPAXI@Z:PROC	; dp88_Aircraft_LandingZone::`vector deleting destructor'
EXTRN	??_Edp88_Aircraft_LandingZone_Aircraft@@UAEPAXI@Z:PROC ; dp88_Aircraft_LandingZone_Aircraft::`vector deleting destructor'
EXTRN	??_Edp88_RemoteControlConsole@@UAEPAXI@Z:PROC	; dp88_RemoteControlConsole::`vector deleting destructor'
EXTRN	??_Edp88_RemoteControlVehicle@@UAEPAXI@Z:PROC	; dp88_RemoteControlVehicle::`vector deleting destructor'
EXTRN	??_Edp88_AR_DemoTruck@@UAEPAXI@Z:PROC		; dp88_AR_DemoTruck::`vector deleting destructor'
EXTRN	??_Edp88_AR_paradrop_Console@@UAEPAXI@Z:PROC	; dp88_AR_paradrop_Console::`vector deleting destructor'
EXTRN	??_Edp88_AR_Paradrop@@UAEPAXI@Z:PROC		; dp88_AR_Paradrop::`vector deleting destructor'
EXTRN	??_Edp88_AR_Prism_Tower@@UAEPAXI@Z:PROC		; dp88_AR_Prism_Tower::`vector deleting destructor'
EXTRN	??_Edp88_linkHealth@@UAEPAXI@Z:PROC		; dp88_linkHealth::`vector deleting destructor'
EXTRN	?Give_Bot_Credits@MS_AccessHelper@@SAXHM@Z:PROC	; MS_AccessHelper::Give_Bot_Credits
EXTRN	?Get_Warhead_Type@ArmorWarheadManager@@SAIPBD@Z:PROC ; ArmorWarheadManager::Get_Warhead_Type
EXTRN	?Is_In_Elevator@SoldierGameObj@@QAE_NXZ:PROC	; SoldierGameObj::Is_In_Elevator
EXTRN	?Set_Immovable@VehicleGameObj@@QAEX_N@Z:PROC	; VehicleGameObj::Set_Immovable
EXTRN	??_E?$SList@VScriptableGameObj@@@@UAEPAXI@Z:PROC ; SList<ScriptableGameObj>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Ore_Miner>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Ore_Field>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Ore_Extractor>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_Paradrop>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_GameController>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_CLEG>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_CLEG_target>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_RemoteControlConsole>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_RemoteControlVehicle>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_DemoTruck>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_paradrop_Console>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AR_Prism_Tower>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_linkHealth>::`vector deleting destructor'
EXTRN	__CIatan2:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_asin_precise:PROC
EXTRN	__libm_sse2_atan_precise:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__libm_sse2_tan_precise:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAcosTable
EXTRN	?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAsinTable
EXTRN	?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastSinTable
EXTRN	?Commands@@3PAUScriptCommands@@A:DWORD		; Commands
EXTRN	__imp_?m_EmptyString@StringClass@@0AAPADA:DWORD
EXTRN	__imp_?m_NullChar@StringClass@@0AADA:DWORD
EXTRN	?Set_Current_Bullets@@3P6AXPAVScriptableGameObj@@H@ZA:DWORD ; Set_Current_Bullets
EXTRN	?Set_Current_Clip_Bullets@@3P6AXPAVScriptableGameObj@@H@ZA:DWORD ; Set_Current_Clip_Bullets
EXTRN	?Create_2D_Sound_Player@@3P6AHPAVScriptableGameObj@@PBD@ZA:DWORD ; Create_2D_Sound_Player
EXTRN	?Send_Message@@3P6AXIIIPBD@ZA:DWORD		; Send_Message
EXTRN	?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA:DWORD ; Send_Message_Player
EXTRN	?Remove_Weapon@@3P6AXPAVScriptableGameObj@@PBD@ZA:DWORD ; Remove_Weapon
EXTRN	?Update_Network_Object@@3P6AXPAVNetworkObjectClass@@@ZA:DWORD ; Update_Network_Object
EXTRN	?Get_Damage_Warhead@@3P6AIXZA:DWORD		; Get_Damage_Warhead
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?dp88_Ore_Miner_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Miner@@@@A DB 010H DUP (?) ; dp88_Ore_Miner_Registrant
?dp88_AR_Chrono_Miner_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@A DB 010H DUP (?) ; dp88_AR_Chrono_Miner_Registrant
?dp88_AR_Chrono_Miner_Chronozone_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@A DB 010H DUP (?) ; dp88_AR_Chrono_Miner_Chronozone_Registrant
?dp88_Ore_Field_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Field@@@@A DB 010H DUP (?) ; dp88_Ore_Field_Registrant
?dp88_Ore_Extractor_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@A DB 010H DUP (?) ; dp88_Ore_Extractor_Registrant
?dp88_Ore_Dump_Zone_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@A DB 010H DUP (?) ; dp88_Ore_Dump_Zone_Registrant
?dp88_AR_Paradrop_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@A DB 010H DUP (?) ; dp88_AR_Paradrop_Registrant
?dp88_AR_GameController_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_GameController@@@@A DB 010H DUP (?) ; dp88_AR_GameController_Registrant
?dp88_AR_Deployable_Infantry_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@A DB 010H DUP (?) ; dp88_AR_Deployable_Infantry_Registrant
?dp88_AR_CLEG_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_CLEG@@@@A DB 010H DUP (?) ; dp88_AR_CLEG_Registrant
?dp88_AR_CLEG_target_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@A DB 010H DUP (?) ; dp88_AR_CLEG_target_Registrant
?dp88_Aircraft_LandingZone_Registrant@@3V?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@A DB 010H DUP (?) ; dp88_Aircraft_LandingZone_Registrant
?dp88_Aircraft_LandingZone_Aircraft_Registrant@@3V?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@A DB 010H DUP (?) ; dp88_Aircraft_LandingZone_Aircraft_Registrant
?dp88_RemoteControlConsole_Registrant@@3V?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@A DB 010H DUP (?) ; dp88_RemoteControlConsole_Registrant
?dp88_RemoteControlVehicle_Registrant@@3V?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@A DB 010H DUP (?) ; dp88_RemoteControlVehicle_Registrant
?dp88_AR_DemoTruck_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@A DB 010H DUP (?) ; dp88_AR_DemoTruck_Registrant
?dp88_AR_paradrop_Console_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@A DB 010H DUP (?) ; dp88_AR_paradrop_Console_Registrant
?dp88_AR_Prism_Tower_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@A DB 010H DUP (?) ; dp88_AR_Prism_Tower_Registrant
?dp88_linkHealth_Registrant@@3V?$ScriptRegistrant@Vdp88_linkHealth@@@@A DB 010H DUP (?) ; dp88_linkHealth_Registrant
_BSS	ENDS
;	COMDAT ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A
_BSS	SEGMENT
?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A DB 014H DUP (?) ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
_BSS	ENDS
;	COMDAT ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
_BSS	SEGMENT
??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51 DD 01H DUP (?) ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`local static guard'
_BSS	ENDS
CRT$XCU	SEGMENT
_dp88_Ore_Miner_Registrant$initializer$ DD FLAT:??__Edp88_Ore_Miner_Registrant@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c2200000
CONST	SEGMENT
__real@c2200000 DD 0c2200000r			; -40
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42dc0000
CONST	SEGMENT
__real@42dc0000 DD 042dc0000r			; 110
CONST	ENDS
;	COMDAT __real@42ca0000
CONST	SEGMENT
__real@42ca0000 DD 042ca0000r			; 101
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f79999a
CONST	SEGMENT
__real@3f79999a DD 03f79999ar			; 0.975
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@02081cea
CONST	SEGMENT
__real@02081cea DD 002081cear			; 1e-037
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_linkHealth@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_linkHealth@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_linkHealth@@@@@8 ; ScriptRegistrant<dp88_linkHealth>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_linkHealth@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_linkHealth@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_linkHealth@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_linkHealth@@@@8 ; ScriptRegistrant<dp88_linkHealth>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_linkHealth@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_linkHealth@@@@8 DD 00H	; ScriptRegistrant<dp88_linkHealth>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_linkHealth@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_linkHealth@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_linkHealth@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_linkHealth> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_linkHealth@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_linkHealth@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_linkHealth@@@@6B@ DD 00H	; ScriptRegistrant<dp88_linkHealth>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_linkHealth@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_linkHealth@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@@8 ; ScriptRegistrant<dp88_AR_Prism_Tower>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8 ; ScriptRegistrant<dp88_AR_Prism_Tower>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8 DD 00H ; ScriptRegistrant<dp88_AR_Prism_Tower>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_Prism_Tower> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AR_Prism_Tower>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@@8 ; ScriptRegistrant<dp88_AR_paradrop_Console>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8 ; ScriptRegistrant<dp88_AR_paradrop_Console>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8 DD 00H ; ScriptRegistrant<dp88_AR_paradrop_Console>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_paradrop_Console> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AR_paradrop_Console>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@@8 ; ScriptRegistrant<dp88_AR_DemoTruck>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8 ; ScriptRegistrant<dp88_AR_DemoTruck>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8 DD 00H	; ScriptRegistrant<dp88_AR_DemoTruck>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_DemoTruck> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AR_DemoTruck>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@@8 ; ScriptRegistrant<dp88_RemoteControlVehicle>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8 ; ScriptRegistrant<dp88_RemoteControlVehicle>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8 DD 00H ; ScriptRegistrant<dp88_RemoteControlVehicle>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_RemoteControlVehicle> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@6B@ DD 00H ; ScriptRegistrant<dp88_RemoteControlVehicle>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@@8 ; ScriptRegistrant<dp88_RemoteControlConsole>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8 ; ScriptRegistrant<dp88_RemoteControlConsole>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8 DD 00H ; ScriptRegistrant<dp88_RemoteControlConsole>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_RemoteControlConsole> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@6B@ DD 00H ; ScriptRegistrant<dp88_RemoteControlConsole>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8 DD 00H ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircra'
	DB	'ft@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@6B@ DD 00H ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8 ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8 DD 00H ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Aircraft_LandingZone> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@6B@ DD 00H ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@@8 ; ScriptRegistrant<dp88_AR_CLEG_target>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8 ; ScriptRegistrant<dp88_AR_CLEG_target>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8 DD 00H ; ScriptRegistrant<dp88_AR_CLEG_target>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_CLEG_target> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AR_CLEG_target>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG@@@@@8 ; ScriptRegistrant<dp88_AR_CLEG>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8 ; ScriptRegistrant<dp88_AR_CLEG>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8 DD 00H	; ScriptRegistrant<dp88_AR_CLEG>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_CLEG> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_CLEG@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_CLEG@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_CLEG@@@@6B@ DD 00H	; ScriptRegistrant<dp88_AR_CLEG>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_CLEG@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_CLEG@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@@8 ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8 ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8 DD 00H ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_Deployable_Infantry> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_GameController@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_GameController@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_GameController@@@@@8 ; ScriptRegistrant<dp88_AR_GameController>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_GameController@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_GameController@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_GameController@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_GameController@@@@8 ; ScriptRegistrant<dp88_AR_GameController>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_GameController@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_GameController@@@@8 DD 00H ; ScriptRegistrant<dp88_AR_GameController>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_GameController@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_GameController@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_GameController@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_GameController> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_GameController@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_GameController@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_GameController@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AR_GameController>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_GameController@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_GameController@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@@8 ; ScriptRegistrant<dp88_AR_Paradrop>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8 ; ScriptRegistrant<dp88_AR_Paradrop>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8 DD 00H	; ScriptRegistrant<dp88_AR_Paradrop>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_Paradrop> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@6B@ DD 00H	; ScriptRegistrant<dp88_AR_Paradrop>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@@8 ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8 ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8 DD 00H	; ScriptRegistrant<dp88_Ore_Dump_Zone>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Ore_Dump_Zone> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@6B@ DD 00H ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@@8 ; ScriptRegistrant<dp88_Ore_Extractor>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8 ; ScriptRegistrant<dp88_Ore_Extractor>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8 DD 00H	; ScriptRegistrant<dp88_Ore_Extractor>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Ore_Extractor> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@6B@ DD 00H ; ScriptRegistrant<dp88_Ore_Extractor>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Field@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Field@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Field@@@@@8 ; ScriptRegistrant<dp88_Ore_Field>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ore_Field@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Ore_Field@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Ore_Field@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Field@@@@8 ; ScriptRegistrant<dp88_Ore_Field>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Ore_Field@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Ore_Field@@@@8 DD 00H	; ScriptRegistrant<dp88_Ore_Field>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Ore_Field@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Field@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Field@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Ore_Field> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Ore_Field@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Ore_Field@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Ore_Field@@@@6B@ DD 00H	; ScriptRegistrant<dp88_Ore_Field>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Field@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ore_Field@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8 DD 00H ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@'
	DB	'@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8 ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8 DD 00H ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AR_Chrono_Miner> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Miner@@@@@8 ; ScriptRegistrant<dp88_Ore_Miner>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8 ; ScriptRegistrant<dp88_Ore_Miner>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8 DD 00H	; ScriptRegistrant<dp88_Ore_Miner>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Miner@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Miner@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Ore_Miner> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Ore_Miner@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Ore_Miner@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Ore_Miner@@@@6B@ DD 00H	; ScriptRegistrant<dp88_Ore_Miner>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ore_Miner@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ore_Miner@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_linkHealth@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_linkHealth@@8 DD FLAT:??_R0?AVdp88_linkHealth@@@8 ; dp88_linkHealth::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_linkHealth@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_linkHealth@@8
rdata$r	SEGMENT
??_R2dp88_linkHealth@@8 DD FLAT:??_R1A@?0A@EA@dp88_linkHealth@@8 ; dp88_linkHealth::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_linkHealth@@8
rdata$r	SEGMENT
??_R3dp88_linkHealth@@8 DD 00H				; dp88_linkHealth::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_linkHealth@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_linkHealth@@@8
_DATA	SEGMENT
??_R0?AVdp88_linkHealth@@@8 DD FLAT:??_7type_info@@6B@	; dp88_linkHealth `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_linkHealth@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_linkHealth@@6B@
rdata$r	SEGMENT
??_R4dp88_linkHealth@@6B@ DD 00H			; dp88_linkHealth::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_linkHealth@@@8
	DD	FLAT:??_R3dp88_linkHealth@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_Prism_Tower@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_Prism_Tower@@8 DD FLAT:??_R0?AVdp88_AR_Prism_Tower@@@8 ; dp88_AR_Prism_Tower::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_Prism_Tower@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_Prism_Tower@@8
rdata$r	SEGMENT
??_R2dp88_AR_Prism_Tower@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_Prism_Tower@@8 ; dp88_AR_Prism_Tower::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8
	DD	FLAT:??_R1A@?0A@EA@dp88_AI_Turret@@8
	DD	FLAT:??_R1A@?0A@EA@dp88_customAI@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_Prism_Tower@@8
rdata$r	SEGMENT
??_R3dp88_AR_Prism_Tower@@8 DD 00H			; dp88_AR_Prism_Tower::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	07H
	DD	FLAT:??_R2dp88_AR_Prism_Tower@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_Prism_Tower@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_Prism_Tower@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AR_Prism_Tower `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_Prism_Tower@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_Prism_Tower@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_Prism_Tower@@6B@ DD 00H			; dp88_AR_Prism_Tower::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_Prism_Tower@@@8
	DD	FLAT:??_R3dp88_AR_Prism_Tower@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_Paradrop@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_Paradrop@@8 DD FLAT:??_R0?AVdp88_AR_Paradrop@@@8 ; dp88_AR_Paradrop::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_Paradrop@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_Paradrop@@8
rdata$r	SEGMENT
??_R2dp88_AR_Paradrop@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_Paradrop@@8 ; dp88_AR_Paradrop::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_Paradrop@@8
rdata$r	SEGMENT
??_R3dp88_AR_Paradrop@@8 DD 00H				; dp88_AR_Paradrop::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AR_Paradrop@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_Paradrop@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_Paradrop@@@8 DD FLAT:??_7type_info@@6B@	; dp88_AR_Paradrop `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_Paradrop@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_Paradrop@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_Paradrop@@6B@ DD 00H			; dp88_AR_Paradrop::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_Paradrop@@@8
	DD	FLAT:??_R3dp88_AR_Paradrop@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_paradrop_Console@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_paradrop_Console@@8 DD FLAT:??_R0?AVdp88_AR_paradrop_Console@@@8 ; dp88_AR_paradrop_Console::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_paradrop_Console@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_paradrop_Console@@8
rdata$r	SEGMENT
??_R2dp88_AR_paradrop_Console@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_paradrop_Console@@8 ; dp88_AR_paradrop_Console::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_paradrop_Console@@8
rdata$r	SEGMENT
??_R3dp88_AR_paradrop_Console@@8 DD 00H			; dp88_AR_paradrop_Console::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AR_paradrop_Console@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_paradrop_Console@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_paradrop_Console@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AR_paradrop_Console `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_paradrop_Console@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_paradrop_Console@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_paradrop_Console@@6B@ DD 00H		; dp88_AR_paradrop_Console::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_paradrop_Console@@@8
	DD	FLAT:??_R3dp88_AR_paradrop_Console@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_DemoTruck@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_DemoTruck@@8 DD FLAT:??_R0?AVdp88_AR_DemoTruck@@@8 ; dp88_AR_DemoTruck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_DemoTruck@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_DemoTruck@@8
rdata$r	SEGMENT
??_R2dp88_AR_DemoTruck@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_DemoTruck@@8 ; dp88_AR_DemoTruck::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_DemoTruck@@8
rdata$r	SEGMENT
??_R3dp88_AR_DemoTruck@@8 DD 00H			; dp88_AR_DemoTruck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AR_DemoTruck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_DemoTruck@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_DemoTruck@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AR_DemoTruck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_DemoTruck@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_DemoTruck@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_DemoTruck@@6B@ DD 00H			; dp88_AR_DemoTruck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_DemoTruck@@@8
	DD	FLAT:??_R3dp88_AR_DemoTruck@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_RemoteControlVehicle@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_RemoteControlVehicle@@8 DD FLAT:??_R0?AVdp88_RemoteControlVehicle@@@8 ; dp88_RemoteControlVehicle::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_RemoteControlVehicle@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_RemoteControlVehicle@@8
rdata$r	SEGMENT
??_R2dp88_RemoteControlVehicle@@8 DD FLAT:??_R1A@?0A@EA@dp88_RemoteControlVehicle@@8 ; dp88_RemoteControlVehicle::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_RemoteControlVehicle@@8
rdata$r	SEGMENT
??_R3dp88_RemoteControlVehicle@@8 DD 00H		; dp88_RemoteControlVehicle::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_RemoteControlVehicle@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_RemoteControlVehicle@@@8
_DATA	SEGMENT
??_R0?AVdp88_RemoteControlVehicle@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_RemoteControlVehicle `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_RemoteControlVehicle@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_RemoteControlVehicle@@6B@
rdata$r	SEGMENT
??_R4dp88_RemoteControlVehicle@@6B@ DD 00H		; dp88_RemoteControlVehicle::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_RemoteControlVehicle@@@8
	DD	FLAT:??_R3dp88_RemoteControlVehicle@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_RemoteControlConsole@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_RemoteControlConsole@@8 DD FLAT:??_R0?AVdp88_RemoteControlConsole@@@8 ; dp88_RemoteControlConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_RemoteControlConsole@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_RemoteControlConsole@@8
rdata$r	SEGMENT
??_R2dp88_RemoteControlConsole@@8 DD FLAT:??_R1A@?0A@EA@dp88_RemoteControlConsole@@8 ; dp88_RemoteControlConsole::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_RemoteControlConsole@@8
rdata$r	SEGMENT
??_R3dp88_RemoteControlConsole@@8 DD 00H		; dp88_RemoteControlConsole::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_RemoteControlConsole@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_RemoteControlConsole@@@8
_DATA	SEGMENT
??_R0?AVdp88_RemoteControlConsole@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_RemoteControlConsole `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_RemoteControlConsole@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_RemoteControlConsole@@6B@
rdata$r	SEGMENT
??_R4dp88_RemoteControlConsole@@6B@ DD 00H		; dp88_RemoteControlConsole::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_RemoteControlConsole@@@8
	DD	FLAT:??_R3dp88_RemoteControlConsole@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Aircraft_LandingZone_Aircraft@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Aircraft_LandingZone_Aircraft@@8 DD FLAT:??_R0?AVdp88_Aircraft_LandingZone_Aircraft@@@8 ; dp88_Aircraft_LandingZone_Aircraft::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Aircraft_LandingZone_Aircraft@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Aircraft_LandingZone_Aircraft@@8
rdata$r	SEGMENT
??_R2dp88_Aircraft_LandingZone_Aircraft@@8 DD FLAT:??_R1A@?0A@EA@dp88_Aircraft_LandingZone_Aircraft@@8 ; dp88_Aircraft_LandingZone_Aircraft::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Aircraft_LandingZone_Aircraft@@8
rdata$r	SEGMENT
??_R3dp88_Aircraft_LandingZone_Aircraft@@8 DD 00H	; dp88_Aircraft_LandingZone_Aircraft::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Aircraft_LandingZone_Aircraft@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Aircraft_LandingZone_Aircraft@@@8
_DATA	SEGMENT
??_R0?AVdp88_Aircraft_LandingZone_Aircraft@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Aircraft_LandingZone_Aircraft `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Aircraft_LandingZone_Aircraft@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Aircraft_LandingZone_Aircraft@@6B@
rdata$r	SEGMENT
??_R4dp88_Aircraft_LandingZone_Aircraft@@6B@ DD 00H	; dp88_Aircraft_LandingZone_Aircraft::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Aircraft_LandingZone_Aircraft@@@8
	DD	FLAT:??_R3dp88_Aircraft_LandingZone_Aircraft@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Aircraft_LandingZone@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Aircraft_LandingZone@@8 DD FLAT:??_R0?AVdp88_Aircraft_LandingZone@@@8 ; dp88_Aircraft_LandingZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Aircraft_LandingZone@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Aircraft_LandingZone@@8
rdata$r	SEGMENT
??_R2dp88_Aircraft_LandingZone@@8 DD FLAT:??_R1A@?0A@EA@dp88_Aircraft_LandingZone@@8 ; dp88_Aircraft_LandingZone::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Aircraft_LandingZone@@8
rdata$r	SEGMENT
??_R3dp88_Aircraft_LandingZone@@8 DD 00H		; dp88_Aircraft_LandingZone::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Aircraft_LandingZone@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Aircraft_LandingZone@@@8
_DATA	SEGMENT
??_R0?AVdp88_Aircraft_LandingZone@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Aircraft_LandingZone `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Aircraft_LandingZone@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Aircraft_LandingZone@@6B@
rdata$r	SEGMENT
??_R4dp88_Aircraft_LandingZone@@6B@ DD 00H		; dp88_Aircraft_LandingZone::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Aircraft_LandingZone@@@8
	DD	FLAT:??_R3dp88_Aircraft_LandingZone@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Ore_Dump_Zone@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Ore_Dump_Zone@@8 DD FLAT:??_R0?AVdp88_Ore_Dump_Zone@@@8 ; dp88_Ore_Dump_Zone::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Ore_Dump_Zone@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Ore_Dump_Zone@@8
rdata$r	SEGMENT
??_R2dp88_Ore_Dump_Zone@@8 DD FLAT:??_R1A@?0A@EA@dp88_Ore_Dump_Zone@@8 ; dp88_Ore_Dump_Zone::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Ore_Dump_Zone@@8
rdata$r	SEGMENT
??_R3dp88_Ore_Dump_Zone@@8 DD 00H			; dp88_Ore_Dump_Zone::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Ore_Dump_Zone@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Ore_Dump_Zone@@@8
_DATA	SEGMENT
??_R0?AVdp88_Ore_Dump_Zone@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Ore_Dump_Zone `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Ore_Dump_Zone@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Ore_Dump_Zone@@6B@
rdata$r	SEGMENT
??_R4dp88_Ore_Dump_Zone@@6B@ DD 00H			; dp88_Ore_Dump_Zone::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Ore_Dump_Zone@@@8
	DD	FLAT:??_R3dp88_Ore_Dump_Zone@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Ore_Extractor@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Ore_Extractor@@8 DD FLAT:??_R0?AVdp88_Ore_Extractor@@@8 ; dp88_Ore_Extractor::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Ore_Extractor@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Ore_Extractor@@8
rdata$r	SEGMENT
??_R2dp88_Ore_Extractor@@8 DD FLAT:??_R1A@?0A@EA@dp88_Ore_Extractor@@8 ; dp88_Ore_Extractor::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Ore_Extractor@@8
rdata$r	SEGMENT
??_R3dp88_Ore_Extractor@@8 DD 00H			; dp88_Ore_Extractor::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Ore_Extractor@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Ore_Extractor@@@8
_DATA	SEGMENT
??_R0?AVdp88_Ore_Extractor@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Ore_Extractor `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Ore_Extractor@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Ore_Extractor@@6B@
rdata$r	SEGMENT
??_R4dp88_Ore_Extractor@@6B@ DD 00H			; dp88_Ore_Extractor::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Ore_Extractor@@@8
	DD	FLAT:??_R3dp88_Ore_Extractor@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Ore_Field_Observer@dp88_Ore_Field@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Ore_Field_Observer@dp88_Ore_Field@@8 DD FLAT:??_R0?AVdp88_Ore_Field_Observer@dp88_Ore_Field@@@8 ; dp88_Ore_Field::dp88_Ore_Field_Observer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Ore_Field_Observer@dp88_Ore_Field@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Ore_Field_Observer@dp88_Ore_Field@@8
rdata$r	SEGMENT
??_R2dp88_Ore_Field_Observer@dp88_Ore_Field@@8 DD FLAT:??_R1A@?0A@EA@dp88_Ore_Field_Observer@dp88_Ore_Field@@8 ; dp88_Ore_Field::dp88_Ore_Field_Observer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Ore_Field_Observer@dp88_Ore_Field@@8
rdata$r	SEGMENT
??_R3dp88_Ore_Field_Observer@dp88_Ore_Field@@8 DD 00H	; dp88_Ore_Field::dp88_Ore_Field_Observer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2dp88_Ore_Field_Observer@dp88_Ore_Field@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Ore_Field_Observer@dp88_Ore_Field@@@8
_DATA	SEGMENT
??_R0?AVdp88_Ore_Field_Observer@dp88_Ore_Field@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Ore_Field::dp88_Ore_Field_Observer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Ore_Field_Observer@dp88_Ore_Field@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Ore_Field_Observer@dp88_Ore_Field@@6B@
rdata$r	SEGMENT
??_R4dp88_Ore_Field_Observer@dp88_Ore_Field@@6B@ DD 00H	; dp88_Ore_Field::dp88_Ore_Field_Observer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Ore_Field_Observer@dp88_Ore_Field@@@8
	DD	FLAT:??_R3dp88_Ore_Field_Observer@dp88_Ore_Field@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Ore_Field@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Ore_Field@@8 DD FLAT:??_R0?AVdp88_Ore_Field@@@8 ; dp88_Ore_Field::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Ore_Field@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Ore_Field@@8
rdata$r	SEGMENT
??_R2dp88_Ore_Field@@8 DD FLAT:??_R1A@?0A@EA@dp88_Ore_Field@@8 ; dp88_Ore_Field::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Ore_Field@@8
rdata$r	SEGMENT
??_R3dp88_Ore_Field@@8 DD 00H				; dp88_Ore_Field::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Ore_Field@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Ore_Field@@@8
_DATA	SEGMENT
??_R0?AVdp88_Ore_Field@@@8 DD FLAT:??_7type_info@@6B@	; dp88_Ore_Field `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Ore_Field@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Ore_Field@@6B@
rdata$r	SEGMENT
??_R4dp88_Ore_Field@@6B@ DD 00H				; dp88_Ore_Field::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Ore_Field@@@8
	DD	FLAT:??_R3dp88_Ore_Field@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_Chrono_Miner_Chronozone@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_Chrono_Miner_Chronozone@@8 DD FLAT:??_R0?AVdp88_AR_Chrono_Miner_Chronozone@@@8 ; dp88_AR_Chrono_Miner_Chronozone::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_Chrono_Miner_Chronozone@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_Chrono_Miner_Chronozone@@8
rdata$r	SEGMENT
??_R2dp88_AR_Chrono_Miner_Chronozone@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_Chrono_Miner_Chronozone@@8 ; dp88_AR_Chrono_Miner_Chronozone::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_Chrono_Miner_Chronozone@@8
rdata$r	SEGMENT
??_R3dp88_AR_Chrono_Miner_Chronozone@@8 DD 00H		; dp88_AR_Chrono_Miner_Chronozone::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AR_Chrono_Miner_Chronozone@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_Chrono_Miner_Chronozone@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_Chrono_Miner_Chronozone@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AR_Chrono_Miner_Chronozone `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_Chrono_Miner_Chronozone@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_Chrono_Miner_Chronozone@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_Chrono_Miner_Chronozone@@6B@ DD 00H	; dp88_AR_Chrono_Miner_Chronozone::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_Chrono_Miner_Chronozone@@@8
	DD	FLAT:??_R3dp88_AR_Chrono_Miner_Chronozone@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_Chrono_Miner@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_Chrono_Miner@@8 DD FLAT:??_R0?AVdp88_AR_Chrono_Miner@@@8 ; dp88_AR_Chrono_Miner::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_Chrono_Miner@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_Chrono_Miner@@8
rdata$r	SEGMENT
??_R2dp88_AR_Chrono_Miner@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_Chrono_Miner@@8 ; dp88_AR_Chrono_Miner::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_Ore_Miner@@8
	DD	FLAT:??_R1A@?0A@EA@JFW_Key_Hook_Base@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_Chrono_Miner@@8
rdata$r	SEGMENT
??_R3dp88_AR_Chrono_Miner@@8 DD 00H			; dp88_AR_Chrono_Miner::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2dp88_AR_Chrono_Miner@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_Chrono_Miner@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_Chrono_Miner@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AR_Chrono_Miner `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_Chrono_Miner@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_Chrono_Miner@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_Chrono_Miner@@6B@ DD 00H			; dp88_AR_Chrono_Miner::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_Chrono_Miner@@@8
	DD	FLAT:??_R3dp88_AR_Chrono_Miner@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Ore_Miner@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Ore_Miner@@8 DD FLAT:??_R0?AVdp88_Ore_Miner@@@8 ; dp88_Ore_Miner::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Ore_Miner@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Ore_Miner@@8
rdata$r	SEGMENT
??_R2dp88_Ore_Miner@@8 DD FLAT:??_R1A@?0A@EA@dp88_Ore_Miner@@8 ; dp88_Ore_Miner::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@JFW_Key_Hook_Base@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Ore_Miner@@8
rdata$r	SEGMENT
??_R3dp88_Ore_Miner@@8 DD 00H				; dp88_Ore_Miner::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2dp88_Ore_Miner@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Ore_Miner@@@8
_DATA	SEGMENT
??_R0?AVdp88_Ore_Miner@@@8 DD FLAT:??_7type_info@@6B@	; dp88_Ore_Miner `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Ore_Miner@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Ore_Miner@@6B@
rdata$r	SEGMENT
??_R4dp88_Ore_Miner@@6B@ DD 00H				; dp88_Ore_Miner::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Ore_Miner@@@8
	DD	FLAT:??_R3dp88_Ore_Miner@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_CLEG_target@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_CLEG_target@@8 DD FLAT:??_R0?AVdp88_AR_CLEG_target@@@8 ; dp88_AR_CLEG_target::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_CLEG_target@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_CLEG_target@@8
rdata$r	SEGMENT
??_R2dp88_AR_CLEG_target@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_CLEG_target@@8 ; dp88_AR_CLEG_target::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_CLEG_target@@8
rdata$r	SEGMENT
??_R3dp88_AR_CLEG_target@@8 DD 00H			; dp88_AR_CLEG_target::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AR_CLEG_target@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_CLEG_target@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_CLEG_target@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AR_CLEG_target `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_CLEG_target@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_CLEG_target@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_CLEG_target@@6B@ DD 00H			; dp88_AR_CLEG_target::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_CLEG_target@@@8
	DD	FLAT:??_R3dp88_AR_CLEG_target@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_CLEG@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_CLEG@@8 DD FLAT:??_R0?AVdp88_AR_CLEG@@@8 ; dp88_AR_CLEG::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_CLEG@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_CLEG@@8
rdata$r	SEGMENT
??_R2dp88_AR_CLEG@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_CLEG@@8 ; dp88_AR_CLEG::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_CLEG@@8
rdata$r	SEGMENT
??_R3dp88_AR_CLEG@@8 DD 00H				; dp88_AR_CLEG::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AR_CLEG@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_CLEG@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_CLEG@@@8 DD FLAT:??_7type_info@@6B@	; dp88_AR_CLEG `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_CLEG@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_CLEG@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_CLEG@@6B@ DD 00H				; dp88_AR_CLEG::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_CLEG@@@8
	DD	FLAT:??_R3dp88_AR_CLEG@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_Deployable_Infantry@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_Deployable_Infantry@@8 DD FLAT:??_R0?AVdp88_AR_Deployable_Infantry@@@8 ; dp88_AR_Deployable_Infantry::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_Deployable_Infantry@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_Deployable_Infantry@@8
rdata$r	SEGMENT
??_R2dp88_AR_Deployable_Infantry@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_Deployable_Infantry@@8 ; dp88_AR_Deployable_Infantry::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@JFW_Key_Hook_Base@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_Deployable_Infantry@@8
rdata$r	SEGMENT
??_R3dp88_AR_Deployable_Infantry@@8 DD 00H		; dp88_AR_Deployable_Infantry::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2dp88_AR_Deployable_Infantry@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_Deployable_Infantry@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_Deployable_Infantry@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AR_Deployable_Infantry `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_Deployable_Infantry@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_Deployable_Infantry@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_Deployable_Infantry@@6B@ DD 00H		; dp88_AR_Deployable_Infantry::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_Deployable_Infantry@@@8
	DD	FLAT:??_R3dp88_AR_Deployable_Infantry@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AR_GameController@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AR_GameController@@8 DD FLAT:??_R0?AVdp88_AR_GameController@@@8 ; dp88_AR_GameController::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AR_GameController@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AR_GameController@@8
rdata$r	SEGMENT
??_R2dp88_AR_GameController@@8 DD FLAT:??_R1A@?0A@EA@dp88_AR_GameController@@8 ; dp88_AR_GameController::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_Camo_Controller@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AR_GameController@@8
rdata$r	SEGMENT
??_R3dp88_AR_GameController@@8 DD 00H			; dp88_AR_GameController::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2dp88_AR_GameController@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AR_GameController@@@8
_DATA	SEGMENT
??_R0?AVdp88_AR_GameController@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AR_GameController `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AR_GameController@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AR_GameController@@6B@
rdata$r	SEGMENT
??_R4dp88_AR_GameController@@6B@ DD 00H			; dp88_AR_GameController::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AR_GameController@@@8
	DD	FLAT:??_R3dp88_AR_GameController@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Camo_Controller@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Camo_Controller@@8 DD FLAT:??_R0?AVdp88_Camo_Controller@@@8 ; dp88_Camo_Controller::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Camo_Controller@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Camo_Controller@@8
rdata$r	SEGMENT
??_R2dp88_Camo_Controller@@8 DD FLAT:??_R1A@?0A@EA@dp88_Camo_Controller@@8 ; dp88_Camo_Controller::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Camo_Controller@@8
rdata$r	SEGMENT
??_R3dp88_Camo_Controller@@8 DD 00H			; dp88_Camo_Controller::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Camo_Controller@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Camo_Controller@@@8
_DATA	SEGMENT
??_R0?AVdp88_Camo_Controller@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Camo_Controller `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Camo_Controller@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Camo_Controller@@6B@
rdata$r	SEGMENT
??_R4dp88_Camo_Controller@@6B@ DD 00H			; dp88_Camo_Controller::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Camo_Controller@@@8
	DD	FLAT:??_R3dp88_Camo_Controller@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8 DD FLAT:??_R0?AVdp88_AI_ChargedTurret@@@8 ; dp88_AI_ChargedTurret::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_ChargedTurret@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_ChargedTurret@@8
rdata$r	SEGMENT
??_R2dp88_AI_ChargedTurret@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8 ; dp88_AI_ChargedTurret::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_AI_Turret@@8
	DD	FLAT:??_R1A@?0A@EA@dp88_customAI@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_ChargedTurret@@8
rdata$r	SEGMENT
??_R3dp88_AI_ChargedTurret@@8 DD 00H			; dp88_AI_ChargedTurret::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2dp88_AI_ChargedTurret@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_ChargedTurret@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_ChargedTurret@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_ChargedTurret `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_ChargedTurret@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_ChargedTurret@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_ChargedTurret@@6B@ DD 00H			; dp88_AI_ChargedTurret::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_ChargedTurret@@@8
	DD	FLAT:??_R3dp88_AI_ChargedTurret@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_Turret@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_Turret@@8 DD FLAT:??_R0?AVdp88_AI_Turret@@@8 ; dp88_AI_Turret::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_Turret@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_Turret@@8
rdata$r	SEGMENT
??_R2dp88_AI_Turret@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_Turret@@8 ; dp88_AI_Turret::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_customAI@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_Turret@@8
rdata$r	SEGMENT
??_R3dp88_AI_Turret@@8 DD 00H				; dp88_AI_Turret::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2dp88_AI_Turret@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_Turret@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_Turret@@@8 DD FLAT:??_7type_info@@6B@	; dp88_AI_Turret `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_Turret@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_Turret@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_Turret@@6B@ DD 00H				; dp88_AI_Turret::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_Turret@@@8
	DD	FLAT:??_R3dp88_AI_Turret@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_customAI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_customAI@@8 DD FLAT:??_R0?AVdp88_customAI@@@8 ; dp88_customAI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_customAI@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_customAI@@8
rdata$r	SEGMENT
??_R2dp88_customAI@@8 DD FLAT:??_R1A@?0A@EA@dp88_customAI@@8 ; dp88_customAI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_customAI@@8
rdata$r	SEGMENT
??_R3dp88_customAI@@8 DD 00H				; dp88_customAI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_customAI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_customAI@@@8
_DATA	SEGMENT
??_R0?AVdp88_customAI@@@8 DD FLAT:??_7type_info@@6B@	; dp88_customAI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_customAI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_customAI@@6B@
rdata$r	SEGMENT
??_R4dp88_customAI@@6B@ DD 00H				; dp88_customAI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_customAI@@@8
	DD	FLAT:??_R3dp88_customAI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8 DD FLAT:??_R0?AVJFW_Object_Created_Hook_Base@@@8 ; JFW_Object_Created_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R2JFW_Object_Created_Hook_Base@@8 DD FLAT:??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8 ; JFW_Object_Created_Hook_Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R3JFW_Object_Created_Hook_Base@@8 DD 00H		; JFW_Object_Created_Hook_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVJFW_Object_Created_Hook_Base@@@8
_DATA	SEGMENT
??_R0?AVJFW_Object_Created_Hook_Base@@@8 DD FLAT:??_7type_info@@6B@ ; JFW_Object_Created_Hook_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVJFW_Object_Created_Hook_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4JFW_Object_Created_Hook_Base@@6B@
rdata$r	SEGMENT
??_R4JFW_Object_Created_Hook_Base@@6B@ DD 00H		; JFW_Object_Created_Hook_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVJFW_Object_Created_Hook_Base@@@8
	DD	FLAT:??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD FLAT:??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD 00H ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpC'
	DB	'lass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
rdata$r	SEGMENT
??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ DD 00H ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8
	DD	FLAT:??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8 DD FLAT:??_R0?AVMultiKeyHookScriptImpClass@@@8 ; MultiKeyHookScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R2MultiKeyHookScriptImpClass@@8 DD FLAT:??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8 ; MultiKeyHookScriptImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R3MultiKeyHookScriptImpClass@@8 DD 00H		; MultiKeyHookScriptImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMultiKeyHookScriptImpClass@@@8
_DATA	SEGMENT
??_R0?AVMultiKeyHookScriptImpClass@@@8 DD FLAT:??_7type_info@@6B@ ; MultiKeyHookScriptImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMultiKeyHookScriptImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MultiKeyHookScriptImpClass@@6B@
rdata$r	SEGMENT
??_R4MultiKeyHookScriptImpClass@@6B@ DD 00H		; MultiKeyHookScriptImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMultiKeyHookScriptImpClass@@@8
	DD	FLAT:??_R3MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@JFW_Key_Hook_Base@@8 DD FLAT:??_R0?AVJFW_Key_Hook_Base@@@8 ; JFW_Key_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R2JFW_Key_Hook_Base@@8 DD FLAT:??_R1A@?0A@EA@JFW_Key_Hook_Base@@8 ; JFW_Key_Hook_Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R3JFW_Key_Hook_Base@@8 DD 00H			; JFW_Key_Hook_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVJFW_Key_Hook_Base@@@8
_DATA	SEGMENT
??_R0?AVJFW_Key_Hook_Base@@@8 DD FLAT:??_7type_info@@6B@ ; JFW_Key_Hook_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVJFW_Key_Hook_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4JFW_Key_Hook_Base@@6B@
rdata$r	SEGMENT
??_R4JFW_Key_Hook_Base@@6B@ DD 00H			; JFW_Key_Hook_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVJFW_Key_Hook_Base@@@8
	DD	FLAT:??_R3JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SList@VScriptableGameObj@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SList@VScriptableGameObj@@@@8 DD FLAT:??_R0?AV?$SList@VScriptableGameObj@@@@@8 ; SList<ScriptableGameObj>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SList@VScriptableGameObj@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SList@VScriptableGameObj@@@@8
rdata$r	SEGMENT
??_R2?$SList@VScriptableGameObj@@@@8 DD FLAT:??_R1A@?0A@EA@?$SList@VScriptableGameObj@@@@8 ; SList<ScriptableGameObj>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$SList@VScriptableGameObj@@@@8
rdata$r	SEGMENT
??_R3?$SList@VScriptableGameObj@@@@8 DD 00H		; SList<ScriptableGameObj>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$SList@VScriptableGameObj@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SList@VScriptableGameObj@@@@@8
_DATA	SEGMENT
??_R0?AV?$SList@VScriptableGameObj@@@@@8 DD FLAT:??_7type_info@@6B@ ; SList<ScriptableGameObj> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SList@VScriptableGameObj@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$SList@VScriptableGameObj@@@@6B@
rdata$r	SEGMENT
??_R4?$SList@VScriptableGameObj@@@@6B@ DD 00H		; SList<ScriptableGameObj>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SList@VScriptableGameObj@@@@@8
	DD	FLAT:??_R3?$SList@VScriptableGameObj@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ReferencerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ReferencerClass@@8 DD FLAT:??_R0?AVReferencerClass@@@8 ; ReferencerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ReferencerClass@@8
rdata$r	SEGMENT
??_R2ReferencerClass@@8 DD FLAT:??_R1A@?0A@EA@ReferencerClass@@8 ; ReferencerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ReferencerClass@@8
rdata$r	SEGMENT
??_R3ReferencerClass@@8 DD 00H				; ReferencerClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReferencerClass@@@8
_DATA	SEGMENT
??_R0?AVReferencerClass@@@8 DD FLAT:??_7type_info@@6B@	; ReferencerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReferencerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ReferencerClass@@6B@
rdata$r	SEGMENT
??_R4ReferencerClass@@6B@ DD 00H			; ReferencerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReferencerClass@@@8
	DD	FLAT:??_R3ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R4PostLoadableClass@@6B@
rdata$r	SEGMENT
??_R4PostLoadableClass@@6B@ DD 00H			; PostLoadableClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPostLoadableClass@@@8
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PostLoadableClass@@8
rdata$r	SEGMENT
??_R2PostLoadableClass@@8 DD FLAT:??_R1A@?0A@EA@PostLoadableClass@@8 ; PostLoadableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PostLoadableClass@@8
rdata$r	SEGMENT
??_R3PostLoadableClass@@8 DD 00H			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPostLoadableClass@@@8
_DATA	SEGMENT
??_R0?AVPostLoadableClass@@@8 DD FLAT:??_7type_info@@6B@ ; PostLoadableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPostLoadableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PostLoadableClass@@8 DD FLAT:??_R0?AVPostLoadableClass@@@8 ; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INIClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INIClass@@8 DD FLAT:??_R0?AVINIClass@@@8	; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R2INIClass@@8
rdata$r	SEGMENT
??_R2INIClass@@8 DD FLAT:??_R1A@?0A@EA@INIClass@@8	; INIClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INIClass@@8
rdata$r	SEGMENT
??_R3INIClass@@8 DD 00H					; INIClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVINIClass@@@8
_DATA	SEGMENT
??_R0?AVINIClass@@@8 DD FLAT:??_7type_info@@6B@		; INIClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVINIClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INIClass@@6B@
rdata$r	SEGMENT
??_R4INIClass@@6B@ DD 00H				; INIClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVINIClass@@@8
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptImpClass@@8 DD FLAT:??_R0?AVScriptImpClass@@@8 ; ScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptImpClass@@8
rdata$r	SEGMENT
??_R2ScriptImpClass@@8 DD FLAT:??_R1A@?0A@EA@ScriptImpClass@@8 ; ScriptImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ScriptImpClass@@8
rdata$r	SEGMENT
??_R3ScriptImpClass@@8 DD 00H				; ScriptImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptImpClass@@@8
_DATA	SEGMENT
??_R0?AVScriptImpClass@@@8 DD FLAT:??_7type_info@@6B@	; ScriptImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptImpClass@@6B@
rdata$r	SEGMENT
??_R4ScriptImpClass@@6B@ DD 00H				; ScriptImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptImpClass@@@8
	DD	FLAT:??_R3ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R4GameObjObserverClass@@6B@
rdata$r	SEGMENT
??_R4GameObjObserverClass@@6B@ DD 00H			; GameObjObserverClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGameObjObserverClass@@@8
	DD	FLAT:??_R3GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R2GameObjObserverClass@@8
rdata$r	SEGMENT
??_R2GameObjObserverClass@@8 DD FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8 ; GameObjObserverClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GameObjObserverClass@@8
rdata$r	SEGMENT
??_R3GameObjObserverClass@@8 DD 00H			; GameObjObserverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGameObjObserverClass@@@8
_DATA	SEGMENT
??_R0?AVGameObjObserverClass@@@8 DD FLAT:??_7type_info@@6B@ ; GameObjObserverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGameObjObserverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GameObjObserverClass@@8 DD FLAT:??_R0?AVGameObjObserverClass@@@8 ; GameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptClass@@8 DD FLAT:??_R0?AVScriptClass@@@8 ; ScriptClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptClass@@8
rdata$r	SEGMENT
??_R2ScriptClass@@8 DD FLAT:??_R1A@?0A@EA@ScriptClass@@8 ; ScriptClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ScriptClass@@8
rdata$r	SEGMENT
??_R3ScriptClass@@8 DD 00H				; ScriptClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptClass@@@8
_DATA	SEGMENT
??_R0?AVScriptClass@@@8 DD FLAT:??_7type_info@@6B@	; ScriptClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptClass@@6B@
rdata$r	SEGMENT
??_R4ScriptClass@@6B@ DD 00H				; ScriptClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptClass@@@8
	DD	FLAT:??_R3ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptFactory@@8 DD FLAT:??_R0?AVScriptFactory@@@8 ; ScriptFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptFactory@@8
rdata$r	SEGMENT
??_R2ScriptFactory@@8 DD FLAT:??_R1A@?0A@EA@ScriptFactory@@8 ; ScriptFactory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ScriptFactory@@8
rdata$r	SEGMENT
??_R3ScriptFactory@@8 DD 00H				; ScriptFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptFactory@@@8
_DATA	SEGMENT
??_R0?AVScriptFactory@@@8 DD FLAT:??_7type_info@@6B@	; ScriptFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptFactory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptFactory@@6B@
rdata$r	SEGMENT
??_R4ScriptFactory@@6B@ DD 00H				; ScriptFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptFactory@@@8
	DD	FLAT:??_R3ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@
CONST	SEGMENT
??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@ DB 'ObjectPoolCl'
	DB	'ass<class GenericSLNode,256>::~ObjectPoolClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
CONST	SEGMENT
??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ DB '%d memor'
	DB	'y leaks found in ObjectPoolClass<class GenericSLNode,256>::~O'
	DB	'bjectPoolClass', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@
CONST	SEGMENT
??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@ DB 'ObjectPoolCl'
	DB	'ass<class GenericSLNode,256>::Allocate_Object_Memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HEHFNHDG@ScriptRegistrant?$DMclass?5dp88_link@
CONST	SEGMENT
??_C@_0DA@HEHFNHDG@ScriptRegistrant?$DMclass?5dp88_link@ DB 'ScriptRegist'
	DB	'rant<class dp88_linkHealth>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FEDGAINI@ScriptRegistrant?$DMclass?5dp88_AR_P@
CONST	SEGMENT
??_C@_0DE@FEDGAINI@ScriptRegistrant?$DMclass?5dp88_AR_P@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_Prism_Tower>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DKFLFAOF@ScriptRegistrant?$DMclass?5dp88_AR_p@
CONST	SEGMENT
??_C@_0DJ@DKFLFAOF@ScriptRegistrant?$DMclass?5dp88_AR_p@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_paradrop_Console>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PHAIAMPP@ScriptRegistrant?$DMclass?5dp88_AR_D@
CONST	SEGMENT
??_C@_0DC@PHAIAMPP@ScriptRegistrant?$DMclass?5dp88_AR_D@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_DemoTruck>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DHGHOENO@ScriptRegistrant?$DMclass?5dp88_Remo@
CONST	SEGMENT
??_C@_0DK@DHGHOENO@ScriptRegistrant?$DMclass?5dp88_Remo@ DB 'ScriptRegist'
	DB	'rant<class dp88_RemoteControlVehicle>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CMOOKAPN@ScriptRegistrant?$DMclass?5dp88_Remo@
CONST	SEGMENT
??_C@_0DK@CMOOKAPN@ScriptRegistrant?$DMclass?5dp88_Remo@ DB 'ScriptRegist'
	DB	'rant<class dp88_RemoteControlConsole>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@OKCGICOM@ScriptRegistrant?$DMclass?5dp88_Airc@
CONST	SEGMENT
??_C@_0ED@OKCGICOM@ScriptRegistrant?$DMclass?5dp88_Airc@ DB 'ScriptRegist'
	DB	'rant<class dp88_Aircraft_LandingZone_Aircraft>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@POENDPMO@ScriptRegistrant?$DMclass?5dp88_Airc@
CONST	SEGMENT
??_C@_0DK@POENDPMO@ScriptRegistrant?$DMclass?5dp88_Airc@ DB 'ScriptRegist'
	DB	'rant<class dp88_Aircraft_LandingZone>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@OLPOCJLH@ScriptRegistrant?$DMclass?5dp88_AR_C@
CONST	SEGMENT
??_C@_0DE@OLPOCJLH@ScriptRegistrant?$DMclass?5dp88_AR_C@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_CLEG_target>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HLMLBKJE@ScriptRegistrant?$DMclass?5dp88_AR_C@
CONST	SEGMENT
??_C@_0CN@HLMLBKJE@ScriptRegistrant?$DMclass?5dp88_AR_C@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_CLEG>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@NNLNBAKJ@ScriptRegistrant?$DMclass?5dp88_AR_D@
CONST	SEGMENT
??_C@_0DM@NNLNBAKJ@ScriptRegistrant?$DMclass?5dp88_AR_D@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_Deployable_Infantry>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@POLJMOBC@ScriptRegistrant?$DMclass?5dp88_AR_G@
CONST	SEGMENT
??_C@_0DH@POLJMOBC@ScriptRegistrant?$DMclass?5dp88_AR_G@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_GameController>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FOECPKBO@ScriptRegistrant?$DMclass?5dp88_AR_P@
CONST	SEGMENT
??_C@_0DB@FOECPKBO@ScriptRegistrant?$DMclass?5dp88_AR_P@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_Paradrop>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NDLGBNOC@ScriptRegistrant?$DMclass?5dp88_Ore_@
CONST	SEGMENT
??_C@_0DD@NDLGBNOC@ScriptRegistrant?$DMclass?5dp88_Ore_@ DB 'ScriptRegist'
	DB	'rant<class dp88_Ore_Dump_Zone>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GNEKOMJM@ScriptRegistrant?$DMclass?5dp88_Ore_@
CONST	SEGMENT
??_C@_0DD@GNEKOMJM@ScriptRegistrant?$DMclass?5dp88_Ore_@ DB 'ScriptRegist'
	DB	'rant<class dp88_Ore_Extractor>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NNLHKEFJ@ScriptRegistrant?$DMclass?5dp88_Ore_@
CONST	SEGMENT
??_C@_0CP@NNLHKEFJ@ScriptRegistrant?$DMclass?5dp88_Ore_@ DB 'ScriptRegist'
	DB	'rant<class dp88_Ore_Field>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@IKNPFBAM@ScriptRegistrant?$DMclass?5dp88_AR_C@
CONST	SEGMENT
??_C@_0EA@IKNPFBAM@ScriptRegistrant?$DMclass?5dp88_AR_C@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_Chrono_Miner_Chronozone>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MJPKOALH@ScriptRegistrant?$DMclass?5dp88_AR_C@
CONST	SEGMENT
??_C@_0DF@MJPKOALH@ScriptRegistrant?$DMclass?5dp88_AR_C@ DB 'ScriptRegist'
	DB	'rant<class dp88_AR_Chrono_Miner>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H
	DB	't', 00H, 's', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\scripts.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DPGAIJBN@ScriptRegistrant?$DMclass?5dp88_Ore_@
CONST	SEGMENT
??_C@_0CP@DPGAIJBN@ScriptRegistrant?$DMclass?5dp88_Ore_@ DB 'ScriptRegist'
	DB	'rant<class dp88_Ore_Miner>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EGDEANLB@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
CONST	SEGMENT
??_C@_0CN@EGDEANLB@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ DB 'SList<c'
	DB	'lass ScriptableGameObj>::Insert_After', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GGELGEEA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
CONST	SEGMENT
??_C@_0CO@GGELGEEA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ DB 'SList<c'
	DB	'lass ScriptableGameObj>::Insert_Before', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NFLHONKO@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
CONST	SEGMENT
??_C@_0CL@NFLHONKO@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ DB 'SList<c'
	DB	'lass ScriptableGameObj>::Remove_All', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MNGAMMMC@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
CONST	SEGMENT
??_C@_0CH@MNGAMMMC@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ DB 'SList<c'
	DB	'lass ScriptableGameObj>::Remove', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EIOKCJAJ@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
CONST	SEGMENT
??_C@_0CM@EIOKCJAJ@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ DB 'SList<c'
	DB	'lass ScriptableGameObj>::Remove_Head', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BJDGPFFE@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
CONST	SEGMENT
??_C@_0CJ@BJDGPFFE@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ DB 'SList<c'
	DB	'lass ScriptableGameObj>::Add_Tail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PFIOMDDA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
CONST	SEGMENT
??_C@_0CJ@PFIOMDDA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@ DB 'SList<c'
	DB	'lass ScriptableGameObj>::Add_Head', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct '
	DB	'MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Aft'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Be'
	DB	'fore', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Al'
	DB	'l', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_He'
	DB	'ad', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\slist.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct '
	DB	'MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OEHKMOBH@parentObjectId?$DN0?3int?$AA@
CONST	SEGMENT
??_C@_0BF@OEHKMOBH@parentObjectId?$DN0?3int?$AA@ DB 'parentObjectId=0:int'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_linkHealth@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_linkHealth@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_linkHealth@@@@6B@ ; ScriptRegistrant<dp88_linkHealth>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0CGM@JMPONBPF@Priority_Infantry?$DN1?40?3float?0Spla@
CONST	SEGMENT
??_C@_0CGM@JMPONBPF@Priority_Infantry?$DN1?40?3float?0Spla@ DB 'Priority_'
	DB	'Infantry=1.0:float,Splash_Infantry=0:int,Priority_Light_Vehic'
	DB	'le=5.0:float,Priority_Heavy_Vehicle=7.0:float,Priority_VTOL=0'
	DB	'.0:float,Min_Attack_Range=0:int,Max_Attack_Range=150:int,Anim'
	DB	'ation_Model:string,Animation_Model_Bone:string,Animation:stri'
	DB	'ng,Animation_Idle_Start_Frame:int,Animation_Idle_End_Frame:in'
	DB	't,Animation_Unpowered_Start_Frame:int,Animation_Unpowered_End'
	DB	'_Frame:int,Animation_Charge_Start_Frame:int,Animation_Charge_'
	DB	'End_Frame:int,Charge_Sound:string,Modifier_Distance=0.25:floa'
	DB	't,Modifier_Target_Damage=0.1:float,Modifier_Target_Value=0.25'
	DB	':float,Requires_Power=1:int,Debug=0:int,Detects_Stealth=1:int'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@6B@ ; ScriptRegistrant<dp88_AR_Prism_Tower>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BJ@IPIIGGCN@dp88_AR_paradrop_Console?$AA@
CONST	SEGMENT
??_C@_0BJ@IPIIGGCN@dp88_AR_paradrop_Console?$AA@ DB 'dp88_AR_paradrop_Con'
	DB	'sole', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EPIMNCDH@team?$DN1?3int?$AA@
CONST	SEGMENT
??_C@_0L@EPIMNCDH@team?$DN1?3int?$AA@ DB 'team=1:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@6B@ ; ScriptRegistrant<dp88_AR_paradrop_Console>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BC@IIFFAIPL@dp88_AR_DemoTruck?$AA@
CONST	SEGMENT
??_C@_0BC@IIFFAIPL@dp88_AR_DemoTruck?$AA@ DB 'dp88_AR_DemoTruck', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0KO@KLKMOMBJ@explosionPreset?$DNExplosion_NukeBe@
CONST	SEGMENT
??_C@_0KO@KLKMOMBJ@explosionPreset?$DNExplosion_NukeBe@ DB 'explosionPres'
	DB	'et=Explosion_NukeBeacon:string,cinematicPreset=null:string,bu'
	DB	'ildingDamageRange=50.0:float,buildingDamageWarhead=Nuke:strin'
	DB	'g,buildingDamageStrength=2200.00:float', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@6B@ ; ScriptRegistrant<dp88_AR_DemoTruck>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BK@GPCMCCPB@dp88_RemoteControlVehicle?$AA@
CONST	SEGMENT
??_C@_0BK@GPCMCCPB@dp88_RemoteControlVehicle?$AA@ DB 'dp88_RemoteControlV'
	DB	'ehicle', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PHNHOOHC@remoteControlID?3int?$AA@
CONST	SEGMENT
??_C@_0BE@PHNHOOHC@remoteControlID?3int?$AA@ DB 'remoteControlID:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@6B@ ; ScriptRegistrant<dp88_RemoteControlVehicle>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BOB@BNNBNENM@remoteControlID?3int?0vehiclePrese@
CONST	SEGMENT
??_C@_0BOB@BNNBNENM@remoteControlID?3int?0vehiclePrese@ DB 'remoteControl'
	DB	'ID:int,vehiclePreset:string,cost:int,team:int,chargeTime=0:in'
	DB	't,accessDeniedSound:string,consoleOfflineSound:string,console'
	DB	'ChargingSound:string,insufficientFundsSound:string,connection'
	DB	'EstablishedSound:string,animationName:string,animFrameAvailab'
	DB	'le1=0:int,animFrameAvailable2=0:int,animFrameCharging1=0:int,'
	DB	'animFrameCharging2=0:int,animFrameActive1=0:int,animFrameActi'
	DB	've2=0:int,animFrameIdle1=0:int,animFrameIdle2=0:int,animFrame'
	DB	'Disabled1=0:int,animFrameDisabled2=0:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@6B@ ; ScriptRegistrant<dp88_RemoteControlConsole>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0CD@LOAPGCML@dp88_Aircraft_LandingZone_Aircra@
CONST	SEGMENT
??_C@_0CD@LOAPGCML@dp88_Aircraft_LandingZone_Aircra@ DB 'dp88_Aircraft_La'
	DB	'ndingZone_Aircraft', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0IN@KBAICBIG@landing_anim_name?$DNmodelfile?4anim@
CONST	SEGMENT
??_C@_0IN@KBAICBIG@landing_anim_name?$DNmodelfile?4anim@ DB 'landing_anim'
	DB	'_name=modelfile.animfile:string,landing_anim_first_frame=0.0:'
	DB	'float,landing_anim_last_frame=25.0:float,require_landing_zone'
	DB	'=1:int', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@6B@ ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BK@IKKCDGAC@dp88_Aircraft_LandingZone?$AA@
CONST	SEGMENT
??_C@_0BK@IKKCDGAC@dp88_Aircraft_LandingZone?$AA@ DB 'dp88_Aircraft_Landi'
	DB	'ngZone', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@6B@ ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BE@KBJNNOAB@dp88_AR_CLEG_target?$AA@
CONST	SEGMENT
??_C@_0BE@KBJNNOAB@dp88_AR_CLEG_target?$AA@ DB 'dp88_AR_CLEG_target', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HPCMPHIH@resistance?$DN20?3int?0clegEffectPres@
CONST	SEGMENT
??_C@_0CP@HPCMPHIH@resistance?$DN20?3int?0clegEffectPres@ DB 'resistance='
	DB	'20:int,clegEffectPreset=null:string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@6B@ ; ScriptRegistrant<dp88_AR_CLEG_target>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0N@PFLALNEJ@dp88_AR_CLEG?$AA@
CONST	SEGMENT
??_C@_0N@PFLALNEJ@dp88_AR_CLEG?$AA@ DB 'dp88_AR_CLEG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_CLEG@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_CLEG@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_CLEG@@@@6B@ ; ScriptRegistrant<dp88_AR_CLEG>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BM@EGCLMKMH@dp88_AR_Deployable_Infantry?$AA@
CONST	SEGMENT
??_C@_0BM@EGCLMKMH@dp88_AR_Deployable_Infantry?$AA@ DB 'dp88_AR_Deployabl'
	DB	'e_Infantry', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BOM@OOMAMMGA@deployedObjectPreset?$DNnull?3string@
CONST	SEGMENT
??_C@_0BOM@OOMAMMGA@deployedObjectPreset?$DNnull?3string@ DB 'deployedObj'
	DB	'ectPreset=null:string,deployedObjectSpaceRequired=6:float,dep'
	DB	'loyAnimation=obj.obj:string,deployTime=4:float,undeployAnimat'
	DB	'ion=obj.obj:string,undeployTime=4:float,deployedWeaponPowerup'
	DB	'=null:string,deployedWeaponPowerup_veteran=null:string,deploy'
	DB	'edWeaponPowerup_elite=null:string,cannotDeployStringId=0:int,'
	DB	'deployKeyhook=IDeploy:string,deployedArmourType=null:string,d'
	DB	'eployedArmourType_veteran=null:string,deployedArmourType_elit'
	DB	'e=null:string,deploySound:string,undeploySound:string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@6B@ ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BH@PJCOCBOM@dp88_AR_GameController?$AA@
CONST	SEGMENT
??_C@_0BH@PJCOCBOM@dp88_AR_GameController?$AA@ DB 'dp88_AR_GameController'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BIE@EKBGJJ@enableCountry_Russia?$DN1?3int?0enabl@
CONST	SEGMENT
??_C@_0BIE@EKBGJJ@enableCountry_Russia?$DN1?3int?0enabl@ DB 'enableCountr'
	DB	'y_Russia=1:int,enableCountry_Cuba=1:int,enableCountry_Iraq=1:'
	DB	'int,enableCountry_Libya=1:int,enableCountry_America=1:int,ena'
	DB	'bleCountry_France=1:int,enableCountry_Germany=1:int,enableCou'
	DB	'ntry_GreatBritain=1:int,enableCountry_Korea=1:int,MirageTank_'
	DB	'disguisePreset_1=mt_tree:string,MirageTank_disguisePreset_2=n'
	DB	'ull:string,MirageTank_disguisePreset_3=null:string,Camouflage'
	DB	'=u:string', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_GameController@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_GameController@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_GameController@@@@6B@ ; ScriptRegistrant<dp88_AR_GameController>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IPEMGAI@parentObjectId?$AA@
CONST	SEGMENT
??_C@_0P@IPEMGAI@parentObjectId?$AA@ DB 'parentObjectId', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HEKCLJAN@muzzlea0?$AA@
CONST	SEGMENT
??_C@_08HEKCLJAN@muzzlea0?$AA@ DB 'muzzlea0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EGGNPPMF@dp88_AR_Prism_Tower?$AA@
CONST	SEGMENT
??_C@_0BE@EGGNPPMF@dp88_AR_Prism_Tower?$AA@ DB 'dp88_AR_Prism_Tower', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
CONST	SEGMENT
??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@ DB 'dp88_AR_Prism_'
	DB	'Tower::calculateTowerMap', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
_DATA	SEGMENT
?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206 DD 0badH ; `dp88_AR_Prism_Tower::calculateTowerMap'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@NMNGKBLJ@dp88_AR_Prism_Tower?3?3clearTowerM@
CONST	SEGMENT
??_C@_0CD@NMNGKBLJ@dp88_AR_Prism_Tower?3?3clearTowerM@ DB 'dp88_AR_Prism_'
	DB	'Tower::clearTowerMap', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z@4JA@6d493206
_DATA	SEGMENT
?__LINE__Var@?1??clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z@4JA@6d493206 DD 0b9fH ; `dp88_AR_Prism_Tower::clearTowerMap'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@IILHOKGK@dp88_AR_Paradrop?$AA@
CONST	SEGMENT
??_C@_0BB@IILHOKGK@dp88_AR_Paradrop?$AA@ DB 'dp88_AR_Paradrop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JN@MOLJIONA@Infantry_Preset?3string?0Parachute@
CONST	SEGMENT
??_C@_0JN@MOLJIONA@Infantry_Preset?3string?0Parachute@ DB 'Infantry_Prese'
	DB	't:string,Parachute_Model:string,Parachute_Bone:string,Animati'
	DB	'on:string,Animation_First_Frame:int,Animation_Last_Frame:int,'
	DB	'Animation_Looped:int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@6B@ ; ScriptRegistrant<dp88_AR_Paradrop>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BA@NHMIOHB@Infantry_Preset?$AA@
CONST	SEGMENT
??_C@_0BA@NHMIOHB@Infantry_Preset?$AA@ DB 'Infantry_Preset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EPLABFHB@dp88_AR_Paradrop?3?3Detach?$AA@
CONST	SEGMENT
??_C@_0BJ@EPLABFHB@dp88_AR_Paradrop?3?3Detach?$AA@ DB 'dp88_AR_Paradrop::'
	DB	'Detach', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA DD 0b3dH ; `dp88_AR_Paradrop::Detach'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@IGICMLKJ@Animation_First_Frame?$AA@
CONST	SEGMENT
??_C@_0BG@IGICMLKJ@Animation_First_Frame?$AA@ DB 'Animation_First_Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LOKKEGED@Animation_Last_Frame?$AA@
CONST	SEGMENT
??_C@_0BF@LOKKEGED@Animation_Last_Frame?$AA@ DB 'Animation_Last_Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FIHKMGIB@Animation_Looped?$AA@
CONST	SEGMENT
??_C@_0BB@FIHKMGIB@Animation_Looped?$AA@ DB 'Animation_Looped', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IDPMNJAO@dp88_AR_Paradrop?3?3Created?$AA@
CONST	SEGMENT
??_C@_0BK@IDPMNJAO@dp88_AR_Paradrop?3?3Created?$AA@ DB 'dp88_AR_Paradrop:'
	DB	':Created', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA DD 0ad9H ; `dp88_AR_Paradrop::Created'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09ONEINPNJ@Animation?$AA@
CONST	SEGMENT
??_C@_09ONEINPNJ@Animation?$AA@ DB 'Animation', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HIPDHOEE@Parachute_Bone?$AA@
CONST	SEGMENT
??_C@_0P@HIPDHOEE@Parachute_Bone?$AA@ DB 'Parachute_Bone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NHJNEILC@Invisible_Object?$AA@
CONST	SEGMENT
??_C@_0BB@NHJNEILC@Invisible_Object?$AA@ DB 'Invisible_Object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CGGKAAON@Parachute_Model?$AA@
CONST	SEGMENT
??_C@_0BA@CGGKAAON@Parachute_Model?$AA@ DB 'Parachute_Model', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IKBANCEK@Earth?$AA@
CONST	SEGMENT
??_C@_05IKBANCEK@Earth?$AA@ DB 'Earth', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@LLBGFEEK@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
CONST	SEGMENT
??_C@_0GL@LLBGFEEK@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ DB '['
	DB	'%d:%s:%s] Critical Error: This script is only compatible with'
	DB	' soldier game objects. Destroying script...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKEHFKKN@Allied_GI_Paradrop?$AA@
CONST	SEGMENT
??_C@_0BD@DKEHFKKN@Allied_GI_Paradrop?$AA@ DB 'Allied_GI_Paradrop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BGFNOIH@This?5can?5only?5be?5used?5once?5every@
CONST	SEGMENT
??_C@_0CM@BGFNOIH@This?5can?5only?5be?5used?5once?5every@ DB 'This can on'
	DB	'ly be used once every 3 minutes', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PNAKAEKE@Invalid?5Security?5Clearance?6?$AA@
CONST	SEGMENT
??_C@_0BM@PNAKAEKE@Invalid?5Security?5Clearance?6?$AA@ DB 'Invalid Securi'
	DB	'ty Clearance', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JMLOMBPP@RA_DriverDeath?$AA@
CONST	SEGMENT
??_C@_0P@JMLOMBPP@RA_DriverDeath?$AA@ DB 'RA_DriverDeath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FNJCPKOH@cinematicPreset?$AA@
CONST	SEGMENT
??_C@_0BA@FNJCPKOH@cinematicPreset?$AA@ DB 'cinematicPreset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FCFHJPEP@buildingDamageStrength?$AA@
CONST	SEGMENT
??_C@_0BH@FCFHJPEP@buildingDamageStrength?$AA@ DB 'buildingDamageStrength'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KMGGAABJ@buildingDamageWarhead?$AA@
CONST	SEGMENT
??_C@_0BG@KMGGAABJ@buildingDamageWarhead?$AA@ DB 'buildingDamageWarhead', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OCAKJEGI@buildingDamageRange?$AA@
CONST	SEGMENT
??_C@_0BE@OCAKJEGI@buildingDamageRange?$AA@ DB 'buildingDamageRange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PJMIDBDG@explosionPreset?$AA@
CONST	SEGMENT
??_C@_0BA@PJMIDBDG@explosionPreset?$AA@ DB 'explosionPreset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EJNIJBHG@dp88_RemoteControlConsole?$AA@
CONST	SEGMENT
??_C@_0BK@EJNIJBHG@dp88_RemoteControlConsole?$AA@ DB 'dp88_RemoteControlC'
	DB	'onsole', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PNDCLJGA@animFrameAvailable1?$AA@
CONST	SEGMENT
??_C@_0BE@PNDCLJGA@animFrameAvailable1?$AA@ DB 'animFrameAvailable1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NGBPOKKD@animFrameAvailable2?$AA@
CONST	SEGMENT
??_C@_0BE@NGBPOKKD@animFrameAvailable2?$AA@ DB 'animFrameAvailable2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MGFDOIMB@animFrameCharging1?$AA@
CONST	SEGMENT
??_C@_0BD@MGFDOIMB@animFrameCharging1?$AA@ DB 'animFrameCharging1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ONHOLLAC@animFrameCharging2?$AA@
CONST	SEGMENT
??_C@_0BD@ONHOLLAC@animFrameCharging2?$AA@ DB 'animFrameCharging2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DFJAMMH@animFrameIdle1?$AA@
CONST	SEGMENT
??_C@_0P@DFJAMMH@animFrameIdle1?$AA@ DB 'animFrameIdle1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CIHEFPAE@animFrameIdle2?$AA@
CONST	SEGMENT
??_C@_0P@CIHEFPAE@animFrameIdle2?$AA@ DB 'animFrameIdle2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DPLICIMK@animFrameActive1?$AA@
CONST	SEGMENT
??_C@_0BB@DPLICIMK@animFrameActive1?$AA@ DB 'animFrameActive1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BEJFHLAJ@animFrameActive2?$AA@
CONST	SEGMENT
??_C@_0BB@BEJFHLAJ@animFrameActive2?$AA@ DB 'animFrameActive2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MKCKBGNB@animationName?$AA@
CONST	SEGMENT
??_C@_0O@MKCKBGNB@animationName?$AA@ DB 'animationName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BGDGHAGF@animFrameDisabled1?$AA@
CONST	SEGMENT
??_C@_0BD@BGDGHAGF@animFrameDisabled1?$AA@ DB 'animFrameDisabled1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DNBLCDKG@animFrameDisabled2?$AA@
CONST	SEGMENT
??_C@_0BD@DNBLCDKG@animFrameDisabled2?$AA@ DB 'animFrameDisabled2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MJLACLOO@S_A_HUMAN?4H_A_A0A0?$AA@
CONST	SEGMENT
??_C@_0BD@MJLACLOO@S_A_HUMAN?4H_A_A0A0?$AA@ DB 'S_A_HUMAN.H_A_A0A0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@
CONST	SEGMENT
??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@ DB 'dp88_linkHealth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CEGEOPPJ@Invisible_Object_2?$AA@
CONST	SEGMENT
??_C@_0BD@CEGEOPPJ@Invisible_Object_2?$AA@ DB 'Invisible_Object_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JNCLKLPE@connectionEstablishedSound?$AA@
CONST	SEGMENT
??_C@_0BL@JNCLKLPE@connectionEstablishedSound?$AA@ DB 'connectionEstablis'
	DB	'hedSound', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCGHCFJE@remoteControlID?$AA@
CONST	SEGMENT
??_C@_0BA@MCGHCFJE@remoteControlID?$AA@ DB 'remoteControlID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HKFGMBNK@vehiclePreset?$AA@
CONST	SEGMENT
??_C@_0O@HKFGMBNK@vehiclePreset?$AA@ DB 'vehiclePreset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GAEICIMG@insufficientFundsSound?$AA@
CONST	SEGMENT
??_C@_0BH@GAEICIMG@insufficientFundsSound?$AA@ DB 'insufficientFundsSound'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04JJOOIINB@cost?$AA@
CONST	SEGMENT
??_C@_04JJOOIINB@cost?$AA@ DB 'cost', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MJKOCOEE@consoleChargingSound?$AA@
CONST	SEGMENT
??_C@_0BF@MJKOCOEE@consoleChargingSound?$AA@ DB 'consoleChargingSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GFAECMKC@consoleOfflineSound?$AA@
CONST	SEGMENT
??_C@_0BE@GFAECMKC@consoleOfflineSound?$AA@ DB 'consoleOfflineSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ELJPHEC@accessDeniedSound?$AA@
CONST	SEGMENT
??_C@_0BC@ELJPHEC@accessDeniedSound?$AA@ DB 'accessDeniedSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KADBPNCB@team?$AA@
CONST	SEGMENT
??_C@_04KADBPNCB@team?$AA@ DB 'team', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KHBMMJCA@dp88_RemoteControlConsole?3?3Detac@
CONST	SEGMENT
??_C@_0CC@KHBMMJCA@dp88_RemoteControlConsole?3?3Detac@ DB 'dp88_RemoteCon'
	DB	'trolConsole::Detach', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA DD 085dH ; `dp88_RemoteControlConsole::Detach'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@JPHIBELA@dp88_RemoteControlConsole?3?3Creat@
CONST	SEGMENT
??_C@_0CD@JPHIBELA@dp88_RemoteControlConsole?3?3Creat@ DB 'dp88_RemoteCon'
	DB	'trolConsole::Created', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA DD 0846H ; `dp88_RemoteControlConsole::Created'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@PPADADDF@chargeTime?$AA@
CONST	SEGMENT
??_C@_0L@PPADADDF@chargeTime?$AA@ DB 'chargeTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KIICMLNP@landing_anim_name?$AA@
CONST	SEGMENT
??_C@_0BC@KIICMLNP@landing_anim_name?$AA@ DB 'landing_anim_name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KLMKDHMN@landing_anim_first_frame?$AA@
CONST	SEGMENT
??_C@_0BJ@KLMKDHMN@landing_anim_first_frame?$AA@ DB 'landing_anim_first_f'
	DB	'rame', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DCNEIFIO@landing_anim_last_frame?$AA@
CONST	SEGMENT
??_C@_0BI@DCNEIFIO@landing_anim_last_frame?$AA@ DB 'landing_anim_last_fra'
	DB	'me', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IOLCGKKE@JFW_Timer_Destroy_Object?$AA@
CONST	SEGMENT
??_C@_0BJ@IOLCGKKE@JFW_Timer_Destroy_Object?$AA@ DB 'JFW_Timer_Destroy_Ob'
	DB	'ject', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JFPBEDHA@1?40?0547859?05000?40?0Death?$AA@
CONST	SEGMENT
??_C@_0BI@JFPBEDHA@1?40?0547859?05000?40?0Death?$AA@ DB '1.0,547859,5000.'
	DB	'0,Death', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EPONAFJP@require_landing_zone?$AA@
CONST	SEGMENT
??_C@_0BF@EPONAFJP@require_landing_zone?$AA@ DB 'require_landing_zone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CEMIOEF@Team?$DN0?3int?$AA@
CONST	SEGMENT
??_C@_0L@CEMIOEF@Team?$DN0?3int?$AA@ DB 'Team=0:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@6B@ ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_04GBPANCCF@Team?$AA@
CONST	SEGMENT
??_C@_04GBPANCCF@Team?$AA@ DB 'Team', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LIFBBGKP@dp88_Ore_Extractor?$AA@
CONST	SEGMENT
??_C@_0BD@LIFBBGKP@dp88_Ore_Extractor?$AA@ DB 'dp88_Ore_Extractor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@GELKPOJM@Ore_Units?3int?0Extraction_Interva@
CONST	SEGMENT
??_C@_0EC@GELKPOJM@Ore_Units?3int?0Extraction_Interva@ DB 'Ore_Units:int,'
	DB	'Extraction_Interval:int,Extraction_Animation:string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@6B@ ; ScriptRegistrant<dp88_Ore_Extractor>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0FF@PEMPDPCP@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Unabl@
CONST	SEGMENT
??_C@_0FF@PEMPDPCP@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Unabl@ DB '['
	DB	'%d:%s:%s] Critical Error: Unable to locate an ore field zone.'
	DB	' Destroying script...', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HAMAJFGE@Extraction_Animation?$AA@
CONST	SEGMENT
??_C@_0BF@HAMAJFGE@Extraction_Animation?$AA@ DB 'Extraction_Animation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PJJOFNID@Extraction_Interval?$AA@
CONST	SEGMENT
??_C@_0BE@PJJOFNID@Extraction_Interval?$AA@ DB 'Extraction_Interval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MG@HFFBHDGO@Ore_Value?3int?0Ore_Capacity?3int?0O@
CONST	SEGMENT
??_C@_0MG@HFFBHDGO@Ore_Value?3int?0Ore_Capacity?3int?0O@ DB 'Ore_Value:in'
	DB	't,Ore_Capacity:int,Ore_Units:int,Animation_Name:string,Animat'
	DB	'ion_Full_Frame:int,Animation_Empty_Frame:int,Zone_Size:vector'
	DB	'3,Zone_Anim_Step_X:float,Zone_Anim_Step_Y:float,AI_Ignore=0:i'
	DB	'nt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Ore_Field@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Ore_Field@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Ore_Field@@@@6B@ ; ScriptRegistrant<dp88_Ore_Field>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BH@KKKPGEKM@dp88_Ore_Field?3?3Detach?$AA@
CONST	SEGMENT
??_C@_0BH@KKKPGEKM@dp88_Ore_Field?3?3Detach?$AA@ DB 'dp88_Ore_Field::Deta'
	DB	'ch', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA DD 06bcH ; `dp88_Ore_Field::Detach'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FJ@HJNJMOHF@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Unabl@
CONST	SEGMENT
??_C@_0FJ@HJNJMOHF@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Unabl@ DB '['
	DB	'%d:%s:%s] Critical Error: Unable to create the miner script z'
	DB	'one. Destroying script...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HLHLGIBG@dp88_Ore_Field?3?3Created?$AA@
CONST	SEGMENT
??_C@_0BI@HLHLGIBG@dp88_Ore_Field?3?3Created?$AA@ DB 'dp88_Ore_Field::Cre'
	DB	'ated', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA DD 067aH ; `dp88_Ore_Field::Created'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@HNDGJMLL@Script_Zone_All?$AA@
CONST	SEGMENT
??_C@_0BA@HNDGJMLL@Script_Zone_All?$AA@ DB 'Script_Zone_All', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNOAKNMM@AI_Ignore?$AA@
CONST	SEGMENT
??_C@_09FNOAKNMM@AI_Ignore?$AA@ DB 'AI_Ignore', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBAPBMPH@Zone_Anim_Step_Y?$AA@
CONST	SEGMENT
??_C@_0BB@GBAPBMPH@Zone_Anim_Step_Y?$AA@ DB 'Zone_Anim_Step_Y', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HIBECNLG@Zone_Anim_Step_X?$AA@
CONST	SEGMENT
??_C@_0BB@HIBECNLG@Zone_Anim_Step_X?$AA@ DB 'Zone_Anim_Step_X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KINPNLGC@Zone_Size?$AA@
CONST	SEGMENT
??_C@_09KINPNLGC@Zone_Size?$AA@ DB 'Zone_Size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LKFEMCPO@Animation_Empty_Frame?$AA@
CONST	SEGMENT
??_C@_0BG@LKFEMCPO@Animation_Empty_Frame?$AA@ DB 'Animation_Empty_Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KOGHJIGL@Animation_Full_Frame?$AA@
CONST	SEGMENT
??_C@_0BF@KOGHJIGL@Animation_Full_Frame?$AA@ DB 'Animation_Full_Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KOIPOOMD@Animation_Name?$AA@
CONST	SEGMENT
??_C@_0P@KOIPOOMD@Animation_Name?$AA@ DB 'Animation_Name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ILICBFCO@Ore_Units?$AA@
CONST	SEGMENT
??_C@_09ILICBFCO@Ore_Units?$AA@ DB 'Ore_Units', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KFMCNPID@Ore_Value?$AA@
CONST	SEGMENT
??_C@_09KFMCNPID@Ore_Value?$AA@ DB 'Ore_Value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@6B@ ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0GM@LGOKCEAC@dp88_AR_Chrono_Miner_Chronozone?5@
CONST	SEGMENT
??_C@_0GM@LGOKCEAC@dp88_AR_Chrono_Miner_Chronozone?5@ DB 'dp88_AR_Chrono_'
	DB	'Miner_Chronozone - Unable to find Game Controller, unable to '
	DB	'continue. Destroying script...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CAOJFLI@dp88_ar_gameController?$AA@
CONST	SEGMENT
??_C@_0BH@CAOJFLI@dp88_ar_gameController?$AA@ DB 'dp88_ar_gameController', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EMHNCJLM@dp88_AR_Chrono_Miner?$AA@
CONST	SEGMENT
??_C@_0BF@EMHNCJLM@dp88_AR_Chrono_Miner?$AA@ DB 'dp88_AR_Chrono_Miner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BMK@OGKPIJCA@Use_AI?$DN1?3int?0chronoshift_time?$DN2?4@
CONST	SEGMENT
??_C@_0BMK@OGKPIJCA@Use_AI?$DN1?3int?0chronoshift_time?$DN2?4@ DB 'Use_AI'
	DB	'=1:int,chronoshift_time=2.5:float,chronoshift_out_effect_pres'
	DB	'et:string,chronoshift_out_effect_time:float,chronoshift_in_ef'
	DB	'fect_preset:string,chronoshift_in_effect_time:float,chronoshi'
	DB	'ftKeyhook=VDeploy:string,Ore_Capacity=5:int,Ore_Mining_Time=1'
	DB	'.00:float,Ore_Dump_Time=4.0:float,emergencyChronoshiftHealthT'
	DB	'hreshold=30.0:float,AI_Init_Delay=10:int,Dump_Animation:strin'
	DB	'g,Dump_Sound:string,Mining_Animation:String,Mining_Sound:stri'
	DB	'ng,Idle_Animation:string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@6B@ ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BL@HDHHGK@chronoshift_in_effect_time?$AA@
CONST	SEGMENT
??_C@_0BL@HDHHGK@chronoshift_in_effect_time?$AA@ DB 'chronoshift_in_effec'
	DB	't_time', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IMGAEHDB@chronoshift_in_effect_preset?$AA@
CONST	SEGMENT
??_C@_0BN@IMGAEHDB@chronoshift_in_effect_preset?$AA@ DB 'chronoshift_in_e'
	DB	'ffect_preset', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@
CONST	SEGMENT
??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@ DB 'JFW_Destroy_Self_Timer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@
CONST	SEGMENT
??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@ DB '%.2f,%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ODINNJLO@chronoshift_out_effect_time?$AA@
CONST	SEGMENT
??_C@_0BM@ODINNJLO@chronoshift_out_effect_time?$AA@ DB 'chronoshift_out_e'
	DB	'ffect_time', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FIFKCKDL@chronoshift_out_effect_preset?$AA@
CONST	SEGMENT
??_C@_0BO@FIFKCKDL@chronoshift_out_effect_preset?$AA@ DB 'chronoshift_out'
	DB	'_effect_preset', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DCMPPMMN@chronoshift_time?$AA@
CONST	SEGMENT
??_C@_0BB@DCMPPMMN@chronoshift_time?$AA@ DB 'chronoshift_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CFCDHMOJ@dp88_AR_Chrono_Miner_Chronozone?$AA@
CONST	SEGMENT
??_C@_0CA@CFCDHMOJ@dp88_AR_Chrono_Miner_Chronozone?$AA@ DB 'dp88_AR_Chron'
	DB	'o_Miner_Chronozone', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@PGKDDPLE@The?5AI?5Chronominer?5was?5unable?5to@
CONST	SEGMENT
??_C@_0FI@PGKDDPLE@The?5AI?5Chronominer?5was?5unable?5to@ DB 'The AI Chro'
	DB	'nominer was unable to chronoshift, please clear the area arou'
	DB	'nd the refinery', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@EGDHOOGB@Unable?5to?5chronoshift?0?5all?5targe@
CONST	SEGMENT
??_C@_0DL@EGDHOOGB@Unable?5to?5chronoshift?0?5all?5targe@ DB 'Unable to c'
	DB	'hronoshift, all target zones are unavailable...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JCAONOKO@chronoshiftKeyhook?$AA@
CONST	SEGMENT
??_C@_0BD@JCAONOKO@chronoshiftKeyhook?$AA@ DB 'chronoshiftKeyhook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GDNCMBMM@emergencyChronoshiftHealthThresh@
CONST	SEGMENT
??_C@_0CE@GDNCMBMM@emergencyChronoshiftHealthThresh@ DB 'emergencyChronos'
	DB	'hiftHealthThreshold', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PNGCCGHJ@dp88_Ore_Miner?$AA@
CONST	SEGMENT
??_C@_0P@PNGCCGHJ@dp88_Ore_Miner?$AA@ DB 'dp88_Ore_Miner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0OL@IPNIEICP@Use_AI?$DN1?3int?0Ore_Capacity?$DN10?3int@
CONST	SEGMENT
??_C@_0OL@IPNIEICP@Use_AI?$DN1?3int?0Ore_Capacity?$DN10?3int@ DB 'Use_AI='
	DB	'1:int,Ore_Capacity=10:int,Ore_Mining_Time=2.0:float,Ore_Dump_'
	DB	'Time=8.0:float,AI_Init_Delay=10:int,Dump_Animation:string,Dum'
	DB	'p_Sound:string,Mining_Animation:String,Mining_Sound:string,Id'
	DB	'le_Animation:string,Resource_Name=ore:string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Ore_Miner@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Ore_Miner@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Ore_Miner@@@@6B@ ; ScriptRegistrant<dp88_Ore_Miner>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BD@EDKPCDPK@dp88_Ore_Dump_Zone?$AA@
CONST	SEGMENT
??_C@_0BD@EDKPCDPK@dp88_Ore_Dump_Zone?$AA@ DB 'dp88_Ore_Dump_Zone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BAIFIPKL@Collecting?5?$CFs?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BB@BAIFIPKL@Collecting?5?$CFs?4?4?4?$AA@ DB 'Collecting %s...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$SList@VScriptableGameObj@@@@6B@
CONST	SEGMENT
??_7?$SList@VScriptableGameObj@@@@6B@ DD FLAT:??_R4?$SList@VScriptableGameObj@@@@6B@ ; SList<ScriptableGameObj>::`vftable'
	DD	FLAT:??_E?$SList@VScriptableGameObj@@@@UAEPAXI@Z
	DD	FLAT:?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z
	DD	FLAT:?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z
	DD	FLAT:?Remove_Head@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Remove_Tail@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Remove@?$SList@VScriptableGameObj@@@@UAE_NPBVScriptableGameObj@@@Z
	DD	FLAT:?Remove_All@?$SList@VScriptableGameObj@@@@UAEXXZ
	DD	FLAT:?Insert_Before@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z
	DD	FLAT:?Insert_After@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z
	DD	FLAT:?Is_Empty@?$SList@VScriptableGameObj@@@@UBE_NXZ
	DD	FLAT:?Get_Count@?$SList@VScriptableGameObj@@@@UBEIXZ
CONST	ENDS
;	COMDAT ??_C@_0GA@KPOINCBL@?$CFs?5unloaded?5successfully?0?5you?5ha@
CONST	SEGMENT
??_C@_0GA@KPOINCBL@?$CFs?5unloaded?5successfully?0?5you?5ha@ DB '%s unloa'
	DB	'ded successfully, you have earned %d credits for each player '
	DB	'and %d points for yourself', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KJFHADCP@Unloading?5?$CFs?0?5please?5stand?5by?4?4?4@
CONST	SEGMENT
??_C@_0CB@KJFHADCP@Unloading?5?$CFs?0?5please?5stand?5by?4?4?4@ DB 'Unloa'
	DB	'ding %s, please stand by...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@EMBEDAFA@Fully?5loaded?5with?5?$CFs?0?5dock?5at?5th@
CONST	SEGMENT
??_C@_0EK@EMBEDAFA@Fully?5loaded?5with?5?$CFs?0?5dock?5at?5th@ DB 'Fully '
	DB	'loaded with %s, dock at the Refinery to process the %s into c'
	DB	'redits', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@HMPCAJCL@The?5?$CFs?5field?5is?5depleted?0?5find?5a@
CONST	SEGMENT
??_C@_0HH@HMPCAJCL@The?5?$CFs?5field?5is?5depleted?0?5find?5a@ DB 'The %s'
	DB	' field is depleted, find another %s field or dock at the Refi'
	DB	'nery to process the %s you have collected so far...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@
CONST	SEGMENT
??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@ DB 'dp88_Ore_Field', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OKGKHHLH@AI_Init_Delay?$AA@
CONST	SEGMENT
??_C@_0O@OKGKHHLH@AI_Init_Delay?$AA@ DB 'AI_Init_Delay', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LICJIGHN@Dump_Sound?$AA@
CONST	SEGMENT
??_C@_0L@LICJIGHN@Dump_Sound?$AA@ DB 'Dump_Sound', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IFNCGEJN@Mining_Sound?$AA@
CONST	SEGMENT
??_C@_0N@IFNCGEJN@Mining_Sound?$AA@ DB 'Mining_Sound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HBIJGFEI@Dump_Animation?$AA@
CONST	SEGMENT
??_C@_0P@HBIJGFEI@Dump_Animation?$AA@ DB 'Dump_Animation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KCLAFENJ@Mining_Animation?$AA@
CONST	SEGMENT
??_C@_0BB@KCLAFENJ@Mining_Animation?$AA@ DB 'Mining_Animation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DPBHIJDH@Idle_Animation?$AA@
CONST	SEGMENT
??_C@_0P@DPBHIJDH@Idle_Animation?$AA@ DB 'Idle_Animation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BMHFNGDK@Ore_Dump_Time?$AA@
CONST	SEGMENT
??_C@_0O@BMHFNGDK@Ore_Dump_Time?$AA@ DB 'Ore_Dump_Time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CEKFDMBL@Ore_Mining_Time?$AA@
CONST	SEGMENT
??_C@_0BA@CEKFDMBL@Ore_Mining_Time?$AA@ DB 'Ore_Mining_Time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CKLMCBCD@Ore_Capacity?$AA@
CONST	SEGMENT
??_C@_0N@CKLMCBCD@Ore_Capacity?$AA@ DB 'Ore_Capacity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ODNOLLNH@Resource_Name?$AA@
CONST	SEGMENT
??_C@_0O@ODNOLLNH@Resource_Name?$AA@ DB 'Resource_Name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJHGNIM@Use_AI?$AA@
CONST	SEGMENT
??_C@_06MJHGNIM@Use_AI?$AA@ DB 'Use_AI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PNBLNPBJ@clegEffectPreset?$AA@
CONST	SEGMENT
??_C@_0BB@PNBLNPBJ@clegEffectPreset?$AA@ DB 'clegEffectPreset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GDPBJPKC@resistance?$AA@
CONST	SEGMENT
??_C@_0L@GDPBJPKC@resistance?$AA@ DB 'resistance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@ENAIFJPJ@WARNING?3?5You?5have?5?$CFd?5seconds?5to?5@
CONST	SEGMENT
??_C@_0DN@ENAIFJPJ@WARNING?3?5You?5have?5?$CFd?5seconds?5to?5@ DB 'WARNIN'
	DB	'G: You have %d seconds to phase back before you die...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PGGAFPFO@Death?$AA@
CONST	SEGMENT
??_C@_05PGGAFPFO@Death?$AA@ DB 'Death', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CBCDBAII@You?5have?5been?5phased?5out?5too?5lon@
CONST	SEGMENT
??_C@_0DD@CBCDBAII@You?5have?5been?5phased?5out?5too?5lon@ DB 'You have b'
	DB	'een phased out too long and have died...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JHFLIHBN@Phasing?5in?4?4?4?4?$AA@
CONST	SEGMENT
??_C@_0P@JHFLIHBN@Phasing?5in?4?4?4?4?$AA@ DB 'Phasing in....', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HCFBBNOH@CLEG_DropObj?$AA@
CONST	SEGMENT
??_C@_0N@HCFBBNOH@CLEG_DropObj?$AA@ DB 'CLEG_DropObj', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MCOLCNG@undeploySound?$AA@
CONST	SEGMENT
??_C@_0O@MCOLCNG@undeploySound?$AA@ DB 'undeploySound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DMJJAGLI@deploySound?$AA@
CONST	SEGMENT
??_C@_0M@DMJJAGLI@deploySound?$AA@ DB 'deploySound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BKAKAJAD@deployedArmourType?$AA@
CONST	SEGMENT
??_C@_0BD@BKAKAJAD@deployedArmourType?$AA@ DB 'deployedArmourType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DMLKKDEE@deployedArmourType_veteran?$AA@
CONST	SEGMENT
??_C@_0BL@DMLKKDEE@deployedArmourType_veteran?$AA@ DB 'deployedArmourType'
	DB	'_veteran', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CJLCKMAB@deployedArmourType_elite?$AA@
CONST	SEGMENT
??_C@_0BJ@CJLCKMAB@deployedArmourType_elite?$AA@ DB 'deployedArmourType_e'
	DB	'lite', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@PHLEFKAJ@Deployment?5abuse?5detected?0?5disab@
CONST	SEGMENT
??_C@_0FI@PHLEFKAJ@Deployment?5abuse?5detected?0?5disab@ DB 'Deployment a'
	DB	'buse detected, disabling deploy script... (distance from depl'
	DB	'oyment: %.2fm)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KIKFMCII@dp88_AR_Deployable_Infantry?3?3Key@
CONST	SEGMENT
??_C@_0CF@KIKFMCII@dp88_AR_Deployable_Infantry?3?3Key@ DB 'dp88_AR_Deploy'
	DB	'able_Infantry::KeyHook', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ@4JA DD 0191H ; `dp88_AR_Deployable_Infantry::KeyHook'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@LFDCBMI@deployedObjectSpaceRequired?$AA@
CONST	SEGMENT
??_C@_0BM@LFDCBMI@deployedObjectSpaceRequired?$AA@ DB 'deployedObjectSpac'
	DB	'eRequired', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@HENGAEHL@You?5cannot?5deploy?5yet?0?5you?5must?5@
CONST	SEGMENT
??_C@_0FO@HENGAEHL@You?5cannot?5deploy?5yet?0?5you?5must?5@ DB 'You canno'
	DB	't deploy yet, you must wait at least %.*f seconds after undep'
	DB	'loying to deploy again.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LGLHGEKK@deployTime?$AA@
CONST	SEGMENT
??_C@_0L@LGLHGEKK@deployTime?$AA@ DB 'deployTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@HJDEIDNN@You?5cannot?5undeploy?5yet?0?5you?5mus@
CONST	SEGMENT
??_C@_0FK@HJDEIDNN@You?5cannot?5undeploy?5yet?0?5you?5mus@ DB 'You cannot'
	DB	' undeploy yet, you must wait at least %.*f seconds after depl'
	DB	'oying to undeploy.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEPMODEF@undeployTime?$AA@
CONST	SEGMENT
??_C@_0N@LEPMODEF@undeployTime?$AA@ DB 'undeployTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CEFAEEGH@deployKeyhook?$AA@
CONST	SEGMENT
??_C@_0O@CEFAEEGH@deployKeyhook?$AA@ DB 'deployKeyhook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IMENNLBL@cannotDeployStringId?$AA@
CONST	SEGMENT
??_C@_0BF@IMENNLBL@cannotDeployStringId?$AA@ DB 'cannotDeployStringId', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ICHLJJHH@deployedWeaponPowerup_elite?$AA@
CONST	SEGMENT
??_C@_0BM@ICHLJJHH@deployedWeaponPowerup_elite?$AA@ DB 'deployedWeaponPow'
	DB	'erup_elite', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BDGMBCNO@deployedWeaponPowerup_veteran?$AA@
CONST	SEGMENT
??_C@_0BO@BDGMBCNO@deployedWeaponPowerup_veteran?$AA@ DB 'deployedWeaponP'
	DB	'owerup_veteran', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFLMKGI@deployedWeaponPowerup?$AA@
CONST	SEGMENT
??_C@_0BG@HFLMKGI@deployedWeaponPowerup?$AA@ DB 'deployedWeaponPowerup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@BPGCOALM@dp88_AR_Deployable_Infantry?5?3?3?5S@
CONST	SEGMENT
??_C@_0FD@BPGCOALM@dp88_AR_Deployable_Infantry?5?3?3?5S@ DB 'dp88_AR_Depl'
	DB	'oyable_Infantry :: Script aborting due to invalid deployedObj'
	DB	'ectPreset', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MFBGNGEP@deployedObjectPreset?$AA@
CONST	SEGMENT
??_C@_0BF@MFBGNGEP@deployedObjectPreset?$AA@ DB 'deployedObjectPreset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KMBDMHHB@dp88_AR_GameController?3?3Destroye@
CONST	SEGMENT
??_C@_0CC@KMBDMHHB@dp88_AR_GameController?3?3Destroye@ DB 'dp88_AR_GameCo'
	DB	'ntroller::Destroyed', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA DD 0d0H ; `dp88_AR_GameController::Destroyed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@GFBKNOIA@MirageTank_disguisePreset_3?$AA@
CONST	SEGMENT
??_C@_0BM@GFBKNOIA@MirageTank_disguisePreset_3?$AA@ DB 'MirageTank_disgui'
	DB	'sePreset_3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HMABOPMB@MirageTank_disguisePreset_2?$AA@
CONST	SEGMENT
??_C@_0BM@HMABOPMB@MirageTank_disguisePreset_2?$AA@ DB 'MirageTank_disgui'
	DB	'sePreset_2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'p', 00H, '8', 00H, '8', 00H, '_', 00H
	DB	'a', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\dp88_ar.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LFBBGCB@dp88_AR_GameController?3?3Created?$AA@
CONST	SEGMENT
??_C@_0CA@LFBBGCB@dp88_AR_GameController?3?3Created?$AA@ DB 'dp88_AR_Game'
	DB	'Controller::Created', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA DD 032H ; `dp88_AR_GameController::Created'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null?$AA@
CONST	SEGMENT
??_C@_04MLLLIHIP@null?$AA@ DB 'null', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FHCMLMAC@MirageTank_disguisePreset_1?$AA@
CONST	SEGMENT
??_C@_0BM@FHCMLMAC@MirageTank_disguisePreset_1?$AA@ DB 'MirageTank_disgui'
	DB	'sePreset_1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@NCFIPGCK@As?5the?5Koreans?5you?5can?5use?5Black@
CONST	SEGMENT
??_C@_0EG@NCFIPGCK@As?5the?5Koreans?5you?5can?5use?5Black@ DB 'As the Kor'
	DB	'eans you can use Black Eagles to rain death from the skies!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MDAMHPFF@Korea?$AA@
CONST	SEGMENT
??_C@_05MDAMHPFF@Korea?$AA@ DB 'Korea', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@BBPIKCAE@As?5the?5British?5you?5can?5use?5snipe@
CONST	SEGMENT
??_C@_0EM@BBPIKCAE@As?5the?5British?5you?5can?5use?5snipe@ DB 'As the Bri'
	DB	'tish you can use snipers to pick off enemy infantry from dist'
	DB	'ance', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IAGENNII@Great?5Britain?$AA@
CONST	SEGMENT
??_C@_0O@IAGENNII@Great?5Britain?$AA@ DB 'Great Britain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@PMBHCLFE@As?5the?5Germans?5you?5can?5use?5the?5T@
CONST	SEGMENT
??_C@_0EP@PMBHCLFE@As?5the?5Germans?5you?5can?5use?5the?5T@ DB 'As the Ge'
	DB	'rmans you can use the Tank Destroyer to easily wipe out Sovie'
	DB	't tanks.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07HIGNCDOF@Germany?$AA@
CONST	SEGMENT
??_C@_07HIGNCDOF@Germany?$AA@ DB 'Germany', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@JKHHPBBE@As?5the?5French?5your?5base?5is?5well?5@
CONST	SEGMENT
??_C@_0EG@JKHHPBBE@As?5the?5French?5your?5base?5is?5well?5@ DB 'As the Fr'
	DB	'ench your base is well defended by the powerful Grand Cannon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06COBCPIFO@France?$AA@
CONST	SEGMENT
??_C@_06COBCPIFO@France?$AA@ DB 'France', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@DOHGOOCN@As?5the?5Americans?5you?5can?5use?5par@
CONST	SEGMENT
??_C@_0EG@DOHGOOCN@As?5the?5Americans?5you?5can?5use?5par@ DB 'As the Ame'
	DB	'ricans you can use paradrops to surprise the Soviet forces!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOPJHFJA@America?$AA@
CONST	SEGMENT
??_C@_07DOPJHFJA@America?$AA@ DB 'America', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DLJOOLKB@?5and?5the?5Allies?5are?5playing?5as?5?$AA@
CONST	SEGMENT
??_C@_0CA@DLJOOLKB@?5and?5the?5Allies?5are?5playing?5as?5?$AA@ DB ' and t'
	DB	'he Allies are playing as ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@JHHKADDP@As?5the?5Libiyans?5you?5can?5use?5the?5@
CONST	SEGMENT
??_C@_0FB@JHHKADDP@As?5the?5Libiyans?5you?5can?5use?5the?5@ DB 'As the Li'
	DB	'biyans you can use the deadly Demolition Truck to destroy ene'
	DB	'my forces!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05BEGMLHMG@Libya?$AA@
CONST	SEGMENT
??_C@_05BEGMLHMG@Libya?$AA@ DB 'Libya', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@JLNHEEEP@As?5the?5Iraqis?5you?5can?5use?5the?5de@
CONST	SEGMENT
??_C@_0EN@JLNHEEEP@As?5the?5Iraqis?5you?5can?5use?5the?5de@ DB 'As the Ir'
	DB	'aqis you can use the deadly Desolator to irradiate the allied'
	DB	' scum!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04NCDJLDGN@Iraq?$AA@
CONST	SEGMENT
??_C@_04NCDJLDGN@Iraq?$AA@ DB 'Iraq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@BCOJLIFF@As?5the?5Cubans?5you?5can?5use?5the?5in@
CONST	SEGMENT
??_C@_0FA@BCOJLIFF@As?5the?5Cubans?5you?5can?5use?5the?5in@ DB 'As the Cu'
	DB	'bans you can use the insane but deadly Terrorist to bomb your'
	DB	' enemies!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENNKDPHN@Cuba?$AA@
CONST	SEGMENT
??_C@_04ENNKDPHN@Cuba?$AA@ DB 'Cuba', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@OPLPFHP@As?5the?5Russians?5you?5can?5use?5the?5@
CONST	SEGMENT
??_C@_0FD@OPLPFHP@As?5the?5Russians?5you?5can?5use?5the?5@ DB 'As the Rus'
	DB	'sians you can use the powerful Tesla Tank to wipe out those a'
	DB	'llied scum!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBCOHLEJ@Russia?$AA@
CONST	SEGMENT
??_C@_06HBCOHLEJ@Russia?$AA@ DB 'Russia', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FDMLICBA@The?5Soviets?5are?5playing?5as?5?$AA@
CONST	SEGMENT
??_C@_0BM@FDMLICBA@The?5Soviets?5are?5playing?5as?5?$AA@ DB 'The Soviets '
	DB	'are playing as ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@GFFDLGON@msg?5GAME?5CONTROLLER?5ERROR?3?5All?5A@
CONST	SEGMENT
??_C@_0FF@GFFDLGON@msg?5GAME?5CONTROLLER?5ERROR?3?5All?5A@ DB 'msg GAME C'
	DB	'ONTROLLER ERROR: All Allied countries are disabled, defaultin'
	DB	'g to America!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLJLLOED@enableCountry_Korea?$AA@
CONST	SEGMENT
??_C@_0BE@CLJLLOED@enableCountry_Korea?$AA@ DB 'enableCountry_Korea', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OILODKNF@enableCountry_GreatBritain?$AA@
CONST	SEGMENT
??_C@_0BL@OILODKNF@enableCountry_GreatBritain?$AA@ DB 'enableCountry_Grea'
	DB	'tBritain', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IIJGIMID@enableCountry_Germany?$AA@
CONST	SEGMENT
??_C@_0BG@IIJGIMID@enableCountry_Germany?$AA@ DB 'enableCountry_Germany', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NKCONKMO@enableCountry_France?$AA@
CONST	SEGMENT
??_C@_0BF@NKCONKMO@enableCountry_France?$AA@ DB 'enableCountry_France', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MOACNKPG@enableCountry_America?$AA@
CONST	SEGMENT
??_C@_0BG@MOACNKPG@enableCountry_America?$AA@ DB 'enableCountry_America', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@FPMFHLI@msg?5GAME?5CONTROLLER?5ERROR?3?5All?5S@
CONST	SEGMENT
??_C@_0FE@FPMFHLI@msg?5GAME?5CONTROLLER?5ERROR?3?5All?5S@ DB 'msg GAME CO'
	DB	'NTROLLER ERROR: All Soviet countries are disabled, defaulting'
	DB	' to Russia!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PMPLHGNA@enableCountry_Libya?$AA@
CONST	SEGMENT
??_C@_0BE@PMPLHGNA@enableCountry_Libya?$AA@ DB 'enableCountry_Libya', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PNCMJGCK@enableCountry_Iraq?$AA@
CONST	SEGMENT
??_C@_0BD@PNCMJGCK@enableCountry_Iraq?$AA@ DB 'enableCountry_Iraq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GCMPBKDK@enableCountry_Cuba?$AA@
CONST	SEGMENT
??_C@_0BD@GCMPBKDK@enableCountry_Cuba?$AA@ DB 'enableCountry_Cuba', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IFBCFJNJ@enableCountry_Russia?$AA@
CONST	SEGMENT
??_C@_0BF@IFBCFJNJ@enableCountry_Russia?$AA@ DB 'enableCountry_Russia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7dp88_linkHealth@@6B@
CONST	SEGMENT
??_7dp88_linkHealth@@6B@ DD FLAT:??_R4dp88_linkHealth@@6B@ ; dp88_linkHealth::`vftable'
	DD	FLAT:??_Edp88_linkHealth@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_linkHealth@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_linkHealth@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_linkHealth@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AR_Prism_Tower@@6B@
CONST	SEGMENT
??_7dp88_AR_Prism_Tower@@6B@ DD FLAT:??_R4dp88_AR_Prism_Tower@@6B@ ; dp88_AR_Prism_Tower::`vftable'
	DD	FLAT:??_Edp88_AR_Prism_Tower@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_AR_Prism_Tower@@EAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?checkTeam@dp88_AR_Prism_Tower@@EAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z
	DD	FLAT:?attackTarget@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?attackLocation@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@VVector3@@_N@Z
	DD	FLAT:?stopAttacking@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?StartCharging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?StartDischarging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?GetAnimationObject@dp88_AI_ChargedTurret@@MAEPAVScriptableGameObj@@PAV2@@Z
	DD	FLAT:?ApplyIdleAnimation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AR_Paradrop@@6B@
CONST	SEGMENT
??_7dp88_AR_Paradrop@@6B@ DD FLAT:??_R4dp88_AR_Paradrop@@6B@ ; dp88_AR_Paradrop::`vftable'
	DD	FLAT:??_Edp88_AR_Paradrop@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AR_paradrop_Console@@6B@
CONST	SEGMENT
??_7dp88_AR_paradrop_Console@@6B@ DD FLAT:??_R4dp88_AR_paradrop_Console@@6B@ ; dp88_AR_paradrop_Console::`vftable'
	DD	FLAT:??_Edp88_AR_paradrop_Console@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AR_DemoTruck@@6B@
CONST	SEGMENT
??_7dp88_AR_DemoTruck@@6B@ DD FLAT:??_R4dp88_AR_DemoTruck@@6B@ ; dp88_AR_DemoTruck::`vftable'
	DD	FLAT:??_Edp88_AR_DemoTruck@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_RemoteControlVehicle@@6B@
CONST	SEGMENT
??_7dp88_RemoteControlVehicle@@6B@ DD FLAT:??_R4dp88_RemoteControlVehicle@@6B@ ; dp88_RemoteControlVehicle::`vftable'
	DD	FLAT:??_Edp88_RemoteControlVehicle@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_RemoteControlConsole@@6B@
CONST	SEGMENT
??_7dp88_RemoteControlConsole@@6B@ DD FLAT:??_R4dp88_RemoteControlConsole@@6B@ ; dp88_RemoteControlConsole::`vftable'
	DD	FLAT:??_Edp88_RemoteControlConsole@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Aircraft_LandingZone_Aircraft@@6B@
CONST	SEGMENT
??_7dp88_Aircraft_LandingZone_Aircraft@@6B@ DD FLAT:??_R4dp88_Aircraft_LandingZone_Aircraft@@6B@ ; dp88_Aircraft_LandingZone_Aircraft::`vftable'
	DD	FLAT:??_Edp88_Aircraft_LandingZone_Aircraft@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Aircraft_LandingZone@@6B@
CONST	SEGMENT
??_7dp88_Aircraft_LandingZone@@6B@ DD FLAT:??_R4dp88_Aircraft_LandingZone@@6B@ ; dp88_Aircraft_LandingZone::`vftable'
	DD	FLAT:??_Edp88_Aircraft_LandingZone@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Ore_Dump_Zone@@6B@
CONST	SEGMENT
??_7dp88_Ore_Dump_Zone@@6B@ DD FLAT:??_R4dp88_Ore_Dump_Zone@@6B@ ; dp88_Ore_Dump_Zone::`vftable'
	DD	FLAT:??_Edp88_Ore_Dump_Zone@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@dp88_Ore_Dump_Zone@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Ore_Extractor@@6B@
CONST	SEGMENT
??_7dp88_Ore_Extractor@@6B@ DD FLAT:??_R4dp88_Ore_Extractor@@6B@ ; dp88_Ore_Extractor::`vftable'
	DD	FLAT:??_Edp88_Ore_Extractor@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_0BI@PEPLNIMK@dp88_Ore_Field_Observer?$AA@
CONST	SEGMENT
??_C@_0BI@PEPLNIMK@dp88_Ore_Field_Observer?$AA@ DB 'dp88_Ore_Field_Observ'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7dp88_Ore_Field@@6B@
CONST	SEGMENT
??_7dp88_Ore_Field@@6B@ DD FLAT:??_R4dp88_Ore_Field@@6B@ ; dp88_Ore_Field::`vftable'
	DD	FLAT:??_Edp88_Ore_Field@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Ore_Field_Observer@dp88_Ore_Field@@6B@
CONST	SEGMENT
??_7dp88_Ore_Field_Observer@dp88_Ore_Field@@6B@ DD FLAT:??_R4dp88_Ore_Field_Observer@dp88_Ore_Field@@6B@ ; dp88_Ore_Field::dp88_Ore_Field_Observer::`vftable'
	DD	FLAT:??_Edp88_Ore_Field_Observer@dp88_Ore_Field@@UAEPAXI@Z
	DD	FLAT:?Get_Name@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEPBDXZ
	DD	FLAT:?Attach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
CONST	ENDS
;	COMDAT ??_7dp88_AR_Chrono_Miner_Chronozone@@6B@
CONST	SEGMENT
??_7dp88_AR_Chrono_Miner_Chronozone@@6B@ DD FLAT:??_R4dp88_AR_Chrono_Miner_Chronozone@@6B@ ; dp88_AR_Chrono_Miner_Chronozone::`vftable'
	DD	FLAT:??_Edp88_AR_Chrono_Miner_Chronozone@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_Chrono_Miner_Chronozone@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AR_Chrono_Miner@@6B@
CONST	SEGMENT
??_7dp88_AR_Chrono_Miner@@6B@ DD FLAT:??_R4dp88_AR_Chrono_Miner@@6B@ ; dp88_AR_Chrono_Miner::`vftable'
	DD	FLAT:??_Edp88_AR_Chrono_Miner@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?KeyHook@dp88_AR_Chrono_Miner@@UAEXXZ
	DD	FLAT:?DriveToOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?EnteredOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?ExitedOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?ReturnToRefinery@dp88_AR_Chrono_Miner@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?DockAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?DockedAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?UndockedFromRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_Ore_Miner@@6B@
CONST	SEGMENT
??_7dp88_Ore_Miner@@6B@ DD FLAT:??_R4dp88_Ore_Miner@@6B@ ; dp88_Ore_Miner::`vftable'
	DD	FLAT:??_Edp88_Ore_Miner@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?KeyHook@dp88_Ore_Miner@@UAEXXZ
	DD	FLAT:?DriveToOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?EnteredOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?ExitedOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?ReturnToRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?DockAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?DockedAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?UndockedFromRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AR_CLEG_target@@6B@
CONST	SEGMENT
??_7dp88_AR_CLEG_target@@6B@ DD FLAT:??_R4dp88_AR_CLEG_target@@6B@ ; dp88_AR_CLEG_target::`vftable'
	DD	FLAT:??_Edp88_AR_CLEG_target@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AR_CLEG@@6B@
CONST	SEGMENT
??_7dp88_AR_CLEG@@6B@ DD FLAT:??_R4dp88_AR_CLEG@@6B@	; dp88_AR_CLEG::`vftable'
	DD	FLAT:??_Edp88_AR_CLEG@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AR_Deployable_Infantry@@6B@
CONST	SEGMENT
??_7dp88_AR_Deployable_Infantry@@6B@ DD FLAT:??_R4dp88_AR_Deployable_Infantry@@6B@ ; dp88_AR_Deployable_Infantry::`vftable'
	DD	FLAT:??_Edp88_AR_Deployable_Infantry@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AR_GameController@@6B@
CONST	SEGMENT
??_7dp88_AR_GameController@@6B@ DD FLAT:??_R4dp88_AR_GameController@@6B@ ; dp88_AR_GameController::`vftable'
	DD	FLAT:??_Edp88_AR_GameController@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Camo_Controller@@6B@
CONST	SEGMENT
??_7dp88_Camo_Controller@@6B@ DD FLAT:??_R4dp88_Camo_Controller@@6B@ ; dp88_Camo_Controller::`vftable'
	DD	FLAT:??_Edp88_Camo_Controller@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Camo_Controller@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AI_ChargedTurret@@6B@
CONST	SEGMENT
??_7dp88_AI_ChargedTurret@@6B@ DD FLAT:??_R4dp88_AI_ChargedTurret@@6B@ ; dp88_AI_ChargedTurret::`vftable'
	DD	FLAT:??_Edp88_AI_ChargedTurret@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z
	DD	FLAT:?attackTarget@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?attackLocation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z
	DD	FLAT:?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?StartCharging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?StartDischarging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?GetAnimationObject@dp88_AI_ChargedTurret@@MAEPAVScriptableGameObj@@PAV2@@Z
	DD	FLAT:?ApplyIdleAnimation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AI_Turret@@6B@
CONST	SEGMENT
??_7dp88_AI_Turret@@6B@ DD FLAT:??_R4dp88_AI_Turret@@6B@ ; dp88_AI_Turret::`vftable'
	DD	FLAT:??_Edp88_AI_Turret@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z
	DD	FLAT:?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z
	DD	FLAT:?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_customAI@@6B@
CONST	SEGMENT
??_7dp88_customAI@@6B@ DD FLAT:??_R4dp88_customAI@@6B@	; dp88_customAI::`vftable'
	DD	FLAT:??_Edp88_customAI@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7JFW_Object_Created_Hook_Base@@6B@
CONST	SEGMENT
??_7JFW_Object_Created_Hook_Base@@6B@ DD FLAT:??_R4JFW_Object_Created_Hook_Base@@6B@ ; JFW_Object_Created_Hook_Base::`vftable'
	DD	FLAT:??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7MultiKeyHookScriptImpClass@@6B@
CONST	SEGMENT
??_7MultiKeyHookScriptImpClass@@6B@ DD FLAT:??_R4MultiKeyHookScriptImpClass@@6B@ ; MultiKeyHookScriptImpClass::`vftable'
	DD	FLAT:??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
CONST	SEGMENT
??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ DD FLAT:??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vftable'
	DD	FLAT:??_E?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z
	DD	FLAT:?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
	DD	FLAT:?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
	DD	FLAT:?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ
	DD	FLAT:?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
	DD	FLAT:?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
	DD	FLAT:?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ
	DD	FLAT:?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ
CONST	ENDS
;	COMDAT ??_7JFW_Key_Hook_Base@@6B@
CONST	SEGMENT
??_7JFW_Key_Hook_Base@@6B@ DD FLAT:??_R4JFW_Key_Hook_Base@@6B@ ; JFW_Key_Hook_Base::`vftable'
	DD	FLAT:??_EJFW_Key_Hook_Base@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ReferencerClass@@6B@
CONST	SEGMENT
??_7ReferencerClass@@6B@ DD FLAT:??_R4ReferencerClass@@6B@ ; ReferencerClass::`vftable'
	DD	FLAT:??_EReferencerClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@ReferencerClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7PostLoadableClass@@6B@
CONST	SEGMENT
??_7PostLoadableClass@@6B@ DD FLAT:??_R4PostLoadableClass@@6B@ ; PostLoadableClass::`vftable'
	DD	FLAT:??_EPostLoadableClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7INIClass@@6B@
CONST	SEGMENT
??_7INIClass@@6B@ DD FLAT:??_R4INIClass@@6B@		; INIClass::`vftable'
	DD	FLAT:??_EINIClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_vector.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ScriptFactory@@6B@
CONST	SEGMENT
??_7ScriptFactory@@6B@ DD FLAT:??_R4ScriptFactory@@6B@	; ScriptFactory::`vftable'
	DD	FLAT:??_EScriptFactory@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ScriptImpClass@@6B@
CONST	SEGMENT
??_7ScriptImpClass@@6B@ DD FLAT:??_R4ScriptImpClass@@6B@ ; ScriptImpClass::`vftable'
	DD	FLAT:??_EScriptImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7ScriptClass@@6B@
CONST	SEGMENT
??_7ScriptClass@@6B@ DD FLAT:??_R4ScriptClass@@6B@	; ScriptClass::`vftable'
	DD	FLAT:??_EScriptClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7GameObjObserverClass@@6B@
CONST	SEGMENT
??_7GameObjObserverClass@@6B@ DD FLAT:??_R4GameObjObserverClass@@6B@ ; GameObjObserverClass::`vftable'
	DD	FLAT:??_EGameObjObserverClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
CONST	ENDS
CRT$XCU	SEGMENT
_dp88_AR_Chrono_Miner_Registrant$initializer$ DD FLAT:??__Edp88_AR_Chrono_Miner_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_Chrono_Miner_Chronozone_Registrant$initializer$ DD FLAT:??__Edp88_AR_Chrono_Miner_Chronozone_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Ore_Field_Registrant$initializer$ DD FLAT:??__Edp88_Ore_Field_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Ore_Extractor_Registrant$initializer$ DD FLAT:??__Edp88_Ore_Extractor_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Ore_Dump_Zone_Registrant$initializer$ DD FLAT:??__Edp88_Ore_Dump_Zone_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_Paradrop_Registrant$initializer$ DD FLAT:??__Edp88_AR_Paradrop_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_GameController_Registrant$initializer$ DD FLAT:??__Edp88_AR_GameController_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_Deployable_Infantry_Registrant$initializer$ DD FLAT:??__Edp88_AR_Deployable_Infantry_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_CLEG_Registrant$initializer$ DD FLAT:??__Edp88_AR_CLEG_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_CLEG_target_Registrant$initializer$ DD FLAT:??__Edp88_AR_CLEG_target_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Aircraft_LandingZone_Registrant$initializer$ DD FLAT:??__Edp88_Aircraft_LandingZone_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Aircraft_LandingZone_Aircraft_Registrant$initializer$ DD FLAT:??__Edp88_Aircraft_LandingZone_Aircraft_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_RemoteControlConsole_Registrant$initializer$ DD FLAT:??__Edp88_RemoteControlConsole_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_RemoteControlVehicle_Registrant$initializer$ DD FLAT:??__Edp88_RemoteControlVehicle_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_DemoTruck_Registrant$initializer$ DD FLAT:??__Edp88_AR_DemoTruck_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_paradrop_Console_Registrant$initializer$ DD FLAT:??__Edp88_AR_paradrop_Console_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AR_Prism_Tower_Registrant$initializer$ DD FLAT:??__Edp88_AR_Prism_Tower_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_linkHealth_Registrant$initializer$ DD FLAT:??__Edp88_linkHealth_Registrant@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ
text$yd	SEGMENT
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ PROC ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
	call	??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ENDP ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z
_TEXT	SEGMENT
_endDword$ = -12					; size = 4
_dword$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
_pattern$ = 12						; size = 4
?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z PROC ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern, COMDAT
; _this$ = ecx

; 1445 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1446 : #ifdef DEBUG
; 1447 : 		static_assert(sizeof(T) % 4 == 0, "Expected type size to be a multiple of 4.");
; 1448 : 		DWORD* dword = (DWORD*)&object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _dword$[ebp], eax

; 1449 : 		DWORD* endDword = (DWORD*)(&object+1);

	mov	eax, DWORD PTR _object$[ebp]
	add	eax, 8
	mov	DWORD PTR _endDword$[ebp], eax

; 1450 : 		for (; dword < endDword; ++dword)

	jmp	SHORT $LN3@writeDummy
$LN2@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	add	eax, 4
	mov	DWORD PTR _dword$[ebp], eax
$LN3@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	cmp	eax, DWORD PTR _endDword$[ebp]
	jae	SHORT $LN4@writeDummy

; 1451 : 			*dword = pattern;

	mov	eax, DWORD PTR _dword$[ebp]
	mov	ecx, DWORD PTR _pattern$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN2@writeDummy
$LN4@writeDummy:

; 1452 : #endif
; 1453 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ENDP ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z
_TEXT	SEGMENT
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z PROC ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory, COMDAT
; _this$ = ecx

; 1436 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1437 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1438 : 		writeDummyPattern(object, 0xEDE7E10D);

	push	-303570675				; ede7e10dH
	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern

; 1439 : 		(T*&)object = FreeListHead;

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1440 : 		FreeListHead = &object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx

; 1441 : 		FreeObjectCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1442 : 	}

	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ENDP ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ
_TEXT	SEGMENT
tv82 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
_object$ = -20						; size = 4
_i$3 = -16						; size = 4
_newBlockListHead$4 = -12				; size = 4
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory, COMDAT
; _this$ = ecx

; 1413 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1415 :  		if (!FreeListHead)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN4@Allocate_O

; 1416 : 		{
; 1417 : 			void* newBlockListHead = (void*)((void*)new char[sizeof(void*) + sizeof(T[BLOCK_SIZE])]);

	push	OFFSET ??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@
	push	1417					; 00000589H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Allocate_O
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_O
	push	1417					; 00000589H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN7@Allocate_O:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN9@Allocate_O
$LN8@Allocate_O:
	push	2052					; 00000804H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN9@Allocate_O:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _newBlockListHead$4[ebp], ecx

; 1418 : 			*(void**)newBlockListHead = BlockListHead;

	mov	eax, DWORD PTR _newBlockListHead$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1419 : 			BlockListHead = newBlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newBlockListHead$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1420 : 			FreeListHead = (T*)((intptr_t)BlockListHead + sizeof(void*));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1421 : 			for (int i = 0; i < BLOCK_SIZE; i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@Allocate_O
$LN2@Allocate_O:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@Allocate_O:
	cmp	DWORD PTR _i$3[ebp], 256		; 00000100H
	jge	SHORT $LN1@Allocate_O

; 1422 : 				(T*&)FreeListHead[i] = &FreeListHead[i+1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
	jmp	SHORT $LN2@Allocate_O
$LN1@Allocate_O:

; 1423 : 			
; 1424 : 			(T*&)FreeListHead[BLOCK_SIZE-1] = NULL;

	mov	eax, 8
	imul	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], 0

; 1425 : 			FreeObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1426 : 			TotalObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN4@Allocate_O:

; 1427 : 		}
; 1428 : 
; 1429 : 		T* object = FreeListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _object$[ebp], ecx

; 1430 : 		FreeListHead = *(T**)(FreeListHead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1431 : 		FreeObjectCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1432 : 		return object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	mov	eax, DWORD PTR $T2[ebp]

; 1433 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
$T1 = -336						; size = 4
_nextBlock$2 = -268					; size = 4
_block$ = -264						; size = 4
_buffer$3 = -260					; size = 256
_this$ = -4						; size = 4
??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>, COMDAT
; _this$ = ecx

; 1393 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1394 : 		// If you hit the following assert, one or more objects were not freed.
; 1395 : 		if (FreeObjectCount != TotalObjectCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN3@ObjectPool

; 1396 : 		{
; 1397 : 			char buffer[256];
; 1398 : 			sprintf(buffer, "%d memory leaks found in " __FUNCTION__ "\n", TotalObjectCount - FreeObjectCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 1399 : 			OutputDebugStringA(buffer);

	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN3@ObjectPool:

; 1400 : 			// TODO: There are quite a few mem leaks of this kind. Fix them.
; 1401 : 		}
; 1402 : 
; 1403 : 		void* block = BlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _block$[ebp], ecx
$LN2@ObjectPool:

; 1404 :  		while (block)

	cmp	DWORD PTR _block$[ebp], 0
	je	SHORT $LN4@ObjectPool

; 1405 : 		{
; 1406 : 			void* nextBlock = *(void**)block;

	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nextBlock$2[ebp], ecx

; 1407 : 			delete[] block;

	push	OFFSET ??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@
	push	1407					; 0000057fH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@ObjectPool
	xor	ecx, ecx
	jne	SHORT $LN6@ObjectPool
	push	1407					; 0000057fH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@ObjectPool:
	jmp	SHORT $LN8@ObjectPool
$LN7@ObjectPool:
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@ObjectPool:

; 1408 : 			block = nextBlock;

	mov	eax, DWORD PTR _nextBlock$2[ebp]
	mov	DWORD PTR _block$[ebp], eax

; 1409 : 		}

	jmp	SHORT $LN2@ObjectPool
$LN4@ObjectPool:

; 1410 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>, COMDAT
; _this$ = ecx

; 1384 : 	ObjectPoolClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::FastCriticalSectionClass
	mov	eax, DWORD PTR [eax]

; 1385 : 	{
; 1386 : 		FreeListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1387 : 		BlockListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1388 : 		FreeObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1389 : 		TotalObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1390 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\singleton.h
;	COMDAT ?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ
_TEXT	SEGMENT
?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ PROC ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 		static T instancex;

	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getInstanc
	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
	or	eax, 1
	mov	DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51, eax
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
	call	??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
	push	OFFSET ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
	call	_atexit
	add	esp, 4
$LN1@getInstanc:

; 61   : 		return instancex;

	mov	eax, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex

; 62   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ENDP ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 69   : 	SLNode(T *obj) : GenericSLNode(obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericSLNode@@IAE@PAX@Z		; GenericSLNode::GenericSLNode
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (T*)NodeData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		return (SLNode<T>*)NodeNext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next, COMDAT
; _this$ = ecx

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 		NodeNext = n;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx

; 59   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_linkHealth_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_linkHealth_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_linkHealth_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_linkHealth_Registrant@@3V?$ScriptRegistrant@Vdp88_linkHealth@@@@A ; dp88_linkHealth_Registrant
	call	??1?$ScriptRegistrant@Vdp88_linkHealth@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_linkHealth_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_linkHealth_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_linkHealth_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_linkHealth_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_linkHealth_Registrant'', COMDAT

; 3641 : ScriptRegistrant<dp88_linkHealth> dp88_linkHealth_Registrant("dp88_linkHealth","parentObjectId=0:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BF@OEHKMOBH@parentObjectId?$DN0?3int?$AA@
	push	OFFSET ??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@
	mov	ecx, OFFSET ?dp88_linkHealth_Registrant@@3V?$ScriptRegistrant@Vdp88_linkHealth@@@@A ; dp88_linkHealth_Registrant
	call	??0?$ScriptRegistrant@Vdp88_linkHealth@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_linkHealth>::ScriptRegistrant<dp88_linkHealth>
	push	OFFSET ??__Fdp88_linkHealth_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_linkHealth_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_linkHealth_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_linkHealth_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_linkHealth>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_linkHealth@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_linkHealth>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_linkHealth@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_linkHealth@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_linkHealth>::~ScriptRegistrant<dp88_linkHealth>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_linkHealth@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_linkHealth>::~ScriptRegistrant<dp88_linkHealth>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_linkHealth>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DA@HEHFNHDG@ScriptRegistrant?$DMclass?5dp88_link@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_linkHealth@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_linkHealth@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_linkHealth>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_linkHealth@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_linkHealth@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_linkHealth>::ScriptRegistrant<dp88_linkHealth>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_linkHealth@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_linkHealth@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_linkHealth>::ScriptRegistrant<dp88_linkHealth>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_Prism_Tower_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_Prism_Tower_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_AR_Prism_Tower_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_Prism_Tower_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@A ; dp88_AR_Prism_Tower_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_Prism_Tower_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_AR_Prism_Tower_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_Prism_Tower_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_Prism_Tower_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_AR_Prism_Tower_Registrant'', COMDAT

; 3638 : ScriptRegistrant<dp88_AR_Prism_Tower> dp88_AR_Prism_Tower_Registrant("dp88_AR_Prism_Tower","Priority_Infantry=1.0:float,Splash_Infantry=0:int,Priority_Light_Vehicle=5.0:float,Priority_Heavy_Vehicle=7.0:float,Priority_VTOL=0.0:float,Min_Attack_Range=0:int,Max_Attack_Range=150:int,Animation_Model:string,Animation_Model_Bone:string,Animation:string,Animation_Idle_Start_Frame:int,Animation_Idle_End_Frame:int,Animation_Unpowered_Start_Frame:int,Animation_Unpowered_End_Frame:int,Animation_Charge_Start_Frame:int,Animation_Charge_End_Frame:int,Charge_Sound:string,Modifier_Distance=0.25:float,Modifier_Target_Damage=0.1:float,Modifier_Target_Value=0.25:float,Requires_Power=1:int,Debug=0:int,Detects_Stealth=1:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0CGM@JMPONBPF@Priority_Infantry?$DN1?40?3float?0Spla@
	push	OFFSET ??_C@_0BE@EGGNPPMF@dp88_AR_Prism_Tower?$AA@
	mov	ecx, OFFSET ?dp88_AR_Prism_Tower_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@A ; dp88_AR_Prism_Tower_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Prism_Tower>::ScriptRegistrant<dp88_AR_Prism_Tower>
	push	OFFSET ??__Fdp88_AR_Prism_Tower_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_Prism_Tower_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_Prism_Tower_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_AR_Prism_Tower_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_Prism_Tower>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_Prism_Tower>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AR_Prism_Tower>::~ScriptRegistrant<dp88_AR_Prism_Tower>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AR_Prism_Tower>::~ScriptRegistrant<dp88_AR_Prism_Tower>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_Prism_Tower>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DE@FEDGAINI@ScriptRegistrant?$DMclass?5dp88_AR_P@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	180					; 000000b4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_Prism_Tower@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_Prism_Tower>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_Prism_Tower>::ScriptRegistrant<dp88_AR_Prism_Tower>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_Prism_Tower@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_Prism_Tower>::ScriptRegistrant<dp88_AR_Prism_Tower>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_paradrop_Console_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_paradrop_Console_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AR_paradrop_Console_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_paradrop_Console_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@A ; dp88_AR_paradrop_Console_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_paradrop_Console_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AR_paradrop_Console_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_paradrop_Console_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_paradrop_Console_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AR_paradrop_Console_Registrant'', COMDAT

; 3634 : ScriptRegistrant<dp88_AR_paradrop_Console> dp88_AR_paradrop_Console_Registrant("dp88_AR_paradrop_Console","team=1:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0L@EPIMNCDH@team?$DN1?3int?$AA@
	push	OFFSET ??_C@_0BJ@IPIIGGCN@dp88_AR_paradrop_Console?$AA@
	mov	ecx, OFFSET ?dp88_AR_paradrop_Console_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@A ; dp88_AR_paradrop_Console_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_paradrop_Console>::ScriptRegistrant<dp88_AR_paradrop_Console>
	push	OFFSET ??__Fdp88_AR_paradrop_Console_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_paradrop_Console_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_paradrop_Console_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AR_paradrop_Console_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_paradrop_Console>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_paradrop_Console>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AR_paradrop_Console>::~ScriptRegistrant<dp88_AR_paradrop_Console>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AR_paradrop_Console>::~ScriptRegistrant<dp88_AR_paradrop_Console>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_paradrop_Console>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DJ@DKFLFAOF@ScriptRegistrant?$DMclass?5dp88_AR_p@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_paradrop_Console@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_paradrop_Console>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_paradrop_Console>::ScriptRegistrant<dp88_AR_paradrop_Console>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_paradrop_Console@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_paradrop_Console>::ScriptRegistrant<dp88_AR_paradrop_Console>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_DemoTruck_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_DemoTruck_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_AR_DemoTruck_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_DemoTruck_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@A ; dp88_AR_DemoTruck_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_DemoTruck_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_AR_DemoTruck_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_DemoTruck_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_DemoTruck_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_AR_DemoTruck_Registrant'', COMDAT

; 3630 : ScriptRegistrant<dp88_AR_DemoTruck> dp88_AR_DemoTruck_Registrant("dp88_AR_DemoTruck","explosionPreset=Explosion_NukeBeacon:string,cinematicPreset=null:string,buildingDamageRange=50.0:float,buildingDamageWarhead=Nuke:string,buildingDamageStrength=2200.00:float");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0KO@KLKMOMBJ@explosionPreset?$DNExplosion_NukeBe@
	push	OFFSET ??_C@_0BC@IIFFAIPL@dp88_AR_DemoTruck?$AA@
	mov	ecx, OFFSET ?dp88_AR_DemoTruck_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@A ; dp88_AR_DemoTruck_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_DemoTruck>::ScriptRegistrant<dp88_AR_DemoTruck>
	push	OFFSET ??__Fdp88_AR_DemoTruck_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_DemoTruck_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_DemoTruck_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_AR_DemoTruck_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_DemoTruck>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_DemoTruck>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_AR_DemoTruck>::~ScriptRegistrant<dp88_AR_DemoTruck>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_AR_DemoTruck>::~ScriptRegistrant<dp88_AR_DemoTruck>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_DemoTruck>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DC@PHAIAMPP@ScriptRegistrant?$DMclass?5dp88_AR_D@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_DemoTruck@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_DemoTruck>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_DemoTruck>::ScriptRegistrant<dp88_AR_DemoTruck>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_DemoTruck@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_DemoTruck>::ScriptRegistrant<dp88_AR_DemoTruck>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_RemoteControlVehicle_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_RemoteControlVehicle_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_RemoteControlVehicle_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_RemoteControlVehicle_Registrant@@3V?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@A ; dp88_RemoteControlVehicle_Registrant
	call	??1?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_RemoteControlVehicle_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_RemoteControlVehicle_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_RemoteControlVehicle_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_RemoteControlVehicle_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_RemoteControlVehicle_Registrant'', COMDAT

; 3626 : ScriptRegistrant<dp88_RemoteControlVehicle> dp88_RemoteControlVehicle_Registrant("dp88_RemoteControlVehicle","remoteControlID:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BE@PHNHOOHC@remoteControlID?3int?$AA@
	push	OFFSET ??_C@_0BK@GPCMCCPB@dp88_RemoteControlVehicle?$AA@
	mov	ecx, OFFSET ?dp88_RemoteControlVehicle_Registrant@@3V?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@A ; dp88_RemoteControlVehicle_Registrant
	call	??0?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_RemoteControlVehicle>::ScriptRegistrant<dp88_RemoteControlVehicle>
	push	OFFSET ??__Fdp88_RemoteControlVehicle_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_RemoteControlVehicle_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_RemoteControlVehicle_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_RemoteControlVehicle_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_RemoteControlVehicle>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_RemoteControlVehicle>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_RemoteControlVehicle>::~ScriptRegistrant<dp88_RemoteControlVehicle>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_RemoteControlVehicle>::~ScriptRegistrant<dp88_RemoteControlVehicle>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_RemoteControlVehicle>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DK@DHGHOENO@ScriptRegistrant?$DMclass?5dp88_Remo@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_RemoteControlVehicle@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_RemoteControlVehicle>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_RemoteControlVehicle>::ScriptRegistrant<dp88_RemoteControlVehicle>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_RemoteControlVehicle@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_RemoteControlVehicle>::ScriptRegistrant<dp88_RemoteControlVehicle>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_RemoteControlConsole_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_RemoteControlConsole_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_RemoteControlConsole_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_RemoteControlConsole_Registrant@@3V?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@A ; dp88_RemoteControlConsole_Registrant
	call	??1?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_RemoteControlConsole_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_RemoteControlConsole_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_RemoteControlConsole_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_RemoteControlConsole_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_RemoteControlConsole_Registrant'', COMDAT

; 3625 : ScriptRegistrant<dp88_RemoteControlConsole> dp88_RemoteControlConsole_Registrant("dp88_RemoteControlConsole","remoteControlID:int,vehiclePreset:string,cost:int,team:int,chargeTime=0:int,accessDeniedSound:string,consoleOfflineSound:string,consoleChargingSound:string,insufficientFundsSound:string,connectionEstablishedSound:string,animationName:string,animFrameAvailable1=0:int,animFrameAvailable2=0:int,animFrameCharging1=0:int,animFrameCharging2=0:int,animFrameActive1=0:int,animFrameActive2=0:int,animFrameIdle1=0:int,animFrameIdle2=0:int,animFrameDisabled1=0:int,animFrameDisabled2=0:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BOB@BNNBNENM@remoteControlID?3int?0vehiclePrese@
	push	OFFSET ??_C@_0BK@EJNIJBHG@dp88_RemoteControlConsole?$AA@
	mov	ecx, OFFSET ?dp88_RemoteControlConsole_Registrant@@3V?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@A ; dp88_RemoteControlConsole_Registrant
	call	??0?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_RemoteControlConsole>::ScriptRegistrant<dp88_RemoteControlConsole>
	push	OFFSET ??__Fdp88_RemoteControlConsole_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_RemoteControlConsole_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_RemoteControlConsole_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_RemoteControlConsole_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_RemoteControlConsole>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_RemoteControlConsole>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_RemoteControlConsole>::~ScriptRegistrant<dp88_RemoteControlConsole>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_RemoteControlConsole>::~ScriptRegistrant<dp88_RemoteControlConsole>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_RemoteControlConsole>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DK@CMOOKAPN@ScriptRegistrant?$DMclass?5dp88_Remo@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_RemoteControlConsole@@QAE@XZ	; dp88_RemoteControlConsole::dp88_RemoteControlConsole
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_RemoteControlConsole>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_RemoteControlConsole>::ScriptRegistrant<dp88_RemoteControlConsole>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_RemoteControlConsole@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_RemoteControlConsole>::ScriptRegistrant<dp88_RemoteControlConsole>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Aircraft_LandingZone_Aircraft_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Aircraft_LandingZone_Aircraft_Registrant@@YAXXZ PROC ; `dynamic atexit destructor for 'dp88_Aircraft_LandingZone_Aircraft_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Aircraft_LandingZone_Aircraft_Registrant@@3V?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@A ; dp88_Aircraft_LandingZone_Aircraft_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Aircraft_LandingZone_Aircraft_Registrant@@YAXXZ ENDP ; `dynamic atexit destructor for 'dp88_Aircraft_LandingZone_Aircraft_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_Aircraft_LandingZone_Aircraft_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Aircraft_LandingZone_Aircraft_Registrant@@YAXXZ PROC ; `dynamic initializer for 'dp88_Aircraft_LandingZone_Aircraft_Registrant'', COMDAT

; 3618 : ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft> dp88_Aircraft_LandingZone_Aircraft_Registrant("dp88_Aircraft_LandingZone_Aircraft","landing_anim_name=modelfile.animfile:string,landing_anim_first_frame=0.0:float,landing_anim_last_frame=25.0:float,require_landing_zone=1:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0IN@KBAICBIG@landing_anim_name?$DNmodelfile?4anim@
	push	OFFSET ??_C@_0CD@LOAPGCML@dp88_Aircraft_LandingZone_Aircra@
	mov	ecx, OFFSET ?dp88_Aircraft_LandingZone_Aircraft_Registrant@@3V?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@A ; dp88_Aircraft_LandingZone_Aircraft_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>
	push	OFFSET ??__Fdp88_Aircraft_LandingZone_Aircraft_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Aircraft_LandingZone_Aircraft_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Aircraft_LandingZone_Aircraft_Registrant@@YAXXZ ENDP ; `dynamic initializer for 'dp88_Aircraft_LandingZone_Aircraft_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::~ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::~ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0ED@OKCGICOM@ScriptRegistrant?$DMclass?5dp88_Airc@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Aircraft_LandingZone_Aircraft@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone_Aircraft@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>::ScriptRegistrant<dp88_Aircraft_LandingZone_Aircraft>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Aircraft_LandingZone_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Aircraft_LandingZone_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_Aircraft_LandingZone_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Aircraft_LandingZone_Registrant@@3V?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@A ; dp88_Aircraft_LandingZone_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Aircraft_LandingZone_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_Aircraft_LandingZone_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_Aircraft_LandingZone_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Aircraft_LandingZone_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_Aircraft_LandingZone_Registrant'', COMDAT

; 3617 : ScriptRegistrant<dp88_Aircraft_LandingZone> dp88_Aircraft_LandingZone_Registrant("dp88_Aircraft_LandingZone","");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0BK@IKKCDGAC@dp88_Aircraft_LandingZone?$AA@
	mov	ecx, OFFSET ?dp88_Aircraft_LandingZone_Registrant@@3V?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@A ; dp88_Aircraft_LandingZone_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Aircraft_LandingZone>::ScriptRegistrant<dp88_Aircraft_LandingZone>
	push	OFFSET ??__Fdp88_Aircraft_LandingZone_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Aircraft_LandingZone_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Aircraft_LandingZone_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_Aircraft_LandingZone_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Aircraft_LandingZone>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone>::~ScriptRegistrant<dp88_Aircraft_LandingZone>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_Aircraft_LandingZone>::~ScriptRegistrant<dp88_Aircraft_LandingZone>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DK@POENDPMO@ScriptRegistrant?$DMclass?5dp88_Airc@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Aircraft_LandingZone@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Aircraft_LandingZone>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Aircraft_LandingZone>::ScriptRegistrant<dp88_Aircraft_LandingZone>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Aircraft_LandingZone@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Aircraft_LandingZone>::ScriptRegistrant<dp88_Aircraft_LandingZone>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_CLEG_target_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_CLEG_target_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_AR_CLEG_target_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_CLEG_target_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@A ; dp88_AR_CLEG_target_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_CLEG_target_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_AR_CLEG_target_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_CLEG_target_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_CLEG_target_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_AR_CLEG_target_Registrant'', COMDAT

; 3612 : ScriptRegistrant<dp88_AR_CLEG_target> dp88_AR_CLEG_target_Registrant( "dp88_AR_CLEG_target", "resistance=20:int,clegEffectPreset=null:string" );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0CP@HPCMPHIH@resistance?$DN20?3int?0clegEffectPres@
	push	OFFSET ??_C@_0BE@KBJNNOAB@dp88_AR_CLEG_target?$AA@
	mov	ecx, OFFSET ?dp88_AR_CLEG_target_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@A ; dp88_AR_CLEG_target_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_CLEG_target>::ScriptRegistrant<dp88_AR_CLEG_target>
	push	OFFSET ??__Fdp88_AR_CLEG_target_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_CLEG_target_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_CLEG_target_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_AR_CLEG_target_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_CLEG_target>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_CLEG_target>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AR_CLEG_target>::~ScriptRegistrant<dp88_AR_CLEG_target>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AR_CLEG_target>::~ScriptRegistrant<dp88_AR_CLEG_target>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_CLEG_target>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DE@OLPOCJLH@ScriptRegistrant?$DMclass?5dp88_AR_C@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_CLEG_target@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_CLEG_target>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_CLEG_target>::ScriptRegistrant<dp88_AR_CLEG_target>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_CLEG_target@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_CLEG_target>::ScriptRegistrant<dp88_AR_CLEG_target>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_CLEG_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_CLEG_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_AR_CLEG_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_CLEG_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_CLEG@@@@A ; dp88_AR_CLEG_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_CLEG_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_AR_CLEG_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_CLEG_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_CLEG_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_AR_CLEG_Registrant'', COMDAT

; 3609 : ScriptRegistrant<dp88_AR_CLEG> dp88_AR_CLEG_Registrant("dp88_AR_CLEG","");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0N@PFLALNEJ@dp88_AR_CLEG?$AA@
	mov	ecx, OFFSET ?dp88_AR_CLEG_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_CLEG@@@@A ; dp88_AR_CLEG_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_CLEG@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_CLEG>::ScriptRegistrant<dp88_AR_CLEG>
	push	OFFSET ??__Fdp88_AR_CLEG_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_CLEG_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_CLEG_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_AR_CLEG_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAXI@Z PROC	; ScriptRegistrant<dp88_AR_CLEG>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAXI@Z ENDP	; ScriptRegistrant<dp88_AR_CLEG>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_AR_CLEG>::~ScriptRegistrant<dp88_AR_CLEG>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_AR_CLEG>::~ScriptRegistrant<dp88_AR_CLEG>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_CLEG>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0CN@HLMLBKJE@ScriptRegistrant?$DMclass?5dp88_AR_C@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_CLEG@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_CLEG@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_CLEG>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_CLEG@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_CLEG@@@@QAE@PBD0@Z PROC	; ScriptRegistrant<dp88_AR_CLEG>::ScriptRegistrant<dp88_AR_CLEG>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_CLEG@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_CLEG@@@@QAE@PBD0@Z ENDP	; ScriptRegistrant<dp88_AR_CLEG>::ScriptRegistrant<dp88_AR_CLEG>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_Deployable_Infantry_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_Deployable_Infantry_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AR_Deployable_Infantry_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_Deployable_Infantry_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@A ; dp88_AR_Deployable_Infantry_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_Deployable_Infantry_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AR_Deployable_Infantry_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_Deployable_Infantry_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_Deployable_Infantry_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AR_Deployable_Infantry_Registrant'', COMDAT

; 3606 : ScriptRegistrant<dp88_AR_Deployable_Infantry> dp88_AR_Deployable_Infantry_Registrant("dp88_AR_Deployable_Infantry", "deployedObjectPreset=null:string,deployedObjectSpaceRequired=6:float,deployAnimation=obj.obj:string,deployTime=4:float,undeployAnimation=obj.obj:string,undeployTime=4:float,deployedWeaponPowerup=null:string,deployedWeaponPowerup_veteran=null:string,deployedWeaponPowerup_elite=null:string,cannotDeployStringId=0:int,deployKeyhook=IDeploy:string,deployedArmourType=null:string,deployedArmourType_veteran=null:string,deployedArmourType_elite=null:string,deploySound:string,undeploySound:string");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BOM@OOMAMMGA@deployedObjectPreset?$DNnull?3string@
	push	OFFSET ??_C@_0BM@EGCLMKMH@dp88_AR_Deployable_Infantry?$AA@
	mov	ecx, OFFSET ?dp88_AR_Deployable_Infantry_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@A ; dp88_AR_Deployable_Infantry_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::ScriptRegistrant<dp88_AR_Deployable_Infantry>
	push	OFFSET ??__Fdp88_AR_Deployable_Infantry_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_Deployable_Infantry_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_Deployable_Infantry_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AR_Deployable_Infantry_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::~ScriptRegistrant<dp88_AR_Deployable_Infantry>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::~ScriptRegistrant<dp88_AR_Deployable_Infantry>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DM@NNLNBAKJ@ScriptRegistrant?$DMclass?5dp88_AR_D@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	336					; 00000150H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_Deployable_Infantry@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::ScriptRegistrant<dp88_AR_Deployable_Infantry>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_Deployable_Infantry@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_Deployable_Infantry>::ScriptRegistrant<dp88_AR_Deployable_Infantry>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_GameController_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_GameController_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AR_GameController_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_GameController_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_GameController@@@@A ; dp88_AR_GameController_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_GameController_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AR_GameController_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_GameController_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_GameController_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AR_GameController_Registrant'', COMDAT

; 3600 : ScriptRegistrant<dp88_AR_GameController> dp88_AR_GameController_Registrant( "dp88_AR_GameController", "enableCountry_Russia=1:int,enableCountry_Cuba=1:int,enableCountry_Iraq=1:int,enableCountry_Libya=1:int,enableCountry_America=1:int,enableCountry_France=1:int,enableCountry_Germany=1:int,enableCountry_GreatBritain=1:int,enableCountry_Korea=1:int,MirageTank_disguisePreset_1=mt_tree:string,MirageTank_disguisePreset_2=null:string,MirageTank_disguisePreset_3=null:string,Camouflage=u:string" );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BIE@EKBGJJ@enableCountry_Russia?$DN1?3int?0enabl@
	push	OFFSET ??_C@_0BH@PJCOCBOM@dp88_AR_GameController?$AA@
	mov	ecx, OFFSET ?dp88_AR_GameController_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_GameController@@@@A ; dp88_AR_GameController_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_GameController@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_GameController>::ScriptRegistrant<dp88_AR_GameController>
	push	OFFSET ??__Fdp88_AR_GameController_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_GameController_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_GameController_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AR_GameController_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_GameController>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_GameController>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AR_GameController>::~ScriptRegistrant<dp88_AR_GameController>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AR_GameController>::~ScriptRegistrant<dp88_AR_GameController>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_GameController>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DH@POLJMOBC@ScriptRegistrant?$DMclass?5dp88_AR_G@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_GameController@@QAE@XZ	; dp88_AR_GameController::dp88_AR_GameController
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_GameController@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_GameController>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_GameController@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_GameController@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_GameController>::ScriptRegistrant<dp88_AR_GameController>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_GameController@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_GameController@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_GameController>::ScriptRegistrant<dp88_AR_GameController>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_Paradrop_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_Paradrop_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_AR_Paradrop_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_Paradrop_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@A ; dp88_AR_Paradrop_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_Paradrop_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_AR_Paradrop_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_Paradrop_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_Paradrop_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_AR_Paradrop_Registrant'', COMDAT

; 2919 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0JN@MOLJIONA@Infantry_Preset?3string?0Parachute@
	push	OFFSET ??_C@_0BB@IILHOKGK@dp88_AR_Paradrop?$AA@
	mov	ecx, OFFSET ?dp88_AR_Paradrop_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@A ; dp88_AR_Paradrop_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Paradrop>::ScriptRegistrant<dp88_AR_Paradrop>
	push	OFFSET ??__Fdp88_AR_Paradrop_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_Paradrop_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_Paradrop_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_AR_Paradrop_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_Paradrop>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_Paradrop>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_AR_Paradrop>::~ScriptRegistrant<dp88_AR_Paradrop>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_AR_Paradrop>::~ScriptRegistrant<dp88_AR_Paradrop>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_Paradrop>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DB@FOECPKBO@ScriptRegistrant?$DMclass?5dp88_AR_P@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_Paradrop@@QAE@XZ		; dp88_AR_Paradrop::dp88_AR_Paradrop
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_Paradrop>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_Paradrop>::ScriptRegistrant<dp88_AR_Paradrop>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_Paradrop@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_Paradrop>::ScriptRegistrant<dp88_AR_Paradrop>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Ore_Dump_Zone_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Ore_Dump_Zone_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_Ore_Dump_Zone_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Ore_Dump_Zone_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@A ; dp88_Ore_Dump_Zone_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Ore_Dump_Zone_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_Ore_Dump_Zone_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_Ore_Dump_Zone_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Ore_Dump_Zone_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_Ore_Dump_Zone_Registrant'', COMDAT

; 1924 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0L@CEMIOEF@Team?$DN0?3int?$AA@
	push	OFFSET ??_C@_0BD@EDKPCDPK@dp88_Ore_Dump_Zone?$AA@
	mov	ecx, OFFSET ?dp88_Ore_Dump_Zone_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@A ; dp88_Ore_Dump_Zone_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ore_Dump_Zone>::ScriptRegistrant<dp88_Ore_Dump_Zone>
	push	OFFSET ??__Fdp88_Ore_Dump_Zone_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Ore_Dump_Zone_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Ore_Dump_Zone_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_Ore_Dump_Zone_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Ore_Dump_Zone>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_Ore_Dump_Zone>::~ScriptRegistrant<dp88_Ore_Dump_Zone>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_Ore_Dump_Zone>::~ScriptRegistrant<dp88_Ore_Dump_Zone>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Ore_Dump_Zone>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DD@NDLGBNOC@ScriptRegistrant?$DMclass?5dp88_Ore_@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Ore_Dump_Zone@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Ore_Dump_Zone>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Ore_Dump_Zone>::ScriptRegistrant<dp88_Ore_Dump_Zone>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Ore_Dump_Zone@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Ore_Dump_Zone>::ScriptRegistrant<dp88_Ore_Dump_Zone>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Ore_Extractor_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Ore_Extractor_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_Ore_Extractor_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Ore_Extractor_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@A ; dp88_Ore_Extractor_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Ore_Extractor_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_Ore_Extractor_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_Ore_Extractor_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Ore_Extractor_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_Ore_Extractor_Registrant'', COMDAT

; 1900 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0EC@GELKPOJM@Ore_Units?3int?0Extraction_Interva@
	push	OFFSET ??_C@_0BD@LIFBBGKP@dp88_Ore_Extractor?$AA@
	mov	ecx, OFFSET ?dp88_Ore_Extractor_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@A ; dp88_Ore_Extractor_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ore_Extractor>::ScriptRegistrant<dp88_Ore_Extractor>
	push	OFFSET ??__Fdp88_Ore_Extractor_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Ore_Extractor_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Ore_Extractor_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_Ore_Extractor_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Ore_Extractor>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Ore_Extractor>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_Ore_Extractor>::~ScriptRegistrant<dp88_Ore_Extractor>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_Ore_Extractor>::~ScriptRegistrant<dp88_Ore_Extractor>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Ore_Extractor>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DD@GNEKOMJM@ScriptRegistrant?$DMclass?5dp88_Ore_@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Ore_Extractor@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Ore_Extractor>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Ore_Extractor>::ScriptRegistrant<dp88_Ore_Extractor>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Ore_Extractor@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Ore_Extractor>::ScriptRegistrant<dp88_Ore_Extractor>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Ore_Field_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Ore_Field_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_Ore_Field_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Ore_Field_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Field@@@@A ; dp88_Ore_Field_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Ore_Field_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_Ore_Field_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_Ore_Field_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Ore_Field_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_Ore_Field_Registrant'', COMDAT

; 1817 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0MG@HFFBHDGO@Ore_Value?3int?0Ore_Capacity?3int?0O@
	push	OFFSET ??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@
	mov	ecx, OFFSET ?dp88_Ore_Field_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Field@@@@A ; dp88_Ore_Field_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Ore_Field@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ore_Field>::ScriptRegistrant<dp88_Ore_Field>
	push	OFFSET ??__Fdp88_Ore_Field_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Ore_Field_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Ore_Field_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_Ore_Field_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Ore_Field>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Ore_Field>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_Ore_Field>::~ScriptRegistrant<dp88_Ore_Field>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_Ore_Field>::~ScriptRegistrant<dp88_Ore_Field>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Ore_Field>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0CP@NNLHKEFJ@ScriptRegistrant?$DMclass?5dp88_Ore_@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Ore_Field@@QAE@XZ		; dp88_Ore_Field::dp88_Ore_Field
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Ore_Field@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Ore_Field>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Ore_Field@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Ore_Field@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Ore_Field>::ScriptRegistrant<dp88_Ore_Field>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Ore_Field@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Ore_Field@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Ore_Field>::ScriptRegistrant<dp88_Ore_Field>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_Chrono_Miner_Chronozone_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_Chrono_Miner_Chronozone_Registrant@@YAXXZ PROC ; `dynamic atexit destructor for 'dp88_AR_Chrono_Miner_Chronozone_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_Chrono_Miner_Chronozone_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@A ; dp88_AR_Chrono_Miner_Chronozone_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_Chrono_Miner_Chronozone_Registrant@@YAXXZ ENDP ; `dynamic atexit destructor for 'dp88_AR_Chrono_Miner_Chronozone_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_Chrono_Miner_Chronozone_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_Chrono_Miner_Chronozone_Registrant@@YAXXZ PROC ; `dynamic initializer for 'dp88_AR_Chrono_Miner_Chronozone_Registrant'', COMDAT

; 1644 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0CA@CFCDHMOJ@dp88_AR_Chrono_Miner_Chronozone?$AA@
	mov	ecx, OFFSET ?dp88_AR_Chrono_Miner_Chronozone_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@A ; dp88_AR_Chrono_Miner_Chronozone_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>
	push	OFFSET ??__Fdp88_AR_Chrono_Miner_Chronozone_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_Chrono_Miner_Chronozone_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_Chrono_Miner_Chronozone_Registrant@@YAXXZ ENDP ; `dynamic initializer for 'dp88_AR_Chrono_Miner_Chronozone_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::~ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::~ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0EA@IKNPFBAM@ScriptRegistrant?$DMclass?5dp88_AR_C@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_Chrono_Miner_Chronozone@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner_Chronozone@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>::ScriptRegistrant<dp88_AR_Chrono_Miner_Chronozone>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AR_Chrono_Miner_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AR_Chrono_Miner_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AR_Chrono_Miner_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AR_Chrono_Miner_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@A ; dp88_AR_Chrono_Miner_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AR_Chrono_Miner_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AR_Chrono_Miner_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_AR_Chrono_Miner_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AR_Chrono_Miner_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AR_Chrono_Miner_Registrant'', COMDAT

; 1612 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BMK@OGKPIJCA@Use_AI?$DN1?3int?0chronoshift_time?$DN2?4@
	push	OFFSET ??_C@_0BF@EMHNCJLM@dp88_AR_Chrono_Miner?$AA@
	mov	ecx, OFFSET ?dp88_AR_Chrono_Miner_Registrant@@3V?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@A ; dp88_AR_Chrono_Miner_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AR_Chrono_Miner>::ScriptRegistrant<dp88_AR_Chrono_Miner>
	push	OFFSET ??__Fdp88_AR_Chrono_Miner_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AR_Chrono_Miner_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AR_Chrono_Miner_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AR_Chrono_Miner_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AR_Chrono_Miner>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner>::~ScriptRegistrant<dp88_AR_Chrono_Miner>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AR_Chrono_Miner>::~ScriptRegistrant<dp88_AR_Chrono_Miner>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DF@MJPKOALH@ScriptRegistrant?$DMclass?5dp88_AR_C@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	108					; 0000006cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AR_Chrono_Miner@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AR_Chrono_Miner>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AR_Chrono_Miner>::ScriptRegistrant<dp88_AR_Chrono_Miner>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AR_Chrono_Miner@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AR_Chrono_Miner>::ScriptRegistrant<dp88_AR_Chrono_Miner>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Ore_Miner_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Ore_Miner_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_Ore_Miner_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Ore_Miner_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Miner@@@@A ; dp88_Ore_Miner_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Ore_Miner_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_Ore_Miner_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??__Edp88_Ore_Miner_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Ore_Miner_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_Ore_Miner_Registrant'', COMDAT

; 1311 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0OL@IPNIEICP@Use_AI?$DN1?3int?0Ore_Capacity?$DN10?3int@
	push	OFFSET ??_C@_0P@PNGCCGHJ@dp88_Ore_Miner?$AA@
	mov	ecx, OFFSET ?dp88_Ore_Miner_Registrant@@3V?$ScriptRegistrant@Vdp88_Ore_Miner@@@@A ; dp88_Ore_Miner_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Ore_Miner@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ore_Miner>::ScriptRegistrant<dp88_Ore_Miner>
	push	OFFSET ??__Fdp88_Ore_Miner_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Ore_Miner_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Ore_Miner_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_Ore_Miner_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Ore_Miner>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Ore_Miner>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_Ore_Miner>::~ScriptRegistrant<dp88_Ore_Miner>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_Ore_Miner>::~ScriptRegistrant<dp88_Ore_Miner>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Ore_Miner>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0CP@DPGAIJBN@ScriptRegistrant?$DMclass?5dp88_Ore_@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Ore_Miner@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Ore_Miner@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Ore_Miner>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Ore_Miner@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Ore_Miner@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Ore_Miner>::ScriptRegistrant<dp88_Ore_Miner>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Ore_Miner@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Ore_Miner@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Ore_Miner>::ScriptRegistrant<dp88_Ore_Miner>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z PROC ; SLNode<ScriptableGameObj>::SLNode<ScriptableGameObj>, COMDAT
; _this$ = ecx

; 69   : 	SLNode(T *obj) : GenericSLNode(obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericSLNode@@IAE@PAX@Z		; GenericSLNode::GenericSLNode
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z ENDP ; SLNode<ScriptableGameObj>::SLNode<ScriptableGameObj>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ PROC ; SLNode<ScriptableGameObj>::Data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (T*)NodeData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ENDP ; SLNode<ScriptableGameObj>::Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ PROC	; SLNode<ScriptableGameObj>::Next, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		return (SLNode<T>*)NodeNext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ENDP	; SLNode<ScriptableGameObj>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z PROC ; SLNode<ScriptableGameObj>::Set_Next, COMDAT
; _this$ = ecx

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 		NodeNext = n;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx

; 59   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ENDP ; SLNode<ScriptableGameObj>::Set_Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$SList@VScriptableGameObj@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SList@VScriptableGameObj@@@@UAEPAXI@Z PROC	; SList<ScriptableGameObj>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SList@VScriptableGameObj@@@@UAE@XZ	; SList<ScriptableGameObj>::~SList<ScriptableGameObj>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$SList@VScriptableGameObj@@@@UAEPAXI@Z ENDP	; SList<ScriptableGameObj>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Head@?$SList@VScriptableGameObj@@@@QBEPAV?$SLNode@VScriptableGameObj@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Head@?$SList@VScriptableGameObj@@@@QBEPAV?$SLNode@VScriptableGameObj@@@@XZ PROC ; SList<ScriptableGameObj>::Head, COMDAT
; _this$ = ecx

; 313  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 		return HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Head@?$SList@VScriptableGameObj@@@@QBEPAV?$SLNode@VScriptableGameObj@@@@XZ ENDP ; SList<ScriptableGameObj>::Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Get_Count@?$SList@VScriptableGameObj@@@@UBEIXZ
_TEXT	SEGMENT
_node$1 = -12						; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Count@?$SList@VScriptableGameObj@@@@UBEIXZ PROC	; SList<ScriptableGameObj>::Get_Count, COMDAT
; _this$ = ecx

; 302  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		uint32 count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 304  : 
; 305  : 		for (SLNode<T>* node = HeadNode; node; node = node->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _node$1[ebp], ecx
	jmp	SHORT $LN3@Get_Count
$LN2@Get_Count:
	mov	ecx, DWORD PTR _node$1[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _node$1[ebp], eax
$LN3@Get_Count:
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN1@Get_Count

; 306  : 			++count;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN2@Get_Count
$LN1@Get_Count:

; 307  : 
; 308  : 		return count;

	mov	eax, DWORD PTR _count$[ebp]

; 309  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Count@?$SList@VScriptableGameObj@@@@UBEIXZ ENDP	; SList<ScriptableGameObj>::Get_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Is_Empty@?$SList@VScriptableGameObj@@@@UBE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@?$SList@VScriptableGameObj@@@@UBE_NXZ PROC	; SList<ScriptableGameObj>::Is_Empty, COMDAT
; _this$ = ecx

; 296  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return !HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv66[ebp]

; 298  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@?$SList@VScriptableGameObj@@@@UBE_NXZ ENDP	; SList<ScriptableGameObj>::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_After@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z
_TEXT	SEGMENT
tv140 = -88						; size = 4
tv142 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_After@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z PROC ; SList<ScriptableGameObj>::Insert_After, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN8@Insert_Aft

; 269  : 		{
; 270  : 			return false;

	xor	al, al
	jmp	$LN9@Insert_Aft
$LN8@Insert_Aft:

; 271  : 		}
; 272  : 		if (oldnode == NULL || HeadNode == NULL)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN6@Insert_Aft
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@Insert_Aft
$LN6@Insert_Aft:

; 273  : 		{
; 274  : 			return(Add_Head(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN9@Insert_Aft
$LN7@Insert_Aft:

; 275  : 		}
; 276  : 		SLNode<T> *cur;
; 277  : 		for (cur = HeadNode; cur && cur->Data() != oldnode; cur = cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Insert_Aft
$LN4@Insert_Aft:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Insert_Aft:
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN3@Insert_Aft

; 278  : 		{
; 279  : 		}

	jmp	SHORT $LN4@Insert_Aft
$LN3@Insert_Aft:

; 280  : 		if (cur != NULL  && cur->Data() == oldnode)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN2@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN2@Insert_Aft

; 281  : 		{
; 282  : 			if (cur == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Insert_Aft

; 283  : 			{
; 284  : 				return(Add_Tail(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	$LN9@Insert_Aft
$LN1@Insert_Aft:

; 285  : 			}
; 286  : 			SLNode<T> *temp = new SLNode<T>(newnode);

	push	OFFSET ??_C@_0CN@EGDEANLB@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
	push	286					; 0000011eH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Insert_Aft
	xor	ecx, ecx
	jne	SHORT $LN11@Insert_Aft
	push	286					; 0000011eH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@Insert_Aft:
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN15@Insert_Aft
$LN14@Insert_Aft:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN12@Insert_Aft
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z ; SLNode<ScriptableGameObj>::SLNode<ScriptableGameObj>
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN13@Insert_Aft
$LN12@Insert_Aft:
	mov	DWORD PTR tv140[ebp], 0
$LN13@Insert_Aft:
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv142[ebp], ecx
$LN15@Insert_Aft:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 287  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 288  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 289  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Insert_Aft
$LN2@Insert_Aft:

; 290  : 		}
; 291  : 		return false;

	xor	al, al
$LN9@Insert_Aft:

; 292  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_After@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z ENDP ; SList<ScriptableGameObj>::Insert_After
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_Before@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z
_TEXT	SEGMENT
tv145 = -88						; size = 4
tv147 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_Before@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z PROC ; SList<ScriptableGameObj>::Insert_Before, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN7@Insert_Bef

; 245  : 		{
; 246  : 			return false;

	xor	al, al
	jmp	$LN8@Insert_Bef
$LN7@Insert_Bef:

; 247  : 		}
; 248  : 		if (oldnode == NULL || HeadNode == NULL || HeadNode->Data() == oldnode)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	SHORT $LN6@Insert_Bef
$LN5@Insert_Bef:

; 249  : 		{
; 250  : 			return Add_Head(newnode);

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN8@Insert_Bef
$LN6@Insert_Bef:

; 251  : 		}
; 252  : 		SLNode<T> *cur;
; 253  : 		for (cur=HeadNode; cur->Next() && cur->Next()->Data() != oldnode; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN4@Insert_Bef
$LN3@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN4@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	test	eax, eax
	je	SHORT $LN2@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN2@Insert_Bef

; 254  : 		{
; 255  : 		}

	jmp	SHORT $LN3@Insert_Bef
$LN2@Insert_Bef:

; 256  : 		if (cur->Next() != NULL && cur->Next()->Data() == oldnode)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	test	eax, eax
	je	$LN1@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN1@Insert_Bef

; 257  : 		{
; 258  : 			SLNode<T> *temp	= new SLNode<T> (newnode);

	push	OFFSET ??_C@_0CO@GGELGEEA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
	push	258					; 00000102H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@Insert_Bef
	xor	ecx, ecx
	jne	SHORT $LN10@Insert_Bef
	push	258					; 00000102H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Insert_Bef:
	mov	DWORD PTR tv147[ebp], 0
	jmp	SHORT $LN14@Insert_Bef
$LN13@Insert_Bef:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@Insert_Bef
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z ; SLNode<ScriptableGameObj>::SLNode<ScriptableGameObj>
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN12@Insert_Bef
$LN11@Insert_Bef:
	mov	DWORD PTR tv145[ebp], 0
$LN12@Insert_Bef:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv147[ebp], ecx
$LN14@Insert_Bef:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 259  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 260  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 261  : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@Insert_Bef
$LN1@Insert_Bef:

; 262  : 		}
; 263  : 		return false;

	xor	al, al
$LN8@Insert_Bef:

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_Before@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@PBV2@@Z ENDP ; SList<ScriptableGameObj>::Insert_Before
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_All@?$SList@VScriptableGameObj@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_cur$2 = -12						; size = 4
_next$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_All@?$SList@VScriptableGameObj@@@@UAEXXZ PROC	; SList<ScriptableGameObj>::Remove_All, COMDAT
; _this$ = ecx

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 		SLNode<T> *next;
; 233  : 		for (SLNode<T> *cur = HeadNode; cur; cur = next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$2[ebp], ecx
	jmp	SHORT $LN3@Remove_All
$LN2@Remove_All:
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$2[ebp], eax
$LN3@Remove_All:
	cmp	DWORD PTR _cur$2[ebp], 0
	je	SHORT $LN1@Remove_All

; 234  : 		{
; 235  : 			next = cur->Next();

	mov	ecx, DWORD PTR _cur$2[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _next$[ebp], eax

; 236  : 			delete cur;

	push	OFFSET ??_C@_0CL@NFLHONKO@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
	push	236					; 000000ecH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Remove_All
	xor	ecx, ecx
	jne	SHORT $LN6@Remove_All
	push	236					; 000000ecH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Remove_All:
	jmp	SHORT $LN8@Remove_All
$LN7@Remove_All:
	mov	eax, DWORD PTR _cur$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN8@Remove_All:

; 237  : 		}

	jmp	SHORT $LN2@Remove_All
$LN1@Remove_All:

; 238  : 		HeadNode = TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 239  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_All@?$SList@VScriptableGameObj@@@@UAEXXZ ENDP	; SList<ScriptableGameObj>::Remove_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove@?$SList@VScriptableGameObj@@@@UAE_NPBVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv76 = -81						; size = 1
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_element$ = 8						; size = 4
?Remove@?$SList@VScriptableGameObj@@@@UAE_NPBVScriptableGameObj@@@Z PROC ; SList<ScriptableGameObj>::Remove, COMDAT
; _this$ = ecx

; 202  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		if (element == NULL || HeadNode == NULL)

	cmp	DWORD PTR _element$[ebp], 0
	je	SHORT $LN7@Remove
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@Remove
$LN7@Remove:

; 204  : 		{
; 205  : 			return false;

	xor	al, al
	jmp	$LN9@Remove
$LN8@Remove:

; 206  : 		}
; 207  : 		if (HeadNode->Data() == element)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN6@Remove

; 208  : 		{
; 209  : 			return Remove_Head() != NULL ? true : false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	test	eax, eax
	je	SHORT $LN11@Remove
	mov	BYTE PTR tv76[ebp], 1
	jmp	SHORT $LN12@Remove
$LN11@Remove:
	mov	BYTE PTR tv76[ebp], 0
$LN12@Remove:
	mov	al, BYTE PTR tv76[ebp]
	jmp	$LN9@Remove
$LN6@Remove:

; 210  : 		}
; 211  : 		SLNode<T> *cur;
; 212  : 		for (cur = HeadNode; cur->Next() && cur->Next()->Data() != element; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Remove
$LN4@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	test	eax, eax
	je	SHORT $LN3@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	je	SHORT $LN3@Remove

; 213  : 		{
; 214  : 		}

	jmp	SHORT $LN4@Remove
$LN3@Remove:

; 215  : 		if (cur->Next() != NULL && cur->Next()->Data() == element)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	test	eax, eax
	je	$LN2@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN2@Remove

; 216  : 		{
; 217  : 			SLNode<T> *temp	= cur->Next();

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _temp$2[ebp], eax

; 218  : 			cur->Set_Next(temp->Next());

	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 219  : 			if (temp == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Remove

; 220  : 			{
; 221  : 				TailNode = cur;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Remove:

; 222  : 			}
; 223  : 			delete temp;

	push	OFFSET ??_C@_0CH@MNGAMMMC@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
	push	223					; 000000dfH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Remove
	xor	ecx, ecx
	jne	SHORT $LN13@Remove
	push	223					; 000000dfH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Remove:
	jmp	SHORT $LN15@Remove
$LN14@Remove:
	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN15@Remove:

; 224  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Remove
$LN2@Remove:

; 225  : 		}
; 226  : 		return false;

	xor	al, al
$LN9@Remove:

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$SList@VScriptableGameObj@@@@UAE_NPBVScriptableGameObj@@@Z ENDP ; SList<ScriptableGameObj>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Tail@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
_data$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Tail@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ PROC ; SList<ScriptableGameObj>::Remove_Tail, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Tai

; 193  : 		{
; 194  : 			return ((T *)NULL);

	xor	eax, eax
	jmp	SHORT $LN2@Remove_Tai
$LN1@Remove_Tai:

; 195  : 		}
; 196  : 		T* data = TailNode->Data();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	mov	DWORD PTR _data$[ebp], eax

; 197  : 		return (Remove(data) ? data : (T*)NULL);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Remove_Tai
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN5@Remove_Tai
$LN4@Remove_Tai:
	mov	DWORD PTR tv76[ebp], 0
$LN5@Remove_Tai:
	mov	eax, DWORD PTR tv76[ebp]
$LN2@Remove_Tai:

; 198  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Tail@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ ENDP ; SList<ScriptableGameObj>::Remove_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Head@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_data$ = -12						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Head@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ PROC ; SList<ScriptableGameObj>::Remove_Head, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Remove_Hea

; 175  : 		{
; 176  : 			return ((T* )NULL);

	xor	eax, eax
	jmp	$LN3@Remove_Hea
$LN2@Remove_Hea:

; 177  : 		}
; 178  : 		SLNode<T> *temp = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 179  : 		HeadNode = HeadNode->Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 180  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Hea

; 181  : 		{
; 182  : 			TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@Remove_Hea:

; 183  : 		}
; 184  : 		T *data = temp->Data();

	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	mov	DWORD PTR _data$[ebp], eax

; 185  : 		delete temp;

	push	OFFSET ??_C@_0CM@EIOKCJAJ@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
	push	185					; 000000b9H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Remove_Hea
	xor	ecx, ecx
	jne	SHORT $LN5@Remove_Hea
	push	185					; 000000b9H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Remove_Hea:
	jmp	SHORT $LN7@Remove_Hea
$LN6@Remove_Hea:
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN7@Remove_Hea:

; 186  : 		return data;

	mov	eax, DWORD PTR _data$[ebp]
$LN3@Remove_Hea:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Head@?$SList@VScriptableGameObj@@@@UAEPAVScriptableGameObj@@XZ ENDP ; SList<ScriptableGameObj>::Remove_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
_cur$1 = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z PROC ; SList<ScriptableGameObj>::Add_Tail, COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@Add_Tail

; 161  : 		{
; 162  : 			return false;

	xor	al, al
	jmp	SHORT $LN5@Add_Tail
$LN4@Add_Tail:

; 163  : 		}
; 164  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next()) 

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$1[ebp], ecx
	jmp	SHORT $LN3@Add_Tail
$LN2@Add_Tail:
	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _cur$1[ebp], eax
$LN3@Add_Tail:
	cmp	DWORD PTR _cur$1[ebp], 0
	je	SHORT $LN1@Add_Tail

; 165  : 		{
; 166  : 			Add_Tail(cur->Data());

	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 167  : 		}

	jmp	SHORT $LN2@Add_Tail
$LN1@Add_Tail:

; 168  : 		return true;

	mov	al, 1
$LN5@Add_Tail:

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z ENDP ; SList<ScriptableGameObj>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z PROC ; SList<ScriptableGameObj>::Add_Tail, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		if (data == NULL)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN3@Add_Tail

; 141  : 		{
; 142  : 			return false;

	xor	al, al
	jmp	$LN4@Add_Tail
$LN3@Add_Tail:

; 143  : 		}
; 144  : 		SLNode<T> *temp = new SLNode<T> (data);

	push	OFFSET ??_C@_0CJ@BJDGPFFE@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
	push	144					; 00000090H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@Add_Tail
	xor	ecx, ecx
	jne	SHORT $LN6@Add_Tail
	push	144					; 00000090H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Add_Tail:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN10@Add_Tail
$LN9@Add_Tail:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@Add_Tail
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z ; SLNode<ScriptableGameObj>::SLNode<ScriptableGameObj>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN8@Add_Tail
$LN7@Add_Tail:
	mov	DWORD PTR tv82[ebp], 0
$LN8@Add_Tail:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN10@Add_Tail:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 145  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Add_Tail

; 146  : 		{
; 147  : 			HeadNode = TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx+4], eax

; 148  : 		}
; 149  : 		else

	jmp	SHORT $LN1@Add_Tail
$LN2@Add_Tail:

; 150  : 		{
; 151  : 			TailNode->Set_Next(temp);

	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 152  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Tail:

; 153  : 		}
; 154  : 		return true;

	mov	al, 1
$LN4@Add_Tail:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z ENDP ; SList<ScriptableGameObj>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
tv90 = -92						; size = 4
tv92 = -88						; size = 4
$T1 = -84						; size = 4
_temp$2 = -16						; size = 4
_cur$3 = -12						; size = 4
_addpoint$ = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z PROC ; SList<ScriptableGameObj>::Add_Head, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@Add_Head

; 115  : 		{
; 116  : 			return false;

	xor	al, al
	jmp	$LN7@Add_Head
$LN6@Add_Head:

; 117  : 		}
; 118  : 		SLNode<T> *addpoint = NULL;

	mov	DWORD PTR _addpoint$[ebp], 0

; 119  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next())

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$3[ebp], ecx
	jmp	SHORT $LN5@Add_Head
$LN4@Add_Head:
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _cur$3[ebp], eax
$LN5@Add_Head:
	cmp	DWORD PTR _cur$3[ebp], 0
	je	$LN3@Add_Head

; 120  : 		{
; 121  : 			if (addpoint)

	cmp	DWORD PTR _addpoint$[ebp], 0
	je	$LN2@Add_Head

; 122  : 			{
; 123  : 				SLNode<T> *temp = new SLNode<T>(cur->Data());

	push	OFFSET ??_C@_0CJ@PFIOMDDA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
	push	123					; 0000007bH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN12@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN9@Add_Head
	push	123					; 0000007bH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Add_Head:
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN13@Add_Head
$LN12@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN10@Add_Head
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z ; SLNode<ScriptableGameObj>::SLNode<ScriptableGameObj>
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN11@Add_Head
$LN10@Add_Head:
	mov	DWORD PTR tv90[ebp], 0
$LN11@Add_Head:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv92[ebp], eax
$LN13@Add_Head:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _temp$2[ebp], ecx

; 124  : 				temp->Set_Next(addpoint->Next());

	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 125  : 				addpoint->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 126  : 				addpoint = temp;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR _addpoint$[ebp], eax

; 127  : 			}
; 128  : 			else

	jmp	SHORT $LN1@Add_Head
$LN2@Add_Head:

; 129  : 			{
; 130  : 				Add_Head(cur->Data());

	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 131  : 				addpoint = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _addpoint$[ebp], ecx
$LN1@Add_Head:

; 132  : 			}
; 133  : 		}

	jmp	$LN4@Add_Head
$LN3@Add_Head:

; 134  : 		return true;

	mov	al, 1
$LN7@Add_Head:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NAAV1@@Z ENDP ; SList<ScriptableGameObj>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z PROC ; SList<ScriptableGameObj>::Add_Head, COMDAT
; _this$ = ecx

; 96   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		if (!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN2@Add_Head

; 98   : 		{
; 99   : 			return false;

	xor	al, al
	jmp	$LN3@Add_Head
$LN2@Add_Head:

; 100  : 		}
; 101  : 		SLNode<T> *temp	= new SLNode<T>(data);

	push	OFFSET ??_C@_0CJ@PFIOMDDA@SList?$DMclass?5ScriptableGameObj?$DO?3?3@
	push	101					; 00000065H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN5@Add_Head
	push	101					; 00000065H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Add_Head:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN9@Add_Head
$LN8@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Add_Head
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@VScriptableGameObj@@@@IAE@PAVScriptableGameObj@@@Z ; SLNode<ScriptableGameObj>::SLNode<ScriptableGameObj>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN7@Add_Head
$LN6@Add_Head:
	mov	DWORD PTR tv82[ebp], 0
$LN7@Add_Head:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN9@Add_Head:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 102  : 		temp->Set_Next(HeadNode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Set_Next@?$SLNode@VScriptableGameObj@@@@QAEXPAV1@@Z ; SLNode<ScriptableGameObj>::Set_Next

; 103  : 		HeadNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 104  : 		if (!TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@Add_Head

; 105  : 		{
; 106  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Head:

; 107  : 		}
; 108  : 		return true;

	mov	al, 1
$LN3@Add_Head:

; 109  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@VScriptableGameObj@@@@UAE_NPAVScriptableGameObj@@@Z ENDP ; SList<ScriptableGameObj>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??1?$SList@VScriptableGameObj@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$SList@VScriptableGameObj@@@@UAE@XZ PROC		; SList<ScriptableGameObj>::~SList<ScriptableGameObj>, COMDAT
; _this$ = ecx

; 90   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@VScriptableGameObj@@@@6B@

; 91   : 		Remove_All();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove_All@?$SList@VScriptableGameObj@@@@UAEXXZ ; SList<ScriptableGameObj>::Remove_All

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$SList@VScriptableGameObj@@@@UAE@XZ ENDP		; SList<ScriptableGameObj>::~SList<ScriptableGameObj>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SList@VScriptableGameObj@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$SList@VScriptableGameObj@@@@QAE@XZ PROC		; SList<ScriptableGameObj>::SList<ScriptableGameObj>, COMDAT
; _this$ = ecx

; 86   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@VScriptableGameObj@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 87   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SList@VScriptableGameObj@@@@QAE@XZ ENDP		; SList<ScriptableGameObj>::SList<ScriptableGameObj>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\offenseobjectclass.h
;	COMDAT ?Set_Owner@OffenseObjectClass@@QAEXPAVArmedGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_owner$ = 8						; size = 4
?Set_Owner@OffenseObjectClass@@QAEXPAVArmedGameObj@@@Z PROC ; OffenseObjectClass::Set_Owner, COMDAT
; _this$ = ecx

; 28   : 	void	Set_Owner( ArmedGameObj *owner )	{ Owner = (ScriptableGameObj *)owner; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _owner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Owner@OffenseObjectClass@@QAEXPAVArmedGameObj@@@Z ENDP ; OffenseObjectClass::Set_Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\offenseobjectclass.h
;	COMDAT ??1OffenseObjectClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1OffenseObjectClass@@QAE@XZ PROC			; OffenseObjectClass::~OffenseObjectClass, COMDAT
; _this$ = ecx

; 20   : 	~OffenseObjectClass() { Set_Owner( NULL ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Owner@OffenseObjectClass@@QAEXPAVArmedGameObj@@@Z ; OffenseObjectClass::Set_Owner
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1OffenseObjectClass@@QAE@XZ ENDP			; OffenseObjectClass::~OffenseObjectClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\offenseobjectclass.h
;	COMDAT ??0OffenseObjectClass@@QAE@MIPAVArmedGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_damage$ = 8						; size = 4
_warhead$ = 12						; size = 4
_owner$ = 16						; size = 4
??0OffenseObjectClass@@QAE@MIPAVArmedGameObj@@@Z PROC	; OffenseObjectClass::OffenseObjectClass, COMDAT
; _this$ = ecx

; 18   : 	OffenseObjectClass( float damage = DEFAULT_DAMAGE, unsigned int warhead = 0, ArmedGameObj *owner = NULL ) : Damage( damage ), Warhead( warhead ), ForceServerDamage( false ), EnableClientDamage( false ) { Set_Owner( owner ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _damage$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _warhead$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ReferencerClass@@QAE@XZ		; ReferencerClass::ReferencerClass
	mov	eax, DWORD PTR _owner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Owner@OffenseObjectClass@@QAEXPAVArmedGameObj@@@Z ; OffenseObjectClass::Set_Owner
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0OffenseObjectClass@@QAE@MIPAVArmedGameObj@@@Z ENDP	; OffenseObjectClass::OffenseObjectClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\soldiergameobj.h
;	COMDAT ?Can_Drive_Vehicles@SoldierGameObj@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Can_Drive_Vehicles@SoldierGameObj@@QAE_NXZ PROC	; SoldierGameObj::Can_Drive_Vehicles, COMDAT
; _this$ = ecx

; 195  : 	bool				Can_Drive_Vehicles() { return CanDriveVehicles; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+3374]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Can_Drive_Vehicles@SoldierGameObj@@QAE_NXZ ENDP	; SoldierGameObj::Can_Drive_Vehicles
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\soldiergameobj.h
;	COMDAT ?Set_Can_Drive_Vehicles@SoldierGameObj@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_onoff$ = 8						; size = 1
?Set_Can_Drive_Vehicles@SoldierGameObj@@QAEX_N@Z PROC	; SoldierGameObj::Set_Can_Drive_Vehicles, COMDAT
; _this$ = ecx

; 194  : 	void				Set_Can_Drive_Vehicles(bool onoff) { CanDriveVehicles = onoff; Set_Object_Dirty_Bit(BIT_RARE, true); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _onoff$[ebp]
	mov	BYTE PTR [eax+3374], cl
	push	1
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Can_Drive_Vehicles@SoldierGameObj@@QAEX_N@Z ENDP	; SoldierGameObj::Set_Can_Drive_Vehicles
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\soldiergameobj.h
;	COMDAT ?Get_State@SoldierGameObj@@QAE?AW4HumanStateType@HumanStateClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_State@SoldierGameObj@@QAE?AW4HumanStateType@HumanStateClass@@XZ PROC ; SoldierGameObj::Get_State, COMDAT
; _this$ = ecx

; 188  : 	HumanStateClass::HumanStateType 	Get_State( void )			{ return HumanState.Get_State(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2448				; 00000990H
	call	?Get_State@HumanStateClass@@QAE?AW4HumanStateType@1@XZ ; HumanStateClass::Get_State
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_State@SoldierGameObj@@QAE?AW4HumanStateType@HumanStateClass@@XZ ENDP ; SoldierGameObj::Get_State
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\soldiergameobj.h
;	COMDAT ?Is_In_Vehicle@SoldierGameObj@@QAE_NXZ
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
?Is_In_Vehicle@SoldierGameObj@@QAE_NXZ PROC		; SoldierGameObj::Is_In_Vehicle, COMDAT
; _this$ = ecx

; 117  : 	bool				Is_In_Vehicle( void )	{ return Get_State() == HumanStateClass::IN_VEHICLE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_State@SoldierGameObj@@QAE?AW4HumanStateType@HumanStateClass@@XZ ; SoldierGameObj::Get_State
	cmp	eax, 9
	jne	SHORT $LN3@Is_In_Vehi
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@Is_In_Vehi
$LN3@Is_In_Vehi:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Is_In_Vehi:
	mov	al, BYTE PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_In_Vehicle@SoldierGameObj@@QAE_NXZ ENDP		; SoldierGameObj::Is_In_Vehicle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\soldiergameobj.h
;	COMDAT ?Is_On_Ladder@SoldierGameObj@@QAE_NXZ
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
?Is_On_Ladder@SoldierGameObj@@QAE_NXZ PROC		; SoldierGameObj::Is_On_Ladder, COMDAT
; _this$ = ecx

; 116  : 	bool				Is_On_Ladder( void )		{ return Get_State() == HumanStateClass::LADDER; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_State@SoldierGameObj@@QAE?AW4HumanStateType@HumanStateClass@@XZ ; SoldierGameObj::Get_State
	cmp	eax, 8
	jne	SHORT $LN3@Is_On_Ladd
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@Is_On_Ladd
$LN3@Is_On_Ladd:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Is_On_Ladd:
	mov	al, BYTE PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_On_Ladder@SoldierGameObj@@QAE_NXZ ENDP		; SoldierGameObj::Is_On_Ladder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z PROC		; ArmorWarheadManager::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z ENDP		; ArmorWarheadManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\humanstateclass.h
;	COMDAT ?Get_State@HumanStateClass@@QAE?AW4HumanStateType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_State@HumanStateClass@@QAE?AW4HumanStateType@1@XZ PROC ; HumanStateClass::Get_State, COMDAT
; _this$ = ecx

; 106  : 	HumanStateType	Get_State( void )												{ return State; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_State@HumanStateClass@@QAE?AW4HumanStateType@1@XZ ENDP ; HumanStateClass::Get_State
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_linkHealth@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_linkHealth@@UAEPAXI@Z PROC			; dp88_linkHealth::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_linkHealth@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_linkHealth@@UAEPAXI@Z ENDP			; dp88_linkHealth::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_linkHealth@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_linkHealth@@UAE@XZ PROC				; dp88_linkHealth::~dp88_linkHealth, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_linkHealth@@UAE@XZ ENDP				; dp88_linkHealth::~dp88_linkHealth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_linkHealth@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_linkHealth@@QAE@XZ PROC				; dp88_linkHealth::dp88_linkHealth, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_linkHealth@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_linkHealth@@QAE@XZ ENDP				; dp88_linkHealth::dp88_linkHealth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?equaliseHealth@dp88_linkHealth@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv232 = -116						; size = 4
tv323 = -112						; size = 4
tv224 = -108						; size = 4
tv148 = -108						; size = 4
_offense$1 = -40					; size = 28
_difference$ = -12					; size = 4
_parent$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?equaliseHealth@dp88_linkHealth@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_linkHealth::equaliseHealth, COMDAT
; _this$ = ecx

; 3543 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3544 :   GameObject* parent = Commands->Find_Object(parentObjID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _parent$[ebp], eax

; 3545 :   if (!parent)

	cmp	DWORD PTR _parent$[ebp], 0
	jne	SHORT $LN5@equaliseHe

; 3546 :   {
; 3547 :     Commands->Apply_Damage(obj, 5000.00, "Death", obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_05PGGAFPFO@Death?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+616]
	call	eax
	add	esp, 16					; 00000010H

; 3548 :     return;

	jmp	$LN6@equaliseHe
$LN5@equaliseHe:

; 3549 :   }
; 3550 : 
; 3551 :   /* Work out difference in our health and armour since last check */
; 3552 :   float difference = ((Commands->Get_Health(obj)-lastHealth)+(Commands->Get_Shield_Strength(obj)-lastArmour));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv224[ebp]
	movss	xmm0, DWORD PTR tv224[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+232]
	movss	DWORD PTR tv323[ebp], xmm0
	call	eax
	add	esp, 4
	fstp	DWORD PTR tv232[ebp]
	movss	xmm0, DWORD PTR tv232[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+36]
	movss	xmm1, DWORD PTR tv323[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _difference$[ebp], xmm1

; 3553 : 
; 3554 : 	/* Apply damage to parent using 'None' warhead (this should be 1-1 ratio against all skin and
; 3555 :   shield types. Special case scenario: if the target is a soldier in a vehicle we need to use a
; 3556 :   special function to override the check that prevents damage to soldiers in a vehicle */
; 3557 :   if (0.0f != difference)

	movss	xmm0, DWORD PTR __real@00000000
	ucomiss	xmm0, DWORD PTR _difference$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN2@equaliseHe

; 3558 :   {
; 3559 :     if ( parent->As_SoldierGameObj() && parent->As_SoldierGameObj()->Is_In_Vehicle() )

	mov	eax, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	$LN3@equaliseHe
	mov	eax, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	ecx, eax
	call	?Is_In_Vehicle@SoldierGameObj@@QAE_NXZ	; SoldierGameObj::Is_In_Vehicle
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@equaliseHe

; 3560 :     {
; 3561 :       OffenseObjectClass offense(difference*-1.0f, ArmorWarheadManager::Get_Warhead_Type("None"), NULL);

	push	0
	push	OFFSET ??_C@_04OHJIHAFH@None?$AA@
	call	?Get_Warhead_Type@ArmorWarheadManager@@SAIPBD@Z ; ArmorWarheadManager::Get_Warhead_Type
	add	esp, 4
	push	eax
	movss	xmm0, DWORD PTR _difference$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _offense$1[ebp]
	call	??0OffenseObjectClass@@QAE@MIPAVArmedGameObj@@@Z ; OffenseObjectClass::OffenseObjectClass

; 3562 :       parent->As_SoldierGameObj()->Apply_Damage_IgnoreVehicleCheck ( offense, 1, -1 );

	mov	eax, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR tv148[ebp], eax
	push	-1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _offense$1[ebp]
	push	ecx
	mov	edx, DWORD PTR tv148[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv148[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx

; 3563 :     }

	lea	ecx, DWORD PTR _offense$1[ebp]
	call	??1OffenseObjectClass@@QAE@XZ		; OffenseObjectClass::~OffenseObjectClass

; 3564 :     else

	jmp	SHORT $LN2@equaliseHe
$LN3@equaliseHe:

; 3565 :       Commands->Apply_Damage ( parent, difference*-1.0f, "None", NULL );

	push	0
	push	OFFSET ??_C@_04OHJIHAFH@None?$AA@
	movss	xmm0, DWORD PTR _difference$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+616]
	call	edx
	add	esp, 16					; 00000010H
$LN2@equaliseHe:

; 3566 :   }
; 3567 : 
; 3568 :   /* Update our health/armour from the parents new health/armour */
; 3569 :   Commands->Set_Health ( obj, Commands->Get_Health(parent) );

	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	add	esp, 8

; 3570 :   Commands->Set_Shield_Strength ( obj, Commands->Get_Shield_Strength(parent) );

	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	add	esp, 8

; 3571 : 
; 3572 :   /* Set lastHealth / lastArmour */
; 3573 :   lastHealth = Commands->Get_Health(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+32]

; 3574 :   lastArmour = Commands->Get_Shield_Strength(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	call	edx
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+36]

; 3575 : 
; 3576 :   /* Are we dead? */
; 3577 :   if ( lastHealth <= 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+32]
	jb	$LN1@equaliseHe

; 3578 :   {
; 3579 :     Commands->Set_Health ( obj, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	add	esp, 8

; 3580 :     Commands->Apply_Damage ( obj, 5000.00f, "Death", obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_05PGGAFPFO@Death?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+616]
	call	eax
	add	esp, 16					; 00000010H

; 3581 :     Commands->Set_Health ( parent, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	add	esp, 8

; 3582 :     Commands->Apply_Damage ( parent, 5000.00f, "Death", NULL );

	push	0
	push	OFFSET ??_C@_05PGGAFPFO@Death?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+616]
	call	edx
	add	esp, 16					; 00000010H
$LN1@equaliseHe:

; 3583 :   }
; 3584 : 
; 3585 :   /* Otherwise apply 0 damage to ourselves to trigger any on-damage events
; 3586 :   that need to run, such as dp88_damageAnimation() */
; 3587 :   Commands->Apply_Damage ( obj, 0.0, "None", obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_04OHJIHAFH@None?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+616]
	call	eax
	add	esp, 16					; 00000010H
$LN6@equaliseHe:

; 3588 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?equaliseHealth@dp88_linkHealth@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_linkHealth::equaliseHealth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_linkHealth@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_parent$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_linkHealth@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_linkHealth::Killed, COMDAT
; _this$ = ecx

; 3524 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3525 : 	// Destroy parent object if its still alive
; 3526 : 	GameObject* parent = Commands->Find_Object ( parentObjID );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _parent$[ebp], eax

; 3527 : 	if ( parent )

	cmp	DWORD PTR _parent$[ebp], 0
	je	$LN1@Killed

; 3528 : 	{
; 3529 :     // If the parent is a soldier in a vehicle we can't simply kill them because things go horribly wrong. Instead
; 3530 :     // eject them from a vehicle and attach JFW_Timer_Destroy_Object to kill them as soon as possible.
; 3531 :     if ( parent->As_SoldierGameObj() && parent->As_SoldierGameObj()->Is_In_Vehicle() )

	mov	eax, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	SHORT $LN2@Killed
	mov	eax, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	ecx, eax
	call	?Is_In_Vehicle@SoldierGameObj@@QAE_NXZ	; SoldierGameObj::Is_In_Vehicle
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Killed

; 3532 :     {
; 3533 :       Soldier_Transition_Vehicle ( parent );

	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	call	?Soldier_Transition_Vehicle@@YAXPAVScriptableGameObj@@@Z ; Soldier_Transition_Vehicle
	add	esp, 4

; 3534 :       Commands->Attach_Script ( parent, "JFW_Timer_Destroy_Object", "1.0,547859,5000.0,Death" );

	push	OFFSET ??_C@_0BI@JFPBEDHA@1?40?0547859?05000?40?0Death?$AA@
	push	OFFSET ??_C@_0BJ@IOLCGKKE@JFW_Timer_Destroy_Object?$AA@
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 12					; 0000000cH

; 3535 :       Destroy_Script();   // Prevent equaliseHealth() getting called and trying to kill the driver

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 3536 :     }
; 3537 : 		else

	jmp	SHORT $LN1@Killed
$LN2@Killed:

; 3538 : 		    Commands->Apply_Damage ( parent, 5000.00, "None", NULL );

	push	0
	push	OFFSET ??_C@_04OHJIHAFH@None?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+616]
	call	edx
	add	esp, 16					; 00000010H
$LN1@Killed:

; 3539 : 	}
; 3540 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_linkHealth@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_linkHealth::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_linkHealth@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_linkHealth@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_linkHealth::Timer_Expired, COMDAT
; _this$ = ecx

; 3515 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3516 : 	equaliseHealth( obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?equaliseHealth@dp88_linkHealth@@AAEXPAVScriptableGameObj@@@Z ; dp88_linkHealth::equaliseHealth

; 3517 : 
; 3518 : 	// Restart timer if still alive
; 3519 : 	if ( lastHealth + lastArmour > 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR [ecx+36]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@Timer_Expi

; 3520 : 		Commands->Start_Timer ( obj, this, 0.25, TIMER_LINKHEALTH );

	push	10055235				; 00996e43H
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN1@Timer_Expi:

; 3521 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_linkHealth@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_linkHealth::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_linkHealth@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_parent$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_linkHealth@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_linkHealth::Created, COMDAT
; _this$ = ecx

; 3491 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3492 : 	parentObjID = Get_Int_Parameter ( "parentObjectId" );

	push	OFFSET ??_C@_0P@IPEMGAI@parentObjectId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 3493 : 	GameObject* parent = Commands->Find_Object(parentObjID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _parent$[ebp], eax

; 3494 : 	if ( !parent )

	cmp	DWORD PTR _parent$[ebp], 0
	jne	SHORT $LN1@Created

; 3495 : 	{
; 3496 : 		Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 3497 : 		return;

	jmp	$LN2@Created
$LN1@Created:

; 3498 : 	}
; 3499 : 
; 3500 : 	// Set initial values for lastHealth / lastArmour
; 3501 : 	lastHealth = Commands->Get_Health ( parent );

	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+32]

; 3502 : 	lastArmour = Commands->Get_Shield_Strength ( parent );

	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	call	edx
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+36]

; 3503 : 
; 3504 : 	// Set our max / current health / armour to match our parent
; 3505 : 	Set_Max_Health ( obj, Commands->Get_Max_Health(parent) );

	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+224]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Set_Max_Health@@YAXPAVScriptableGameObj@@M@Z ; Set_Max_Health
	add	esp, 8

; 3506 : 	Commands->Set_Health ( obj, lastHealth );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+228]
	call	eax
	add	esp, 8

; 3507 : 	Set_Max_Shield_Strength ( obj, Commands->Get_Max_Shield_Strength(parent) );

	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+236]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Set_Max_Shield_Strength@@YAXPAVScriptableGameObj@@M@Z ; Set_Max_Shield_Strength
	add	esp, 8

; 3508 : 	Commands->Set_Shield_Strength ( obj, lastArmour );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+240]
	call	eax
	add	esp, 8

; 3509 : 
; 3510 : 	// Start timer
; 3511 : 	Commands->Start_Timer ( obj, this, 0.25, TIMER_LINKHEALTH );

	push	10055235				; 00996e43H
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@Created:

; 3512 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_linkHealth@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_linkHealth::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_Prism_Tower@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_Prism_Tower@@UAEPAXI@Z PROC			; dp88_AR_Prism_Tower::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_Prism_Tower@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_Prism_Tower@@UAEPAXI@Z ENDP			; dp88_AR_Prism_Tower::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_Prism_Tower@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_Prism_Tower@@UAE@XZ PROC			; dp88_AR_Prism_Tower::~dp88_AR_Prism_Tower, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_ChargedTurret@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_Prism_Tower@@UAE@XZ ENDP			; dp88_AR_Prism_Tower::~dp88_AR_Prism_Tower
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AR_Prism_Tower@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_Prism_Tower@@QAE@XZ PROC			; dp88_AR_Prism_Tower::dp88_AR_Prism_Tower, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_AI_ChargedTurret@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_Prism_Tower@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_Prism_Tower@@QAE@XZ ENDP			; dp88_AR_Prism_Tower::dp88_AR_Prism_Tower
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?SendEndAssistanceNotifications@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?SendEndAssistanceNotifications@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Prism_Tower::SendEndAssistanceNotifications, COMDAT
; _this$ = ecx

; 3467 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3468 :   // Send out end assistance notifications to all adjacent towers
; 3469 :   for ( int i = 0; i < adjacentTowerCount; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@SendEndAss
$LN3@SendEndAss:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@SendEndAss:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+172]
	jge	SHORT $LN2@SendEndAss

; 3470 :   {
; 3471 :     if (Commands->Find_Object(adjacentTowers[i]) != obj)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	eax, DWORD PTR _obj$[ebp]
	je	SHORT $LN1@SendEndAss

; 3472 :     {
; 3473 :       Commands->Send_Custom_Event(obj, Commands->Find_Object(adjacentTowers[i]), CUSTOM_PRISMTOWER_STOP_CHARGING, 0, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	1144060002				; 4430f862H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 20					; 00000014H
$LN1@SendEndAss:

; 3474 :     }
; 3475 :   }

	jmp	$LN3@SendEndAss
$LN2@SendEndAss:

; 3476 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SendEndAssistanceNotifications@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Prism_Tower::SendEndAssistanceNotifications
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?SendAssistanceRequests@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?SendAssistanceRequests@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Prism_Tower::SendAssistanceRequests, COMDAT
; _this$ = ecx

; 3455 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3456 :   // Send out assistance requests to all adjacent towers except the one we are charging, if any
; 3457 :   for ( int i = 0; i < adjacentTowerCount; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@SendAssist
$LN3@SendAssist:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@SendAssist:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+172]
	jge	$LN2@SendAssist

; 3458 :   {
; 3459 :     if ( adjacentTowers[i] != m_target->Get_ID() && Commands->Find_Object(adjacentTowers[i]) != obj)

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+176]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	ecx, eax
	call	?Get_ID@BaseGameObj@@QBEHXZ		; BaseGameObj::Get_ID
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [esi+ecx*4], eax
	je	SHORT $LN1@SendAssist
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	eax, DWORD PTR _obj$[ebp]
	je	SHORT $LN1@SendAssist

; 3460 :       Commands->Send_Custom_Event(obj, Commands->Find_Object(adjacentTowers[i]), CUSTOM_PRISMTOWER_REQUEST_CHARGING, (int)targetPriority, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvttss2si ecx, DWORD PTR [eax+120]
	push	ecx
	push	1144060001				; 4430f861H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 20					; 00000014H
$LN1@SendAssist:

; 3461 :   }

	jmp	$LN3@SendAssist
$LN2@SendAssist:

; 3462 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SendAssistanceRequests@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Prism_Tower::SendAssistanceRequests
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?GetAssistAimPoint@dp88_AR_Prism_Tower@@CA?AVVector3@@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -112						; size = 12
$T2 = -100						; size = 12
_height$ = -24						; size = 12
_target$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pTargetTower$ = 12					; size = 4
?GetAssistAimPoint@dp88_AR_Prism_Tower@@CA?AVVector3@@PAVScriptableGameObj@@@Z PROC ; dp88_AR_Prism_Tower::GetAssistAimPoint, COMDAT

; 3445 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi

; 3446 :   Vector3 target = Commands->Get_Position(pTargetTower);

	mov	eax, DWORD PTR _pTargetTower$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _target$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 3447 :   Vector3 height = Commands->Get_Bone_Position(pTargetTower,"muzzlea0");

	push	OFFSET ??_C@_08HEKCLJAN@muzzlea0?$AA@
	mov	eax, DWORD PTR _pTargetTower$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+68]
	call	eax
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _height$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 3448 :   target.Z = height.Z;

	movss	xmm0, DWORD PTR _height$[ebp+8]
	movss	DWORD PTR _target$[ebp+8], xmm0

; 3449 :   return target;

	lea	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3450 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAssistAimPoint@dp88_AR_Prism_Tower@@CA?AVVector3@@PAVScriptableGameObj@@@Z ENDP ; dp88_AR_Prism_Tower::GetAssistAimPoint
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?StopAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?StopAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Prism_Tower::StopAssisting, COMDAT
; _this$ = ecx

; 3429 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3430 :   if ( isAssistingTower )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+168]
	test	ecx, ecx
	je	SHORT $LN1@StopAssist

; 3431 :   {
; 3432 :     m_target = nullptr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 3433 :     targetPriority = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 3434 :     isAssistingTower = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+168], 0

; 3435 :     Commands->Action_Reset(obj, 101.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42ca0000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
$LN1@StopAssist:

; 3436 :   }
; 3437 : 
; 3438 :   // Send end assistance notifications
; 3439 :   SendEndAssistanceNotifications(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendEndAssistanceNotifications@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::SendEndAssistanceNotifications

; 3440 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?StopAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Prism_Tower::StopAssisting
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?StartAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_chargePos$ = -16					; size = 12
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_tower$ = 12						; size = 4
_priority$ = 16						; size = 4
?StartAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AR_Prism_Tower::StartAssisting, COMDAT
; _this$ = ecx

; 3411 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3412 :   // Set our new target ID and priority
; 3413 :   m_target = tower;

	mov	eax, DWORD PTR _tower$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 3414 :   targetPriority = priority;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _priority$[ebp]
	movss	DWORD PTR [eax+120], xmm0

; 3415 :   targetLastSeen = (int)time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 3416 :   isAssistingTower = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+168], 1

; 3417 : 
; 3418 :   // Work out attack position
; 3419 :   Vector3 chargePos = GetAssistAimPoint(tower);

	mov	eax, DWORD PTR _tower$[ebp]
	push	eax
	lea	ecx, DWORD PTR _chargePos$[ebp]
	push	ecx
	call	?GetAssistAimPoint@dp88_AR_Prism_Tower@@CA?AVVector3@@PAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::GetAssistAimPoint
	add	esp, 8

; 3420 : 
; 3421 :   // Start charging the tower - this will also trigger assistance notifications to be sent out
; 3422 :   attackLocation ( obj, chargePos, true );

	push	1
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	eax, DWORD PTR _chargePos$[ebp]
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+156]
	call	edx

; 3423 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StartAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AR_Prism_Tower::StartAssisting
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?stopAttacking@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?stopAttacking@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Prism_Tower::stopAttacking, COMDAT
; _this$ = ecx

; 3392 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3393 :   // Was the target a tower we were charging? If so this means they must have timed out on the last
; 3394 :   // seen and are therefore probably dead...
; 3395 :   if ( isAssistingTower )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+168]
	test	ecx, ecx
	je	SHORT $LN2@stopAttack

; 3396 :     StopAssisting(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StopAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::StopAssisting

; 3397 : 
; 3398 :   // Otherwise we were attacking a normal target, send out end assistance notifications to all
; 3399 :   // adjacent towers and call base class
; 3400 :   else

	jmp	SHORT $LN3@stopAttack
$LN2@stopAttack:

; 3401 :   {
; 3402 :     SendEndAssistanceNotifications(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendEndAssistanceNotifications@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::SendEndAssistanceNotifications

; 3403 :     dp88_AI_ChargedTurret::stopAttacking(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_Turret::stopAttacking
$LN3@stopAttack:

; 3404 :   }
; 3405 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?stopAttacking@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Prism_Tower::stopAttacking
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?attackLocation@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@VVector3@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_location$ = 12						; size = 12
_primary$ = 24						; size = 1
?attackLocation@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@VVector3@@_N@Z PROC ; dp88_AR_Prism_Tower::attackLocation, COMDAT
; _this$ = ecx

; 3380 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3381 :   // Call base classes attack routine
; 3382 :   dp88_AI_ChargedTurret::attackLocation(obj, location, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR _location$[ebp]
	push	edx
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?attackLocation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ; dp88_AI_ChargedTurret::attackLocation

; 3383 : 
; 3384 :   // Send notifications for assistance
; 3385 :   SendAssistanceRequests(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAssistanceRequests@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::SendAssistanceRequests

; 3386 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?attackLocation@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@VVector3@@_N@Z ENDP ; dp88_AR_Prism_Tower::attackLocation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?attackTarget@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
_primary$ = 16						; size = 1
?attackTarget@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0_N@Z PROC ; dp88_AR_Prism_Tower::attackTarget, COMDAT
; _this$ = ecx

; 3369 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3370 :   // Call base classes attack routine
; 3371 :   dp88_AI_ChargedTurret::attackTarget(obj, target, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?attackTarget@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@0_N@Z ; dp88_AI_ChargedTurret::attackTarget

; 3372 : 
; 3373 :   // Send notifications for assistance
; 3374 :   SendAssistanceRequests(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAssistanceRequests@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::SendAssistanceRequests

; 3375 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?attackTarget@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0_N@Z ENDP ; dp88_AR_Prism_Tower::attackTarget
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?checkTeam@dp88_AR_Prism_Tower@@EAE_NPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?checkTeam@dp88_AR_Prism_Tower@@EAE_NPAVScriptableGameObj@@0@Z PROC ; dp88_AR_Prism_Tower::checkTeam, COMDAT
; _this$ = ecx

; 3357 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3358 :   // Return true for the tower we are charging, even though it is on the same team as us
; 3359 :   if ( m_target == target && isAssistingTower )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	cmp	eax, DWORD PTR _target$[ebp]
	jne	SHORT $LN1@checkTeam
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+168]
	test	ecx, ecx
	je	SHORT $LN1@checkTeam

; 3360 :     return true;

	mov	al, 1
	jmp	SHORT $LN2@checkTeam
$LN1@checkTeam:

; 3361 : 
; 3362 :   // Otherwise run the normal check team function
; 3363 :   return dp88_AI_ChargedTurret::checkTeam(obj, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z ; dp88_AI_Turret::checkTeam
$LN2@checkTeam:

; 3364 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?checkTeam@dp88_AR_Prism_Tower@@EAE_NPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_Prism_Tower::checkTeam
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?getPriority@dp88_AR_Prism_Tower@@EAEMPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?getPriority@dp88_AR_Prism_Tower@@EAEMPAVScriptableGameObj@@0@Z PROC ; dp88_AR_Prism_Tower::getPriority, COMDAT
; _this$ = ecx

; 3344 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3345 :   // If the target is the tower we are currently charging then return
; 3346 :   // the priority of that charging sequence
; 3347 :   if ( m_target == target && isAssistingTower )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	cmp	eax, DWORD PTR _target$[ebp]
	jne	SHORT $LN1@getPriorit
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+168]
	test	ecx, ecx
	je	SHORT $LN1@getPriorit

; 3348 :     return targetPriority;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+120]
	jmp	SHORT $LN2@getPriorit
$LN1@getPriorit:

; 3349 : 
; 3350 :   // Otherwise run the normal priority calculation
; 3351 :   return dp88_AI_ChargedTurret::getPriority(obj, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z ; dp88_customAI::getPriority
$LN2@getPriorit:

; 3352 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?getPriority@dp88_AR_Prism_Tower@@EAEMPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_Prism_Tower::getPriority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AR_Prism_Tower::Timer_Expired, COMDAT
; _this$ = ecx

; 3314 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3315 :   // Piggy back our assistance polling and charge refilling on the existing think timer
; 3316 :   if ( number == TIMER_AI_THINK )

	cmp	DWORD PTR _number$[ebp], -620363775	; db060001H
	jne	SHORT $LN4@Timer_Expi

; 3317 :   {
; 3318 :     /* Send out assistance requests to ensure other towers don't time out on the 'last seen' check
; 3319 :     *
; 3320 :     * \todo
; 3321 :     *   Can this screw up the timings between charging towers and the attacking tower? Need to think
; 3322 :     *   this through sometime and possibly do some experimentation...
; 3323 :     */
; 3324 :     if ( m_target )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN3@Timer_Expi

; 3325 :       SendAssistanceRequests(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAssistanceRequests@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::SendAssistanceRequests
$LN3@Timer_Expi:

; 3326 : 
; 3327 :     /* Refill a single unit of charge if depleted */
; 3328 :     if ( Get_Current_Clip_Bullets(obj) == 0 )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Current_Clip_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Clip_Bullets
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@Timer_Expi

; 3329 :       Set_Current_Clip_Bullets(obj,1);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR ?Set_Current_Clip_Bullets@@3P6AXPAVScriptableGameObj@@H@ZA ; Set_Current_Clip_Bullets
	add	esp, 8
$LN2@Timer_Expi:

; 3330 : 
; 3331 :     /* If current bullets > 1 and no enemy seen recently then additional charge is lost */
; 3332 :     if ( Get_Current_Bullets(obj) > 1 && !m_target )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Current_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Bullets
	add	esp, 4
	cmp	eax, 1
	jle	SHORT $LN4@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	jne	SHORT $LN4@Timer_Expi

; 3333 :       Set_Current_Bullets(obj,1);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR ?Set_Current_Bullets@@3P6AXPAVScriptableGameObj@@H@ZA ; Set_Current_Bullets
	add	esp, 8
$LN4@Timer_Expi:

; 3334 :   }
; 3335 : 
; 3336 : 
; 3337 :   // Pass the timer onto the base class to be handled
; 3338 :   dp88_AI_ChargedTurret::Timer_Expired(obj, number);

	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Timer_Expired@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AI_ChargedTurret::Timer_Expired

; 3339 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AR_Prism_Tower::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_AR_Prism_Tower::Custom, COMDAT
; _this$ = ecx

; 3278 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3279 :   // If we recieve a stop charging message from the tower we are currently
; 3280 :   // charging then we should stop all actions
; 3281 :   if ( type == CUSTOM_PRISMTOWER_STOP_CHARGING && isAssistingTower && sender == m_target )

	cmp	DWORD PTR _type$[ebp], 1144060002	; 4430f862H
	jne	SHORT $LN8@Custom
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+168]
	test	ecx, ecx
	je	SHORT $LN8@Custom
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	cmp	DWORD PTR _sender$[ebp], eax
	jne	SHORT $LN8@Custom

; 3282 :     StopAssisting(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StopAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::StopAssisting
	jmp	$LN1@Custom
$LN8@Custom:

; 3283 : 
; 3284 : 
; 3285 :   // If we recieve a request charging message from another tower then we
; 3286 :   // should check to see if their target has higher priority than our
; 3287 :   // current target (if any) and, if so, start charging them
; 3288 :   else if ( type == CUSTOM_PRISMTOWER_REQUEST_CHARGING )

	cmp	DWORD PTR _type$[ebp], 1144060001	; 4430f861H
	jne	$LN1@Custom

; 3289 :   {
; 3290 :     // Are we idle? If so then there's no reason not to simply start charging immediatly
; 3291 :     if ( !m_target )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	jne	SHORT $LN5@Custom

; 3292 :       StartAssisting(obj, sender, (float)param);

	cvtsi2ss xmm0, DWORD PTR _param$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StartAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_Prism_Tower::StartAssisting
	jmp	SHORT $LN1@Custom
$LN5@Custom:

; 3293 : 
; 3294 :     // Is this request from the tower we are currently charging? If so then update the last seen
; 3295 :     // time and priority and forward the assistance request to any other adjacent towers
; 3296 :     else if ( isAssistingTower && m_target == sender )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+168]
	test	ecx, ecx
	je	SHORT $LN3@Custom
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	cmp	eax, DWORD PTR _sender$[ebp]
	jne	SHORT $LN3@Custom

; 3297 :     {
; 3298 :       targetLastSeen = (int)time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 3299 :       targetPriority = (float)param;

	cvtsi2ss xmm0, DWORD PTR _param$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+120], xmm0

; 3300 :       SendAssistanceRequests(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAssistanceRequests@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_Prism_Tower::SendAssistanceRequests

; 3301 :       return;

	jmp	SHORT $LN9@Custom
	jmp	SHORT $LN1@Custom
$LN3@Custom:

; 3302 :     }
; 3303 : 
; 3304 :     // Is the priority of the request greater than the priority of our current target (either
; 3305 :     // another tower or an enemy)? If so then stop what we are doing and charge the requester
; 3306 :     else if ( param > targetPriority )

	cvtsi2ss xmm0, DWORD PTR _param$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+120]
	jbe	SHORT $LN1@Custom

; 3307 :       StartAssisting(obj, sender, (float)param );

	cvtsi2ss xmm0, DWORD PTR _param$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StartAssisting@dp88_AR_Prism_Tower@@AAEXPAVScriptableGameObj@@0M@Z ; dp88_AR_Prism_Tower::StartAssisting
$LN1@Custom:
$LN9@Custom:

; 3308 :   }
; 3309 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_AR_Prism_Tower::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Destroyed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Prism_Tower::Destroyed, COMDAT
; _this$ = ecx

; 3270 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3271 :   // Deregister this tower
; 3272 :   deregisterTower(Commands->Get_ID(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	call	?deregisterTower@dp88_AR_Prism_Tower@@CAXH@Z ; dp88_AR_Prism_Tower::deregisterTower
	add	esp, 4

; 3273 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Prism_Tower::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AR_Prism_Tower::Killed, COMDAT
; _this$ = ecx

; 3253 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3254 :   // Notify adjacent towers to stop assisting us if they were
; 3255 :   for ( int i = 0; i < adjacentTowerCount; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Killed
$LN3@Killed:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Killed:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+172]
	jge	SHORT $LN2@Killed

; 3256 :   {
; 3257 :     if (Commands->Find_Object(adjacentTowers[i]) != obj)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	eax, DWORD PTR _obj$[ebp]
	je	SHORT $LN1@Killed

; 3258 :     {
; 3259 :       Commands->Send_Custom_Event(obj,Commands->Find_Object(adjacentTowers[i]), CUSTOM_PRISMTOWER_STOP_CHARGING,0,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	1144060002				; 4430f862H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 20					; 00000014H
$LN1@Killed:

; 3260 :     }
; 3261 :   }

	jmp	$LN3@Killed
$LN2@Killed:

; 3262 : 
; 3263 :   // Deregister this tower
; 3264 :   deregisterTower(Commands->Get_ID(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	call	?deregisterTower@dp88_AR_Prism_Tower@@CAXH@Z ; dp88_AR_Prism_Tower::deregisterTower
	add	esp, 4

; 3265 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_Prism_Tower::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Damaged@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AR_Prism_Tower::Damaged, COMDAT
; _this$ = ecx

; 3240 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3241 :   // If the damager is a prism tower then we have been charged, add 1 to ammo count
; 3242 :   if ( Is_Script_Attached ( damager, "dp88_AR_Prism_Tower" ) )

	push	OFFSET ??_C@_0BE@EGGNPPMF@dp88_AR_Prism_Tower?$AA@
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	call	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z ; Is_Script_Attached
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Damaged

; 3243 :   {
; 3244 :     /* Increase ammo count by 1 */
; 3245 :     if ( Get_Current_Weapon(obj) != NULL )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Current_Weapon@@YAPBDPAVScriptableGameObj@@@Z ; Get_Current_Weapon
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@Damaged

; 3246 :       Set_Current_Bullets(obj,Get_Current_Bullets(obj)+1);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Current_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Bullets
	add	esp, 4
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	DWORD PTR ?Set_Current_Bullets@@3P6AXPAVScriptableGameObj@@H@ZA ; Set_Current_Bullets
	add	esp, 8
$LN3@Damaged:

; 3247 :   }
; 3248 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AR_Prism_Tower::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Prism_Tower::Created, COMDAT
; _this$ = ecx

; 3224 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3225 :   loadSettings(obj, false, false);

	push	0
	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax

; 3226 :   Init(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax

; 3227 : 
; 3228 :   // Initialise member variables
; 3229 :   isAssistingTower = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+168], 0

; 3230 :   adjacentTowerCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 0

; 3231 :   adjacentTowers = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+176], 0

; 3232 : 
; 3233 :   // Register the tower
; 3234 :   registerTower(Commands->Get_ID(obj),this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	call	?registerTower@dp88_AR_Prism_Tower@@CAXHPAV1@@Z ; dp88_AR_Prism_Tower::registerTower
	add	esp, 8

; 3235 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_Prism_Tower@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Prism_Tower::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?CanAssistTower@dp88_AR_Prism_Tower@@CA_NPAVScriptableGameObj@@0H@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_distance$ = -4						; size = 4
_tower1$ = 8						; size = 4
_tower2$ = 12						; size = 4
_maxRange$ = 16						; size = 4
?CanAssistTower@dp88_AR_Prism_Tower@@CA_NPAVScriptableGameObj@@0H@Z PROC ; dp88_AR_Prism_Tower::CanAssistTower, COMDAT

; 3193 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 3194 :   int distance = (int)Commands->Get_Distance(Commands->Get_Position(tower1),Commands->Get_Position(tower2));

	mov	eax, DWORD PTR _tower2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _tower1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 8
	call	__ftol2_sse
	mov	DWORD PTR _distance$[ebp], eax

; 3195 :   if (distance > maxRange)

	mov	eax, DWORD PTR _distance$[ebp]
	cmp	eax, DWORD PTR _maxRange$[ebp]
	jle	SHORT $LN1@CanAssistT

; 3196 :     return false;

	xor	al, al
	jmp	SHORT $LN2@CanAssistT
$LN1@CanAssistT:

; 3197 :     
; 3198 :   // In weapons range so lets do a collision test to check for obstructions
; 3199 : /*  CastResultStruct res;
; 3200 :   LineSegClass ray(Commands->Get_Bone_Position(tower1,"muzzlea0"),GetAssistAimPoint(tower2));
; 3201 :   PhysRayCollisionTestClass coltest(ray, &res, BULLET_COLLISION_GROUP);
; 3202 :   PhysicsSceneClass::Get_Instance()->Cast_Ray(coltest,false);
; 3203 :   
; 3204 :   if (NULL != coltest.CollidedPhysObj)
; 3205 :   {
; 3206 :     // todo: verify the collided object == tower2
; 3207 :     // todo: what if we hit the source tower on the way out? Do we need to figure out some math
; 3208 :     //       to offset the beam origin to slightly beyond the bounds of the origin? Or maybe
; 3209 :     //       set the turret rotation to aim at the tower2?
; 3210 : 	// use PhysClass::Inc_Ignore_Counter and PhysClass::Dec_Ignore_Counter here to make the ray casting code ignore the object you want it to ignore
; 3211 :   }*/
; 3212 :   
; 3213 :   return true;

	mov	al, 1
$LN2@CanAssistT:

; 3214 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CanAssistTower@dp88_AR_Prism_Tower@@CA_NPAVScriptableGameObj@@0H@Z ENDP ; dp88_AR_Prism_Tower::CanAssistTower
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z
_TEXT	SEGMENT
_bFound$1 = -5						; size = 1
_i$2 = -4						; size = 4
_sortedConnections$ = 8					; size = 4
_numConnections$ = 12					; size = 4
_tower1$ = 16						; size = 4
_tower2$ = 20						; size = 4
?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z PROC ; dp88_AR_Prism_Tower::calculateTowerMapPathSearch, COMDAT

; 3150 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 3151 : 	// Try to find a path between these towers
; 3152 : 	for ( int i = 0; i < numConnections; ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN15@calculateT
$LN14@calculateT:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN15@calculateT:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _numConnections$[ebp]
	jge	$LN13@calculateT

; 3153 : 	{
; 3154 : 		// Ignore 'bad' connections
; 3155 : 		if ( sortedConnections[(i*4)+3] != 1 )

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	cmp	DWORD PTR [ecx+eax*4+12], 1
	je	$LN12@calculateT

; 3156 : 		{
; 3157 : 			// If this is a connection between the towers we are searching for then
; 3158 : 			// return success
; 3159 : 			if ( (sortedConnections[i*4] == tower1 && sortedConnections[(i*4)+1] == tower2)
; 3160 : 				|| (sortedConnections[i*4] == tower2 && sortedConnections[(i*4)+1] == tower1) )

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _tower1$[ebp]
	jne	SHORT $LN9@calculateT
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	cmp	edx, DWORD PTR _tower2$[ebp]
	je	SHORT $LN10@calculateT
$LN9@calculateT:
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _tower2$[ebp]
	jne	SHORT $LN11@calculateT
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	cmp	edx, DWORD PTR _tower1$[ebp]
	jne	SHORT $LN11@calculateT
$LN10@calculateT:

; 3161 : 				return true;

	mov	al, 1
	jmp	$LN16@calculateT
$LN11@calculateT:

; 3162 : 
; 3163 :       bool bFound = false;

	mov	BYTE PTR _bFound$1[ebp], 0

; 3164 : 
; 3165 :       // Temporarily mark this connection as "bad" to prevent infinite recursion
; 3166 :       sortedConnections[(i*4)+3] = 1;

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	DWORD PTR [ecx+eax*4+12], 1

; 3167 : 
; 3168 :       // If either of the two towers in this connection matches the desired tower then check for a
; 3169 :       // path between the other desired tower and the third party tower it is connected to...
; 3170 :       if ( sortedConnections[i*4] == tower1 )

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _tower1$[ebp]
	jne	SHORT $LN8@calculateT

; 3171 :         bFound = calculateTowerMapPathSearch(sortedConnections,numConnections,tower2,sortedConnections[(i*4)+1]);

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _tower2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numConnections$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sortedConnections$[ebp]
	push	edx
	call	?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z ; dp88_AR_Prism_Tower::calculateTowerMapPathSearch
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$1[ebp], al
	jmp	$LN7@calculateT
$LN8@calculateT:

; 3172 :       else if ( sortedConnections[(i*4)+1] == tower1 )

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	cmp	edx, DWORD PTR _tower1$[ebp]
	jne	SHORT $LN6@calculateT

; 3173 :         bFound = calculateTowerMapPathSearch(sortedConnections,numConnections,tower2,sortedConnections[i*4]);

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _tower2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numConnections$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sortedConnections$[ebp]
	push	edx
	call	?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z ; dp88_AR_Prism_Tower::calculateTowerMapPathSearch
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$1[ebp], al
	jmp	SHORT $LN7@calculateT
$LN6@calculateT:

; 3174 :       else if ( sortedConnections[i*4] == tower2 )

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _tower2$[ebp]
	jne	SHORT $LN4@calculateT

; 3175 :         bFound = calculateTowerMapPathSearch(sortedConnections,numConnections,tower1,sortedConnections[(i*4)+1]);

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _tower1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numConnections$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sortedConnections$[ebp]
	push	edx
	call	?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z ; dp88_AR_Prism_Tower::calculateTowerMapPathSearch
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$1[ebp], al
	jmp	SHORT $LN7@calculateT
$LN4@calculateT:

; 3176 :       else if ( sortedConnections[(i*4)+1] == tower2 )

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	cmp	edx, DWORD PTR _tower2$[ebp]
	jne	SHORT $LN7@calculateT

; 3177 :         bFound = calculateTowerMapPathSearch(sortedConnections,numConnections,tower1,sortedConnections[i*4]);

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _tower1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numConnections$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sortedConnections$[ebp]
	push	edx
	call	?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z ; dp88_AR_Prism_Tower::calculateTowerMapPathSearch
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$1[ebp], al
$LN7@calculateT:

; 3178 : 
; 3179 :       // Restore this connection as "good"
; 3180 :       sortedConnections[(i*4)+3] = 0;

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedConnections$[ebp]
	mov	DWORD PTR [ecx+eax*4+12], 0

; 3181 : 
; 3182 :       if ( bFound )

	movzx	eax, BYTE PTR _bFound$1[ebp]
	test	eax, eax
	je	SHORT $LN12@calculateT

; 3183 :         return true;

	mov	al, 1
	jmp	SHORT $LN16@calculateT
$LN12@calculateT:

; 3184 : 		}
; 3185 : 	}

	jmp	$LN14@calculateT
$LN13@calculateT:

; 3186 : 
; 3187 : 	// Nothing found...
; 3188 : 	return false;

	xor	al, al
$LN16@calculateT:

; 3189 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z ENDP ; dp88_AR_Prism_Tower::calculateTowerMapPathSearch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ
_TEXT	SEGMENT
tv392 = -228						; size = 4
tv341 = -228						; size = 4
tv400 = -224						; size = 4
tv349 = -224						; size = 4
tv215 = -224						; size = 4
tv131 = -224						; size = 4
$T1 = -220						; size = 4
$T2 = -216						; size = 12
$T3 = -204						; size = 12
$T4 = -192						; size = 4
$T5 = -188						; size = 4
$T6 = -184						; size = 4
$T7 = -180						; size = 4
$T8 = -176						; size = 4
$T9 = -172						; size = 4
$T10 = -168						; size = 4
_j$11 = -100						; size = 4
_j$12 = -96						; size = 4
_oldAdjacentTowers$13 = -92				; size = 4
_tower2script$14 = -88					; size = 4
_tower2id$15 = -84					; size = 4
_tower2idx$16 = -80					; size = 4
_tower1script$17 = -76					; size = 4
_tower1id$18 = -72					; size = 4
_tower1idx$19 = -68					; size = 4
_i$20 = -64						; size = 4
_i$21 = -60						; size = 4
_j$22 = -56						; size = 4
_maxDistIndex$23 = -52					; size = 4
_maxDist$24 = -48					; size = 4
_i$25 = -44						; size = 4
_sortedTowerConnections$ = -40				; size = 4
_t2$26 = -36						; size = 4
_j$27 = -32						; size = 4
_t1$28 = -28						; size = 4
_i$29 = -24						; size = 4
_connectionCount$ = -20					; size = 4
_towerConnections$ = -16				; size = 4
_maxConnections$ = -12					; size = 4
_i$30 = -8						; size = 4
_numTowers$ = -4					; size = 4
?calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ PROC	; dp88_AR_Prism_Tower::calculateTowerMap, COMDAT

; 2989 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi

; 2990 : 	// Count number of registered towers and reset their adjacent tower indexes
; 2991 : 	int numTowers = 0;

	mov	DWORD PTR _numTowers$[ebp], 0

; 2992 : 	for ( int i = 0; i < MAX_TOWERS; ++i )

	mov	DWORD PTR _i$30[ebp], 0
	jmp	SHORT $LN37@calculateT
$LN36@calculateT:
	mov	eax, DWORD PTR _i$30[ebp]
	add	eax, 1
	mov	DWORD PTR _i$30[ebp], eax
$LN37@calculateT:
	cmp	DWORD PTR _i$30[ebp], 20		; 00000014H
	jge	SHORT $LN35@calculateT

; 2993 : 	{
; 2994 : 		if ( prismTowerIds[i] > 0 )

	mov	eax, DWORD PTR _i$30[ebp]
	cmp	DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4], 0
	jle	SHORT $LN34@calculateT

; 2995 : 		{
; 2996 : 			numTowers++;

	mov	eax, DWORD PTR _numTowers$[ebp]
	add	eax, 1
	mov	DWORD PTR _numTowers$[ebp], eax

; 2997 : 			clearTowerMap(i);

	mov	eax, DWORD PTR _i$30[ebp]
	push	eax
	call	?clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z ; dp88_AR_Prism_Tower::clearTowerMap
	add	esp, 4
$LN34@calculateT:

; 2998 : 		}
; 2999 : 	}

	jmp	SHORT $LN36@calculateT
$LN35@calculateT:

; 3000 : 
; 3001 : 
; 3002 : 	// Build array of all possible connections between registered towers - maximum
; 3003 : 	// number of nodes is n(n-1)/2 (IE: Complete graph), but unless the towers are
; 3004 : 	// very close together we will probably use less than this
; 3005 : 	int maxConnections = (int)(numTowers*((numTowers-1.0f)/2.0f));

	cvtsi2ss xmm0, DWORD PTR _numTowers$[ebp]
	cvtsi2ss xmm1, DWORD PTR _numTowers$[ebp]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR __real@40000000
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR _maxConnections$[ebp], eax

; 3006 : 	int* towerConnections = new int[maxConnections*3];

	push	OFFSET ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN41@calculateT
	xor	edx, edx
	jne	SHORT $LN40@calculateT
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN40@calculateT:
	mov	DWORD PTR tv131[ebp], 0
	jmp	SHORT $LN42@calculateT
$LN41@calculateT:
	mov	eax, DWORD PTR _maxConnections$[ebp]
	imul	eax, 3
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv131[ebp], eax
$LN42@calculateT:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _towerConnections$[ebp], ecx

; 3007 : 	memset(towerConnections,0,sizeof(int)*maxConnections*3);

	mov	eax, DWORD PTR _maxConnections$[ebp]
	shl	eax, 2
	imul	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _towerConnections$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 3008 : 
; 3009 : 
; 3010 : 	// Populate array
; 3011 : 	int connectionCount = 0;

	mov	DWORD PTR _connectionCount$[ebp], 0

; 3012 : 	for ( int i = 0; i < MAX_TOWERS; ++i )

	mov	DWORD PTR _i$29[ebp], 0
	jmp	SHORT $LN33@calculateT
$LN32@calculateT:
	mov	eax, DWORD PTR _i$29[ebp]
	add	eax, 1
	mov	DWORD PTR _i$29[ebp], eax
$LN33@calculateT:
	cmp	DWORD PTR _i$29[ebp], 20		; 00000014H
	jge	$LN31@calculateT

; 3013 : 	{
; 3014 : 		if ( prismTowerIds[i] > 0 )

	mov	eax, DWORD PTR _i$29[ebp]
	cmp	DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4], 0
	jle	$LN27@calculateT

; 3015 : 		{
; 3016 : 			GameObject* t1 = Commands->Find_Object(prismTowerIds[i]);

	mov	eax, DWORD PTR _i$29[ebp]
	mov	ecx, DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _t1$28[ebp], eax

; 3017 : 			for ( int j = i+1; j < MAX_TOWERS; ++j )

	mov	eax, DWORD PTR _i$29[ebp]
	add	eax, 1
	mov	DWORD PTR _j$27[ebp], eax
	jmp	SHORT $LN29@calculateT
$LN28@calculateT:
	mov	eax, DWORD PTR _j$27[ebp]
	add	eax, 1
	mov	DWORD PTR _j$27[ebp], eax
$LN29@calculateT:
	cmp	DWORD PTR _j$27[ebp], 20		; 00000014H
	jge	$LN27@calculateT

; 3018 : 			{
; 3019 : 				if ( prismTowerIds[j] > 0 )

	mov	eax, DWORD PTR _j$27[ebp]
	cmp	DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4], 0
	jle	$LN25@calculateT

; 3020 : 				{
; 3021 : 					GameObject* t2 = Commands->Find_Object(prismTowerIds[j]);

	mov	eax, DWORD PTR _j$27[ebp]
	mov	ecx, DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _t2$26[ebp], eax

; 3022 : 					
; 3023 : 					// If these towers can assist each other then add them to the connections list
; 3024 : 					if (CanAssistTower(t1,t2, ((dp88_AR_Prism_Tower*)prismTowerScripts[i])->primary_maxRange))

	mov	eax, DWORD PTR _i$29[ebp]
	mov	ecx, DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[eax*4]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _t2$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1$28[ebp]
	push	ecx
	call	?CanAssistTower@dp88_AR_Prism_Tower@@CA_NPAVScriptableGameObj@@0H@Z ; dp88_AR_Prism_Tower::CanAssistTower
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN25@calculateT

; 3025 : 					{
; 3026 : 					  towerConnections[connectionCount*3] = i;

	mov	eax, DWORD PTR _connectionCount$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _towerConnections$[ebp]
	mov	edx, DWORD PTR _i$29[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 3027 : 						towerConnections[(connectionCount*3)+1] = j;

	mov	eax, DWORD PTR _connectionCount$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _towerConnections$[ebp]
	mov	edx, DWORD PTR _j$27[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx

; 3028 : 						towerConnections[(connectionCount*3)+2] = (int)Commands->Get_Distance(Commands->Get_Position(t1),Commands->Get_Position(t2));

	mov	eax, DWORD PTR _t2$26[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _t1$28[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 8
	call	__ftol2_sse
	mov	ecx, DWORD PTR _connectionCount$[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR _towerConnections$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax

; 3029 : 						connectionCount++;

	mov	eax, DWORD PTR _connectionCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _connectionCount$[ebp], eax
$LN25@calculateT:

; 3030 : 					}
; 3031 : 				}
; 3032 : 			}

	jmp	$LN28@calculateT
$LN27@calculateT:

; 3033 : 		}
; 3034 : 	}

	jmp	$LN32@calculateT
$LN31@calculateT:

; 3035 : 
; 3036 : 
; 3037 : 	// Now sort the entries in descending order and add a fourth field to
; 3038 : 	// allow the connections to be marked as 'bad' during the reverse
; 3039 : 	// delete algorithm
; 3040 : 	int* sortedTowerConnections = new int[connectionCount*4];

	push	OFFSET ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 51					; 00000033H
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN44@calculateT
	xor	edx, edx
	jne	SHORT $LN43@calculateT
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 51					; 00000033H
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN43@calculateT:
	mov	DWORD PTR tv215[ebp], 0
	jmp	SHORT $LN45@calculateT
$LN44@calculateT:
	mov	eax, DWORD PTR _connectionCount$[ebp]
	shl	eax, 2
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv215[ebp], eax
$LN45@calculateT:
	mov	ecx, DWORD PTR tv215[ebp]
	mov	DWORD PTR _sortedTowerConnections$[ebp], ecx

; 3041 : 	memset(sortedTowerConnections,0,sizeof(int)*connectionCount*4);

	mov	eax, DWORD PTR _connectionCount$[ebp]
	shl	eax, 2
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 3042 : 
; 3043 : 
; 3044 : 	// Copy connections to the new array one by one, starting with the largest
; 3045 : 	// value and ending with the smallest... yes, this is probably a horribly
; 3046 : 	// inefficient way of doing this but it only occasionally and it works...
; 3047 : 	for ( int i = 0; i < connectionCount; ++i )

	mov	DWORD PTR _i$25[ebp], 0
	jmp	SHORT $LN24@calculateT
$LN23@calculateT:
	mov	eax, DWORD PTR _i$25[ebp]
	add	eax, 1
	mov	DWORD PTR _i$25[ebp], eax
$LN24@calculateT:
	mov	eax, DWORD PTR _i$25[ebp]
	cmp	eax, DWORD PTR _connectionCount$[ebp]
	jge	$LN22@calculateT

; 3048 : 	{
; 3049 : 		int maxDist = 0;

	mov	DWORD PTR _maxDist$24[ebp], 0

; 3050 : 		int maxDistIndex = -1;

	mov	DWORD PTR _maxDistIndex$23[ebp], -1

; 3051 : 		for ( int j = 0; j < connectionCount; ++j )

	mov	DWORD PTR _j$22[ebp], 0
	jmp	SHORT $LN21@calculateT
$LN20@calculateT:
	mov	eax, DWORD PTR _j$22[ebp]
	add	eax, 1
	mov	DWORD PTR _j$22[ebp], eax
$LN21@calculateT:
	mov	eax, DWORD PTR _j$22[ebp]
	cmp	eax, DWORD PTR _connectionCount$[ebp]
	jge	SHORT $LN19@calculateT

; 3052 : 		{
; 3053 : 			if ( towerConnections[j*3] != -1 && towerConnections[(j*3)+2] > maxDist )

	mov	eax, DWORD PTR _j$22[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _towerConnections$[ebp]
	cmp	DWORD PTR [ecx+eax*4], -1
	je	SHORT $LN18@calculateT
	mov	eax, DWORD PTR _j$22[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _towerConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	cmp	edx, DWORD PTR _maxDist$24[ebp]
	jle	SHORT $LN18@calculateT

; 3054 : 			{
; 3055 : 				maxDist = towerConnections[(j*3)+2];

	mov	eax, DWORD PTR _j$22[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _towerConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR _maxDist$24[ebp], edx

; 3056 : 				maxDistIndex = j;

	mov	eax, DWORD PTR _j$22[ebp]
	mov	DWORD PTR _maxDistIndex$23[ebp], eax
$LN18@calculateT:

; 3057 : 			}
; 3058 : 		}

	jmp	SHORT $LN20@calculateT
$LN19@calculateT:

; 3059 : 
; 3060 : 		// Copy highest index and set it's first tower ID to 0 so we skip past
; 3061 : 		// it in subsequent iterations
; 3062 : 		if ( maxDistIndex != -1 )

	cmp	DWORD PTR _maxDistIndex$23[ebp], -1
	je	SHORT $LN17@calculateT

; 3063 : 		{
; 3064 : 			sortedTowerConnections[i*4] = towerConnections[maxDistIndex*3];

	mov	eax, DWORD PTR _maxDistIndex$23[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _i$25[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	esi, DWORD PTR _towerConnections$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax

; 3065 : 			sortedTowerConnections[(i*4)+1] = towerConnections[(maxDistIndex*3)+1];

	mov	eax, DWORD PTR _maxDistIndex$23[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _i$25[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	esi, DWORD PTR _towerConnections$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+4]
	mov	DWORD PTR [edx+ecx*4+4], eax

; 3066 : 			sortedTowerConnections[(i*4)+2] = towerConnections[(maxDistIndex*3)+2];

	mov	eax, DWORD PTR _maxDistIndex$23[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _i$25[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	esi, DWORD PTR _towerConnections$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+8]
	mov	DWORD PTR [edx+ecx*4+8], eax

; 3067 : 			sortedTowerConnections[(i*4)+3] = 0;	// Not a 'bad' connection

	mov	eax, DWORD PTR _i$25[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	DWORD PTR [ecx+eax*4+12], 0

; 3068 : 
; 3069 : 			// Remove the copied item from the sort
; 3070 : 			towerConnections[maxDistIndex*3] = -1;

	mov	eax, DWORD PTR _maxDistIndex$23[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _towerConnections$[ebp]
	mov	DWORD PTR [ecx+eax*4], -1
$LN17@calculateT:

; 3071 : 		}
; 3072 : 	}

	jmp	$LN23@calculateT
$LN22@calculateT:

; 3073 : 
; 3074 : 	// Get rid of tower connections
; 3075 : 	delete [] towerConnections;

	push	OFFSET ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 86					; 00000056H
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN47@calculateT
	xor	edx, edx
	jne	SHORT $LN46@calculateT
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 86					; 00000056H
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN46@calculateT:
	jmp	SHORT $LN48@calculateT
$LN47@calculateT:
	mov	edx, DWORD PTR _towerConnections$[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN48@calculateT:

; 3076 : 
; 3077 : 
; 3078 : 	// OK, we have a sorted list of connections, now iterate through it and
; 3079 : 	// for each connection see if there is another path between the towers it
; 3080 : 	// links. If there is then get rid of this connection
; 3081 : 	for ( int i = 0; i < connectionCount; ++i )

	mov	DWORD PTR _i$21[ebp], 0
	jmp	SHORT $LN16@calculateT
$LN15@calculateT:
	mov	eax, DWORD PTR _i$21[ebp]
	add	eax, 1
	mov	DWORD PTR _i$21[ebp], eax
$LN16@calculateT:
	mov	eax, DWORD PTR _i$21[ebp]
	cmp	eax, DWORD PTR _connectionCount$[ebp]
	jge	SHORT $LN14@calculateT

; 3082 : 	{
; 3083 : 		// Mark the connection as bad
; 3084 : 		sortedTowerConnections[(i*4)+3] = 1;

	mov	eax, DWORD PTR _i$21[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	DWORD PTR [ecx+eax*4+12], 1

; 3085 : 
; 3086 : 		// Check to see if another path exists between these towers - if it
; 3087 : 		// does not then this path is required for the minimum spanning tree
; 3088 : 		// so restore it as a 'good' path
; 3089 : 		if ( !calculateTowerMapPathSearch(sortedTowerConnections,connectionCount,sortedTowerConnections[i*4],sortedTowerConnections[(i*4)+1]) )

	mov	eax, DWORD PTR _i$21[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _i$21[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _connectionCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	push	ecx
	call	?calculateTowerMapPathSearch@dp88_AR_Prism_Tower@@CA_NPAHHHH@Z ; dp88_AR_Prism_Tower::calculateTowerMapPathSearch
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@calculateT

; 3090 : 			sortedTowerConnections[(i*4)+3] = 0;

	mov	eax, DWORD PTR _i$21[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	DWORD PTR [ecx+eax*4+12], 0
$LN13@calculateT:

; 3091 : 	}

	jmp	SHORT $LN15@calculateT
$LN14@calculateT:

; 3092 : 
; 3093 : 
; 3094 : 	// OK, we now have a minimum spanning tree... update each tower with
; 3095 : 	// a list of their neighbours
; 3096 : 	for ( int i = 0; i < connectionCount; ++i )

	mov	DWORD PTR _i$20[ebp], 0
	jmp	SHORT $LN12@calculateT
$LN11@calculateT:
	mov	eax, DWORD PTR _i$20[ebp]
	add	eax, 1
	mov	DWORD PTR _i$20[ebp], eax
$LN12@calculateT:
	mov	eax, DWORD PTR _i$20[ebp]
	cmp	eax, DWORD PTR _connectionCount$[ebp]
	jge	$LN10@calculateT

; 3097 : 	{
; 3098 : 		// Ignore 'bad' connections
; 3099 : 		if ( sortedTowerConnections[(i*4)+3] != 1 )

	mov	eax, DWORD PTR _i$20[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	cmp	DWORD PTR [ecx+eax*4+12], 1
	je	$LN9@calculateT

; 3100 : 		{
; 3101 : 			int tower1idx = sortedTowerConnections[i*4];

	mov	eax, DWORD PTR _i$20[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _tower1idx$19[ebp], edx

; 3102 : 			int tower1id = prismTowerIds[tower1idx];

	mov	eax, DWORD PTR _tower1idx$19[ebp]
	mov	ecx, DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4]
	mov	DWORD PTR _tower1id$18[ebp], ecx

; 3103 : 			dp88_AR_Prism_Tower* tower1script = prismTowerScripts[tower1idx];

	mov	eax, DWORD PTR _tower1idx$19[ebp]
	mov	ecx, DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[eax*4]
	mov	DWORD PTR _tower1script$17[ebp], ecx

; 3104 : 			int tower2idx = sortedTowerConnections[(i*4)+1];

	mov	eax, DWORD PTR _i$20[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _tower2idx$16[ebp], edx

; 3105 : 			int tower2id = prismTowerIds[tower2idx];

	mov	eax, DWORD PTR _tower2idx$16[ebp]
	mov	ecx, DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4]
	mov	DWORD PTR _tower2id$15[ebp], ecx

; 3106 : 			dp88_AR_Prism_Tower* tower2script = prismTowerScripts[tower2idx];

	mov	eax, DWORD PTR _tower2idx$16[ebp]
	mov	ecx, DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[eax*4]
	mov	DWORD PTR _tower2script$14[ebp], ecx

; 3107 : 
; 3108 : 
; 3109 : 			// Add tower2 to tower1's adjacent towers list
; 3110 : 			int* oldAdjacentTowers = tower1script->adjacentTowers;

	mov	eax, DWORD PTR _tower1script$17[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR _oldAdjacentTowers$13[ebp], ecx

; 3111 : 			tower1script->adjacentTowers = new int[++tower1script->adjacentTowerCount];

	push	OFFSET ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 122				; 0000007aH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN50@calculateT
	xor	edx, edx
	jne	SHORT $LN49@calculateT
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 122				; 0000007aH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN49@calculateT:
	mov	DWORD PTR tv349[ebp], 0
	jmp	SHORT $LN51@calculateT
$LN50@calculateT:
	mov	edx, DWORD PTR _tower1script$17[ebp]
	mov	eax, DWORD PTR [edx+172]
	add	eax, 1
	mov	DWORD PTR tv341[ebp], eax
	mov	ecx, DWORD PTR _tower1script$17[ebp]
	mov	edx, DWORD PTR tv341[ebp]
	mov	DWORD PTR [ecx+172], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR tv341[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR tv349[ebp], eax
$LN51@calculateT:
	mov	ecx, DWORD PTR _tower1script$17[ebp]
	mov	edx, DWORD PTR tv349[ebp]
	mov	DWORD PTR [ecx+176], edx

; 3112 : 
; 3113 : 			// Copy existing data
; 3114 : 			for ( int j = 0; j < tower1script->adjacentTowerCount-1; ++j )

	mov	DWORD PTR _j$12[ebp], 0
	jmp	SHORT $LN8@calculateT
$LN7@calculateT:
	mov	eax, DWORD PTR _j$12[ebp]
	add	eax, 1
	mov	DWORD PTR _j$12[ebp], eax
$LN8@calculateT:
	mov	eax, DWORD PTR _tower1script$17[ebp]
	mov	ecx, DWORD PTR [eax+172]
	sub	ecx, 1
	cmp	DWORD PTR _j$12[ebp], ecx
	jge	SHORT $LN6@calculateT

; 3115 : 				tower1script->adjacentTowers[j] = oldAdjacentTowers[j];

	mov	eax, DWORD PTR _tower1script$17[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _j$12[ebp]
	mov	eax, DWORD PTR _j$12[ebp]
	mov	esi, DWORD PTR _oldAdjacentTowers$13[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN7@calculateT
$LN6@calculateT:

; 3116 : 
; 3117 : 			// Delete old array
; 3118 : 			if ( oldAdjacentTowers != NULL )

	cmp	DWORD PTR _oldAdjacentTowers$13[ebp], 0
	je	SHORT $LN54@calculateT

; 3119 : 				delete [] oldAdjacentTowers;

	push	OFFSET ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 130				; 00000082H
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN53@calculateT
	xor	edx, edx
	jne	SHORT $LN52@calculateT
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 130				; 00000082H
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN52@calculateT:
	jmp	SHORT $LN54@calculateT
$LN53@calculateT:
	mov	edx, DWORD PTR _oldAdjacentTowers$13[ebp]
	mov	DWORD PTR $T7[ebp], edx
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN54@calculateT:

; 3120 : 
; 3121 : 			// Add new adjacent tower
; 3122 : 			tower1script->adjacentTowers[tower1script->adjacentTowerCount-1] = tower2id;

	mov	eax, DWORD PTR _tower1script$17[ebp]
	mov	ecx, DWORD PTR [eax+172]
	mov	edx, DWORD PTR _tower1script$17[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	edx, DWORD PTR _tower2id$15[ebp]
	mov	DWORD PTR [eax+ecx*4-4], edx

; 3123 : 
; 3124 : 
; 3125 : 
; 3126 : 
; 3127 : 			// Add tower1 to tower2's adjacent towers list
; 3128 : 			oldAdjacentTowers = tower2script->adjacentTowers;

	mov	eax, DWORD PTR _tower2script$14[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR _oldAdjacentTowers$13[ebp], ecx

; 3129 : 			tower2script->adjacentTowers = new int[++tower2script->adjacentTowerCount];

	push	OFFSET ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 140				; 0000008cH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN56@calculateT
	xor	edx, edx
	jne	SHORT $LN55@calculateT
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 140				; 0000008cH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN55@calculateT:
	mov	DWORD PTR tv400[ebp], 0
	jmp	SHORT $LN57@calculateT
$LN56@calculateT:
	mov	edx, DWORD PTR _tower2script$14[ebp]
	mov	eax, DWORD PTR [edx+172]
	add	eax, 1
	mov	DWORD PTR tv392[ebp], eax
	mov	ecx, DWORD PTR _tower2script$14[ebp]
	mov	edx, DWORD PTR tv392[ebp]
	mov	DWORD PTR [ecx+172], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR tv392[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR tv400[ebp], eax
$LN57@calculateT:
	mov	ecx, DWORD PTR _tower2script$14[ebp]
	mov	edx, DWORD PTR tv400[ebp]
	mov	DWORD PTR [ecx+176], edx

; 3130 : 
; 3131 : 			// Copy existing data
; 3132 : 			for ( int j = 0; j < tower2script->adjacentTowerCount-1; ++j )

	mov	DWORD PTR _j$11[ebp], 0
	jmp	SHORT $LN4@calculateT
$LN3@calculateT:
	mov	eax, DWORD PTR _j$11[ebp]
	add	eax, 1
	mov	DWORD PTR _j$11[ebp], eax
$LN4@calculateT:
	mov	eax, DWORD PTR _tower2script$14[ebp]
	mov	ecx, DWORD PTR [eax+172]
	sub	ecx, 1
	cmp	DWORD PTR _j$11[ebp], ecx
	jge	SHORT $LN2@calculateT

; 3133 : 				tower2script->adjacentTowers[j] = oldAdjacentTowers[j];

	mov	eax, DWORD PTR _tower2script$14[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _j$11[ebp]
	mov	eax, DWORD PTR _j$11[ebp]
	mov	esi, DWORD PTR _oldAdjacentTowers$13[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN3@calculateT
$LN2@calculateT:

; 3134 : 
; 3135 : 			// Delete old array
; 3136 : 			if ( oldAdjacentTowers != NULL )

	cmp	DWORD PTR _oldAdjacentTowers$13[ebp], 0
	je	SHORT $LN60@calculateT

; 3137 : 				delete [] oldAdjacentTowers;

	push	OFFSET ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 148				; 00000094H
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN59@calculateT
	xor	edx, edx
	jne	SHORT $LN58@calculateT
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 148				; 00000094H
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN58@calculateT:
	jmp	SHORT $LN60@calculateT
$LN59@calculateT:
	mov	edx, DWORD PTR _oldAdjacentTowers$13[ebp]
	mov	DWORD PTR $T9[ebp], edx
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN60@calculateT:

; 3138 : 
; 3139 : 			// Add new adjacent tower
; 3140 : 			tower2script->adjacentTowers[tower2script->adjacentTowerCount-1] = tower1id;

	mov	eax, DWORD PTR _tower2script$14[ebp]
	mov	ecx, DWORD PTR [eax+172]
	mov	edx, DWORD PTR _tower2script$14[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	edx, DWORD PTR _tower1id$18[ebp]
	mov	DWORD PTR [eax+ecx*4-4], edx
$LN9@calculateT:

; 3141 : 		}
; 3142 : 	}

	jmp	$LN11@calculateT
$LN10@calculateT:

; 3143 : 
; 3144 : 	// Get rid of sorted tower connections
; 3145 : 	delete [] sortedTowerConnections;

	push	OFFSET ??_C@_0CH@FOALLIJB@dp88_AR_Prism_Tower?3?3calculateTo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 156				; 0000009cH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN62@calculateT
	xor	edx, edx
	jne	SHORT $LN61@calculateT
	mov	eax, DWORD PTR ?__LINE__Var@?1??calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ@4JA@6d493206
	add	eax, 156				; 0000009cH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN61@calculateT:
	jmp	SHORT $LN63@calculateT
$LN62@calculateT:
	mov	edx, DWORD PTR _sortedTowerConnections$[ebp]
	mov	DWORD PTR $T10[ebp], edx
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN63@calculateT:

; 3146 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ ENDP	; dp88_AR_Prism_Tower::calculateTowerMap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
_idx$ = 8						; size = 4
?clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z PROC		; dp88_AR_Prism_Tower::clearTowerMap, COMDAT

; 2975 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2976 : 	if ( idx < MAX_TOWERS )

	cmp	DWORD PTR _idx$[ebp], 20		; 00000014H
	jge	$LN3@clearTower

; 2977 : 	{
; 2978 : 		prismTowerScripts[idx]->adjacentTowerCount = 0;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[eax*4]
	mov	DWORD PTR [ecx+172], 0

; 2979 : 		if ( prismTowerScripts[idx]->adjacentTowers != NULL )

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[eax*4]
	cmp	DWORD PTR [ecx+176], 0
	je	SHORT $LN3@clearTower

; 2980 : 		{
; 2981 : 			delete [] prismTowerScripts[idx]->adjacentTowers;

	push	OFFSET ??_C@_0CD@NMNGKBLJ@dp88_AR_Prism_Tower?3?3clearTowerM@
	mov	eax, DWORD PTR ?__LINE__Var@?1??clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z@4JA@6d493206
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN6@clearTower
	xor	edx, edx
	jne	SHORT $LN5@clearTower
	mov	eax, DWORD PTR ?__LINE__Var@?1??clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z@4JA@6d493206
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@clearTower:
	jmp	SHORT $LN7@clearTower
$LN6@clearTower:
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[edx*4]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN7@clearTower:

; 2982 : 			prismTowerScripts[idx]->adjacentTowers = NULL;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[eax*4]
	mov	DWORD PTR [ecx+176], 0
$LN3@clearTower:

; 2983 : 		}
; 2984 : 	}
; 2985 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z ENDP		; dp88_AR_Prism_Tower::clearTowerMap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?deregisterTower@dp88_AR_Prism_Tower@@CAXH@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_towerId$ = 8						; size = 4
?deregisterTower@dp88_AR_Prism_Tower@@CAXH@Z PROC	; dp88_AR_Prism_Tower::deregisterTower, COMDAT

; 2956 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2957 : 	// Find this tower in the list and remove it from the array
; 2958 : 	for ( int i = 0; i < MAX_TOWERS; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@deregister
$LN3@deregister:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@deregister:
	cmp	DWORD PTR _i$1[ebp], 20			; 00000014H
	jge	SHORT $LN5@deregister

; 2959 : 	{
; 2960 : 		if ( prismTowerIds[i] == towerId )

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4]
	cmp	ecx, DWORD PTR _towerId$[ebp]
	jne	SHORT $LN1@deregister

; 2961 : 		{
; 2962 : 			prismTowerIds[i] = 0;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4], 0

; 2963 : 			clearTowerMap(i);

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	call	?clearTowerMap@dp88_AR_Prism_Tower@@CAXH@Z ; dp88_AR_Prism_Tower::clearTowerMap
	add	esp, 4

; 2964 : 			prismTowerScripts[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[eax*4], 0

; 2965 : 
; 2966 : 			// Recalculate tower map
; 2967 : 			calculateTowerMap();

	call	?calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ ; dp88_AR_Prism_Tower::calculateTowerMap

; 2968 : 			break;

	jmp	SHORT $LN5@deregister
$LN1@deregister:

; 2969 : 		}
; 2970 : 	}

	jmp	SHORT $LN3@deregister
$LN5@deregister:

; 2971 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?deregisterTower@dp88_AR_Prism_Tower@@CAXH@Z ENDP	; dp88_AR_Prism_Tower::deregisterTower
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?registerTower@dp88_AR_Prism_Tower@@CAXHPAV1@@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_towerId$ = 8						; size = 4
_script$ = 12						; size = 4
?registerTower@dp88_AR_Prism_Tower@@CAXHPAV1@@Z PROC	; dp88_AR_Prism_Tower::registerTower, COMDAT

; 2938 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2939 : 	// Find an empty slot for this tower
; 2940 : 	for ( int i = 0; i < MAX_TOWERS; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@registerTo
$LN3@registerTo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@registerTo:
	cmp	DWORD PTR _i$1[ebp], 20			; 00000014H
	jge	SHORT $LN5@registerTo

; 2941 : 	{
; 2942 : 		if ( prismTowerIds[i] == 0 )

	mov	eax, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4], 0
	jne	SHORT $LN1@registerTo

; 2943 : 		{
; 2944 : 			prismTowerIds[i] = towerId;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _towerId$[ebp]
	mov	DWORD PTR ?prismTowerIds@dp88_AR_Prism_Tower@@0PAHA[eax*4], ecx

; 2945 : 			prismTowerScripts[i] = script;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	DWORD PTR ?prismTowerScripts@dp88_AR_Prism_Tower@@0PAPAV1@A[eax*4], ecx

; 2946 : 
; 2947 : 			// Recalculate tower map
; 2948 : 			calculateTowerMap();

	call	?calculateTowerMap@dp88_AR_Prism_Tower@@CAXXZ ; dp88_AR_Prism_Tower::calculateTowerMap

; 2949 : 			break;

	jmp	SHORT $LN5@registerTo
$LN1@registerTo:

; 2950 : 		}
; 2951 : 	}

	jmp	SHORT $LN3@registerTo
$LN5@registerTo:

; 2952 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?registerTower@dp88_AR_Prism_Tower@@CAXHPAV1@@Z ENDP	; dp88_AR_Prism_Tower::registerTower
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_Paradrop@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_Paradrop@@UAEPAXI@Z PROC			; dp88_AR_Paradrop::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_Paradrop@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_Paradrop@@UAEPAXI@Z ENDP			; dp88_AR_Paradrop::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_Paradrop@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_Paradrop@@UAE@XZ PROC			; dp88_AR_Paradrop::~dp88_AR_Paradrop, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_Paradrop@@UAE@XZ ENDP			; dp88_AR_Paradrop::~dp88_AR_Paradrop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Landed@dp88_AR_Paradrop@@IAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv82 = -96						; size = 4
tv156 = -89						; size = 1
tv153 = -88						; size = 4
tv150 = -84						; size = 4
_armour$1 = -16						; size = 4
_health$2 = -12						; size = 4
_infantry_preset$ = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Landed@dp88_AR_Paradrop@@IAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Paradrop::Landed, COMDAT
; _this$ = ecx

; 2886 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2887 :   // Despawn the parachute model
; 2888 :   if ( m_nParachuteModel != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@Landed

; 2889 :     Commands->Destroy_Object(Commands->Find_Object(m_nParachuteModel));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN2@Landed:

; 2890 :   m_nParachuteModel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2891 : 
; 2892 : 
; 2893 :   // Swap to new infantry preset
; 2894 :   const char* infantry_preset = Get_Parameter("Infantry_Preset");

	push	OFFSET ??_C@_0BA@NHMIOHB@Infantry_Preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _infantry_preset$[ebp], eax

; 2895 :   if ( strlen(infantry_preset) > 0 && Is_Valid_Preset(infantry_preset) )

	mov	eax, DWORD PTR _infantry_preset$[ebp]
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR tv150[ebp]
	add	ecx, 1
	mov	DWORD PTR tv153[ebp], ecx
$LL5@Landed:
	mov	edx, DWORD PTR tv150[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv156[ebp], al
	add	DWORD PTR tv150[ebp], 1
	cmp	BYTE PTR tv156[ebp], 0
	jne	SHORT $LL5@Landed
	mov	ecx, DWORD PTR tv150[ebp]
	sub	ecx, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	je	$LN1@Landed
	mov	eax, DWORD PTR _infantry_preset$[ebp]
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	$LN1@Landed

; 2896 :   {
; 2897 :     float health = Commands->Get_Health(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _health$2[ebp]

; 2898 :     float armour = Commands->Get_Shield_Strength(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _armour$1[ebp]

; 2899 :     Change_Character(pObj, infantry_preset );

	mov	eax, DWORD PTR _infantry_preset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	?Change_Character@@YA_NPAVScriptableGameObj@@PBD@Z ; Change_Character
	add	esp, 8

; 2900 :     Commands->Set_Health(pObj, health);

	push	ecx
	movss	xmm0, DWORD PTR _health$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	add	esp, 8

; 2901 :     Commands->Set_Shield_Strength(pObj, armour);

	push	ecx
	movss	xmm0, DWORD PTR _armour$1[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	add	esp, 8
$LN1@Landed:

; 2902 :   }
; 2903 : 
; 2904 :   // Prevent anything else happening, such as Timer_Expired
; 2905 :   Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 2906 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Landed@dp88_AR_Paradrop@@IAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Paradrop::Landed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Paradrop::Detach, COMDAT
; _this$ = ecx

; 2877 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2878 :   ScriptImpClass::Detach(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Detach

; 2879 :   delete m_pAnimController;

	push	OFFSET ??_C@_0BJ@EPLABFHB@dp88_AR_Paradrop?3?3Detach?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN6@Detach
	xor	edx, edx
	jne	SHORT $LN3@Detach
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Detach:
	jmp	SHORT $LN7@Detach
$LN6@Detach:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Detach
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN7@Detach
$LN4@Detach:
	mov	DWORD PTR tv91[ebp], 0
$LN7@Detach:

; 2880 :   m_pAnimController = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 2881 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Paradrop::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_velocity$1 = -16					; size = 12
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AR_Paradrop::Timer_Expired, COMDAT
; _this$ = ecx

; 2860 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2861 :   if ( number == TIMER_PARADROP_CHECKFALLRATE )

	cmp	DWORD PTR _number$[ebp], -620756985	; db000007H
	jne	SHORT $LN1@Timer_Expi

; 2862 :   {
; 2863 :     Vector3 velocity = Get_Velocity(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	lea	ecx, DWORD PTR _velocity$1[ebp]
	push	ecx
	call	?Get_Velocity@@YA?AVVector3@@PAVScriptableGameObj@@@Z ; Get_Velocity
	add	esp, 8

; 2864 :     if ( velocity.Z > m_fallRate )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _velocity$1[ebp+8]
	comiss	xmm0, DWORD PTR [eax+36]
	jbe	SHORT $LN2@Timer_Expi

; 2865 :       Landed(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Landed@dp88_AR_Paradrop@@IAEXPAVScriptableGameObj@@@Z ; dp88_AR_Paradrop::Landed

; 2866 :     else

	jmp	SHORT $LN1@Timer_Expi
$LN2@Timer_Expi:

; 2867 :     {
; 2868 :       m_fallRate = velocity.Z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _velocity$1[ebp+8]
	movss	DWORD PTR [eax+36], xmm0

; 2869 :       Commands->Start_Timer(pObj, this, 1.0f, TIMER_PARADROP_CHECKFALLRATE );

	push	-620756985				; db000007H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN1@Timer_Expi:

; 2870 :     }
; 2871 :   }
; 2872 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AR_Paradrop::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pKilled$ = 12						; size = 4
?Killed@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AR_Paradrop::Killed, COMDAT
; _this$ = ecx

; 2847 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2848 :   // Despawn the parachute model
; 2849 :   if ( m_nParachuteModel != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@Killed

; 2850 :     Commands->Destroy_Object(Commands->Find_Object(m_nParachuteModel));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN1@Killed:

; 2851 :   m_nParachuteModel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2852 : 
; 2853 :   // Prevent anything else happening, such as Timer_Expired
; 2854 :   Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 2855 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_Paradrop::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Damaged@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
tv147 = -80						; size = 4
_max$1 = -12						; size = 4
_health$2 = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pDamager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AR_Paradrop::Damaged, COMDAT
; _this$ = ecx

; 2812 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2813 :   if ( Get_Damage_Warhead() == earth_warhead )

	call	DWORD PTR ?Get_Damage_Warhead@@3P6AIXZA	; Get_Damage_Warhead
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+28]
	jne	$LN5@Damaged

; 2814 :   {
; 2815 :     // Repair the falling damage. Note that, in stock Renegade and most mods, falling damage ignores
; 2816 :     // armour, so we can't use Apply_Damage to heal the damage, it has to be done manually
; 2817 :     float health = Commands->Get_Health(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _health$2[ebp]

; 2818 :     float max = Commands->Get_Max_Health(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+224]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _max$1[ebp]

; 2819 :     health += amount;

	movss	xmm0, DWORD PTR _health$2[ebp]
	addss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR _health$2[ebp], xmm0

; 2820 :     if ( health > max )

	movss	xmm0, DWORD PTR _health$2[ebp]
	comiss	xmm0, DWORD PTR _max$1[ebp]
	jbe	SHORT $LN4@Damaged

; 2821 :     {
; 2822 :       amount -= abs(max-health);

	movss	xmm0, DWORD PTR _max$1[ebp]
	subss	xmm0, DWORD PTR _health$2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv147[ebp]
	movss	xmm0, DWORD PTR _amount$[ebp]
	subss	xmm0, DWORD PTR tv147[ebp]
	movss	DWORD PTR _amount$[ebp], xmm0

; 2823 :       health = max;

	movss	xmm0, DWORD PTR _max$1[ebp]
	movss	DWORD PTR _health$2[ebp], xmm0

; 2824 :     }
; 2825 :     else

	jmp	SHORT $LN3@Damaged
$LN4@Damaged:

; 2826 :       amount = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _amount$[ebp], xmm0
$LN3@Damaged:

; 2827 :     Commands->Set_Health(pObj, health);

	push	ecx
	movss	xmm0, DWORD PTR _health$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	add	esp, 8

; 2828 : 
; 2829 :     // Apply any left-over repairs to the armour (to support mods where armour takes falling damage)
; 2830 :     if ( amount > 0 )

	movss	xmm0, DWORD PTR _amount$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@Damaged

; 2831 :     {
; 2832 :       health = Commands->Get_Shield_Strength(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _health$2[ebp]

; 2833 :       max = Commands->Get_Max_Shield_Strength(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+236]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _max$1[ebp]

; 2834 :       health += amount;

	movss	xmm0, DWORD PTR _health$2[ebp]
	addss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR _health$2[ebp], xmm0

; 2835 :       if ( health > max )

	movss	xmm0, DWORD PTR _health$2[ebp]
	comiss	xmm0, DWORD PTR _max$1[ebp]
	jbe	SHORT $LN1@Damaged

; 2836 :         health = max;

	movss	xmm0, DWORD PTR _max$1[ebp]
	movss	DWORD PTR _health$2[ebp], xmm0
$LN1@Damaged:

; 2837 :       Commands->Set_Shield_Strength(pObj, health);

	push	ecx
	movss	xmm0, DWORD PTR _health$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	add	esp, 8
$LN2@Damaged:

; 2838 :     }
; 2839 : 
; 2840 :     Landed(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Landed@dp88_AR_Paradrop@@IAEXPAVScriptableGameObj@@@Z ; dp88_AR_Paradrop::Landed
$LN5@Damaged:

; 2841 :   }
; 2842 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AR_Paradrop::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv186 = -120						; size = 4
tv137 = -120						; size = 4
tv315 = -113						; size = 1
tv271 = -113						; size = 1
tv312 = -112						; size = 4
tv268 = -112						; size = 4
tv205 = -112						; size = 4
tv309 = -108						; size = 4
tv265 = -108						; size = 4
tv218 = -108						; size = 4
tv207 = -108						; size = 4
$T1 = -104						; size = 12
$T2 = -92						; size = 4
_velocity$ = -24					; size = 12
_pParachute$3 = -12					; size = 4
_parachute_model$ = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Paradrop::Created, COMDAT
; _this$ = ecx

; 2777 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2778 :   if ( !pObj->As_SoldierGameObj() )

	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	jne	SHORT $LN3@Created

; 2779 :   {
; 2780 :     Console_Output ( "[%d:%s:%s] Critical Error: This script is only compatible with soldier game objects. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0GL@LLBGFEEK@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 2781 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 2782 :     return;

	jmp	$LN4@Created
$LN3@Created:

; 2783 :   }
; 2784 : 
; 2785 :   //Console_Output ( "Created dp88_AR_paradrop\n" );
; 2786 :   earth_warhead = ArmorWarheadManager::Get_Warhead_Type("Earth");

	push	OFFSET ??_C@_05IKBANCEK@Earth?$AA@
	call	?Get_Warhead_Type@ArmorWarheadManager@@SAIPBD@Z ; ArmorWarheadManager::Get_Warhead_Type
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 2787 :   m_nParachuteModel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2788 : 
; 2789 :   const char* parachute_model = Get_Parameter("Parachute_Model");

	push	OFFSET ??_C@_0BA@CGGKAAON@Parachute_Model?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _parachute_model$[ebp], eax

; 2790 :   if ( strlen(parachute_model) > 0 )

	mov	eax, DWORD PTR _parachute_model$[ebp]
	mov	DWORD PTR tv265[ebp], eax
	mov	ecx, DWORD PTR tv265[ebp]
	add	ecx, 1
	mov	DWORD PTR tv268[ebp], ecx
$LL13@Created:
	mov	edx, DWORD PTR tv265[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv271[ebp], al
	add	DWORD PTR tv265[ebp], 1
	cmp	BYTE PTR tv271[ebp], 0
	jne	SHORT $LL13@Created
	mov	ecx, DWORD PTR tv265[ebp]
	sub	ecx, DWORD PTR tv268[ebp]
	mov	DWORD PTR tv137[ebp], ecx
	je	$LN2@Created

; 2791 :   {
; 2792 :     GameObject* pParachute = Commands->Create_Object("Invisible_Object",Commands->Get_Position(pObj));

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BB@NHJNEILC@Invisible_Object?$AA@
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _pParachute$3[ebp], eax

; 2793 :     Commands->Set_Model ( pParachute, parachute_model );

	mov	eax, DWORD PTR _parachute_model$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParachute$3[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+160]
	call	eax
	add	esp, 8

; 2794 :     Commands->Attach_To_Object_Bone(pParachute, pObj, Get_Parameter("Parachute_Bone"));

	push	OFFSET ??_C@_0P@HIPDHOEE@Parachute_Bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParachute$3[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+572]
	call	eax
	add	esp, 12					; 0000000cH

; 2795 :     m_nParachuteModel = Commands->Get_ID(pParachute);

	mov	eax, DWORD PTR _pParachute$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
$LN2@Created:

; 2796 :   }
; 2797 : 
; 2798 :   Vector3 velocity = Get_Velocity(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	lea	ecx, DWORD PTR _velocity$[ebp]
	push	ecx
	call	?Get_Velocity@@YA?AVVector3@@PAVScriptableGameObj@@@Z ; Get_Velocity
	add	esp, 8

; 2799 :   m_fallRate = velocity.Z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _velocity$[ebp+8]
	movss	DWORD PTR [eax+36], xmm0

; 2800 :   Commands->Start_Timer(pObj, this, 1.0f, TIMER_PARADROP_CHECKFALLRATE );

	push	-620756985				; db000007H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 2801 : 
; 2802 :   if ( strlen(Get_Parameter("Animation")) > 0 )

	push	OFFSET ??_C@_09ONEINPNJ@Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv309[ebp], eax
	mov	eax, DWORD PTR tv309[ebp]
	add	eax, 1
	mov	DWORD PTR tv312[ebp], eax
$LL14@Created:
	mov	ecx, DWORD PTR tv309[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv315[ebp], dl
	add	DWORD PTR tv309[ebp], 1
	cmp	BYTE PTR tv315[ebp], 0
	jne	SHORT $LL14@Created
	mov	eax, DWORD PTR tv309[ebp]
	sub	eax, DWORD PTR tv312[ebp]
	mov	DWORD PTR tv186[ebp], eax
	je	$LN1@Created

; 2803 :   {
; 2804 :     m_pAnimController = new LoopedAnimationController(pObj);

	push	OFFSET ??_C@_0BK@IDPMNJAO@dp88_AR_Paradrop?3?3Created?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 27					; 0000001bH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN9@Created
	xor	edx, edx
	jne	SHORT $LN6@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 27					; 0000001bH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Created:
	mov	DWORD PTR tv207[ebp], 0
	jmp	SHORT $LN10@Created
$LN9@Created:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@Created
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0LoopedAnimationController@@QAE@PAVScriptableGameObj@@@Z ; LoopedAnimationController::LoopedAnimationController
	mov	DWORD PTR tv205[ebp], eax
	jmp	SHORT $LN8@Created
$LN7@Created:
	mov	DWORD PTR tv205[ebp], 0
$LN8@Created:
	mov	eax, DWORD PTR tv205[ebp]
	mov	DWORD PTR tv207[ebp], eax
$LN10@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv207[ebp]
	mov	DWORD PTR [ecx+40], edx

; 2805 :     m_pAnimController->PlayAnimation ( Get_Parameter("Animation"), Get_Int_Parameter("Animation_First_Frame"), Get_Int_Parameter("Animation_Last_Frame"), (Get_Int_Parameter("Animation_Looped")==1) );

	push	OFFSET ??_C@_0BB@FIHKMGIB@Animation_Looped?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jne	SHORT $LN11@Created
	mov	DWORD PTR tv218[ebp], 1
	jmp	SHORT $LN12@Created
$LN11@Created:
	mov	DWORD PTR tv218[ebp], 0
$LN12@Created:
	mov	eax, DWORD PTR tv218[ebp]
	push	eax
	push	OFFSET ??_C@_0BF@LOKKEGED@Animation_Last_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0BG@IGICMLKJ@Animation_First_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_09ONEINPNJ@Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation
$LN1@Created:
$LN4@Created:

; 2806 :   }
; 2807 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_Paradrop@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Paradrop::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ??0dp88_AR_Paradrop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_Paradrop@@QAE@XZ PROC			; dp88_AR_Paradrop::dp88_AR_Paradrop, COMDAT
; _this$ = ecx

; 877  :   dp88_AR_Paradrop() : m_pAnimController(0) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_Paradrop@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_Paradrop@@QAE@XZ ENDP			; dp88_AR_Paradrop::dp88_AR_Paradrop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_paradrop_Console@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_paradrop_Console@@UAEPAXI@Z PROC		; dp88_AR_paradrop_Console::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_paradrop_Console@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_paradrop_Console@@UAEPAXI@Z ENDP		; dp88_AR_paradrop_Console::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_paradrop_Console@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_paradrop_Console@@UAE@XZ PROC		; dp88_AR_paradrop_Console::~dp88_AR_paradrop_Console, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_paradrop_Console@@UAE@XZ ENDP		; dp88_AR_paradrop_Console::~dp88_AR_paradrop_Console
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AR_paradrop_Console@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_paradrop_Console@@QAE@XZ PROC		; dp88_AR_paradrop_Console::dp88_AR_paradrop_Console, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_paradrop_Console@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_paradrop_Console@@QAE@XZ ENDP		; dp88_AR_paradrop_Console::dp88_AR_paradrop_Console
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Poked@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv167 = -92						; size = 8
_i$1 = -20						; size = 4
_pos$ = -16						; size = 12
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_poker$ = 12						; size = 4
?Poked@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AR_paradrop_Console::Poked, COMDAT
; _this$ = ecx

; 2729 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2730 : 	// Deny use to members of the wrong team (unless team == 2 (ie: anyone))
; 2731 : 	if ( Get_Int_Parameter("team") != 2 && Get_Object_Type(poker) != Get_Int_Parameter("team"))

	push	OFFSET ??_C@_04KADBPNCB@team?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 2
	je	SHORT $LN5@Poked
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	esi, eax
	push	OFFSET ??_C@_04KADBPNCB@team?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	esi, eax
	je	SHORT $LN5@Poked

; 2732 : 	{
; 2733 : 		Send_Message_Player(obj, 153, 204, 25, "Invalid Security Clearance\n");

	push	OFFSET ??_C@_0BM@PNAKAEKE@Invalid?5Security?5Clearance?6?$AA@
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 2734 : 		return;

	jmp	$LN6@Poked
$LN5@Poked:

; 2735 : 	}
; 2736 : 
; 2737 : 	if ( time(NULL)-last_triggered < 180 )

	push	0
	call	_time
	add	esp, 4
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cdq
	sub	ecx, eax
	sbb	esi, edx
	mov	DWORD PTR tv167[ebp], ecx
	mov	DWORD PTR tv167[ebp+4], esi
	cmp	DWORD PTR tv167[ebp+4], 0
	jg	SHORT $LN4@Poked
	jl	SHORT $LN8@Poked
	cmp	DWORD PTR tv167[ebp], 180		; 000000b4H
	jae	SHORT $LN4@Poked
$LN8@Poked:

; 2738 : 	{
; 2739 : 		Send_Message_Player(obj, 153, 204, 25, "This can only be used once every 3 minutes\n");

	push	OFFSET ??_C@_0CM@BGFNOIH@This?5can?5only?5be?5used?5once?5every@
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 2740 : 		return;

	jmp	$LN6@Poked
$LN4@Poked:

; 2741 : 	}
; 2742 : 
; 2743 : 	last_triggered = (int)time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 2744 : 
; 2745 : 	// TEMP
; 2746 : 	Vector3 pos;

	lea	ecx, DWORD PTR _pos$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 2747 : 	pos.X = -40.0f;

	movss	xmm0, DWORD PTR __real@c2200000
	movss	DWORD PTR _pos$[ebp], xmm0

; 2748 : 	pos.Y = 110.0f;

	movss	xmm0, DWORD PTR __real@42dc0000
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2749 : 	pos.Z = 40.0f;

	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2750 : 
; 2751 : 	// Change poker into paradrop unit and teleport to position
; 2752 : 	Commands->Set_Position(poker,pos);

	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _poker$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8

; 2753 : 	Change_Character(poker,"Allied_GI_Paradrop");

	push	OFFSET ??_C@_0BD@DKEHFKKN@Allied_GI_Paradrop?$AA@
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	call	?Change_Character@@YA_NPAVScriptableGameObj@@PBD@Z ; Change_Character
	add	esp, 8

; 2754 : 	
; 2755 : 	// Spawn 3 bots to go with me :)
; 2756 : 	for ( int i = 0; i < 3; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Poked
$LN2@Poked:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Poked:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN1@Poked

; 2757 : 	{
; 2758 : 		pos.X += 2;

	movss	xmm0, DWORD PTR _pos$[ebp]
	addss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _pos$[ebp], xmm0

; 2759 : 		pos.Y += 2;

	movss	xmm0, DWORD PTR _pos$[ebp+4]
	addss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2760 : 		Commands->Create_Object ( "Allied_GI_Paradrop", pos );

	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@DKEHFKKN@Allied_GI_Paradrop?$AA@
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8

; 2761 : 	}

	jmp	SHORT $LN2@Poked
$LN1@Poked:
$LN6@Poked:

; 2762 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_paradrop_Console::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_paradrop_Console::Created, COMDAT
; _this$ = ecx

; 2723 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2724 : 	//Console_Output ( "Created dp88_AR_paradrop_Console\n" );
; 2725 : 	last_triggered = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2726 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_paradrop_Console@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_paradrop_Console::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_DemoTruck@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_DemoTruck@@UAEPAXI@Z PROC			; dp88_AR_DemoTruck::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_DemoTruck@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_DemoTruck@@UAEPAXI@Z ENDP			; dp88_AR_DemoTruck::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_DemoTruck@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_DemoTruck@@UAE@XZ PROC			; dp88_AR_DemoTruck::~dp88_AR_DemoTruck, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_DemoTruck@@UAE@XZ ENDP			; dp88_AR_DemoTruck::~dp88_AR_DemoTruck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AR_DemoTruck@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_DemoTruck@@QAE@XZ PROC			; dp88_AR_DemoTruck::dp88_AR_DemoTruck, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_DemoTruck@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_DemoTruck@@QAE@XZ ENDP			; dp88_AR_DemoTruck::dp88_AR_DemoTruck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Detonate@dp88_AR_DemoTruck@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv236 = -156						; size = 4
tv353 = -152						; size = 4
tv348 = -146						; size = 1
tv341 = -145						; size = 1
tv337 = -144						; size = 4
tv338 = -140						; size = 4
$T1 = -136						; size = 12
$T2 = -120						; size = 12
$T3 = -108						; size = 12
$T4 = -92						; size = 12
$T5 = -80						; size = 12
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Detonate@dp88_AR_DemoTruck@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_DemoTruck::Detonate, COMDAT
; _this$ = ecx

; 2666 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2667 : 	if ( canDetonate )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	$LN1@Detonate

; 2668 : 	{
; 2669 : 		canDetonate = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 0

; 2670 : 
; 2671 : 		// Create the explosion
; 2672 : 		if ( pilotID != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	$LN4@Detonate

; 2673 : 		{
; 2674 : 			Commands->Create_Explosion ( Get_Parameter ( "explosionPreset" ), 
; 2675 : 				Commands->Get_Position ( Commands->Find_Object( pilotID ) ), 
; 2676 : 				Commands->Find_Object( pilotID )
; 2677 : 			);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BA@PJMIDBDG@explosionPreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+416]
	call	eax
	add	esp, 12					; 0000000cH

; 2678 : 
; 2679 : 			Ranged_Scale_Damage_To_Buildings( 
; 2680 : 				Get_Float_Parameter ( "buildingDamageStrength" ), 
; 2681 : 				Get_Parameter ( "buildingDamageWarhead" ), 
; 2682 : 				Commands->Get_Position( Commands->Find_Object( pilotID ) ), 
; 2683 : 				Get_Float_Parameter ( "buildingDamageRange" ), 
; 2684 : 				Commands->Find_Object( pilotID )
; 2685 : 			);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0BE@OCAKJEGI@buildingDamageRange?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	push	OFFSET ??_C@_0BG@KMGGAABJ@buildingDamageWarhead?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	push	OFFSET ??_C@_0BH@FCFHJPEP@buildingDamageStrength?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Ranged_Scale_Damage_To_Buildings@@YAXMPBDVVector3@@MPAVScriptableGameObj@@@Z ; Ranged_Scale_Damage_To_Buildings
	add	esp, 28					; 0000001cH

; 2686 : 		}
; 2687 : 		
; 2688 : 		else

	jmp	$LN3@Detonate
$LN4@Detonate:

; 2689 : 		{
; 2690 : 			Commands->Create_Explosion ( Get_Parameter ( "explosionPreset" ), 
; 2691 : 				Commands->Get_Position ( obj ), 
; 2692 : 				obj
; 2693 : 			);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BA@PJMIDBDG@explosionPreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+416]
	call	eax
	add	esp, 12					; 0000000cH

; 2694 : 
; 2695 : 
; 2696 : 			Ranged_Scale_Damage_To_Buildings( 
; 2697 : 				Get_Float_Parameter ( "buildingDamageStrength" ), 
; 2698 : 				Get_Parameter ( "buildingDamageWarhead" ), 
; 2699 : 				Commands->Get_Position( obj ), 
; 2700 : 				Get_Float_Parameter ( "buildingDamageRange" ), 
; 2701 : 				obj
; 2702 : 			);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@OCAKJEGI@buildingDamageRange?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	push	OFFSET ??_C@_0BG@KMGGAABJ@buildingDamageWarhead?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	push	OFFSET ??_C@_0BH@FCFHJPEP@buildingDamageStrength?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Ranged_Scale_Damage_To_Buildings@@YAXMPBDVVector3@@MPAVScriptableGameObj@@@Z ; Ranged_Scale_Damage_To_Buildings
	add	esp, 28					; 0000001cH
$LN3@Detonate:

; 2703 : 		}
; 2704 : 
; 2705 : 		// Create cinematic if nessicary
; 2706 : 		if ( strcmp ( Get_Parameter( "cinematicPreset" ), "null" ) != 0 )

	mov	DWORD PTR tv338[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BA@FNJCPKOH@cinematicPreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv337[ebp], eax
$LL8@Detonate:
	mov	eax, DWORD PTR tv337[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv341[ebp], cl
	mov	edx, DWORD PTR tv338[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN9@Detonate
	cmp	BYTE PTR tv341[ebp], 0
	je	SHORT $LN10@Detonate
	mov	eax, DWORD PTR tv337[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv348[ebp], cl
	mov	edx, DWORD PTR tv338[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN9@Detonate
	add	DWORD PTR tv337[ebp], 2
	add	DWORD PTR tv338[ebp], 2
	cmp	BYTE PTR tv348[ebp], 0
	jne	SHORT $LL8@Detonate
$LN10@Detonate:
	mov	DWORD PTR tv353[ebp], 0
	jmp	SHORT $LN11@Detonate
$LN9@Detonate:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv353[ebp], eax
$LN11@Detonate:
	mov	ecx, DWORD PTR tv353[ebp]
	mov	DWORD PTR tv236[ebp], ecx
	cmp	DWORD PTR tv236[ebp], 0
	je	SHORT $LN2@Detonate

; 2707 : 			Commands->Create_Object ( Get_Parameter ( "cinematicPreset" ), Commands->Get_Position ( obj ) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BA@FNJCPKOH@cinematicPreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
$LN2@Detonate:

; 2708 : 
; 2709 : 		// Kill driver and truck - can't kill driver instantly as truck protects them
; 2710 : 		Commands->Apply_Damage ( obj, 5000.00, "Death", obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_05PGGAFPFO@Death?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+616]
	call	eax
	add	esp, 16					; 00000010H

; 2711 : 		if ( pilotID != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@Detonate

; 2712 : 			Commands->Attach_Script( Commands->Find_Object( pilotID ),"RA_DriverDeath", "0" );

	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	OFFSET ??_C@_0P@JMLOMBPP@RA_DriverDeath?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 12					; 0000000cH
$LN1@Detonate:

; 2713 : 	}
; 2714 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detonate@dp88_AR_DemoTruck@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_DemoTruck::Detonate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Damaged@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AR_DemoTruck::Damaged, COMDAT
; _this$ = ecx

; 2659 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2660 : 	// If we damaged ourselves thats the trigger to detonate
; 2661 : 	if ( Commands->Get_ID ( damager ) == Commands->Get_ID ( Get_Vehicle_Driver ( obj ) ) && amount == 0.0 )

	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN1@Damaged
	cvtss2sd xmm0, DWORD PTR _amount$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Damaged

; 2662 : 		Detonate( obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detonate@dp88_AR_DemoTruck@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_DemoTruck::Detonate
$LN1@Damaged:

; 2663 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AR_DemoTruck::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AR_DemoTruck::Killed, COMDAT
; _this$ = ecx

; 2654 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2655 : 	Detonate( obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detonate@dp88_AR_DemoTruck@@AAEXPAVScriptableGameObj@@@Z ; dp88_AR_DemoTruck::Detonate

; 2656 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_DemoTruck::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_AR_DemoTruck::Custom, COMDAT
; _this$ = ecx

; 2637 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2638 : 	// Look for vehicle entry
; 2639 : 	if ( type == CUSTOM_EVENT_VEHICLE_ENTERED )

	cmp	DWORD PTR _type$[ebp], 1000000028	; 3b9aca1cH
	jne	SHORT $LN5@Custom

; 2640 : 	{
; 2641 : 		if ( pilotID == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@Custom

; 2642 : 			pilotID = Commands->Get_ID(sender);

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN4@Custom:

; 2643 : 	}

	jmp	SHORT $LN6@Custom
$LN5@Custom:

; 2644 : 
; 2645 : 	// Look for vehicle exit
; 2646 : 	else if ( type == CUSTOM_EVENT_VEHICLE_EXITED )

	cmp	DWORD PTR _type$[ebp], 1000000029	; 3b9aca1dH
	jne	SHORT $LN6@Custom

; 2647 : 	{
; 2648 : 		if ( Commands->Get_ID(sender) == pilotID && canDetonate )

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+28]
	jne	SHORT $LN6@Custom
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN6@Custom

; 2649 : 			pilotID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN6@Custom:

; 2650 : 	}
; 2651 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_AR_DemoTruck::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_DemoTruck::Created, COMDAT
; _this$ = ecx

; 2630 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2631 : 	//Console_Output ( "Created dp88_AR_DemoTruck\n" );
; 2632 : 	pilotID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2633 : 	canDetonate = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 1

; 2634 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_DemoTruck@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_DemoTruck::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_RemoteControlVehicle@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_RemoteControlVehicle@@UAEPAXI@Z PROC		; dp88_RemoteControlVehicle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_RemoteControlVehicle@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_RemoteControlVehicle@@UAEPAXI@Z ENDP		; dp88_RemoteControlVehicle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_RemoteControlVehicle@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_RemoteControlVehicle@@UAE@XZ PROC		; dp88_RemoteControlVehicle::~dp88_RemoteControlVehicle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_RemoteControlVehicle@@UAE@XZ ENDP		; dp88_RemoteControlVehicle::~dp88_RemoteControlVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_RemoteControlVehicle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_RemoteControlVehicle@@QAE@XZ PROC		; dp88_RemoteControlVehicle::dp88_RemoteControlVehicle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_RemoteControlVehicle@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_RemoteControlVehicle@@QAE@XZ ENDP		; dp88_RemoteControlVehicle::dp88_RemoteControlVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_RemoteControlVehicle::Killed, COMDAT
; _this$ = ecx

; 2617 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2618 : 	if ( consoleID != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@Killed

; 2619 : 		Commands->Send_Custom_Event( obj, Commands->Find_Object( consoleID ), CUSTOM_REMOTECONTROL_DESTROYED, 1, 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	-637272061				; da040003H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN1@Killed:

; 2620 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_RemoteControlVehicle::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_RemoteControlVehicle::Custom, COMDAT
; _this$ = ecx

; 2583 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2584 : 	// Look for vehicle entry
; 2585 : 	if ( type == CUSTOM_EVENT_VEHICLE_ENTERED )

	cmp	DWORD PTR _type$[ebp], 1000000028	; 3b9aca1cH
	jne	SHORT $LN8@Custom

; 2586 : 	{
; 2587 : 		if ( pilotID == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN7@Custom

; 2588 : 			pilotID = Commands->Get_ID(sender);

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
$LN7@Custom:

; 2589 : 	}

	jmp	$LN1@Custom
$LN8@Custom:

; 2590 : 
; 2591 : 	// Look for vehicle exit
; 2592 : 	else if ( type == CUSTOM_EVENT_VEHICLE_EXITED )

	cmp	DWORD PTR _type$[ebp], 1000000029	; 3b9aca1dH
	jne	SHORT $LN5@Custom

; 2593 : 	{
; 2594 : 		if ( Commands->Get_ID(sender) == pilotID )

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+32]
	jne	SHORT $LN3@Custom

; 2595 : 		{
; 2596 : 			pilotID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2597 : 
; 2598 : 			// Report driver exit to our console
; 2599 : 			if ( consoleID != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@Custom

; 2600 : 				Commands->Send_Custom_Event( obj, Commands->Find_Object( consoleID ), CUSTOM_REMOTECONTROL_DRIVEREXIT, 1, 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	-637272062				; da040002H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN3@Custom:

; 2601 : 		}
; 2602 : 	}

	jmp	SHORT $LN1@Custom
$LN5@Custom:

; 2603 : 
; 2604 : 	// Look for console reporting and, if we don't already have a console, send an ACK
; 2605 : 	// to accept them as our controller
; 2606 : 	else if ( type == CUSTOM_REMOTECONTROL_CONSOLEID && consoleID == 0 )

	cmp	DWORD PTR _type$[ebp], -637272060	; da040004H
	jne	SHORT $LN1@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@Custom

; 2607 : 	{
; 2608 : 		//Console_Output ( "[%d:%s:%s] Got console, sending ACK\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2609 : 		consoleID = Commands->Get_ID ( sender );

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 2610 : 		Commands->Send_Custom_Event(obj, sender, CUSTOM_REMOTECONTROL_CONSOLEACK, 1 ,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	-637272059				; da040005H
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN1@Custom:

; 2611 : 	}
; 2612 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_RemoteControlVehicle::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_RemoteControlVehicle::Created, COMDAT
; _this$ = ecx

; 2568 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2569 : 	//Console_Output ( "[%d:%s:%s] Created - remoteControlID %d\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name(), Get_Int_Parameter("remoteControlID") );
; 2570 : 
; 2571 : 	consoleID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2572 : 	pilotID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2573 : 
; 2574 : 	Commands->Enable_Vehicle_Transitions(obj, false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8

; 2575 : 
; 2576 : 	// Notify all consoles of our creation and disable transitions by default
; 2577 : 	Send_Custom_Event_To_Objects_With_Script(obj, "dp88_RemoteControlConsole", CUSTOM_REMOTECONTROL_CREATED, Get_Int_Parameter("remoteControlID"), 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BA@MCGHCFJE@remoteControlID?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	-637272063				; da040001H
	push	OFFSET ??_C@_0BK@EJNIJBHG@dp88_RemoteControlConsole?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Send_Custom_Event_To_Objects_With_Script@@YAXPAVScriptableGameObj@@PBDHHM@Z ; Send_Custom_Event_To_Objects_With_Script
	add	esp, 20					; 00000014H

; 2578 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_RemoteControlVehicle@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_RemoteControlVehicle::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_RemoteControlConsole@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_RemoteControlConsole@@UAEPAXI@Z PROC		; dp88_RemoteControlConsole::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_RemoteControlConsole@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_RemoteControlConsole@@UAEPAXI@Z ENDP		; dp88_RemoteControlConsole::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_RemoteControlConsole@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_RemoteControlConsole@@UAE@XZ PROC		; dp88_RemoteControlConsole::~dp88_RemoteControlConsole, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_RemoteControlConsole@@UAE@XZ ENDP		; dp88_RemoteControlConsole::~dp88_RemoteControlConsole
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ??0dp88_RemoteControlConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_RemoteControlConsole@@QAE@XZ PROC		; dp88_RemoteControlConsole::dp88_RemoteControlConsole, COMDAT
; _this$ = ecx

; 783  :   dp88_RemoteControlConsole() : m_pLoopedAnimCtrl(0) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_RemoteControlConsole@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_RemoteControlConsole@@QAE@XZ ENDP		; dp88_RemoteControlConsole::dp88_RemoteControlConsole
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_bPokable$ = -5						; size = 1
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_RemoteControlConsole::UpdateAnimation, COMDAT
; _this$ = ecx

; 2533 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2534 :   bool bPokable = false;

	mov	BYTE PTR _bPokable$[ebp], 0

; 2535 : 
; 2536 :   if (!m_bEnabled)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	jne	SHORT $LN8@UpdateAnim

; 2537 :     m_pLoopedAnimCtrl->PlayAnimation(Get_Parameter("animationName"), Get_Int_Parameter("animFrameDisabled1"), Get_Int_Parameter("animFrameDisabled2"));

	push	0
	push	OFFSET ??_C@_0BD@DNBLCDKG@animFrameDisabled2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0BD@BGDGHAGF@animFrameDisabled1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0O@MKCKBGNB@animationName?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation
	jmp	$LN7@UpdateAnim
$LN8@UpdateAnim:

; 2538 : 
; 2539 :   else if (NULL != pilotID)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN6@UpdateAnim

; 2540 :     m_pLoopedAnimCtrl->PlayAnimation(Get_Parameter("animationName"), Get_Int_Parameter("animFrameActive1"), Get_Int_Parameter("animFrameActive2"));

	push	0
	push	OFFSET ??_C@_0BB@BEJFHLAJ@animFrameActive2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0BB@DPLICIMK@animFrameActive1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0O@MKCKBGNB@animationName?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation
	jmp	$LN7@UpdateAnim
$LN6@UpdateAnim:

; 2541 : 
; 2542 :   else if (NULL != vehicleID)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN4@UpdateAnim

; 2543 :   {
; 2544 :     m_pLoopedAnimCtrl->PlayAnimation(Get_Parameter("animationName"), Get_Int_Parameter("animFrameIdle1"), Get_Int_Parameter("animFrameIdle2"));

	push	0
	push	OFFSET ??_C@_0P@CIHEFPAE@animFrameIdle2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0P@DFJAMMH@animFrameIdle1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0O@MKCKBGNB@animationName?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation

; 2545 :     bPokable = true;

	mov	BYTE PTR _bPokable$[ebp], 1
	jmp	SHORT $LN7@UpdateAnim
$LN4@UpdateAnim:

; 2546 :   }
; 2547 : 
; 2548 :   else if (m_nChargeTime > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	SHORT $LN2@UpdateAnim

; 2549 :     m_pLoopedAnimCtrl->PlayAnimation(Get_Parameter("animationName"), Get_Int_Parameter("animFrameCharging1"), Get_Int_Parameter("animFrameCharging2"));

	push	0
	push	OFFSET ??_C@_0BD@ONHOLLAC@animFrameCharging2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0BD@MGFDOIMB@animFrameCharging1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0O@MKCKBGNB@animationName?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation

; 2550 : 
; 2551 :   else

	jmp	SHORT $LN7@UpdateAnim
$LN2@UpdateAnim:

; 2552 :   {
; 2553 :     m_pLoopedAnimCtrl->PlayAnimation(Get_Parameter("animationName"), Get_Int_Parameter("animFrameAvailable1"), Get_Int_Parameter("animFrameAvailable2"));

	push	0
	push	OFFSET ??_C@_0BE@NGBPOKKD@animFrameAvailable2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0BE@PNDCLJGA@animFrameAvailable1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0O@MKCKBGNB@animationName?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation

; 2554 :     bPokable = true;

	mov	BYTE PTR _bPokable$[ebp], 1
$LN7@UpdateAnim:

; 2555 :   }
; 2556 : 
; 2557 :   Commands->Enable_HUD_Pokable_Indicator(obj, bPokable);

	movzx	eax, BYTE PTR _bPokable$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+780]
	call	eax
	add	esp, 8

; 2558 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_RemoteControlConsole::UpdateAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?DestroyDummy@dp88_RemoteControlConsole@@AAEXXZ
_TEXT	SEGMENT
_dummy$1 = -8						; size = 4
_this$ = -4						; size = 4
?DestroyDummy@dp88_RemoteControlConsole@@AAEXXZ PROC	; dp88_RemoteControlConsole::DestroyDummy, COMDAT
; _this$ = ecx

; 2517 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2518 :   if (NULL != m_pilotDummyID)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN3@DestroyDum

; 2519 :   {
; 2520 :     GameObject* dummy = Commands->Find_Object(m_pilotDummyID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _dummy$1[ebp], eax

; 2521 :     m_pilotDummyID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 2522 : 
; 2523 :     // Destroy the dummy object rather than killing it - this prevents dp88_linkHealth from also
; 2524 :     // killing the pilot
; 2525 :     if ( dummy )

	cmp	DWORD PTR _dummy$1[ebp], 0
	je	SHORT $LN3@DestroyDum

; 2526 :       Commands->Destroy_Object(dummy);

	mov	eax, DWORD PTR _dummy$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN3@DestroyDum:

; 2527 :   }
; 2528 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyDummy@dp88_RemoteControlConsole@@AAEXXZ ENDP	; dp88_RemoteControlConsole::DestroyDummy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?CreateDummy@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@VVector3@@M@Z
_TEXT	SEGMENT
_physDummy$1 = -24					; size = 4
_pilotIdString$2 = -20					; size = 12
_dummy$ = -8						; size = 4
_this$ = -4						; size = 4
_pilot$ = 8						; size = 4
_position$ = 12						; size = 12
_facing$ = 24						; size = 4
?CreateDummy@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@VVector3@@M@Z PROC ; dp88_RemoteControlConsole::CreateDummy, COMDAT
; _this$ = ecx

; 2481 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2482 :   GameObject* dummy = Commands->Create_Object ( "Invisible_Object_2", position );

	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@CEGEOPPJ@Invisible_Object_2?$AA@
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _dummy$[ebp], eax

; 2483 :   if ( dummy )

	cmp	DWORD PTR _dummy$[ebp], 0
	je	$LN1@CreateDumm

; 2484 :   {
; 2485 :     m_pilotDummyID = Commands->Get_ID(dummy);

	mov	eax, DWORD PTR _dummy$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 2486 :     Commands->Set_Facing(dummy, facing);

	push	ecx
	movss	xmm0, DWORD PTR _facing$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _dummy$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8

; 2487 :     pilotDummyPos = position;   // Used to put the pilot back in his original location

	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 2488 : 
; 2489 :     // Clone health/armour
; 2490 :     Set_Skin(dummy, Get_Skin(pilot) );

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	call	?Get_Skin@@YAPBDPAVScriptableGameObj@@@Z ; Get_Skin
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	call	?Set_Skin@@YAXPAVScriptableGameObj@@PBD@Z ; Set_Skin
	add	esp, 8

; 2491 :     Commands->Set_Shield_Type(dummy, Get_Shield_Type(pilot) );

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	call	?Get_Shield_Type@@YAPBDPAVScriptableGameObj@@@Z ; Get_Shield_Type
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+244]
	call	eax
	add	esp, 8

; 2492 :     Set_Max_Health(dummy, Commands->Get_Max_Health(pilot) );

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+224]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dummy$[ebp]
	push	eax
	call	?Set_Max_Health@@YAXPAVScriptableGameObj@@M@Z ; Set_Max_Health
	add	esp, 8

; 2493 :     Set_Max_Shield_Strength(dummy, Commands->Get_Max_Shield_Strength(pilot) );

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+236]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dummy$[ebp]
	push	eax
	call	?Set_Max_Shield_Strength@@YAXPAVScriptableGameObj@@M@Z ; Set_Max_Shield_Strength
	add	esp, 8

; 2494 :     Commands->Set_Health(dummy, Commands->Get_Health(pilot) );

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dummy$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	add	esp, 8

; 2495 :     Commands->Set_Shield_Strength(dummy, Commands->Get_Shield_Strength(pilot) );

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dummy$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	add	esp, 8

; 2496 :     Set_Object_Type(dummy, Get_Object_Type(pilot));

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	call	?Set_Object_Type@@YAXPAVScriptableGameObj@@H@Z ; Set_Object_Type
	add	esp, 8

; 2497 : 
; 2498 :     // Link dummy and pilot health and armour
; 2499 :     char pilotIdString[12];
; 2500 :     sprintf ( pilotIdString, "%d", Commands->Get_ID(pilot) );

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _pilotIdString$2[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 2501 :     Attach_Script_Once ( dummy, "dp88_linkHealth", pilotIdString );

	lea	eax, DWORD PTR _pilotIdString$2[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@
	mov	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	call	?Attach_Script_Once@@YAXPAVScriptableGameObj@@PBD1@Z ; Attach_Script_Once
	add	esp, 12					; 0000000cH

; 2502 : 
; 2503 :     // Clone player model onto dummy and set a pose
; 2504 :     Commands->Set_Model(dummy, Get_Model(pilot));

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	call	?Get_Model@@YAPBDPAVScriptableGameObj@@@Z ; Get_Model
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+160]
	call	eax
	add	esp, 8

; 2505 :     Commands->Set_Animation(dummy, "S_A_HUMAN.H_A_A0A0", true, NULL, 0, 0, false);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	1
	push	OFFSET ??_C@_0BD@MJLACLOO@S_A_HUMAN?4H_A_A0A0?$AA@
	mov	eax, DWORD PTR _dummy$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+164]
	call	edx
	add	esp, 28					; 0000001cH

; 2506 :     
; 2507 :     // Setup soldier collision mode on the dummy
; 2508 :     PhysicalGameObj *physDummy = dummy->As_PhysicalGameObj();

	mov	eax, DWORD PTR _dummy$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _dummy$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	DWORD PTR _physDummy$1[ebp], eax

; 2509 :     if (NULL != physDummy)

	cmp	DWORD PTR _physDummy$1[ebp], 0
	je	SHORT $LN1@CreateDumm

; 2510 :       physDummy->Peek_Physical_Object()->Set_Collision_Group(SOLDIER_COLLISION_GROUP);

	push	6
	mov	ecx, DWORD PTR _physDummy$1[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Set_Collision_Group@PhysClass@@QAEXW4Collision_Group_Type@@@Z ; PhysClass::Set_Collision_Group
$LN1@CreateDumm:

; 2511 :   }
; 2512 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?CreateDummy@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@VVector3@@M@Z ENDP ; dp88_RemoteControlConsole::CreateDummy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?HandleDriverExit@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z
_TEXT	SEGMENT
tv90 = -76						; size = 4
_physPilot$1 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_pilot$ = 12						; size = 4
_vehicle$ = 16						; size = 4
?HandleDriverExit@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z PROC ; dp88_RemoteControlConsole::HandleDriverExit, COMDAT
; _this$ = ecx

; 2442 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2443 :   if (pilot)

	cmp	DWORD PTR _pilot$[ebp], 0
	je	$LN4@HandleDriv

; 2444 :   {
; 2445 :     Commands->Set_Position ( pilot, pilotDummyPos );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _pilot$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8

; 2446 : 
; 2447 :     // Make driver visible and collidable again
; 2448 :     Commands->Set_Is_Rendered ( pilot, true );

	push	1
	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+628]
	call	edx
	add	esp, 8

; 2449 : 
; 2450 :     PhysicalGameObj *physPilot = pilot->As_PhysicalGameObj();

	mov	eax, DWORD PTR _pilot$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pilot$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	DWORD PTR _physPilot$1[ebp], eax

; 2451 :     if (NULL != physPilot)

	cmp	DWORD PTR _physPilot$1[ebp], 0
	je	SHORT $LN3@HandleDriv

; 2452 :     {
; 2453 :       physPilot->Peek_Physical_Object()->Set_Collision_Group(m_pilotCachedCollisionGroup);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	ecx, DWORD PTR _physPilot$1[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Set_Collision_Group@PhysClass@@QAEXW4Collision_Group_Type@@@Z ; PhysClass::Set_Collision_Group
$LN3@HandleDriv:

; 2454 :     }
; 2455 : 
; 2456 :     Update_Network_Object(pilot);

	cmp	DWORD PTR _pilot$[ebp], 0
	je	SHORT $LN7@HandleDriv
	mov	eax, DWORD PTR _pilot$[ebp]
	add	eax, 8
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN8@HandleDriv
$LN7@HandleDriv:
	mov	DWORD PTR tv90[ebp], 0
$LN8@HandleDriv:
	mov	ecx, DWORD PTR tv90[ebp]
	push	ecx
	call	DWORD PTR ?Update_Network_Object@@3P6AXPAVNetworkObjectClass@@@ZA ; Update_Network_Object
	add	esp, 4
$LN4@HandleDriv:

; 2457 :   }
; 2458 : 
; 2459 : 	// If the vehicle is still alive set it to its idle state
; 2460 : 	if ( vehicle )

	cmp	DWORD PTR _vehicle$[ebp], 0
	je	SHORT $LN2@HandleDriv

; 2461 : 	{
; 2462 : 		// Set team to correct setting (so it gives points for being damaged)
; 2463 : 		Set_Object_Type ( vehicle, Get_Int_Parameter("team") );

	push	OFFSET ??_C@_04KADBPNCB@team?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR _vehicle$[ebp]
	push	eax
	call	?Set_Object_Type@@YAXPAVScriptableGameObj@@H@Z ; Set_Object_Type
	add	esp, 8

; 2464 : 
; 2465 : 		// Disable transitions on remote vehicle
; 2466 : 		Commands->Enable_Vehicle_Transitions( vehicle, false );

	push	0
	mov	eax, DWORD PTR _vehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8
$LN2@HandleDriv:

; 2467 : 	}
; 2468 : 
; 2469 :   // Start charging for next use (if applicable)
; 2470 :   if (m_nChargeTime > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	SHORT $LN1@HandleDriv

; 2471 :   {
; 2472 :     Commands->Start_Timer( obj, this, 1.0f, TIMER_REMOTECONTROL_CHARGETICK);

	push	-620494844				; db040004H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN1@HandleDriv:

; 2473 :   }
; 2474 : 
; 2475 :   UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation

; 2476 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HandleDriverExit@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z ENDP ; dp88_RemoteControlConsole::HandleDriverExit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?HandleDriverEnter@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z
_TEXT	SEGMENT
tv146 = -92						; size = 4
$T1 = -84						; size = 12
_physPilot$2 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_pilot$ = 12						; size = 4
_vehicle$ = 16						; size = 4
?HandleDriverEnter@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z PROC ; dp88_RemoteControlConsole::HandleDriverEnter, COMDAT
; _this$ = ecx

; 2409 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2410 :   if (NULL != pilot && NULL != vehicle)

	cmp	DWORD PTR _pilot$[ebp], 0
	je	$LN2@HandleDriv
	cmp	DWORD PTR _vehicle$[ebp], 0
	je	$LN2@HandleDriv

; 2411 :   {
; 2412 :     // Create pilot dummy...
; 2413 :     CreateDummy(pilot, Commands->Get_Position(pilot), Commands->Get_Facing(pilot));

	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _pilot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateDummy@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@VVector3@@M@Z ; dp88_RemoteControlConsole::CreateDummy

; 2414 : 
; 2415 :     Commands->Control_Enable(pilot, true);

	push	1
	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+284]
	call	edx
	add	esp, 8

; 2416 : 
; 2417 :     // Make driver invisible so you don't see them flash on screen when exiting a drone
; 2418 :     Commands->Set_Is_Rendered(pilot, false);

	push	0
	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+628]
	call	edx
	add	esp, 8

; 2419 :     
; 2420 :     // Set the pilot to the uncollidable group so they can't be killed before they are teleported home
; 2421 :     PhysicalGameObj *physPilot = pilot->As_PhysicalGameObj();

	mov	eax, DWORD PTR _pilot$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pilot$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	DWORD PTR _physPilot$2[ebp], eax

; 2422 :     if (NULL != physPilot)

	cmp	DWORD PTR _physPilot$2[ebp], 0
	je	SHORT $LN1@HandleDriv

; 2423 :     {
; 2424 :       m_pilotCachedCollisionGroup = physPilot->Peek_Physical_Object()->Get_Collision_Group();

	mov	ecx, DWORD PTR _physPilot$2[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Get_Collision_Group@PhysClass@@QBE?AW4Collision_Group_Type@@XZ ; PhysClass::Get_Collision_Group
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 2425 :       physPilot->Peek_Physical_Object()->Set_Collision_Group(UNCOLLIDEABLE_GROUP);

	push	1
	mov	ecx, DWORD PTR _physPilot$2[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Set_Collision_Group@PhysClass@@QAEXW4Collision_Group_Type@@@Z ; PhysClass::Set_Collision_Group
$LN1@HandleDriv:

; 2426 :     }
; 2427 : 
; 2428 :     // Update the pilot object and then force them into the vehicle
; 2429 :     Update_Network_Object(pilot);

	cmp	DWORD PTR _pilot$[ebp], 0
	je	SHORT $LN5@HandleDriv
	mov	eax, DWORD PTR _pilot$[ebp]
	add	eax, 8
	mov	DWORD PTR tv146[ebp], eax
	jmp	SHORT $LN6@HandleDriv
$LN5@HandleDriv:
	mov	DWORD PTR tv146[ebp], 0
$LN6@HandleDriv:
	mov	ecx, DWORD PTR tv146[ebp]
	push	ecx
	call	DWORD PTR ?Update_Network_Object@@3P6AXPAVNetworkObjectClass@@@ZA ; Update_Network_Object
	add	esp, 4

; 2430 :     Force_Vehicle_Entry(pilot, vehicle);

	mov	eax, DWORD PTR _vehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pilot$[ebp]
	push	ecx
	call	?Force_Vehicle_Entry@@YAXPAVScriptableGameObj@@0@Z ; Force_Vehicle_Entry
	add	esp, 8

; 2431 : 
; 2432 :     // Play control established sound
; 2433 :     Create_2D_Sound_Player(pilot, Get_Parameter("connectionEstablishedSound"));

	push	OFFSET ??_C@_0BL@JNCLKLPE@connectionEstablishedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pilot$[ebp]
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Player@@3P6AHPAVScriptableGameObj@@PBD@ZA ; Create_2D_Sound_Player
	add	esp, 8

; 2434 : 
; 2435 :     UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation
$LN2@HandleDriv:

; 2436 :   }
; 2437 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HandleDriverEnter@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z ENDP ; dp88_RemoteControlConsole::HandleDriverEnter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?SetEnabled@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@_N@Z
_TEXT	SEGMENT
tv93 = -76						; size = 4
_pilot$1 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_state$ = 12						; size = 1
?SetEnabled@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@_N@Z PROC ; dp88_RemoteControlConsole::SetEnabled, COMDAT
; _this$ = ecx

; 2374 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2375 :   if ( state == m_bEnabled )

	movzx	eax, BYTE PTR _state$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+56]
	cmp	eax, edx
	jne	SHORT $LN4@SetEnabled

; 2376 :     return;

	jmp	$LN5@SetEnabled
$LN4@SetEnabled:

; 2377 : 
; 2378 :   m_bEnabled = state;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _state$[ebp]
	mov	BYTE PTR [eax+56], cl

; 2379 : 
; 2380 :   // If we are no longer enabled evict the driver
; 2381 :   if (!m_bEnabled && NULL != pilotID)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	jne	$LN2@SetEnabled
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	$LN2@SetEnabled

; 2382 :   {
; 2383 :     GameObject* pilot = Commands->Find_Object(pilotID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pilot$1[ebp], eax

; 2384 :     if (NULL != pilot)

	cmp	DWORD PTR _pilot$1[ebp], 0
	je	SHORT $LN2@SetEnabled

; 2385 :     {
; 2386 :       Soldier_Transition_Vehicle(pilot);

	mov	eax, DWORD PTR _pilot$1[ebp]
	push	eax
	call	?Soldier_Transition_Vehicle@@YAXPAVScriptableGameObj@@@Z ; Soldier_Transition_Vehicle
	add	esp, 4

; 2387 :       Create_2D_Sound_Player(pilot, Get_Parameter("consoleOfflineSound"));

	push	OFFSET ??_C@_0BE@GFAECMKC@consoleOfflineSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pilot$1[ebp]
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Player@@3P6AHPAVScriptableGameObj@@PBD@ZA ; Create_2D_Sound_Player
	add	esp, 8

; 2388 : 
; 2389 :       // Force a network update
; 2390 :       Update_Network_Object(pilot);

	cmp	DWORD PTR _pilot$1[ebp], 0
	je	SHORT $LN7@SetEnabled
	mov	eax, DWORD PTR _pilot$1[ebp]
	add	eax, 8
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN8@SetEnabled
$LN7@SetEnabled:
	mov	DWORD PTR tv93[ebp], 0
$LN8@SetEnabled:
	mov	ecx, DWORD PTR tv93[ebp]
	push	ecx
	call	DWORD PTR ?Update_Network_Object@@3P6AXPAVNetworkObjectClass@@@ZA ; Update_Network_Object
	add	esp, 4

; 2391 : 
; 2392 :       // Can't do this instantly or the game crashes. Yay!
; 2393 :       Commands->Start_Timer(obj, this, 0.5, TIMER_REMOTECONTROL_DRIVEREXIT);

	push	-620494845				; db040003H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@SetEnabled:

; 2394 :     }
; 2395 :   }
; 2396 : 
; 2397 :   // Start charging for next use (if applicable)
; 2398 :   if (m_nChargeTime > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	SHORT $LN1@SetEnabled

; 2399 :   {
; 2400 :     Commands->Start_Timer( obj, this, 1.0f, TIMER_REMOTECONTROL_CHARGETICK);

	push	-620494844				; db040004H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN1@SetEnabled:

; 2401 :   }
; 2402 : 
; 2403 :   UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation
$LN5@SetEnabled:

; 2404 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetEnabled@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@_N@Z ENDP ; dp88_RemoteControlConsole::SetEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_pilot$1 = -16						; size = 4
_vehicle$2 = -12					; size = 4
_pilot$3 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_RemoteControlConsole::Timer_Expired, COMDAT
; _this$ = ecx

; 2311 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2312 : 	if ( number == TIMER_REMOTECONTROL_TIMEOUT && vehicleID == 0 )

	cmp	DWORD PTR _number$[ebp], -620494847	; db040001H
	jne	$LN13@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN13@Timer_Expi

; 2313 : 	{
; 2314 : 		//Console_Output ( "[%d:%s:%s] Purchase timed out, refunding money and freeing pilot\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2315 : 
; 2316 : 		GameObject* pilot = Commands->Find_Object(pilotID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pilot$3[ebp], eax

; 2317 : 		if ( pilot )

	cmp	DWORD PTR _pilot$3[ebp], 0
	je	SHORT $LN12@Timer_Expi

; 2318 : 		{
; 2319 : 			Commands->Control_Enable(pilot, true);

	push	1
	mov	eax, DWORD PTR _pilot$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+284]
	call	edx
	add	esp, 8

; 2320 : 			Commands->Give_Money(pilot, (float)(Get_Int_Parameter("cost")), 0);

	push	0
	push	OFFSET ??_C@_04JJOOIINB@cost?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pilot$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+644]
	call	edx
	add	esp, 12					; 0000000cH
$LN12@Timer_Expi:

; 2321 : 		}
; 2322 : 		pilotID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2323 : 
; 2324 :     UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation
	jmp	$LN1@Timer_Expi
$LN13@Timer_Expi:

; 2325 : 	}
; 2326 : 
; 2327 : 
; 2328 : 	else if ( number == TIMER_REMOTECONTROL_DRIVERENTER )

	cmp	DWORD PTR _number$[ebp], -620494846	; db040002H
	jne	SHORT $LN10@Timer_Expi

; 2329 : 	{
; 2330 : 		//Console_Output ( "[%d:%s:%s] Transitioning driver into vehicle\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2331 : 		GameObject* vehicle = Commands->Find_Object(vehicleID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _vehicle$2[ebp], eax

; 2332 : 		GameObject* pilot = Commands->Find_Object(pilotID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pilot$1[ebp], eax

; 2333 : 		if (pilot)

	cmp	DWORD PTR _pilot$1[ebp], 0
	je	SHORT $LN9@Timer_Expi

; 2334 : 		{
; 2335 : 			HandleDriverEnter(obj, pilot, vehicle);

	mov	eax, DWORD PTR _vehicle$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pilot$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleDriverEnter@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z ; dp88_RemoteControlConsole::HandleDriverEnter

; 2336 : 		}
; 2337 : 		else	// This should never actually happen... but just in case...

	jmp	SHORT $LN8@Timer_Expi
$LN9@Timer_Expi:

; 2338 : 		{
; 2339 : 			Commands->Enable_Vehicle_Transitions(vehicle, false);

	push	0
	mov	eax, DWORD PTR _vehicle$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8

; 2340 : 			pilotID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2341 : 			UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation
$LN8@Timer_Expi:

; 2342 : 		}

	jmp	$LN1@Timer_Expi
$LN10@Timer_Expi:

; 2343 : 	}
; 2344 : 
; 2345 : 
; 2346 : 	// This can be called for the vehicle being destroyed OR the console becoming disabled
; 2347 : 	else if ( number == TIMER_REMOTECONTROL_DRIVEREXIT )

	cmp	DWORD PTR _number$[ebp], -620494845	; db040003H
	jne	SHORT $LN6@Timer_Expi

; 2348 : 	{
; 2349 : 		DestroyDummy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DestroyDummy@dp88_RemoteControlConsole@@AAEXXZ ; dp88_RemoteControlConsole::DestroyDummy

; 2350 : 		HandleDriverExit ( obj, Commands->Find_Object(pilotID), Commands->Find_Object(vehicleID) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleDriverExit@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z ; dp88_RemoteControlConsole::HandleDriverExit

; 2351 : 		pilotID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	jmp	SHORT $LN1@Timer_Expi
$LN6@Timer_Expi:

; 2352 : 	}
; 2353 : 
; 2354 : 
; 2355 : 	// Count down tick for charge time
; 2356 : 	else if ( number == TIMER_REMOTECONTROL_CHARGETICK )

	cmp	DWORD PTR _number$[ebp], -620494844	; db040004H
	jne	SHORT $LN1@Timer_Expi

; 2357 : 	{
; 2358 : 		if ( m_bEnabled )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN1@Timer_Expi

; 2359 : 		{
; 2360 : 			m_nChargeTime--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 2361 : 			if ( m_nChargeTime > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	SHORT $LN2@Timer_Expi

; 2362 : 				Commands->Start_Timer( obj, this, 1.0f, TIMER_REMOTECONTROL_CHARGETICK);

	push	-620494844				; db040004H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 2363 : 			else

	jmp	SHORT $LN1@Timer_Expi
$LN2@Timer_Expi:

; 2364 : 			{
; 2365 :         UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation
$LN1@Timer_Expi:

; 2366 : 			}
; 2367 : 		}
; 2368 : 	}
; 2369 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_RemoteControlConsole::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_RemoteControlConsole::Custom, COMDAT
; _this$ = ecx

; 2242 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2243 : 	//Console_Output ( "[%d:%s:%s] Custom %d - %d\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name(), type, param );
; 2244 : 	if ( type == CUSTOM_REMOTECONTROL_CREATED && param == Get_Int_Parameter("remoteControlID") && vehicleID == NULL && pilotID != NULL )

	cmp	DWORD PTR _type$[ebp], -637272063	; da040001H
	jne	SHORT $LN13@Custom
	push	OFFSET ??_C@_0BA@MCGHCFJE@remoteControlID?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	DWORD PTR _param$[ebp], eax
	jne	SHORT $LN13@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN13@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN13@Custom

; 2245 : 	{
; 2246 : 		//Console_Output ( "[%d:%s:%s] Sending console ID to unit\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2247 : 
; 2248 : 		// Inform the remote control unit that this is it's console (we do this to prevent multiple
; 2249 : 		// consoles trying to control the same unit if two are created close together)
; 2250 : 		Commands->Send_Custom_Event ( obj, sender, CUSTOM_REMOTECONTROL_CONSOLEID, 0, 0.0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	-637272060				; da040004H
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
	jmp	$LN1@Custom
$LN13@Custom:

; 2251 : 
; 2252 : 		// Wait for the remote control unit to accept this as it's console - it will only accept the
; 2253 : 		// first response it recieves, so we may not hear back from it...
; 2254 : 	}
; 2255 : 
; 2256 : 	else if ( type == CUSTOM_REMOTECONTROL_CONSOLEACK )

	cmp	DWORD PTR _type$[ebp], -637272059	; da040005H
	jne	SHORT $LN11@Custom

; 2257 : 	{
; 2258 : 		//Console_Output ( "[%d:%s:%s] Recieved ACK from unit, establishing control\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2259 : 
; 2260 : 		// The remote control unit has accepted us as it's control console
; 2261 : 		vehicleID = Commands->Get_ID(sender);

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 2262 : 		
; 2263 : 		// Put our pilot in the drivers seat
; 2264 : 		Commands->Enable_Vehicle_Transitions( sender, true );

	push	1
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8

; 2265 : 		Commands->Start_Timer ( obj, this, 0.5, TIMER_REMOTECONTROL_DRIVERENTER );

	push	-620494846				; db040002H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
	jmp	$LN1@Custom
$LN11@Custom:

; 2266 : 	}
; 2267 : 
; 2268 : 	else if ( type == CUSTOM_REMOTECONTROL_DRIVEREXIT )

	cmp	DWORD PTR _type$[ebp], -637272062	; da040002H
	jne	SHORT $LN9@Custom

; 2269 : 	{
; 2270 :     DestroyDummy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DestroyDummy@dp88_RemoteControlConsole@@AAEXXZ ; dp88_RemoteControlConsole::DestroyDummy

; 2271 :     HandleDriverExit ( obj, Commands->Find_Object(pilotID), sender );

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleDriverExit@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@00@Z ; dp88_RemoteControlConsole::HandleDriverExit

; 2272 :     pilotID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	jmp	$LN1@Custom
$LN9@Custom:

; 2273 : 	}
; 2274 : 
; 2275 : 	else if ( type == CUSTOM_REMOTECONTROL_DESTROYED )

	cmp	DWORD PTR _type$[ebp], -637272061	; da040003H
	jne	$LN7@Custom

; 2276 : 	{
; 2277 : 		//Console_Output ( "[%d:%s:%s] Remote control unit was destroyed\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2278 : 
; 2279 : 		vehicleID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2280 : 
; 2281 : 		// Start timer to return the pilot (if we do it immediately the game will crash...)
; 2282 : 		if (NULL != pilotID)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN6@Custom

; 2283 : 			Commands->Start_Timer ( obj, this, 0.5, TIMER_REMOTECONTROL_DRIVEREXIT );

	push	-620494845				; db040003H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN6@Custom:

; 2284 : 
; 2285 : 		// Reset charge time
; 2286 : 		m_nChargeTime	= Get_Int_Parameter("chargeTime");

	push	OFFSET ??_C@_0L@PPADADDF@chargeTime?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 2287 : 
; 2288 : 		// Start charge tick timer if necessary and set initial animation frames
; 2289 : 		if (m_bEnabled && m_nChargeTime > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN5@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	SHORT $LN5@Custom

; 2290 : 		{
; 2291 : 			Commands->Start_Timer( obj, this, 1.0f, TIMER_REMOTECONTROL_CHARGETICK);

	push	-620494844				; db040004H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN5@Custom:

; 2292 : 		}
; 2293 :     
; 2294 :     UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation
	jmp	SHORT $LN1@Custom
$LN7@Custom:

; 2295 : 	}
; 2296 : 
; 2297 : 	else if ( type == CUSTOM_REMOTECONTROL_DISABLED )

	cmp	DWORD PTR _type$[ebp], -637272058	; da040006H
	jne	SHORT $LN3@Custom

; 2298 : 	{
; 2299 : 		SetEnabled(obj, false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEnabled@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@_N@Z ; dp88_RemoteControlConsole::SetEnabled
	jmp	SHORT $LN1@Custom
$LN3@Custom:

; 2300 : 	}
; 2301 : 
; 2302 : 	else if ( type == CUSTOM_REMOTECONTROL_ENABLED )

	cmp	DWORD PTR _type$[ebp], -637272057	; da040007H
	jne	SHORT $LN1@Custom

; 2303 : 	{
; 2304 : 		SetEnabled(obj, true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEnabled@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@_N@Z ; dp88_RemoteControlConsole::SetEnabled
$LN1@Custom:

; 2305 : 	}
; 2306 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_RemoteControlConsole::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Poked@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_vehicle$1 = -16					; size = 4
_cost$2 = -12						; size = 4
_team$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_poker$ = 12						; size = 4
?Poked@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_RemoteControlConsole::Poked, COMDAT
; _this$ = ecx

; 2152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2153 : 	//Console_Output ( "[%d:%s:%s] Poked\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2154 : 
; 2155 : 	// Check the team of the poker
; 2156 : 	int team = Get_Int_Parameter("team");

	push	OFFSET ??_C@_04KADBPNCB@team?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR _team$[ebp], eax

; 2157 : 	if ( team != 2 && Get_Object_Type(poker) != team )

	cmp	DWORD PTR _team$[ebp], 2
	je	SHORT $LN11@Poked
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	eax, DWORD PTR _team$[ebp]
	je	SHORT $LN11@Poked

; 2158 : 	{
; 2159 : 		//Console_Output ( "[%d:%s:%s] Console access denied\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2160 : 		// Play access denied sound
; 2161 : 		Create_2D_Sound_Player(poker, Get_Parameter("accessDeniedSound") );

	push	OFFSET ??_C@_0BC@ELJPHEC@accessDeniedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Player@@3P6AHPAVScriptableGameObj@@PBD@ZA ; Create_2D_Sound_Player
	add	esp, 8

; 2162 : 		return;

	jmp	$LN12@Poked
$LN11@Poked:

; 2163 : 	}
; 2164 : 
; 2165 : 	// Check if the terminal is offline
; 2166 : 	if ( !m_bEnabled )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	jne	SHORT $LN10@Poked

; 2167 : 	{
; 2168 : 		//Console_Output ( "[%d:%s:%s] Console is offline\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2169 : 		// Play console offline sound
; 2170 : 		Create_2D_Sound_Player(poker, Get_Parameter("consoleOfflineSound") );

	push	OFFSET ??_C@_0BE@GFAECMKC@consoleOfflineSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Player@@3P6AHPAVScriptableGameObj@@PBD@ZA ; Create_2D_Sound_Player
	add	esp, 8

; 2171 : 		return;

	jmp	$LN12@Poked
$LN10@Poked:

; 2172 : 	}
; 2173 : 
; 2174 : 	// Check if the terminal is charging
; 2175 : 	if ( m_nChargeTime > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	SHORT $LN9@Poked

; 2176 : 	{
; 2177 : 		//Console_Output ( "[%d:%s:%s] Console still charging\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2178 : 		// Play console charging sound
; 2179 : 		Create_2D_Sound_Player(poker, Get_Parameter("consoleChargingSound") );

	push	OFFSET ??_C@_0BF@MJKOCOEE@consoleChargingSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Player@@3P6AHPAVScriptableGameObj@@PBD@ZA ; Create_2D_Sound_Player
	add	esp, 8

; 2180 : 		return;

	jmp	$LN12@Poked
$LN9@Poked:

; 2181 : 	}
; 2182 : 
; 2183 : 	// If no vehicle currently exists then create one
; 2184 : 	if ( pilotID == NULL && vehicleID == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	$LN8@Poked
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN8@Poked

; 2185 : 	{
; 2186 : 		//Console_Output ( "[%d:%s:%s] BUYING\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2187 : 		// Try to purchase the unit, will fail if we don't have enough money
; 2188 : 		int cost = Get_Int_Parameter ( "cost" );

	push	OFFSET ??_C@_04JJOOIINB@cost?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR _cost$2[ebp], eax

; 2189 : 		if ( !Purchase_Item(poker, cost ) )

	mov	eax, DWORD PTR _cost$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _poker$[ebp]
	push	ecx
	call	?Purchase_Item@@YA_NPAVScriptableGameObj@@H@Z ; Purchase_Item
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@Poked

; 2190 : 		{
; 2191 : 			//Console_Output ( "[%d:%s:%s] NO NOOLAH\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2192 : 			// Play insufficient funds denied sound
; 2193 : 			Create_2D_Sound_Player(poker, Get_Parameter("insufficientFundsSound") );

	push	OFFSET ??_C@_0BH@GAEICIMG@insufficientFundsSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Player@@3P6AHPAVScriptableGameObj@@PBD@ZA ; Create_2D_Sound_Player
	add	esp, 8

; 2194 : 			return;

	jmp	$LN12@Poked
$LN7@Poked:

; 2195 : 		}
; 2196 : 
; 2197 : 		// OK, we have paid for the unit, lets proceed... first glue the driver in place...
; 2198 : 		pilotID = Commands->Get_ID( poker );

	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 2199 : 		Commands->Control_Enable ( poker, false );

	push	0
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+284]
	call	edx
	add	esp, 8

; 2200 : 
; 2201 : 		UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation

; 2202 : 
; 2203 : 		// ...Then create the vehicle...
; 2204 : 		//Console_Output ( "[%d:%s:%s] Creating remote control vehicle %s\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name(), Get_Parameter ( "vehiclePreset" ) );
; 2205 : 		if (!Create_Vehicle( Get_Parameter ( "vehiclePreset" ), 0.0, Commands->Find_Object( pilotID ), Get_Object_Type( Commands->Find_Object(pilotID) ) ))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0O@HKFGMBNK@vehiclePreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Create_Vehicle@@YA_NPBDMPAVScriptableGameObj@@H@Z ; Create_Vehicle
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN6@Poked

; 2206 : 		{
; 2207 : 			Timer_Expired(obj, TIMER_REMOTECONTROL_TIMEOUT);

	push	-620494847				; db040001H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 2208 : 		}
; 2209 : 		else

	jmp	SHORT $LN5@Poked
$LN6@Poked:

; 2210 : 		{
; 2211 : 			// And wait for confirmation... start a timer in the event that we don't ever get this...
; 2212 : 			Commands->Start_Timer ( obj, this, 5.0, TIMER_REMOTECONTROL_TIMEOUT );

	push	-620494847				; db040001H
	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN5@Poked:

; 2213 : 		}

	jmp	$LN1@Poked
$LN8@Poked:

; 2214 : 	}
; 2215 : 
; 2216 : 	// OK, a vehicle already exists, does it have a pilot? If not then take control of it
; 2217 : 	else if ( pilotID == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	$LN1@Poked

; 2218 : 	{
; 2219 : 		//Console_Output ( "[%d:%s:%s] ENTER EXISTING\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );
; 2220 : 		// Enable transitions and wait until they are active to put driver in
; 2221 : 		GameObject* vehicle = Commands->Find_Object(vehicleID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _vehicle$1[ebp], eax

; 2222 : 		if ( vehicle )

	cmp	DWORD PTR _vehicle$1[ebp], 0
	je	$LN2@Poked

; 2223 : 		{
; 2224 : 			// Stop the pilot from walking away in the meantime
; 2225 : 			pilotID = Commands->Get_ID( poker );

	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 2226 : 			Commands->Control_Enable ( poker, false );

	push	0
	mov	eax, DWORD PTR _poker$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+284]
	call	edx
	add	esp, 8

; 2227 : 
; 2228 : 			// Disable pokeable indicator
; 2229 : 			UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation

; 2230 : 
; 2231 : 			Commands->Enable_Vehicle_Transitions( vehicle, true );

	push	1
	mov	eax, DWORD PTR _vehicle$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8

; 2232 : 			Commands->Start_Timer ( obj, this, 0.5, TIMER_REMOTECONTROL_DRIVERENTER );

	push	-620494846				; db040002H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 2233 : 		}
; 2234 : 		else

	jmp	SHORT $LN1@Poked
$LN2@Poked:

; 2235 : 			vehicleID = NULL;	// This should never actually happen... but just in case...

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN1@Poked:
$LN12@Poked:

; 2236 : 	}
; 2237 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_RemoteControlConsole::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv93 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_RemoteControlConsole::Detach, COMDAT
; _this$ = ecx

; 2141 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2142 : 	ScriptImpClass::Detach(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Detach

; 2143 : 	if (m_pLoopedAnimCtrl)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN2@Detach

; 2144 : 	{
; 2145 : 		delete m_pLoopedAnimCtrl;

	push	OFFSET ??_C@_0CC@KHBMMJCA@dp88_RemoteControlConsole?3?3Detac@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN7@Detach
	xor	edx, edx
	jne	SHORT $LN4@Detach
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Detach:
	jmp	SHORT $LN2@Detach
$LN7@Detach:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Detach
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN2@Detach
$LN5@Detach:
	mov	DWORD PTR tv93[ebp], 0
$LN2@Detach:

; 2146 : 	}
; 2147 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_RemoteControlConsole::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv93 = -80						; size = 4
tv95 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_RemoteControlConsole::Created, COMDAT
; _this$ = ecx

; 2118 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2119 :   //Console_Output ( "[%d:%s:%s] Created - remoteControlID %d\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name(), Get_Int_Parameter("remoteControlID") );
; 2120 : 
; 2121 :   vehicleID         = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2122 :   pilotID           = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2123 :   m_pilotDummyID    = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 2124 :   m_bEnabled        = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+56], 1

; 2125 :   m_nChargeTime     = Get_Int_Parameter ( "chargeTime" );

	push	OFFSET ??_C@_0L@PPADADDF@chargeTime?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 2126 : 
; 2127 :   m_pLoopedAnimCtrl = new LoopedAnimationController(obj);

	push	OFFSET ??_C@_0CD@JPHIBELA@dp88_RemoteControlConsole?3?3Creat@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN7@Created
	xor	edx, edx
	jne	SHORT $LN4@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Created:
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN8@Created
$LN7@Created:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Created
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0LoopedAnimationController@@QAE@PAVScriptableGameObj@@@Z ; LoopedAnimationController::LoopedAnimationController
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN6@Created
$LN5@Created:
	mov	DWORD PTR tv93[ebp], 0
$LN6@Created:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR tv95[ebp], eax
$LN8@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR [ecx+64], edx

; 2128 : 
; 2129 :   // Start charge tick timer if necessary and set initial animation frames
; 2130 :   if ( m_nChargeTime > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jle	SHORT $LN1@Created

; 2131 :   {
; 2132 :     Commands->Start_Timer( obj, this, 1.0f, TIMER_REMOTECONTROL_CHARGETICK);

	push	-620494844				; db040004H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN1@Created:

; 2133 :   }
; 2134 : 
; 2135 :   UpdateAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_RemoteControlConsole@@AAEXPAVScriptableGameObj@@@Z ; dp88_RemoteControlConsole::UpdateAnimation

; 2136 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_RemoteControlConsole@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_RemoteControlConsole::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Aircraft_LandingZone_Aircraft@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Aircraft_LandingZone_Aircraft@@UAEPAXI@Z PROC	; dp88_Aircraft_LandingZone_Aircraft::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Aircraft_LandingZone_Aircraft@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Aircraft_LandingZone_Aircraft@@UAEPAXI@Z ENDP	; dp88_Aircraft_LandingZone_Aircraft::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Aircraft_LandingZone_Aircraft@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Aircraft_LandingZone_Aircraft@@UAE@XZ PROC	; dp88_Aircraft_LandingZone_Aircraft::~dp88_Aircraft_LandingZone_Aircraft, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Aircraft_LandingZone_Aircraft@@UAE@XZ ENDP	; dp88_Aircraft_LandingZone_Aircraft::~dp88_Aircraft_LandingZone_Aircraft
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Aircraft_LandingZone_Aircraft@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Aircraft_LandingZone_Aircraft@@QAE@XZ PROC	; dp88_Aircraft_LandingZone_Aircraft::dp88_Aircraft_LandingZone_Aircraft, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Aircraft_LandingZone_Aircraft@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Aircraft_LandingZone_Aircraft@@QAE@XZ ENDP	; dp88_Aircraft_LandingZone_Aircraft::dp88_Aircraft_LandingZone_Aircraft
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_Aircraft_LandingZone_Aircraft::Custom, COMDAT
; _this$ = ecx

; 1972 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1973 :   if ( type == CUSTOM_TRANSITION_VTOL_LAND_ZONE && param == 1 )

	cmp	DWORD PTR _type$[ebp], -637534207	; da000001H
	jne	$LN12@Custom
	cmp	DWORD PTR _param$[ebp], 1
	jne	$LN12@Custom

; 1974 :   {
; 1975 :     landingZoneCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 1976 : 
; 1977 :     // Play landing animation if this is the first zone we have entered
; 1978 :     if ( landingZoneCount == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 1
	jne	SHORT $LN11@Custom

; 1979 : 	{
; 1980 : 	  if (Get_Int_Parameter("require_landing_zone") >= 1)

	push	OFFSET ??_C@_0BF@EPONAFJP@require_landing_zone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jl	SHORT $LN10@Custom

; 1981 : 	  {
; 1982 : 		  Commands->Enable_Vehicle_Transitions(obj,true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8
$LN10@Custom:

; 1983 : 	  }
; 1984 :       Commands->Set_Animation( obj,Get_Parameter("landing_anim_name"), false, 0, Get_Float_Parameter("landing_anim_first_frame"), Get_Float_Parameter("landing_anim_last_frame"), false );

	push	0
	push	OFFSET ??_C@_0BI@DCNEIFIO@landing_anim_last_frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@KLMKDHMN@landing_anim_first_frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	push	0
	push	0
	push	OFFSET ??_C@_0BC@KIICMLNP@landing_anim_name?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+164]
	call	edx
	add	esp, 28					; 0000001cH
$LN11@Custom:

; 1985 : 	}
; 1986 :   }

	jmp	$LN1@Custom
$LN12@Custom:

; 1987 : 
; 1988 :   else if ( type == CUSTOM_TRANSITION_VTOL_LAND_ZONE && param == 0 )

	cmp	DWORD PTR _type$[ebp], -637534207	; da000001H
	jne	$LN8@Custom
	cmp	DWORD PTR _param$[ebp], 0
	jne	$LN8@Custom

; 1989 :   {
; 1990 :     landingZoneCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 1991 : 
; 1992 :     // Play take off animation if this is the last zone we were in (landing anim in reverse...)
; 1993 :     if ( landingZoneCount == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN7@Custom

; 1994 : 	{
; 1995 : 	  if (Get_Int_Parameter("require_landing_zone") >= 1)

	push	OFFSET ??_C@_0BF@EPONAFJP@require_landing_zone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jl	SHORT $LN6@Custom

; 1996 : 	  {
; 1997 : 		  Commands->Enable_Vehicle_Transitions(obj,false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8
$LN6@Custom:

; 1998 : 	  }
; 1999 :       Commands->Set_Animation( obj, Get_Parameter("landing_anim_name"), false, 0, Get_Float_Parameter("landing_anim_last_frame"), Get_Float_Parameter("landing_anim_first_frame"), false );

	push	0
	push	OFFSET ??_C@_0BJ@KLMKDHMN@landing_anim_first_frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_0BI@DCNEIFIO@landing_anim_last_frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	push	0
	push	0
	push	OFFSET ??_C@_0BC@KIICMLNP@landing_anim_name?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+164]
	call	edx
	add	esp, 28					; 0000001cH
$LN7@Custom:

; 2000 : 	}
; 2001 :   }

	jmp	$LN1@Custom
$LN8@Custom:

; 2002 : 
; 2003 :   else if ( type == CUSTOM_EVENT_VEHICLE_ENTERED && driverID == NULL )

	cmp	DWORD PTR _type$[ebp], 1000000028	; 3b9aca1cH
	jne	SHORT $LN4@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@Custom

; 2004 :     driverID = Commands->Get_ID(sender);

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax
	jmp	$LN1@Custom
$LN4@Custom:

; 2005 : 
; 2006 :   else if ( type == CUSTOM_EVENT_VEHICLE_EXITED && Commands->Get_ID(sender) == driverID )

	cmp	DWORD PTR _type$[ebp], 1000000029	; 3b9aca1dH
	jne	$LN1@Custom
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+28]
	jne	SHORT $LN1@Custom

; 2007 :   {
; 2008 :     driverID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2009 : 
; 2010 :     // If the driver exited outside of a landing zone then kablooey!
; 2011 :     if ( Get_Int_Parameter("require_landing_zone") >= 1 && landingZoneCount == 0 )

	push	OFFSET ??_C@_0BF@EPONAFJP@require_landing_zone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jl	SHORT $LN1@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN1@Custom

; 2012 :     {
; 2013 :       Commands->Apply_Damage(sender, 10000.0f, "Death", obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_05PGGAFPFO@Death?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _sender$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+616]
	call	eax
	add	esp, 16					; 00000010H

; 2014 :       Commands->Apply_Damage(obj, 10000.0f, "Death", obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_05PGGAFPFO@Death?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+616]
	call	eax
	add	esp, 16					; 00000010H
$LN1@Custom:

; 2015 :     }
; 2016 :   }
; 2017 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_Aircraft_LandingZone_Aircraft::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_driver$1 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Aircraft_LandingZone_Aircraft::Killed, COMDAT
; _this$ = ecx

; 1961 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1962 :   // We can't simply kill the pilot because things go horribly wrong... instead use the script
; 1963 :   // JFW_Timer_Destroy_Object to kill them as soon as possible.
; 1964 :   if ( driverID != 0 && landingZoneCount == 0 && Get_Int_Parameter("require_landing_zone") >= 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@Killed
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN3@Killed
	push	OFFSET ??_C@_0BF@EPONAFJP@require_landing_zone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jl	SHORT $LN3@Killed

; 1965 :   {
; 1966 :     if ( GameObject* driver = Commands->Find_Object(driverID) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _driver$1[ebp], eax
	cmp	DWORD PTR _driver$1[ebp], 0
	je	SHORT $LN3@Killed

; 1967 :       Commands->Attach_Script ( driver, "JFW_Timer_Destroy_Object", "1.0,547859,5000.0,Death" );

	push	OFFSET ??_C@_0BI@JFPBEDHA@1?40?0547859?05000?40?0Death?$AA@
	push	OFFSET ??_C@_0BJ@IOLCGKKE@JFW_Timer_Destroy_Object?$AA@
	mov	eax, DWORD PTR _driver$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 12					; 0000000cH
$LN3@Killed:

; 1968 :   }
; 1969 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Aircraft_LandingZone_Aircraft::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_Aircraft_LandingZone_Aircraft::Created, COMDAT
; _this$ = ecx

; 1951 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1952 :   driverID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1953 :   landingZoneCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 1954 :   if (Get_Int_Parameter("require_landing_zone") >= 1)

	push	OFFSET ??_C@_0BF@EPONAFJP@require_landing_zone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jl	SHORT $LN2@Created

; 1955 :   {
; 1956 : 	  Commands->Enable_Vehicle_Transitions(obj,false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8
$LN2@Created:

; 1957 :   }
; 1958 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Aircraft_LandingZone_Aircraft@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Aircraft_LandingZone_Aircraft::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Aircraft_LandingZone@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Aircraft_LandingZone@@UAEPAXI@Z PROC		; dp88_Aircraft_LandingZone::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Aircraft_LandingZone@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Aircraft_LandingZone@@UAEPAXI@Z ENDP		; dp88_Aircraft_LandingZone::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Aircraft_LandingZone@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Aircraft_LandingZone@@UAE@XZ PROC		; dp88_Aircraft_LandingZone::~dp88_Aircraft_LandingZone, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Aircraft_LandingZone@@UAE@XZ ENDP		; dp88_Aircraft_LandingZone::~dp88_Aircraft_LandingZone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Aircraft_LandingZone@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Aircraft_LandingZone@@QAE@XZ PROC		; dp88_Aircraft_LandingZone::dp88_Aircraft_LandingZone, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Aircraft_LandingZone@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Aircraft_LandingZone@@QAE@XZ ENDP		; dp88_Aircraft_LandingZone::dp88_Aircraft_LandingZone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Exited@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_exiter$ = 12						; size = 4
?Exited@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Aircraft_LandingZone::Exited, COMDAT
; _this$ = ecx

; 1944 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1945 :   Commands->Send_Custom_Event( obj, exiter, CUSTOM_TRANSITION_VTOL_LAND_ZONE, 0, 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	-637534207				; da000001H
	mov	eax, DWORD PTR _exiter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 1946 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Aircraft_LandingZone::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Entered@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enterer$ = 12						; size = 4
?Entered@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Aircraft_LandingZone::Entered, COMDAT
; _this$ = ecx

; 1939 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1940 :   Commands->Send_Custom_Event( obj, enterer, CUSTOM_TRANSITION_VTOL_LAND_ZONE, 1, 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	-637534207				; da000001H
	mov	eax, DWORD PTR _enterer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 1941 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@dp88_Aircraft_LandingZone@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Aircraft_LandingZone::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Ore_Dump_Zone@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Ore_Dump_Zone@@UAEPAXI@Z PROC			; dp88_Ore_Dump_Zone::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Ore_Dump_Zone@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Ore_Dump_Zone@@UAEPAXI@Z ENDP			; dp88_Ore_Dump_Zone::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Ore_Dump_Zone@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Ore_Dump_Zone@@UAE@XZ PROC			; dp88_Ore_Dump_Zone::~dp88_Ore_Dump_Zone, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Ore_Dump_Zone@@UAE@XZ ENDP			; dp88_Ore_Dump_Zone::~dp88_Ore_Dump_Zone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Ore_Dump_Zone@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Ore_Dump_Zone@@QAE@XZ PROC			; dp88_Ore_Dump_Zone::dp88_Ore_Dump_Zone, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Ore_Dump_Zone@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Ore_Dump_Zone@@QAE@XZ ENDP			; dp88_Ore_Dump_Zone::dp88_Ore_Dump_Zone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Entered@dp88_Ore_Dump_Zone@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enterer$ = 12						; size = 4
?Entered@dp88_Ore_Dump_Zone@@UAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Dump_Zone::Entered, COMDAT
; _this$ = ecx

; 1914 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1915 :   if ( Get_Object_Type(enterer) == Get_Int_Parameter( "Team" ) )

	mov	eax, DWORD PTR _enterer$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	esi, eax
	push	OFFSET ??_C@_04GBPANCCF@Team?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	esi, eax
	jne	SHORT $LN1@Entered

; 1916 :     Commands->Send_Custom_Event( obj, enterer, CUSTOM_MINER_ENTERED_DUMP_ZONE, Get_Int_Parameter( "Team" ), 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GBPANCCF@Team?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	-637206525				; da050003H
	mov	eax, DWORD PTR _enterer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN1@Entered:

; 1917 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@dp88_Ore_Dump_Zone@@UAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Dump_Zone::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Ore_Extractor@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Ore_Extractor@@UAEPAXI@Z PROC			; dp88_Ore_Extractor::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Ore_Extractor@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Ore_Extractor@@UAEPAXI@Z ENDP			; dp88_Ore_Extractor::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Ore_Extractor@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Ore_Extractor@@UAE@XZ PROC			; dp88_Ore_Extractor::~dp88_Ore_Extractor, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Ore_Extractor@@UAE@XZ ENDP			; dp88_Ore_Extractor::~dp88_Ore_Extractor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Ore_Extractor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Ore_Extractor@@QAE@XZ PROC			; dp88_Ore_Extractor::dp88_Ore_Extractor, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Ore_Extractor@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Ore_Extractor@@QAE@XZ ENDP			; dp88_Ore_Extractor::dp88_Ore_Extractor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Animation_Complete@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
tv164 = -88						; size = 8
tv160 = -80						; size = 4
_pOreFieldScript$1 = -12				; size = 4
_pOreField$2 = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_animationName$ = 12					; size = 4
?Animation_Complete@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; dp88_Ore_Extractor::Animation_Complete, COMDAT
; _this$ = ecx

; 1867 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1868 :   if ( (m_strAnimation == NULL && animationName == NULL)
; 1869 :     || (m_strAnimation != NULL && animationName != NULL && 0 == _stricmp(m_strAnimation,animationName)) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN3@Animation_
	cmp	DWORD PTR _animationName$[ebp], 0
	je	SHORT $LN4@Animation_
$LN3@Animation_:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN5@Animation_
	cmp	DWORD PTR _animationName$[ebp], 0
	je	$LN5@Animation_
	mov	eax, DWORD PTR _animationName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	$LN5@Animation_
$LN4@Animation_:

; 1870 :   {
; 1871 :     // Populate ore field with additional ore
; 1872 :     GameObject* pOreField = Commands->Find_Object(m_oreFieldId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pOreField$2[ebp], eax

; 1873 :     if ( !pOreField )

	cmp	DWORD PTR _pOreField$2[ebp], 0
	jne	SHORT $LN2@Animation_

; 1874 : 	{
; 1875 :       Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 1876 : 	  return;

	jmp	SHORT $LN6@Animation_
$LN2@Animation_:

; 1877 : 	}
; 1878 : 
; 1879 :     dp88_Ore_Field* pOreFieldScript = (dp88_Ore_Field *)(Find_Script_On_Object(pOreField, "dp88_Ore_Field"));

	push	OFFSET ??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@
	mov	eax, DWORD PTR _pOreField$2[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	mov	DWORD PTR _pOreFieldScript$1[ebp], eax

; 1880 :     if ( !pOreFieldScript )

	cmp	DWORD PTR _pOreFieldScript$1[ebp], 0
	jne	SHORT $LN1@Animation_

; 1881 : 	{
; 1882 :       Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 1883 : 	  return;

	jmp	SHORT $LN6@Animation_
$LN1@Animation_:

; 1884 : 	}
; 1885 : 
; 1886 :     pOreFieldScript->AddOre(m_nOreUnits);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	ecx, DWORD PTR _pOreFieldScript$1[ebp]
	call	?AddOre@dp88_Ore_Field@@QAEXI@Z		; dp88_Ore_Field::AddOre

; 1887 : 
; 1888 :     // Set timer for next extraction
; 1889 :     Commands->Start_Timer(pObj, this, (float)m_interval, TIMER_OREMINING_EXTRACTOR );

	push	-620429311				; db050001H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv160[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv160[ebp]
	mov	edx, DWORD PTR tv160[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv164[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv164[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN5@Animation_:
$LN6@Animation_:

; 1890 :   }
; 1891 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; dp88_Ore_Extractor::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_Ore_Extractor::Timer_Expired, COMDAT
; _this$ = ecx

; 1854 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1855 :   if ( number == TIMER_OREMINING_EXTRACTOR )

	cmp	DWORD PTR _number$[ebp], -620429311	; db050001H
	jne	SHORT $LN1@Timer_Expi

; 1856 :   {
; 1857 :     if ( m_strAnimation )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN2@Timer_Expi

; 1858 :       Commands->Set_Animation ( pObj, m_strAnimation, false, NULL, 0, -1, false );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+164]
	call	ecx
	add	esp, 28					; 0000001cH

; 1859 :     else

	jmp	SHORT $LN1@Timer_Expi
$LN2@Timer_Expi:

; 1860 :       Animation_Complete(pObj, NULL);

	push	0
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
$LN1@Timer_Expi:

; 1861 :   }
; 1862 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_Ore_Extractor::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv144 = -104						; size = 4
tv218 = -100						; size = 8
tv208 = -97						; size = 1
tv205 = -96						; size = 4
tv214 = -92						; size = 4
tv202 = -92						; size = 4
$T1 = -84						; size = 12
_pOreField$2 = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Extractor::Created, COMDAT
; _this$ = ecx

; 1831 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1832 :   if ( GameObject* pOreField = Find_Closest_Object_With_Script("dp88_Ore_Field", Commands->Get_Position(pObj)) )

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	push	OFFSET ??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@
	call	?Find_Closest_Object_With_Script@@YAPAVScriptableGameObj@@PBDVVector3@@@Z ; Find_Closest_Object_With_Script
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pOreField$2[ebp], eax
	cmp	DWORD PTR _pOreField$2[ebp], 0
	je	$LN2@Created

; 1833 :   {
; 1834 :     m_oreFieldId = Commands->Get_ID(pOreField);

	mov	eax, DWORD PTR _pOreField$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1835 : 
; 1836 :     m_nOreUnits = Get_Int_Parameter("Ore_Units");

	push	OFFSET ??_C@_09ILICBFCO@Ore_Units?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 1837 :     m_interval = Get_Int_Parameter("Extraction_Interval");

	push	OFFSET ??_C@_0BE@PJJOFNID@Extraction_Interval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 1838 :     m_strAnimation = Get_Parameter("Extraction_Animation");

	push	OFFSET ??_C@_0BF@HAMAJFGE@Extraction_Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1839 :     if ( strlen(m_strAnimation) <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR tv202[ebp], ecx
	mov	edx, DWORD PTR tv202[ebp]
	add	edx, 1
	mov	DWORD PTR tv205[ebp], edx
$LL5@Created:
	mov	eax, DWORD PTR tv202[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv208[ebp], cl
	add	DWORD PTR tv202[ebp], 1
	cmp	BYTE PTR tv208[ebp], 0
	jne	SHORT $LL5@Created
	mov	edx, DWORD PTR tv202[ebp]
	sub	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR tv144[ebp], edx
	jne	SHORT $LN1@Created

; 1840 :       m_strAnimation = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN1@Created:

; 1841 : 
; 1842 :     Commands->Start_Timer(pObj, this, (float)m_interval, TIMER_OREMINING_EXTRACTOR );

	push	-620429311				; db050001H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv214[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv214[ebp]
	mov	edx, DWORD PTR tv214[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv218[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv218[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 1843 :     return;

	jmp	SHORT $LN3@Created
$LN2@Created:

; 1844 :   }
; 1845 : 
; 1846 : 
; 1847 :   Console_Output ( "[%d:%s:%s] Critical Error: Unable to locate an ore field zone. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FF@PEMPDPCP@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Unabl@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 1848 :   Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script
$LN3@Created:

; 1849 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Ore_Extractor@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Extractor::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Ore_Field@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Ore_Field@@UAEPAXI@Z PROC			; dp88_Ore_Field::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Ore_Field@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Ore_Field@@UAEPAXI@Z ENDP			; dp88_Ore_Field::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Ore_Field@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Ore_Field@@UAE@XZ PROC				; dp88_Ore_Field::~dp88_Ore_Field, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Ore_Field@@UAE@XZ ENDP				; dp88_Ore_Field::~dp88_Ore_Field
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Ore_Field_Observer@dp88_Ore_Field@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Ore_Field_Observer@dp88_Ore_Field@@UAEPAXI@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Ore_Field_Observer@dp88_Ore_Field@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Ore_Field_Observer@dp88_Ore_Field@@UAEPAXI@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Ore_Field_Observer@dp88_Ore_Field@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Ore_Field_Observer@dp88_Ore_Field@@UAE@XZ PROC	; dp88_Ore_Field::dp88_Ore_Field_Observer::~dp88_Ore_Field_Observer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Ore_Field_Observer@dp88_Ore_Field@@UAE@XZ ENDP	; dp88_Ore_Field::dp88_Ore_Field_Observer::~dp88_Ore_Field_Observer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Get_Name@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEPBDXZ PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Get_Name, COMDAT
; _this$ = ecx

; 547  :     const char* Get_Name() { return "dp88_Ore_Field_Observer"; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_0BI@PEPLNIMK@dp88_Ore_Field_Observer?$AA@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEPBDXZ ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Poked@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pPoker$ = 12						; size = 4
?Poked@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Poked, COMDAT
; _this$ = ecx

; 543  :     void Poked(GameObject* pObj,GameObject* pPoker) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Timer_Expired@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Timer_Expired, COMDAT
; _this$ = ecx

; 542  :     void Timer_Expired(GameObject* pObj,int number) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Action_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_complete_reason$ = 16					; size = 4
?Action_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Action_Complete, COMDAT
; _this$ = ecx

; 541  :     void Action_Complete(GameObject* pObj,int action_id,ActionCompleteReason complete_reason) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Enemy_Seen@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pEnemy$ = 12						; size = 4
?Enemy_Seen@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Enemy_Seen, COMDAT
; _this$ = ecx

; 540  :     void Enemy_Seen(GameObject* pObj,GameObject* pEnemy) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Sound_Heard@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_sound$ = 12						; size = 4
?Sound_Heard@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@ABUCombatSound@@@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Sound_Heard, COMDAT
; _this$ = ecx

; 539  :     void Sound_Heard(GameObject* pObj,const CombatSound & sound) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Sound_Heard@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Sound_Heard
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Custom@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Custom, COMDAT
; _this$ = ecx

; 538  :     void Custom(GameObject* pObj,int type,int param,GameObject* pSender) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Damaged@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pDamager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Damaged, COMDAT
; _this$ = ecx

; 537  :     void Damaged(GameObject* pObj,GameObject* pDamager,float amount) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Killed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pKiller$ = 12						; size = 4
?Killed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Killed, COMDAT
; _this$ = ecx

; 536  :     void Killed(GameObject* pObj,GameObject* pKiller) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Destroyed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Destroyed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Destroyed, COMDAT
; _this$ = ecx

; 535  :     void Destroyed(GameObject* pObj) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Created@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Created, COMDAT
; _this$ = ecx

; 534  :     void Created(GameObject* pObj) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Animation_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@PBD@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Animation_Complete, COMDAT
; _this$ = ecx

; 533  :     void Animation_Complete ( GameObject *pObj, const char *animation_name ) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@PBD@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Detach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Detach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Detach, COMDAT
; _this$ = ecx

; 532  :     void Detach ( GameObject* pObj ) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Attach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Attach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Attach, COMDAT
; _this$ = ecx

; 531  :     void Attach ( GameObject* pObj ) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@dp88_Ore_Field_Observer@dp88_Ore_Field@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Attach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Exited@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pExiter$ = 12						; size = 4
?Exited@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Exited, COMDAT
; _this$ = ecx

; 527  :     void Exited( GameObject* pObj, GameObject* pExiter )    { m_pParent->Exited(pObj, pExiter); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pExiter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?Entered@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pEnterer$ = 12						; size = 4
?Entered@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::Entered, COMDAT
; _this$ = ecx

; 526  :     void Entered( GameObject* pObj, GameObject* pEnterer )  { m_pParent->Entered(pObj, pEnterer); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pEnterer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@dp88_Ore_Field_Observer@dp88_Ore_Field@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ??0dp88_Ore_Field_Observer@dp88_Ore_Field@@QAE@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pParent$ = 8						; size = 4
??0dp88_Ore_Field_Observer@dp88_Ore_Field@@QAE@PAV1@@Z PROC ; dp88_Ore_Field::dp88_Ore_Field_Observer::dp88_Ore_Field_Observer, COMDAT
; _this$ = ecx

; 519  :     dp88_Ore_Field_Observer(dp88_Ore_Field* pParent)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@XZ		; GameObjObserverClass::GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Ore_Field_Observer@dp88_Ore_Field@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0dp88_Ore_Field_Observer@dp88_Ore_Field@@QAE@PAV1@@Z ENDP ; dp88_Ore_Field::dp88_Ore_Field_Observer::dp88_Ore_Field_Observer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?UpdateAnimationFrame@dp88_Ore_Field@@IAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv158 = -112						; size = 4
tv150 = -108						; size = 8
tv146 = -100						; size = 4
tv140 = -96						; size = 8
tv136 = -88						; size = 4
tv130 = -84						; size = 8
tv95 = -76						; size = 4
_frame$1 = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?UpdateAnimationFrame@dp88_Ore_Field@@IAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Field::UpdateAnimationFrame, COMDAT
; _this$ = ecx

; 1795 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1796 :   if ( m_oreCapacity != 0 && m_strAnimation != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN1@UpdateAnim
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN1@UpdateAnim

; 1797 :   {
; 1798 :     int frame = m_nAnimationFullFrame - (int)ceil((m_nAnimationFullFrame-m_nAnimationEmptyFrame)*((float)m_nOreUnits/m_oreCapacity));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR tv95[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR tv95[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv130[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv130[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR tv136[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv136[ebp]
	mov	eax, DWORD PTR tv136[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv140[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR tv146[ebp], edx
	cvtsi2sd xmm2, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR tv146[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm2, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv150[ebp], xmm2
	cvtsd2ss xmm2, QWORD PTR tv150[ebp]
	divss	xmm1, xmm2
	mulss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?ceil@@YAMM@Z				; ceil
	add	esp, 4
	fstp	DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR tv158[ebp]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, ecx
	mov	DWORD PTR _frame$1[ebp], eax

; 1799 :     Commands->Set_Animation_Frame(pObj, m_strAnimation, frame);

	mov	eax, DWORD PTR _frame$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 12					; 0000000cH
$LN1@UpdateAnim:

; 1800 :   }
; 1801 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateAnimationFrame@dp88_Ore_Field@@IAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Field::UpdateAnimationFrame
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?UpdateAnimationFrame@dp88_Ore_Field@@IAEXXZ
_TEXT	SEGMENT
_pObj$1 = -8						; size = 4
_this$ = -4						; size = 4
?UpdateAnimationFrame@dp88_Ore_Field@@IAEXXZ PROC	; dp88_Ore_Field::UpdateAnimationFrame, COMDAT
; _this$ = ecx

; 1787 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1788 :   if ( GameObject* pObj = Commands->Find_Object(m_myObjId) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pObj$1[ebp], eax
	cmp	DWORD PTR _pObj$1[ebp], 0
	je	SHORT $LN2@UpdateAnim

; 1789 :     UpdateAnimationFrame(pObj);

	mov	eax, DWORD PTR _pObj$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimationFrame@dp88_Ore_Field@@IAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Field::UpdateAnimationFrame
$LN2@UpdateAnim:

; 1790 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateAnimationFrame@dp88_Ore_Field@@IAEXXZ ENDP	; dp88_Ore_Field::UpdateAnimationFrame
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?IsSuitableForAI@dp88_Ore_Field@@QAE_NXZ
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
?IsSuitableForAI@dp88_Ore_Field@@QAE_NXZ PROC		; dp88_Ore_Field::IsSuitableForAI, COMDAT
; _this$ = ecx

; 486  :   bool IsSuitableForAI() { return !m_bAiIgnore; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	test	ecx, ecx
	jne	SHORT $LN3@IsSuitable
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSuitable
$LN3@IsSuitable:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSuitable:
	mov	al, BYTE PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSuitableForAI@dp88_Ore_Field@@QAE_NXZ ENDP		; dp88_Ore_Field::IsSuitableForAI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?IsInfinite@dp88_Ore_Field@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?IsInfinite@dp88_Ore_Field@@QAE_NXZ PROC		; dp88_Ore_Field::IsInfinite, COMDAT
; _this$ = ecx

; 483  :   bool IsInfinite() { return m_oreCapacity == 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN3@IsInfinite
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsInfinite
$LN3@IsInfinite:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsInfinite:
	mov	al, BYTE PTR tv66[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsInfinite@dp88_Ore_Field@@QAE_NXZ ENDP		; dp88_Ore_Field::IsInfinite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?GetOreValue@dp88_Ore_Field@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOreValue@dp88_Ore_Field@@QAEIXZ PROC		; dp88_Ore_Field::GetOreValue, COMDAT
; _this$ = ecx

; 480  :   unsigned int GetOreValue() { return m_oreValue; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOreValue@dp88_Ore_Field@@QAEIXZ ENDP		; dp88_Ore_Field::GetOreValue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?NumOreUnits@dp88_Ore_Field@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumOreUnits@dp88_Ore_Field@@QAEIXZ PROC		; dp88_Ore_Field::NumOreUnits, COMDAT
; _this$ = ecx

; 477  :   unsigned int NumOreUnits() { return m_nOreUnits; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NumOreUnits@dp88_Ore_Field@@QAEIXZ ENDP		; dp88_Ore_Field::NumOreUnits
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?RemoveOre@dp88_Ore_Field@@QAEII@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_nUnits$ = 8						; size = 4
?RemoveOre@dp88_Ore_Field@@QAEII@Z PROC			; dp88_Ore_Field::RemoveOre, COMDAT
; _this$ = ecx

; 1774 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1775 :   if ( m_oreCapacity != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN1@RemoveOre

; 1776 :   {
; 1777 :     nUnits = min(nUnits,m_nOreUnits);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nUnits$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jae	SHORT $LN4@RemoveOre
	mov	edx, DWORD PTR _nUnits$[ebp]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN5@RemoveOre
$LN4@RemoveOre:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR tv69[ebp], ecx
$LN5@RemoveOre:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _nUnits$[ebp], edx

; 1778 :     m_nOreUnits -= nUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, DWORD PTR _nUnits$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 1779 :     UpdateAnimationFrame();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimationFrame@dp88_Ore_Field@@IAEXXZ ; dp88_Ore_Field::UpdateAnimationFrame
$LN1@RemoveOre:

; 1780 :   }
; 1781 :   return nUnits;

	mov	eax, DWORD PTR _nUnits$[ebp]

; 1782 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveOre@dp88_Ore_Field@@QAEII@Z ENDP			; dp88_Ore_Field::RemoveOre
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?AddOre@dp88_Ore_Field@@QAEXI@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_nUnits$ = 8						; size = 4
?AddOre@dp88_Ore_Field@@QAEXI@Z PROC			; dp88_Ore_Field::AddOre, COMDAT
; _this$ = ecx

; 1763 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1764 :   if ( m_oreCapacity != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN2@AddOre

; 1765 :   {
; 1766 :     m_nOreUnits += min(nUnits,m_oreCapacity-m_nOreUnits);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	sub	edx, DWORD PTR [ecx+32]
	cmp	DWORD PTR _nUnits$[ebp], edx
	jae	SHORT $LN4@AddOre
	mov	eax, DWORD PTR _nUnits$[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@AddOre
$LN4@AddOre:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+32]
	mov	DWORD PTR tv74[ebp], eax
$LN5@AddOre:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR tv74[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], edx

; 1767 :     UpdateAnimationFrame();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimationFrame@dp88_Ore_Field@@IAEXXZ ; dp88_Ore_Field::UpdateAnimationFrame
$LN2@AddOre:

; 1768 :   }
; 1769 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AddOre@dp88_Ore_Field@@QAEXI@Z ENDP			; dp88_Ore_Field::AddOre
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Exited@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_pObj$1 = -8						; size = 4
_this$ = -4						; size = 4
_pZoneObj$ = 8						; size = 4
_pExiter$ = 12						; size = 4
?Exited@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Field::Exited, COMDAT
; _this$ = ecx

; 1751 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1752 :   if ( pZoneObj == Commands->Find_Object(m_minerZoneId) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	cmp	DWORD PTR _pZoneObj$[ebp], eax
	jne	SHORT $LN1@Exited

; 1753 :   {
; 1754 :     GameObject* pObj = Commands->Find_Object(m_myObjId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pObj$1[ebp], eax

; 1755 : 
; 1756 :     Commands->Send_Custom_Event( pObj, pExiter, CUSTOM_MINER_EXITED_ORE_FIELD, 0, 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	-637206526				; da050002H
	mov	eax, DWORD PTR _pExiter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN1@Exited:

; 1757 :   }
; 1758 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Field::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Entered@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_pObj$1 = -8						; size = 4
_this$ = -4						; size = 4
_pZoneObj$ = 8						; size = 4
_pEnterer$ = 12						; size = 4
?Entered@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Field::Entered, COMDAT
; _this$ = ecx

; 1739 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1740 :   if ( pZoneObj == Commands->Find_Object(m_minerZoneId) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	cmp	DWORD PTR _pZoneObj$[ebp], eax
	jne	SHORT $LN1@Entered

; 1741 :   {
; 1742 :     GameObject* pObj = Commands->Find_Object(m_myObjId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pObj$1[ebp], eax

; 1743 : 
; 1744 :     Commands->Send_Custom_Event( pObj, pEnterer, CUSTOM_MINER_ENTERED_ORE_FIELD, 0, 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	-637206527				; da050001H
	mov	eax, DWORD PTR _pEnterer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN1@Entered:

; 1745 :   }
; 1746 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Field::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_pMinerZone$3 = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Field::Detach, COMDAT
; _this$ = ecx

; 1724 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1725 :   ScriptImpClass::Detach(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Detach

; 1726 : 
; 1727 :   if ( m_pZoneObserver != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	$LN3@Detach

; 1728 :   {
; 1729 :     if ( GameObject* pMinerZone = Commands->Find_Object(m_minerZoneId) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pMinerZone$3[ebp], eax
	cmp	DWORD PTR _pMinerZone$3[ebp], 0
	je	SHORT $LN1@Detach

; 1730 :       pMinerZone->Remove_Observer(m_pZoneObserver);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	ecx, DWORD PTR _pMinerZone$3[ebp]
	call	?Remove_Observer@ScriptableGameObj@@QAEXPAVGameObjObserverClass@@@Z ; ScriptableGameObj::Remove_Observer
$LN1@Detach:

; 1731 :     delete m_pZoneObserver;

	push	OFFSET ??_C@_0BH@KKKPGEKM@dp88_Ore_Field?3?3Detach?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN8@Detach
	xor	edx, edx
	jne	SHORT $LN5@Detach
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Detach:
	jmp	SHORT $LN9@Detach
$LN8@Detach:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Detach
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN9@Detach
$LN6@Detach:
	mov	DWORD PTR tv137[ebp], 0
$LN9@Detach:

; 1732 :     m_pZoneObserver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0
$LN3@Detach:

; 1733 :   }
; 1734 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Field::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv141 = -212						; size = 4
tv335 = -205						; size = 1
tv332 = -204						; size = 4
tv265 = -204						; size = 4
tv370 = -200						; size = 4
tv329 = -200						; size = 4
tv267 = -200						; size = 4
tv214 = -197						; size = 1
$T1 = -196						; size = 12
$T2 = -184						; size = 12
$T3 = -172						; size = 4
_pMinerZone$4 = -104					; size = 4
_zoneBoundingBox$5 = -100				; size = 60
_rotation$6 = -40					; size = 36
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Field::Created, COMDAT
; _this$ = ecx

; 1658 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1659 :   m_myObjId = Commands->Get_ID(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1660 :   m_pZoneObserver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 1661 : 
; 1662 :   m_oreValue = Get_Int_Parameter("Ore_Value");

	push	OFFSET ??_C@_09KFMCNPID@Ore_Value?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1663 :   m_oreCapacity = Get_Int_Parameter("Ore_Capacity");

	push	OFFSET ??_C@_0N@CKLMCBCD@Ore_Capacity?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 1664 :   m_nOreUnits = Get_Int_Parameter("Ore_Units");

	push	OFFSET ??_C@_09ILICBFCO@Ore_Units?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 1665 : 
; 1666 :   if ( m_nOreUnits > m_oreCapacity )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+44]
	jbe	SHORT $LN8@Created

; 1667 :     m_nOreUnits =  m_oreCapacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+32], edx
$LN8@Created:

; 1668 : 
; 1669 : 
; 1670 :   m_strAnimation = Get_Parameter("Animation_Name");

	push	OFFSET ??_C@_0P@KOIPOOMD@Animation_Name?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 1671 :   if (strlen(m_strAnimation) <= 0 || !pObj->As_PhysicalGameObj())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR tv329[ebp], ecx
	mov	edx, DWORD PTR tv329[ebp]
	add	edx, 1
	mov	DWORD PTR tv332[ebp], edx
$LL18@Created:
	mov	eax, DWORD PTR tv329[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv335[ebp], cl
	add	DWORD PTR tv329[ebp], 1
	cmp	BYTE PTR tv335[ebp], 0
	jne	SHORT $LL18@Created
	mov	edx, DWORD PTR tv329[ebp]
	sub	edx, DWORD PTR tv332[ebp]
	mov	DWORD PTR tv141[ebp], edx
	je	SHORT $LN6@Created
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	test	eax, eax
	jne	SHORT $LN7@Created
$LN6@Created:

; 1672 :     m_strAnimation = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1673 :   else

	jmp	SHORT $LN5@Created
$LN7@Created:

; 1674 :   {
; 1675 :     m_nAnimationFullFrame = Get_Int_Parameter("Animation_Full_Frame");

	push	OFFSET ??_C@_0BF@KOGHJIGL@Animation_Full_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 1676 :     m_nAnimationEmptyFrame = Get_Int_Parameter("Animation_Empty_Frame");

	push	OFFSET ??_C@_0BG@LKFEMCPO@Animation_Empty_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1677 :     UpdateAnimationFrame();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimationFrame@dp88_Ore_Field@@IAEXXZ ; dp88_Ore_Field::UpdateAnimationFrame
$LN5@Created:

; 1678 :   }
; 1679 : 
; 1680 : 
; 1681 :   m_zoneSizeFull = Get_Vector3_Parameter("Zone_Size");

	push	OFFSET ??_C@_09KINPNLGC@Zone_Size?$AA@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Vector3_Parameter@ScriptImpClass@@QAE?AVVector3@@PBD@Z ; ScriptImpClass::Get_Vector3_Parameter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 1682 :   if ( m_strAnimation )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN4@Created

; 1683 :   {
; 1684 :     m_zoneStepX = Get_Float_Parameter("Zone_Anim_Step_X");

	push	OFFSET ??_C@_0BB@HIBECNLG@Zone_Anim_Step_X?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+72]

; 1685 :     m_zoneStepY = Get_Float_Parameter("Zone_Anim_Step_Y");

	push	OFFSET ??_C@_0BB@GBAPBMPH@Zone_Anim_Step_Y?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+76]
$LN4@Created:

; 1686 :   }
; 1687 : 
; 1688 : 
; 1689 :   m_bAiIgnore = (Get_Parameter_Count() >= 10) ? Get_Bool_Parameter("AI_Ignore") : false;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter_Count@ScriptImpClass@@QAEHXZ ; ScriptImpClass::Get_Parameter_Count
	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN11@Created
	push	OFFSET ??_C@_09FNOAKNMM@AI_Ignore?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z ; ScriptImpClass::Get_Bool_Parameter
	mov	BYTE PTR tv214[ebp], al
	jmp	SHORT $LN12@Created
$LN11@Created:
	mov	BYTE PTR tv214[ebp], 0
$LN12@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv214[ebp]
	mov	BYTE PTR [eax+80], cl

; 1690 : 
; 1691 :   if (!pObj->As_ScriptZoneGameObj())

	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	test	eax, eax
	jne	$LN3@Created

; 1692 :   {
; 1693 :     // Create the miner script zone
; 1694 :     Matrix3 rotation(true);

	push	1
	lea	ecx, DWORD PTR _rotation$6[ebp]
	call	??0Matrix3@@QAE@_N@Z			; Matrix3::Matrix3

; 1695 :     rotation.Rotate_Z(DEG2RAD(Commands->Get_Facing(pObj)));

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv370[ebp]
	movss	xmm0, DWORD PTR tv370[ebp]
	divss	xmm0, DWORD PTR __real@43340000
	mulss	xmm0, DWORD PTR __real@40490fdb
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rotation$6[ebp]
	call	?Rotate_Z@Matrix3@@QAEXM@Z		; Matrix3::Rotate_Z

; 1696 : 
; 1697 :     // Define the bounding box and create the zone
; 1698 :     OBBoxClass zoneBoundingBox ( Commands->Get_Position(pObj), m_zoneSizeFull, rotation );

	lea	eax, DWORD PTR _rotation$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _zoneBoundingBox$5[ebp]
	call	??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z ; OBBoxClass::OBBoxClass

; 1699 :     if ( GameObject* pMinerZone = Create_Zone("Script_Zone_All",zoneBoundingBox) )

	lea	eax, DWORD PTR _zoneBoundingBox$5[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@HNDGJMLL@Script_Zone_All?$AA@
	call	?Create_Zone@@YAPAVScriptableGameObj@@PBDAAVOBBoxClass@@@Z ; Create_Zone
	add	esp, 8
	mov	DWORD PTR _pMinerZone$4[ebp], eax
	cmp	DWORD PTR _pMinerZone$4[ebp], 0
	je	$LN2@Created

; 1700 :     {
; 1701 :       m_minerZoneId = Commands->Get_ID(pMinerZone);

	mov	eax, DWORD PTR _pMinerZone$4[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 1702 : 
; 1703 :       // Attach observer to the script zone
; 1704 :       m_pZoneObserver = new dp88_Ore_Field_Observer(this);

	push	OFFSET ??_C@_0BI@HLHLGIBG@dp88_Ore_Field?3?3Created?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 46					; 0000002eH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN16@Created
	xor	edx, edx
	jne	SHORT $LN13@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 46					; 0000002eH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Created:
	mov	DWORD PTR tv267[ebp], 0
	jmp	SHORT $LN17@Created
$LN16@Created:
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN14@Created
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0dp88_Ore_Field_Observer@dp88_Ore_Field@@QAE@PAV1@@Z ; dp88_Ore_Field::dp88_Ore_Field_Observer::dp88_Ore_Field_Observer
	mov	DWORD PTR tv265[ebp], eax
	jmp	SHORT $LN15@Created
$LN14@Created:
	mov	DWORD PTR tv265[ebp], 0
$LN15@Created:
	mov	eax, DWORD PTR tv265[ebp]
	mov	DWORD PTR tv267[ebp], eax
$LN17@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv267[ebp]
	mov	DWORD PTR [ecx+84], edx

; 1705 :       pMinerZone->Add_Observer(m_pZoneObserver);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	ecx, DWORD PTR _pMinerZone$4[ebp]
	call	?Add_Observer@ScriptableGameObj@@QAEXPAVGameObjObserverClass@@@Z ; ScriptableGameObj::Add_Observer

; 1706 : 
; 1707 :       return;

	jmp	SHORT $LN9@Created
$LN2@Created:

; 1708 :     }
; 1709 :   }
; 1710 :   else

	jmp	SHORT $LN1@Created
$LN3@Created:

; 1711 :   {
; 1712 :     m_minerZoneId = Commands->Get_ID(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 1713 :     return;

	jmp	SHORT $LN9@Created
$LN1@Created:

; 1714 :   }
; 1715 : 
; 1716 :   m_pZoneObserver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 1717 :   Console_Output ( "[%d:%s:%s] Critical Error: Unable to create the miner script zone. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FJ@HJNJMOHF@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Unabl@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 1718 :   Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script
$LN9@Created:

; 1719 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Ore_Field@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Field::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ??0dp88_Ore_Field@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Ore_Field@@QAE@XZ PROC				; dp88_Ore_Field::dp88_Ore_Field, COMDAT
; _this$ = ecx

; 448  :   dp88_Ore_Field() : m_pZoneObserver(NULL) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Ore_Field@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Ore_Field@@QAE@XZ ENDP				; dp88_Ore_Field::dp88_Ore_Field
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_Chrono_Miner_Chronozone@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_Chrono_Miner_Chronozone@@UAEPAXI@Z PROC	; dp88_AR_Chrono_Miner_Chronozone::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_Chrono_Miner_Chronozone@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_Chrono_Miner_Chronozone@@UAEPAXI@Z ENDP	; dp88_AR_Chrono_Miner_Chronozone::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_Chrono_Miner_Chronozone@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_Chrono_Miner_Chronozone@@UAE@XZ PROC		; dp88_AR_Chrono_Miner_Chronozone::~dp88_AR_Chrono_Miner_Chronozone, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_Chrono_Miner_Chronozone@@UAE@XZ ENDP		; dp88_AR_Chrono_Miner_Chronozone::~dp88_AR_Chrono_Miner_Chronozone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AR_Chrono_Miner_Chronozone@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_Chrono_Miner_Chronozone@@QAE@XZ PROC		; dp88_AR_Chrono_Miner_Chronozone::dp88_AR_Chrono_Miner_Chronozone, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_Chrono_Miner_Chronozone@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_Chrono_Miner_Chronozone@@QAE@XZ ENDP		; dp88_AR_Chrono_Miner_Chronozone::dp88_AR_Chrono_Miner_Chronozone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_Chrono_Miner_Chronozone@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_gameController$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_Chrono_Miner_Chronozone@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Chrono_Miner_Chronozone::Created, COMDAT
; _this$ = ecx

; 1626 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1627 :   // If the game controller does not exist then bail out
; 1628 :   GameObject *gameController = Find_Object_With_Script("dp88_ar_gameController");

	push	OFFSET ??_C@_0BH@CAOJFLI@dp88_ar_gameController?$AA@
	call	?Find_Object_With_Script@@YAPAVScriptableGameObj@@PBD@Z ; Find_Object_With_Script
	add	esp, 4
	mov	DWORD PTR _gameController$[ebp], eax

; 1629 :   if ( !gameController )

	cmp	DWORD PTR _gameController$[ebp], 0
	jne	SHORT $LN1@Created

; 1630 :   {
; 1631 :     Console_Output ( "dp88_AR_Chrono_Miner_Chronozone - Unable to find Game Controller, unable to continue. Destroying script...\n" );

	push	OFFSET ??_C@_0GM@LGOKCEAC@dp88_AR_Chrono_Miner_Chronozone?5@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 4

; 1632 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 1633 :     return;

	jmp	SHORT $LN2@Created
$LN1@Created:

; 1634 :   }
; 1635 : 
; 1636 :   chronominer_id = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN2@Created:

; 1637 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_Chrono_Miner_Chronozone@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Chrono_Miner_Chronozone::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_Chrono_Miner@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_Chrono_Miner@@UAEPAXI@Z PROC		; dp88_AR_Chrono_Miner::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_Chrono_Miner@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_Chrono_Miner@@UAEPAXI@Z ENDP		; dp88_AR_Chrono_Miner::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_Chrono_Miner@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_Chrono_Miner@@UAE@XZ PROC			; dp88_AR_Chrono_Miner::~dp88_AR_Chrono_Miner, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Ore_Miner@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_Chrono_Miner@@UAE@XZ ENDP			; dp88_AR_Chrono_Miner::~dp88_AR_Chrono_Miner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AR_Chrono_Miner@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_Chrono_Miner@@QAE@XZ PROC			; dp88_AR_Chrono_Miner::dp88_AR_Chrono_Miner, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_Ore_Miner@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_Chrono_Miner@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_Chrono_Miner@@QAE@XZ ENDP			; dp88_AR_Chrono_Miner::dp88_AR_Chrono_Miner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?CanChronoshiftToLocation@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@AAVVector3@@@Z
_TEXT	SEGMENT
tv88 = -128						; size = 4
tv83 = -124						; size = 4
$T1 = -120						; size = 48
_mphys$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_location$ = 12						; size = 4
?CanChronoshiftToLocation@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@AAVVector3@@@Z PROC ; dp88_AR_Chrono_Miner::CanChronoshiftToLocation, COMDAT
; _this$ = ecx

; 1579 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1580 :   // Get physical game object and moveable phys class references
; 1581 :   MoveablePhysClass* mphys = ( obj->As_PhysicalGameObj() ) ? obj->As_PhysicalGameObj()->Peek_Physical_Object()->As_MoveablePhysClass() : NULL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	test	eax, eax
	je	SHORT $LN4@CanChronos
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, eax
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv83[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN5@CanChronos
$LN4@CanChronos:
	mov	DWORD PTR tv88[ebp], 0
$LN5@CanChronos:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _mphys$[ebp], ecx

; 1582 : 
; 1583 :   // Can we move to this position without getting stuck?
; 1584 :   if (mphys)

	cmp	DWORD PTR _mphys$[ebp], 0
	je	SHORT $LN1@CanChronos

; 1585 :   {
; 1586 : 	return mphys->Can_Teleport( Matrix3D(location) );

	push	0
	push	0
	mov	eax, DWORD PTR _location$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Matrix3D@@QAE@ABVVector3@@@Z		; Matrix3D::Matrix3D
	push	eax
	mov	ecx, DWORD PTR _mphys$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _mphys$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	jmp	SHORT $LN2@CanChronos
$LN1@CanChronos:

; 1587 :   }
; 1588 :   return false;

	xor	al, al
$LN2@CanChronos:

; 1589 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?CanChronoshiftToLocation@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@AAVVector3@@@Z ENDP ; dp88_AR_Chrono_Miner::CanChronoshiftToLocation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Do_Chronoshift@dp88_AR_Chrono_Miner@@AAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
$T1 = -104						; size = 12
_zonePos$2 = -24					; size = 12
_chronozone_script$3 = -12				; size = 4
_zone$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target_zone_id$ = 12					; size = 4
?Do_Chronoshift@dp88_AR_Chrono_Miner@@AAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AR_Chrono_Miner::Do_Chronoshift, COMDAT
; _this$ = ecx

; 1521 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1522 :   // Unimmobilise the vehicle
; 1523 :   if ( obj->As_VehicleGameObj() )

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN9@Do_Chronos

; 1524 :     obj->As_VehicleGameObj()->Set_Immovable(false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	ecx, eax
	call	?Set_Immovable@VehicleGameObj@@QAEX_N@Z	; VehicleGameObj::Set_Immovable
$LN9@Do_Chronos:

; 1525 : 
; 1526 :   /* Get the target chronoshift zone */
; 1527 :   GameObject *zone = Commands->Find_Object(target_zone_id);

	mov	eax, DWORD PTR _target_zone_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	mov	DWORD PTR _zone$[ebp], eax

; 1528 :   if ( zone != NULL )

	cmp	DWORD PTR _zone$[ebp], 0
	je	$LN8@Do_Chronos

; 1529 :   {
; 1530 :     // NB: We use the AI state flag to determine if we are currently in the middle
; 1531 :     // of a chronoshift for player driven miners too
; 1532 :     m_aiState = MINER_AISTATE_IDLE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 1533 : 
; 1534 :     // Get a reference to the chronozone script and check if the chronominer_id
; 1535 :     // matches ours. If so zero it and continue, otherwise bail out...
; 1536 :     dp88_AR_Chrono_Miner_Chronozone *chronozone_script = (dp88_AR_Chrono_Miner_Chronozone*)Find_Script_On_Object(zone, "dp88_AR_Chrono_Miner_Chronozone");

	push	OFFSET ??_C@_0CA@CFCDHMOJ@dp88_AR_Chrono_Miner_Chronozone?$AA@
	mov	eax, DWORD PTR _zone$[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	mov	DWORD PTR _chronozone_script$3[ebp], eax

; 1537 :     if ( !chronozone_script || chronozone_script->chronominer_id != Commands->Get_ID(obj) )

	cmp	DWORD PTR _chronozone_script$3[ebp], 0
	je	SHORT $LN6@Do_Chronos
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _chronozone_script$3[ebp]
	cmp	DWORD PTR [ecx+28], eax
	je	SHORT $LN7@Do_Chronos
$LN6@Do_Chronos:

; 1538 :     {
; 1539 :       // Have another go at a chronoshift...
; 1540 :       ReturnToRefinery(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax

; 1541 :       return;

	jmp	$LN10@Do_Chronos
$LN7@Do_Chronos:

; 1542 :     }
; 1543 : 
; 1544 :     chronozone_script->chronominer_id = 0;

	mov	eax, DWORD PTR _chronozone_script$3[ebp]
	mov	DWORD PTR [eax+28], 0

; 1545 : 
; 1546 :     // Chronoshift to position of zone (resetting rotation in the process)
; 1547 :     Vector3 zonePos = Commands->Get_Position(zone);

	mov	eax, DWORD PTR _zone$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _zonePos$2[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 1548 :     if ( CanChronoshiftToLocation(obj, zonePos) )

	lea	eax, DWORD PTR _zonePos$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanChronoshiftToLocation@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@AAVVector3@@@Z ; dp88_AR_Chrono_Miner::CanChronoshiftToLocation
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Do_Chronos

; 1549 :       Set_Transform(obj, Matrix3D(zonePos) );

	sub	esp, 48					; 00000030H
	mov	ecx, esp
	lea	eax, DWORD PTR _zonePos$2[ebp]
	push	eax
	call	??0Matrix3D@@QAE@ABVVector3@@@Z		; Matrix3D::Matrix3D
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?Set_Transform@@YAXPAVScriptableGameObj@@VMatrix3D@@@Z ; Set_Transform
	add	esp, 52					; 00000034H

; 1550 :     else

	jmp	SHORT $LN8@Do_Chronos
$LN5@Do_Chronos:

; 1551 :     {
; 1552 :       // Oh noes! Some dipstick has driven into the chronoshift zone... try again
; 1553 :       ReturnToRefinery(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax

; 1554 :       return;

	jmp	SHORT $LN10@Do_Chronos
$LN8@Do_Chronos:

; 1555 :     }
; 1556 :   }
; 1557 : 
; 1558 : 
; 1559 :   /* If using AI start driving to refinery now */
; 1560 :   if ( m_bUseAI )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN10@Do_Chronos

; 1561 :   {
; 1562 :     if ( m_oreMined > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jle	SHORT $LN2@Do_Chronos

; 1563 :     {
; 1564 :       dp88_Ore_Miner::ReturnToRefinery(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReturnToRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::ReturnToRefinery

; 1565 :     }
; 1566 : 
; 1567 :     // No ore collected... guess we must have chronoshifted away from an attack
; 1568 :     // so lets set off towards the ore field again... what a waste of time!
; 1569 :     else

	jmp	SHORT $LN10@Do_Chronos
$LN2@Do_Chronos:

; 1570 :     {
; 1571 :       DriveToOreField(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN10@Do_Chronos:

; 1572 :     }
; 1573 :   }
; 1574 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Do_Chronoshift@dp88_AR_Chrono_Miner@@AAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AR_Chrono_Miner::Do_Chronoshift
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Start_Chronoshift@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv385 = -200						; size = 4
tv362 = -200						; size = 4
tv336 = -200						; size = 4
$T1 = -196						; size = 12
$T2 = -180						; size = 12
$T3 = -168						; size = 12
$T4 = -156						; size = 12
$T5 = -141						; size = 1
_params$6 = -76						; size = 4
_effectObject$7 = -72					; size = 4
_params$8 = -68						; size = 4
_effectObject$9 = -64					; size = 4
_zonePos$10 = -60					; size = 12
_chronozone_script$11 = -48				; size = 4
_zone$12 = -44						; size = 4
_x$13 = -40						; size = 4
_chronoZones$14 = -36					; size = 12
_refineryPos$15 = -24					; size = 12
_maxDist$16 = -12					; size = 4
_refinery$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Start_Chronoshift@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@@Z PROC ; dp88_AR_Chrono_Miner::Start_Chronoshift, COMDAT
; _this$ = ecx

; 1426 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1427 :   // If we are currently chronoshifting then bail out
; 1428 :   if ( m_aiState == CMINER_AISTATE_CHRONOSHIFTING )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 7
	jne	SHORT $LN14@Start_Chro

; 1429 :     return false;

	xor	al, al
	jmp	$LN15@Start_Chro
$LN14@Start_Chro:

; 1430 : 
; 1431 :   /* Find a zone to chronoshift in to */
; 1432 :   GameObject *refinery = Find_Refinery(Commands->Get_Player_Type(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	push	eax
	call	?Find_Refinery@@YAPAVScriptableGameObj@@H@Z ; Find_Refinery
	add	esp, 4
	mov	DWORD PTR _refinery$[ebp], eax

; 1433 :   if ( refinery != NULL )

	cmp	DWORD PTR _refinery$[ebp], 0
	je	$LN13@Start_Chro

; 1434 :   {
; 1435 :     // Check the refinery is not dead - if it is then the target script zones will
; 1436 :     // all be gone, so we have nowhere to go...
; 1437 :     if ( Commands->Get_Health(refinery) == 0 )

	mov	eax, DWORD PTR _refinery$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv336[ebp]
	movss	xmm0, DWORD PTR tv336[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@Start_Chro

; 1438 :       return false;

	xor	al, al
	jmp	$LN15@Start_Chro
$LN12@Start_Chro:

; 1439 : 
; 1440 :     // Define the maximum distance we will shift from the refinery - this prevents us
; 1441 :     // from going to the enemy refinery
; 1442 :     const float maxDist = 50.0f;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _maxDist$16[ebp], xmm0

; 1443 :     Vector3 refineryPos = Commands->Get_Position(refinery);

	mov	eax, DWORD PTR _refinery$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _refineryPos$15[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 1444 : 
; 1445 :     SList<GameObject> chronoZones;

	lea	ecx, DWORD PTR _chronoZones$14[ebp]
	call	??0?$SList@VScriptableGameObj@@@@QAE@XZ	; SList<ScriptableGameObj>::SList<ScriptableGameObj>

; 1446 :     Find_All_Objects_With_Script_By_Distance ( "dp88_AR_Chrono_Miner_Chronozone", chronoZones, refineryPos );

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	eax, DWORD PTR _refineryPos$15[ebp]
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	lea	ecx, DWORD PTR _chronoZones$14[ebp]
	push	ecx
	push	OFFSET ??_C@_0CA@CFCDHMOJ@dp88_AR_Chrono_Miner_Chronozone?$AA@
	call	?Find_All_Objects_With_Script_By_Distance@@YAXPBDAAV?$SList@VScriptableGameObj@@@@VVector3@@@Z ; Find_All_Objects_With_Script_By_Distance
	add	esp, 20					; 00000014H

; 1447 : 
; 1448 :     for ( SLNode<GameObject>* x = chronoZones.Head(); x != NULL; x = x->Next() )

	lea	ecx, DWORD PTR _chronoZones$14[ebp]
	call	?Head@?$SList@VScriptableGameObj@@@@QBEPAV?$SLNode@VScriptableGameObj@@@@XZ ; SList<ScriptableGameObj>::Head
	mov	DWORD PTR _x$13[ebp], eax
	jmp	SHORT $LN11@Start_Chro
$LN10@Start_Chro:
	mov	ecx, DWORD PTR _x$13[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _x$13[ebp], eax
$LN11@Start_Chro:
	cmp	DWORD PTR _x$13[ebp], 0
	je	$LN9@Start_Chro

; 1449 :     {
; 1450 :       GameObject* zone = x->Data();

	mov	ecx, DWORD PTR _x$13[ebp]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	mov	DWORD PTR _zone$12[ebp], eax

; 1451 :       dp88_AR_Chrono_Miner_Chronozone *chronozone_script = NULL;

	mov	DWORD PTR _chronozone_script$11[ebp], 0

; 1452 : 
; 1453 :       if ( !zone )

	cmp	DWORD PTR _zone$12[ebp], 0
	jne	SHORT $LN8@Start_Chro

; 1454 :         continue;

	jmp	SHORT $LN10@Start_Chro
$LN8@Start_Chro:

; 1455 : 
; 1456 :       // OK, got a candidate zone, can we chronoshift here?
; 1457 :       Vector3 zonePos = Commands->Get_Position(zone);

	mov	eax, DWORD PTR _zone$12[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _zonePos$10[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 1458 :       if (Vector3::Distance_Squared(zonePos, refineryPos) > maxDist * maxDist || !CanChronoshiftToLocation(obj, zonePos) )

	lea	eax, DWORD PTR _refineryPos$15[ebp]
	push	eax
	lea	ecx, DWORD PTR _zonePos$10[ebp]
	push	ecx
	call	?Distance_Squared@Vector3@@SAMABV1@0@Z	; Vector3::Distance_Squared
	add	esp, 8
	fstp	DWORD PTR tv362[ebp]
	movss	xmm0, DWORD PTR tv362[ebp]
	movss	xmm1, DWORD PTR _maxDist$16[ebp]
	mulss	xmm1, DWORD PTR _maxDist$16[ebp]
	comiss	xmm0, xmm1
	ja	SHORT $LN6@Start_Chro
	lea	eax, DWORD PTR _zonePos$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanChronoshiftToLocation@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@AAVVector3@@@Z ; dp88_AR_Chrono_Miner::CanChronoshiftToLocation
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@Start_Chro
$LN6@Start_Chro:

; 1459 :         continue;

	jmp	$LN10@Start_Chro
$LN7@Start_Chro:

; 1460 : 
; 1461 :       // Is this zone in use for another chronoshift operation? If so then we cannot use it
; 1462 :       chronozone_script = (dp88_AR_Chrono_Miner_Chronozone*)Find_Script_On_Object(zone, "dp88_AR_Chrono_Miner_Chronozone");

	push	OFFSET ??_C@_0CA@CFCDHMOJ@dp88_AR_Chrono_Miner_Chronozone?$AA@
	mov	eax, DWORD PTR _zone$12[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	mov	DWORD PTR _chronozone_script$11[ebp], eax

; 1463 :       if ( !chronozone_script || (chronozone_script->chronominer_id != NULL
; 1464 :                     && Commands->Find_Object(chronozone_script->chronominer_id)
; 1465 :                     && Commands->Get_Health(Commands->Find_Object(chronozone_script->chronominer_id)) > 0) )

	cmp	DWORD PTR _chronozone_script$11[ebp], 0
	je	SHORT $LN4@Start_Chro
	mov	eax, DWORD PTR _chronozone_script$11[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@Start_Chro
	mov	eax, DWORD PTR _chronozone_script$11[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@Start_Chro
	mov	eax, DWORD PTR _chronozone_script$11[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv385[ebp]
	movss	xmm0, DWORD PTR tv385[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@Start_Chro
$LN4@Start_Chro:

; 1466 :       {
; 1467 :         continue;

	jmp	$LN10@Start_Chro
$LN5@Start_Chro:

; 1468 :       }
; 1469 : 
; 1470 : 
; 1471 :       // OK, got ourselves a target zone, lock the zone to our ID and set up for chronoshift...
; 1472 :       chronozone_script->chronominer_id = Commands->Get_ID(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _chronozone_script$11[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1473 : 
; 1474 :       // NB: We use the AI state flag to determine if we are currently in the middle of
; 1475 :       // a chronoshift for player driven miners too
; 1476 :       m_aiState = CMINER_AISTATE_CHRONOSHIFTING;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 7

; 1477 :     
; 1478 :       // Immobilise the vehicle
; 1479 :       if ( obj->As_VehicleGameObj() )

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN3@Start_Chro

; 1480 :         obj->As_VehicleGameObj()->Set_Immovable(true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	ecx, eax
	call	?Set_Immovable@VehicleGameObj@@QAEX_N@Z	; VehicleGameObj::Set_Immovable
$LN3@Start_Chro:

; 1481 : 
; 1482 :       // Send a delayed custom to perform the chronoshift
; 1483 :       Commands->Send_Custom_Event ( obj, obj, CUSTOM_CHRONO_MINER_DO_CHRONOSHIFT, Commands->Get_ID(zone), Get_Float_Parameter("chronoshift_time") );

	push	OFFSET ??_C@_0BB@DCMPPMMN@chronoshift_time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _zone$12[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	-637206521				; da050007H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 1484 : 
; 1485 : 
; 1486 :       /* If we have an out effect preset to spawn then spawn it at the origin */
; 1487 :       if ( Is_Valid_Preset(Get_Parameter("chronoshift_out_effect_preset")) )

	push	OFFSET ??_C@_0BO@FIFKCKDL@chronoshift_out_effect_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	$LN2@Start_Chro

; 1488 :       {
; 1489 :         // Create effect object
; 1490 :         GameObject* effectObject = Commands->Create_Object ( Get_Parameter("chronoshift_out_effect_preset"), Commands->Get_Position(obj) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BO@FIFKCKDL@chronoshift_out_effect_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _effectObject$9[ebp], eax

; 1491 : 
; 1492 :         // Attach script to clean up effect
; 1493 :         StringClass params(true);

	push	1
	lea	ecx, DWORD PTR _params$8[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 1494 :         params.Format ( "%.2f,%d", Get_Float_Parameter("chronoshift_out_effect_time"), 983142 );

	push	983142					; 000f0066H
	push	OFFSET ??_C@_0BM@ODINNJLO@chronoshift_out_effect_time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@
	lea	eax, DWORD PTR _params$8[ebp]
	push	eax
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 1495 :         Commands->Attach_Script ( effectObject, "JFW_Destroy_Self_Timer", params.Peek_Buffer() );

	lea	ecx, DWORD PTR _params$8[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	push	OFFSET ??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@
	mov	eax, DWORD PTR _effectObject$9[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 12					; 0000000cH

; 1496 :       }

	lea	ecx, DWORD PTR _params$8[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN2@Start_Chro:

; 1497 : 
; 1498 : 
; 1499 :       /* If we have an in effect preset to spawn then spawn it at the destination */
; 1500 :       if ( Is_Valid_Preset(Get_Parameter("chronoshift_in_effect_preset")) )

	push	OFFSET ??_C@_0BN@IMGAEHDB@chronoshift_in_effect_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	$LN1@Start_Chro

; 1501 :       {
; 1502 :         // Create effect object
; 1503 :         GameObject* effectObject = Commands->Create_Object ( Get_Parameter("chronoshift_in_effect_preset"), Commands->Get_Position ( zone ) );

	mov	eax, DWORD PTR _zone$12[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BN@IMGAEHDB@chronoshift_in_effect_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _effectObject$7[ebp], eax

; 1504 :       
; 1505 :         // Attach script to clean up effect
; 1506 :         StringClass params(true);

	push	1
	lea	ecx, DWORD PTR _params$6[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 1507 :         params.Format ( "%.2f,%d", Get_Float_Parameter("chronoshift_in_effect_time"), 983142 );

	push	983142					; 000f0066H
	push	OFFSET ??_C@_0BL@HDHHGK@chronoshift_in_effect_time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@
	lea	eax, DWORD PTR _params$6[ebp]
	push	eax
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 1508 :         Commands->Attach_Script ( effectObject, "JFW_Destroy_Self_Timer", params.Peek_Buffer() );

	lea	ecx, DWORD PTR _params$6[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	push	OFFSET ??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@
	mov	eax, DWORD PTR _effectObject$7[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 12					; 0000000cH

; 1509 :       }

	lea	ecx, DWORD PTR _params$6[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@Start_Chro:

; 1510 : 
; 1511 :       return true;

	mov	BYTE PTR $T5[ebp], 1
	lea	ecx, DWORD PTR _chronoZones$14[ebp]
	call	??1?$SList@VScriptableGameObj@@@@UAE@XZ	; SList<ScriptableGameObj>::~SList<ScriptableGameObj>
	mov	al, BYTE PTR $T5[ebp]
	jmp	SHORT $LN15@Start_Chro

; 1512 :     }

	jmp	$LN10@Start_Chro
$LN9@Start_Chro:

; 1513 :   }

	lea	ecx, DWORD PTR _chronoZones$14[ebp]
	call	??1?$SList@VScriptableGameObj@@@@UAE@XZ	; SList<ScriptableGameObj>::~SList<ScriptableGameObj>
$LN13@Start_Chro:

; 1514 : 
; 1515 :   return false;

	xor	al, al
$LN15@Start_Chro:

; 1516 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Start_Chronoshift@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Chrono_Miner::Start_Chronoshift
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?ReturnToRefinery@dp88_AR_Chrono_Miner@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?ReturnToRefinery@dp88_AR_Chrono_Miner@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Chrono_Miner::ReturnToRefinery, COMDAT
; _this$ = ecx

; 1410 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1411 :   // Attempt to chronoshift to the refinery
; 1412 :   if ( !Start_Chronoshift(obj) )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Chronoshift@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@@Z ; dp88_AR_Chrono_Miner::Start_Chronoshift
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@ReturnToRe

; 1413 :   {
; 1414 :     // Can't chronoshift... drive there instead!
; 1415 :     dp88_Ore_Miner::ReturnToRefinery(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReturnToRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::ReturnToRefinery

; 1416 :     Send_Message_Team ( Get_Object_Type(obj), 153, 204, 25, "The AI Chronominer was unable to chronoshift, please clear the area around the refinery" );

	push	OFFSET ??_C@_0FI@PGKDDPLE@The?5AI?5Chronominer?5was?5unable?5to@
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	call	?Send_Message_Team@@YAXHIIIPBD@Z	; Send_Message_Team
	add	esp, 20					; 00000014H

; 1417 : 
; 1418 :     // Send a delayed custom to retry the chronoshift in 5 seconds
; 1419 :     Commands->Send_Custom_Event(obj,obj,CUSTOM_CHRONO_MINER_RETRY_CHRONOSHIFT,0,5.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	-637206520				; da050008H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN1@ReturnToRe:

; 1420 :   }
; 1421 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ReturnToRefinery@dp88_AR_Chrono_Miner@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Chrono_Miner::ReturnToRefinery
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?KeyHook@dp88_AR_Chrono_Miner@@UAEXXZ
_TEXT	SEGMENT
_obj$ = -8						; size = 4
_this$ = -4						; size = 4
?KeyHook@dp88_AR_Chrono_Miner@@UAEXXZ PROC		; dp88_AR_Chrono_Miner::KeyHook, COMDAT
; _this$ = ecx

; 1394 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1395 :   // Find object
; 1396 :   GameObject* obj = Commands->Find_Object ( objectId );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 1397 :   if ( !obj )

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN3@KeyHook

; 1398 :     return;

	jmp	SHORT $LN4@KeyHook
$LN3@KeyHook:

; 1399 : 
; 1400 :   if ( m_aiState != CMINER_AISTATE_CHRONOSHIFTING )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 7
	je	SHORT $LN4@KeyHook

; 1401 :   {
; 1402 :     if ( !Start_Chronoshift(obj) )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Chronoshift@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@@Z ; dp88_AR_Chrono_Miner::Start_Chronoshift
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@KeyHook

; 1403 :       Send_Message_Player ( Get_Vehicle_Driver(obj), 153, 204, 25, "Unable to chronoshift, all target zones are unavailable..." );

	push	OFFSET ??_C@_0DL@EGDHOOGB@Unable?5to?5chronoshift?0?5all?5targe@
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H
$LN4@KeyHook:

; 1404 :   }
; 1405 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyHook@dp88_AR_Chrono_Miner@@UAEXXZ ENDP		; dp88_AR_Chrono_Miner::KeyHook
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
tv214 = -100						; size = 4
$T1 = -96						; size = 12
$T2 = -84						; size = 12
_refinery$3 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_AR_Chrono_Miner::Custom, COMDAT
; _this$ = ecx

; 1348 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1349 :   // Look for vehicle entry
; 1350 :   if ( type == CUSTOM_EVENT_VEHICLE_ENTERED && driverId == NULL )

	cmp	DWORD PTR _type$[ebp], 1000000028	; 3b9aca1cH
	jne	SHORT $LN10@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jne	SHORT $LN10@Custom

; 1351 :   {
; 1352 :     driverId = Commands->Get_ID(sender);

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+104], eax

; 1353 :     InstallHook( Get_Parameter("chronoshiftKeyhook"), sender );

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@JCAONOKO@chronoshiftKeyhook?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InstallHook@JFW_Key_Hook_Base@@QAEXPBDPAVScriptableGameObj@@@Z ; JFW_Key_Hook_Base::InstallHook
	jmp	$LN1@Custom
$LN10@Custom:

; 1354 :   }
; 1355 : 
; 1356 : 
; 1357 :   // Look for vehicle exit
; 1358 :   else if ( type == CUSTOM_EVENT_VEHICLE_EXITED && Commands->Get_ID(sender) == driverId )

	cmp	DWORD PTR _type$[ebp], 1000000029	; 3b9aca1dH
	jne	SHORT $LN8@Custom
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+104]
	jne	SHORT $LN8@Custom

; 1359 :   {
; 1360 :     driverId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1361 :     RemoveHook();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveHook@JFW_Key_Hook_Base@@QAEXXZ	; JFW_Key_Hook_Base::RemoveHook
	jmp	$LN1@Custom
$LN8@Custom:

; 1362 :   }
; 1363 :   
; 1364 :   
; 1365 :   // AI miner failed to chronoshift back to the refinery, if we are still more than 150m
; 1366 :   // from the target then try again
; 1367 :   else if ( type == CUSTOM_CHRONO_MINER_RETRY_CHRONOSHIFT && m_aiState == MINER_AISTATE_RETURN_TO_REFINERY )

	cmp	DWORD PTR _type$[ebp], -637206520	; da050008H
	jne	$LN6@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 4
	jne	$LN6@Custom

; 1368 :   {
; 1369 :     GameObject *refinery = Find_Refinery(Commands->Get_Player_Type(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	push	eax
	call	?Find_Refinery@@YAPAVScriptableGameObj@@H@Z ; Find_Refinery
	add	esp, 4
	mov	DWORD PTR _refinery$3[ebp], eax

; 1370 :     if ( refinery != NULL && Commands->Get_Distance(Commands->Get_Position(refinery),Commands->Get_Position(obj)) > 150.0f )

	cmp	DWORD PTR _refinery$3[ebp], 0
	je	$LN4@Custom
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _refinery$3[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 8
	fstp	DWORD PTR tv214[ebp]
	movss	xmm0, DWORD PTR tv214[ebp]
	comiss	xmm0, DWORD PTR __real@43160000
	jbe	SHORT $LN4@Custom

; 1371 :     {
; 1372 :       // Try to chronoshift and, on failure, set timer to try again in 5 seconds
; 1373 :       if ( !Start_Chronoshift(obj) )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Chronoshift@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@@Z ; dp88_AR_Chrono_Miner::Start_Chronoshift
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@Custom

; 1374 :         Commands->Send_Custom_Event(obj,obj,CUSTOM_CHRONO_MINER_RETRY_CHRONOSHIFT,0,5.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	-637206520				; da050008H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN4@Custom:

; 1375 :     }
; 1376 :   }

	jmp	SHORT $LN1@Custom
$LN6@Custom:

; 1377 :   
; 1378 :   
; 1379 :   // Time to perform a chronoshift!
; 1380 :   else if ( type == CUSTOM_CHRONO_MINER_DO_CHRONOSHIFT )

	cmp	DWORD PTR _type$[ebp], -637206521	; da050007H
	jne	SHORT $LN2@Custom

; 1381 :   {
; 1382 :     Do_Chronoshift(obj,param);

	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Do_Chronoshift@dp88_AR_Chrono_Miner@@AAEXPAVScriptableGameObj@@H@Z ; dp88_AR_Chrono_Miner::Do_Chronoshift

; 1383 :   }
; 1384 : 
; 1385 : 
; 1386 :   // Otherwise pass the message on to the base class
; 1387 :   else

	jmp	SHORT $LN1@Custom
$LN2@Custom:

; 1388 :     dp88_Ore_Miner::Custom ( obj, type, param, sender );

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _param$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Custom@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_Ore_Miner::Custom
$LN1@Custom:

; 1389 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_AR_Chrono_Miner::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Damaged@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
tv155 = -88						; size = 4
tv163 = -84						; size = 4
tv151 = -80						; size = 4
tv161 = -76						; size = 4
tv144 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AR_Chrono_Miner::Damaged, COMDAT
; _this$ = ecx

; 1333 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1334 :   // If AI miner health drops below the emergency chronoshift health threshold and we are driving to
; 1335 :   // the ore field or collecting ore then begin an emergency chronoshift
; 1336 :   if ( m_bUseAI && Commands->Get_Health(obj) < (Commands->Get_Max_Health(obj)*(Get_Float_Parameter("emergencyChronoshiftHealthThreshold")/100.0f))
; 1337 :     && (m_aiState == MINER_AISTATE_COLLECTING_ORE && m_oreMined > 0) )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	$LN1@Damaged
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv144[ebp]
	movss	xmm0, DWORD PTR tv144[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+224]
	movss	DWORD PTR tv161[ebp], xmm0
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv151[ebp]
	movss	xmm0, DWORD PTR tv151[ebp]
	push	OFFSET ??_C@_0CE@GDNCMBMM@emergencyChronoshiftHealthThresh@
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv163[ebp], xmm0
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv155[ebp]
	movss	xmm0, DWORD PTR tv155[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR tv163[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv161[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN1@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 3
	jne	SHORT $LN1@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jle	SHORT $LN1@Damaged

; 1338 :   {
; 1339 :     // Attempt to start a chronoshift - if it fails don't bother with anything else, driving away
; 1340 :     // won't help...
; 1341 :     Start_Chronoshift(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Start_Chronoshift@dp88_AR_Chrono_Miner@@AAE_NPAVScriptableGameObj@@@Z ; dp88_AR_Chrono_Miner::Start_Chronoshift
$LN1@Damaged:

; 1342 :   }
; 1343 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AR_Chrono_Miner::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Chrono_Miner::Created, COMDAT
; _this$ = ecx

; 1324 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1325 :   dp88_Ore_Miner::Created(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Created@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@@Z ; dp88_Ore_Miner::Created

; 1326 :   objectId = Commands->Get_ID(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], eax

; 1327 :   driverId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1328 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_Chrono_Miner@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Chrono_Miner::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Ore_Miner@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Ore_Miner@@UAEPAXI@Z PROC			; dp88_Ore_Miner::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Ore_Miner@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Ore_Miner@@UAEPAXI@Z ENDP			; dp88_Ore_Miner::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Ore_Miner@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Ore_Miner@@UAE@XZ PROC				; dp88_Ore_Miner::~dp88_Ore_Miner, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Ore_Miner@@UAE@XZ ENDP				; dp88_Ore_Miner::~dp88_Ore_Miner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Ore_Miner@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Ore_Miner@@QAE@XZ PROC				; dp88_Ore_Miner::dp88_Ore_Miner, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0JFW_Key_Hook_Base@@QAE@XZ		; JFW_Key_Hook_Base::JFW_Key_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Ore_Miner@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Ore_Miner@@QAE@XZ ENDP				; dp88_Ore_Miner::dp88_Ore_Miner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z
_TEXT	SEGMENT
tv79 = -85						; size = 1
$T1 = -84						; size = 12
_bLooping$2 = -5					; size = 1
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_animId$ = 12						; size = 4
?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z PROC ; dp88_Ore_Miner::UpdateAnimation, COMDAT
; _this$ = ecx

; 1283 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1284 :   pObj->As_PhysicalGameObj()->Clear_Animation();

	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, eax
	call	?Clear_Animation@PhysicalGameObj@@QAEXXZ ; PhysicalGameObj::Clear_Animation

; 1285 : 
; 1286 :   if ( animId < countof(m_animations) && m_animations[animId] != NULL )

	cmp	DWORD PTR _animId$[ebp], 3
	jae	SHORT $LN2@UpdateAnim
	mov	eax, DWORD PTR _animId$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+76], 0
	je	SHORT $LN2@UpdateAnim

; 1287 :   {
; 1288 :     bool bLooping = (animId == MINER_ANIM_MINING) ? true : false;

	cmp	DWORD PTR _animId$[ebp], 1
	jne	SHORT $LN5@UpdateAnim
	mov	BYTE PTR tv79[ebp], 1
	jmp	SHORT $LN6@UpdateAnim
$LN5@UpdateAnim:
	mov	BYTE PTR tv79[ebp], 0
$LN6@UpdateAnim:
	mov	al, BYTE PTR tv79[ebp]
	mov	BYTE PTR _bLooping$2[ebp], al

; 1289 :     Commands->Set_Animation(pObj,m_animations[animId],bLooping,NULL,0,-1,false);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	movzx	eax, BYTE PTR _bLooping$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _animId$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+76]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+164]
	call	eax
	add	esp, 28					; 0000001cH
$LN2@UpdateAnim:

; 1290 :   }
; 1291 : 
; 1292 :   if (animId < countof(m_animSounds) && m_animSounds[animId] != NULL)

	cmp	DWORD PTR _animId$[ebp], 3
	jae	SHORT $LN1@UpdateAnim
	mov	eax, DWORD PTR _animId$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+88], 0
	je	SHORT $LN1@UpdateAnim

; 1293 :     Commands->Create_Sound(m_animSounds[animId],Commands->Get_Position(pObj),pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _animId$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+88]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+172]
	call	eax
	add	esp, 12					; 0000000cH
$LN1@UpdateAnim:

; 1294 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z ENDP ; dp88_Ore_Miner::UpdateAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?UndockedFromRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?UndockedFromRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Miner::UndockedFromRefinery, COMDAT
; _this$ = ecx

; 1263 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1264 :   // Un-immobilize the vehicle and enable engine sounds
; 1265 :   if ( obj->As_VehicleGameObj() )

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN2@UndockedFr

; 1266 :   {
; 1267 :     obj->As_VehicleGameObj()->Set_Immovable(false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	ecx, eax
	call	?Set_Immovable@VehicleGameObj@@QAEX_N@Z	; VehicleGameObj::Set_Immovable

; 1268 :     Commands->Enable_Engine ( obj, true );

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+552]
	call	edx
	add	esp, 8
$LN2@UndockedFr:

; 1269 :   }
; 1270 : 
; 1271 :   // If using the AI then set the AI state and start driving to the ore field
; 1272 :   if ( m_bUseAI )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN1@UndockedFr

; 1273 :   {
; 1274 :     DriveToOreField(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN1@UndockedFr:

; 1275 :   }
; 1276 : 
; 1277 :   UpdateAnimation(obj, MINER_ANIM_IDLE);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z ; dp88_Ore_Miner::UpdateAnimation

; 1278 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?UndockedFromRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Miner::UndockedFromRefinery
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?DockedAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?DockedAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Miner::DockedAtRefinery, COMDAT
; _this$ = ecx

; 1245 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1246 :   // If we are using AI then reset the action now that we have arrived
; 1247 :   if (m_bUseAI)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN2@DockedAtRe

; 1248 :     Commands->Action_Reset ( obj, 101.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42ca0000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
$LN2@DockedAtRe:

; 1249 : 
; 1250 :   UpdateAnimation(obj, MINER_ANIM_DUMPING);

	push	2
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z ; dp88_Ore_Miner::UpdateAnimation

; 1251 : 
; 1252 :   // Immobilize the vehicle and disable engine sounds
; 1253 :   if ( obj->As_VehicleGameObj() )

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN1@DockedAtRe

; 1254 :   {
; 1255 :     obj->As_VehicleGameObj()->Set_Immovable(true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	ecx, eax
	call	?Set_Immovable@VehicleGameObj@@QAEX_N@Z	; VehicleGameObj::Set_Immovable

; 1256 :     Commands->Enable_Engine ( obj, false );

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+552]
	call	edx
	add	esp, 8
$LN1@DockedAtRe:

; 1257 :   }
; 1258 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DockedAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Miner::DockedAtRefinery
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?DockAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -304						; size = 12
$T2 = -292						; size = 12
_params$3 = -216					; size = 196
_position$4 = -20					; size = 12
_zone$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?DockAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Miner::DockAtRefinery, COMDAT
; _this$ = ecx

; 1220 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1221 :   // Reset current action
; 1222 :   Commands->Action_Reset(obj, 101.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42ca0000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8

; 1223 : 
; 1224 :   /* Find and drive to the refinery unloading area */
; 1225 :   GameObject* zone = Find_Closest_Object_With_Script("dp88_Ore_Dump_Zone", Commands->Get_Position(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	push	OFFSET ??_C@_0BD@EDKPCDPK@dp88_Ore_Dump_Zone?$AA@
	call	?Find_Closest_Object_With_Script@@YAPAVScriptableGameObj@@PBDVVector3@@@Z ; Find_Closest_Object_With_Script
	add	esp, 16					; 00000010H
	mov	DWORD PTR _zone$[ebp], eax

; 1226 :   if ( zone != NULL )

	cmp	DWORD PTR _zone$[ebp], 0
	je	$LN1@DockAtRefi

; 1227 :   {
; 1228 :     Vector3 position = Commands->Get_Position(zone);

	mov	eax, DWORD PTR _zone$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _position$4[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 1229 :     //Console_Output ( "dp88_Ore_Miner: Docking at location: %.2f, %.2f, %.2f\n", position.X, position.Y, position.Z );
; 1230 : 
; 1231 :     /* Setup parameters and get going! */
; 1232 :     ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$3[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 1233 :     params.Set_Basic( this, 100.0f, MINER_ACTIONID_DOCK_AT_REFINERY );

	push	-1
	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$3[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 1234 :     params.Set_Movement ( position, 1.0f, 1.0f );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _position$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$3[ebp]
	call	?Set_Movement@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ; ActionParamsStruct::Set_Movement

; 1235 :     params.MoveBackup = true;

	mov	BYTE PTR _params$3[ebp+68], 1

; 1236 :     params.ShutdownEngineOnArrival = true;

	mov	BYTE PTR _params$3[ebp+72], 1

; 1237 :     params.MovePathfind = true;

	mov	BYTE PTR _params$3[ebp+71], 1

; 1238 :     Commands->Action_Goto(obj, params);

	lea	eax, DWORD PTR _params$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
$LN1@DockAtRefi:

; 1239 :   }
; 1240 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DockAtRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Miner::DockAtRefinery
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?ReturnToRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -308						; size = 12
$T2 = -296						; size = 12
_params$3 = -220					; size = 196
_position$4 = -24					; size = 12
_zone$5 = -12						; size = 4
_refinery$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?ReturnToRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Miner::ReturnToRefinery, COMDAT
; _this$ = ecx

; 1193 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1194 :   /* Find and drive to the refinery */
; 1195 :   m_aiState = MINER_AISTATE_RETURN_TO_REFINERY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 4

; 1196 :   GameObject *refinery = Find_Refinery(Commands->Get_Player_Type(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	push	eax
	call	?Find_Refinery@@YAPAVScriptableGameObj@@H@Z ; Find_Refinery
	add	esp, 4
	mov	DWORD PTR _refinery$[ebp], eax

; 1197 :   if ( refinery != NULL )

	cmp	DWORD PTR _refinery$[ebp], 0
	je	$LN1@ReturnToRe

; 1198 :   {
; 1199 :     GameObject* zone = Find_Closest_Object_With_Script("dp88_Ore_Dump_Zone", Commands->Get_Position(refinery));

	mov	eax, DWORD PTR _refinery$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	push	OFFSET ??_C@_0BD@EDKPCDPK@dp88_Ore_Dump_Zone?$AA@
	call	?Find_Closest_Object_With_Script@@YAPAVScriptableGameObj@@PBDVVector3@@@Z ; Find_Closest_Object_With_Script
	add	esp, 16					; 00000010H
	mov	DWORD PTR _zone$5[ebp], eax

; 1200 :     if ( zone != NULL )

	cmp	DWORD PTR _zone$5[ebp], 0
	je	$LN1@ReturnToRe

; 1201 :     {
; 1202 :       Vector3 position = Commands->Get_Position(zone);

	mov	eax, DWORD PTR _zone$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _position$4[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 1203 :       //Console_Output ( "dp88_Ore_Miner: Driving to location: %.2f, %.2f, %.2f\n", position.X, position.Y, position.Z );
; 1204 : 
; 1205 :       /* Setup parameters and get going! */
; 1206 :       ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$3[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 1207 :       params.Set_Basic( this, 100.0f, MINER_ACTIONID_RETURN_TO_REFINERY );

	push	-1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$3[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 1208 :       params.Set_Movement ( position, 1.0f, 25.0f );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _position$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$3[ebp]
	call	?Set_Movement@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ; ActionParamsStruct::Set_Movement

; 1209 :       params.MovePathfind = true;

	mov	BYTE PTR _params$3[ebp+71], 1

; 1210 :       params.ShutdownEngineOnArrival = true;

	mov	BYTE PTR _params$3[ebp+72], 1

; 1211 :       params.AttackActive = false;

	mov	BYTE PTR _params$3[ebp+109], 0

; 1212 :       Commands->Action_Goto( obj, params );

	lea	eax, DWORD PTR _params$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
$LN1@ReturnToRe:

; 1213 :     }
; 1214 :   }
; 1215 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ReturnToRefinery@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Miner::ReturnToRefinery
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?ExitedOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_oreField$ = 12						; size = 4
?ExitedOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Miner::ExitedOreField, COMDAT
; _this$ = ecx

; 1176 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1177 :   // Reset ore field parameters
; 1178 :   m_oreFieldId    = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1179 :   m_oreFieldRand  = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 1180 : 
; 1181 :   // Stop the mining animation
; 1182 :   UpdateAnimation(obj, MINER_ANIM_IDLE);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z ; dp88_Ore_Miner::UpdateAnimation

; 1183 : 
; 1184 :   // If this is an AI miner and our state is still collecting ore then we were probably shoved out
; 1185 :   // of the ore field by some bully in a vehicle so drive back in to finish mining
; 1186 :   if ( m_bUseAI && m_aiState == MINER_AISTATE_COLLECTING_ORE )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN2@ExitedOreF
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 3
	jne	SHORT $LN2@ExitedOreF

; 1187 :     DriveToOreField(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN2@ExitedOreF:

; 1188 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?ExitedOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Miner::ExitedOreField
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?EnteredOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_str$1 = -12						; size = 4
_pOreFieldScript$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_oreField$ = 12						; size = 4
?EnteredOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Ore_Miner::EnteredOreField, COMDAT
; _this$ = ecx

; 1127 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1128 :   // Ignore this if we are already full
; 1129 :   if ( m_oreMined >= m_oreCapacity )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+60]
	jl	SHORT $LN9@EnteredOre

; 1130 :     return;

	jmp	$LN10@EnteredOre
$LN9@EnteredOre:

; 1131 : 
; 1132 :   // Check if this is a valid ore field
; 1133 :   dp88_Ore_Field* pOreFieldScript = (dp88_Ore_Field *)(Find_Script_On_Object(oreField,"dp88_Ore_Field"));

	push	OFFSET ??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@
	mov	eax, DWORD PTR _oreField$[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	mov	DWORD PTR _pOreFieldScript$[ebp], eax

; 1134 :   if (!pOreFieldScript || (m_bUseAI && !pOreFieldScript->IsSuitableForAI()))

	cmp	DWORD PTR _pOreFieldScript$[ebp], 0
	je	SHORT $LN7@EnteredOre
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN8@EnteredOre
	mov	ecx, DWORD PTR _pOreFieldScript$[ebp]
	call	?IsSuitableForAI@dp88_Ore_Field@@QAE_NXZ ; dp88_Ore_Field::IsSuitableForAI
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@EnteredOre
$LN7@EnteredOre:

; 1135 :     return;

	jmp	$LN10@EnteredOre
$LN8@EnteredOre:

; 1136 : 
; 1137 :   // Check this field isn't empty (we might have just driven into it on the way to another one, or
; 1138 :   // some thief might have stolen the resources!)
; 1139 :   if (!pOreFieldScript->IsInfinite() && 0 == pOreFieldScript->NumOreUnits())

	mov	ecx, DWORD PTR _pOreFieldScript$[ebp]
	call	?IsInfinite@dp88_Ore_Field@@QAE_NXZ	; dp88_Ore_Field::IsInfinite
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@EnteredOre
	mov	ecx, DWORD PTR _pOreFieldScript$[ebp]
	call	?NumOreUnits@dp88_Ore_Field@@QAEIXZ	; dp88_Ore_Field::NumOreUnits
	test	eax, eax
	jne	SHORT $LN6@EnteredOre

; 1140 :   {
; 1141 :     if (m_bUseAI)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN5@EnteredOre

; 1142 :       DriveToOreField(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN5@EnteredOre:

; 1143 : 
; 1144 :     return;

	jmp	$LN10@EnteredOre
$LN6@EnteredOre:

; 1145 :   }
; 1146 : 
; 1147 :   // Set AI state, notify driver or abort if neither AI controlled nor player driven...
; 1148 :   if (m_bUseAI)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN4@EnteredOre

; 1149 :   {
; 1150 :     m_aiState = MINER_AISTATE_COLLECTING_ORE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 3

; 1151 :     Commands->Action_Reset ( obj, 101.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42ca0000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
	jmp	SHORT $LN1@EnteredOre
$LN4@EnteredOre:

; 1152 :   }
; 1153 :   else if (NULL != Get_Vehicle_Driver(obj))

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@EnteredOre

; 1154 :   {
; 1155 :     StringClass str;

	push	0
	push	0
	lea	ecx, DWORD PTR _str$1[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 1156 :     str.Format("Collecting %s...",m_resourceName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	push	OFFSET ??_C@_0BB@BAIFIPKL@Collecting?5?$CFs?4?4?4?$AA@
	lea	edx, DWORD PTR _str$1[ebp]
	push	edx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 12					; 0000000cH

; 1157 :     Send_Message_Player ( Get_Vehicle_Driver(obj), DP88_RGB_GENERAL_MSG, str );

	lea	ecx, DWORD PTR _str$1[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	200					; 000000c8H
	push	50					; 00000032H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 1158 :   }

	lea	ecx, DWORD PTR _str$1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1159 :   else

	jmp	SHORT $LN1@EnteredOre
$LN2@EnteredOre:

; 1160 :     return;

	jmp	SHORT $LN10@EnteredOre
$LN1@EnteredOre:

; 1161 : 
; 1162 :   // Save the ore field ID and generate a random integer to identify this trip into the ore field
; 1163 :   // to prevent glitching the timers by entering and exiting constantly
; 1164 :   m_oreFieldId    = Commands->Get_ID(oreField);

	mov	eax, DWORD PTR _oreField$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 1165 :   m_oreFieldRand  = Commands->Get_Random_Int(2,10240);

	push	10240					; 00002800H
	push	2
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], eax

; 1166 : 
; 1167 :   // Send delayed message to increase ore load
; 1168 :   Commands->Send_Custom_Event ( obj, obj, CUSTOM_MINER_INCREASE_ORE_LOAD, m_oreFieldRand, m_oreMiningTime );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	push	-637206524				; da050004H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 1169 : 
; 1170 :   UpdateAnimation(obj, MINER_ANIM_MINING);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z ; dp88_Ore_Miner::UpdateAnimation
$LN10@EnteredOre:

; 1171 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?EnteredOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Ore_Miner::EnteredOreField
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?DriveToOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv250 = -388						; size = 4
tv280 = -384						; size = 8
tv140 = -384						; size = 4
tv141 = -380						; size = 4
tv232 = -376						; size = 4
tv130 = -376						; size = 4
$T1 = -372						; size = 12
$T2 = -360						; size = 12
$T3 = -348						; size = 12
$T4 = -336						; size = 12
_params$ = -260						; size = 196
_fieldScore$5 = -64					; size = 8
_fieldPosition$6 = -56					; size = 12
_availableUnits$7 = -44					; size = 4
_pOreFieldScript$8 = -40				; size = 4
_oreField$9 = -36					; size = 4
_oreFieldNode$10 = -32					; size = 4
_oreFields$ = -28					; size = 12
_bestFieldScore$ = -16					; size = 8
_bestField$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?DriveToOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Miner::DriveToOreField, COMDAT
; _this$ = ecx

; 1068 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1069 :   m_aiState = MINER_AISTATE_SEARCH_FOR_ORE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 1

; 1070 : 
; 1071 :   GameObject* bestField = NULL;

	mov	DWORD PTR _bestField$[ebp], 0

; 1072 :   double bestFieldScore = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _bestFieldScore$[ebp], xmm0

; 1073 : 
; 1074 :   // \todo Check number of units available in an ore field and find one with a sufficient quantity - 
; 1075 :   //       ideally 1.5x our capacity to avoid it being depleted before we get there!
; 1076 :   SList<GameObject> oreFields;

	lea	ecx, DWORD PTR _oreFields$[ebp]
	call	??0?$SList@VScriptableGameObj@@@@QAE@XZ	; SList<ScriptableGameObj>::SList<ScriptableGameObj>

; 1077 :   Find_All_Objects_With_Script("dp88_Ore_Field", oreFields);

	lea	eax, DWORD PTR _oreFields$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@
	call	?Find_All_Objects_With_Script@@YAXPBDAAV?$SList@VScriptableGameObj@@@@@Z ; Find_All_Objects_With_Script
	add	esp, 8

; 1078 : 
; 1079 :   for ( SLNode<GameObject>* oreFieldNode = oreFields.Head(); oreFieldNode != NULL; oreFieldNode = oreFieldNode->Next() )

	lea	ecx, DWORD PTR _oreFields$[ebp]
	call	?Head@?$SList@VScriptableGameObj@@@@QBEPAV?$SLNode@VScriptableGameObj@@@@XZ ; SList<ScriptableGameObj>::Head
	mov	DWORD PTR _oreFieldNode$10[ebp], eax
	jmp	SHORT $LN10@DriveToOre
$LN9@DriveToOre:
	mov	ecx, DWORD PTR _oreFieldNode$10[ebp]
	call	?Next@?$SLNode@VScriptableGameObj@@@@QBEPAV1@XZ ; SLNode<ScriptableGameObj>::Next
	mov	DWORD PTR _oreFieldNode$10[ebp], eax
$LN10@DriveToOre:
	cmp	DWORD PTR _oreFieldNode$10[ebp], 0
	je	$LN8@DriveToOre

; 1080 :   {
; 1081 :     if (GameObject* oreField = oreFieldNode->Data())

	mov	ecx, DWORD PTR _oreFieldNode$10[ebp]
	call	?Data@?$SLNode@VScriptableGameObj@@@@QBEPAVScriptableGameObj@@XZ ; SLNode<ScriptableGameObj>::Data
	mov	DWORD PTR _oreField$9[ebp], eax
	cmp	DWORD PTR _oreField$9[ebp], 0
	je	$LN3@DriveToOre

; 1082 :     {
; 1083 :       dp88_Ore_Field* pOreFieldScript = (dp88_Ore_Field *)(Find_Script_On_Object(oreField,"dp88_Ore_Field"));

	push	OFFSET ??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@
	mov	eax, DWORD PTR _oreField$9[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	mov	DWORD PTR _pOreFieldScript$8[ebp], eax

; 1084 :       if (!pOreFieldScript || !pOreFieldScript->IsSuitableForAI())

	cmp	DWORD PTR _pOreFieldScript$8[ebp], 0
	je	SHORT $LN5@DriveToOre
	mov	ecx, DWORD PTR _pOreFieldScript$8[ebp]
	call	?IsSuitableForAI@dp88_Ore_Field@@QAE_NXZ ; dp88_Ore_Field::IsSuitableForAI
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@DriveToOre
$LN5@DriveToOre:

; 1085 :         continue;

	jmp	SHORT $LN9@DriveToOre
$LN6@DriveToOre:

; 1086 : 
; 1087 :       int availableUnits = min(m_oreCapacity, (pOreFieldScript->IsInfinite()?m_oreCapacity:(int)pOreFieldScript->NumOreUnits()));

	mov	ecx, DWORD PTR _pOreFieldScript$8[ebp]
	call	?IsInfinite@dp88_Ore_Field@@QAE_NXZ	; dp88_Ore_Field::IsInfinite
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@DriveToOre
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR tv130[ebp], edx
	jmp	SHORT $LN14@DriveToOre
$LN13@DriveToOre:
	mov	ecx, DWORD PTR _pOreFieldScript$8[ebp]
	call	?NumOreUnits@dp88_Ore_Field@@QAEIXZ	; dp88_Ore_Field::NumOreUnits
	mov	DWORD PTR tv130[ebp], eax
$LN14@DriveToOre:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	cmp	ecx, DWORD PTR tv130[ebp]
	jge	SHORT $LN17@DriveToOre
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN18@DriveToOre
$LN17@DriveToOre:
	mov	ecx, DWORD PTR _pOreFieldScript$8[ebp]
	call	?IsInfinite@dp88_Ore_Field@@QAE_NXZ	; dp88_Ore_Field::IsInfinite
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@DriveToOre
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN16@DriveToOre
$LN15@DriveToOre:
	mov	ecx, DWORD PTR _pOreFieldScript$8[ebp]
	call	?NumOreUnits@dp88_Ore_Field@@QAEIXZ	; dp88_Ore_Field::NumOreUnits
	mov	DWORD PTR tv140[ebp], eax
$LN16@DriveToOre:
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv141[ebp], ecx
$LN18@DriveToOre:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _availableUnits$7[ebp], edx

; 1088 :       if (0 == availableUnits)

	cmp	DWORD PTR _availableUnits$7[ebp], 0
	jne	SHORT $LN4@DriveToOre

; 1089 :         continue;

	jmp	$LN9@DriveToOre
$LN4@DriveToOre:

; 1090 : 
; 1091 :       Vector3 fieldPosition = Commands->Get_Position(oreField);

	mov	eax, DWORD PTR _oreField$9[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _fieldPosition$6[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 1092 :       double fieldScore = (availableUnits*pOreFieldScript->GetOreValue()) / (0.5*Commands->Get_Distance(Commands->Get_Position(oreField), Commands->Get_Position(obj)));

	mov	ecx, DWORD PTR _pOreFieldScript$8[ebp]
	call	?GetOreValue@dp88_Ore_Field@@QAEIXZ	; dp88_Ore_Field::GetOreValue
	imul	eax, DWORD PTR _availableUnits$7[ebp]
	mov	DWORD PTR tv232[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv232[ebp]
	mov	eax, DWORD PTR tv232[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	movsd	QWORD PTR tv280[ebp], xmm0
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _oreField$9[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+256]
	call	ecx
	add	esp, 8
	fstp	DWORD PTR tv250[ebp]
	movss	xmm0, DWORD PTR tv250[ebp]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	xmm1, QWORD PTR tv280[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fieldScore$5[ebp], xmm1

; 1093 : 
; 1094 :       if (fieldScore > bestFieldScore || NULL == bestField)

	movsd	xmm0, QWORD PTR _fieldScore$5[ebp]
	comisd	xmm0, QWORD PTR _bestFieldScore$[ebp]
	ja	SHORT $LN2@DriveToOre
	cmp	DWORD PTR _bestField$[ebp], 0
	jne	SHORT $LN3@DriveToOre
$LN2@DriveToOre:

; 1095 :       {
; 1096 :         bestField = oreField;

	mov	eax, DWORD PTR _oreField$9[ebp]
	mov	DWORD PTR _bestField$[ebp], eax

; 1097 :         bestFieldScore = fieldScore;

	movsd	xmm0, QWORD PTR _fieldScore$5[ebp]
	movsd	QWORD PTR _bestFieldScore$[ebp], xmm0
$LN3@DriveToOre:

; 1098 :       }
; 1099 :     }
; 1100 :   }

	jmp	$LN9@DriveToOre
$LN8@DriveToOre:

; 1101 : 
; 1102 :   if (NULL == bestField)

	cmp	DWORD PTR _bestField$[ebp], 0
	jne	SHORT $LN1@DriveToOre

; 1103 :   {
; 1104 :     //Console_Output ( "dp88_Ore_Miner: No ore fields available..." );
; 1105 : 
; 1106 :     // No ore fields are available at the moment... send ourselves a message to have another look in 5 seconds...
; 1107 :     Commands->Send_Custom_Event(obj, obj, CUSTOM_MINER_AI_SEARCH_FOR_ORE, 1, (float)5.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	-637206522				; da050006H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 1108 :     return;

	lea	ecx, DWORD PTR _oreFields$[ebp]
	call	??1?$SList@VScriptableGameObj@@@@UAE@XZ	; SList<ScriptableGameObj>::~SList<ScriptableGameObj>
	jmp	$LN11@DriveToOre
$LN1@DriveToOre:

; 1109 :   }
; 1110 : 
; 1111 :   //Console_Output ( "dp88_Ore_Miner: Driving to location: %.2f, %.2f, %.2f\n", position.X, position.Y, position.Z );
; 1112 : 
; 1113 :   /* Setup parameters and get going! */
; 1114 :   m_aiState = MINER_AISTATE_DRIVE_TO_ORE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 2

; 1115 :   ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 1116 :   params.Set_Basic(this, 100.0f, MINER_ACTIONID_DRIVE_TO_ORE);

	push	-1
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 1117 :   params.Set_Movement(Commands->Get_Position(bestField), 1.0f, 1.0f);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bestField$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Movement@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ; ActionParamsStruct::Set_Movement

; 1118 :   params.MovePathfind = true;

	mov	BYTE PTR _params$[ebp+71], 1

; 1119 :   params.ShutdownEngineOnArrival = true;

	mov	BYTE PTR _params$[ebp+72], 1

; 1120 :   params.AttackActive = false;

	mov	BYTE PTR _params$[ebp+109], 0

; 1121 :   Commands->Action_Goto(obj, params);

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8

; 1122 : }

	lea	ecx, DWORD PTR _oreFields$[ebp]
	call	??1?$SList@VScriptableGameObj@@@@UAE@XZ	; SList<ScriptableGameObj>::~SList<ScriptableGameObj>
$LN11@DriveToOre:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DriveToOreField@dp88_Ore_Miner@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Miner::DriveToOreField
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.h
;	COMDAT ?KeyHook@dp88_Ore_Miner@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?KeyHook@dp88_Ore_Miner@@UAEXXZ PROC			; dp88_Ore_Miner::KeyHook, COMDAT
; _this$ = ecx

; 298  :   virtual	void KeyHook() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyHook@dp88_Ore_Miner@@UAEXXZ ENDP			; dp88_Ore_Miner::KeyHook
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Action_Complete@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_complete_reason$ = 16					; size = 4
?Action_Complete@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; dp88_Ore_Miner::Action_Complete, COMDAT
; _this$ = ecx

; 1054 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1055 :   // If the completed action was RETURN_TO_REFINERY then set the AI state to
; 1056 :   // docking and call DockAtRefinery();
; 1057 :   if ( action_id == MINER_ACTIONID_RETURN_TO_REFINERY )

	cmp	DWORD PTR _action_id$[ebp], 1
	jne	SHORT $LN2@Action_Com

; 1058 :   {
; 1059 :     //Console_Output ( "dp88_Ore_Miner: Arrived at refinery... start docking\n" );
; 1060 :     m_aiState = MINER_AISTATE_DOCK_AT_REFINERY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 5

; 1061 :     DockAtRefinery(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
$LN2@Action_Com:

; 1062 :   }
; 1063 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; dp88_Ore_Miner::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
tv128 = -112						; size = 4
$T1 = -108						; size = 12
_s$2 = -32						; size = 4
_message$3 = -28					; size = 4
_str$4 = -24						; size = 4
_str$5 = -20						; size = 4
_str$6 = -16						; size = 4
_pOreFieldScript$7 = -12				; size = 4
_pOreField$8 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_Ore_Miner::Custom, COMDAT
; _this$ = ecx

; 926  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 927  :   // Message from an ore field indicating we have entered it
; 928  :   if ( type == CUSTOM_MINER_ENTERED_ORE_FIELD )

	cmp	DWORD PTR _type$[ebp], -637206527	; da050001H
	jne	SHORT $LN25@Custom

; 929  :   {
; 930  :     EnteredOreField(obj, sender);

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	jmp	$LN1@Custom
$LN25@Custom:

; 931  :   }
; 932  : 
; 933  : 
; 934  :   // Message from an ore field indicating we have left it
; 935  :   else if ( type == CUSTOM_MINER_EXITED_ORE_FIELD && Commands->Get_ID(sender) == m_oreFieldId )

	cmp	DWORD PTR _type$[ebp], -637206526	; da050002H
	jne	SHORT $LN23@Custom
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+48]
	jne	SHORT $LN23@Custom

; 936  :   {
; 937  :     ExitedOreField(obj, sender);

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	jmp	$LN1@Custom
$LN23@Custom:

; 938  :   }
; 939  : 
; 940  : 
; 941  :   // Message to ourselves to mine another ore load
; 942  :   else if ( type == CUSTOM_MINER_INCREASE_ORE_LOAD && param == m_oreFieldRand )

	cmp	DWORD PTR _type$[ebp], -637206524	; da050004H
	jne	$LN21@Custom
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _param$[ebp]
	cmp	ecx, DWORD PTR [eax+52]
	jne	$LN21@Custom

; 943  :   {
; 944  :     GameObject* pOreField = Commands->Find_Object(m_oreFieldId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pOreField$8[ebp], eax

; 945  :     dp88_Ore_Field* pOreFieldScript = (!pOreField) ? NULL : (dp88_Ore_Field *)(Find_Script_On_Object(pOreField,"dp88_Ore_Field"));

	cmp	DWORD PTR _pOreField$8[ebp], 0
	jne	SHORT $LN28@Custom
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN29@Custom
$LN28@Custom:
	push	OFFSET ??_C@_0P@FDONNPOD@dp88_Ore_Field?$AA@
	mov	eax, DWORD PTR _pOreField$8[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	mov	DWORD PTR tv128[ebp], eax
$LN29@Custom:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _pOreFieldScript$7[ebp], ecx

; 946  : 
; 947  :     // Unless we are already full increase our load level and the value of our load
; 948  :     if ( m_oreMined < m_oreCapacity && pOreFieldScript )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+60]
	jge	$LN19@Custom
	cmp	DWORD PTR _pOreFieldScript$7[ebp], 0
	je	SHORT $LN19@Custom

; 949  :     {
; 950  :       if ( pOreFieldScript->RemoveOre(1) == 1 )

	push	1
	mov	ecx, DWORD PTR _pOreFieldScript$7[ebp]
	call	?RemoveOre@dp88_Ore_Field@@QAEII@Z	; dp88_Ore_Field::RemoveOre
	cmp	eax, 1
	jne	SHORT $LN19@Custom

; 951  :       {
; 952  :         // Play the mining sound
; 953  :         if ( m_animSounds[MINER_ANIM_MINING] != NULL )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+88], 0
	je	SHORT $LN18@Custom

; 954  :           Commands->Create_Sound(m_animSounds[MINER_ANIM_MINING],Commands->Get_Position(obj),obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+88]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+172]
	call	eax
	add	esp, 12					; 0000000cH
$LN18@Custom:

; 955  : 
; 956  :         m_oreMined++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], ecx

; 957  :         m_oreValue += pOreFieldScript->GetOreValue();

	mov	ecx, DWORD PTR _pOreFieldScript$7[ebp]
	call	?GetOreValue@dp88_Ore_Field@@QAEIXZ	; dp88_Ore_Field::GetOreValue
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], eax
$LN19@Custom:

; 958  :       }
; 959  :     }
; 960  : 
; 961  :     // If we are still not full start send a delayed custom to increase it again
; 962  :     if ( m_oreMined < m_oreCapacity && pOreFieldScript && (pOreFieldScript->IsInfinite() || pOreFieldScript->NumOreUnits() > 0) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+60]
	jge	SHORT $LN17@Custom
	cmp	DWORD PTR _pOreFieldScript$7[ebp], 0
	je	SHORT $LN17@Custom
	mov	ecx, DWORD PTR _pOreFieldScript$7[ebp]
	call	?IsInfinite@dp88_Ore_Field@@QAE_NXZ	; dp88_Ore_Field::IsInfinite
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN16@Custom
	mov	ecx, DWORD PTR _pOreFieldScript$7[ebp]
	call	?NumOreUnits@dp88_Ore_Field@@QAEIXZ	; dp88_Ore_Field::NumOreUnits
	test	eax, eax
	jbe	SHORT $LN17@Custom
$LN16@Custom:

; 963  :       Commands->Send_Custom_Event ( obj, obj, CUSTOM_MINER_INCREASE_ORE_LOAD, m_oreFieldRand, m_oreMiningTime );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	push	-637206524				; da050004H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 964  : 
; 965  : 
; 966  :     // Otherwise we are full of ore... or the ore field is depleted...
; 967  :     else

	jmp	$LN10@Custom
$LN17@Custom:

; 968  :     {
; 969  :       UpdateAnimation(obj, MINER_ANIM_IDLE);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z ; dp88_Ore_Miner::UpdateAnimation

; 970  : 
; 971  :       // If using the AI start driving to the refinery
; 972  :       if ( m_bUseAI )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN14@Custom

; 973  :         ReturnToRefinery(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	jmp	$LN10@Custom
$LN14@Custom:

; 974  : 
; 975  :       // Or, if we are a player driven miner, tell the driver we are full
; 976  :       else if ( Get_Vehicle_Driver(obj) != NULL )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	test	eax, eax
	je	$LN10@Custom

; 977  :       {
; 978  :         if ( m_oreMined < m_oreCapacity )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+60]
	jge	SHORT $LN11@Custom

; 979  :         {
; 980  :           StringClass str;

	push	0
	push	0
	lea	ecx, DWORD PTR _str$6[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 981  :           str.Format("The %s field is depleted, find another %s field or dock at the Refinery to process the %s you have collected so far...",m_resourceName,m_resourceName,m_resourceName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	push	OFFSET ??_C@_0HH@HMPCAJCL@The?5?$CFs?5field?5is?5depleted?0?5find?5a@
	lea	eax, DWORD PTR _str$6[ebp]
	push	eax
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 982  :           Send_Message_Player ( Get_Vehicle_Driver(obj), DP88_RGB_GENERAL_MSG, str);

	lea	ecx, DWORD PTR _str$6[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	200					; 000000c8H
	push	50					; 00000032H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 983  :         }

	lea	ecx, DWORD PTR _str$6[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 984  :         else

	jmp	SHORT $LN10@Custom
$LN11@Custom:

; 985  :         {
; 986  :           StringClass str;

	push	0
	push	0
	lea	ecx, DWORD PTR _str$5[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 987  :           str.Format("Fully loaded with %s, dock at the Refinery to process the %s into credits",m_resourceName,m_resourceName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	push	OFFSET ??_C@_0EK@EMBEDAFA@Fully?5loaded?5with?5?$CFs?0?5dock?5at?5th@
	lea	ecx, DWORD PTR _str$5[ebp]
	push	ecx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 16					; 00000010H

; 988  :           Send_Message_Player ( Get_Vehicle_Driver(obj), DP88_RGB_GENERAL_MSG,str);

	lea	ecx, DWORD PTR _str$5[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	200					; 000000c8H
	push	50					; 00000032H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 989  :         }

	lea	ecx, DWORD PTR _str$5[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN10@Custom:

; 990  :       }
; 991  :     }

	jmp	$LN1@Custom
$LN21@Custom:

; 992  :   }
; 993  : 
; 994  : 
; 995  :   // Message from the ore dump zone notifying us that we have entered it. If
; 996  :   // we have ore to unload then immobilize the vehicle and begin unloading it
; 997  :   else if ( type == CUSTOM_MINER_ENTERED_DUMP_ZONE && m_oreMined > 0 )

	cmp	DWORD PTR _type$[ebp], -637206525	; da050003H
	jne	$LN8@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jle	$LN8@Custom

; 998  :   {
; 999  :     // Inform driver we are unloading
; 1000 :     if ( Get_Vehicle_Driver(obj) != NULL )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@Custom

; 1001 :     {
; 1002 :       StringClass str;

	push	0
	push	0
	lea	ecx, DWORD PTR _str$4[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 1003 :       str.Format("Unloading %s, please stand by...", m_resourceName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	push	OFFSET ??_C@_0CB@KJFHADCP@Unloading?5?$CFs?0?5please?5stand?5by?4?4?4@
	lea	edx, DWORD PTR _str$4[ebp]
	push	edx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 12					; 0000000cH

; 1004 :       Send_Message_Player ( Get_Vehicle_Driver(obj), DP88_RGB_GENERAL_MSG, str);

	lea	ecx, DWORD PTR _str$4[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	200					; 000000c8H
	push	50					; 00000032H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 1005 :     }

	lea	ecx, DWORD PTR _str$4[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN7@Custom:

; 1006 : 
; 1007 :     // Set AI state
; 1008 :     if ( m_bUseAI )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN6@Custom

; 1009 :       m_aiState = MINER_AISTATE_UNLOADING_ORE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 6
$LN6@Custom:

; 1010 : 
; 1011 :     // Send a timed event to notify us when the dump is complete and then call the docking event
; 1012 :     Commands->Send_Custom_Event(obj, obj, CUSTOM_MINER_UNLOAD_ORE_COMPLETE, 0, m_oreDumpTime);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+68]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	-637206523				; da050005H
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 20					; 00000014H

; 1013 :     DockedAtRefinery(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	jmp	$LN1@Custom
$LN8@Custom:

; 1014 :   }
; 1015 : 
; 1016 : 
; 1017 :   // Message to ourselves to indicate ore unloading is complete, grant money
; 1018 :   // to the team and set off to collect some more ore
; 1019 :   else if ( type == CUSTOM_MINER_UNLOAD_ORE_COMPLETE )

	cmp	DWORD PTR _type$[ebp], -637206523	; da050005H
	jne	$LN4@Custom

; 1020 :   {
; 1021 :     // Inform the driver that we have finished unloading
; 1022 :     if ( Get_Vehicle_Driver(obj) != NULL )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	test	eax, eax
	je	$LN3@Custom

; 1023 :     {
; 1024 :       StringClass message(true);

	push	1
	lea	ecx, DWORD PTR _message$3[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 1025 :       StringClass s = m_resourceName;

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	lea	ecx, DWORD PTR _s$2[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass

; 1026 :       s[0] = (char)toupper(s[0]);

	push	0
	lea	ecx, DWORD PTR _s$2[ebp]
	call	??AStringClass@@QAEAADH@Z		; StringClass::operator[]
	movsx	eax, BYTE PTR [eax]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	mov	ebx, eax
	push	0
	lea	ecx, DWORD PTR _s$2[ebp]
	call	??AStringClass@@QAEAADH@Z		; StringClass::operator[]
	mov	BYTE PTR [eax], bl

; 1027 :       message.Format ("%s unloaded successfully, you have earned %d credits for each player and %d points for yourself",s.Peek_Buffer(), m_oreValue, m_oreValue/10 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	lea	ecx, DWORD PTR _s$2[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	push	OFFSET ??_C@_0GA@KPOINCBL@?$CFs?5unloaded?5successfully?0?5you?5ha@
	lea	ecx, DWORD PTR _message$3[ebp]
	push	ecx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 1028 :       Send_Message_Player ( Get_Vehicle_Driver(obj), DP88_RGB_GENERAL_MSG, message );

	lea	ecx, DWORD PTR _message$3[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	200					; 000000c8H
	push	50					; 00000032H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 1029 : 
; 1030 :       Commands->Give_Points(Get_Vehicle_Driver(obj),(float)m_oreValue/10.0f,false);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+44]
	divss	xmm0, DWORD PTR __real@41200000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+636]
	call	eax
	add	esp, 12					; 0000000cH

; 1031 :     }

	lea	ecx, DWORD PTR _s$2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _message$3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN3@Custom:

; 1032 : 
; 1033 :     // Grant money to team and reset ore load level
; 1034 :     Commands->Give_Money ( obj, (float)m_oreValue, true );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+44]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+644]
	call	eax
	add	esp, 12					; 0000000cH

; 1035 : 	MS_AccessHelper::Give_Bot_Credits(Get_Object_Type(obj), (float)m_oreValue);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+44]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	call	?Give_Bot_Credits@MS_AccessHelper@@SAXHM@Z ; MS_AccessHelper::Give_Bot_Credits
	add	esp, 8

; 1036 :     m_oreMined = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 1037 :     m_oreValue = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 1038 : 
; 1039 :     // Call UndockedFromRefinery
; 1040 :     UndockedFromRefinery(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax
	jmp	SHORT $LN1@Custom
$LN4@Custom:

; 1041 :   }
; 1042 : 
; 1043 : 
; 1044 :   // AI message to search for an ore field...
; 1045 :   else if ( type == CUSTOM_MINER_AI_SEARCH_FOR_ORE )

	cmp	DWORD PTR _type$[ebp], -637206522	; da050006H
	jne	SHORT $LN1@Custom

; 1046 :   {
; 1047 :     DriveToOreField(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN1@Custom:

; 1048 :   }
; 1049 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_Ore_Miner::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv221 = -88						; size = 4
tv207 = -88						; size = 4
tv310 = -81						; size = 1
tv293 = -81						; size = 1
tv307 = -80						; size = 4
tv290 = -80						; size = 4
tv304 = -76						; size = 4
tv287 = -76						; size = 4
tv76 = -73						; size = 1
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ore_Miner::Created, COMDAT
; _this$ = ecx

; 884  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 885  :   m_aiState       = MINER_AISTATE_IDLE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 886  :   m_oreMined      = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 887  :   m_oreValue      = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 888  : 
; 889  :   m_bUseAI        = ( Get_Int_Parameter ( "Use_AI" ) == 1 ) ? true : false;

	push	OFFSET ??_C@_06MJHGNIM@Use_AI?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jne	SHORT $LN9@Created
	mov	BYTE PTR tv76[ebp], 1
	jmp	SHORT $LN10@Created
$LN9@Created:
	mov	BYTE PTR tv76[ebp], 0
$LN10@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv76[ebp]
	mov	BYTE PTR [eax+56], cl

; 890  :   m_resourceName  = Get_Parameter("Resource_Name");

	push	OFFSET ??_C@_0O@ODNOLLNH@Resource_Name?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 891  :   m_oreCapacity   = Get_Int_Parameter("Ore_Capacity");

	push	OFFSET ??_C@_0N@CKLMCBCD@Ore_Capacity?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 892  :   m_oreMiningTime = Get_Float_Parameter("Ore_Mining_Time");

	push	OFFSET ??_C@_0BA@CEKFDMBL@Ore_Mining_Time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+64]

; 893  :   m_oreDumpTime   = Get_Float_Parameter("Ore_Dump_Time");

	push	OFFSET ??_C@_0O@BMHFNGDK@Ore_Dump_Time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+68]

; 894  : 
; 895  :   m_oreFieldId    = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 896  :   m_oreFieldRand  = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 897  : 
; 898  :   // Load animation settings
; 899  :   m_animations[MINER_ANIM_IDLE]     = Get_Parameter("Idle_Animation");

	push	OFFSET ??_C@_0P@DPBHIJDH@Idle_Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+76], eax

; 900  :   m_animations[MINER_ANIM_MINING]   = Get_Parameter("Mining_Animation");

	push	OFFSET ??_C@_0BB@KCLAFENJ@Mining_Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+76], eax

; 901  :   m_animations[MINER_ANIM_DUMPING]  = Get_Parameter("Dump_Animation");

	push	OFFSET ??_C@_0P@HBIJGFEI@Dump_Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+76], eax

; 902  :   m_animSounds[MINER_ANIM_IDLE]     = NULL;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+88], 0

; 903  :   m_animSounds[MINER_ANIM_MINING]   = Get_Parameter("Mining_Sound");

	push	OFFSET ??_C@_0N@IFNCGEJN@Mining_Sound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+88], eax

; 904  :   m_animSounds[MINER_ANIM_DUMPING]  = Get_Parameter("Dump_Sound");

	push	OFFSET ??_C@_0L@LICJIGHN@Dump_Sound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+88], eax

; 905  : 
; 906  :   for ( int i = MINER_ANIM_IDLE; i <= MINER_ANIM_DUMPING; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN6@Created
$LN5@Created:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN6@Created:
	cmp	DWORD PTR _i$1[ebp], 2
	jg	$LN4@Created

; 907  :   {
; 908  :     if (m_animations[i] != NULL && strlen(m_animations[i]) <= 0)

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+76], 0
	je	SHORT $LN3@Created
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+76]
	mov	DWORD PTR tv287[ebp], edx
	mov	eax, DWORD PTR tv287[ebp]
	add	eax, 1
	mov	DWORD PTR tv290[ebp], eax
$LL11@Created:
	mov	ecx, DWORD PTR tv287[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv293[ebp], dl
	add	DWORD PTR tv287[ebp], 1
	cmp	BYTE PTR tv293[ebp], 0
	jne	SHORT $LL11@Created
	mov	eax, DWORD PTR tv287[ebp]
	sub	eax, DWORD PTR tv290[ebp]
	mov	DWORD PTR tv207[ebp], eax
	jne	SHORT $LN3@Created

; 909  :       m_animations[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+76], 0
$LN3@Created:

; 910  :     if (m_animSounds[i] != NULL && strlen(m_animSounds[i]) <= 0)

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+88], 0
	je	SHORT $LN2@Created
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+88]
	mov	DWORD PTR tv304[ebp], edx
	mov	eax, DWORD PTR tv304[ebp]
	add	eax, 1
	mov	DWORD PTR tv307[ebp], eax
$LL12@Created:
	mov	ecx, DWORD PTR tv304[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv310[ebp], dl
	add	DWORD PTR tv304[ebp], 1
	cmp	BYTE PTR tv310[ebp], 0
	jne	SHORT $LL12@Created
	mov	eax, DWORD PTR tv304[ebp]
	sub	eax, DWORD PTR tv307[ebp]
	mov	DWORD PTR tv221[ebp], eax
	jne	SHORT $LN2@Created

; 911  :       m_animSounds[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+88], 0
$LN2@Created:

; 912  :   }

	jmp	$LN5@Created
$LN4@Created:

; 913  : 
; 914  :   // Set the initial animation state
; 915  :   UpdateAnimation(obj, MINER_ANIM_IDLE);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimation@dp88_Ore_Miner@@IAEXPAVScriptableGameObj@@W4MINER_ANIMID@1@@Z ; dp88_Ore_Miner::UpdateAnimation

; 916  : 
; 917  :   /* For AI miners send a message to ourselves to start searching for an ore field - note the delay
; 918  :   * which is required to prevent the default harvester AI taking over */
; 919  :   if ( m_bUseAI )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN1@Created

; 920  :     Commands->Send_Custom_Event( obj, obj, CUSTOM_MINER_AI_SEARCH_FOR_ORE, 1, (float)Get_Int_Parameter("AI_Init_Delay") );

	push	OFFSET ??_C@_0O@OKGKHHLH@AI_Init_Delay?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	push	-637206522				; da050006H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN1@Created:

; 921  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Ore_Miner@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ore_Miner::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_CLEG_target@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_CLEG_target@@UAEPAXI@Z PROC			; dp88_AR_CLEG_target::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_CLEG_target@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_CLEG_target@@UAEPAXI@Z ENDP			; dp88_AR_CLEG_target::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_CLEG_target@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_CLEG_target@@UAE@XZ PROC			; dp88_AR_CLEG_target::~dp88_AR_CLEG_target, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_CLEG_target@@UAE@XZ ENDP			; dp88_AR_CLEG_target::~dp88_AR_CLEG_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AR_CLEG_target@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_CLEG_target@@QAE@XZ PROC			; dp88_AR_CLEG_target::dp88_AR_CLEG_target, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_CLEG_target@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_CLEG_target@@QAE@XZ ENDP			; dp88_AR_CLEG_target::dp88_AR_CLEG_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_effectObject$1 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AR_CLEG_target::Timer_Expired, COMDAT
; _this$ = ecx

; 834  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 835  : 	if ( number == TIMER_CLEG_CHECKRELEASETARGET )

	cmp	DWORD PTR _number$[ebp], 10055224	; 00996e38H
	jne	$LN1@Timer_Expi

; 836  : 	{
; 837  : 		/* If resistance since last check has not changed then CLEG has stopped attacking
; 838  : 		us so free the unit, reset its resistance and destroy any effect object */
; 839  : 		if ( lastResistanceCheck == currentResistance )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN5@Timer_Expi

; 840  : 		{
; 841  : 			// Reset resistance
; 842  : 			currentResistance = Get_Int_Parameter("resistance")*10;

	push	OFFSET ??_C@_0L@GDPBJPKC@resistance?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 843  : 			lastResistanceCheck = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 844  : 			
; 845  : 			// Re-enable controls
; 846  : 			Commands->Control_Enable( obj, true );

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+284]
	call	edx
	add	esp, 8

; 847  : 
; 848  : 			/* Destroy effect object if it exists */
; 849  : 			if ( effectObjectId != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN4@Timer_Expi

; 850  : 			{
; 851  : 				GameObject *effectObject = Commands->Find_Object(effectObjectId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _effectObject$1[ebp], eax

; 852  : 				if ( effectObject )

	cmp	DWORD PTR _effectObject$1[ebp], 0
	je	SHORT $LN3@Timer_Expi

; 853  : 					Commands->Destroy_Object(effectObject);

	mov	eax, DWORD PTR _effectObject$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN3@Timer_Expi:

; 854  : 				effectObjectId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN4@Timer_Expi:

; 855  : 			}
; 856  : 		}

	jmp	SHORT $LN1@Timer_Expi
$LN5@Timer_Expi:

; 857  : 
; 858  : 		/* Otherwise we are still being attacked, update the last check variable and restart
; 859  : 		the timer... */
; 860  : 		else if ( currentResistance > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jle	SHORT $LN1@Timer_Expi

; 861  : 		{
; 862  : 			// If we are still being targetted by CLEG(s) start the timer again
; 863  : 			lastResistanceCheck = currentResistance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+32], edx

; 864  : 			Commands->Start_Timer( obj, this, 1.0f, TIMER_CLEG_CHECKRELEASETARGET );

	push	10055224				; 00996e38H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN1@Timer_Expi:

; 865  : 		}
; 866  : 	}
; 867  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AR_CLEG_target::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_effectObject$1 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AR_CLEG_target::Killed, COMDAT
; _this$ = ecx

; 822  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 823  : 	/* Destroy effect object if it exists */
; 824  : 	if ( effectObjectId != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN3@Killed

; 825  : 	{
; 826  : 		GameObject *effectObject = Commands->Find_Object(effectObjectId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _effectObject$1[ebp], eax

; 827  : 		if ( effectObject )

	cmp	DWORD PTR _effectObject$1[ebp], 0
	je	SHORT $LN1@Killed

; 828  : 			Commands->Destroy_Object(effectObject);

	mov	eax, DWORD PTR _effectObject$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN1@Killed:

; 829  : 		effectObjectId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN3@Killed:

; 830  : 	}
; 831  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_CLEG_target::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Damaged@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
$T1 = -88						; size = 12
_effectObject$2 = -12					; size = 4
_effectPreset$3 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AR_CLEG_target::Damaged, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	const static char *Comparison = "CLEG_Weapon";
; 780  : 	if ( damager
; 781  : 		&& Get_Current_Weapon(damager)
; 782  : 		&& strstr( Get_Current_Weapon(damager), Comparison ) != NULL
; 783  : 		&& ( !Get_Vehicle(damager) )								// Check they are not in a vehicle, as current_weapon will not show this
; 784  : 		&& ( Get_Object_Type(damager) != Get_Object_Type(obj) )		// Check they are not on the same team
; 785  : 		&& currentResistance > 0 )									// Check if we have any CLEG resistance remaining

	cmp	DWORD PTR _damager$[ebp], 0
	je	$LN1@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	call	?Get_Current_Weapon@@YAPBDPAVScriptableGameObj@@@Z ; Get_Current_Weapon
	add	esp, 4
	test	eax, eax
	je	$LN1@Damaged
	mov	eax, DWORD PTR ?Comparison@?1??Damaged@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0M@Z@4PBDB
	push	eax
	mov	ecx, DWORD PTR _damager$[ebp]
	push	ecx
	call	?Get_Current_Weapon@@YAPBDPAVScriptableGameObj@@@Z ; Get_Current_Weapon
	add	esp, 4
	push	eax
	call	DWORD PTR __imp__strstr
	add	esp, 8
	test	eax, eax
	je	$LN1@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	call	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle
	add	esp, 4
	test	eax, eax
	jne	$LN1@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	esi, eax
	je	$LN1@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jle	$LN1@Damaged

; 786  : 	{
; 787  : 		// If this is the first damage we have taken in this CLEG attack setup
; 788  : 		// all variables
; 789  : 		if ( lastResistanceCheck == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	$LN4@Damaged

; 790  : 		{
; 791  : 			lastResistanceCheck = currentResistance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+32], edx

; 792  : 
; 793  : 			// Start timer to see if we can be released
; 794  : 			Commands->Start_Timer( obj, this, 1.0f, TIMER_CLEG_CHECKRELEASETARGET );

	push	10055224				; 00996e38H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 795  : 
; 796  : 			// Create instance of CLEG effect preset (if applicable)
; 797  : 			const char* effectPreset = Get_Parameter("clegEffectPreset");

	push	OFFSET ??_C@_0BB@PNBLNPBJ@clegEffectPreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _effectPreset$3[ebp], eax

; 798  : 			if ( Is_Valid_Preset(effectPreset) )

	mov	eax, DWORD PTR _effectPreset$3[ebp]
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Damaged

; 799  : 			{
; 800  : 				GameObject *effectObject = Commands->Create_Object ( effectPreset, Commands->Get_Position(obj) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _effectPreset$3[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+100]
	call	eax
	add	esp, 8
	mov	DWORD PTR _effectObject$2[ebp], eax

; 801  : 				if ( effectObject )

	cmp	DWORD PTR _effectObject$2[ebp], 0
	je	SHORT $LN2@Damaged

; 802  : 					effectObjectId = Commands->Get_ID ( effectObject );

	mov	eax, DWORD PTR _effectObject$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN2@Damaged:

; 803  : 			}
; 804  : 
; 805  : 			// Disable controls for target
; 806  : 			Commands->Control_Enable( obj, false );

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+284]
	call	edx
	add	esp, 8
$LN4@Damaged:

; 807  : 		}
; 808  : 
; 809  : 		// Reduce remaining resistance
; 810  : 		currentResistance--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 811  : 		if ( currentResistance == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@Damaged

; 812  : 		{
; 813  : 			Commands->Apply_Damage( obj, 5000.0, "Death", damager );

	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	push	OFFSET ??_C@_05PGGAFPFO@Death?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+616]
	call	eax
	add	esp, 16					; 00000010H

; 814  : 
; 815  : 			// Make target 'vanish'
; 816  : 			Commands->Set_Model( obj, "null" );

	push	OFFSET ??_C@_04MLLLIHIP@null?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+160]
	call	edx
	add	esp, 8
$LN1@Damaged:

; 817  : 		}
; 818  : 	}
; 819  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AR_CLEG_target::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_CLEG_target::Created, COMDAT
; _this$ = ecx

; 771  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 772  : 	currentResistance = Get_Int_Parameter("resistance")*10;

	push	OFFSET ??_C@_0L@GDPBJPKC@resistance?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 773  : 	lastResistanceCheck = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 774  : 	effectObjectId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 775  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_CLEG_target@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_CLEG_target::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_CLEG@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_CLEG@@UAEPAXI@Z PROC			; dp88_AR_CLEG::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_CLEG@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_CLEG@@UAEPAXI@Z ENDP			; dp88_AR_CLEG::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_CLEG@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_CLEG@@UAE@XZ PROC				; dp88_AR_CLEG::~dp88_AR_CLEG, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_CLEG@@UAE@XZ ENDP				; dp88_AR_CLEG::~dp88_AR_CLEG
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AR_CLEG@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_CLEG@@QAE@XZ PROC				; dp88_AR_CLEG::dp88_AR_CLEG, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_CLEG@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_CLEG@@QAE@XZ ENDP				; dp88_AR_CLEG::dp88_AR_CLEG
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
$T1 = -348						; size = 12
_deathTimer$2 = -272					; size = 128
_deathMSG$3 = -144					; size = 128
_position$4 = -16					; size = 12
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AR_CLEG::Timer_Expired, COMDAT
; _this$ = ecx

; 723  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 724  : 	if ( number == TIMER_CLEG_CHECKDROPOBJ && dropObjID != 0 )

	cmp	DWORD PTR _number$[ebp], 10055223	; 00996e37H
	jne	$LN11@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN11@Timer_Expi

; 725  : 	{
; 726  : 		Vector3 position = Commands->Get_Position( Commands->Find_Object( dropObjID ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _position$4[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 727  : 		
; 728  : 		if ( (int)zPosDropObj == (int)position.Z )

	cvttss2si eax, DWORD PTR _position$4[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jne	SHORT $LN10@Timer_Expi

; 729  : 		{
; 730  : 			Commands->Destroy_Object( Commands->Find_Object( dropObjID ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4

; 731  : 			position.Z += 1;

	movss	xmm0, DWORD PTR _position$4[ebp+8]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _position$4[ebp+8], xmm0

; 732  : 			Commands->Set_Position( obj, position );

	lea	eax, DWORD PTR _position$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8

; 733  : 			phasing = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 0

; 734  : 			phasingBack = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+29], 0

; 735  : 			dropObjID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 736  : 			zPosDropObj = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 737  : 		}
; 738  : 		else

	jmp	SHORT $LN9@Timer_Expi
$LN10@Timer_Expi:

; 739  : 		{
; 740  : 			zPosDropObj = (int)position.Z;

	cvttss2si eax, DWORD PTR _position$4[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 741  : 			Commands->Start_Timer( obj, this, 0.2f, TIMER_CLEG_CHECKDROPOBJ );

	push	10055223				; 00996e37H
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN9@Timer_Expi:

; 742  : 		}

	jmp	$LN3@Timer_Expi
$LN11@Timer_Expi:

; 743  : 	}
; 744  : 
; 745  : 	else if ( number == TIMER_CLEG_PHASEDEATH )

	cmp	DWORD PTR _number$[ebp], 10055222	; 00996e36H
	jne	$LN3@Timer_Expi

; 746  : 	{
; 747  : 		if ( phasing == true )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	cmp	ecx, 1
	jne	SHORT $LN6@Timer_Expi

; 748  : 		{
; 749  : 			Commands->Start_Timer ( obj, this, 1.0f, TIMER_CLEG_PHASEDEATH );

	push	10055222				; 00996e36H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 750  : 			timeRemaining -= 1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+36], cx
$LN6@Timer_Expi:

; 751  : 		}
; 752  : 
; 753  : 		if ( timeRemaining == 0 && phasing == true && phasingBack != true )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	test	ecx, ecx
	jne	SHORT $LN5@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	cmp	ecx, 1
	jne	SHORT $LN5@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	cmp	ecx, 1
	je	SHORT $LN5@Timer_Expi

; 754  : 		{
; 755  : 			char deathMSG[128];
; 756  : 			sprintf ( deathMSG, "You have been phased out too long and have died..." );

	push	OFFSET ??_C@_0DD@CBCDBAII@You?5have?5been?5phased?5out?5too?5lon@
	lea	eax, DWORD PTR _deathMSG$3[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 757  : 			Send_Message_Player( obj, 153, 204, 25, deathMSG );

	lea	eax, DWORD PTR _deathMSG$3[ebp]
	push	eax
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 758  : 			
; 759  : 			Commands->Apply_Damage( obj, 500.0, "Death", obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_05PGGAFPFO@Death?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+616]
	call	eax
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Timer_Expi
$LN5@Timer_Expi:

; 760  : 		}
; 761  : 		else if ( phasing == true && timeRemaining % 20 == 0 || timeRemaining == 10 || timeRemaining == 5 )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	cmp	ecx, 1
	jne	SHORT $LN1@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+36]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	test	edx, edx
	je	SHORT $LN2@Timer_Expi
$LN1@Timer_Expi:
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN2@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cmp	ecx, 5
	jne	SHORT $LN3@Timer_Expi
$LN2@Timer_Expi:

; 762  : 		{
; 763  : 			char deathTimer[128];
; 764  : 			sprintf ( deathTimer, "WARNING: You have %d seconds to phase back before you die...", timeRemaining );

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	push	ecx
	push	OFFSET ??_C@_0DN@ENAIFJPJ@WARNING?3?5You?5have?5?$CFd?5seconds?5to?5@
	lea	edx, DWORD PTR _deathTimer$2[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 765  : 			Send_Message_Player( obj, 153, 204, 25, deathTimer );

	lea	eax, DWORD PTR _deathTimer$2[ebp]
	push	eax
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H
$LN3@Timer_Expi:

; 766  : 		}
; 767  : 	}
; 768  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AR_CLEG::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AR_CLEG::Killed, COMDAT
; _this$ = ecx

; 717  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 	if ( dropObjID != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN2@Killed

; 719  : 		Commands->Destroy_Object( Commands->Find_Object( dropObjID ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN2@Killed:

; 720  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_CLEG::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Damaged@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
$T1 = -96						; size = 12
_dropper$2 = -20					; size = 4
_position$3 = -16					; size = 12
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AR_CLEG::Damaged, COMDAT
; _this$ = ecx

; 683  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 684  : 	if ( Commands->Get_ID ( damager ) == Commands->Get_ID ( obj ) && amount == 0.0 )

	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	cmp	esi, eax
	jne	$LN1@Damaged
	cvtss2sd xmm0, DWORD PTR _amount$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN1@Damaged

; 685  : 	{
; 686  : 		Vector3 position = Commands->Get_Position ( obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _position$3[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 687  : 
; 688  : 		// If damage = 0 and damager is ourselves then phase to the top plane, or phase
; 689  : 		// back if we are already there.
; 690  : 		if ( !phasing )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN3@Damaged

; 691  : 		{
; 692  : 			position.Z = 90;

	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR _position$3[ebp+8], xmm0

; 693  : 			Commands->Set_Position ( obj, position );

	lea	eax, DWORD PTR _position$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8

; 694  : 			timeRemaining = 180;

	mov	eax, 180				; 000000b4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax

; 695  : 
; 696  : 			// Start the clock ticking
; 697  : 			Commands->Start_Timer ( obj, this, 1.0f, TIMER_CLEG_PHASEDEATH );

	push	10055222				; 00996e36H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 698  : 			phasing = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 1
	jmp	$LN1@Damaged
$LN3@Damaged:

; 699  : 		}
; 700  : 		else if ( dropObjID == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	$LN1@Damaged

; 701  : 		{
; 702  : 			position.Z -= 5.0;

	cvtss2sd xmm0, DWORD PTR _position$3[ebp+8]
	subsd	xmm0, QWORD PTR __real@4014000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _position$3[ebp+8], xmm0

; 703  : 			// Time to phase back down again, create the object and start the timer
; 704  : 			// to wait for it to hit the floor
; 705  : 			phasingBack = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+29], 1

; 706  : 			GameObject *dropper;
; 707  : 			dropper = Commands->Create_Object( "CLEG_DropObj", position );

	lea	eax, DWORD PTR _position$3[ebp]
	push	eax
	push	OFFSET ??_C@_0N@HCFBBNOH@CLEG_DropObj?$AA@
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _dropper$2[ebp], eax

; 708  : 			dropObjID = Commands->Get_ID(dropper);

	mov	eax, DWORD PTR _dropper$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 709  : 			zPosDropObj = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 710  : 			Commands->Start_Timer ( obj, this, 0.2f, TIMER_CLEG_CHECKDROPOBJ );

	push	10055223				; 00996e37H
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 711  : 			Send_Message_Player( obj, 153, 204, 25, "Phasing in...." );

	push	OFFSET ??_C@_0P@JHFLIHBN@Phasing?5in?4?4?4?4?$AA@
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H
$LN1@Damaged:

; 712  : 		}
; 713  : 	}
; 714  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AR_CLEG::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_CLEG::Created, COMDAT
; _this$ = ecx

; 673  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 674  : 	//Console_Output ( "Created dp88_AR_CLEG\n" );
; 675  : 	phasing = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 0

; 676  : 	phasingBack = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+29], 0

; 677  : 	timeRemaining = 180;

	mov	eax, 180				; 000000b4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax

; 678  : 	zPosDropObj = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 679  : 	dropObjID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 680  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_CLEG@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_CLEG::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_Deployable_Infantry@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_Deployable_Infantry@@UAEPAXI@Z PROC		; dp88_AR_Deployable_Infantry::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_Deployable_Infantry@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_Deployable_Infantry@@UAEPAXI@Z ENDP		; dp88_AR_Deployable_Infantry::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AR_Deployable_Infantry@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_Deployable_Infantry@@UAE@XZ PROC		; dp88_AR_Deployable_Infantry::~dp88_AR_Deployable_Infantry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_Deployable_Infantry@@UAE@XZ ENDP		; dp88_AR_Deployable_Infantry::~dp88_AR_Deployable_Infantry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AR_Deployable_Infantry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_Deployable_Infantry@@QAE@XZ PROC		; dp88_AR_Deployable_Infantry::dp88_AR_Deployable_Infantry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0JFW_Key_Hook_Base@@QAE@XZ		; JFW_Key_Hook_Base::JFW_Key_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_Deployable_Infantry@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_Deployable_Infantry@@QAE@XZ ENDP		; dp88_AR_Deployable_Infantry::dp88_AR_Deployable_Infantry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Undeploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -188						; size = 12
$T2 = -176						; size = 12
_sound$ = -100						; size = 4
_sObj$3 = -96						; size = 4
_powerup$ = -92						; size = 4
_boundingBox$4 = -88					; size = 60
_extent$5 = -28						; size = 12
_pos$6 = -16						; size = 12
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Undeploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Deployable_Infantry::Undeploy, COMDAT
; _this$ = ecx

; 622  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 623  :   if (!deployed)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	jne	SHORT $LN5@Undeploy

; 624  :     return;

	jmp	$LN6@Undeploy
$LN5@Undeploy:

; 625  : 
; 626  :   lastDeploy = time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax
	mov	DWORD PTR [ecx+68], edx

; 627  :   deployed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0

; 628  : 
; 629  :   // Destroy the defensive structure
; 630  :   if (NULL != deployedObjectId)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN4@Undeploy

; 631  :   {
; 632  :     Commands->Destroy_Object(Commands->Find_Object(deployedObjectId));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4

; 633  :     
; 634  :     // Wake up any objects inside the box to prevent abusing the physics engine to
; 635  :     // "walk on air" by moving forward, undeploying and redeploying (and repeating)
; 636  :     // without waking the physics engine to check for terrain under the soldier
; 637  :     Vector3 pos = Commands->Get_Position(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _pos$6[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 638  :     Vector3 extent(10.0f, 10.0f, 10.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _extent$5[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 639  :     OBBoxClass boundingBox(pos, extent);

	lea	eax, DWORD PTR _extent$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$6[ebp]
	push	ecx
	lea	ecx, DWORD PTR _boundingBox$4[ebp]
	call	??0OBBoxClass@@QAE@ABVVector3@@0@Z	; OBBoxClass::OBBoxClass

; 640  :     Wake_Up_Objects_In_OBBox(boundingBox);

	lea	eax, DWORD PTR _boundingBox$4[ebp]
	push	eax
	call	?Wake_Up_Objects_In_OBBox@@YAXAAVOBBoxClass@@@Z ; Wake_Up_Objects_In_OBBox
	add	esp, 4
$LN4@Undeploy:

; 641  :   }
; 642  : 
; 643  :   // Remove deployed weapon
; 644  :   const char* powerup = GetWeaponPowerup(currentVetLevel);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWeaponPowerup@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetWeaponPowerup
	mov	DWORD PTR _powerup$[ebp], eax

; 645  :   if (powerup)

	cmp	DWORD PTR _powerup$[ebp], 0
	je	SHORT $LN3@Undeploy

; 646  :     Remove_Weapon(obj, Get_Powerup_Weapon(powerup));

	mov	eax, DWORD PTR _powerup$[ebp]
	push	eax
	call	?Get_Powerup_Weapon@@YAPBDPBD@Z		; Get_Powerup_Weapon
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	DWORD PTR ?Remove_Weapon@@3P6AXPAVScriptableGameObj@@PBD@ZA ; Remove_Weapon
	add	esp, 8
$LN3@Undeploy:

; 647  : 
; 648  :   // Re-enable loiters and vehicle entry
; 649  :   if (SoldierGameObj* sObj = obj->As_SoldierGameObj())  // Should always be true, but safety first...

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR _sObj$3[ebp], eax
	cmp	DWORD PTR _sObj$3[ebp], 0
	je	SHORT $LN2@Undeploy

; 650  :   {
; 651  :     sObj->Set_Can_Drive_Vehicles(m_bCanDrive);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+335]
	push	ecx
	mov	ecx, DWORD PTR _sObj$3[ebp]
	call	?Set_Can_Drive_Vehicles@SoldierGameObj@@QAEX_N@Z ; SoldierGameObj::Set_Can_Drive_Vehicles

; 652  :     Commands->Set_Loiters_Allowed(obj,true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+620]
	call	edx
	add	esp, 8
$LN2@Undeploy:

; 653  :   }
; 654  :   const char *sound = Get_Parameter("undeploySound");

	push	OFFSET ??_C@_0O@MCOLCNG@undeploySound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _sound$[ebp], eax

; 655  :   if (sound[0])

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _sound$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN1@Undeploy

; 656  :   {
; 657  : 	  Commands->Create_Sound(sound, Commands->Get_Position(obj), obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _sound$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+172]
	call	ecx
	add	esp, 12					; 0000000cH
$LN1@Undeploy:

; 658  :   }
; 659  : 
; 660  :   // Reset armour & skin types
; 661  :   Set_Skin(obj, undeployedSkinType);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 79					; 0000004fH
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?Set_Skin@@YAXPAVScriptableGameObj@@PBD@Z ; Set_Skin
	add	esp, 8

; 662  :   Commands->Set_Shield_Type(obj, undeployedArmourType);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 207				; 000000cfH
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+244]
	call	eax
	add	esp, 8
$LN6@Undeploy:

; 663  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Undeploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Deployable_Infantry::Undeploy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Deploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -112						; size = 12
$T2 = -100						; size = 12
_sound$ = -24						; size = 4
_sObj$3 = -20						; size = 4
_armourType$ = -16					; size = 4
_powerup$ = -12						; size = 4
_deployedObject$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Deploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Deployable_Infantry::Deploy, COMDAT
; _this$ = ecx

; 577  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 578  :   if (deployed)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN5@Deploy

; 579  :     return;

	jmp	$LN6@Deploy
$LN5@Deploy:

; 580  : 
; 581  :   lastDeploy = time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax
	mov	DWORD PTR [ecx+68], edx

; 582  :   deployed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 1

; 583  : 
; 584  :   // Create the defensive structure
; 585  :   GameObject* deployedObject = Commands->Create_Object ( Get_Parameter ( "deployedObjectPreset" ), Commands->Get_Position ( obj ) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BF@MFBGNGEP@deployedObjectPreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _deployedObject$[ebp], eax

; 586  :   deployedObjectId = Commands->Get_ID ( deployedObject );

	mov	eax, DWORD PTR _deployedObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 587  : 
; 588  :   // Grant deployed weapon and select it for use
; 589  :   const char* powerup = GetWeaponPowerup(currentVetLevel);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWeaponPowerup@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetWeaponPowerup
	mov	DWORD PTR _powerup$[ebp], eax

; 590  :   if ( powerup )

	cmp	DWORD PTR _powerup$[ebp], 0
	je	SHORT $LN4@Deploy

; 591  :   {
; 592  :     Commands->Give_PowerUp( obj, powerup, true );

	push	1
	mov	eax, DWORD PTR _powerup$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+432]
	call	eax
	add	esp, 12					; 0000000cH

; 593  :     Commands->Select_Weapon ( obj, Get_Powerup_Weapon ( powerup ) );

	mov	eax, DWORD PTR _powerup$[ebp]
	push	eax
	call	?Get_Powerup_Weapon@@YAPBDPBD@Z		; Get_Powerup_Weapon
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+136]
	call	eax
	add	esp, 8
$LN4@Deploy:

; 594  :   }
; 595  : 
; 596  :   // Set armour & skin types
; 597  :   const char* armourType = GetArmourType(currentVetLevel);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetArmourType@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetArmourType
	mov	DWORD PTR _armourType$[ebp], eax

; 598  :   if ( armourType )

	cmp	DWORD PTR _armourType$[ebp], 0
	je	SHORT $LN3@Deploy

; 599  :   {
; 600  :     Commands->Set_Shield_Type(obj, armourType);

	mov	eax, DWORD PTR _armourType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+244]
	call	eax
	add	esp, 8

; 601  :     Set_Skin(obj, armourType);

	mov	eax, DWORD PTR _armourType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?Set_Skin@@YAXPAVScriptableGameObj@@PBD@Z ; Set_Skin
	add	esp, 8
$LN3@Deploy:

; 602  :   }
; 603  : 
; 604  :   // Disable loiters and vehicle entry
; 605  :   if ( SoldierGameObj* sObj = obj->As_SoldierGameObj() )  // Should always be true, but safety first...

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR _sObj$3[ebp], eax
	cmp	DWORD PTR _sObj$3[ebp], 0
	je	SHORT $LN2@Deploy

; 606  :   {
; 607  :     m_bCanDrive = sObj->Can_Drive_Vehicles(); // Save value for when we undeploy...

	mov	ecx, DWORD PTR _sObj$3[ebp]
	call	?Can_Drive_Vehicles@SoldierGameObj@@QAE_NXZ ; SoldierGameObj::Can_Drive_Vehicles
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+335], al

; 608  :     sObj->Set_Can_Drive_Vehicles(false);

	push	0
	mov	ecx, DWORD PTR _sObj$3[ebp]
	call	?Set_Can_Drive_Vehicles@SoldierGameObj@@QAEX_N@Z ; SoldierGameObj::Set_Can_Drive_Vehicles

; 609  :     Commands->Set_Loiters_Allowed(obj,false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+620]
	call	edx
	add	esp, 8
$LN2@Deploy:

; 610  :   }
; 611  :   const char *sound = Get_Parameter("deploySound");

	push	OFFSET ??_C@_0M@DMJJAGLI@deploySound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _sound$[ebp], eax

; 612  :   if (sound[0])

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _sound$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN1@Deploy

; 613  :   {
; 614  : 	  Commands->Create_Sound(sound, Commands->Get_Position(obj), obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _sound$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+172]
	call	ecx
	add	esp, 12					; 0000000cH
$LN1@Deploy:

; 615  :   }
; 616  : 
; 617  :   // TEMP - Start timer to check position for script abuse
; 618  :   Commands->Start_Timer(obj,this,2.0f,154785);

	push	154785					; 00025ca1H
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN6@Deploy:

; 619  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Deploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Deployable_Infantry::Deploy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?GetWeaponPowerup@dp88_AR_Deployable_Infantry@@QAEPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vetLevel$ = 8						; size = 4
?GetWeaponPowerup@dp88_AR_Deployable_Infantry@@QAEPBDH@Z PROC ; dp88_AR_Deployable_Infantry::GetWeaponPowerup, COMDAT
; _this$ = ecx

; 566  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 567  :   if ( vetLevel == 2 && hasEliteWeaponPowerup )

	cmp	DWORD PTR _vetLevel$[ebp], 2
	jne	SHORT $LN5@GetWeaponP
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+78]
	test	ecx, ecx
	je	SHORT $LN5@GetWeaponP

; 568  :     return Get_Parameter("deployedWeaponPowerup_elite");

	push	OFFSET ??_C@_0BM@ICHLJJHH@deployedWeaponPowerup_elite?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	jmp	SHORT $LN6@GetWeaponP
	jmp	SHORT $LN4@GetWeaponP
$LN5@GetWeaponP:

; 569  :   else if ( vetLevel >= 1 && hasVeteranWeaponPowerup )

	cmp	DWORD PTR _vetLevel$[ebp], 1
	jl	SHORT $LN3@GetWeaponP
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+77]
	test	ecx, ecx
	je	SHORT $LN3@GetWeaponP

; 570  :     return Get_Parameter("deployedWeaponPowerup_veteran");

	push	OFFSET ??_C@_0BO@BDGMBCNO@deployedWeaponPowerup_veteran?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	jmp	SHORT $LN6@GetWeaponP
	jmp	SHORT $LN4@GetWeaponP
$LN3@GetWeaponP:

; 571  :   else if ( hasRookieWeaponPowerup )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	test	ecx, ecx
	je	SHORT $LN4@GetWeaponP

; 572  :     return Get_Parameter("deployedWeaponPowerup");

	push	OFFSET ??_C@_0BG@HFLMKGI@deployedWeaponPowerup?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	jmp	SHORT $LN6@GetWeaponP
$LN4@GetWeaponP:

; 573  :   return NULL;

	xor	eax, eax
$LN6@GetWeaponP:

; 574  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWeaponPowerup@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ENDP ; dp88_AR_Deployable_Infantry::GetWeaponPowerup
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?GetArmourType@dp88_AR_Deployable_Infantry@@QAEPBDH@Z
_TEXT	SEGMENT
tv146 = -88						; size = 4
tv95 = -88						; size = 4
tv75 = -88						; size = 4
tv218 = -84						; size = 4
tv195 = -84						; size = 4
tv172 = -84						; size = 4
tv213 = -78						; size = 1
tv190 = -78						; size = 1
tv167 = -78						; size = 1
tv206 = -77						; size = 1
tv183 = -77						; size = 1
tv160 = -77						; size = 1
tv202 = -76						; size = 4
tv179 = -76						; size = 4
tv156 = -76						; size = 4
tv203 = -72						; size = 4
tv180 = -72						; size = 4
tv157 = -72						; size = 4
_this$ = -4						; size = 4
_vetLevel$ = 8						; size = 4
?GetArmourType@dp88_AR_Deployable_Infantry@@QAEPBDH@Z PROC ; dp88_AR_Deployable_Infantry::GetArmourType, COMDAT
; _this$ = ecx

; 553  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 554  :   if ( vetLevel == 2 && strcmp ( Get_Parameter( "deployedArmourType_elite" ), "null" ) != 0 )

	cmp	DWORD PTR _vetLevel$[ebp], 2
	jne	SHORT $LN5@GetArmourT
	mov	DWORD PTR tv157[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BJ@CJLCKMAB@deployedArmourType_elite?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv156[ebp], eax
$LL8@GetArmourT:
	mov	eax, DWORD PTR tv156[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv160[ebp], cl
	mov	edx, DWORD PTR tv157[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN9@GetArmourT
	cmp	BYTE PTR tv160[ebp], 0
	je	SHORT $LN10@GetArmourT
	mov	eax, DWORD PTR tv156[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv167[ebp], cl
	mov	edx, DWORD PTR tv157[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN9@GetArmourT
	add	DWORD PTR tv156[ebp], 2
	add	DWORD PTR tv157[ebp], 2
	cmp	BYTE PTR tv167[ebp], 0
	jne	SHORT $LL8@GetArmourT
$LN10@GetArmourT:
	mov	DWORD PTR tv172[ebp], 0
	jmp	SHORT $LN11@GetArmourT
$LN9@GetArmourT:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv172[ebp], eax
$LN11@GetArmourT:
	mov	ecx, DWORD PTR tv172[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN5@GetArmourT

; 555  :     return Get_Parameter ( "deployedArmourType_elite" );

	push	OFFSET ??_C@_0BJ@CJLCKMAB@deployedArmourType_elite?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	jmp	$LN6@GetArmourT
	jmp	$LN4@GetArmourT
$LN5@GetArmourT:

; 556  :   else if ( vetLevel >= 1 && strcmp ( Get_Parameter( "deployedArmourType_veteran" ), "null" ) != 0 )

	cmp	DWORD PTR _vetLevel$[ebp], 1
	jl	SHORT $LN3@GetArmourT
	mov	DWORD PTR tv180[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BL@DMLKKDEE@deployedArmourType_veteran?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv179[ebp], eax
$LL12@GetArmourT:
	mov	eax, DWORD PTR tv179[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv183[ebp], cl
	mov	edx, DWORD PTR tv180[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN13@GetArmourT
	cmp	BYTE PTR tv183[ebp], 0
	je	SHORT $LN14@GetArmourT
	mov	eax, DWORD PTR tv179[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv190[ebp], cl
	mov	edx, DWORD PTR tv180[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN13@GetArmourT
	add	DWORD PTR tv179[ebp], 2
	add	DWORD PTR tv180[ebp], 2
	cmp	BYTE PTR tv190[ebp], 0
	jne	SHORT $LL12@GetArmourT
$LN14@GetArmourT:
	mov	DWORD PTR tv195[ebp], 0
	jmp	SHORT $LN15@GetArmourT
$LN13@GetArmourT:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv195[ebp], eax
$LN15@GetArmourT:
	mov	ecx, DWORD PTR tv195[ebp]
	mov	DWORD PTR tv95[ebp], ecx
	cmp	DWORD PTR tv95[ebp], 0
	je	SHORT $LN3@GetArmourT

; 557  :     return Get_Parameter ( "deployedArmourType_veteran" );

	push	OFFSET ??_C@_0BL@DMLKKDEE@deployedArmourType_veteran?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	jmp	SHORT $LN6@GetArmourT
	jmp	SHORT $LN4@GetArmourT
$LN3@GetArmourT:

; 558  :   else if ( strcmp ( Get_Parameter( "deployedArmourType" ), "null" ) != 0 )

	mov	DWORD PTR tv203[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BD@BKAKAJAD@deployedArmourType?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv202[ebp], eax
$LL16@GetArmourT:
	mov	eax, DWORD PTR tv202[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv206[ebp], cl
	mov	edx, DWORD PTR tv203[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN17@GetArmourT
	cmp	BYTE PTR tv206[ebp], 0
	je	SHORT $LN18@GetArmourT
	mov	eax, DWORD PTR tv202[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv213[ebp], cl
	mov	edx, DWORD PTR tv203[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN17@GetArmourT
	add	DWORD PTR tv202[ebp], 2
	add	DWORD PTR tv203[ebp], 2
	cmp	BYTE PTR tv213[ebp], 0
	jne	SHORT $LL16@GetArmourT
$LN18@GetArmourT:
	mov	DWORD PTR tv218[ebp], 0
	jmp	SHORT $LN19@GetArmourT
$LN17@GetArmourT:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv218[ebp], eax
$LN19@GetArmourT:
	mov	ecx, DWORD PTR tv218[ebp]
	mov	DWORD PTR tv146[ebp], ecx
	cmp	DWORD PTR tv146[ebp], 0
	je	SHORT $LN4@GetArmourT

; 559  :     return Get_Parameter ( "deployedArmourType" );

	push	OFFSET ??_C@_0BD@BKAKAJAD@deployedArmourType?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	jmp	SHORT $LN6@GetArmourT
$LN4@GetArmourT:

; 560  :   return NULL;

	xor	eax, eax
$LN6@GetArmourT:

; 561  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetArmourType@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ENDP ; dp88_AR_Deployable_Infantry::GetArmourType
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
$T1 = -104						; size = 12
$T2 = -92						; size = 12
$T3 = -80						; size = 4
_distance$4 = -12					; size = 4
_deployedObject$5 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AR_Deployable_Infantry::Timer_Expired, COMDAT
; _this$ = ecx

; 528  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 529  :   if ( deployed && number == 154785 )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	$LN2@Timer_Expi
	cmp	DWORD PTR _number$[ebp], 154785		; 00025ca1H
	jne	$LN2@Timer_Expi

; 530  :   {
; 531  :     GameObject* deployedObject = Commands->Find_Object(deployedObjectId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _deployedObject$5[ebp], eax

; 532  :     float distance = Commands->Get_Distance(Commands->Get_Position(deployedObject),Commands->Get_Position(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _deployedObject$5[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 8
	fstp	DWORD PTR _distance$4[ebp]

; 533  : 
; 534  :     // If more than 3m away, undeploy
; 535  :     if ( deployedObject != NULL && distance > 1.5f )

	cmp	DWORD PTR _deployedObject$5[ebp], 0
	je	SHORT $LN1@Timer_Expi
	movss	xmm0, DWORD PTR _distance$4[ebp]
	comiss	xmm0, DWORD PTR __real@3fc00000
	jbe	SHORT $LN1@Timer_Expi

; 536  :     {
; 537  :       Undeploy(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Undeploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z ; dp88_AR_Deployable_Infantry::Undeploy

; 538  : 
; 539  :       // Remove script to punish abusers
; 540  :       Send_Message_Player(obj, DP88_RGB_ERROR_MSG, StringClass::getFormattedString("Deployment abuse detected, disabling deploy script... (distance from deployment: %.2fm)", distance));

	cvtss2sd xmm0, DWORD PTR _distance$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0FI@PHLEFKAJ@Deployment?5abuse?5detected?0?5disab@
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 16					; 00000010H
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	50					; 00000032H
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 541  :       RemoveHook();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveHook@JFW_Key_Hook_Base@@QAEXXZ	; JFW_Key_Hook_Base::RemoveHook

; 542  :       Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 543  :       return;

	jmp	SHORT $LN3@Timer_Expi
$LN1@Timer_Expi:

; 544  :     }
; 545  : 
; 546  :     Commands->Start_Timer(obj,this,2.0f,154785);

	push	154785					; 00025ca1H
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@Timer_Expi:
$LN3@Timer_Expi:

; 547  :   }
; 548  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AR_Deployable_Infantry::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
tv130 = -108						; size = 4
tv79 = -108						; size = 4
tv244 = -104						; size = 4
tv216 = -104						; size = 4
tv239 = -98						; size = 1
tv211 = -98						; size = 1
tv232 = -97						; size = 1
tv204 = -97						; size = 1
tv228 = -96						; size = 4
tv200 = -96						; size = 4
tv229 = -92						; size = 4
tv201 = -92						; size = 4
tv160 = -89						; size = 1
_powerup$1 = -24					; size = 4
_oldWeaponPowerup$2 = -20				; size = 4
_grantWeapon$3 = -13					; size = 1
_armourType$4 = -12					; size = 4
_oldVetLevel$5 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_AR_Deployable_Infantry::Custom, COMDAT
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	// We have been promoted, apply new weapon and/or armour types
; 477  : 	if ( sender == obj && type == CUSTOM_VETERANCY_PROMOTED )

	mov	eax, DWORD PTR _sender$[ebp]
	cmp	eax, DWORD PTR _obj$[ebp]
	jne	$LN12@Custom
	cmp	DWORD PTR _type$[ebp], -637468671	; da010001H
	jne	$LN12@Custom

; 478  : 	{
; 479  : 		// Remember old vet level
; 480  : 		int oldVetLevel = currentVetLevel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _oldVetLevel$5[ebp], ecx

; 481  : 		
; 482  : 		// Save new level
; 483  : 		currentVetLevel = param;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _param$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 484  : 		
; 485  : 		/* Save new defaults for skin and armour type, unless we are deployed and
; 486  : 		they match the values we set for the old vet level, which implies they
; 487  : 		didn't recieve a new armour type on promotion */
; 488  : 		if ( !deployed || strcmp(GetArmourType(oldVetLevel),Get_Skin(obj)) != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN9@Custom
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Skin@@YAPBDPAVScriptableGameObj@@@Z ; Get_Skin
	add	esp, 4
	mov	DWORD PTR tv201[ebp], eax
	mov	ecx, DWORD PTR _oldVetLevel$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetArmourType@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetArmourType
	mov	DWORD PTR tv200[ebp], eax
$LL18@Custom:
	mov	edx, DWORD PTR tv200[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv204[ebp], al
	mov	ecx, DWORD PTR tv201[ebp]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $LN19@Custom
	cmp	BYTE PTR tv204[ebp], 0
	je	SHORT $LN20@Custom
	mov	edx, DWORD PTR tv200[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv211[ebp], al
	mov	ecx, DWORD PTR tv201[ebp]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN19@Custom
	add	DWORD PTR tv200[ebp], 2
	add	DWORD PTR tv201[ebp], 2
	cmp	BYTE PTR tv211[ebp], 0
	jne	SHORT $LL18@Custom
$LN20@Custom:
	mov	DWORD PTR tv216[ebp], 0
	jmp	SHORT $LN21@Custom
$LN19@Custom:
	sbb	edx, edx
	or	edx, 1
	mov	DWORD PTR tv216[ebp], edx
$LN21@Custom:
	mov	eax, DWORD PTR tv216[ebp]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN10@Custom
$LN9@Custom:

; 489  : 			strcpy_s ( undeployedSkinType, sizeof( undeployedSkinType ), Get_Skin ( obj ) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Skin@@YAPBDPAVScriptableGameObj@@@Z ; Get_Skin
	add	esp, 4
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 79					; 0000004fH
	push	ecx
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH
$LN10@Custom:

; 490  : 		if ( !deployed || strcmp(GetArmourType(oldVetLevel),Get_Shield_Type(obj)) != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN7@Custom
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Shield_Type@@YAPBDPAVScriptableGameObj@@@Z ; Get_Shield_Type
	add	esp, 4
	mov	DWORD PTR tv229[ebp], eax
	mov	ecx, DWORD PTR _oldVetLevel$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetArmourType@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetArmourType
	mov	DWORD PTR tv228[ebp], eax
$LL22@Custom:
	mov	edx, DWORD PTR tv228[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv232[ebp], al
	mov	ecx, DWORD PTR tv229[ebp]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $LN23@Custom
	cmp	BYTE PTR tv232[ebp], 0
	je	SHORT $LN24@Custom
	mov	edx, DWORD PTR tv228[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv239[ebp], al
	mov	ecx, DWORD PTR tv229[ebp]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN23@Custom
	add	DWORD PTR tv228[ebp], 2
	add	DWORD PTR tv229[ebp], 2
	cmp	BYTE PTR tv239[ebp], 0
	jne	SHORT $LL22@Custom
$LN24@Custom:
	mov	DWORD PTR tv244[ebp], 0
	jmp	SHORT $LN25@Custom
$LN23@Custom:
	sbb	edx, edx
	or	edx, 1
	mov	DWORD PTR tv244[ebp], edx
$LN25@Custom:
	mov	eax, DWORD PTR tv244[ebp]
	mov	DWORD PTR tv130[ebp], eax
	cmp	DWORD PTR tv130[ebp], 0
	je	SHORT $LN8@Custom
$LN7@Custom:

; 491  : 			strcpy_s ( undeployedArmourType, sizeof( undeployedArmourType ), Get_Shield_Type ( obj ) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Shield_Type@@YAPBDPAVScriptableGameObj@@@Z ; Get_Shield_Type
	add	esp, 4
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 207				; 000000cfH
	push	ecx
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH
$LN8@Custom:

; 492  : 		
; 493  : 		// Set new armour / shield types and weapon if deployed
; 494  : 		if ( deployed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	$LN12@Custom

; 495  : 		{
; 496  : 			const char* armourType = GetArmourType(currentVetLevel);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetArmourType@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetArmourType
	mov	DWORD PTR _armourType$4[ebp], eax

; 497  : 			if ( armourType )

	cmp	DWORD PTR _armourType$4[ebp], 0
	je	SHORT $LN5@Custom

; 498  : 			{
; 499  : 				Commands->Set_Shield_Type(obj, armourType);

	mov	eax, DWORD PTR _armourType$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+244]
	call	eax
	add	esp, 8

; 500  : 				Set_Skin(obj, armourType);

	mov	eax, DWORD PTR _armourType$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?Set_Skin@@YAXPAVScriptableGameObj@@PBD@Z ; Set_Skin
	add	esp, 8
$LN5@Custom:

; 501  : 			}
; 502  : 
; 503  : 
; 504  : 			// Grant new weapon if necessary
; 505  : 			bool grantWeapon = ((currentVetLevel == 2 && hasEliteWeaponPowerup )||( oldVetLevel == 0 && hasVeteranWeaponPowerup)) ? true : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 2
	jne	SHORT $LN14@Custom
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+78]
	test	edx, edx
	jne	SHORT $LN16@Custom
$LN14@Custom:
	cmp	DWORD PTR _oldVetLevel$5[ebp], 0
	jne	SHORT $LN15@Custom
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+77]
	test	ecx, ecx
	jne	SHORT $LN16@Custom
$LN15@Custom:
	mov	BYTE PTR tv160[ebp], 0
	jmp	SHORT $LN17@Custom
$LN16@Custom:
	mov	BYTE PTR tv160[ebp], 1
$LN17@Custom:
	mov	dl, BYTE PTR tv160[ebp]
	mov	BYTE PTR _grantWeapon$3[ebp], dl

; 506  : 			if ( grantWeapon )

	movzx	eax, BYTE PTR _grantWeapon$3[ebp]
	test	eax, eax
	je	$LN12@Custom

; 507  : 			{
; 508  : 				// Do we need to remove an old deployed weapon?
; 509  : 				if ( (oldVetLevel == 1 && hasVeteranWeaponPowerup) || hasRookieWeaponPowerup )

	cmp	DWORD PTR _oldVetLevel$5[ebp], 1
	jne	SHORT $LN1@Custom
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+77]
	test	ecx, ecx
	jne	SHORT $LN2@Custom
$LN1@Custom:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	test	ecx, ecx
	je	SHORT $LN3@Custom
$LN2@Custom:

; 510  : 				{
; 511  : 					// Remove old weapon
; 512  : 					const char* oldWeaponPowerup = GetWeaponPowerup(oldVetLevel);

	mov	eax, DWORD PTR _oldVetLevel$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWeaponPowerup@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetWeaponPowerup
	mov	DWORD PTR _oldWeaponPowerup$2[ebp], eax

; 513  : 					Remove_Weapon ( obj, Get_Powerup_Weapon ( oldWeaponPowerup ) );

	mov	eax, DWORD PTR _oldWeaponPowerup$2[ebp]
	push	eax
	call	?Get_Powerup_Weapon@@YAPBDPBD@Z		; Get_Powerup_Weapon
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	DWORD PTR ?Remove_Weapon@@3P6AXPAVScriptableGameObj@@PBD@ZA ; Remove_Weapon
	add	esp, 8
$LN3@Custom:

; 514  : 				}
; 515  : 
; 516  : 				// Grant and select new weapon
; 517  : 				const char* powerup = GetWeaponPowerup(currentVetLevel);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWeaponPowerup@dp88_AR_Deployable_Infantry@@QAEPBDH@Z ; dp88_AR_Deployable_Infantry::GetWeaponPowerup
	mov	DWORD PTR _powerup$1[ebp], eax

; 518  : 				Commands->Give_PowerUp( obj, powerup, true );

	push	1
	mov	eax, DWORD PTR _powerup$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+432]
	call	eax
	add	esp, 12					; 0000000cH

; 519  : 				Commands->Select_Weapon ( obj, Get_Powerup_Weapon ( powerup ) );

	mov	eax, DWORD PTR _powerup$1[ebp]
	push	eax
	call	?Get_Powerup_Weapon@@YAPBDPBD@Z		; Get_Powerup_Weapon
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+136]
	call	eax
	add	esp, 8
$LN12@Custom:

; 520  : 			}
; 521  : 		}
; 522  : 	}
; 523  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_AR_Deployable_Infantry::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ
_TEXT	SEGMENT
tv330 = -152						; size = 4
tv301 = -152						; size = 4
tv380 = -148						; size = 4
tv327 = -148						; size = 4
tv298 = -148						; size = 4
tv401 = -144						; size = 4
tv324 = -144						; size = 8
tv295 = -144						; size = 8
tv376 = -140						; size = 4
tv360 = -140						; size = 4
tv354 = -140						; size = 4
tv348 = -140						; size = 4
tv182 = -140						; size = 4
tv147 = -140						; size = 4
$T1 = -136						; size = 12
$T2 = -124						; size = 12
$T3 = -112						; size = 4
_str$4 = -44						; size = 4
_closest$5 = -40					; size = 4
_velocity$6 = -36					; size = 12
_str$7 = -24						; size = 4
_deployTime$8 = -20					; size = 4
_str$9 = -16						; size = 4
_undeployTime$10 = -12					; size = 4
_obj$ = -8						; size = 4
_this$ = -4						; size = 4
?KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ PROC	; dp88_AR_Deployable_Infantry::KeyHook, COMDAT
; _this$ = ecx

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	// Find object
; 403  : 	GameObject* obj = Commands->Find_Object ( objectID );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 404  : 	if ( !obj || Get_Vehicle(obj) || obj->As_SoldierGameObj()->Is_On_Ladder() || obj->As_SoldierGameObj()->Is_In_Elevator() )

	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN9@KeyHook
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN9@KeyHook
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	ecx, eax
	call	?Is_On_Ladder@SoldierGameObj@@QAE_NXZ	; SoldierGameObj::Is_On_Ladder
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@KeyHook
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	ecx, eax
	call	?Is_In_Elevator@SoldierGameObj@@QAE_NXZ	; SoldierGameObj::Is_In_Elevator
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@KeyHook
$LN9@KeyHook:

; 405  : 		return;

	jmp	$LN11@KeyHook
$LN10@KeyHook:

; 406  : 
; 407  : 	if ( deployed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	$LN8@KeyHook

; 408  : 	{
; 409  : 		// If deployed for less than undeployTime seconds dont allow undeploy
; 410  :     float undeployTime = Get_Float_Parameter("undeployTime");

	push	OFFSET ??_C@_0N@LEPMODEF@undeployTime?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR _undeployTime$10[ebp]

; 411  :     if ( time(NULL) - lastDeploy < undeployTime )

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+64]
	sbb	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR tv295[ebp], eax
	mov	DWORD PTR tv295[ebp+4], edx
	fild	QWORD PTR tv295[ebp]
	fstp	DWORD PTR tv298[ebp]
	fld	DWORD PTR tv298[ebp]
	fstp	DWORD PTR tv301[ebp]
	movss	xmm0, DWORD PTR _undeployTime$10[ebp]
	comiss	xmm0, DWORD PTR tv301[ebp]
	jbe	$LN7@KeyHook

; 412  :     {
; 413  :       StringClass str(true);

	push	1
	lea	ecx, DWORD PTR _str$9[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 414  :       str.Format("You cannot undeploy yet, you must wait at least %.*f seconds after deploying to undeploy.", (((int)undeployTime)==undeployTime)?0:2, undeployTime);

	cvttss2si eax, DWORD PTR _undeployTime$10[ebp]
	cvtsi2ss xmm0, eax
	ucomiss	xmm0, DWORD PTR _undeployTime$10[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@KeyHook
	mov	DWORD PTR tv147[ebp], 0
	jmp	SHORT $LN14@KeyHook
$LN13@KeyHook:
	mov	DWORD PTR tv147[ebp], 2
$LN14@KeyHook:
	cvtss2sd xmm0, DWORD PTR _undeployTime$10[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv147[ebp]
	push	ecx
	push	OFFSET ??_C@_0FK@HJDEIDNN@You?5cannot?5undeploy?5yet?0?5you?5mus@
	lea	edx, DWORD PTR _str$9[ebp]
	push	edx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 415  :       Send_Message_Player(obj, DP88_RGB_WARNING_MSG, str);

	lea	ecx, DWORD PTR _str$9[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 416  :       return;

	lea	ecx, DWORD PTR _str$9[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN11@KeyHook
$LN7@KeyHook:

; 417  :     }
; 418  : 
; 419  :     Undeploy(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Undeploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z ; dp88_AR_Deployable_Infantry::Undeploy

; 420  : 	}
; 421  : 	else

	jmp	$LN1@KeyHook
$LN8@KeyHook:

; 422  : 	{
; 423  : 		// If deployed for less than deployTime seconds dont allow deploy
; 424  :     float deployTime = Get_Float_Parameter("deployTime");

	push	OFFSET ??_C@_0L@LGLHGEKK@deployTime?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR _deployTime$8[ebp]

; 425  :     if ( time(NULL) - lastDeploy < deployTime )

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+64]
	sbb	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR tv324[ebp], eax
	mov	DWORD PTR tv324[ebp+4], edx
	fild	QWORD PTR tv324[ebp]
	fstp	DWORD PTR tv327[ebp]
	fld	DWORD PTR tv327[ebp]
	fstp	DWORD PTR tv330[ebp]
	movss	xmm0, DWORD PTR _deployTime$8[ebp]
	comiss	xmm0, DWORD PTR tv330[ebp]
	jbe	$LN5@KeyHook

; 426  :     {
; 427  :       StringClass str(true);

	push	1
	lea	ecx, DWORD PTR _str$7[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 428  :       str.Format("You cannot deploy yet, you must wait at least %.*f seconds after undeploying to deploy again.",(((int)deployTime)==deployTime)?0:2, deployTime);

	cvttss2si eax, DWORD PTR _deployTime$8[ebp]
	cvtsi2ss xmm0, eax
	ucomiss	xmm0, DWORD PTR _deployTime$8[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@KeyHook
	mov	DWORD PTR tv182[ebp], 0
	jmp	SHORT $LN16@KeyHook
$LN15@KeyHook:
	mov	DWORD PTR tv182[ebp], 2
$LN16@KeyHook:
	cvtss2sd xmm0, DWORD PTR _deployTime$8[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv182[ebp]
	push	ecx
	push	OFFSET ??_C@_0FO@HENGAEHL@You?5cannot?5deploy?5yet?0?5you?5must?5@
	lea	edx, DWORD PTR _str$7[ebp]
	push	edx
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 429  :       Send_Message_Player(obj, DP88_RGB_WARNING_MSG, str);

	lea	ecx, DWORD PTR _str$7[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 430  :       return;

	lea	ecx, DWORD PTR _str$7[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN11@KeyHook
$LN5@KeyHook:

; 431  :     }
; 432  : 
; 433  : 		// Get velocity of deployer
; 434  : 		Vector3 velocity = Get_Velocity(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR _velocity$6[ebp]
	push	ecx
	call	?Get_Velocity@@YA?AVVector3@@PAVScriptableGameObj@@@Z ; Get_Velocity
	add	esp, 8

; 435  : 
; 436  : 		// Find closest other armed object
; 437  : 		GameObject* closest = Get_Closest_Armed_Object_To_Object(obj);

	push	2
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Closest_Armed_Object_To_Object@@YAPAVScriptableGameObj@@PAV1@H@Z ; Get_Closest_Armed_Object_To_Object
	add	esp, 8
	mov	DWORD PTR _closest$5[ebp], eax

; 438  : 
; 439  : 		// Check if we can deploy
; 440  : 		if ( fabs(velocity.X) > 0.001 || fabs(velocity.Y) > 0.001 || fabs(velocity.Z) > 0.001
; 441  : 			|| (closest && Commands->Get_Distance(Commands->Get_Position(obj), Commands->Get_Position(closest)) < Get_Float_Parameter("deployedObjectSpaceRequired") ) )

	push	ecx
	movss	xmm0, DWORD PTR _velocity$6[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv348[ebp]
	movss	xmm0, DWORD PTR tv348[ebp]
	cvtss2sd xmm0, xmm0
	comisd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	ja	$LN3@KeyHook
	push	ecx
	movss	xmm0, DWORD PTR _velocity$6[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv354[ebp]
	movss	xmm0, DWORD PTR tv354[ebp]
	cvtss2sd xmm0, xmm0
	comisd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	ja	$LN3@KeyHook
	push	ecx
	movss	xmm0, DWORD PTR _velocity$6[ebp+8]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv360[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	cvtss2sd xmm0, xmm0
	comisd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	ja	$LN3@KeyHook
	cmp	DWORD PTR _closest$5[ebp], 0
	je	$LN4@KeyHook
	mov	eax, DWORD PTR _closest$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 8
	fstp	DWORD PTR tv376[ebp]
	movss	xmm0, DWORD PTR tv376[ebp]
	push	OFFSET ??_C@_0BM@LFDCBMI@deployedObjectSpaceRequired?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv401[ebp], xmm0
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv380[ebp]
	movss	xmm0, DWORD PTR tv380[ebp]
	movss	xmm1, DWORD PTR tv401[ebp]
	comiss	xmm0, xmm1
	jbe	$LN4@KeyHook
$LN3@KeyHook:

; 442  : 		{
; 443  : 			const char *str = Get_Translated_String(cannotDeployStringId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	mov	DWORD PTR _str$4[ebp], eax

; 444  : 			Send_Message_Player(obj,153,204,25,str);

	mov	eax, DWORD PTR _str$4[ebp]
	push	eax
	push	25					; 00000019H
	push	204					; 000000ccH
	push	153					; 00000099H
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H

; 445  : 			delete[] str;

	push	OFFSET ??_C@_0CF@KIKFMCII@dp88_AR_Deployable_Infantry?3?3Key@
	mov	eax, DWORD PTR ?__LINE__Var@?1??KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ@4JA
	add	eax, 44					; 0000002cH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN18@KeyHook
	xor	edx, edx
	jne	SHORT $LN17@KeyHook
	mov	eax, DWORD PTR ?__LINE__Var@?1??KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ@4JA
	add	eax, 44					; 0000002cH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN17@KeyHook:
	jmp	SHORT $LN19@KeyHook
$LN18@KeyHook:
	mov	edx, DWORD PTR _str$4[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN19@KeyHook:

; 446  : 			if ( cannotDeploySoundId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN2@KeyHook

; 447  : 				Create_2D_Sound_Player(obj, Get_Definition_Name(cannotDeploySoundId));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?Get_Definition_Name@@YAPBDK@Z		; Get_Definition_Name
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	DWORD PTR ?Create_2D_Sound_Player@@3P6AHPAVScriptableGameObj@@PBD@ZA ; Create_2D_Sound_Player
	add	esp, 8
$LN2@KeyHook:

; 448  : 		}
; 449  : 		else

	jmp	SHORT $LN1@KeyHook
$LN4@KeyHook:

; 450  : 		{
; 451  : 			Deploy(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Deploy@dp88_AR_Deployable_Infantry@@IAEXPAVScriptableGameObj@@@Z ; dp88_AR_Deployable_Infantry::Deploy
$LN1@KeyHook:
$LN11@KeyHook:

; 452  : 		}
; 453  : 	}
; 454  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyHook@dp88_AR_Deployable_Infantry@@UAEXXZ ENDP	; dp88_AR_Deployable_Infantry::KeyHook
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Destroyed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Deployable_Infantry::Destroyed, COMDAT
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 	if ( deployedObjectId != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN1@Destroyed

; 469  : 		Commands->Destroy_Object ( Commands->Find_Object ( deployedObjectId ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN1@Destroyed:

; 470  : 	deployedObjectId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 471  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Deployable_Infantry::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AR_Deployable_Infantry::Killed, COMDAT
; _this$ = ecx

; 458  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 459  : 	RemoveHook();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveHook@JFW_Key_Hook_Base@@QAEXXZ	; JFW_Key_Hook_Base::RemoveHook

; 460  : 	if ( deployedObjectId != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN1@Killed

; 461  : 		Commands->Destroy_Object ( Commands->Find_Object ( deployedObjectId ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN1@Killed:

; 462  : 	deployedObjectId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 463  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_Deployable_Infantry::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv199 = -93						; size = 1
tv174 = -93						; size = 1
tv149 = -93						; size = 1
tv186 = -92						; size = 4
tv161 = -92						; size = 4
tv136 = -92						; size = 4
tv355 = -88						; size = 4
tv330 = -88						; size = 4
tv305 = -88						; size = 4
tv350 = -82						; size = 1
tv325 = -82						; size = 1
tv300 = -82						; size = 1
tv343 = -81						; size = 1
tv318 = -81						; size = 1
tv293 = -81						; size = 1
tv339 = -80						; size = 4
tv314 = -80						; size = 4
tv289 = -80						; size = 4
tv340 = -76						; size = 4
tv315 = -76						; size = 4
tv290 = -76						; size = 4
tv245 = -76						; size = 4
tv231 = -76						; size = 4
_soundId$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Deployable_Infantry::Created, COMDAT
; _this$ = ecx

; 360  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 361  : 	//Console_Output ( "Created dp88_AR_Deployable_Infantry\n" );
; 362  : 	objectID = Commands->Get_ID ( obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 363  : 	deployed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0

; 364  : 	undeployedWeapon = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 365  : 	deployedObjectId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 366  : 	lastDeploy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	DWORD PTR [eax+68], 0

; 367  : 	currentVetLevel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 368  : 	
; 369  : 	// Check deployedObjectPreset is a valid preset name
; 370  : 	if ( !Is_Valid_Preset(Get_Parameter ("deployedObjectPreset")) )

	push	OFFSET ??_C@_0BF@MFBGNGEP@deployedObjectPreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Created

; 371  : 	{
; 372  : 		Send_Message(255,255,255,"dp88_AR_Deployable_Infantry :: Script aborting due to invalid deployedObjectPreset");

	push	OFFSET ??_C@_0FD@BPGCOALM@dp88_AR_Deployable_Infantry?5?3?3?5S@
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	call	DWORD PTR ?Send_Message@@3P6AXIIIPBD@ZA	; Send_Message
	add	esp, 16					; 00000010H

; 373  : 		Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 374  : 		return;

	jmp	$LN4@Created
$LN3@Created:

; 375  : 	}
; 376  : 	
; 377  : 	
; 378  : 	// Validate the weapon powerups
; 379  : 	hasRookieWeaponPowerup = (strcmp ( Get_Parameter( "deployedWeaponPowerup" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter( "deployedWeaponPowerup" ) )) ? true : false; 

	mov	DWORD PTR tv290[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BG@HFLMKGI@deployedWeaponPowerup?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv289[ebp], eax
$LL14@Created:
	mov	eax, DWORD PTR tv289[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv293[ebp], cl
	mov	edx, DWORD PTR tv290[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN15@Created
	cmp	BYTE PTR tv293[ebp], 0
	je	SHORT $LN16@Created
	mov	eax, DWORD PTR tv289[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv300[ebp], cl
	mov	edx, DWORD PTR tv290[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN15@Created
	add	DWORD PTR tv289[ebp], 2
	add	DWORD PTR tv290[ebp], 2
	cmp	BYTE PTR tv300[ebp], 0
	jne	SHORT $LL14@Created
$LN16@Created:
	mov	DWORD PTR tv305[ebp], 0
	jmp	SHORT $LN17@Created
$LN15@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv305[ebp], eax
$LN17@Created:
	mov	ecx, DWORD PTR tv305[ebp]
	mov	DWORD PTR tv136[ebp], ecx
	cmp	DWORD PTR tv136[ebp], 0
	je	SHORT $LN6@Created
	push	OFFSET ??_C@_0BG@HFLMKGI@deployedWeaponPowerup?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@Created
	mov	BYTE PTR tv149[ebp], 1
	jmp	SHORT $LN7@Created
$LN6@Created:
	mov	BYTE PTR tv149[ebp], 0
$LN7@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR [eax+76], cl

; 380  : 	hasVeteranWeaponPowerup = (strcmp ( Get_Parameter( "deployedWeaponPowerup_veteran" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter( "deployedWeaponPowerup_veteran" ) )) ? true : false; 

	mov	DWORD PTR tv315[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BO@BDGMBCNO@deployedWeaponPowerup_veteran?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv314[ebp], eax
$LL18@Created:
	mov	eax, DWORD PTR tv314[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv318[ebp], cl
	mov	edx, DWORD PTR tv315[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN19@Created
	cmp	BYTE PTR tv318[ebp], 0
	je	SHORT $LN20@Created
	mov	eax, DWORD PTR tv314[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv325[ebp], cl
	mov	edx, DWORD PTR tv315[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN19@Created
	add	DWORD PTR tv314[ebp], 2
	add	DWORD PTR tv315[ebp], 2
	cmp	BYTE PTR tv325[ebp], 0
	jne	SHORT $LL18@Created
$LN20@Created:
	mov	DWORD PTR tv330[ebp], 0
	jmp	SHORT $LN21@Created
$LN19@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv330[ebp], eax
$LN21@Created:
	mov	ecx, DWORD PTR tv330[ebp]
	mov	DWORD PTR tv161[ebp], ecx
	cmp	DWORD PTR tv161[ebp], 0
	je	SHORT $LN8@Created
	push	OFFSET ??_C@_0BO@BDGMBCNO@deployedWeaponPowerup_veteran?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@Created
	mov	BYTE PTR tv174[ebp], 1
	jmp	SHORT $LN9@Created
$LN8@Created:
	mov	BYTE PTR tv174[ebp], 0
$LN9@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv174[ebp]
	mov	BYTE PTR [eax+77], cl

; 381  : 	hasEliteWeaponPowerup = (strcmp ( Get_Parameter( "deployedWeaponPowerup_elite" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter( "deployedWeaponPowerup_elite" ) )) ? true : false; 

	mov	DWORD PTR tv340[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BM@ICHLJJHH@deployedWeaponPowerup_elite?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv339[ebp], eax
$LL22@Created:
	mov	eax, DWORD PTR tv339[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv343[ebp], cl
	mov	edx, DWORD PTR tv340[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN23@Created
	cmp	BYTE PTR tv343[ebp], 0
	je	SHORT $LN24@Created
	mov	eax, DWORD PTR tv339[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv350[ebp], cl
	mov	edx, DWORD PTR tv340[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN23@Created
	add	DWORD PTR tv339[ebp], 2
	add	DWORD PTR tv340[ebp], 2
	cmp	BYTE PTR tv350[ebp], 0
	jne	SHORT $LL22@Created
$LN24@Created:
	mov	DWORD PTR tv355[ebp], 0
	jmp	SHORT $LN25@Created
$LN23@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv355[ebp], eax
$LN25@Created:
	mov	ecx, DWORD PTR tv355[ebp]
	mov	DWORD PTR tv186[ebp], ecx
	cmp	DWORD PTR tv186[ebp], 0
	je	SHORT $LN10@Created
	push	OFFSET ??_C@_0BM@ICHLJJHH@deployedWeaponPowerup_elite?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN10@Created
	mov	BYTE PTR tv199[ebp], 1
	jmp	SHORT $LN11@Created
$LN10@Created:
	mov	BYTE PTR tv199[ebp], 0
$LN11@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv199[ebp]
	mov	BYTE PTR [eax+78], cl

; 382  : 	
; 383  : 	// Store undeployed skin & armour types
; 384  : 	strcpy_s ( undeployedSkinType, sizeof( undeployedSkinType ), Get_Skin ( obj ) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Skin@@YAPBDPAVScriptableGameObj@@@Z ; Get_Skin
	add	esp, 4
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 79					; 0000004fH
	push	ecx
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH

; 385  : 	strcpy_s ( undeployedArmourType, sizeof( undeployedArmourType ), Get_Shield_Type ( obj ) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Shield_Type@@YAPBDPAVScriptableGameObj@@@Z ; Get_Shield_Type
	add	esp, 4
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 207				; 000000cfH
	push	ecx
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH

; 386  : 
; 387  : 
; 388  : 	// Get cannot deploy string and sound IDs
; 389  : 	int soundId = 0;

	mov	DWORD PTR _soundId$[ebp], 0

; 390  : 	cannotDeployStringId = (Is_Valid_String_ID(Get_Int_Parameter("cannotDeployStringId"))) ? Get_Int_Parameter("cannotDeployStringId") : 0;

	push	OFFSET ??_C@_0BF@IMENNLBL@cannotDeployStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	call	?Is_Valid_String_ID@@YA_NK@Z		; Is_Valid_String_ID
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@Created
	push	OFFSET ??_C@_0BF@IMENNLBL@cannotDeployStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv231[ebp], eax
	jmp	SHORT $LN13@Created
$LN12@Created:
	mov	DWORD PTR tv231[ebp], 0
$LN13@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv231[ebp]
	mov	DWORD PTR [ecx+52], edx

; 391  : 	if ( cannotDeployStringId && (soundId = Get_String_Sound_ID(cannotDeployStringId)) != 0 && Is_Valid_Preset_ID(soundId) && Find_Definition(soundId)->Get_Class_ID() == 0x5000 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN2@Created
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?Get_String_Sound_ID@@YAKK@Z		; Get_String_Sound_ID
	add	esp, 4
	mov	DWORD PTR _soundId$[ebp], eax
	cmp	DWORD PTR _soundId$[ebp], 0
	je	SHORT $LN2@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Is_Valid_Preset_ID@@YA_NK@Z		; Is_Valid_Preset_ID
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Find_Definition@@YAPAVDefinitionClass@@K@Z ; Find_Definition
	add	esp, 4
	mov	DWORD PTR tv245[ebp], eax
	mov	ecx, DWORD PTR tv245[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv245[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	eax, 20480				; 00005000H
	jne	SHORT $LN2@Created

; 392  : 		cannotDeploySoundId = soundId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soundId$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN2@Created:

; 393  : 
; 394  : 	// Install keyhook
; 395  : 	if ( obj->As_SoldierGameObj() && Get_Player_ID ( obj ) >= 0 )

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	SHORT $LN4@Created
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Player_ID@@YAJPAVScriptableGameObj@@@Z ; Get_Player_ID
	add	esp, 4
	test	eax, eax
	jl	SHORT $LN4@Created

; 396  : 		InstallHook( Get_Parameter("deployKeyhook"), obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_0O@CEFAEEGH@deployKeyhook?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InstallHook@JFW_Key_Hook_Base@@QAEXPBDPAVScriptableGameObj@@@Z ; JFW_Key_Hook_Base::InstallHook
$LN4@Created:

; 397  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_Deployable_Infantry@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Deployable_Infantry::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Animation_Complete@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@PBD@Z PROC ; dp88_AR_Vehicle::Animation_Complete, COMDAT
; _this$ = ecx

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 	// Restart TD Attack Anim
; 344  : 	/*if ( attackingTerrorDroneID != 0 )
; 345  : 		Commands->Set_Animation( obj, Get_Parameter("TD_attack_animName"), false, 0, Get_Float_Parameter("TD_attack_firstFrame"), Get_Float_Parameter("TD_attack_lastFrame"), false );
; 346  : 		*/
; 347  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@PBD@Z ENDP ; dp88_AR_Vehicle::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Damaged@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AR_Vehicle::Damaged, COMDAT
; _this$ = ecx

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 	// If damage is repairing, and we are being attacked by a TD, kill the TD
; 321  : 	/*if ( amount < 0 && attackingTerrorDroneID != 0 )
; 322  : 		Commands->Send_Custom_Event( obj, Commands->Find_Object(attackingTerrorDroneID), CUSTOM_TD_TARGET_REPAIRED, 1, 0 );
; 323  : 
; 324  : 	
; 325  : 	// If the damage is from the Terror Drone gun set the attacker and start anim
; 326  : 	// Can only be attacked by one TD at a time, and only by opposite team
; 327  : 	const static char *TD_Comparison = "Terror Drone";
; 328  : 	if ( strstr( Commands->Get_Preset_Name( Get_Vehicle(damager) ), TD_Comparison ) != NULL
; 329  : 		&& ( Get_Object_Type(damager) != Get_Object_Type(obj) )
; 330  : 		&& attackingTerrorDroneID == 0
; 331  : 		&& !dead )
; 332  : 	{
; 333  : 		attackingTerrorDroneID = Commands->Get_ID( Get_Vehicle(damager) );
; 334  : 		Commands->Send_Custom_Event( obj, Get_Vehicle(damager), CUSTOM_TD_TARGET_ID, 1, 0 );
; 335  : 		Commands->Set_Animation( obj, Get_Parameter("TD_attack_animName"), false, 0, Get_Float_Parameter("TD_attack_firstFrame"), Get_Float_Parameter("TD_attack_lastFrame"), false );
; 336  : 		Commands->Start_Timer( obj, this, 0.1f, TIMER_TD_DO_DAMAGE );
; 337  : 	}*/
; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AR_Vehicle::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Killed@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AR_Vehicle::Killed, COMDAT
; _this$ = ecx

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	/*dead = true;
; 247  : 
; 248  : 
; 249  : 	// If we have a pilot make sure they know they are no longer a pilot
; 250  : 	if ( pilotID != 0 )
; 251  : 	{
; 252  : 		Commands->Send_Custom_Event( obj,Commands->Find_Object(pilotID),CUSTOM_PILOTED_VEHICLE_ID,0,0 );
; 253  : 		pilotID = 0;
; 254  : 	}
; 255  : 
; 256  : 	// If a Terror Drone is attacking us let them know we died...
; 257  : 	if ( attackingTerrorDroneID != 0 )
; 258  : 	{
; 259  : 		Commands->Send_Custom_Event( obj,Commands->Find_Object(attackingTerrorDroneID),CUSTOM_TD_TARGET_DIED,0,0 );
; 260  : 		attackingTerrorDroneID = 0;
; 261  : 	}*/
; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AR_Vehicle::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AR_Vehicle::Timer_Expired, COMDAT
; _this$ = ecx

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 306  : 	// Terror Drone damage timer
; 307  : 	/*if ( number == TIMER_TD_DO_DAMAGE )
; 308  : 	{
; 309  : 		if ( attackingTerrorDroneID != 0 && !dead )
; 310  : 		{
; 311  : 			Commands->Apply_Damage( obj, 40.0, "Steel", Get_Vehicle_Driver ( Commands->Find_Object( attackingTerrorDroneID ) ) );
; 312  : 			Commands->Start_Timer( obj, this, 1.0f, TIMER_TD_DO_DAMAGE );
; 313  : 		}
; 314  : 	}*/
; 315  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AR_Vehicle::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_Vehicle::Created, COMDAT
; _this$ = ecx

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 	//Console_Output ( "Created dp88_AR_Vehicle\n" );
; 237  : 	pilotID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 238  : 	attackingTerrorDroneID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 239  : 	
; 240  : 	dead = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+36], 0

; 241  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_Vehicle::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_AR_Vehicle::Custom, COMDAT
; _this$ = ecx

; 267  : {/*

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 	// Look for vehicle entry
; 269  : 	if ( type == CUSTOM_EVENT_VEHICLE_ENTERED )
; 270  : 	{
; 271  : 		if ( pilotID == 0 )
; 272  : 		{
; 273  : 			pilotID = Commands->Get_ID(sender);
; 274  : 
; 275  : 			// Send a custom to the driver to make their scripts work properly in
; 276  : 			// vehicle mode, and give them our ID. They will report their veterancy level
; 277  : 			// in return, if nessicary.
; 278  : 			Commands->Send_Custom_Event( obj, sender, CUSTOM_PILOTED_VEHICLE_ID, Commands->Get_ID(obj), 0 );
; 279  : 		}
; 280  : 	}
; 281  : 
; 282  : 
; 283  : 	// Look for vehicle exit
; 284  : 	else if ( type == CUSTOM_EVENT_VEHICLE_EXITED )
; 285  : 	{
; 286  : 		if ( Commands->Get_ID(sender) == pilotID )
; 287  : 		{
; 288  : 			pilotID = 0;
; 289  : 
; 290  : 			// Send a custom to the driver to let them know they got out
; 291  : 			Commands->Send_Custom_Event( obj, sender, CUSTOM_PILOTED_VEHICLE_ID, 0, 0 );
; 292  : 		}
; 293  : 	}
; 294  : 	
; 295  : 	
; 296  : 	// Look for a message from the attacking terror drone telling us it died
; 297  : 	else if ( type == CUSTOM_TD_TD_DIED )
; 298  : 	{
; 299  : 		attackingTerrorDroneID = 0;
; 300  : 	}*/
; 301  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_AR_Vehicle@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_AR_Vehicle::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AR_GameController@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AR_GameController@@UAEPAXI@Z PROC		; dp88_AR_GameController::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AR_GameController@@UAE@XZ	; dp88_AR_GameController::~dp88_AR_GameController
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AR_GameController@@UAEPAXI@Z ENDP		; dp88_AR_GameController::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??1dp88_AR_GameController@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AR_GameController@@UAE@XZ PROC			; dp88_AR_GameController::~dp88_AR_GameController, COMDAT
; _this$ = ecx

; 47   : {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_GameController@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Camo_Controller@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AR_GameController@@UAE@XZ ENDP			; dp88_AR_GameController::~dp88_AR_GameController
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ??0dp88_AR_GameController@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AR_GameController@@QAE@XZ PROC			; dp88_AR_GameController::dp88_AR_GameController, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_Camo_Controller@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AR_GameController@@6B@

; 34   :   created = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 0

; 35   : 
; 36   :   team0_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+34], ax

; 37   :   team1_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax

; 38   : 
; 39   :   mirageTank_disguisePresets[0] = 0;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+40], 0

; 40   :   mirageTank_disguisePresets[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+40], 0

; 41   :   mirageTank_disguisePresets[2] = 0;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+40], 0

; 42   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AR_GameController@@QAE@XZ ENDP			; dp88_AR_GameController::dp88_AR_GameController
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_GameController::Destroyed, COMDAT
; _this$ = ecx

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 209  : 	// Clean up memory for Mirage Tank disguises
; 210  : 	if ( mirageTank_disguisePresets[0] != NULL )

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+40], 0
	je	SHORT $LN3@Destroyed

; 211  : 	{
; 212  : 		delete [] mirageTank_disguisePresets[0];

	push	OFFSET ??_C@_0CC@KMBDMHHB@dp88_AR_GameController?3?3Destroye@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN7@Destroyed
	xor	edx, edx
	jne	SHORT $LN6@Destroyed
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Destroyed:
	jmp	SHORT $LN8@Destroyed
$LN7@Destroyed:
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+40]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@Destroyed:

; 213  : 		mirageTank_disguisePresets[0] = NULL;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+40], 0
$LN3@Destroyed:

; 214  : 	}
; 215  : 	if ( mirageTank_disguisePresets[1] != NULL )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+40], 0
	je	SHORT $LN2@Destroyed

; 216  : 	{
; 217  : 		delete [] mirageTank_disguisePresets[1];

	push	OFFSET ??_C@_0CC@KMBDMHHB@dp88_AR_GameController?3?3Destroye@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN10@Destroyed
	xor	edx, edx
	jne	SHORT $LN9@Destroyed
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Destroyed:
	jmp	SHORT $LN11@Destroyed
$LN10@Destroyed:
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+40]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN11@Destroyed:

; 218  : 		mirageTank_disguisePresets[1] = NULL;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+40], 0
$LN2@Destroyed:

; 219  : 	}
; 220  : 	if ( mirageTank_disguisePresets[2] != NULL )

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+40], 0
	je	SHORT $LN4@Destroyed

; 221  : 	{
; 222  : 		delete [] mirageTank_disguisePresets[2];

	push	OFFSET ??_C@_0CC@KMBDMHHB@dp88_AR_GameController?3?3Destroye@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN13@Destroyed
	xor	edx, edx
	jne	SHORT $LN12@Destroyed
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN12@Destroyed:
	jmp	SHORT $LN14@Destroyed
$LN13@Destroyed:
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+40]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN14@Destroyed:

; 223  : 		mirageTank_disguisePresets[2] = NULL;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+40], 0
$LN4@Destroyed:

; 224  : 	}
; 225  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_GameController::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Timer_Expired@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AR_GameController::Timer_Expired, COMDAT
; _this$ = ecx

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AR_GameController::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Custom@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_AR_GameController::Custom, COMDAT
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 199  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_AR_GameController::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_ar.cpp
;	COMDAT ?Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv546 = -116						; size = 4
tv524 = -116						; size = 4
tv498 = -116						; size = 4
tv476 = -116						; size = 4
tv450 = -116						; size = 4
tv428 = -116						; size = 4
tv774 = -112						; size = 4
tv717 = -112						; size = 4
tv660 = -112						; size = 4
tv792 = -109						; size = 1
tv735 = -109						; size = 1
tv678 = -109						; size = 1
tv558 = -109						; size = 1
tv510 = -109						; size = 1
tv462 = -109						; size = 1
tv789 = -108						; size = 4
tv732 = -108						; size = 4
tv675 = -108						; size = 4
tv557 = -108						; size = 4
tv509 = -108						; size = 4
tv461 = -108						; size = 4
tv769 = -106						; size = 1
tv712 = -106						; size = 1
tv655 = -106						; size = 1
tv762 = -105						; size = 1
tv705 = -105						; size = 1
tv648 = -105						; size = 1
tv786 = -104						; size = 4
tv757 = -104						; size = 4
tv729 = -104						; size = 4
tv700 = -104						; size = 4
tv672 = -104						; size = 4
tv643 = -104						; size = 4
tv556 = -104						; size = 4
tv508 = -104						; size = 4
tv460 = -104						; size = 4
tv759 = -100						; size = 4
tv702 = -100						; size = 4
tv645 = -100						; size = 4
tv552 = -100						; size = 4
tv550 = -100						; size = 4
tv504 = -100						; size = 4
tv502 = -100						; size = 4
tv456 = -100						; size = 4
tv454 = -100						; size = 4
tv343 = -100						; size = 4
tv320 = -100						; size = 4
$T1 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 4
_mtDisguise$ = -20					; size = 4
_alliedCountryMessage$ = -16				; size = 4
_sovietCountryMessage$ = -12				; size = 4
_countriesMessage$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AR_GameController::Created, COMDAT
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 51   :   dp88_Camo_Controller::Created(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Created@dp88_Camo_Controller@@UAEXPAVScriptableGameObj@@@Z ; dp88_Camo_Controller::Created

; 52   : 
; 53   : 	//Console_Output ( "Created dp88_AR_GameController\n" );
; 54   : 	created = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 1

; 55   : 	
; 56   : 	// Check we have not disabled all soviet countries
; 57   : 	if ( Get_Int_Parameter ( "enableCountry_Russia" ) == 0
; 58   : 		&& Get_Int_Parameter ( "enableCountry_Cuba" ) == 0
; 59   : 		&& Get_Int_Parameter ( "enableCountry_Iraq" ) == 0
; 60   : 		&& Get_Int_Parameter ( "enableCountry_Libya" ) == 0 )

	push	OFFSET ??_C@_0BF@IFBCFJNJ@enableCountry_Russia?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN38@Created
	push	OFFSET ??_C@_0BD@GCMPBKDK@enableCountry_Cuba?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN38@Created
	push	OFFSET ??_C@_0BD@PNCMJGCK@enableCountry_Iraq?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN38@Created
	push	OFFSET ??_C@_0BE@PMPLHGNA@enableCountry_Libya?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN38@Created

; 61   : 	{
; 62   : 		Console_Input ( "msg GAME CONTROLLER ERROR: All Soviet countries are disabled, defaulting to Russia!" );

	push	OFFSET ??_C@_0FE@FPMFHLI@msg?5GAME?5CONTROLLER?5ERROR?3?5All?5S@
	call	?Console_Input@@YAXPBD@Z		; Console_Input
	add	esp, 4

; 63   : 		team0_countryID = 1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+34], ax
$LN38@Created:

; 64   : 	}
; 65   : 
; 66   : 	// Check we have not disabled all allied countries
; 67   : 	if ( Get_Int_Parameter ( "enableCountry_America" ) == 0
; 68   : 		&& Get_Int_Parameter ( "enableCountry_France" ) == 0
; 69   : 		&& Get_Int_Parameter ( "enableCountry_Germany" ) == 0
; 70   : 		&& Get_Int_Parameter ( "enableCountry_GreatBritain" ) == 0
; 71   : 		&& Get_Int_Parameter ( "enableCountry_Korea" ) == 0 )

	push	OFFSET ??_C@_0BG@MOACNKPG@enableCountry_America?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN36@Created
	push	OFFSET ??_C@_0BF@NKCONKMO@enableCountry_France?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN36@Created
	push	OFFSET ??_C@_0BG@IIJGIMID@enableCountry_Germany?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN36@Created
	push	OFFSET ??_C@_0BL@OILODKNF@enableCountry_GreatBritain?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN36@Created
	push	OFFSET ??_C@_0BE@CLJLLOED@enableCountry_Korea?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN36@Created

; 72   : 	{
; 73   : 		Console_Input ( "msg GAME CONTROLLER ERROR: All Allied countries are disabled, defaulting to America!" );

	push	OFFSET ??_C@_0FF@GFFDLGON@msg?5GAME?5CONTROLLER?5ERROR?3?5All?5A@
	call	?Console_Input@@YAXPBD@Z		; Console_Input
	add	esp, 4

; 74   : 		team1_countryID = 1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax
$LN36@Created:

; 75   : 	}
; 76   : 	
; 77   : 	// Loop around until we get a non-disabled country ID for Soviets
; 78   : 	while ( team0_countryID == 0 )		

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	test	ecx, ecx
	jne	$LN27@Created

; 79   : 	{
; 80   : 		team0_countryID = (short)Commands->Get_Random_Int ( 1, 5 ); // Soviet, 1 to 4

	push	5
	push	1
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+34], ax

; 81   : 
; 82   : 		if ( team0_countryID == 1 && Get_Int_Parameter ( "enableCountry_Russia" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	ecx, 1
	jne	SHORT $LN34@Created
	push	OFFSET ??_C@_0BF@IFBCFJNJ@enableCountry_Russia?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN34@Created

; 83   : 			team0_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+34], ax
	jmp	SHORT $LN33@Created
$LN34@Created:

; 84   : 		
; 85   : 		else if ( team0_countryID == 2 && Get_Int_Parameter ( "enableCountry_Cuba" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	ecx, 2
	jne	SHORT $LN32@Created
	push	OFFSET ??_C@_0BD@GCMPBKDK@enableCountry_Cuba?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN32@Created

; 86   : 			team0_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+34], ax
	jmp	SHORT $LN33@Created
$LN32@Created:

; 87   : 		
; 88   : 		else if ( team0_countryID == 3 && Get_Int_Parameter ( "enableCountry_Iraq" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	ecx, 3
	jne	SHORT $LN30@Created
	push	OFFSET ??_C@_0BD@PNCMJGCK@enableCountry_Iraq?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN30@Created

; 89   : 			team0_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+34], ax
	jmp	SHORT $LN33@Created
$LN30@Created:

; 90   : 		
; 91   : 		else if ( team0_countryID == 4 && Get_Int_Parameter ( "enableCountry_Libya" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	ecx, 4
	jne	SHORT $LN33@Created
	push	OFFSET ??_C@_0BE@PMPLHGNA@enableCountry_Libya?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN33@Created

; 92   : 			team0_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+34], ax
$LN33@Created:

; 93   : 	}

	jmp	$LN36@Created
$LN27@Created:

; 94   : 
; 95   : 	// Loop around until we get a non-disabled country ID for Allies
; 96   : 	while ( team1_countryID == 0 )		

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	test	ecx, ecx
	jne	$LN26@Created

; 97   : 	{
; 98   : 		team1_countryID = (short)Commands->Get_Random_Int ( 1, 5 ); // Allies, 1 to 5

	push	5
	push	1
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+36], ax

; 99   : 
; 100  : 		if ( team1_countryID == 1 && Get_Int_Parameter ( "enableCountry_America" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cmp	ecx, 1
	jne	SHORT $LN25@Created
	push	OFFSET ??_C@_0BG@MOACNKPG@enableCountry_America?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN25@Created

; 101  : 			team1_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax
	jmp	$LN24@Created
$LN25@Created:

; 102  : 		
; 103  : 		else if ( team1_countryID == 2 && Get_Int_Parameter ( "enableCountry_France" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cmp	ecx, 2
	jne	SHORT $LN23@Created
	push	OFFSET ??_C@_0BF@NKCONKMO@enableCountry_France?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN23@Created

; 104  : 			team1_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax
	jmp	SHORT $LN24@Created
$LN23@Created:

; 105  : 		
; 106  : 		else if ( team1_countryID == 3 && Get_Int_Parameter ( "enableCountry_Germany" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cmp	ecx, 3
	jne	SHORT $LN21@Created
	push	OFFSET ??_C@_0BG@IIJGIMID@enableCountry_Germany?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN21@Created

; 107  : 			team1_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax
	jmp	SHORT $LN24@Created
$LN21@Created:

; 108  : 		
; 109  : 		else if ( team1_countryID == 4 && Get_Int_Parameter ( "enableCountry_GreatBritain" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cmp	ecx, 4
	jne	SHORT $LN19@Created
	push	OFFSET ??_C@_0BL@OILODKNF@enableCountry_GreatBritain?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN19@Created

; 110  : 			team1_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax
	jmp	SHORT $LN24@Created
$LN19@Created:

; 111  : 
; 112  : 		else if ( team1_countryID == 5 && Get_Int_Parameter ( "enableCountry_Korea" ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cmp	ecx, 5
	jne	SHORT $LN24@Created
	push	OFFSET ??_C@_0BE@CLJLLOED@enableCountry_Korea?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN24@Created

; 113  : 			team1_countryID = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+36], ax
$LN24@Created:

; 114  : 	}

	jmp	$LN27@Created
$LN26@Created:

; 115  : 
; 116  : 	// Output Soviet country name and cmsg the team what their special ability is
; 117  : 	StringClass countriesMessage ( "The Soviets are playing as ", true );

	push	1
	push	OFFSET ??_C@_0BM@FDMLICBA@The?5Soviets?5are?5playing?5as?5?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass

; 118  : 	StringClass sovietCountryMessage ( true );

	push	1
	lea	ecx, DWORD PTR _sovietCountryMessage$[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 119  : 	StringClass alliedCountryMessage ( true );

	push	1
	lea	ecx, DWORD PTR _alliedCountryMessage$[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 120  : 	switch ( team0_countryID )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR tv320[ebp], ecx
	mov	edx, DWORD PTR tv320[ebp]
	sub	edx, 1
	mov	DWORD PTR tv320[ebp], edx
	cmp	DWORD PTR tv320[ebp], 3
	ja	SHORT $LN15@Created
	mov	eax, DWORD PTR tv320[ebp]
	jmp	DWORD PTR $LN68@Created[eax*4]
$LN14@Created:

; 121  : 	{
; 122  : 		case 1:
; 123  : 			countriesMessage += "Russia";

	push	OFFSET ??_C@_06HBCOHLEJ@Russia?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 124  : 			sovietCountryMessage = "As the Russians you can use the powerful Tesla Tank to wipe out those allied scum!";

	push	OFFSET ??_C@_0FD@OPLPFHP@As?5the?5Russians?5you?5can?5use?5the?5@
	lea	ecx, DWORD PTR _sovietCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 125  : 			break;

	jmp	SHORT $LN15@Created
$LN13@Created:

; 126  : 		case 2:
; 127  : 			countriesMessage += "Cuba";

	push	OFFSET ??_C@_04ENNKDPHN@Cuba?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 128  : 			sovietCountryMessage = "As the Cubans you can use the insane but deadly Terrorist to bomb your enemies!";

	push	OFFSET ??_C@_0FA@BCOJLIFF@As?5the?5Cubans?5you?5can?5use?5the?5in@
	lea	ecx, DWORD PTR _sovietCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 129  : 			break;

	jmp	SHORT $LN15@Created
$LN12@Created:

; 130  : 		case 3:
; 131  : 			countriesMessage += "Iraq";

	push	OFFSET ??_C@_04NCDJLDGN@Iraq?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 132  : 			sovietCountryMessage = "As the Iraqis you can use the deadly Desolator to irradiate the allied scum!";

	push	OFFSET ??_C@_0EN@JLNHEEEP@As?5the?5Iraqis?5you?5can?5use?5the?5de@
	lea	ecx, DWORD PTR _sovietCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 133  : 			break;

	jmp	SHORT $LN15@Created
$LN11@Created:

; 134  : 		case 4:
; 135  : 			countriesMessage += "Libya";

	push	OFFSET ??_C@_05BEGMLHMG@Libya?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 136  : 			sovietCountryMessage = "As the Libiyans you can use the deadly Demolition Truck to destroy enemy forces!";

	push	OFFSET ??_C@_0FB@JHHKADDP@As?5the?5Libiyans?5you?5can?5use?5the?5@
	lea	ecx, DWORD PTR _sovietCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN15@Created:

; 137  : 			break;
; 138  : 	}
; 139  : 
; 140  : 
; 141  : 	// Output Allied country name and cmsg the team what their special ability is
; 142  : 	countriesMessage += " and the Allies are playing as ";

	push	OFFSET ??_C@_0CA@DLJOOLKB@?5and?5the?5Allies?5are?5playing?5as?5?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 143  : 	switch ( team1_countryID )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	DWORD PTR tv343[ebp], ecx
	mov	edx, DWORD PTR tv343[ebp]
	sub	edx, 1
	mov	DWORD PTR tv343[ebp], edx
	cmp	DWORD PTR tv343[ebp], 4
	ja	$LN9@Created
	mov	eax, DWORD PTR tv343[ebp]
	jmp	DWORD PTR $LN69@Created[eax*4]
$LN8@Created:

; 144  : 	{
; 145  : 		case 1:
; 146  : 			countriesMessage += "America";

	push	OFFSET ??_C@_07DOPJHFJA@America?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 147  : 			alliedCountryMessage = "As the Americans you can use paradrops to surprise the Soviet forces!";

	push	OFFSET ??_C@_0EG@DOHGOOCN@As?5the?5Americans?5you?5can?5use?5par@
	lea	ecx, DWORD PTR _alliedCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 148  : 			break;

	jmp	SHORT $LN9@Created
$LN7@Created:

; 149  : 		case 2:
; 150  : 			countriesMessage += "France";

	push	OFFSET ??_C@_06COBCPIFO@France?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 151  : 			alliedCountryMessage = "As the French your base is well defended by the powerful Grand Cannon";

	push	OFFSET ??_C@_0EG@JKHHPBBE@As?5the?5French?5your?5base?5is?5well?5@
	lea	ecx, DWORD PTR _alliedCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 152  : 			break;

	jmp	SHORT $LN9@Created
$LN6@Created:

; 153  : 		case 3:
; 154  : 			countriesMessage += "Germany";

	push	OFFSET ??_C@_07HIGNCDOF@Germany?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 155  : 			alliedCountryMessage = "As the Germans you can use the Tank Destroyer to easily wipe out Soviet tanks.";

	push	OFFSET ??_C@_0EP@PMBHCLFE@As?5the?5Germans?5you?5can?5use?5the?5T@
	lea	ecx, DWORD PTR _alliedCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 156  : 			break;

	jmp	SHORT $LN9@Created
$LN5@Created:

; 157  : 		case 4:
; 158  : 			countriesMessage += "Great Britain";

	push	OFFSET ??_C@_0O@IAGENNII@Great?5Britain?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 159  : 			alliedCountryMessage = "As the British you can use snipers to pick off enemy infantry from distance";

	push	OFFSET ??_C@_0EM@BBPIKCAE@As?5the?5British?5you?5can?5use?5snipe@
	lea	ecx, DWORD PTR _alliedCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 160  : 			break;

	jmp	SHORT $LN9@Created
$LN4@Created:

; 161  : 		case 5:
; 162  : 			countriesMessage += "Korea";

	push	OFFSET ??_C@_05MDAMHPFF@Korea?$AA@
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??YStringClass@@QAEABV0@PBD@Z		; StringClass::operator+=

; 163  : 			alliedCountryMessage = "As the Koreans you can use Black Eagles to rain death from the skies!";

	push	OFFSET ??_C@_0EG@NCFIPGCK@As?5the?5Koreans?5you?5can?5use?5Black@
	lea	ecx, DWORD PTR _alliedCountryMessage$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN9@Created:

; 164  : 			break;
; 165  : 	}
; 166  : 
; 167  : 	// Send public countries message and team country messages
; 168  : 	Send_Message ( 255,255,255, countriesMessage.Peek_Buffer() );

	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	call	DWORD PTR ?Send_Message@@3P6AXIIIPBD@ZA	; Send_Message
	add	esp, 16					; 00000010H

; 169  : 	Send_Message_Team( 0, 255,69,0, sovietCountryMessage.Peek_Buffer() );

	lea	ecx, DWORD PTR _sovietCountryMessage$[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	push	0
	push	69					; 00000045H
	push	255					; 000000ffH
	push	0
	call	?Send_Message_Team@@YAXHIIIPBD@Z	; Send_Message_Team
	add	esp, 20					; 00000014H

; 170  : 	Send_Message_Team( 1, 30,114,255, alliedCountryMessage.Peek_Buffer() );

	lea	ecx, DWORD PTR _alliedCountryMessage$[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	push	255					; 000000ffH
	push	114					; 00000072H
	push	30					; 0000001eH
	push	1
	call	?Send_Message_Team@@YAXHIIIPBD@Z	; Send_Message_Team
	add	esp, 20					; 00000014H

; 171  : 
; 172  : 
; 173  : 	// Get mirage tank disguise preset names
; 174  : 	const char* mtDisguise = Get_Parameter( "MirageTank_disguisePreset_1" );

	push	OFFSET ??_C@_0BM@FHCMLMAC@MirageTank_disguisePreset_1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _mtDisguise$[ebp], eax

; 175  : 	if ( strcmp ( mtDisguise, "null" ) != 0 && Is_Valid_Preset ( mtDisguise ) )

	mov	DWORD PTR tv645[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	mov	eax, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv643[ebp], eax
$LL53@Created:
	mov	ecx, DWORD PTR tv643[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv648[ebp], dl
	mov	eax, DWORD PTR tv645[ebp]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN54@Created
	cmp	BYTE PTR tv648[ebp], 0
	je	SHORT $LN55@Created
	mov	ecx, DWORD PTR tv643[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv655[ebp], dl
	mov	eax, DWORD PTR tv645[ebp]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN54@Created
	add	DWORD PTR tv643[ebp], 2
	add	DWORD PTR tv645[ebp], 2
	cmp	BYTE PTR tv655[ebp], 0
	jne	SHORT $LL53@Created
$LN55@Created:
	mov	DWORD PTR tv660[ebp], 0
	jmp	SHORT $LN56@Created
$LN54@Created:
	sbb	ecx, ecx
	or	ecx, 1
	mov	DWORD PTR tv660[ebp], ecx
$LN56@Created:
	mov	edx, DWORD PTR tv660[ebp]
	mov	DWORD PTR tv428[ebp], edx
	cmp	DWORD PTR tv428[ebp], 0
	je	$LN3@Created
	mov	eax, DWORD PTR _mtDisguise$[ebp]
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@Created

; 176  : 	{
; 177  : 		mirageTank_disguisePresets[0] = new char[strlen(mtDisguise)+1];

	push	OFFSET ??_C@_0CA@LFBBGCB@dp88_AR_GameController?3?3Created?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 127				; 0000007fH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN42@Created
	xor	edx, edx
	jne	SHORT $LN41@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 127				; 0000007fH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN41@Created:
	mov	DWORD PTR tv454[ebp], 0
	jmp	SHORT $LN43@Created
$LN42@Created:
	mov	edx, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv672[ebp], edx
	mov	eax, DWORD PTR tv672[ebp]
	add	eax, 1
	mov	DWORD PTR tv675[ebp], eax
$LL57@Created:
	mov	ecx, DWORD PTR tv672[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv678[ebp], dl
	add	DWORD PTR tv672[ebp], 1
	cmp	BYTE PTR tv678[ebp], 0
	jne	SHORT $LL57@Created
	mov	eax, DWORD PTR tv672[ebp]
	sub	eax, DWORD PTR tv675[ebp]
	mov	DWORD PTR tv450[ebp], eax
	mov	ecx, DWORD PTR tv450[ebp]
	add	ecx, 1
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv454[ebp], edx
$LN43@Created:
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv454[ebp]
	mov	DWORD PTR [ecx+eax+40], edx

; 178  : 		strcpy ( mirageTank_disguisePresets[0], mtDisguise );

	mov	eax, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv456[ebp], eax
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+40]
	mov	DWORD PTR tv460[ebp], eax
	mov	ecx, DWORD PTR tv460[ebp]
	mov	DWORD PTR tv461[ebp], ecx
$LN44@Created:
	mov	edx, DWORD PTR tv456[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv462[ebp], al
	mov	ecx, DWORD PTR tv460[ebp]
	mov	dl, BYTE PTR tv462[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR tv456[ebp]
	add	eax, 1
	mov	DWORD PTR tv456[ebp], eax
	mov	ecx, DWORD PTR tv460[ebp]
	add	ecx, 1
	mov	DWORD PTR tv460[ebp], ecx
	cmp	BYTE PTR tv462[ebp], 0
	jne	SHORT $LN44@Created
$LN3@Created:

; 179  : 	}
; 180  : 
; 181  : 	mtDisguise = Get_Parameter( "MirageTank_disguisePreset_2" );

	push	OFFSET ??_C@_0BM@HMABOPMB@MirageTank_disguisePreset_2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _mtDisguise$[ebp], eax

; 182  : 	if ( strcmp ( mtDisguise, "null" ) != 0 && Is_Valid_Preset ( mtDisguise ) )

	mov	DWORD PTR tv702[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	mov	eax, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv700[ebp], eax
$LL58@Created:
	mov	ecx, DWORD PTR tv700[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv705[ebp], dl
	mov	eax, DWORD PTR tv702[ebp]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN59@Created
	cmp	BYTE PTR tv705[ebp], 0
	je	SHORT $LN60@Created
	mov	ecx, DWORD PTR tv700[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv712[ebp], dl
	mov	eax, DWORD PTR tv702[ebp]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN59@Created
	add	DWORD PTR tv700[ebp], 2
	add	DWORD PTR tv702[ebp], 2
	cmp	BYTE PTR tv712[ebp], 0
	jne	SHORT $LL58@Created
$LN60@Created:
	mov	DWORD PTR tv717[ebp], 0
	jmp	SHORT $LN61@Created
$LN59@Created:
	sbb	ecx, ecx
	or	ecx, 1
	mov	DWORD PTR tv717[ebp], ecx
$LN61@Created:
	mov	edx, DWORD PTR tv717[ebp]
	mov	DWORD PTR tv476[ebp], edx
	cmp	DWORD PTR tv476[ebp], 0
	je	$LN2@Created
	mov	eax, DWORD PTR _mtDisguise$[ebp]
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@Created

; 183  : 	{
; 184  : 		mirageTank_disguisePresets[1] = new char[strlen(mtDisguise)+1];

	push	OFFSET ??_C@_0CA@LFBBGCB@dp88_AR_GameController?3?3Created?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 134				; 00000086H
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN46@Created
	xor	edx, edx
	jne	SHORT $LN45@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 134				; 00000086H
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN45@Created:
	mov	DWORD PTR tv502[ebp], 0
	jmp	SHORT $LN47@Created
$LN46@Created:
	mov	edx, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv729[ebp], edx
	mov	eax, DWORD PTR tv729[ebp]
	add	eax, 1
	mov	DWORD PTR tv732[ebp], eax
$LL62@Created:
	mov	ecx, DWORD PTR tv729[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv735[ebp], dl
	add	DWORD PTR tv729[ebp], 1
	cmp	BYTE PTR tv735[ebp], 0
	jne	SHORT $LL62@Created
	mov	eax, DWORD PTR tv729[ebp]
	sub	eax, DWORD PTR tv732[ebp]
	mov	DWORD PTR tv498[ebp], eax
	mov	ecx, DWORD PTR tv498[ebp]
	add	ecx, 1
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv502[ebp], edx
$LN47@Created:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv502[ebp]
	mov	DWORD PTR [ecx+eax+40], edx

; 185  : 		strcpy ( mirageTank_disguisePresets[1], mtDisguise );

	mov	eax, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv504[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+40]
	mov	DWORD PTR tv508[ebp], eax
	mov	ecx, DWORD PTR tv508[ebp]
	mov	DWORD PTR tv509[ebp], ecx
$LN48@Created:
	mov	edx, DWORD PTR tv504[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv510[ebp], al
	mov	ecx, DWORD PTR tv508[ebp]
	mov	dl, BYTE PTR tv510[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR tv504[ebp]
	add	eax, 1
	mov	DWORD PTR tv504[ebp], eax
	mov	ecx, DWORD PTR tv508[ebp]
	add	ecx, 1
	mov	DWORD PTR tv508[ebp], ecx
	cmp	BYTE PTR tv510[ebp], 0
	jne	SHORT $LN48@Created
$LN2@Created:

; 186  : 	}
; 187  : 
; 188  : 	mtDisguise = Get_Parameter( "MirageTank_disguisePreset_3" );

	push	OFFSET ??_C@_0BM@GFBKNOIA@MirageTank_disguisePreset_3?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _mtDisguise$[ebp], eax

; 189  : 	if ( strcmp ( mtDisguise, "null" ) != 0 && Is_Valid_Preset ( mtDisguise ) )

	mov	DWORD PTR tv759[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	mov	eax, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv757[ebp], eax
$LL63@Created:
	mov	ecx, DWORD PTR tv757[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv762[ebp], dl
	mov	eax, DWORD PTR tv759[ebp]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN64@Created
	cmp	BYTE PTR tv762[ebp], 0
	je	SHORT $LN65@Created
	mov	ecx, DWORD PTR tv757[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv769[ebp], dl
	mov	eax, DWORD PTR tv759[ebp]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN64@Created
	add	DWORD PTR tv757[ebp], 2
	add	DWORD PTR tv759[ebp], 2
	cmp	BYTE PTR tv769[ebp], 0
	jne	SHORT $LL63@Created
$LN65@Created:
	mov	DWORD PTR tv774[ebp], 0
	jmp	SHORT $LN66@Created
$LN64@Created:
	sbb	ecx, ecx
	or	ecx, 1
	mov	DWORD PTR tv774[ebp], ecx
$LN66@Created:
	mov	edx, DWORD PTR tv774[ebp]
	mov	DWORD PTR tv524[ebp], edx
	cmp	DWORD PTR tv524[ebp], 0
	je	$LN1@Created
	mov	eax, DWORD PTR _mtDisguise$[ebp]
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	$LN1@Created

; 190  : 	{
; 191  : 		mirageTank_disguisePresets[2] = new char[strlen(mtDisguise)+1];

	push	OFFSET ??_C@_0CA@LFBBGCB@dp88_AR_GameController?3?3Created?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 141				; 0000008dH
	push	eax
	push	OFFSET ??_C@_0DF@OJAOOMAH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN50@Created
	xor	edx, edx
	jne	SHORT $LN49@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 141				; 0000008dH
	push	eax
	push	OFFSET ??_C@_1GK@CJEGDLAP@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN49@Created:
	mov	DWORD PTR tv550[ebp], 0
	jmp	SHORT $LN51@Created
$LN50@Created:
	mov	edx, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv786[ebp], edx
	mov	eax, DWORD PTR tv786[ebp]
	add	eax, 1
	mov	DWORD PTR tv789[ebp], eax
$LL67@Created:
	mov	ecx, DWORD PTR tv786[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv792[ebp], dl
	add	DWORD PTR tv786[ebp], 1
	cmp	BYTE PTR tv792[ebp], 0
	jne	SHORT $LL67@Created
	mov	eax, DWORD PTR tv786[ebp]
	sub	eax, DWORD PTR tv789[ebp]
	mov	DWORD PTR tv546[ebp], eax
	mov	ecx, DWORD PTR tv546[ebp]
	add	ecx, 1
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv550[ebp], edx
$LN51@Created:
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv550[ebp]
	mov	DWORD PTR [ecx+eax+40], edx

; 192  : 		strcpy ( mirageTank_disguisePresets[2], mtDisguise );

	mov	eax, DWORD PTR _mtDisguise$[ebp]
	mov	DWORD PTR tv552[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+40]
	mov	DWORD PTR tv556[ebp], eax
	mov	ecx, DWORD PTR tv556[ebp]
	mov	DWORD PTR tv557[ebp], ecx
$LN52@Created:
	mov	edx, DWORD PTR tv552[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv558[ebp], al
	mov	ecx, DWORD PTR tv556[ebp]
	mov	dl, BYTE PTR tv558[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR tv552[ebp]
	add	eax, 1
	mov	DWORD PTR tv552[ebp], eax
	mov	ecx, DWORD PTR tv556[ebp]
	add	ecx, 1
	mov	DWORD PTR tv556[ebp], ecx
	cmp	BYTE PTR tv558[ebp], 0
	jne	SHORT $LN52@Created
$LN1@Created:

; 193  : 	}
; 194  : }

	lea	ecx, DWORD PTR _alliedCountryMessage$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _sovietCountryMessage$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _countriesMessage$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN68@Created:
	DD	$LN14@Created
	DD	$LN13@Created
	DD	$LN12@Created
	DD	$LN11@Created
$LN69@Created:
	DD	$LN8@Created
	DD	$LN7@Created
	DD	$LN6@Created
	DD	$LN5@Created
	DD	$LN4@Created
?Created@dp88_AR_GameController@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AR_GameController::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Camo_Controller@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Camo_Controller@@UAEPAXI@Z PROC		; dp88_Camo_Controller::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Camo_Controller@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Camo_Controller@@UAEPAXI@Z ENDP		; dp88_Camo_Controller::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Camo_Controller@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Camo_Controller@@UAE@XZ PROC			; dp88_Camo_Controller::~dp88_Camo_Controller, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Camo_Controller@@UAE@XZ ENDP			; dp88_Camo_Controller::~dp88_Camo_Controller
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Camo_Controller@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Camo_Controller@@QAE@XZ PROC			; dp88_Camo_Controller::dp88_Camo_Controller, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Camo_Controller@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Camo_Controller@@QAE@XZ ENDP			; dp88_Camo_Controller::dp88_Camo_Controller
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_ChargedTurret@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_ChargedTurret@@UAEPAXI@Z PROC		; dp88_AI_ChargedTurret::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_ChargedTurret@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_ChargedTurret@@UAEPAXI@Z ENDP		; dp88_AI_ChargedTurret::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_ChargedTurret@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_ChargedTurret@@UAE@XZ PROC			; dp88_AI_ChargedTurret::~dp88_AI_ChargedTurret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Turret@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_ChargedTurret@@UAE@XZ ENDP			; dp88_AI_ChargedTurret::~dp88_AI_ChargedTurret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_ChargedTurret@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_ChargedTurret@@QAE@XZ PROC			; dp88_AI_ChargedTurret::dp88_AI_ChargedTurret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_AI_Turret@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_ChargedTurret@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_ChargedTurret@@QAE@XZ ENDP			; dp88_AI_ChargedTurret::dp88_AI_ChargedTurret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_Turret@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_Turret@@UAEPAXI@Z PROC			; dp88_AI_Turret::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Turret@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_Turret@@UAEPAXI@Z ENDP			; dp88_AI_Turret::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_Turret@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_Turret@@UAE@XZ PROC				; dp88_AI_Turret::~dp88_AI_Turret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_customAI@@UAE@XZ		; dp88_customAI::~dp88_customAI
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_Turret@@UAE@XZ ENDP				; dp88_AI_Turret::~dp88_AI_Turret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_Turret@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_Turret@@QAE@XZ PROC				; dp88_AI_Turret::dp88_AI_Turret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_customAI@@QAE@XZ		; dp88_customAI::dp88_customAI
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_Turret@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_Turret@@QAE@XZ ENDP				; dp88_AI_Turret::dp88_AI_Turret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_customAI@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_customAI@@UAEPAXI@Z PROC			; dp88_customAI::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_customAI@@UAE@XZ		; dp88_customAI::~dp88_customAI
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_customAI@@UAEPAXI@Z ENDP			; dp88_customAI::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.h
;	COMDAT ??1dp88_customAI@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_customAI@@UAE@XZ PROC				; dp88_customAI::~dp88_customAI, COMDAT
; _this$ = ecx

; 67   :   ~dp88_customAI() { if ( debugFile != NULL ) { fclose(debugFile); } };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_customAI@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	SHORT $LN2@dp88_custo
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fclose
	add	esp, 4
$LN2@dp88_custo:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_customAI@@UAE@XZ ENDP				; dp88_customAI::~dp88_customAI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.h
;	COMDAT ??0dp88_customAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_customAI@@QAE@XZ PROC				; dp88_customAI::dp88_customAI, COMDAT
; _this$ = ecx

; 66   :   dp88_customAI() { debugFile = NULL; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_customAI@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0ReferencerClass@@QAE@XZ		; ReferencerClass::ReferencerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_customAI@@QAE@XZ ENDP				; dp88_customAI::dp88_customAI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z PROC	; JFW_Object_Created_Hook_Base::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1JFW_Object_Created_Hook_Base@@UAE@XZ ; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z ENDP	; JFW_Object_Created_Hook_Base::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z PROC	; JFW_Object_Created_Hook_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z ENDP	; JFW_Object_Created_Hook_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z PROC	; JFW_Object_Created_Hook_Base::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z ENDP	; JFW_Object_Created_Hook_Base::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z PROC	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Object_Created_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z ENDP	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_tt.h
;	COMDAT ??0JFW_Object_Created_Hook_Base@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0JFW_Object_Created_Hook_Base@@QAE@XZ PROC		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base, COMDAT
; _this$ = ecx

; 556  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Object_Created_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 557  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0JFW_Object_Created_Hook_Base@@QAE@XZ ENDP		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z PROC		; MultiKeyHookScriptImpClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z ENDP		; MultiKeyHookScriptImpClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z PROC		; MultiKeyHookScriptImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z ENDP		; MultiKeyHookScriptImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z PROC	; MultiKeyHookScriptImpClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z ENDP	; MultiKeyHookScriptImpClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z PROC		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MultiKeyHookScriptImpClass@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z ENDP		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1MultiKeyHookScriptImpClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MultiKeyHookScriptImpClass@@UAE@XZ PROC		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1MultiKeyHookScriptImpClass@@UAE@XZ ENDP		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0MultiKeyHookScriptImpClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MultiKeyHookScriptImpClass@@QAE@XZ PROC		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MultiKeyHookScriptImpClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0MultiKeyHookScriptImpClass@@QAE@XZ ENDP		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ
_TEXT	SEGMENT
_node$1 = -12						; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count, COMDAT
; _this$ = ecx

; 302  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		uint32 count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 304  : 
; 305  : 		for (SLNode<T>* node = HeadNode; node; node = node->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _node$1[ebp], ecx
	jmp	SHORT $LN3@Get_Count
$LN2@Get_Count:
	mov	ecx, DWORD PTR _node$1[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _node$1[ebp], eax
$LN3@Get_Count:
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN1@Get_Count

; 306  : 			++count;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN2@Get_Count
$LN1@Get_Count:

; 307  : 
; 308  : 		return count;

	mov	eax, DWORD PTR _count$[ebp]

; 309  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty, COMDAT
; _this$ = ecx

; 296  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return !HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv66[ebp]

; 298  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
_TEXT	SEGMENT
tv140 = -88						; size = 4
tv142 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN8@Insert_Aft

; 269  : 		{
; 270  : 			return false;

	xor	al, al
	jmp	$LN9@Insert_Aft
$LN8@Insert_Aft:

; 271  : 		}
; 272  : 		if (oldnode == NULL || HeadNode == NULL)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN6@Insert_Aft
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@Insert_Aft
$LN6@Insert_Aft:

; 273  : 		{
; 274  : 			return(Add_Head(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN9@Insert_Aft
$LN7@Insert_Aft:

; 275  : 		}
; 276  : 		SLNode<T> *cur;
; 277  : 		for (cur = HeadNode; cur && cur->Data() != oldnode; cur = cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Insert_Aft
$LN4@Insert_Aft:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Insert_Aft:
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN3@Insert_Aft

; 278  : 		{
; 279  : 		}

	jmp	SHORT $LN4@Insert_Aft
$LN3@Insert_Aft:

; 280  : 		if (cur != NULL  && cur->Data() == oldnode)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN2@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN2@Insert_Aft

; 281  : 		{
; 282  : 			if (cur == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Insert_Aft

; 283  : 			{
; 284  : 				return(Add_Tail(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	$LN9@Insert_Aft
$LN1@Insert_Aft:

; 285  : 			}
; 286  : 			SLNode<T> *temp = new SLNode<T>(newnode);

	push	OFFSET ??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@
	push	286					; 0000011eH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Insert_Aft
	xor	ecx, ecx
	jne	SHORT $LN11@Insert_Aft
	push	286					; 0000011eH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@Insert_Aft:
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN15@Insert_Aft
$LN14@Insert_Aft:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN12@Insert_Aft
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN13@Insert_Aft
$LN12@Insert_Aft:
	mov	DWORD PTR tv140[ebp], 0
$LN13@Insert_Aft:
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv142[ebp], ecx
$LN15@Insert_Aft:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 287  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 288  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 289  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Insert_Aft
$LN2@Insert_Aft:

; 290  : 		}
; 291  : 		return false;

	xor	al, al
$LN9@Insert_Aft:

; 292  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
_TEXT	SEGMENT
tv145 = -88						; size = 4
tv147 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN7@Insert_Bef

; 245  : 		{
; 246  : 			return false;

	xor	al, al
	jmp	$LN8@Insert_Bef
$LN7@Insert_Bef:

; 247  : 		}
; 248  : 		if (oldnode == NULL || HeadNode == NULL || HeadNode->Data() == oldnode)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	SHORT $LN6@Insert_Bef
$LN5@Insert_Bef:

; 249  : 		{
; 250  : 			return Add_Head(newnode);

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN8@Insert_Bef
$LN6@Insert_Bef:

; 251  : 		}
; 252  : 		SLNode<T> *cur;
; 253  : 		for (cur=HeadNode; cur->Next() && cur->Next()->Data() != oldnode; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN4@Insert_Bef
$LN3@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN4@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	SHORT $LN2@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN2@Insert_Bef

; 254  : 		{
; 255  : 		}

	jmp	SHORT $LN3@Insert_Bef
$LN2@Insert_Bef:

; 256  : 		if (cur->Next() != NULL && cur->Next()->Data() == oldnode)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	$LN1@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN1@Insert_Bef

; 257  : 		{
; 258  : 			SLNode<T> *temp	= new SLNode<T> (newnode);

	push	OFFSET ??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	258					; 00000102H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@Insert_Bef
	xor	ecx, ecx
	jne	SHORT $LN10@Insert_Bef
	push	258					; 00000102H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Insert_Bef:
	mov	DWORD PTR tv147[ebp], 0
	jmp	SHORT $LN14@Insert_Bef
$LN13@Insert_Bef:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@Insert_Bef
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN12@Insert_Bef
$LN11@Insert_Bef:
	mov	DWORD PTR tv145[ebp], 0
$LN12@Insert_Bef:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv147[ebp], ecx
$LN14@Insert_Bef:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 259  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 260  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 261  : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@Insert_Bef
$LN1@Insert_Bef:

; 262  : 		}
; 263  : 		return false;

	xor	al, al
$LN8@Insert_Bef:

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_cur$2 = -12						; size = 4
_next$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All, COMDAT
; _this$ = ecx

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 		SLNode<T> *next;
; 233  : 		for (SLNode<T> *cur = HeadNode; cur; cur = next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$2[ebp], ecx
	jmp	SHORT $LN3@Remove_All
$LN2@Remove_All:
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$2[ebp], eax
$LN3@Remove_All:
	cmp	DWORD PTR _cur$2[ebp], 0
	je	SHORT $LN1@Remove_All

; 234  : 		{
; 235  : 			next = cur->Next();

	mov	ecx, DWORD PTR _cur$2[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _next$[ebp], eax

; 236  : 			delete cur;

	push	OFFSET ??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@
	push	236					; 000000ecH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Remove_All
	xor	ecx, ecx
	jne	SHORT $LN6@Remove_All
	push	236					; 000000ecH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Remove_All:
	jmp	SHORT $LN8@Remove_All
$LN7@Remove_All:
	mov	eax, DWORD PTR _cur$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN8@Remove_All:

; 237  : 		}

	jmp	SHORT $LN2@Remove_All
$LN1@Remove_All:

; 238  : 		HeadNode = TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 239  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv76 = -81						; size = 1
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_element$ = 8						; size = 4
?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove, COMDAT
; _this$ = ecx

; 202  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		if (element == NULL || HeadNode == NULL)

	cmp	DWORD PTR _element$[ebp], 0
	je	SHORT $LN7@Remove
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@Remove
$LN7@Remove:

; 204  : 		{
; 205  : 			return false;

	xor	al, al
	jmp	$LN9@Remove
$LN8@Remove:

; 206  : 		}
; 207  : 		if (HeadNode->Data() == element)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN6@Remove

; 208  : 		{
; 209  : 			return Remove_Head() != NULL ? true : false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	test	eax, eax
	je	SHORT $LN11@Remove
	mov	BYTE PTR tv76[ebp], 1
	jmp	SHORT $LN12@Remove
$LN11@Remove:
	mov	BYTE PTR tv76[ebp], 0
$LN12@Remove:
	mov	al, BYTE PTR tv76[ebp]
	jmp	$LN9@Remove
$LN6@Remove:

; 210  : 		}
; 211  : 		SLNode<T> *cur;
; 212  : 		for (cur = HeadNode; cur->Next() && cur->Next()->Data() != element; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Remove
$LN4@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	SHORT $LN3@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	je	SHORT $LN3@Remove

; 213  : 		{
; 214  : 		}

	jmp	SHORT $LN4@Remove
$LN3@Remove:

; 215  : 		if (cur->Next() != NULL && cur->Next()->Data() == element)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	$LN2@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN2@Remove

; 216  : 		{
; 217  : 			SLNode<T> *temp	= cur->Next();

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _temp$2[ebp], eax

; 218  : 			cur->Set_Next(temp->Next());

	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 219  : 			if (temp == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Remove

; 220  : 			{
; 221  : 				TailNode = cur;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Remove:

; 222  : 			}
; 223  : 			delete temp;

	push	OFFSET ??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	223					; 000000dfH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Remove
	xor	ecx, ecx
	jne	SHORT $LN13@Remove
	push	223					; 000000dfH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Remove:
	jmp	SHORT $LN15@Remove
$LN14@Remove:
	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN15@Remove:

; 224  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Remove
$LN2@Remove:

; 225  : 		}
; 226  : 		return false;

	xor	al, al
$LN9@Remove:

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
_data$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Tai

; 193  : 		{
; 194  : 			return ((T *)NULL);

	xor	eax, eax
	jmp	SHORT $LN2@Remove_Tai
$LN1@Remove_Tai:

; 195  : 		}
; 196  : 		T* data = TailNode->Data();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	mov	DWORD PTR _data$[ebp], eax

; 197  : 		return (Remove(data) ? data : (T*)NULL);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Remove_Tai
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN5@Remove_Tai
$LN4@Remove_Tai:
	mov	DWORD PTR tv76[ebp], 0
$LN5@Remove_Tai:
	mov	eax, DWORD PTR tv76[ebp]
$LN2@Remove_Tai:

; 198  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_data$ = -12						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Remove_Hea

; 175  : 		{
; 176  : 			return ((T* )NULL);

	xor	eax, eax
	jmp	$LN3@Remove_Hea
$LN2@Remove_Hea:

; 177  : 		}
; 178  : 		SLNode<T> *temp = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 179  : 		HeadNode = HeadNode->Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 180  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Hea

; 181  : 		{
; 182  : 			TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@Remove_Hea:

; 183  : 		}
; 184  : 		T *data = temp->Data();

	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	mov	DWORD PTR _data$[ebp], eax

; 185  : 		delete temp;

	push	OFFSET ??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	185					; 000000b9H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Remove_Hea
	xor	ecx, ecx
	jne	SHORT $LN5@Remove_Hea
	push	185					; 000000b9H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Remove_Hea:
	jmp	SHORT $LN7@Remove_Hea
$LN6@Remove_Hea:
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN7@Remove_Hea:

; 186  : 		return data;

	mov	eax, DWORD PTR _data$[ebp]
$LN3@Remove_Hea:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
_cur$1 = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail, COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@Add_Tail

; 161  : 		{
; 162  : 			return false;

	xor	al, al
	jmp	SHORT $LN5@Add_Tail
$LN4@Add_Tail:

; 163  : 		}
; 164  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next()) 

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$1[ebp], ecx
	jmp	SHORT $LN3@Add_Tail
$LN2@Add_Tail:
	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$1[ebp], eax
$LN3@Add_Tail:
	cmp	DWORD PTR _cur$1[ebp], 0
	je	SHORT $LN1@Add_Tail

; 165  : 		{
; 166  : 			Add_Tail(cur->Data());

	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 167  : 		}

	jmp	SHORT $LN2@Add_Tail
$LN1@Add_Tail:

; 168  : 		return true;

	mov	al, 1
$LN5@Add_Tail:

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		if (data == NULL)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN3@Add_Tail

; 141  : 		{
; 142  : 			return false;

	xor	al, al
	jmp	$LN4@Add_Tail
$LN3@Add_Tail:

; 143  : 		}
; 144  : 		SLNode<T> *temp = new SLNode<T> (data);

	push	OFFSET ??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@
	push	144					; 00000090H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@Add_Tail
	xor	ecx, ecx
	jne	SHORT $LN6@Add_Tail
	push	144					; 00000090H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Add_Tail:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN10@Add_Tail
$LN9@Add_Tail:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@Add_Tail
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN8@Add_Tail
$LN7@Add_Tail:
	mov	DWORD PTR tv82[ebp], 0
$LN8@Add_Tail:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN10@Add_Tail:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 145  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Add_Tail

; 146  : 		{
; 147  : 			HeadNode = TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx+4], eax

; 148  : 		}
; 149  : 		else

	jmp	SHORT $LN1@Add_Tail
$LN2@Add_Tail:

; 150  : 		{
; 151  : 			TailNode->Set_Next(temp);

	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 152  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Tail:

; 153  : 		}
; 154  : 		return true;

	mov	al, 1
$LN4@Add_Tail:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
tv90 = -92						; size = 4
tv92 = -88						; size = 4
$T1 = -84						; size = 4
_temp$2 = -16						; size = 4
_cur$3 = -12						; size = 4
_addpoint$ = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@Add_Head

; 115  : 		{
; 116  : 			return false;

	xor	al, al
	jmp	$LN7@Add_Head
$LN6@Add_Head:

; 117  : 		}
; 118  : 		SLNode<T> *addpoint = NULL;

	mov	DWORD PTR _addpoint$[ebp], 0

; 119  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next())

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$3[ebp], ecx
	jmp	SHORT $LN5@Add_Head
$LN4@Add_Head:
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$3[ebp], eax
$LN5@Add_Head:
	cmp	DWORD PTR _cur$3[ebp], 0
	je	$LN3@Add_Head

; 120  : 		{
; 121  : 			if (addpoint)

	cmp	DWORD PTR _addpoint$[ebp], 0
	je	$LN2@Add_Head

; 122  : 			{
; 123  : 				SLNode<T> *temp = new SLNode<T>(cur->Data());

	push	OFFSET ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
	push	123					; 0000007bH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN12@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN9@Add_Head
	push	123					; 0000007bH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Add_Head:
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN13@Add_Head
$LN12@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN10@Add_Head
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN11@Add_Head
$LN10@Add_Head:
	mov	DWORD PTR tv90[ebp], 0
$LN11@Add_Head:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv92[ebp], eax
$LN13@Add_Head:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _temp$2[ebp], ecx

; 124  : 				temp->Set_Next(addpoint->Next());

	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 125  : 				addpoint->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 126  : 				addpoint = temp;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR _addpoint$[ebp], eax

; 127  : 			}
; 128  : 			else

	jmp	SHORT $LN1@Add_Head
$LN2@Add_Head:

; 129  : 			{
; 130  : 				Add_Head(cur->Data());

	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 131  : 				addpoint = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _addpoint$[ebp], ecx
$LN1@Add_Head:

; 132  : 			}
; 133  : 		}

	jmp	$LN4@Add_Head
$LN3@Add_Head:

; 134  : 		return true;

	mov	al, 1
$LN7@Add_Head:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head, COMDAT
; _this$ = ecx

; 96   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		if (!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN2@Add_Head

; 98   : 		{
; 99   : 			return false;

	xor	al, al
	jmp	$LN3@Add_Head
$LN2@Add_Head:

; 100  : 		}
; 101  : 		SLNode<T> *temp	= new SLNode<T>(data);

	push	OFFSET ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
	push	101					; 00000065H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN5@Add_Head
	push	101					; 00000065H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Add_Head:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN9@Add_Head
$LN8@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Add_Head
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN7@Add_Head
$LN6@Add_Head:
	mov	DWORD PTR tv82[ebp], 0
$LN7@Add_Head:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN9@Add_Head:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 102  : 		temp->Set_Next(HeadNode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 103  : 		HeadNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 104  : 		if (!TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@Add_Head

; 105  : 		{
; 106  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Head:

; 107  : 		}
; 108  : 		return true;

	mov	al, 1
$LN3@Add_Head:

; 109  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 90   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@

; 91   : 		Remove_All();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 86   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 87   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EJFW_Key_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EJFW_Key_Hook_Base@@UAEPAXI@Z PROC			; JFW_Key_Hook_Base::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1JFW_Key_Hook_Base@@UAE@XZ	; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EJFW_Key_Hook_Base@@UAEPAXI@Z ENDP			; JFW_Key_Hook_Base::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GJFW_Key_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJFW_Key_Hook_Base@@UAEPAXI@Z PROC			; JFW_Key_Hook_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJFW_Key_Hook_Base@@UAEPAXI@Z ENDP			; JFW_Key_Hook_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z PROC		; JFW_Key_Hook_Base::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z ENDP		; JFW_Key_Hook_Base::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0JFW_Key_Hook_Base@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0JFW_Key_Hook_Base@@QAE@ABV0@@Z PROC			; JFW_Key_Hook_Base::JFW_Key_Hook_Base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Key_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0JFW_Key_Hook_Base@@QAE@ABV0@@Z ENDP			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_tt.h
;	COMDAT ??0JFW_Key_Hook_Base@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0JFW_Key_Hook_Base@@QAE@XZ PROC			; JFW_Key_Hook_Base::JFW_Key_Hook_Base, COMDAT
; _this$ = ecx

; 491  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Key_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 492  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0JFW_Key_Hook_Base@@QAE@XZ ENDP			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0GenericSLNode@@IAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0GenericSLNode@@IAE@PAX@Z PROC			; GenericSLNode::GenericSLNode, COMDAT
; _this$ = ecx

; 37   : 	GenericSLNode(void *obj)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 		NodeData = obj;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 40   : 		NodeNext = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 41   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0GenericSLNode@@IAE@PAX@Z ENDP			; GenericSLNode::GenericSLNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z PROC ; AutoPoolClass<GenericSLNode,256>::operator delete, COMDAT

; 1485 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1486 : 		if (object)

	cmp	DWORD PTR _object$[ebp], 0
	je	SHORT $LN2@operator

; 1487 : 			objectPoolClass(T, nAlign).Free_Object_Memory(*(T*)object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
	mov	ecx, eax
	call	?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
$LN2@operator:

; 1488 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ENDP ; AutoPoolClass<GenericSLNode,256>::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_file$ = 12						; size = 4
_line$ = 16						; size = 4
_function$ = 20						; size = 4
??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z PROC ; AutoPoolClass<GenericSLNode,256>::operator new, COMDAT

; 1479 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN3@operator:

; 1480 : 		TT_ASSERT(size == sizeof(T));

	xor	eax, eax
	jne	SHORT $LN3@operator
	cmp	DWORD PTR _size$[ebp], 8
	je	SHORT $LN1@operator
	int	3
$LN1@operator:

; 1481 : 		return (void*)objectPoolClass(T, nAlign).Allocate_Object_Memory();

	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
	mov	ecx, eax
	call	?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory

; 1482 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ENDP ; AutoPoolClass<GenericSLNode,256>::operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Clear_Animation@PhysicalGameObj@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear_Animation@PhysicalGameObj@@QAEXXZ PROC		; PhysicalGameObj::Clear_Animation, COMDAT
; _this$ = ecx

; 113  : 	void                Clear_Animation() {if (AnimControl) {AnimControl->Set_Animation((const char*)NULL, 0, 0);AnimControl->Set_Mode(ANIM_MODE_STOP,0);ClearAnimation = true;Set_Object_Dirty_Bit(NetworkObjectClass::BIT_RARE,true);}}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1912], 0
	je	SHORT $LN1@Clear_Anim
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1912]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+1912]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1912]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+1912]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1966], 1
	push	1
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN1@Clear_Anim:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Animation@PhysicalGameObj@@QAEXXZ ENDP		; PhysicalGameObj::Clear_Animation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
_Return$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ PROC	; PhysicalGameObj::Get_Position, COMDAT
; _this$ = ecx

; 47   : 	SCRIPTS_API Vector3 Get_Position() { Vector3 Return; Peek_Physical_Object()->Get_Position(&Return); return Return; }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR _Return$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	lea	eax, DWORD PTR _Return$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Get_Position@PhysClass@@QBEXPAVVector3@@@Z ; PhysClass::Get_Position
	lea	eax, DWORD PTR _Return$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ ENDP	; PhysicalGameObj::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ PROC ; PhysicalGameObj::Peek_Physical_Object, COMDAT
; _this$ = ecx

; 40   : 	inline PhysClass *	Peek_Physical_Object( void ) const { return PhysObj; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1908]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ENDP ; PhysicalGameObj::Peek_Physical_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physclass.h
;	COMDAT ?Get_Collision_Group@PhysClass@@QBE?AW4Collision_Group_Type@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Collision_Group@PhysClass@@QBE?AW4Collision_Group_Type@@XZ PROC ; PhysClass::Get_Collision_Group, COMDAT
; _this$ = ecx

; 112  : 	Collision_Group_Type				Get_Collision_Group(void) const							{ return (Collision_Group_Type)(Flags & COLLISION_MASK); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	and	eax, 31					; 0000001fH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Collision_Group@PhysClass@@QBE?AW4Collision_Group_Type@@XZ ENDP ; PhysClass::Get_Collision_Group
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physclass.h
;	COMDAT ?Set_Collision_Group@PhysClass@@QAEXW4Collision_Group_Type@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_group$ = 8						; size = 4
?Set_Collision_Group@PhysClass@@QAEXW4Collision_Group_Type@@@Z PROC ; PhysClass::Set_Collision_Group, COMDAT
; _this$ = ecx

; 111  : 	void								Set_Collision_Group(Collision_Group_Type group)				{ Flags &= ~(uint)COLLISION_MASK; Flags |= (uint)group & COLLISION_MASK; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	and	ecx, -32				; ffffffe0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], ecx
	mov	eax, DWORD PTR _group$[ebp]
	and	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Collision_Group@PhysClass@@QAEXW4Collision_Group_Type@@@Z ENDP ; PhysClass::Set_Collision_Group
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physclass.h
;	COMDAT ?Get_Position@PhysClass@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_pos$ = 8						; size = 4
?Get_Position@PhysClass@@QBEXPAVVector3@@@Z PROC	; PhysClass::Get_Position, COMDAT
; _this$ = ecx

; 73   : 	void								Get_Position(Vector3 * set_pos) const	{ Get_Transform().Get_Translation(set_pos); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _set_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	ecx, eax
	call	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ; Matrix3D::Get_Translation
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Position@PhysClass@@QBEXPAVVector3@@@Z ENDP	; PhysClass::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4LineSegClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4LineSegClass@@QAEAAV0@ABV0@@Z PROC			; LineSegClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4LineSegClass@@QAEAAV0@ABV0@@Z ENDP			; LineSegClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0LineSegClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0LineSegClass@@QAE@ABV0@@Z PROC			; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LineSegClass@@QAE@ABV0@@Z ENDP			; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?recalculate@LineSegClass@@IAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
?recalculate@LineSegClass@@IAEXXZ PROC			; LineSegClass::recalculate, COMDAT
; _this$ = ecx

; 81   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 		DP = P1 - P0;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??G@YA?AVVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 83   : 		Dir = DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 84   : 		Dir.Normalize();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Normalize@Vector3@@QAEXXZ		; Vector3::Normalize

; 85   : 		Length = DP.Length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Length@Vector3@@QBEMXZ			; Vector3::Length
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+48]

; 86   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?recalculate@LineSegClass@@IAEXXZ ENDP			; LineSegClass::recalculate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_set$ = 12						; size = 4
?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z PROC	; LineSegClass::Compute_Point, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		Vector3::Add(P0,t*DP,set);

	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 76   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z ENDP	; LineSegClass::Compute_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_Length@LineSegClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Length@LineSegClass@@QBEMXZ PROC			; LineSegClass::Get_Length, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return Length;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@LineSegClass@@QBEMXZ ENDP			; LineSegClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_Dir@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Dir@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_Dir, COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return Dir;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Dir@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_Dir
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_DP@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_DP@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_DP, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		return DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H

; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_DP@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_DP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_P1@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_P1@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_P1, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		return P1;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 60   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_P1@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_P1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_P0@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_P0@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_P0, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return P0;

	mov	eax, DWORD PTR _this$[ebp]

; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_P0@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_P0
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Set@LineSegClass@@QAEXABVVector3@@0M@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_dir$ = 12						; size = 4
_l$ = 16						; size = 4
?Set@LineSegClass@@QAEXABVVector3@@0M@Z PROC		; LineSegClass::Set, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		DP = dir * l;

	push	ecx
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 46   : 		P0 = p0;

	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 47   : 		P1 = p0 + DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _p0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??H@YA?AVVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 48   : 		Dir = dir;

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 49   : 		Length = l;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@LineSegClass@@QAEXABVVector3@@0M@Z ENDP		; LineSegClass::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Set@LineSegClass@@QAEXABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
?Set@LineSegClass@@QAEXABVVector3@@0@Z PROC		; LineSegClass::Set, COMDAT
; _this$ = ecx

; 38   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		P0 = p0;

	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 		P1 = p1;

	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 41   : 		recalculate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?recalculate@LineSegClass@@IAEXXZ	; LineSegClass::recalculate

; 42   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@LineSegClass@@QAEXABVVector3@@0@Z ENDP		; LineSegClass::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
_tm$ = 12						; size = 4
??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 33   : 	LineSegClass(const LineSegClass & that,const Matrix3D & tm)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 34   : 	{
; 35   : 		Set(that,tm);

	mov	eax, DWORD PTR _tm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _that$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@LineSegClass@@QAEXABV1@ABVMatrix3D@@@Z ; LineSegClass::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABVVector3@@0M@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_dir$ = 12						; size = 4
_l$ = 16						; size = 4
??0LineSegClass@@QAE@ABVVector3@@0M@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 29   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 30   : 		DP = Dir * Length;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??D@YA?AVVector3@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 31   : 		P1 = P0 + DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??H@YA?AVVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0LineSegClass@@QAE@ABVVector3@@0M@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
??0LineSegClass@@QAE@ABVVector3@@0@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 25   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 26   : 		recalculate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?recalculate@LineSegClass@@IAEXXZ	; LineSegClass::recalculate

; 27   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0LineSegClass@@QAE@ABVVector3@@0@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LineSegClass@@QAE@XZ PROC				; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 21   : 	LineSegClass(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 22   : 	{
; 23   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0LineSegClass@@QAE@XZ ENDP				; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\basegameobj.h
;	COMDAT ?Get_ID@BaseGameObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@BaseGameObj@@QBEHXZ PROC			; BaseGameObj::Get_ID, COMDAT
; _this$ = ecx

; 51   :     int                         Get_ID() const { return Get_Network_ID(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Get_Network_ID@NetworkObjectClass@@QBEHXZ ; NetworkObjectClass::Get_Network_ID
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@BaseGameObj@@QBEHXZ ENDP			; BaseGameObj::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referenceableclass.h
;	COMDAT ?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ PROC ; ReferenceableClass<ScriptableGameObj>::Get_Data, COMDAT
; _this$ = ecx

; 30   : 	T * Get_Data( void ) const	{ return ReferenceData; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ENDP ; ReferenceableClass<ScriptableGameObj>::Get_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EReferencerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EReferencerClass@@UAEPAXI@Z PROC			; ReferencerClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ReferencerClass@@UAE@XZ	; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EReferencerClass@@UAEPAXI@Z ENDP			; ReferencerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GReferencerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GReferencerClass@@UAEPAXI@Z PROC			; ReferencerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GReferencerClass@@UAEPAXI@Z ENDP			; ReferencerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ReferencerClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ReferencerClass@@QAE@ABV0@@Z PROC			; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ReferencerClass@@QAE@ABV0@@Z ENDP			; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z PROC ; ReferencerClass::Set_Ptr, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		*this = object;

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z ENDP ; ReferencerClass::Set_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ PROC ; ReferencerClass::Get_Ptr, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return ReferenceTarget ? ReferenceTarget->Get_Data() : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Get_Ptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ; ReferenceableClass<ScriptableGameObj>::Get_Data
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@Get_Ptr
$LN3@Get_Ptr:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Get_Ptr:
	mov	eax, DWORD PTR tv69[ebp]

; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ENDP ; ReferencerClass::Get_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z PROC	; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 49   : 		*this = object;

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 50   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z ENDP	; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??0ReferencerClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ReferencerClass@@QAE@XZ PROC				; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ReferencerClass@@QAE@XZ ENDP				; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??CReferencerClass@@QAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??CReferencerClass@@QAEPAVScriptableGameObj@@XZ PROC	; ReferencerClass::operator->, COMDAT
; _this$ = ecx

; 37   : 	inline ScriptableGameObj* operator ->() { return Get_Ptr(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ENDP	; ReferencerClass::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1PostLoadableClass@@UAE@XZ	; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4PostLoadableClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z PROC		; PostLoadableClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z ENDP		; PostLoadableClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0PostLoadableClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0PostLoadableClass@@QAE@ABV0@@Z PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0PostLoadableClass@@QAE@ABV0@@Z ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_onoff$ = 8						; size = 1
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z PROC ; PostLoadableClass::Set_Post_Load_Registered, COMDAT
; _this$ = ecx

; 22   : 	void									Set_Post_Load_Registered(bool onoff)	{ IsPostLoadRegistered = onoff; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _onoff$[ebp]
	mov	BYTE PTR [eax+4], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ENDP ; PostLoadableClass::Set_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ PROC ; PostLoadableClass::Is_Post_Load_Registered, COMDAT
; _this$ = ecx

; 21   : 	bool									Is_Post_Load_Registered(void) const				{ return IsPostLoadRegistered; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ENDP ; PostLoadableClass::Is_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?On_Post_Load@PostLoadableClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?On_Post_Load@PostLoadableClass@@UAEXXZ PROC		; PostLoadableClass::On_Post_Load, COMDAT
; _this$ = ecx

; 20   : 	virtual void						On_Post_Load (void)							{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?On_Post_Load@PostLoadableClass@@UAEXXZ ENDP		; PostLoadableClass::On_Post_Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??1PostLoadableClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PostLoadableClass@@UAE@XZ PROC			; PostLoadableClass::~PostLoadableClass, COMDAT
; _this$ = ecx

; 19   : 	virtual ~PostLoadableClass(void)													{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1PostLoadableClass@@UAE@XZ ENDP			; PostLoadableClass::~PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??0PostLoadableClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PostLoadableClass@@QAE@XZ PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx

; 18   : 	PostLoadableClass(void) : IsPostLoadRegistered(false)						{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PostLoadableClass@@QAE@XZ ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4SysTimeClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SysTimeClass@@QAEAAV0@ABV0@@Z PROC			; SysTimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4SysTimeClass@@QAEAAV0@ABV0@@Z ENDP			; SysTimeClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\obboxclass.h
;	COMDAT ??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_center$ = 8						; size = 4
_extent$ = 12						; size = 4
_basis$ = 16						; size = 4
??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z PROC	; OBBoxClass::OBBoxClass, COMDAT
; _this$ = ecx

; 30   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _basis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3
	mov	eax, DWORD PTR _center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 31   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z ENDP	; OBBoxClass::OBBoxClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\obboxclass.h
;	COMDAT ??0OBBoxClass@@QAE@ABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_center$ = 8						; size = 4
_extent$ = 12						; size = 4
??0OBBoxClass@@QAE@ABVVector3@@0@Z PROC			; OBBoxClass::OBBoxClass, COMDAT
; _this$ = ecx

; 27   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Matrix3@@QAE@_N@Z			; Matrix3::Matrix3
	mov	eax, DWORD PTR _center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 28   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0OBBoxClass@@QAE@ABVVector3@@0@Z ENDP			; OBBoxClass::OBBoxClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Inverse@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
tv222 = -188						; size = 4
tv272 = -184						; size = 4
tv212 = -180						; size = 4
$T1 = -176						; size = 12
$T2 = -164						; size = 12
_i1$ = -88						; size = 4
_j$ = -84						; size = 4
_i$ = -80						; size = 4
_b$ = -76						; size = 36
_a$ = -40						; size = 36
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Inverse, COMDAT
; _this$ = ecx

; 309  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 310  : 		Matrix3 a(*this);				// As a evolves from original mat into identity

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3

; 311  : 		Matrix3 b(true);				// b evolves from identity into inverse(a)

	push	1
	lea	ecx, DWORD PTR _b$[ebp]
	call	??0Matrix3@@QAE@_N@Z			; Matrix3::Matrix3

; 312  : 		int i, j, i1;
; 313  : 
; 314  : 		// Loop over cols of a from left to right, eliminating above and below diagonal
; 315  : 		for (j=0; j<3; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@Inverse
$LN11@Inverse:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@Inverse:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN10@Inverse

; 316  : 
; 317  : 			// Find largest pivot in column j among rows j..3
; 318  : 			i1 = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i1$[ebp], eax

; 319  : 			for (i=j+1; i<3; i++) {

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@Inverse
$LN8@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN7@Inverse

; 320  : 				if (WWMath::Fabs(a[i][j]) > WWMath::Fabs(a[i1][j])) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv212[ebp]
	movss	xmm0, DWORD PTR tv212[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv222[ebp]
	movss	xmm0, DWORD PTR tv272[ebp]
	comiss	xmm0, DWORD PTR tv222[ebp]
	jbe	SHORT $LN6@Inverse

; 321  : 					i1 = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i1$[ebp], eax
$LN6@Inverse:

; 322  : 				}
; 323  : 			}

	jmp	$LN8@Inverse
$LN7@Inverse:

; 324  : 
; 325  : 			// Swap rows i1 and j in a and b to put pivot on diagonal
; 326  : 			Swap(a.Row[i1], a.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _a$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 327  : 			Swap(b.Row[i1], b.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _b$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 328  : 
; 329  : 			// Scale row j to have a unit diagonal
; 330  : 			if (a[j][j]==0.) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]

; 331  : 				//Matrix3::inverse: singular matrix; can't invert
; 332  : 			}
; 333  : 			b.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 334  : 			a.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 335  : 
; 336  : 			// Eliminate off-diagonal elems in col j of a, doing identical ops to b
; 337  : 			for (i=0; i<3; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Inverse
$LN3@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN2@Inverse

; 338  : 				if (i != j) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	je	$LN1@Inverse

; 339  : 					b.Row[i] -= a[i][j] * b.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 340  : 					a.Row[i] -= a[i][j] * a.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
$LN1@Inverse:

; 341  : 				}
; 342  : 			}

	jmp	$LN3@Inverse
$LN2@Inverse:

; 343  : 		}

	jmp	$LN11@Inverse
$LN10@Inverse:

; 344  : 		return b;

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 345  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
tv86 = -80						; size = 4
_j$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_extent$ = 8						; size = 4
_new_extent$ = 12					; size = 4
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_AABox_Extent, COMDAT
; _this$ = ecx

; 298  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 		for (int i=0; i<3; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@Rotate_AAB
$LN5@Rotate_AAB:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@Rotate_AAB:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	$LN4@Rotate_AAB

; 300  : 		{
; 301  : 			(*new_extent)[i] = 0.0f;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 302  : 			for (int j=0; j<3; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN3@Rotate_AAB
$LN2@Rotate_AAB:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN3@Rotate_AAB:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	SHORT $LN1@Rotate_AAB

; 303  : 			{
; 304  : 				(*new_extent)[i] += WWMath::Fabs(Row[i][j] * extent[j]);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _j$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _extent$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR tv137[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 305  : 			}

	jmp	SHORT $LN2@Rotate_AAB
$LN1@Rotate_AAB:

; 306  : 		}

	jmp	$LN5@Rotate_AAB
$LN4@Rotate_AAB:

; 307  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_AABox_Extent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Transpose_Rotate_Vector, COMDAT

; 283  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 284  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 285  : 		Vector3 * v;
; 286  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transpose_

; 287  : 		{
; 288  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 289  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 290  : 		} else {

	jmp	SHORT $LN1@Transpose_
$LN2@Transpose_:

; 291  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transpose_:

; 292  : 		}
; 293  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 294  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 295  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 296  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Transpose_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_Vector, COMDAT

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 267  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 268  : 		Vector3 * v;
; 269  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 270  : 		{
; 271  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 272  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 273  : 		}
; 274  : 		else

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 275  : 		{
; 276  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 277  : 		}
; 278  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 279  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 280  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Subtract@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z PROC		; Matrix3::Subtract, COMDAT

; 257  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 258  : 		Vector3::Subtract(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 259  : 		Vector3::Subtract(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 260  : 		Vector3::Subtract(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 261  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z ENDP		; Matrix3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Add@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Add@Matrix3@@SAXABV1@0PAV1@@Z PROC			; Matrix3::Add, COMDAT

; 251  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 252  : 		Vector3::Add(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 253  : 		Vector3::Add(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 254  : 		Vector3::Add(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 255  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Matrix3@@SAXABV1@0PAV1@@Z ENDP			; Matrix3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z
_TEXT	SEGMENT
tv246 = -88						; size = 4
tv244 = -84						; size = 4
tv242 = -80						; size = 4
tv240 = -76						; size = 4
tv238 = -72						; size = 4
tv236 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z PROC		; operator*, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 399  : 	return Vector3(
; 400  : 		a[0][0] * v[0] + a[0][1] * v[1] + a[0][2] * v[2],
; 401  : 		a[1][0] * v[0] + a[1][1] * v[1] + a[1][2] * v[2],
; 402  : 		a[2][0] * v[0] + a[2][1] * v[1] + a[2][2] * v[2] 
; 403  : 	);

	push	0
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv236[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv236[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv238[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv238[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv240[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv242[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv242[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv244[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv246[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv246[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 404  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z ENDP		; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 234  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		set_z->Set(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 236  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 		set_y->Set(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 232  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 226  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 		set_x->Set(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 228  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 222  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 		return Vector3(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 		return Vector3(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 220  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 214  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 		return Vector3(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Z_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Z_Rotation, COMDAT
; _this$ = ecx

; 209  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		Vector3 v = (*this) * Vector3(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 211  : 		return atan2(v[1],v[0]);

	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 212  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Z_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Y_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Y_Rotation, COMDAT
; _this$ = ecx

; 204  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 		Vector3 v = (*this) * Vector3(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 206  : 		return atan2(v[0],v[2]);

	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 207  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Y_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_X_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_X_Rotation, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		Vector3 v = (*this) * Vector3(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 201  : 		return atan2(v[2], v[1]);

	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 202  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_X_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		float tmp1,tmp2;
; 188  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 189  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 190  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 191  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 192  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 193  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 194  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 195  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 196  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		Rotate_Z(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Z@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Z

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 169  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		float tmp1,tmp2;
; 171  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 172  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 173  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 174  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 175  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 176  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 177  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 178  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 180  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		Rotate_Y(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Y@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Y

; 167  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		float tmp1,tmp2;
; 154  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 155  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 156  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 157  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 158  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 159  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 160  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 161  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 162  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 163  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		Rotate_X(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_X@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_X

; 150  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Make_Identity@Matrix3@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3@@QAEXXZ PROC			; Matrix3::Make_Identity, COMDAT
; _this$ = ecx

; 142  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		Row[0].Set(1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 144  : 		Row[1].Set(0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 145  : 		Row[2].Set(0.0f,0.0f,1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 146  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3@@QAEXXZ ENDP			; Matrix3::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??_0Matrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator/=, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		Row[0] /= d; Row[1] /= d; Row[2] /= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 139  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??XMatrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator*=, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=

; 134  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??ZMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator-=, COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 129  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 130  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??YMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator+=, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 124  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??4Matrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator=, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 117  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 118  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Determinant@Matrix3@@QBEMXZ
_TEXT	SEGMENT
tv243 = -92						; size = 4
tv255 = -88						; size = 4
tv253 = -84						; size = 4
tv251 = -80						; size = 4
tv249 = -76						; size = 4
tv247 = -72						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix3@@QBEMXZ PROC			; Matrix3::Determinant, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return   Row[0][0] * (Row[1][1] * Row[2][2] - Row[1][2] * Row[2][1])
; 111  : 				- Row[0][1] * (Row[1][0] * Row[2][2] - Row[1][2] * Row[2][0])
; 112  : 				- Row[0][2] * (Row[1][0] * Row[2][1] - Row[1][1] * Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv247[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm1
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv251[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv249[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv255[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv253[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR tv243[ebp], xmm0
	fld	DWORD PTR tv243[ebp]

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix3@@QBEMXZ ENDP			; Matrix3::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -104						; size = 12
$T2 = -92						; size = 12
$T3 = -80						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Transpose, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 		return Matrix3(
; 103  : 				Vector3(Row[0][0], Row[1][0], Row[2][0]),
; 104  : 				Vector3(Row[0][1], Row[1][1], Row[2][1]),
; 105  : 				Vector3(Row[0][2], Row[1][2], Row[2][2])
; 106  : 		);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABVVector3@@00@Z	; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QBEABVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QBEABVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 99   : 	TT_INLINE const Vector3 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QBEABVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QAEAAVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QAEAAVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 98   : 	TT_INLINE Vector3 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QAEAAVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv359 = -80						; size = 4
tv353 = -80						; size = 4
tv347 = -80						; size = 4
tv357 = -76						; size = 4
tv351 = -76						; size = 4
tv345 = -76						; size = 4
tv355 = -72						; size = 4
tv349 = -72						; size = 4
tv343 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@MM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Row[0].Set(
; 82   : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 83   : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 84   : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s)
; 85   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv343[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv343[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv345[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv345[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv347[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv347[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 86   : 		Row[1].Set(
; 87   : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 88   : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 89   : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s)
; 90   : 		);

	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv349[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv349[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv351[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv351[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv353[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv353[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 91   : 	Row[2].Set(
; 92   : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 93   : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 94   : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2]))
; 95   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv355[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv355[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv357[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv357[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv359[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv359[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@MM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3@@QAEXABVVector3@@M@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Set(axis,sinf(angle),cosf(angle));

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3@@QAEXABVVector3@@M@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
?Set@Matrix3@@QAEXMMMMMMMMM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 72   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 73   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 74   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Set@Matrix3@@QAEXMMMMMMMMM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@00@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 64   : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 66   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 67   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@00@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVQuaternion@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
??0Matrix3@@QAE@ABVQuaternion@@@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE Matrix3(const Quaternion & q)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		this->Set(q);

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVQuaternion@@@Z	; Matrix3::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABVQuaternion@@@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s_angle$ = 12						; size = 4
_c_angle$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@MM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float s_angle,float c_angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{ 
; 55   : 		Set(axis,s_angle,c_angle); 

	push	ecx
	movss	xmm0, DWORD PTR _c_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3@@QAE@ABVVector3@@M@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{ 
; 51   : 		Set(axis,angle); 

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@M@Z	; Matrix3::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3@@QAE@ABVVector3@@M@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
??0Matrix3@@QAE@MMMMMMMMM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 43   : 	TT_INLINE explicit Matrix3(float m11,float m12,float m13,float m21,float m22,float m23,float m31,float m32,float m33)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 44   : 	{
; 45   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 46   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 47   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0Matrix3@@QAE@MMMMMMMMM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@00@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE explicit Matrix3(const Vector3 & v0, const Vector3 & v1, const Vector3 & v2)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 36   : 	{ 
; 37   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 38   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 39   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@00@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix3@@QAE@_N@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE explicit Matrix3(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 27   : 	{
; 28   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	$LN1@Matrix3

; 29   : 		{
; 30   : 			Row[0].Set(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 31   : 			Row[1].Set(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 32   : 			Row[2].Set(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
$LN1@Matrix3:

; 33   : 		}
; 34   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@_N@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3@@QAE@ABV0@@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix3(const Matrix3 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 25   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABV0@@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix3@@QAE@XZ PROC					; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 21   : 	TT_INLINE Matrix3(void) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix3@@QAE@XZ ENDP					; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z
_TEXT	SEGMENT
tv342 = -96						; size = 4
tv336 = -96						; size = 4
tv330 = -96						; size = 4
tv324 = -96						; size = 4
tv340 = -92						; size = 4
tv334 = -92						; size = 4
tv328 = -92						; size = 4
tv322 = -92						; size = 4
tv338 = -88						; size = 4
tv332 = -88						; size = 4
tv326 = -88						; size = 4
tv320 = -88						; size = 4
_v$ = -20						; size = 4
_tmp$ = -16						; size = 16
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 227  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 228  : 		Vector4 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector4@@QAE@XZ			; Vector4::Vector4

; 229  : 		Vector4 * v;
; 230  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 231  : 		{
; 232  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 233  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 234  : 		}
; 235  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 236  : 		{
; 237  : 			v = (Vector4 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 238  : 		}
; 239  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3] * v->W);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv320[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv320[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv322[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv322[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv324[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv324[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax], xmm1

; 240  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3] * v->W);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv326[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv326[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv328[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv328[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv330[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv330[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 241  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3] * v->W);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv332[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv332[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv334[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv334[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv336[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv336[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 242  : 		out->W = (A[3][0] * v->X + A[3][1] * v->Y + A[3][2] * v->Z + A[3][3] * v->W);

	push	0
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv338[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv338[ebp]
	addss	xmm1, xmm0
	push	2
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv340[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv340[ebp]
	addss	xmm1, xmm0
	push	3
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv342[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv342[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 243  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z
_TEXT	SEGMENT
tv265 = -76						; size = 4
tv259 = -76						; size = 4
tv253 = -76						; size = 4
tv263 = -72						; size = 4
tv257 = -72						; size = 4
tv251 = -72						; size = 4
tv261 = -68						; size = 4
tv255 = -68						; size = 4
tv249 = -68						; size = 4
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 220  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 221  : 		out->X = (A[0][0] * in.X + A[0][1] * in.Y + A[0][2] * in.Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv249[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv251[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv251[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv253[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 222  : 		out->Y = (A[1][0] * in.X + A[1][1] * in.Y + A[1][2] * in.Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv255[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv257[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv257[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv259[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv259[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 223  : 		out->Z = (A[2][0] * in.X + A[2][1] * in.Y + A[2][2] * in.Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv261[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv261[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv263[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv263[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv265[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv265[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 224  : 		out->W = 1.0f;

	mov	eax, DWORD PTR _out$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 225  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 204  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 205  : 		Vector3 *v;
; 206  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 207  : 		{
; 208  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 209  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 210  : 		}
; 211  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 212  : 		{
; 213  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 214  : 		}
; 215  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 216  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 217  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 218  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??_0Matrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_ood$ = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator/=, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 		float ood = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _ood$[ebp], xmm0

; 179  : 		Row[0] *= ood; Row[1] *= ood; Row[2] *= ood; Row[3] *= ood;

	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 180  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 181  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??XMatrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator*=, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; Row[3] *= d;

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 174  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 175  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??ZMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator-=, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; Row[3] -= m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 169  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??YMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator+=, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; Row[3] += m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=

; 164  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 165  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??4Matrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 159  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Inverse@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
_t$ = -72						; size = 64
_s$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Inverse, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		float s = Determinant();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Determinant@Matrix4@@QBEMXZ		; Matrix4::Determinant
	fstp	DWORD PTR _s$[ebp]

; 135  : 		if (s == 0.0) return Matrix4();

	cvtss2sd xmm0, DWORD PTR _s$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Inverse
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN2@Inverse
$LN1@Inverse:

; 136  : 		s = 1/s;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _s$[ebp], xmm0

; 137  : 		Matrix4 t;

	lea	ecx, DWORD PTR _t$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4

; 138  : 		t.Row[0].X = s*(Row[1].Y*(Row[2].Z*Row[3].W - Row[2].W*Row[3].Z) + Row[1].Z*(Row[2].W*Row[3].Y - Row[2].Y*Row[3].W) + Row[1].W*(Row[2].Y*Row[3].Z - Row[2].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 139  : 		t.Row[0].Y = s*(Row[2].Y*(Row[0].Z*Row[3].W - Row[0].W*Row[3].Z) + Row[2].Z*(Row[0].W*Row[3].Y - Row[0].Y*Row[3].W) + Row[2].W*(Row[0].Y*Row[3].Z - Row[0].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 140  : 		t.Row[0].Z = s*(Row[3].Y*(Row[0].Z*Row[1].W - Row[0].W*Row[1].Z) + Row[3].Z*(Row[0].W*Row[1].Y - Row[0].Y*Row[1].W) + Row[3].W*(Row[0].Y*Row[1].Z - Row[0].Z*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 141  : 		t.Row[0].W = s*(Row[0].Y*(Row[1].W*Row[2].Z - Row[1].Z*Row[2].W) + Row[0].Z*(Row[1].Y*Row[2].W - Row[1].W*Row[2].Y) + Row[0].W*(Row[1].Z*Row[2].Y - Row[1].Y*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 142  : 		t.Row[1].X = s*(Row[1].Z*(Row[2].X*Row[3].W - Row[2].W*Row[3].X) + Row[1].W*(Row[2].Z*Row[3].X - Row[2].X*Row[3].Z) + Row[1].X*(Row[2].W*Row[3].Z - Row[2].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 143  : 		t.Row[1].Y = s*(Row[2].Z*(Row[0].X*Row[3].W - Row[0].W*Row[3].X) + Row[2].W*(Row[0].Z*Row[3].X - Row[0].X*Row[3].Z) + Row[2].X*(Row[0].W*Row[3].Z - Row[0].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 144  : 		t.Row[1].Z = s*(Row[3].Z*(Row[0].X*Row[1].W - Row[0].W*Row[1].X) + Row[3].W*(Row[0].Z*Row[1].X - Row[0].X*Row[1].Z) + Row[3].X*(Row[0].W*Row[1].Z - Row[0].Z*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 145  : 		t.Row[1].W = s*(Row[0].Z*(Row[1].W*Row[2].X - Row[1].X*Row[2].W) + Row[0].W*(Row[1].X*Row[2].Z - Row[1].Z*Row[2].X) + Row[0].X*(Row[1].Z*Row[2].W - Row[1].W*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 146  : 		t.Row[2].X = s*(Row[1].W*(Row[2].X*Row[3].Y - Row[2].Y*Row[3].X) + Row[1].X*(Row[2].Y*Row[3].W - Row[2].W*Row[3].Y) + Row[1].Y*(Row[2].W*Row[3].X - Row[2].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 147  : 		t.Row[2].Y = s*(Row[2].W*(Row[0].X*Row[3].Y - Row[0].Y*Row[3].X) + Row[2].X*(Row[0].Y*Row[3].W - Row[0].W*Row[3].Y) + Row[2].Y*(Row[0].W*Row[3].X - Row[0].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 148  : 		t.Row[2].Z = s*(Row[3].W*(Row[0].X*Row[1].Y - Row[0].Y*Row[1].X) + Row[3].X*(Row[0].Y*Row[1].W - Row[0].W*Row[1].Y) + Row[3].Y*(Row[0].W*Row[1].X - Row[0].X*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 149  : 		t.Row[2].W = s*(Row[0].W*(Row[1].Y*Row[2].X - Row[1].X*Row[2].Y) + Row[0].X*(Row[1].W*Row[2].Y - Row[1].Y*Row[2].W) + Row[0].Y*(Row[1].X*Row[2].W - Row[1].W*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 150  : 		t.Row[3].X = s*(Row[1].X*(Row[2].Z*Row[3].Y - Row[2].Y*Row[3].Z) + Row[1].Y*(Row[2].X*Row[3].Z - Row[2].Z*Row[3].X) + Row[1].Z*(Row[2].Y*Row[3].X - Row[2].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 151  : 		t.Row[3].Y = s*(Row[2].X*(Row[0].Z*Row[3].Y - Row[0].Y*Row[3].Z) + Row[2].Y*(Row[0].X*Row[3].Z - Row[0].Z*Row[3].X) + Row[2].Z*(Row[0].Y*Row[3].X - Row[0].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 152  : 		t.Row[3].Z = s*(Row[3].X*(Row[0].Z*Row[1].Y - Row[0].Y*Row[1].Z) + Row[3].Y*(Row[0].X*Row[1].Z - Row[0].Z*Row[1].X) + Row[3].Z*(Row[0].Y*Row[1].X - Row[0].X*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 153  : 		t.Row[3].W = s*(Row[0].X*(Row[1].Y*Row[2].Z - Row[1].Z*Row[2].Y) + Row[0].Y*(Row[1].Z*Row[2].X - Row[1].X*Row[2].Z) + Row[0].Z*(Row[1].X*Row[2].Y - Row[1].Y*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 154  : 		return t;

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABV0@@Z			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@Inverse:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Determinant@Matrix4@@QBEMXZ
_TEXT	SEGMENT
_det$ = -8						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix4@@QBEMXZ PROC			; Matrix4::Determinant, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		float det;
; 124  : 		det =	(Row[0].X * Row[1].Y - Row[0].Y * Row[1].X) * (Row[2].Z * Row[3].W - Row[2].W * Row[3].Z);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+8]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR _det$[ebp], xmm0

; 125  : 		det -=	(Row[0].X * Row[1].Z - Row[0].Z * Row[1].X) * (Row[2].Y * Row[3].W - Row[2].W * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 126  : 		det +=	(Row[0].X * Row[1].W - Row[0].W * Row[1].X) * (Row[2].Y * Row[3].Z - Row[2].Z * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 127  : 		det +=	(Row[0].Y * Row[1].Z - Row[0].Z * Row[1].Y) * (Row[2].X * Row[3].W - Row[2].W * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 128  : 		det -=	(Row[0].Y * Row[1].W - Row[0].W * Row[1].Y) * (Row[2].X * Row[3].Z - Row[2].Z * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 129  : 		det +=	(Row[0].Z * Row[1].W - Row[0].W * Row[1].Z) * (Row[2].X * Row[3].Y - Row[2].Y * Row[3].X);		

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+8]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+4]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 130  : 		return det;	

	fld	DWORD PTR _det$[ebp]

; 131  : 	};	

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix4@@QBEMXZ ENDP			; Matrix4::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transpose@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -132						; size = 16
$T2 = -116						; size = 16
$T3 = -100						; size = 16
$T4 = -84						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Transpose, COMDAT
; _this$ = ecx

; 118  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 		return Matrix4(Vector4(Row[0][0], Row[1][0], Row[2][0], Row[3][0]),Vector4(Row[0][1], Row[1][1], Row[2][1], Row[3][1]),Vector4(Row[0][2], Row[1][2], Row[2][2], Row[3][2]),Vector4(Row[0][3], Row[1][3], Row[2][3], Row[3][3]));

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABVVector4@@000@Z	; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QBEABVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 116  : 	TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QBEABVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QAEAAVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 115  : 	TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QAEAAVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv218 = -72						; size = 4
tv216 = -72						; size = 4
tv214 = -72						; size = 4
tv212 = -72						; size = 4
tv210 = -72						; size = 4
tv208 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Perspective, COMDAT
; _this$ = ecx

; 103  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 105  : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv208[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv208[ebp]
	movss	DWORD PTR [eax], xmm0

; 106  : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv210[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv210[ebp]
	movss	DWORD PTR [eax], xmm0

; 107  : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv212[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv212[ebp]
	movss	DWORD PTR [eax], xmm0

; 108  : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv214[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv214[ebp]
	movss	DWORD PTR [eax], xmm0

; 109  : 		Row[2][2] = zfar / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv216[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv216[ebp]
	movss	DWORD PTR [eax], xmm0

; 110  : 		Row[2][3] = (znear * zfar) / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	mulss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	subss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv218[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR [eax], xmm0

; 111  : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 112  : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Perspective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv190 = -72						; size = 4
tv188 = -72						; size = 4
tv186 = -72						; size = 4
tv184 = -72						; size = 4
tv182 = -72						; size = 4
tv180 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z PROC			; Matrix4::Init_Ortho, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 94   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv180[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv180[ebp]
	movss	DWORD PTR [eax], xmm0

; 95   : 		Row[0][3] = (left + right) / (left - right);

	movss	xmm0, DWORD PTR _left$[ebp]
	addss	xmm0, DWORD PTR _right$[ebp]
	movss	xmm1, DWORD PTR _left$[ebp]
	subss	xmm1, DWORD PTR _right$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv182[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv182[ebp]
	movss	DWORD PTR [eax], xmm0

; 96   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv184[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv184[ebp]
	movss	DWORD PTR [eax], xmm0

; 97   : 		Row[1][3] = (top + bottom) / (bottom - top);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _bottom$[ebp]
	subss	xmm1, DWORD PTR _top$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR [eax], xmm0

; 98   : 		Row[2][2] = 1.0f / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv188[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv188[ebp]
	movss	DWORD PTR [eax], xmm0

; 99   : 		Row[2][3] = znear / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv190[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR [eax], xmm0

; 100  : 
; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z ENDP			; Matrix4::Init_Ortho
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv227 = -72						; size = 4
tv225 = -72						; size = 4
tv223 = -72						; size = 4
tv221 = -72						; size = 4
tv219 = -72						; size = 4
tv217 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z PROC	; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 82   : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv217[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv217[ebp]
	movss	DWORD PTR [eax], xmm0

; 83   : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv219[ebp]
	movss	DWORD PTR [eax], xmm0

; 84   : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv221[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv221[ebp]
	movss	DWORD PTR [eax], xmm0

; 85   : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv223[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv223[ebp]
	movss	DWORD PTR [eax], xmm0

; 86   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv225[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv225[ebp]
	movss	DWORD PTR [eax], xmm0

; 87   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv227[ebp]
	movss	DWORD PTR [eax], xmm0

; 88   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 89   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z ENDP	; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z
_TEXT	SEGMENT
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_hfov$ = 8						; size = 4
_vfov$ = 12						; size = 4
_znear$ = 16						; size = 4
_zfar$ = 20						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z PROC		; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 72   : 		Row[0][0] = static_cast<float>(1.0 / tan(hfov*0.5));

	cvtss2sd xmm0, DWORD PTR _hfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 73   : 		Row[1][1] = static_cast<float>(1.0 / tan(vfov*0.5));

	cvtss2sd xmm0, DWORD PTR _vfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 74   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 75   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 76   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 77   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z ENDP		; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv195 = -72						; size = 4
tv193 = -72						; size = 4
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Ortho_OGL, COMDAT
; _this$ = ecx

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 61   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 62   : 		Row[0][3] = -(right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 63   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 64   : 		Row[1][3] = -(top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 65   : 		Row[2][2] = -2.0f / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	subss	xmm0, DWORD PTR _znear$[ebp]
	movss	xmm1, DWORD PTR __real@c0000000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv193[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR [eax], xmm0

; 66   : 		Row[2][3] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv195[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv195[ebp]
	movss	DWORD PTR [eax], xmm0

; 67   : 
; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Ortho_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
?Init@Matrix4@@QAEXABVVector4@@000@Z PROC		; Matrix4::Init, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		Row[0] = v0; Row[1] = v1; Row[2] = v2; Row[3] = v3;

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init@Matrix4@@QAEXABVVector4@@000@Z ENDP		; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVMatrix3D@@@Z
_TEXT	SEGMENT
$T1 = -84						; size = 16
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z PROC			; Matrix4::Init, COMDAT
; _this$ = ecx

; 51   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 		Row[0] = m[0]; Row[1] = m[1]; Row[2] = m[2]; Row[3] = Vector4(0.0,0.0,0.0,1.0); 

	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 53   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z ENDP			; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Make_Identity@Matrix4@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix4@@QAEXXZ PROC			; Matrix4::Make_Identity, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		Row[0].Set(1.0,0.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 46   : 		Row[1].Set(0.0,1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 47   : 		Row[2].Set(0.0,0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 48   : 		Row[3].Set(0.0,0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 49   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix4@@QAEXXZ ENDP			; Matrix4::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0Matrix4@@QAE@ABVVector4@@000@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 40   : 	TT_INLINE explicit Matrix4(const Vector4 & v0, const Vector4 & v1, const Vector4 & v2, const Vector4 & v3)	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 41   : 		Init(v0,v1,v2,v3);

	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVVector4@@000@Z	; Matrix4::Init

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix4@@QAE@ABVVector4@@000@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABVMatrix3D@@@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 36   : 	TT_INLINE explicit Matrix4(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 37   : 	{
; 38   : 		Init(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVMatrix3D@@@Z	; Matrix4::Init

; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABVMatrix3D@@@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix4@@QAE@_N@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 29   : 	TT_INLINE explicit Matrix4(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 30   : 	{
; 31   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix4

; 32   : 		{
; 33   : 			Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity
$LN2@Matrix4:

; 34   : 		}
; 35   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@_N@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABV0@@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 25   : 	TT_INLINE Matrix4(const Matrix4 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 26   : 	{
; 27   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 28   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABV0@@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix4@@QAE@XZ PROC					; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix4(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix4@@QAE@XZ ENDP					; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\networkobjectclass.h
;	COMDAT ?Get_Network_ID@NetworkObjectClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Network_ID@NetworkObjectClass@@QBEHXZ PROC		; NetworkObjectClass::Get_Network_ID, COMDAT
; _this$ = ecx

; 51   : 	int					Get_Network_ID (void) const								{ return NetworkID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Network_ID@NetworkObjectClass@@QBEHXZ ENDP		; NetworkObjectClass::Get_Network_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Rotate_Vector, COMDAT

; 564  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 565  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 566  : 		Vector3 * v;
; 567  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Ro

; 568  : 		{
; 569  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 570  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 571  : 		}
; 572  : 		else

	jmp	SHORT $LN1@Inverse_Ro
$LN2@Inverse_Ro:

; 573  : 		{
; 574  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Ro:

; 575  : 		}
; 576  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 577  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 578  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 579  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
_diff$ = -28						; size = 12
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Transform_Vector, COMDAT

; 548  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 549  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 550  : 		Vector3 * v;
; 551  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Tr

; 552  : 		{
; 553  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 554  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 555  : 		}
; 556  : 		else

	jmp	SHORT $LN1@Inverse_Tr
$LN2@Inverse_Tr:

; 557  : 		{
; 558  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Tr:

; 559  : 		}
; 560  : 		Vector3 diff(v->X - A[0][3], v->Y - A[1][3], v->Z - A[2][3]);

	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _diff$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 561  : 		Matrix3D::Inverse_Rotate_Vector(A, diff, out);

	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	call	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
	add	esp, 12					; 0000000cH

; 562  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Rotate_Vector, COMDAT

; 531  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 532  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 533  : 		Vector3 * v;
; 534  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 535  : 		{
; 536  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 537  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 538  : 		}
; 539  : 		else 

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 540  : 		{
; 541  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 542  : 		}
; 543  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 544  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 545  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 546  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 524  : 	TT_INLINE void Get_Z_Vector(Vector3 * set_z) const { set_z->Set(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 523  : 	TT_INLINE void Get_Y_Vector(Vector3 * set_y) const { set_y->Set(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 522  : 	TT_INLINE void Get_X_Vector(Vector3 * set_x) const { set_x->Set(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 521  : 	TT_INLINE Vector3 Get_Z_Vector() const { return Vector3(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 520  : 	TT_INLINE Vector3 Get_Y_Vector() const { return Vector3(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 519  : 	TT_INLINE Vector3 Get_X_Vector() const { return Vector3(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Transform_Vector, COMDAT

; 503  :    {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 504  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 505  : 		Vector3 * v;
; 506  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 507  : 		{
; 508  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 509  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 510  : 		}
; 511  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 512  : 		{
; 513  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 514  : 		}
; 515  : 		out->X = (A.Row[0][0] * v->X + A.Row[0][1] * v->Y + A.Row[0][2] * v->Z + A.Row[0][3]);

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 516  : 		out->Y = (A.Row[1][0] * v->X + A.Row[1][1] * v->Y + A.Row[1][2] * v->Z + A.Row[1][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 517  : 		out->Z = (A.Row[2][0] * v->X + A.Row[2][1] * v->Y + A.Row[2][2] * v->Z + A.Row[2][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 518  :    }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 486  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 487  : 		float tmp1,tmp2;
; 488  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 489  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 490  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 491  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 492  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 493  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 494  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 495  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 496  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 497  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 473  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 474  : 		float tmp1,tmp2;
; 475  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 476  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 477  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 478  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 479  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 480  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 481  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 482  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 483  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 460  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		float tmp1,tmp2;
; 462  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 463  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 464  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 465  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 466  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 467  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 468  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 469  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 470  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 471  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		float tmp1,tmp2;
; 446  : 		float c,s;
; 447  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 448  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 449  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 450  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 451  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 452  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 453  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 454  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 455  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 456  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 457  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 458  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 428  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 429  : 		float tmp1,tmp2;
; 430  : 		float c,s;
; 431  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 432  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 433  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 434  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 435  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 436  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 437  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 438  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 439  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 440  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 441  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 442  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 412  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 		float tmp1,tmp2;
; 414  : 		float c,s;
; 415  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 416  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 417  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 418  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 419  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 420  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 421  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 422  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 423  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 424  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 425  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 426  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 396  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 		float tmp1,tmp2;
; 398  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 399  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 400  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 401  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 402  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 403  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 404  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 405  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 406  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 407  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 408  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 409  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 410  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv299 = -80						; size = 4
tv297 = -80						; size = 4
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 380  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		float tmp1,tmp2;
; 382  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 383  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 384  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 385  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 386  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 387  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 388  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 389  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 390  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 391  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 392  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 393  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 394  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 364  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 365  : 		float tmp1,tmp2;
; 366  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 367  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 368  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 369  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 370  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 371  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 372  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 373  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 374  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 375  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 376  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 377  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 378  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 		float tmp1,tmp2;
; 347  : 		float c,s;
; 348  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 349  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 350  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 351  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 352  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 353  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 354  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 355  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 356  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 357  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 358  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 359  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 360  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 361  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 362  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv311 = -88						; size = 4
tv309 = -88						; size = 4
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 326  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 327  : 		float tmp1,tmp2;
; 328  : 		float c,s;
; 329  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 330  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 331  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 332  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 333  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 334  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 335  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 336  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 337  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 338  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 339  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 340  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 341  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv309[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv309[ebp]
	movss	DWORD PTR [eax], xmm0

; 342  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv311[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv311[ebp]
	movss	DWORD PTR [eax], xmm0

; 343  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 307  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 		float tmp1,tmp2;
; 309  : 		float c,s;
; 310  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 311  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 312  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 313  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 314  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 315  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 316  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 317  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 318  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 319  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 320  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 321  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 322  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 323  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 324  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXAAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z PROC		; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 		Scale(scale.X, scale.Y, scale.Z);

	mov	eax, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@Matrix3D@@QAEXMMM@Z		; Matrix3D::Scale

; 305  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z ENDP		; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Scale@Matrix3D@@QAEXMMM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 291  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		Row[0][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 293  : 		Row[1][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 294  : 		Row[2][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 295  : 		Row[0][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 296  : 		Row[1][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 297  : 		Row[2][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 298  : 		Row[0][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 299  : 		Row[1][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 300  : 		Row[2][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 301  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Scale@Matrix3D@@QAEXMMM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 279  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 		Row[0][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 281  : 		Row[1][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 282  : 		Row[2][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 283  : 		Row[0][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 284  : 		Row[1][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 285  : 		Row[2][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 286  : 		Row[0][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 287  : 		Row[1][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 288  : 		Row[2][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 289  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 		float tmp1,tmp2;
; 268  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 269  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 270  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 271  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 272  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 273  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 274  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 275  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 276  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 277  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 253  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 254  : 		float tmp1,tmp2;
; 255  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 256  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 257  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 258  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 259  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 260  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 261  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 262  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 263  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 240  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 		float tmp1,tmp2;
; 242  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 243  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 244  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 245  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 246  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 247  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 248  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 249  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 250  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 251  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 224  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 225  : 		float tmp1,tmp2;
; 226  : 		float c,s;
; 227  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 228  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 229  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 230  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 231  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 232  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 233  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 234  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 235  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 236  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 237  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 238  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 208  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 209  : 		float tmp1,tmp2;
; 210  : 		float s,c;
; 211  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 212  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 213  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 214  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 215  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 216  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 217  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 218  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 219  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 220  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 221  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 		float tmp1,tmp2;
; 194  : 		float s,c;
; 195  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 196  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 197  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 198  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 199  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 200  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 201  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 202  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 203  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 204  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 205  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 206  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Translate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		Row[0][3]  += (float)(Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 188  : 		Row[1][3]  += (float)(Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 189  : 		Row[2][3]  += (float)(Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Translate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Y, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		Row[0][3]  += (float)(Row[0][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 182  : 		Row[1][3]  += (float)(Row[1][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 183  : 		Row[2][3]  += (float)(Row[2][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Translate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_X, COMDAT
; _this$ = ecx

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		Row[0][3]  += (float)(Row[0][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 176  : 		Row[1][3]  += (float)(Row[1][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 177  : 		Row[2][3]  += (float)(Row[2][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv278 = -80						; size = 4
tv274 = -80						; size = 4
tv270 = -80						; size = 4
tv276 = -76						; size = 4
tv272 = -76						; size = 4
tv268 = -76						; size = 4
tv214 = -72						; size = 4
tv174 = -72						; size = 4
tv134 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Translate@Matrix3D@@QAEXABVVector3@@@Z PROC		; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		Row[0][3]  += Row[0][0]*t[0] + Row[0][1]*t[1] + Row[0][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv268[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv270[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv134[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm1

; 170  : 		Row[1][3]  += Row[1][0]*t[0] + Row[1][1]*t[1] + Row[1][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv174[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv272[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv274[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv274[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv174[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv174[ebp]
	movss	DWORD PTR [ecx], xmm1

; 171  : 		Row[2][3]  += Row[2][0]*t[0] + Row[2][1]*t[1] + Row[2][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv214[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv276[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv276[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv278[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv278[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv214[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv214[ebp]
	movss	DWORD PTR [ecx], xmm1

; 172  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@Matrix3D@@QAEXABVVector3@@@Z ENDP		; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv241 = -80						; size = 4
tv237 = -80						; size = 4
tv243 = -76						; size = 4
tv239 = -76						; size = 4
tv235 = -76						; size = 4
tv190 = -72						; size = 4
tv158 = -72						; size = 4
tv94 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Translate@Matrix3D@@QAEXMMM@Z PROC			; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0][3]  += (float)(Row[0][0]*x + Row[0][1]*y + Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm1

; 164  : 		Row[1][3]  += (float)(Row[1][0]*x + Row[1][1]*y + Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv239[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv241[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv158[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm1

; 165  : 		Row[2][3]  += (float)(Row[2][0]*x + Row[2][1]*y + Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv190[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv243[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv245[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv190[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv190[ebp]
	movss	DWORD PTR [ecx], xmm1

; 166  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Translate@Matrix3D@@QAEXMMM@Z ENDP			; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Make_Identity@Matrix3D@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3D@@QAEXXZ PROC			; Matrix3D::Make_Identity, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		Row[0].Set(1.0f,0.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 158  : 		Row[1].Set(0.0f,1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 159  : 		Row[2].Set(0.0f,0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3D@@QAEXXZ ENDP			; Matrix3D::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Z_Translation, COMDAT
; _this$ = ecx

; 154  : 	TT_INLINE void Adjust_Z_Translation(float z) { Row[2][3] += z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Y_Translation, COMDAT
; _this$ = ecx

; 153  : 	TT_INLINE void Adjust_Y_Translation(float y) { Row[1][3] += y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_X_Translation, COMDAT
; _this$ = ecx

; 152  : 	TT_INLINE void Adjust_X_Translation(float x) { Row[0][3] += x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv95 = -72						; size = 4
tv84 = -72						; size = 4
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Adjust_Translation, COMDAT
; _this$ = ecx

; 151  : 	TT_INLINE void Adjust_Translation(const Vector3 & t) { Row[0][3] += t[0]; Row[1][3] += t[1]; Row[2][3] += t[2]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv73[ebp], eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv73[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv84[ebp], eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv84[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv84[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv95[ebp], eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv95[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv95[ebp]
	movss	DWORD PTR [edx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Adjust_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Set_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Z_Translation, COMDAT
; _this$ = ecx

; 150  : 	TT_INLINE void Set_Z_Translation(float z) { Row[2][3] = z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Set_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Y_Translation, COMDAT
; _this$ = ecx

; 149  : 	TT_INLINE void Set_Y_Translation(float y) { Row[1][3] = y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Set_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_X_Translation, COMDAT
; _this$ = ecx

; 148  : 	TT_INLINE void Set_X_Translation(float x) { Row[0][3] = x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Z_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Z_Translation, COMDAT
; _this$ = ecx

; 147  : 	TT_INLINE float Get_Z_Translation(void) const { return Row[2][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Y_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Y_Translation, COMDAT
; _this$ = ecx

; 146  : 	TT_INLINE float Get_Y_Translation(void) const { return Row[1][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_X_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_X_Translation, COMDAT
; _this$ = ecx

; 145  : 	TT_INLINE float Get_X_Translation(void) const { return Row[0][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Set_Translation, COMDAT
; _this$ = ecx

; 143  : 	TT_INLINE void Set_Translation(const Vector3 & t)  { Row[0][3] = t[0]; Row[1][3] = t[1];Row[2][3] = t[2]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Set_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set$ = 8						; size = 4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 142  : 	TT_INLINE void Get_Translation(Vector3 * set) const { set->X = Row[0][3]; set->Y = Row[1][3]; set->Z = Row[2][3]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 141  : 	TT_INLINE Vector3 Get_Translation(void) const { return Vector3(Row[0][3],Row[1][3],Row[2][3]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		Row[0].Set(1.0f,0.0f,0.0f,position[0]);

	push	0
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 135  : 		Row[1].Set(0.0f,1.0f,0.0f,position[1]);

	push	1
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 136  : 		Row[2].Set(0.0f,0.0f,1.0f,position[2]);

	push	2
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 137  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXABVVector3@@@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv368 = -80						; size = 4
tv362 = -80						; size = 4
tv356 = -80						; size = 4
tv366 = -76						; size = 4
tv360 = -76						; size = 4
tv354 = -76						; size = 4
tv364 = -72						; size = 4
tv358 = -72						; size = 4
tv352 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@MM@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 112  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 		Row[0].Set(
; 114  : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 115  : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 116  : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s),
; 117  : 			0.0f
; 118  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv352[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv352[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv354[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv354[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv356[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv356[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 119  : 		Row[1].Set(
; 120  : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 121  : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 122  : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s),
; 123  : 			0.0f
; 124  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv358[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv358[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv360[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv362[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv362[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 125  : 		Row[2].Set(
; 126  : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 127  : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 128  : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2])),
; 129  : 			0.0f
; 130  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv364[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv364[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv366[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv366[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv368[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv368[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 131  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3D@@QAEXABVVector3@@MM@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_s$ = -12						; size = 4
_c$ = -8						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@M@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 106  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 		float c = cosf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 108  : 		float s = sinf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 109  : 		Set(axis,s,c);

	push	ecx
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 110  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3D@@QAEXABVVector3@@M@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@000@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 100  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 		Row[0].Set(x[0],y[0],z[0],pos[0]);

	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 102  : 		Row[1].Set(x[1],y[1],z[1],pos[1]);

	push	1
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 103  : 		Row[2].Set(x[2],y[2],z[2],pos[2]);

	push	2
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Matrix3D@@QAEXABVVector3@@000@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m14$ = 20						; size = 4
_m21$ = 24						; size = 4
_m22$ = 28						; size = 4
_m23$ = 32						; size = 4
_m24$ = 36						; size = 4
_m31$ = 40						; size = 4
_m32$ = 44						; size = 4
_m33$ = 48						; size = 4
_m34$ = 52						; size = 4
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		Row[0].Set(m11,m12,m13,m14);

	push	ecx
	movss	xmm0, DWORD PTR _m14$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 96   : 		Row[1].Set(m21,m22,m23,m24);

	push	ecx
	movss	xmm0, DWORD PTR _m24$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 97   : 		Row[2].Set(m31,m32,m33,m34);

	push	ecx
	movss	xmm0, DWORD PTR _m34$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXQAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Set@Matrix3D@@QAEXQAM@Z PROC				; Matrix3D::Set, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 90   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 91   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXQAM@Z ENDP				; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??4Matrix3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3D@@QAEAAV0@ABV0@@Z PROC			; Matrix3D::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 70   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 71   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 72   : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3D@@QAEAAV0@ABV0@@Z ENDP			; Matrix3D::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@ABV0@@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 61   : 	TT_INLINE Matrix3D(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 62   : 	{
; 63   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 64   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 65   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABV0@@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
??0Matrix3D@@QAE@ABVVector3@@@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE explicit Matrix3D(const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		Set(position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABVVector3@@@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3D(const Quaternion & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{
; 55   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z ; Matrix3D::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3D(const Matrix3 & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{
; 51   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z ; Matrix3D::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_sine$ = 12						; size = 4
_cosine$ = 16						; size = 4
??0Matrix3D@@QAE@ABVVector3@@MM@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 45   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float sine,float cosine)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 46   : 	{
; 47   : 		Set(axis,sine,cosine);

	push	ecx
	movss	xmm0, DWORD PTR _cosine$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sine$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3D@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3D@@QAE@ABVVector3@@M@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 41   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 42   : 	{
; 43   : 		Set(axis,angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@M@Z	; Matrix3D::Set

; 44   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVVector3@@M@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
??0Matrix3D@@QAE@ABVVector3@@000@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 37   : 	TT_INLINE explicit Matrix3D(const Vector3	&x,const Vector3	&y,const Vector3	&z,const Vector3	&pos)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 38   : 	{
; 39   : 		Set(x,y,z,pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@000@Z	; Matrix3D::Set

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix3D@@QAE@ABVVector3@@000@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@QAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@QAM@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 31   : 	TT_INLINE explicit Matrix3D(float m[12])

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 32   : 	{
; 33   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 34   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 35   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@QAM@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_init$ = 8						; size = 1
??0Matrix3D@@QAE@_N@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 30   : 	TT_INLINE explicit Matrix3D(bool init) { if (init) Make_Identity(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	movzx	eax, BYTE PTR _init$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix3D
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity
$LN2@Matrix3D:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@_N@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QBEABVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 28   :    TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QBEABVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QAEAAVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 27   :    TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QAEAAVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??XVector4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
??XVector4@@QAEAAV0@M@Z PROC				; Vector4::operator*=, COMDAT
; _this$ = ecx

; 64   : 	TT_INLINE Vector4& operator*=(float f) { X *= f; Y *= f; Z *= f; W *= f; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector4@@QAEAAV0@M@Z ENDP				; Vector4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??ZVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator-=, COMDAT
; _this$ = ecx

; 63   : 	TT_INLINE Vector4& operator-=(const Vector4& v) { X -= v.X; Y -= v.Y; Z -= v.Z; W -= v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??YVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator+=, COMDAT
; _this$ = ecx

; 62   : 	TT_INLINE Vector4& operator+=(const Vector4& v) { X += v.X; Y += v.Y; Z += v.Z; W += v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QBEABMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 39   : 	TT_INLINE const float& operator[](int i) const { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QBEABMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QAEAAMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 38   : 	TT_INLINE float& operator[](int i) { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QAEAAMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ?Set@Vector4@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
?Set@Vector4@@QAEXMMMM@Z PROC				; Vector4::Set, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE void Set(float x, float y, float z, float w) { X = x; Y = y; Z = z; W = w; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Vector4@@QAEXMMMM@Z ENDP				; Vector4::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??4Vector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator=, COMDAT
; _this$ = ecx

; 34   : 	TT_INLINE Vector4& operator=(const Vector4& v) { X = v.X; Y = v.Y; Z = v.Z; W = v.W; return *this; };	

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
??0Vector4@@QAE@MMMM@Z PROC				; Vector4::Vector4, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE Vector4(float x, float y, float z, float w) {	X = x; Y = y; Z = z; W = w;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@@QAE@MMMM@Z ENDP				; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector4@@QAE@XZ PROC					; Vector4::Vector4, COMDAT
; _this$ = ecx

; 24   : 	TT_INLINE Vector4() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector4@@QAE@XZ ENDP					; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4file_auto_ptr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z PROC			; file_auto_ptr::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z ENDP			; file_auto_ptr::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?get@file_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@file_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::get, COMDAT
; _this$ = ecx

; 202  : 	FileClass* get() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get@file_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Dfile_auto_ptr@@QAEAAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ PROC		; file_auto_ptr::operator*, COMDAT
; _this$ = ecx

; 201  : 	FileClass& operator*() { return *_Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ ENDP		; file_auto_ptr::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Bfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator FileClass *, COMDAT
; _this$ = ecx

; 200  : 	operator FileClass *() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator FileClass *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Cfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator->, COMDAT
; _this$ = ecx

; 199  : 	FileClass* operator ->() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EINIClass@@UAEPAXI@Z PROC				; INIClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1INIClass@@UAE@XZ		; INIClass::~INIClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EINIClass@@UAEPAXI@Z ENDP				; INIClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINIClass@@UAEPAXI@Z PROC				; INIClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINIClass@@UAEPAXI@Z ENDP				; INIClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4INIClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4INIClass@@QAEAAV0@ABV0@@Z PROC			; INIClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4INIClass@@QAEAAV0@ABV0@@Z ENDP			; INIClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0INIClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0INIClass@@QAE@ABV0@@Z PROC				; INIClass::INIClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INIClass@@QAE@ABV0@@Z ENDP				; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Name@INIClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Name@INIClass@@QAEPBDXZ PROC			; INIClass::Get_File_Name, COMDAT
; _this$ = ecx

; 183  : 	const char *Get_File_Name() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 		return Filename;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Name@INIClass@@QAEPBDXZ ENDP			; INIClass::Get_File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ PROC ; INIClass::Get_Section_Index, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		return *SectionIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 182  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ENDP ; INIClass::Get_Section_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ PROC ; INIClass::Get_Section_List, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return *SectionList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ENDP ; INIClass::Get_Section_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Section_Present@INIClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Section_Present@INIClass@@QBE_NPBD@Z PROC		; INIClass::Section_Present, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN3@Section_Pr
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Section_Pr
$LN3@Section_Pr:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Section_Pr:
	mov	al, BYTE PTR tv68[ebp]

; 174  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Section_Present@INIClass@@QBE_NPBD@Z ENDP		; INIClass::Section_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Is_Present@INIClass@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Is_Present@INIClass@@QBE_NPBD0@Z PROC			; INIClass::Is_Present, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@Is_Present

; 163  : 		{
; 164  : 			return Find_Entry(section,entry) != 0;

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	test	eax, eax
	je	SHORT $LN5@Is_Present
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@Is_Present
$LN5@Is_Present:
	mov	DWORD PTR tv70[ebp], 0
$LN6@Is_Present:
	mov	al, BYTE PTR tv70[ebp]
	jmp	SHORT $LN3@Is_Present

; 165  : 		}
; 166  : 		else

	jmp	SHORT $LN3@Is_Present
$LN2@Is_Present:

; 167  : 		{
; 168  : 			return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN7@Is_Present
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN8@Is_Present
$LN7@Is_Present:
	mov	DWORD PTR tv76[ebp], 0
$LN8@Is_Present:
	mov	al, BYTE PTR tv76[ebp]
$LN3@Is_Present:

; 169  : 		}
; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Is_Present@INIClass@@QBE_NPBD0@Z ENDP			; INIClass::Is_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkSaveClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z PROC			; ChunkSaveClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkSaveClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ PROC	; ChunkSaveClass::Set_Contains_Chunks, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		HeaderStack[StackIndex-1].ChunkSize |= 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*8+1028], eax

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ ENDP	; ChunkSaveClass::Set_Contains_Chunks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkLoadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z PROC			; ChunkLoadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkLoadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EWideStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EWideStringClass@@QAEPAXI@Z PROC			; WideStringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1WideStringClass@@QAE@XZ	; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EWideStringClass@@QAEPAXI@Z ENDP			; WideStringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1WideStringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WideStringClass@@QAE@XZ PROC				; WideStringClass::~WideStringClass, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@WideStringClass@@AAEXXZ

; 780  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1WideStringClass@@QAE@XZ ENDP				; WideStringClass::~WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EStringClass@@QAEPAXI@Z PROC				; StringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1StringClass@@QAE@XZ		; StringClass::~StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EStringClass@@QAEPAXI@Z ENDP				; StringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?getFormattedString@StringClass@@SA?AV1@PBDZZ
_TEXT	SEGMENT
_result$ = -8						; size = 4
_arguments$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_format$ = 12						; size = 4
?getFormattedString@StringClass@@SA?AV1@PBDZZ PROC	; StringClass::getFormattedString, COMDAT

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 232  : 		va_list arguments;
; 233  : 		StringClass result;

	push	0
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 234  : 
; 235  : 		va_start(arguments, format);

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _arguments$[ebp], eax

; 236  : 		result.Format_Args(format, arguments);

	lea	eax, DWORD PTR _arguments$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	lea	edx, DWORD PTR _result$[ebp]
	push	edx
	call	DWORD PTR __imp_?Format_Args@StringClass@@QAAHPBDABQAD@Z
	add	esp, 12					; 0000000cH

; 237  : 		va_end(arguments);

	mov	DWORD PTR _arguments$[ebp], 0

; 238  : 
; 239  : 		return result;

	push	0
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 240  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getFormattedString@StringClass@@SA?AV1@PBDZZ ENDP	; StringClass::getFormattedString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@StringClass@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@StringClass@@QAEPADXZ PROC			; StringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 477  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@StringClass@@QAEPADXZ ENDP			; StringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv74 = -92						; size = 4
tv91 = -85						; size = 1
tv88 = -84						; size = 4
tv85 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv85[ebp]
	add	edx, 1
	mov	DWORD PTR tv88[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv85[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv91[ebp], cl
	add	DWORD PTR tv85[ebp], 1
	cmp	BYTE PTR tv91[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv85[ebp]
	sub	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv74[ebp], edx
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BStringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BStringClass@@QBEPBDXZ PROC				; StringClass::operator char const *, COMDAT
; _this$ = ecx

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BStringClass@@QBEPBDXZ ENDP				; StringClass::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??AStringClass@@QAEAADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??AStringClass@@QAEAADH@Z PROC				; StringClass::operator[], COMDAT
; _this$ = ecx

; 391  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 	return m_Buffer[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]

; 393  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AStringClass@@QAEAADH@Z ENDP				; StringClass::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??YStringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv68 = -96						; size = 4
tv91 = -89						; size = 1
tv88 = -88						; size = 4
tv85 = -84						; size = 4
_new_len$ = -16						; size = 4
_src_len$ = -12						; size = 4
_cur_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??YStringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator+=, COMDAT
; _this$ = ecx

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 446  : 	int cur_len = Get_Length ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _cur_len$[ebp], eax

; 447  : 	int src_len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	add	ecx, 1
	mov	DWORD PTR tv88[ebp], ecx
$LL3@operator:
	mov	edx, DWORD PTR tv85[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv91[ebp], al
	add	DWORD PTR tv85[ebp], 1
	cmp	BYTE PTR tv91[ebp], 0
	jne	SHORT $LL3@operator
	mov	ecx, DWORD PTR tv85[ebp]
	sub	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _src_len$[ebp], edx

; 448  : 	int new_len = cur_len + src_len;

	mov	eax, DWORD PTR _cur_len$[ebp]
	add	eax, DWORD PTR _src_len$[ebp]
	mov	DWORD PTR _new_len$[ebp], eax

; 449  : 	Resize (new_len + 1);

	mov	eax, DWORD PTR _new_len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Resize@StringClass@@AAEXH@Z

; 450  : 	Store_Length (new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 451  : 	memcpy (&m_Buffer[cur_len], string, (src_len + 1) * sizeof (char));

	mov	eax, DWORD PTR _src_len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _cur_len$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 452  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 453  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YStringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@ABV0@@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 279  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	int len = string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _len$[ebp], eax

; 281  : 	Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 282  : 	Store_Length(len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 283  : 	memcpy (m_Buffer, string.m_Buffer, (len+1) * sizeof (char));		

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 284  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@ABV0@@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1StringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringClass@@QAE@XZ PROC				; StringClass::~StringClass, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@StringClass@@AAEXXZ

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StringClass@@QAE@XZ ENDP				; StringClass::~StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@PBD_N@Z
_TEXT	SEGMENT
tv70 = -92						; size = 4
tv68 = -88						; size = 4
tv90 = -81						; size = 1
tv87 = -80						; size = 4
tv84 = -76						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@PBD_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 347  : 	int len=string ? (int)strlen(string) : 0;

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN5@StringClas
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	add	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
$LL7@StringClas:
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv90[ebp], al
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL7@StringClas
	mov	ecx, DWORD PTR tv84[ebp]
	sub	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@StringClas
$LN5@StringClas:
	mov	DWORD PTR tv70[ebp], 0
$LN6@StringClas:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 348  : 	if (hint_temporary || len>0)

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 349  : 	{
; 350  : 		Get_String (len+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z
$LN2@StringClas:

; 351  : 	}
; 352  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 353  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@PBD_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@ABV0@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@ABV0@_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 338  : 	if (hint_temporary || (string.Get_Length()>0))

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	test	eax, eax
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 339  : 	{
; 340  : 		Get_String (string.Get_Length()+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z
$LN2@StringClas:

; 341  : 	}
; 342  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 343  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@ABV0@_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@H_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 326  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 327  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 328  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@H_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hint_temporary$ = 8					; size = 1
??0StringClass@@QAE@_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 319  : 	Get_String (MAX_TEMP_LEN, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	push	248					; 000000f8H
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 320  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 321  : 	return ;
; 322  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0StringClass@@QAE@_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FastCriticalSectionClass@@QAE@XZ PROC		; FastCriticalSectionClass::FastCriticalSectionClass, COMDAT
; _this$ = ecx

; 110  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 111  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FastCriticalSectionClass@@QAE@XZ ENDP		; FastCriticalSectionClass::FastCriticalSectionClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??1LockClass@FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LockClass@FastCriticalSectionClass@@QAE@XZ PROC	; FastCriticalSectionClass::LockClass::~LockClass, COMDAT
; _this$ = ecx

; 102  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 			criticalSection.Leave();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Leave

; 104  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1LockClass@FastCriticalSectionClass@@QAE@XZ ENDP	; FastCriticalSectionClass::LockClass::~LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__criticalSection$ = 8					; size = 4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z PROC	; FastCriticalSectionClass::LockClass::LockClass, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __criticalSection$[ebp]
	mov	DWORD PTR [eax], ecx

; 98   : 			criticalSection.Enter();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Enter@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Enter

; 99   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ENDP	; FastCriticalSectionClass::LockClass::LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Leave@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Leave, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Flag = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Leave
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Enter@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Enter, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Enter:

; 66   : 		TT_ASSERT((size_t)&Flag % 4 == 0); // aligned to 4 bytes please

	xor	eax, eax
	jne	SHORT $LN6@Enter
	mov	eax, DWORD PTR _this$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	je	SHORT $LN3@Enter
	int	3
$LN3@Enter:

; 67   : 		for (;;)
; 68   : 		{
; 69   : 			if (_interlockedbittestandset(&Flag, 0) == 0) return;

	mov	eax, DWORD PTR _this$[ebp]
	lock	 bts	 DWORD PTR [eax], 0
	setb	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN1@Enter
	jmp	SHORT $LN8@Enter
$LN1@Enter:

; 70   : 			_mm_pause();

	pause

; 71   : 		};

	jmp	SHORT $LN3@Enter
$LN8@Enter:

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Enter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptRegistrar@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptRegistrar@@QAEAAV0@ABV0@@Z PROC		; ScriptRegistrar::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptRegistrar@@QAEAAV0@ABV0@@Z ENDP		; ScriptRegistrar::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptFactory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptFactory@@UAEPAXI@Z PROC			; ScriptFactory::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptFactory@@UAEPAXI@Z ENDP			; ScriptFactory::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptFactory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptFactory@@UAEPAXI@Z PROC			; ScriptFactory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptFactory@@UAEPAXI@Z ENDP			; ScriptFactory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptFactory@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptFactory@@QAEAAV0@ABV0@@Z PROC			; ScriptFactory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptFactory@@QAEAAV0@ABV0@@Z ENDP			; ScriptFactory::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptFactory@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptFactory@@QAE@ABV0@@Z PROC			; ScriptFactory::ScriptFactory, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptFactory@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptFactory@@QAE@ABV0@@Z ENDP			; ScriptFactory::ScriptFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_Movement@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_location$ = 8						; size = 4
_speed$ = 12						; size = 4
_arrived_distance$ = 16					; size = 4
_crouched$ = 20						; size = 1
?Set_Movement@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z PROC ; ActionParamsStruct::Set_Movement, COMDAT
; _this$ = ecx

; 326  : 	void Set_Movement( const Vector3 & location, float speed, float arrived_distance, bool crouched = false ) { MoveLocation = location; MoveSpeed = speed; MoveArrivedDistance = arrived_distance; MoveCrouched = crouched; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _location$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [eax+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _arrived_distance$[ebp]
	movss	DWORD PTR [eax+64], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _crouched$[ebp]
	mov	BYTE PTR [eax+70], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set_Movement@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ENDP ; ActionParamsStruct::Set_Movement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_script$ = 8						; size = 4
_priority$ = 12						; size = 4
_action_id$ = 16					; size = 4
_ai_state$ = 20						; size = 4
?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z PROC ; ActionParamsStruct::Set_Basic, COMDAT
; _this$ = ecx

; 321  : 	void Set_Basic( GameObjObserverClass * script, float priority, int action_id, SoldierAIState ai_state = NO_AI_STATE_CHANGE ) { ObserverID = script->Get_ID(); Priority = (int)priority; ActionID = action_id; AIState = ai_state; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _script$[ebp]
	call	?Get_ID@GameObjObserverClass@@QAEHXZ	; GameObjObserverClass::Get_ID
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	cvttss2si eax, DWORD PTR _priority$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _action_id$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ai_state$[ebp]
	mov	DWORD PTR [eax+168], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ENDP ; ActionParamsStruct::Set_Basic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0ActionParamsStruct@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ActionParamsStruct@@QAE@XZ PROC			; ActionParamsStruct::ActionParamsStruct, COMDAT
; _this$ = ecx

; 432  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _DONT_MOVE_ARRIVED_DIST
	movss	DWORD PTR [eax+64], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+69], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+70], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+71], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [eax+76], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+80], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+92], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+93], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+108], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+109], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+110], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+111], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+113], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+128], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+132], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+168], -1
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 433  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ActionParamsStruct@@QAE@XZ ENDP			; ActionParamsStruct::ActionParamsStruct
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptImpClass@@UAEPAXI@Z PROC			; ScriptImpClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptImpClass@@UAE@XZ	; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptImpClass@@UAEPAXI@Z ENDP			; ScriptImpClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptImpClass@@UAEPAXI@Z PROC			; ScriptImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptImpClass@@UAEPAXI@Z ENDP			; ScriptImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptImpClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptImpClass@@QAEAAV0@ABV0@@Z PROC			; ScriptImpClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptImpClass@@QAEAAV0@ABV0@@Z ENDP			; ScriptImpClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptImpClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptImpClass@@QAE@ABV0@@Z PROC			; ScriptImpClass::ScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptImpClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptImpClass@@QAE@ABV0@@Z ENDP			; ScriptImpClass::ScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z PROC	; ScriptImpClass::Get_Bool_Parameter, COMDAT
; _this$ = ecx

; 290  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 291  :         return Get_Int_Parameter(index) != 0;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN3@Get_Bool_P
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Get_Bool_P
$LN3@Get_Bool_P:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_Bool_P:
	mov	al, BYTE PTR tv68[ebp]

; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z ENDP	; ScriptImpClass::Get_Bool_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z PROC	; ScriptImpClass::Get_Bool_Parameter, COMDAT
; _this$ = ecx

; 286  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 287  :         return Get_Int_Parameter(name) != 0;

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN3@Get_Bool_P
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Get_Bool_P
$LN3@Get_Bool_P:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_Bool_P:
	mov	al, BYTE PTR tv68[ebp]

; 288  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z ENDP	; ScriptImpClass::Get_Bool_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z PROC	; ScriptImpClass::Get_Float_Parameter, COMDAT
; _this$ = ecx

; 282  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 		return (float)atof(Get_Parameter(index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 284  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z ENDP	; ScriptImpClass::Get_Float_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z PROC		; ScriptImpClass::Get_Int_Parameter, COMDAT
; _this$ = ecx

; 278  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 		return atoi(Get_Parameter(index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4

; 280  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z ENDP		; ScriptImpClass::Get_Int_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Parameter_Count@ScriptImpClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Parameter_Count@ScriptImpClass@@QAEHXZ PROC	; ScriptImpClass::Get_Parameter_Count, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 		return mArgC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 276  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Parameter_Count@ScriptImpClass@@QAEHXZ ENDP	; ScriptImpClass::Get_Parameter_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ PROC ; ScriptImpClass::Register_Auto_Save_Variables, COMDAT
; _this$ = ecx

; 265  : 	virtual	void Register_Auto_Save_Variables()	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ ENDP ; ScriptImpClass::Register_Auto_Save_Variables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loader$ = 8						; size = 4
?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z PROC	; ScriptImpClass::Load_Data, COMDAT
; _this$ = ecx

; 264  : 	virtual void Load_Data(ScriptLoader& loader) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z ENDP	; ScriptImpClass::Load_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_saver$ = 8						; size = 4
?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z PROC	; ScriptImpClass::Save_Data, COMDAT
; _this$ = ecx

; 263  : 	virtual void Save_Data(ScriptSaver& saver) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z ENDP	; ScriptImpClass::Save_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ PROC ; ScriptImpClass::Get_Owner_Ptr, COMDAT
; _this$ = ecx

; 258  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 259  : 		return &mOwner;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 260  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ ENDP ; ScriptImpClass::Get_Owner_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ PROC	; ScriptImpClass::Owner, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		return mOwner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 256  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ ENDP	; ScriptImpClass::Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_exiter$ = 12						; size = 4
?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Exited, COMDAT
; _this$ = ecx

; 251  :   void Exited(GameObject *obj,GameObject *exiter) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enterer$ = 12						; size = 4
?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Entered, COMDAT
; _this$ = ecx

; 244  :   void Entered(GameObject *obj,GameObject *enterer) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_poker$ = 12						; size = 4
?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Poked, COMDAT
; _this$ = ecx

; 237  :   void Poked(GameObject *obj,GameObject *poker) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; ScriptImpClass::Animation_Complete, COMDAT
; _this$ = ecx

; 229  :   void Animation_Complete(GameObject *obj,const char *animation_name) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; ScriptImpClass::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z PROC ; ScriptImpClass::Timer_Expired, COMDAT
; _this$ = ecx

; 221  :   void Timer_Expired(GameObject *obj,int number) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z ENDP ; ScriptImpClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_complete_reason$ = 16					; size = 4
?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; ScriptImpClass::Action_Complete, COMDAT
; _this$ = ecx

; 212  :   void Action_Complete(GameObject *obj,int action_id,ActionCompleteReason complete_reason) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; ScriptImpClass::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enemy$ = 12						; size = 4
?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Enemy_Seen, COMDAT
; _this$ = ecx

; 201  :   void Enemy_Seen(GameObject *obj,GameObject *enemy) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_sound$ = 12						; size = 4
?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z PROC ; ScriptImpClass::Sound_Heard, COMDAT
; _this$ = ecx

; 193  :   void Sound_Heard(GameObject *obj,const CombatSound & sound) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ENDP ; ScriptImpClass::Sound_Heard
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; ScriptImpClass::Custom, COMDAT
; _this$ = ecx

; 184  :   void Custom(GameObject *obj,int type,int param,GameObject *sender) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; ScriptImpClass::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z PROC ; ScriptImpClass::Damaged, COMDAT
; _this$ = ecx

; 174  :   void Damaged(GameObject *obj,GameObject *damager,float amount) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z ENDP ; ScriptImpClass::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Killed, COMDAT
; _this$ = ecx

; 164  :   void Killed(GameObject *obj,GameObject *killer) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z PROC ; ScriptImpClass::Destroyed, COMDAT
; _this$ = ecx

; 155  :   void Destroyed(GameObject *obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; ScriptImpClass::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z PROC ; ScriptImpClass::Created, COMDAT
; _this$ = ecx

; 149  :   void Created(GameObject *obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; ScriptImpClass::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_factory$ = 8						; size = 4
?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z PROC ; ScriptImpClass::SetFactory, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		mFactory = factory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 138  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ENDP ; ScriptImpClass::SetFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptClass@@UAEPAXI@Z PROC				; ScriptClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptClass@@UAE@XZ		; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptClass@@UAE@XZ			; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptClass@@UAEPAXI@Z ENDP				; ScriptClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptClass@@UAEPAXI@Z PROC				; ScriptClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptClass@@UAE@XZ			; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptClass@@UAEPAXI@Z ENDP				; ScriptClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptClass@@QAEAAV0@ABV0@@Z PROC			; ScriptClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptClass@@QAEAAV0@ABV0@@Z ENDP			; ScriptClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptClass@@QAE@ABV0@@Z PROC			; ScriptClass::ScriptClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptClass@@QAE@ABV0@@Z ENDP			; ScriptClass::ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ScriptClass@@QAE@XZ PROC				; ScriptClass::ScriptClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@XZ		; GameObjObserverClass::GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ScriptClass@@QAE@XZ ENDP				; ScriptClass::ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??1ScriptClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ScriptClass@@UAE@XZ PROC				; ScriptClass::~ScriptClass, COMDAT
; _this$ = ecx

; 124  : 	virtual ~ScriptClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1ScriptClass@@UAE@XZ ENDP				; ScriptClass::~ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EGameObjObserverClass@@UAEPAXI@Z PROC		; GameObjObserverClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1GameObjObserverClass@@UAE@XZ	; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EGameObjObserverClass@@UAEPAXI@Z ENDP		; GameObjObserverClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGameObjObserverClass@@UAEPAXI@Z PROC		; GameObjObserverClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGameObjObserverClass@@UAEPAXI@Z ENDP		; GameObjObserverClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4GameObjObserverClass@@QAEAAV0@ABV0@@Z PROC		; GameObjObserverClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4GameObjObserverClass@@QAEAAV0@ABV0@@Z ENDP		; GameObjObserverClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0GameObjObserverClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0GameObjObserverClass@@QAE@ABV0@@Z PROC		; GameObjObserverClass::GameObjObserverClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0GameObjObserverClass@@QAE@ABV0@@Z ENDP		; GameObjObserverClass::GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ PROC ; GameObjObserverClass::Owner, COMDAT
; _this$ = ecx

; 117  : 	virtual GameObject* Owner() {return 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ ENDP ; GameObjObserverClass::Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_ID@GameObjObserverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@GameObjObserverClass@@QAEHXZ PROC		; GameObjObserverClass::Get_ID, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@GameObjObserverClass@@QAEHXZ ENDP		; GameObjObserverClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_ID@GameObjObserverClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Set_ID@GameObjObserverClass@@QAEXH@Z PROC		; GameObjObserverClass::Set_ID, COMDAT
; _this$ = ecx

; 95   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		ID = id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 97   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_ID@GameObjObserverClass@@QAEXH@Z ENDP		; GameObjObserverClass::Set_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??1GameObjObserverClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GameObjObserverClass@@UAE@XZ PROC			; GameObjObserverClass::~GameObjObserverClass, COMDAT
; _this$ = ecx

; 92   : 	virtual	~GameObjObserverClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1GameObjObserverClass@@UAE@XZ ENDP			; GameObjObserverClass::~GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0GameObjObserverClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GameObjObserverClass@@QAE@XZ PROC			; GameObjObserverClass::GameObjObserverClass, COMDAT
; _this$ = ecx

; 91   : 	GameObjObserverClass() : ID( 0 ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0GameObjObserverClass@@QAE@XZ ENDP			; GameObjObserverClass::GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Swap@@YAXAAVVector3@@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Swap@@YAXAAVVector3@@0@Z PROC				; Swap, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 399  : 	Vector3 tmp(a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 400  : 	a = b;

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 401  : 	b = tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Swap@@YAXAAVVector3@@0@Z ENDP				; Swap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Distance_Squared@Vector3@@SAMABV1@0@Z
_TEXT	SEGMENT
$T1 = -76						; size = 12
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?Distance_Squared@Vector3@@SAMABV1@0@Z PROC		; Vector3::Distance_Squared, COMDAT

; 333  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 334  : 		return (p1 - p2).Length2();

	mov	eax, DWORD PTR _p2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??G@YA?AVVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Distance_Squared@Vector3@@SAMABV1@0@Z ENDP		; Vector3::Distance_Squared
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Subtract@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Subtract@Vector3@@SAXABV1@0PAV1@@Z PROC		; Vector3::Subtract, COMDAT

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 219  : 		set_result->X = a.X - b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 220  : 		set_result->Y = a.Y - b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 221  : 		set_result->Z = a.Z - b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Vector3@@SAXABV1@0PAV1@@Z ENDP		; Vector3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Add@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Add@Vector3@@SAXABV1@0PAV1@@Z PROC			; Vector3::Add, COMDAT

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 213  : 		set_result->X = a.X + b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 214  : 		set_result->Y = a.Y + b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 215  : 		set_result->Z = a.Z + b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Vector3@@SAXABV1@0PAV1@@Z ENDP			; Vector3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??G@YA?AVVector3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??G@YA?AVVector3@@ABV0@0@Z PROC				; operator-, COMDAT

; 377  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 378  : 	return Vector3(a.X - b.X,a.Y - b.Y,a.Z - b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 379  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVVector3@@ABV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??H@YA?AVVector3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??H@YA?AVVector3@@ABV0@0@Z PROC				; operator+, COMDAT

; 373  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 374  : 	return Vector3(a.X + b.X,a.Y + b.Y,a.Z + b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 375  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVVector3@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
_a$ = 16						; size = 4
??D@YA?AVVector3@@MABV0@@Z PROC				; operator*, COMDAT

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 366  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 367  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@ABV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_k$ = 16						; size = 4
??D@YA?AVVector3@@ABV0@M@Z PROC				; operator*, COMDAT

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 362  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 363  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??_0Vector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??_0Vector3@@QAEAAV0@M@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		X = X * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 166  : 		Y = Y * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 167  : 		Z = Z * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 168  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@@QAEAAV0@M@Z ENDP				; Vector3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??XVector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??XVector3@@QAEAAV0@M@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		X = X * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 159  : 		Y = Y * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 160  : 		Z = Z * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 161  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 162  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@@QAEAAV0@M@Z ENDP				; Vector3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??ZVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator-=, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		X -= v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 152  : 		Y -= v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 153  : 		Z -= v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 154  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??YVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator+=, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		X += v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 145  : 		Y += v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 146  : 		Z += v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 147  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 148  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length2@Vector3@@QBEMXZ
_TEXT	SEGMENT
tv85 = -72						; size = 4
_this$ = -4						; size = 4
?Length2@Vector3@@QBEMXZ PROC				; Vector3::Length2, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		return X * X + Y * Y + Z * Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]

; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length2@Vector3@@QBEMXZ ENDP				; Vector3::Length2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length@Vector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@Vector3@@QBEMXZ PROC				; Vector3::Length, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		return WWMath::Sqrt(Length2());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@WWMath@@SAMM@Z			; WWMath::Sqrt
	add	esp, 4

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector3@@QBEMXZ ENDP				; Vector3::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Normalize@Vector3@@QAEXXZ
_TEXT	SEGMENT
tv81 = -80						; size = 4
_oolen$ = -12						; size = 4
_len2$ = -8						; size = 4
_this$ = -4						; size = 4
?Normalize@Vector3@@QAEXXZ PROC				; Vector3::Normalize, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		float len2 = WWMATH_FLOAT_TINY + Length2();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	fstp	DWORD PTR tv81[ebp]
	movss	xmm0, DWORD PTR tv81[ebp]
	addss	xmm0, DWORD PTR __real@02081cea
	movss	DWORD PTR _len2$[ebp], xmm0

; 76   : 		float oolen = WWMath::Inv_Sqrt(len2);

	push	ecx
	movss	xmm0, DWORD PTR _len2$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Inv_Sqrt@WWMath@@SIMM@Z		; WWMath::Inv_Sqrt
	fstp	DWORD PTR _oolen$[ebp]

; 77   : 		X *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 78   : 		Y *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 79   : 		Z *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@Vector3@@QAEXXZ ENDP				; Vector3::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QBEABMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QBEABMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QAEAAMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QAEAAMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Set@Vector3@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Set@Vector3@@QAEXMMM@Z PROC				; Vector3::Set, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 56   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 57   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Vector3@@QAEXMMM@Z ENDP				; Vector3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??4Vector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator=, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 49   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 50   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 51   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0Vector3@@QAE@MMM@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 33   : 	TT_INLINE Vector3(float x, float y, float z)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	{
; 35   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 36   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 37   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 38   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@@QAE@MMM@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@@QAE@ABV0@@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 27   : 	TT_INLINE Vector3(const Vector3 &v)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	{
; 29   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 30   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 31   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@@QAE@ABV0@@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 23   : 	TT_INLINE Vector3()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	{
; 25   : 		X = Y = Z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 26   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ PROC		; RefArrayHelper<float,1024>::operator float *, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 163  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ ENDP		; RefArrayHelper<float,1024>::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4WWMath@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WWMath@@QAEAAV0@ABV0@@Z PROC				; WWMath::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WWMath@@QAEAAV0@ABV0@@Z ENDP				; WWMath::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Double@WWMath@@SA_NN@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 8
?Is_Valid_Double@WWMath@@SA_NN@Z PROC			; WWMath::Is_Valid_Double, COMDAT

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 208  : 	unsigned long * plong = (unsigned long *)(&x) + 1;

	lea	eax, DWORD PTR _x$[ebp+4]
	mov	DWORD PTR _plong$[ebp], eax

; 209  : 	unsigned long exponent = ((*plong) & 0x7FF00000) >> (32-12);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2146435072				; 7ff00000H
	shr	ecx, 20					; 00000014H
	mov	DWORD PTR _exponent$[ebp], ecx

; 210  : 	if (exponent == 0x7FF) {

	cmp	DWORD PTR _exponent$[ebp], 2047		; 000007ffH
	jne	SHORT $LN1@Is_Valid_D

; 211  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_D
$LN1@Is_Valid_D:

; 212  : 	}
; 213  : 	return true;

	mov	al, 1
$LN2@Is_Valid_D:

; 214  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Double@WWMath@@SA_NN@Z ENDP			; WWMath::Is_Valid_Double
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Float@WWMath@@SA_NM@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 4
?Is_Valid_Float@WWMath@@SA_NM@Z PROC			; WWMath::Is_Valid_Float, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 198  : 	unsigned long * plong = (unsigned long *)(&x);

	lea	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _plong$[ebp], eax

; 199  : 	unsigned long exponent = ((*plong) & 0x7F800000) >> (32-9);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2139095040				; 7f800000H
	shr	ecx, 23					; 00000017H
	mov	DWORD PTR _exponent$[ebp], ecx

; 200  : 	if (exponent == 0xFF) {

	cmp	DWORD PTR _exponent$[ebp], 255		; 000000ffH
	jne	SHORT $LN1@Is_Valid_F

; 201  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_F
$LN1@Is_Valid_F:

; 202  : 	}
; 203  : 	return true;

	mov	al, 1
$LN2@Is_Valid_F:

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Float@WWMath@@SA_NM@Z ENDP			; WWMath::Is_Valid_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Byte_To_Unit_Float@WWMath@@SAME@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
_byte$ = 8						; size = 1
?Byte_To_Unit_Float@WWMath@@SAME@Z PROC			; WWMath::Byte_To_Unit_Float, COMDAT

; 97   : 	static float Byte_To_Unit_Float(unsigned char byte) { return ((float)byte) / 255.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	movzx	eax, BYTE PTR _byte$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Byte_To_Unit_Float@WWMath@@SAME@Z ENDP			; WWMath::Byte_To_Unit_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Unit_Float_To_Byte@WWMath@@SAEM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?Unit_Float_To_Byte@WWMath@@SAEM@Z PROC			; WWMath::Unit_Float_To_Byte, COMDAT

; 96   : 	static unsigned char Unit_Float_To_Byte(float f) { return (unsigned char)(f*255.0f); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	movss	xmm0, DWORD PTR _f$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Unit_Float_To_Byte@WWMath@@SAEM@Z ENDP			; WWMath::Unit_Float_To_Byte
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJN@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 8
?Float_To_Long@WWMath@@SAJN@Z PROC			; WWMath::Float_To_Long, COMDAT

; 222  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 223  :     return _mm_cvttsd_si32(_mm_load_pd(&f));

	movupd	xmm0, XMMWORD PTR _f$[ebx]
	movapd	XMMWORD PTR $T1[ebp], xmm0
	movapd	xmm0, XMMWORD PTR $T1[ebp]
	cvttsd2si eax, xmm0

; 224  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJN@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAHHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAHHHM@Z PROC				; WWMath::Lerp, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 193  : 	return (a + (int)((b - a)*lerp));

	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	cvttss2si eax, xmm0
	add	eax, DWORD PTR _a$[ebp]

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAHHHM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SANNNM@Z
_TEXT	SEGMENT
tv73 = -72						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_lerp$ = 24						; size = 4
?Lerp@WWMath@@SANNNM@Z PROC				; WWMath::Lerp, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 188  : 	return (a + (b - a)*lerp);

	movsd	xmm0, QWORD PTR _b$[ebp]
	subsd	xmm0, QWORD PTR _a$[ebp]
	cvtss2sd xmm1, DWORD PTR _lerp$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _a$[ebp]
	movsd	QWORD PTR tv73[ebp], xmm0
	fld	QWORD PTR tv73[ebp]

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SANNNM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAMMMM@Z PROC				; WWMath::Lerp, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 183  : 	return (a + (b - a)*lerp);

	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	addss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAMMMM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Max@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Max@WWMath@@SAMMM@Z PROC				; WWMath::Max, COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 177  : 	if (a>b) return a;

	movss	xmm0, DWORD PTR _a$[ebp]
	comiss	xmm0, DWORD PTR _b$[ebp]
	jbe	SHORT $LN1@Max
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Max
$LN1@Max:

; 178  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Max:

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Max@WWMath@@SAMMM@Z ENDP				; WWMath::Max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Min@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Min@WWMath@@SAMMM@Z PROC				; WWMath::Min, COMDAT

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 171  : 	if (a<b) return a;

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _a$[ebp]
	jbe	SHORT $LN1@Min
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Min
$LN1@Min:

; 172  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Min:

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Min@WWMath@@SAMMM@Z ENDP				; WWMath::Min
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Wrap@WWMath@@SANNNN@Z PROC				; WWMath::Wrap, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 158  : 	if ( val >= max )	val -= (max-min);

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	movsd	xmm1, QWORD PTR _val$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 159  : 	if ( val < min )	val += (max-min);

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	addsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 160  : 	if ( val < min ) {

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 161  : 		val = min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 162  : 	}
; 163  : 	if ( val > max ) {

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 164  : 		val = max;

	movsd	xmm0, QWORD PTR _max$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 165  : 	}
; 166  : 	return val;

	fld	QWORD PTR _val$[ebp]

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SANNNN@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Wrap@WWMath@@SAMMMM@Z PROC				; WWMath::Wrap, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 145  : 	if ( val >= max )	val -= (max-min);

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 146  : 	if ( val < min )	val += (max-min);

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	addss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 147  : 	if ( val < min ) {

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 148  : 		val = min;

	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 149  : 	}
; 150  : 	if ( val > max ) {

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 151  : 		val = max;

	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 152  : 	}
; 153  : 	return val;

	fld	DWORD PTR _val$[ebp]

; 154  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SAMMMM@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp_Int@WWMath@@SAHHHH@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min_val$ = 12						; size = 4
_max_val$ = 16						; size = 4
?Clamp_Int@WWMath@@SAHHHH@Z PROC			; WWMath::Clamp_Int, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 138  : 	if(val < min_val) return min_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _min_val$[ebp]
	jge	SHORT $LN2@Clamp_Int
	mov	eax, DWORD PTR _min_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN2@Clamp_Int:

; 139  : 	if(val > max_val) return max_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _max_val$[ebp]
	jle	SHORT $LN1@Clamp_Int
	mov	eax, DWORD PTR _max_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN1@Clamp_Int:

; 140  : 	return val;

	mov	eax, DWORD PTR _val$[ebp]
$LN3@Clamp_Int:

; 141  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp_Int@WWMath@@SAHHHH@Z ENDP			; WWMath::Clamp_Int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Clamp@WWMath@@SANNNN@Z PROC				; WWMath::Clamp, COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 131  : 	if(val < min) return min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	QWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 132  : 	if(val > max) return max;

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	QWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 133  : 	return val;

	fld	QWORD PTR _val$[ebp]
$LN3@Clamp:

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SANNNN@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Clamp@WWMath@@SAMMMM@Z PROC				; WWMath::Clamp, COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 124  : 	if(val < min) return min;

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	DWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 125  : 	if(val > max) return max;

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	DWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 126  : 	return val;

	fld	DWORD PTR _val$[ebp]
$LN3@Clamp:

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SAMMMM@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Random_Float@WWMath@@SAMMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_min$ = 8						; size = 4
_max$ = 12						; size = 4
?Random_Float@WWMath@@SAMMM@Z PROC			; WWMath::Random_Float, COMDAT

; 118  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 119  : 	return Random_Float() * (max-min) + min; 

	call	?Random_Float@WWMath@@SAMXZ		; WWMath::Random_Float
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	xmm1, DWORD PTR _max$[ebp]
	subss	xmm1, DWORD PTR _min$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Random_Float@WWMath@@SAMMM@Z ENDP			; WWMath::Random_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z PROC		; WWMath::Fast_Is_Float_Positive, COMDAT

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 114  : 	return !((*(int *)(&val)) & 0x80000000);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2147483648			; 80000000H
	jne	SHORT $LN3@Fast_Is_Fl
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Fast_Is_Fl
$LN3@Fast_Is_Fl:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Fast_Is_Fl:
	mov	al, BYTE PTR tv66[ebp]

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z ENDP		; WWMath::Fast_Is_Float_Positive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Floor@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Floor@WWMath@@SAMM@Z PROC				; WWMath::Floor, COMDAT

; 81   : 	static float Floor(float val) { return floorf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Floor@WWMath@@SAMM@Z ENDP				; WWMath::Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Ceil@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Ceil@WWMath@@SAMM@Z PROC				; WWMath::Ceil, COMDAT

; 80   : 	static float Ceil(float val) { return ceilf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_ceilf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Ceil@WWMath@@SAMM@Z ENDP				; WWMath::Ceil
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sign@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sign@WWMath@@SAMM@Z PROC				; WWMath::Sign, COMDAT

; 102  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 103  : 	if (val > 0.0f) { 

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@Sign

; 104  : 		return +1.0f; 

	fld1
	jmp	SHORT $LN3@Sign
$LN2@Sign:

; 105  : 	} 
; 106  : 	if (val < 0.0f) { 

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN1@Sign

; 107  : 		return -1.0f; 

	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN3@Sign
$LN1@Sign:

; 108  : 	} 
; 109  : 	return 0.0f; 

	fldz
$LN3@Sign:

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sign@WWMath@@SAMM@Z ENDP				; WWMath::Sign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan2@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
_x$ = 12						; size = 4
?Atan2@WWMath@@SAMMM@Z PROC				; WWMath::Atan2, COMDAT

; 78   : 	static float Atan2(float y,float x) { return static_cast<float>(atan2(y,x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan2@WWMath@@SAMMM@Z ENDP				; WWMath::Atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan@WWMath@@SAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Atan@WWMath@@SAMM@Z PROC				; WWMath::Atan, COMDAT

; 77   : 	static float Atan(float x) { return static_cast<float>(atan(x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan@WWMath@@SAMM@Z ENDP				; WWMath::Atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Asin@WWMath@@SAMM@Z PROC				; WWMath::Asin, COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 307  : 	return (float)asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Asin@WWMath@@SAMM@Z ENDP				; WWMath::Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Acos@WWMath@@SAMM@Z PROC				; WWMath::Acos, COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 287  : 	return (float)acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4

; 288  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Acos@WWMath@@SAMM@Z ENDP				; WWMath::Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Asin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Asin, COMDAT

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 292  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Asin

; 293  : 		return WWMath::Asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Asin@WWMath@@SAMM@Z			; WWMath::Asin
	add	esp, 4
	jmp	$LN12@Fast_Asin
$LN11@Fast_Asin:

; 294  : 	}
; 295  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 296  : 	int idx0=Float_To_Int_Floor(val); 

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 297  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 298  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 299  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 300  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Asin:

; 301  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Asin
$LN6@Fast_Asin:
	int	3
$LN7@Fast_Asin:

; 302  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Asin
$LN1@Fast_Asin:
	int	3
$LN2@Fast_Asin:

; 303  : 	return (1.0f - frac) * _FastAsinTable[idx0] + frac * _FastAsinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Asin:

; 304  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Asin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Acos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Acos, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 271  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Acos

; 272  : 		return WWMath::Acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Acos@WWMath@@SAMM@Z			; WWMath::Acos
	add	esp, 4
	jmp	$LN12@Fast_Acos
$LN11@Fast_Acos:

; 273  : 	}
; 274  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 275  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 276  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 277  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 278  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 279  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Acos:

; 280  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Acos
$LN6@Fast_Acos:
	int	3
$LN7@Fast_Acos:

; 281  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Acos
$LN1@Fast_Acos:
	int	3
$LN2@Fast_Acos:

; 282  : 	return (1.0f - frac) * _FastAcosTable[idx0] + frac * _FastAcosTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Acos:

; 283  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Acos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Cos@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Cos, COMDAT

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 266  : 	return 1.0f / WWMath::Fast_Cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Cos@WWMath@@SAMM@Z		; WWMath::Fast_Cos
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Cos@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv135 = -88						; size = 4
tv140 = -84						; size = 4
tv138 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Cos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Cos, COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 254  : 	val+=(WWMATH_PI * 0.5f);

	movss	xmm0, DWORD PTR _val$[ebp]
	addss	xmm0, DWORD PTR __real@3fc90fdb
	movss	DWORD PTR _val$[ebp], xmm0

; 255  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 256  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 257  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 258  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 259  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 260  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 261  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv140[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv140[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv135[ebp], xmm1
	fld	DWORD PTR tv135[ebp]

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Cos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Sin@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Sin, COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 249  : 	return 1.0f / WWMath::Fast_Sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Sin@WWMath@@SAMM@Z		; WWMath::Fast_Sin
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 250  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Sin@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv133 = -88						; size = 4
tv138 = -84						; size = 4
tv136 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Sin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Sin, COMDAT

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 238  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 239  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 240  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 241  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 242  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 243  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 244  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv136[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv136[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv138[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv133[ebp], xmm1
	fld	DWORD PTR tv133[ebp]

; 245  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Sin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJM@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 4
?Float_To_Long@WWMath@@SAJM@Z PROC			; WWMath::Float_To_Long, COMDAT

; 217  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 218  :     return _mm_cvtt_ss2si(_mm_load_ss(&f));

	movss	xmm0, DWORD PTR _f$[ebx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	cvttss2si eax, xmm0

; 219  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJM@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Inv_Sqrt@WWMath@@SIMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_number$ = 8						; size = 4
?Inv_Sqrt@WWMath@@SIMM@Z PROC				; WWMath::Inv_Sqrt, COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 342  : 	return 1.f / sqrt(number);

	push	ecx
	movss	xmm0, DWORD PTR _number$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 343  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inv_Sqrt@WWMath@@SIMM@Z ENDP				; WWMath::Inv_Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sqrt@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sqrt@WWMath@@SAMM@Z PROC				; WWMath::Sqrt, COMDAT

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 312  :     return ::sqrtf(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4

; 313  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sqrt@WWMath@@SAMM@Z ENDP				; WWMath::Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sin@WWMath@@SAMM@Z PROC				; WWMath::Sin, COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 233  :     return ::sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sin@WWMath@@SAMM@Z ENDP				; WWMath::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Cos@WWMath@@SAMM@Z PROC				; WWMath::Cos, COMDAT

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 228  :     return ::cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cos@WWMath@@SAMM@Z ENDP				; WWMath::Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Floor@WWMath@@SAHABM@Z
_TEXT	SEGMENT
tv83 = -96						; size = 4
_r$ = -28						; size = 4
_mantissa$ = -24					; size = 4
_imask$ = -20						; size = 4
_expsign$ = -16						; size = 4
_exponent$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Floor@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Floor, COMDAT

; 326  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 327  : 	int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 328  : 	int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 329  : 	a&=0x7fffffff;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _a$[ebp], eax

; 330  : 	int exponent = (a>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 331  : 	int expsign	= ~(exponent>>31);

	mov	eax, DWORD PTR _exponent$[ebp]
	sar	eax, 31					; 0000001fH
	not	eax
	mov	DWORD PTR _expsign$[ebp], eax

; 332  : 	int imask = ( (1<<(31-(exponent))))-1;

	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _imask$[ebp], eax

; 333  : 	int mantissa = (a&((1<<23)-1));

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	mov	DWORD PTR _mantissa$[ebp], eax

; 334  : 	int r = ((unsigned int)(mantissa|(1<<23))<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	or	eax, 8388608				; 00800000H
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 335  : #pragma warning(suppress: 6290) //warning C6290: Bitwise operation on logical result: ! has higher precedence than &. Use && or (!(x & y)) instead
; 336  : 	r = ((r & expsign) ^ (sign)) + ((!((mantissa<<8)&imask)&(expsign^((a-1)>>31)))&sign);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	and	eax, DWORD PTR _imask$[ebp]
	jne	SHORT $LN3@Float_To_I
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@Float_To_I
$LN3@Float_To_I:
	mov	DWORD PTR tv83[ebp], 0
$LN4@Float_To_I:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR _expsign$[ebp]
	xor	ecx, DWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	sub	edx, 1
	sar	edx, 31					; 0000001fH
	xor	edx, DWORD PTR _expsign$[ebp]
	and	edx, DWORD PTR tv83[ebp]
	and	edx, DWORD PTR _sign$[ebp]
	add	ecx, edx
	mov	DWORD PTR _r$[ebp], ecx

; 337  : 	return r;

	mov	eax, DWORD PTR _r$[ebp]

; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Floor@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Chop@WWMath@@SAHABM@Z
_TEXT	SEGMENT
_r$ = -20						; size = 4
_exponent$ = -16					; size = 4
_mantissa$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Chop@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Chop, COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 317  :     int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 318  :     int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 319  :     int mantissa = (a&((1<<23)-1))|(1<<23);

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	or	eax, 8388608				; 00800000H
	mov	DWORD PTR _mantissa$[ebp], eax

; 320  :     int exponent = ((a&0x7fffffff)>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 321  :     int r = ((unsigned int)(mantissa)<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 322  :     return ((r ^ (sign)) - sign ) &~ (exponent>>31);

	mov	eax, DWORD PTR _r$[ebp]
	xor	eax, DWORD PTR _sign$[ebp]
	sub	eax, DWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	sar	ecx, 31					; 0000001fH
	not	ecx
	and	eax, ecx

; 323  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Chop@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Chop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fabs@WWMath@@SAMM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_val$ = 8						; size = 4
?Fabs@WWMath@@SAMM@Z PROC				; WWMath::Fabs, COMDAT

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 58   : 		int value=*(int*)&val;

	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 59   : 		value&=0x7fffffff;

	mov	eax, DWORD PTR _value$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _value$[ebp], eax

; 60   : 		return *(float*)&value;

	fld	DWORD PTR _value$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fabs@WWMath@@SAMM@Z ENDP				; WWMath::Fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 133  :     return _time64(_Time);

	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 541  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?ceil@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?ceil@@YAMM@Z PROC					; ceil, COMDAT

; 509  :         {return (ceilf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_ceilf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ceil@@YAMM@Z ENDP					; ceil
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 507  :         {return (atan2f(_Y, _X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?abs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?abs@@YAMM@Z PROC					; abs, COMDAT

; 499  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?abs@@YAMM@Z ENDP					; abs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv78 = -80						; size = 8
tv72 = -72						; size = 8
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv72[ebp], xmm0
	fld	QWORD PTR tv72[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv78[ebp]
	movsd	xmm0, QWORD PTR tv78[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv80[ebp], xmm0
	fld	DWORD PTR tv80[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_cos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _ceilf
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv74 = -72						; size = 8
__X$ = 8						; size = 4
_ceilf	PROC						; COMDAT

; 408  :         {return ((float)ceil((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__ceil
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ceilf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv85 = -92						; size = 4
tv83 = -88						; size = 8
tv77 = -80						; size = 8
tv75 = -72						; size = 8
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
	fld	QWORD PTR tv75[ebp]
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
	fld	QWORD PTR tv77[ebp]
	call	__CIatan2
	fstp	QWORD PTR tv83[ebp]
	movsd	xmm0, QWORD PTR tv83[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_atan_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_asin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_acos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
