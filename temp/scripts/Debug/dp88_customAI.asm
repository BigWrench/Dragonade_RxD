; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\dp88_customAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?TYPE_OFFENSIVE@dp88_AI_Objective@@2IB		; dp88_AI_Objective::TYPE_OFFENSIVE
PUBLIC	?TYPE_DEFENSIVE@dp88_AI_Objective@@2IB		; dp88_AI_Objective::TYPE_DEFENSIVE
PUBLIC	?TYPE_ENGINEERING@dp88_AI_Objective@@2IB	; dp88_AI_Objective::TYPE_ENGINEERING
PUBLIC	?UNITTYPE_SOLDIER@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_SOLDIER
PUBLIC	?UNITTYPE_LVEHICLE@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_LVEHICLE
PUBLIC	?UNITTYPE_HVEHICLE@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_HVEHICLE
PUBLIC	?UNITTYPE_AIRCRAFT@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_AIRCRAFT
PUBLIC	?UNITTYPE_MAX@dp88_AI_Objective@@1EB		; dp88_AI_Objective::UNITTYPE_MAX
PUBLIC	?UNITTYPE_UNKNOWN@dp88_AI_Objective@@1EB	; dp88_AI_Objective::UNITTYPE_UNKNOWN
PUBLIC	?ACTION_ID_MOVE_TO_OBJECTIVE@dp88_AI_Unit@@1HB	; dp88_AI_Unit::ACTION_ID_MOVE_TO_OBJECTIVE
PUBLIC	?ACTION_ID_ATTACK_TARGET@dp88_AI_Unit@@1HB	; dp88_AI_Unit::ACTION_ID_ATTACK_TARGET
PUBLIC	?STATE_UNDEPLOYED@dp88_AI_PopupTurret@@1EB	; dp88_AI_PopupTurret::STATE_UNDEPLOYED
PUBLIC	?STATE_DEPLOYING@dp88_AI_PopupTurret@@1EB	; dp88_AI_PopupTurret::STATE_DEPLOYING
PUBLIC	?STATE_DEPLOYED@dp88_AI_PopupTurret@@1EB	; dp88_AI_PopupTurret::STATE_DEPLOYED
PUBLIC	?STATE_UNDEPLOYING@dp88_AI_PopupTurret@@1EB	; dp88_AI_PopupTurret::STATE_UNDEPLOYING
;	COMDAT ?STATE_UNDEPLOYING@dp88_AI_PopupTurret@@1EB
CONST	SEGMENT
?STATE_UNDEPLOYING@dp88_AI_PopupTurret@@1EB DB 03H	; dp88_AI_PopupTurret::STATE_UNDEPLOYING
CONST	ENDS
;	COMDAT ?STATE_DEPLOYED@dp88_AI_PopupTurret@@1EB
CONST	SEGMENT
?STATE_DEPLOYED@dp88_AI_PopupTurret@@1EB DB 02H		; dp88_AI_PopupTurret::STATE_DEPLOYED
CONST	ENDS
;	COMDAT ?STATE_DEPLOYING@dp88_AI_PopupTurret@@1EB
CONST	SEGMENT
?STATE_DEPLOYING@dp88_AI_PopupTurret@@1EB DB 01H	; dp88_AI_PopupTurret::STATE_DEPLOYING
CONST	ENDS
;	COMDAT ?STATE_UNDEPLOYED@dp88_AI_PopupTurret@@1EB
CONST	SEGMENT
?STATE_UNDEPLOYED@dp88_AI_PopupTurret@@1EB DB 00H	; dp88_AI_PopupTurret::STATE_UNDEPLOYED
CONST	ENDS
;	COMDAT ?ACTION_ID_ATTACK_TARGET@dp88_AI_Unit@@1HB
CONST	SEGMENT
?ACTION_ID_ATTACK_TARGET@dp88_AI_Unit@@1HB DD 077c812H	; dp88_AI_Unit::ACTION_ID_ATTACK_TARGET
CONST	ENDS
;	COMDAT ?ACTION_ID_MOVE_TO_OBJECTIVE@dp88_AI_Unit@@1HB
CONST	SEGMENT
?ACTION_ID_MOVE_TO_OBJECTIVE@dp88_AI_Unit@@1HB DD 077c811H ; dp88_AI_Unit::ACTION_ID_MOVE_TO_OBJECTIVE
CONST	ENDS
CONST	SEGMENT
_DONT_MOVE_ARRIVED_DIST DD 0447a0000r		; 1000
CONST	ENDS
;	COMDAT ?UNITTYPE_UNKNOWN@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_UNKNOWN@dp88_AI_Objective@@1EB DB 0ffH	; dp88_AI_Objective::UNITTYPE_UNKNOWN
CONST	ENDS
;	COMDAT ?UNITTYPE_MAX@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_MAX@dp88_AI_Objective@@1EB DB 03H		; dp88_AI_Objective::UNITTYPE_MAX
CONST	ENDS
;	COMDAT ?UNITTYPE_AIRCRAFT@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_AIRCRAFT@dp88_AI_Objective@@1EB DB 03H	; dp88_AI_Objective::UNITTYPE_AIRCRAFT
CONST	ENDS
;	COMDAT ?UNITTYPE_HVEHICLE@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_HVEHICLE@dp88_AI_Objective@@1EB DB 02H	; dp88_AI_Objective::UNITTYPE_HVEHICLE
CONST	ENDS
;	COMDAT ?UNITTYPE_LVEHICLE@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_LVEHICLE@dp88_AI_Objective@@1EB DB 01H	; dp88_AI_Objective::UNITTYPE_LVEHICLE
CONST	ENDS
;	COMDAT ?UNITTYPE_SOLDIER@dp88_AI_Objective@@1EB
CONST	SEGMENT
?UNITTYPE_SOLDIER@dp88_AI_Objective@@1EB DB 00H		; dp88_AI_Objective::UNITTYPE_SOLDIER
CONST	ENDS
;	COMDAT ?TYPE_ENGINEERING@dp88_AI_Objective@@2IB
CONST	SEGMENT
?TYPE_ENGINEERING@dp88_AI_Objective@@2IB DD 03H		; dp88_AI_Objective::TYPE_ENGINEERING
CONST	ENDS
;	COMDAT ?TYPE_DEFENSIVE@dp88_AI_Objective@@2IB
CONST	SEGMENT
?TYPE_DEFENSIVE@dp88_AI_Objective@@2IB DD 02H		; dp88_AI_Objective::TYPE_DEFENSIVE
CONST	ENDS
;	COMDAT ?TYPE_OFFENSIVE@dp88_AI_Objective@@2IB
CONST	SEGMENT
?TYPE_OFFENSIVE@dp88_AI_Objective@@2IB DD 01H		; dp88_AI_Objective::TYPE_OFFENSIVE
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_atanf
PUBLIC	_atan2f
PUBLIC	_ceilf
PUBLIC	_cosf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_U@YAPAXIPAX@Z				; operator new[]
PUBLIC	?Fabs@WWMath@@SAMM@Z				; WWMath::Fabs
PUBLIC	?Float_To_Int_Chop@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Chop
PUBLIC	?Float_To_Int_Floor@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Floor
PUBLIC	?Cos@WWMath@@SAMM@Z				; WWMath::Cos
PUBLIC	?Sin@WWMath@@SAMM@Z				; WWMath::Sin
PUBLIC	?Sqrt@WWMath@@SAMM@Z				; WWMath::Sqrt
PUBLIC	?Inv_Sqrt@WWMath@@SIMM@Z			; WWMath::Inv_Sqrt
PUBLIC	?Float_To_Long@WWMath@@SAJM@Z			; WWMath::Float_To_Long
PUBLIC	?Fast_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Sin
PUBLIC	?Fast_Inv_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Sin
PUBLIC	?Fast_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Cos
PUBLIC	?Fast_Inv_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Cos
PUBLIC	?Fast_Acos@WWMath@@SAMM@Z			; WWMath::Fast_Acos
PUBLIC	?Fast_Asin@WWMath@@SAMM@Z			; WWMath::Fast_Asin
PUBLIC	?Acos@WWMath@@SAMM@Z				; WWMath::Acos
PUBLIC	?Asin@WWMath@@SAMM@Z				; WWMath::Asin
PUBLIC	?Atan@WWMath@@SAMM@Z				; WWMath::Atan
PUBLIC	?Atan2@WWMath@@SAMMM@Z				; WWMath::Atan2
PUBLIC	?Sign@WWMath@@SAMM@Z				; WWMath::Sign
PUBLIC	?Ceil@WWMath@@SAMM@Z				; WWMath::Ceil
PUBLIC	?Floor@WWMath@@SAMM@Z				; WWMath::Floor
PUBLIC	?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z	; WWMath::Fast_Is_Float_Positive
PUBLIC	?Random_Float@WWMath@@SAMMM@Z			; WWMath::Random_Float
PUBLIC	?Clamp@WWMath@@SAMMMM@Z				; WWMath::Clamp
PUBLIC	?Clamp@WWMath@@SANNNN@Z				; WWMath::Clamp
PUBLIC	?Clamp_Int@WWMath@@SAHHHH@Z			; WWMath::Clamp_Int
PUBLIC	?Wrap@WWMath@@SAMMMM@Z				; WWMath::Wrap
PUBLIC	?Wrap@WWMath@@SANNNN@Z				; WWMath::Wrap
PUBLIC	?Min@WWMath@@SAMMM@Z				; WWMath::Min
PUBLIC	?Max@WWMath@@SAMMM@Z				; WWMath::Max
PUBLIC	?Lerp@WWMath@@SAMMMM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SANNNM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SAHHHM@Z				; WWMath::Lerp
PUBLIC	?Float_To_Long@WWMath@@SAJN@Z			; WWMath::Float_To_Long
PUBLIC	?Unit_Float_To_Byte@WWMath@@SAEM@Z		; WWMath::Unit_Float_To_Byte
PUBLIC	?Byte_To_Unit_Float@WWMath@@SAME@Z		; WWMath::Byte_To_Unit_Float
PUBLIC	?Is_Valid_Float@WWMath@@SA_NM@Z			; WWMath::Is_Valid_Float
PUBLIC	?Is_Valid_Double@WWMath@@SA_NN@Z		; WWMath::Is_Valid_Double
PUBLIC	??4WWMath@@QAEAAV0@ABV0@@Z			; WWMath::operator=
PUBLIC	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ		; RefArrayHelper<float,1024>::operator float *
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@ABV0@@Z				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@MMM@Z				; Vector3::Vector3
PUBLIC	??4Vector3@@QAEAAV0@ABV0@@Z			; Vector3::operator=
PUBLIC	?Set@Vector3@@QAEXMMM@Z				; Vector3::Set
PUBLIC	??AVector3@@QAEAAMH@Z				; Vector3::operator[]
PUBLIC	??AVector3@@QBEABMH@Z				; Vector3::operator[]
PUBLIC	?Normalize@Vector3@@QAEXXZ			; Vector3::Normalize
PUBLIC	?Length@Vector3@@QBEMXZ				; Vector3::Length
PUBLIC	?Length2@Vector3@@QBEMXZ			; Vector3::Length2
PUBLIC	??YVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator+=
PUBLIC	??ZVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator-=
PUBLIC	??XVector3@@QAEAAV0@M@Z				; Vector3::operator*=
PUBLIC	??_0Vector3@@QAEAAV0@M@Z			; Vector3::operator/=
PUBLIC	??D@YA?AVVector3@@ABV0@M@Z			; operator*
PUBLIC	??D@YA?AVVector3@@MABV0@@Z			; operator*
PUBLIC	??H@YA?AVVector3@@ABV0@0@Z			; operator+
PUBLIC	??G@YA?AVVector3@@ABV0@0@Z			; operator-
PUBLIC	?Add@Vector3@@SAXABV1@0PAV1@@Z			; Vector3::Add
PUBLIC	?Subtract@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Subtract
PUBLIC	?Distance_Squared@Vector3@@SAMABV1@0@Z		; Vector3::Distance_Squared
PUBLIC	?Swap@@YAXAAVVector3@@0@Z			; Swap
PUBLIC	??0GameObjObserverClass@@QAE@XZ			; GameObjObserverClass::GameObjObserverClass
PUBLIC	??1GameObjObserverClass@@UAE@XZ			; GameObjObserverClass::~GameObjObserverClass
PUBLIC	?Set_ID@GameObjObserverClass@@QAEXH@Z		; GameObjObserverClass::Set_ID
PUBLIC	?Get_ID@GameObjObserverClass@@QAEHXZ		; GameObjObserverClass::Get_ID
PUBLIC	?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ ; GameObjObserverClass::Owner
PUBLIC	??0GameObjObserverClass@@QAE@ABV0@@Z		; GameObjObserverClass::GameObjObserverClass
PUBLIC	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z	; GameObjObserverClass::operator=
PUBLIC	??_GGameObjObserverClass@@UAEPAXI@Z		; GameObjObserverClass::`scalar deleting destructor'
PUBLIC	??_EGameObjObserverClass@@UAEPAXI@Z		; GameObjObserverClass::`vector deleting destructor'
PUBLIC	??1ScriptClass@@UAE@XZ				; ScriptClass::~ScriptClass
PUBLIC	??0ScriptClass@@QAE@XZ				; ScriptClass::ScriptClass
PUBLIC	??0ScriptClass@@QAE@ABV0@@Z			; ScriptClass::ScriptClass
PUBLIC	??4ScriptClass@@QAEAAV0@ABV0@@Z			; ScriptClass::operator=
PUBLIC	??_GScriptClass@@UAEPAXI@Z			; ScriptClass::`scalar deleting destructor'
PUBLIC	??_EScriptClass@@UAEPAXI@Z			; ScriptClass::`vector deleting destructor'
PUBLIC	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory
PUBLIC	?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Created
PUBLIC	?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Destroyed
PUBLIC	?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Killed
PUBLIC	?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z ; ScriptImpClass::Damaged
PUBLIC	?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z ; ScriptImpClass::Custom
PUBLIC	?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ; ScriptImpClass::Sound_Heard
PUBLIC	?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Enemy_Seen
PUBLIC	?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; ScriptImpClass::Action_Complete
PUBLIC	?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z ; ScriptImpClass::Timer_Expired
PUBLIC	?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ; ScriptImpClass::Animation_Complete
PUBLIC	?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Poked
PUBLIC	?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Entered
PUBLIC	?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Exited
PUBLIC	?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ ; ScriptImpClass::Owner
PUBLIC	?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ ; ScriptImpClass::Get_Owner_Ptr
PUBLIC	?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z ; ScriptImpClass::Save_Data
PUBLIC	?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z ; ScriptImpClass::Load_Data
PUBLIC	?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ ; ScriptImpClass::Register_Auto_Save_Variables
PUBLIC	?Get_Parameter_Count@ScriptImpClass@@QAEHXZ	; ScriptImpClass::Get_Parameter_Count
PUBLIC	?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z	; ScriptImpClass::Get_Int_Parameter
PUBLIC	?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z	; ScriptImpClass::Get_Float_Parameter
PUBLIC	?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z	; ScriptImpClass::Get_Bool_Parameter
PUBLIC	?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z	; ScriptImpClass::Get_Bool_Parameter
PUBLIC	??0ScriptImpClass@@QAE@ABV0@@Z			; ScriptImpClass::ScriptImpClass
PUBLIC	??4ScriptImpClass@@QAEAAV0@ABV0@@Z		; ScriptImpClass::operator=
PUBLIC	??_GScriptImpClass@@UAEPAXI@Z			; ScriptImpClass::`scalar deleting destructor'
PUBLIC	??_EScriptImpClass@@UAEPAXI@Z			; ScriptImpClass::`vector deleting destructor'
PUBLIC	??0ActionParamsStruct@@QAE@XZ			; ActionParamsStruct::ActionParamsStruct
PUBLIC	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic
PUBLIC	?Set_Movement@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z ; ActionParamsStruct::Set_Movement
PUBLIC	?Set_Attack@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ; ActionParamsStruct::Set_Attack
PUBLIC	?Set_Attack@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z ; ActionParamsStruct::Set_Attack
PUBLIC	??0ScriptFactory@@QAE@ABV0@@Z			; ScriptFactory::ScriptFactory
PUBLIC	??4ScriptFactory@@QAEAAV0@ABV0@@Z		; ScriptFactory::operator=
PUBLIC	??_GScriptFactory@@UAEPAXI@Z			; ScriptFactory::`scalar deleting destructor'
PUBLIC	??_EScriptFactory@@UAEPAXI@Z			; ScriptFactory::`vector deleting destructor'
PUBLIC	??4ScriptRegistrar@@QAEAAV0@ABV0@@Z		; ScriptRegistrar::operator=
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	?Enter@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Enter
PUBLIC	?Leave@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Leave
PUBLIC	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass
PUBLIC	??1LockClass@FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::LockClass::~LockClass
PUBLIC	??0FastCriticalSectionClass@@QAE@XZ		; FastCriticalSectionClass::FastCriticalSectionClass
PUBLIC	??0StringClass@@QAE@_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@H_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@PBD_N@Z			; StringClass::StringClass
PUBLIC	??1StringClass@@QAE@XZ				; StringClass::~StringClass
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	??4StringClass@@QAEABV0@ABV0@@Z			; StringClass::operator=
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Peek_Buffer@StringClass@@QAEPADXZ		; StringClass::Peek_Buffer
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??_EStringClass@@QAEPAXI@Z			; StringClass::`vector deleting destructor'
PUBLIC	??1WideStringClass@@QAE@XZ			; WideStringClass::~WideStringClass
PUBLIC	??_EWideStringClass@@QAEPAXI@Z			; WideStringClass::`vector deleting destructor'
PUBLIC	??4ChunkLoadClass@@QAEAAV0@ABV0@@Z		; ChunkLoadClass::operator=
PUBLIC	?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ	; ChunkSaveClass::Set_Contains_Chunks
PUBLIC	??4ChunkSaveClass@@QAEAAV0@ABV0@@Z		; ChunkSaveClass::operator=
PUBLIC	?Is_Present@INIClass@@QBE_NPBD0@Z		; INIClass::Is_Present
PUBLIC	?Section_Present@INIClass@@QBE_NPBD@Z		; INIClass::Section_Present
PUBLIC	?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ; INIClass::Get_Section_List
PUBLIC	?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ; INIClass::Get_Section_Index
PUBLIC	?Get_File_Name@INIClass@@QAEPBDXZ		; INIClass::Get_File_Name
PUBLIC	??0INIClass@@QAE@ABV0@@Z			; INIClass::INIClass
PUBLIC	??4INIClass@@QAEAAV0@ABV0@@Z			; INIClass::operator=
PUBLIC	??_GINIClass@@UAEPAXI@Z				; INIClass::`scalar deleting destructor'
PUBLIC	??_EINIClass@@UAEPAXI@Z				; INIClass::`vector deleting destructor'
PUBLIC	??Cfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator->
PUBLIC	??Bfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator FileClass *
PUBLIC	??Dfile_auto_ptr@@QAEAAVFileClass@@XZ		; file_auto_ptr::operator*
PUBLIC	?get@file_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::get
PUBLIC	??4file_auto_ptr@@QAEAAV0@ABV0@@Z		; file_auto_ptr::operator=
PUBLIC	??0Vector4@@QAE@XZ				; Vector4::Vector4
PUBLIC	??0Vector4@@QAE@MMMM@Z				; Vector4::Vector4
PUBLIC	??4Vector4@@QAEAAV0@ABV0@@Z			; Vector4::operator=
PUBLIC	?Set@Vector4@@QAEXMMMM@Z			; Vector4::Set
PUBLIC	??AVector4@@QAEAAMH@Z				; Vector4::operator[]
PUBLIC	??AVector4@@QBEABMH@Z				; Vector4::operator[]
PUBLIC	??YVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator+=
PUBLIC	??ZVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator-=
PUBLIC	??XVector4@@QAEAAV0@M@Z				; Vector4::operator*=
PUBLIC	??AMatrix3D@@QAEAAVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??AMatrix3D@@QBEABVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??0Matrix3D@@QAE@_N@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@QAM@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@000@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@M@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@MM@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@@Z			; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABV0@@Z			; Matrix3D::Matrix3D
PUBLIC	??4Matrix3D@@QAEAAV0@ABV0@@Z			; Matrix3D::operator=
PUBLIC	?Set@Matrix3D@@QAEXQAM@Z			; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@000@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@M@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@MM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Set
PUBLIC	?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Translation
PUBLIC	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Translation
PUBLIC	?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set_Translation
PUBLIC	?Get_X_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_X_Translation
PUBLIC	?Get_Y_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Y_Translation
PUBLIC	?Get_Z_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Z_Translation
PUBLIC	?Set_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_X_Translation
PUBLIC	?Set_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Y_Translation
PUBLIC	?Set_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Z_Translation
PUBLIC	?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ; Matrix3D::Adjust_Translation
PUBLIC	?Adjust_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_X_Translation
PUBLIC	?Adjust_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Y_Translation
PUBLIC	?Adjust_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Z_Translation
PUBLIC	?Make_Identity@Matrix3D@@QAEXXZ			; Matrix3D::Make_Identity
PUBLIC	?Translate@Matrix3D@@QAEXMMM@Z			; Matrix3D::Translate
PUBLIC	?Translate@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Translate
PUBLIC	?Translate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_X
PUBLIC	?Translate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Y
PUBLIC	?Translate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Scale@Matrix3D@@QAEXM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXMMM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXAAVVector3@@@Z		; Matrix3D::Scale
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Z
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Transform_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Z_Vector
PUBLIC	?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Rotate_Vector
PUBLIC	?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Transform_Vector
PUBLIC	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
PUBLIC	?Get_Network_ID@NetworkObjectClass@@QBEHXZ	; NetworkObjectClass::Get_Network_ID
PUBLIC	??0Matrix4@@QAE@XZ				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABV0@@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@_N@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVMatrix3D@@@Z			; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVVector4@@000@Z		; Matrix4::Matrix4
PUBLIC	?Make_Identity@Matrix4@@QAEXXZ			; Matrix4::Make_Identity
PUBLIC	?Init@Matrix4@@QAEXABVMatrix3D@@@Z		; Matrix4::Init
PUBLIC	?Init@Matrix4@@QAEXABVVector4@@000@Z		; Matrix4::Init
PUBLIC	?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Ortho@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho
PUBLIC	?Init_Perspective@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Perspective
PUBLIC	??AMatrix4@@QAEAAVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	??AMatrix4@@QBEABVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	?Transpose@Matrix4@@QBE?AV1@XZ			; Matrix4::Transpose
PUBLIC	?Determinant@Matrix4@@QBEMXZ			; Matrix4::Determinant
PUBLIC	?Inverse@Matrix4@@QBE?AV1@XZ			; Matrix4::Inverse
PUBLIC	??4Matrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator=
PUBLIC	??YMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator+=
PUBLIC	??ZMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator-=
PUBLIC	??XMatrix4@@QAEAAV0@M@Z				; Matrix4::operator*=
PUBLIC	??_0Matrix4@@QAEAAV0@M@Z			; Matrix4::operator/=
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	??0Matrix3@@QAE@XZ				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABV0@@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@_N@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@00@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@MMMMMMMMM@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@M@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@MM@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVQuaternion@@@Z		; Matrix3::Matrix3
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@00@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXMMMMMMMMM@Z			; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@M@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@MM@Z		; Matrix3::Set
PUBLIC	??AMatrix3@@QAEAAVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	??AMatrix3@@QBEABVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	?Transpose@Matrix3@@QBE?AV1@XZ			; Matrix3::Transpose
PUBLIC	?Determinant@Matrix3@@QBEMXZ			; Matrix3::Determinant
PUBLIC	??4Matrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator=
PUBLIC	??YMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator+=
PUBLIC	??ZMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator-=
PUBLIC	??XMatrix3@@QAEAAV0@M@Z				; Matrix3::operator*=
PUBLIC	??_0Matrix3@@QAEAAV0@M@Z			; Matrix3::operator/=
PUBLIC	?Make_Identity@Matrix3@@QAEXXZ			; Matrix3::Make_Identity
PUBLIC	?Rotate_X@Matrix3@@QAEXM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_X@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_Y@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Y@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Z
PUBLIC	?Rotate_Z@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Z
PUBLIC	?Get_X_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_X_Rotation
PUBLIC	?Get_Y_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Y_Rotation
PUBLIC	?Get_Z_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Z_Rotation
PUBLIC	?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Z_Vector
PUBLIC	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z		; operator*
PUBLIC	?Add@Matrix3@@SAXABV1@0PAV1@@Z			; Matrix3::Add
PUBLIC	?Subtract@Matrix3@@SAXABV1@0PAV1@@Z		; Matrix3::Subtract
PUBLIC	?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Rotate_Vector
PUBLIC	?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Transpose_Rotate_Vector
PUBLIC	?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ; Matrix3::Rotate_AABox_Extent
PUBLIC	?Inverse@Matrix3@@QBE?AV1@XZ			; Matrix3::Inverse
PUBLIC	??4SysTimeClass@@QAEAAV0@ABV0@@Z		; SysTimeClass::operator=
PUBLIC	??0PostLoadableClass@@QAE@XZ			; PostLoadableClass::PostLoadableClass
PUBLIC	??1PostLoadableClass@@UAE@XZ			; PostLoadableClass::~PostLoadableClass
PUBLIC	?On_Post_Load@PostLoadableClass@@UAEXXZ		; PostLoadableClass::On_Post_Load
PUBLIC	?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ; PostLoadableClass::Is_Post_Load_Registered
PUBLIC	?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ; PostLoadableClass::Set_Post_Load_Registered
PUBLIC	??0PostLoadableClass@@QAE@ABV0@@Z		; PostLoadableClass::PostLoadableClass
PUBLIC	??4PostLoadableClass@@QAEAAV0@ABV0@@Z		; PostLoadableClass::operator=
PUBLIC	??_GPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`scalar deleting destructor'
PUBLIC	??_EPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`vector deleting destructor'
PUBLIC	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ	; ReferencerClass::operator->
PUBLIC	??0ReferencerClass@@QAE@XZ			; ReferencerClass::ReferencerClass
PUBLIC	??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z ; ReferencerClass::ReferencerClass
PUBLIC	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr
PUBLIC	?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z ; ReferencerClass::Set_Ptr
PUBLIC	??0ReferencerClass@@QAE@ABV0@@Z			; ReferencerClass::ReferencerClass
PUBLIC	??_GReferencerClass@@UAEPAXI@Z			; ReferencerClass::`scalar deleting destructor'
PUBLIC	??_EReferencerClass@@UAEPAXI@Z			; ReferencerClass::`vector deleting destructor'
PUBLIC	?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ; ReferenceableClass<ScriptableGameObj>::Get_Data
PUBLIC	?Get_ID@BaseGameObj@@QBEHXZ			; BaseGameObj::Get_ID
PUBLIC	??0LineSegClass@@QAE@XZ				; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABVVector3@@0@Z		; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABVVector3@@0M@Z		; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z	; LineSegClass::LineSegClass
PUBLIC	?Set@LineSegClass@@QAEXABVVector3@@0@Z		; LineSegClass::Set
PUBLIC	?Set@LineSegClass@@QAEXABVVector3@@0M@Z		; LineSegClass::Set
PUBLIC	?Get_P0@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_P0
PUBLIC	?Get_P1@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_P1
PUBLIC	?Get_DP@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_DP
PUBLIC	?Get_Dir@LineSegClass@@QBEABVVector3@@XZ	; LineSegClass::Get_Dir
PUBLIC	?Get_Length@LineSegClass@@QBEMXZ		; LineSegClass::Get_Length
PUBLIC	?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z ; LineSegClass::Compute_Point
PUBLIC	?recalculate@LineSegClass@@IAEXXZ		; LineSegClass::recalculate
PUBLIC	??0LineSegClass@@QAE@ABV0@@Z			; LineSegClass::LineSegClass
PUBLIC	??4LineSegClass@@QAEAAV0@ABV0@@Z		; LineSegClass::operator=
PUBLIC	?Get_Position@PhysClass@@QBEXPAVVector3@@@Z	; PhysClass::Get_Position
PUBLIC	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
PUBLIC	?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ ; PhysicalGameObj::Get_Position
PUBLIC	?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ	; SmartGameObj::Get_Action
PUBLIC	?Is_Enemy_Seen_Enabled@SmartGameObj@@QAE_NXZ	; SmartGameObj::Is_Enemy_Seen_Enabled
PUBLIC	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
PUBLIC	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
PUBLIC	??0GenericSLNode@@IAE@PAX@Z			; GenericSLNode::GenericSLNode
PUBLIC	??0JFW_Key_Hook_Base@@QAE@XZ			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
PUBLIC	??0JFW_Key_Hook_Base@@QAE@ABV0@@Z		; JFW_Key_Hook_Base::JFW_Key_Hook_Base
PUBLIC	??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z		; JFW_Key_Hook_Base::operator=
PUBLIC	??_GJFW_Key_Hook_Base@@UAEPAXI@Z		; JFW_Key_Hook_Base::`scalar deleting destructor'
PUBLIC	??_EJFW_Key_Hook_Base@@UAEPAXI@Z		; JFW_Key_Hook_Base::`vector deleting destructor'
PUBLIC	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
PUBLIC	?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
PUBLIC	?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
PUBLIC	?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
PUBLIC	?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head
PUBLIC	?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail
PUBLIC	?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove
PUBLIC	?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All
PUBLIC	?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before
PUBLIC	?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After
PUBLIC	?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty
PUBLIC	?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count
PUBLIC	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=
PUBLIC	??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor'
PUBLIC	??0MultiKeyHookScriptImpClass@@QAE@XZ		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
PUBLIC	??1MultiKeyHookScriptImpClass@@UAE@XZ		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass
PUBLIC	??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z	; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
PUBLIC	??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z	; MultiKeyHookScriptImpClass::operator=
PUBLIC	??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z	; MultiKeyHookScriptImpClass::`scalar deleting destructor'
PUBLIC	??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z	; MultiKeyHookScriptImpClass::`vector deleting destructor'
PUBLIC	??0JFW_Object_Created_Hook_Base@@QAE@XZ		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
PUBLIC	??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
PUBLIC	??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z ; JFW_Object_Created_Hook_Base::operator=
PUBLIC	??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z	; JFW_Object_Created_Hook_Base::`scalar deleting destructor'
PUBLIC	??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z	; JFW_Object_Created_Hook_Base::`vector deleting destructor'
PUBLIC	??0ObserverImpClass@@QAE@VStringClass@@@Z	; ObserverImpClass::ObserverImpClass
PUBLIC	?Get_Name@ObserverImpClass@@UAEPBDXZ		; ObserverImpClass::Get_Name
PUBLIC	?Attach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z ; ObserverImpClass::Attach
PUBLIC	?Detach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z ; ObserverImpClass::Detach
PUBLIC	?Animation_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@PBD@Z ; ObserverImpClass::Animation_Complete
PUBLIC	?Created@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z ; ObserverImpClass::Created
PUBLIC	?Destroyed@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z ; ObserverImpClass::Destroyed
PUBLIC	?Killed@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ; ObserverImpClass::Killed
PUBLIC	?Damaged@ObserverImpClass@@MAEXPAVScriptableGameObj@@0M@Z ; ObserverImpClass::Damaged
PUBLIC	?Custom@ObserverImpClass@@MAEXPAVScriptableGameObj@@HH0@Z ; ObserverImpClass::Custom
PUBLIC	?Sound_Heard@ObserverImpClass@@MAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ; ObserverImpClass::Sound_Heard
PUBLIC	?Enemy_Seen@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ; ObserverImpClass::Enemy_Seen
PUBLIC	?Action_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; ObserverImpClass::Action_Complete
PUBLIC	?Timer_Expired@ObserverImpClass@@MAEXPAVScriptableGameObj@@H@Z ; ObserverImpClass::Timer_Expired
PUBLIC	?Poked@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ; ObserverImpClass::Poked
PUBLIC	?Entered@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ; ObserverImpClass::Entered
PUBLIC	?Exited@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ; ObserverImpClass::Exited
PUBLIC	??1ObserverImpClass@@UAE@XZ			; ObserverImpClass::~ObserverImpClass
PUBLIC	??_GObserverImpClass@@UAEPAXI@Z			; ObserverImpClass::`scalar deleting destructor'
PUBLIC	??0dp88_customAI@@QAE@XZ			; dp88_customAI::dp88_customAI
PUBLIC	??1dp88_customAI@@UAE@XZ			; dp88_customAI::~dp88_customAI
PUBLIC	?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ; dp88_customAI::Created
PUBLIC	?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z ; dp88_customAI::Timer_Expired
PUBLIC	?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_customAI::Custom
PUBLIC	?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; dp88_customAI::Action_Complete
PUBLIC	?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ; dp88_customAI::Init
PUBLIC	?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_customAI::loadSettings
PUBLIC	?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z ; dp88_customAI::AIStateChanged
PUBLIC	?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ; dp88_customAI::ResetAllActions
PUBLIC	?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ; dp88_customAI::getDistance
PUBLIC	?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z ; dp88_customAI::getBasePriority
PUBLIC	?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z ; dp88_customAI::getPriority
PUBLIC	?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z ; dp88_customAI::getPriority
PUBLIC	?getPrimary@dp88_customAI@@QAE_NPAVScriptableGameObj@@@Z ; dp88_customAI::getPrimary
PUBLIC	?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z ; dp88_customAI::IsVehicleEmpty
PUBLIC	?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z ; dp88_customAI::IsVehicleAIEnabled
PUBLIC	?GetTargetType@dp88_customAI@@SA?AW4TargetType@1@PAVScriptableGameObj@@@Z ; dp88_customAI::GetTargetType
PUBLIC	??_Gdp88_customAI@@UAEPAXI@Z			; dp88_customAI::`scalar deleting destructor'
PUBLIC	?Created@dp88_AI_heavyVehicleMarker@@EAEXPAVScriptableGameObj@@@Z ; dp88_AI_heavyVehicleMarker::Created
PUBLIC	??0dp88_AI_heavyVehicleMarker@@QAE@XZ		; dp88_AI_heavyVehicleMarker::dp88_AI_heavyVehicleMarker
PUBLIC	??1dp88_AI_heavyVehicleMarker@@UAE@XZ		; dp88_AI_heavyVehicleMarker::~dp88_AI_heavyVehicleMarker
PUBLIC	??_Gdp88_AI_heavyVehicleMarker@@UAEPAXI@Z	; dp88_AI_heavyVehicleMarker::`scalar deleting destructor'
PUBLIC	??0dp88_AI_Marker_Building@@QAE@XZ		; dp88_AI_Marker_Building::dp88_AI_Marker_Building
PUBLIC	??1dp88_AI_Marker_Building@@UAE@XZ		; dp88_AI_Marker_Building::~dp88_AI_Marker_Building
PUBLIC	??_Gdp88_AI_Marker_Building@@UAEPAXI@Z		; dp88_AI_Marker_Building::`scalar deleting destructor'
PUBLIC	??0dp88_AI_Marker_HeavyVehicle@@QAE@XZ		; dp88_AI_Marker_HeavyVehicle::dp88_AI_Marker_HeavyVehicle
PUBLIC	??1dp88_AI_Marker_HeavyVehicle@@UAE@XZ		; dp88_AI_Marker_HeavyVehicle::~dp88_AI_Marker_HeavyVehicle
PUBLIC	??_Gdp88_AI_Marker_HeavyVehicle@@UAEPAXI@Z	; dp88_AI_Marker_HeavyVehicle::`scalar deleting destructor'
PUBLIC	?Created@dp88_AI_Marker_Repairable@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Marker_Repairable::Created
PUBLIC	?Get_Distance_From_Pathfind@dp88_AI_Marker_Repairable@@QAEMXZ ; dp88_AI_Marker_Repairable::Get_Distance_From_Pathfind
PUBLIC	??0dp88_AI_Marker_Repairable@@QAE@XZ		; dp88_AI_Marker_Repairable::dp88_AI_Marker_Repairable
PUBLIC	??1dp88_AI_Marker_Repairable@@UAE@XZ		; dp88_AI_Marker_Repairable::~dp88_AI_Marker_Repairable
PUBLIC	??_Gdp88_AI_Marker_Repairable@@UAEPAXI@Z	; dp88_AI_Marker_Repairable::`scalar deleting destructor'
PUBLIC	?Created@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Unit::Created
PUBLIC	?Detach@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Unit::Detach
PUBLIC	?Timer_Expired@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AI_Unit::Timer_Expired
PUBLIC	?Action_Complete@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; dp88_AI_Unit::Action_Complete
PUBLIC	?Init@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Unit::Init
PUBLIC	?loadSettings@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_AI_Unit::loadSettings
PUBLIC	?Force_Clear_Current_Objective@dp88_AI_Unit@@UAEXXZ ; dp88_AI_Unit::Force_Clear_Current_Objective
PUBLIC	?Get_Current_Objective@dp88_AI_Unit@@QAEPAVdp88_AI_Objective@@XZ ; dp88_AI_Unit::Get_Current_Objective
PUBLIC	??0?$VectorClass@PAVdp88_AI_Unit@@@@QAE@HPBQAVdp88_AI_Unit@@@Z ; VectorClass<dp88_AI_Unit *>::VectorClass<dp88_AI_Unit *>
PUBLIC	??1?$VectorClass@PAVdp88_AI_Unit@@@@UAE@XZ	; VectorClass<dp88_AI_Unit *>::~VectorClass<dp88_AI_Unit *>
PUBLIC	??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
PUBLIC	??A?$VectorClass@PAVdp88_AI_Unit@@@@QBEABQAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
PUBLIC	??8?$VectorClass@PAVdp88_AI_Unit@@@@UBE_NABV0@@Z ; VectorClass<dp88_AI_Unit *>::operator==
PUBLIC	?Resize@?$VectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z ; VectorClass<dp88_AI_Unit *>::Resize
PUBLIC	?Clear@?$VectorClass@PAVdp88_AI_Unit@@@@UAEXXZ	; VectorClass<dp88_AI_Unit *>::Clear
PUBLIC	?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ	; VectorClass<dp88_AI_Unit *>::Length
PUBLIC	?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z ; VectorClass<dp88_AI_Unit *>::ID
PUBLIC	?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z ; VectorClass<dp88_AI_Unit *>::ID
PUBLIC	??_G?$VectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z	; VectorClass<dp88_AI_Unit *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE@IPBQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::DynamicVectorClass<dp88_AI_Unit *>
PUBLIC	?Resize@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEXXZ ; DynamicVectorClass<dp88_AI_Unit *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Unit *>::Count
PUBLIC	?Add@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::Add
PUBLIC	?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::DeleteObj
PUBLIC	?Delete@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NH@Z ; DynamicVectorClass<dp88_AI_Unit *>::Delete
PUBLIC	?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::ID
PUBLIC	??1?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE@XZ ; DynamicVectorClass<dp88_AI_Unit *>::~DynamicVectorClass<dp88_AI_Unit *>
PUBLIC	??_G?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z ; DynamicVectorClass<dp88_AI_Unit *>::`scalar deleting destructor'
PUBLIC	?ResetAllActions@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_Unit::ResetAllActions
PUBLIC	?GoToObjective@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@M@Z ; dp88_AI_Unit::GoToObjective
PUBLIC	?AttackTarget@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@0@Z ; dp88_AI_Unit::AttackTarget
PUBLIC	?ShouldPursueTarget@dp88_AI_Unit@@MAE_NPAVScriptableGameObj@@0@Z ; dp88_AI_Unit::ShouldPursueTarget
PUBLIC	??0dp88_AI_Unit@@QAE@XZ				; dp88_AI_Unit::dp88_AI_Unit
PUBLIC	??1dp88_AI_Unit@@UAE@XZ				; dp88_AI_Unit::~dp88_AI_Unit
PUBLIC	??_Gdp88_AI_Unit@@UAEPAXI@Z			; dp88_AI_Unit::`scalar deleting destructor'
PUBLIC	?Created@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Tank_Offensive::Created
PUBLIC	?Enemy_Seen@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@0@Z ; dp88_AI_Tank_Offensive::Enemy_Seen
PUBLIC	?Init@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Tank_Offensive::Init
PUBLIC	?loadSettings@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_AI_Tank_Offensive::loadSettings
PUBLIC	?GetPreferredAttackRange@dp88_AI_Tank_Offensive@@MAEHPAVScriptableGameObj@@0@Z ; dp88_AI_Tank_Offensive::GetPreferredAttackRange
PUBLIC	?IsValidTarget@dp88_AI_Tank_Offensive@@MAE_NPAVScriptableGameObj@@0@Z ; dp88_AI_Tank_Offensive::IsValidTarget
PUBLIC	?ChooseNewObjective@dp88_AI_Tank_Offensive@@MAEPAVdp88_AI_Objective@@PAVScriptableGameObj@@@Z ; dp88_AI_Tank_Offensive::ChooseNewObjective
PUBLIC	??0dp88_AI_Tank_Offensive@@QAE@XZ		; dp88_AI_Tank_Offensive::dp88_AI_Tank_Offensive
PUBLIC	??1dp88_AI_Tank_Offensive@@UAE@XZ		; dp88_AI_Tank_Offensive::~dp88_AI_Tank_Offensive
PUBLIC	??_Gdp88_AI_Tank_Offensive@@UAEPAXI@Z		; dp88_AI_Tank_Offensive::`scalar deleting destructor'
PUBLIC	?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z ; dp88_AI_Turret::Enemy_Seen
PUBLIC	?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AI_Turret::Timer_Expired
PUBLIC	?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z ; dp88_AI_Turret::Damaged
PUBLIC	?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Turret::Init
PUBLIC	?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_AI_Turret::loadSettings
PUBLIC	?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z ; dp88_AI_Turret::AIStateChanged
PUBLIC	?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z ; dp88_AI_Turret::checkTeam
PUBLIC	?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z ; dp88_AI_Turret::checkRange
PUBLIC	?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z ; dp88_AI_Turret::checkPowerState
PUBLIC	?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z ; dp88_AI_Turret::attackTarget
PUBLIC	?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ; dp88_AI_Turret::attackLocation
PUBLIC	?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_Turret::stopAttacking
PUBLIC	??0dp88_AI_Turret@@QAE@XZ			; dp88_AI_Turret::dp88_AI_Turret
PUBLIC	??1dp88_AI_Turret@@UAE@XZ			; dp88_AI_Turret::~dp88_AI_Turret
PUBLIC	??_Gdp88_AI_Turret@@UAEPAXI@Z			; dp88_AI_Turret::`scalar deleting destructor'
PUBLIC	?Created@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_PopupTurret::Created
PUBLIC	?Timer_Expired@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AI_PopupTurret::Timer_Expired
PUBLIC	?Custom@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_AI_PopupTurret::Custom
PUBLIC	?Animation_Complete@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@PBD@Z ; dp88_AI_PopupTurret::Animation_Complete
PUBLIC	?Destroyed@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_PopupTurret::Destroyed
PUBLIC	?attackTarget@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@0_N@Z ; dp88_AI_PopupTurret::attackTarget
PUBLIC	?attackLocation@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ; dp88_AI_PopupTurret::attackLocation
PUBLIC	?Deploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_PopupTurret::Deploy
PUBLIC	?Undeploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_PopupTurret::Undeploy
PUBLIC	??0dp88_AI_PopupTurret@@QAE@XZ			; dp88_AI_PopupTurret::dp88_AI_PopupTurret
PUBLIC	??1dp88_AI_PopupTurret@@UAE@XZ			; dp88_AI_PopupTurret::~dp88_AI_PopupTurret
PUBLIC	??_Gdp88_AI_PopupTurret@@UAEPAXI@Z		; dp88_AI_PopupTurret::`scalar deleting destructor'
PUBLIC	?Enemy_Seen@dp88_AI_PopupTurret_Spotter@@EAEXPAVScriptableGameObj@@0@Z ; dp88_AI_PopupTurret_Spotter::Enemy_Seen
PUBLIC	??0dp88_AI_PopupTurret_Spotter@@QAE@XZ		; dp88_AI_PopupTurret_Spotter::dp88_AI_PopupTurret_Spotter
PUBLIC	??1dp88_AI_PopupTurret_Spotter@@UAE@XZ		; dp88_AI_PopupTurret_Spotter::~dp88_AI_PopupTurret_Spotter
PUBLIC	??_Gdp88_AI_PopupTurret_Spotter@@UAEPAXI@Z	; dp88_AI_PopupTurret_Spotter::`scalar deleting destructor'
PUBLIC	?Timer_Expired@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AI_ChargedTurret::Timer_Expired
PUBLIC	?Animation_Complete@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@PBD@Z ; dp88_AI_ChargedTurret::Animation_Complete
PUBLIC	?Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_ChargedTurret::Destroyed
PUBLIC	?Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_ChargedTurret::Init
PUBLIC	?loadSettings@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_AI_ChargedTurret::loadSettings
PUBLIC	?attackTarget@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@0_N@Z ; dp88_AI_ChargedTurret::attackTarget
PUBLIC	?attackLocation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ; dp88_AI_ChargedTurret::attackLocation
PUBLIC	?StartCharging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_ChargedTurret::StartCharging
PUBLIC	?StartDischarging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_ChargedTurret::StartDischarging
PUBLIC	?GetAnimationObject@dp88_AI_ChargedTurret@@MAEPAVScriptableGameObj@@PAV2@@Z ; dp88_AI_ChargedTurret::GetAnimationObject
PUBLIC	?ApplyIdleAnimation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_ChargedTurret::ApplyIdleAnimation
PUBLIC	??0dp88_AI_ChargedTurret@@QAE@XZ		; dp88_AI_ChargedTurret::dp88_AI_ChargedTurret
PUBLIC	??1dp88_AI_ChargedTurret@@UAE@XZ		; dp88_AI_ChargedTurret::~dp88_AI_ChargedTurret
PUBLIC	??_Gdp88_AI_ChargedTurret@@UAEPAXI@Z		; dp88_AI_ChargedTurret::`scalar deleting destructor'
PUBLIC	??0dp88_AI_ChargedTurret_AnimationObserver@@QAE@PAVdp88_AI_ChargedTurret@@@Z ; dp88_AI_ChargedTurret_AnimationObserver::dp88_AI_ChargedTurret_AnimationObserver
PUBLIC	?Animation_Complete@dp88_AI_ChargedTurret_AnimationObserver@@UAEXPAVScriptableGameObj@@PBD@Z ; dp88_AI_ChargedTurret_AnimationObserver::Animation_Complete
PUBLIC	??1dp88_AI_ChargedTurret_AnimationObserver@@UAE@XZ ; dp88_AI_ChargedTurret_AnimationObserver::~dp88_AI_ChargedTurret_AnimationObserver
PUBLIC	??_Gdp88_AI_ChargedTurret_AnimationObserver@@UAEPAXI@Z ; dp88_AI_ChargedTurret_AnimationObserver::`scalar deleting destructor'
PUBLIC	?Created@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Objective::Created
PUBLIC	?Detach@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Objective::Detach
PUBLIC	?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ ; dp88_AI_Objective::GetGameObject
PUBLIC	?GetType@dp88_AI_Objective@@QAEIXZ		; dp88_AI_Objective::GetType
PUBLIC	?GetTeam@dp88_AI_Objective@@QAEHXZ		; dp88_AI_Objective::GetTeam
PUBLIC	?GetRange@dp88_AI_Objective@@QAEHXZ		; dp88_AI_Objective::GetRange
PUBLIC	?GetPriority@dp88_AI_Objective@@QAEMPAVScriptableGameObj@@M@Z ; dp88_AI_Objective::GetPriority
PUBLIC	?GetBestObjective@dp88_AI_Objective@@SAPAV1@PAVScriptableGameObj@@IMV?$DynamicVectorClass@H@@@Z ; dp88_AI_Objective::GetBestObjective
PUBLIC	?CountObjectives@dp88_AI_Objective@@SAHHI@Z	; dp88_AI_Objective::CountObjectives
PUBLIC	?CountUnitObjectives@dp88_AI_Objective@@SAHHIPAVScriptableGameObj@@M@Z ; dp88_AI_Objective::CountUnitObjectives
PUBLIC	?IsValidObjective@dp88_AI_Objective@@SA_NPAV1@@Z ; dp88_AI_Objective::IsValidObjective
PUBLIC	?GetUnitType@dp88_AI_Objective@@IAEEPAVScriptableGameObj@@@Z ; dp88_AI_Objective::GetUnitType
PUBLIC	??0?$VectorClass@PAVdp88_AI_Objective@@@@QAE@HPBQAVdp88_AI_Objective@@@Z ; VectorClass<dp88_AI_Objective *>::VectorClass<dp88_AI_Objective *>
PUBLIC	??1?$VectorClass@PAVdp88_AI_Objective@@@@UAE@XZ	; VectorClass<dp88_AI_Objective *>::~VectorClass<dp88_AI_Objective *>
PUBLIC	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
PUBLIC	??A?$VectorClass@PAVdp88_AI_Objective@@@@QBEABQAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
PUBLIC	??8?$VectorClass@PAVdp88_AI_Objective@@@@UBE_NABV0@@Z ; VectorClass<dp88_AI_Objective *>::operator==
PUBLIC	?Resize@?$VectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z ; VectorClass<dp88_AI_Objective *>::Resize
PUBLIC	?Clear@?$VectorClass@PAVdp88_AI_Objective@@@@UAEXXZ ; VectorClass<dp88_AI_Objective *>::Clear
PUBLIC	?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; VectorClass<dp88_AI_Objective *>::Length
PUBLIC	?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z ; VectorClass<dp88_AI_Objective *>::ID
PUBLIC	?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z ; VectorClass<dp88_AI_Objective *>::ID
PUBLIC	??_G?$VectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z ; VectorClass<dp88_AI_Objective *>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE@IPBQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::DynamicVectorClass<dp88_AI_Objective *>
PUBLIC	?Resize@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEXXZ ; DynamicVectorClass<dp88_AI_Objective *>::Clear
PUBLIC	?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Objective *>::Count
PUBLIC	?Add@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::Add
PUBLIC	?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::DeleteObj
PUBLIC	?Delete@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NH@Z ; DynamicVectorClass<dp88_AI_Objective *>::Delete
PUBLIC	?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::ID
PUBLIC	?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::ID
PUBLIC	??1?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE@XZ ; DynamicVectorClass<dp88_AI_Objective *>::~DynamicVectorClass<dp88_AI_Objective *>
PUBLIC	??_G?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z ; DynamicVectorClass<dp88_AI_Objective *>::`scalar deleting destructor'
PUBLIC	??0dp88_AI_Objective@@QAE@XZ			; dp88_AI_Objective::dp88_AI_Objective
PUBLIC	??1dp88_AI_Objective@@UAE@XZ			; dp88_AI_Objective::~dp88_AI_Objective
PUBLIC	??_Gdp88_AI_Objective@@UAEPAXI@Z		; dp88_AI_Objective::`scalar deleting destructor'
PUBLIC	?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ	; VehicleGameObjDef::Get_Seat_Count
PUBLIC	??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z		; ArmorWarheadManager::operator=
PUBLIC	??0?$VectorClass@H@@QAE@HPBH@Z			; VectorClass<int>::VectorClass<int>
PUBLIC	??0?$VectorClass@H@@QAE@ABV0@@Z			; VectorClass<int>::VectorClass<int>
PUBLIC	??4?$VectorClass@H@@QAEAAV0@ABV0@@Z		; VectorClass<int>::operator=
PUBLIC	??1?$VectorClass@H@@UAE@XZ			; VectorClass<int>::~VectorClass<int>
PUBLIC	??A?$VectorClass@H@@QAEAAHH@Z			; VectorClass<int>::operator[]
PUBLIC	??A?$VectorClass@H@@QBEABHH@Z			; VectorClass<int>::operator[]
PUBLIC	??8?$VectorClass@H@@UBE_NABV0@@Z		; VectorClass<int>::operator==
PUBLIC	?Resize@?$VectorClass@H@@UAE_NHPBH@Z		; VectorClass<int>::Resize
PUBLIC	?Clear@?$VectorClass@H@@UAEXXZ			; VectorClass<int>::Clear
PUBLIC	?Length@?$VectorClass@H@@QBEHXZ			; VectorClass<int>::Length
PUBLIC	?ID@?$VectorClass@H@@UAEHPBH@Z			; VectorClass<int>::ID
PUBLIC	?ID@?$VectorClass@H@@UAEHABH@Z			; VectorClass<int>::ID
PUBLIC	??_G?$VectorClass@H@@UAEPAXI@Z			; VectorClass<int>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@H@@QAE@IPBH@Z		; DynamicVectorClass<int>::DynamicVectorClass<int>
PUBLIC	??0?$DynamicVectorClass@H@@QAE@ABV0@@Z		; DynamicVectorClass<int>::DynamicVectorClass<int>
PUBLIC	?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z	; DynamicVectorClass<int>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@H@@UAEXXZ		; DynamicVectorClass<int>::Clear
PUBLIC	?Count@?$DynamicVectorClass@H@@QBEHXZ		; DynamicVectorClass<int>::Count
PUBLIC	?ID@?$DynamicVectorClass@H@@UAEHPBH@Z		; DynamicVectorClass<int>::ID
PUBLIC	?ID@?$DynamicVectorClass@H@@UAEHABH@Z		; DynamicVectorClass<int>::ID
PUBLIC	??1?$DynamicVectorClass@H@@UAE@XZ		; DynamicVectorClass<int>::~DynamicVectorClass<int>
PUBLIC	??_G?$DynamicVectorClass@H@@UAEPAXI@Z		; DynamicVectorClass<int>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Tank_Offensive>::ScriptRegistrant<dp88_AI_Tank_Offensive>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_Tank_Offensive>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_Tank_Offensive>::~ScriptRegistrant<dp88_AI_Tank_Offensive>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_ChargedTurret>::ScriptRegistrant<dp88_AI_ChargedTurret>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_ChargedTurret>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_ChargedTurret>::~ScriptRegistrant<dp88_AI_ChargedTurret>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_ChargedTurret>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_Objective@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Objective>::ScriptRegistrant<dp88_AI_Objective>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_Objective>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_Objective>::~ScriptRegistrant<dp88_AI_Objective>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_Objective>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::ScriptRegistrant<dp88_AI_heavyVehicleMarker>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::~ScriptRegistrant<dp88_AI_heavyVehicleMarker>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Marker_Building>::ScriptRegistrant<dp88_AI_Marker_Building>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_Marker_Building>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_Marker_Building>::~ScriptRegistrant<dp88_AI_Marker_Building>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_Marker_Building>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::~ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Marker_Repairable>::ScriptRegistrant<dp88_AI_Marker_Repairable>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_Marker_Repairable>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_Marker_Repairable>::~ScriptRegistrant<dp88_AI_Marker_Repairable>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_Turret@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Turret>::ScriptRegistrant<dp88_AI_Turret>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_Turret>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAE@XZ	; ScriptRegistrant<dp88_AI_Turret>::~ScriptRegistrant<dp88_AI_Turret>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_Turret>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_PopupTurret>::ScriptRegistrant<dp88_AI_PopupTurret>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_PopupTurret>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_PopupTurret>::~ScriptRegistrant<dp88_AI_PopupTurret>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_PopupTurret>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::ScriptRegistrant<dp88_AI_PopupTurret_Spotter>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAE@XZ ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::~ScriptRegistrant<dp88_AI_PopupTurret_Spotter>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`scalar deleting destructor'
PUBLIC	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next
PUBLIC	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
PUBLIC	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
PUBLIC	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??$move@AAPAVdp88_AI_Unit@@@std@@YA$$QAPAVdp88_AI_Unit@@AAPAV1@@Z ; std::move<dp88_AI_Unit * &>
PUBLIC	??$move@AAPAVdp88_AI_Objective@@@std@@YA$$QAPAVdp88_AI_Objective@@AAPAV1@@Z ; std::move<dp88_AI_Objective * &>
PUBLIC	??$move@AAH@std@@YA$$QAHAAH@Z			; std::move<int &>
PUBLIC	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
PUBLIC	??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
PUBLIC	??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
PUBLIC	?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory
PUBLIC	?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
PUBLIC	?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern
PUBLIC	??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
PUBLIC	??_7GameObjObserverClass@@6B@			; GameObjObserverClass::`vftable'
PUBLIC	??_7ScriptClass@@6B@				; ScriptClass::`vftable'
PUBLIC	??_7ScriptImpClass@@6B@				; ScriptImpClass::`vftable'
PUBLIC	??_7ScriptFactory@@6B@				; ScriptFactory::`vftable'
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_7INIClass@@6B@				; INIClass::`vftable'
PUBLIC	??_7PostLoadableClass@@6B@			; PostLoadableClass::`vftable'
PUBLIC	??_7ReferencerClass@@6B@			; ReferencerClass::`vftable'
PUBLIC	??_7JFW_Key_Hook_Base@@6B@			; JFW_Key_Hook_Base::`vftable'
PUBLIC	??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vftable'
PUBLIC	??_7MultiKeyHookScriptImpClass@@6B@		; MultiKeyHookScriptImpClass::`vftable'
PUBLIC	??_7JFW_Object_Created_Hook_Base@@6B@		; JFW_Object_Created_Hook_Base::`vftable'
PUBLIC	??_7ObserverImpClass@@6B@			; ObserverImpClass::`vftable'
PUBLIC	??_7dp88_customAI@@6B@				; dp88_customAI::`vftable'
PUBLIC	??_7dp88_AI_heavyVehicleMarker@@6B@		; dp88_AI_heavyVehicleMarker::`vftable'
PUBLIC	??_7dp88_AI_Marker_Building@@6B@		; dp88_AI_Marker_Building::`vftable'
PUBLIC	??_7dp88_AI_Marker_HeavyVehicle@@6B@		; dp88_AI_Marker_HeavyVehicle::`vftable'
PUBLIC	??_7dp88_AI_Marker_Repairable@@6B@		; dp88_AI_Marker_Repairable::`vftable'
PUBLIC	??_7?$VectorClass@PAVdp88_AI_Unit@@@@6B@	; VectorClass<dp88_AI_Unit *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAVdp88_AI_Unit@@@@6B@	; DynamicVectorClass<dp88_AI_Unit *>::`vftable'
PUBLIC	?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A ; dp88_AI_Unit::ListOfAIUnits
PUBLIC	??_7dp88_AI_Unit@@6B@				; dp88_AI_Unit::`vftable'
PUBLIC	??_7dp88_AI_Tank_Offensive@@6B@			; dp88_AI_Tank_Offensive::`vftable'
PUBLIC	??_7dp88_AI_Turret@@6B@				; dp88_AI_Turret::`vftable'
PUBLIC	??_7dp88_AI_PopupTurret@@6B@			; dp88_AI_PopupTurret::`vftable'
PUBLIC	??_7dp88_AI_PopupTurret_Spotter@@6B@		; dp88_AI_PopupTurret_Spotter::`vftable'
PUBLIC	??_7dp88_AI_ChargedTurret@@6B@			; dp88_AI_ChargedTurret::`vftable'
PUBLIC	??_7dp88_AI_ChargedTurret_AnimationObserver@@6B@ ; dp88_AI_ChargedTurret_AnimationObserver::`vftable'
PUBLIC	??_7?$VectorClass@PAVdp88_AI_Objective@@@@6B@	; VectorClass<dp88_AI_Objective *>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@PAVdp88_AI_Objective@@@@6B@ ; DynamicVectorClass<dp88_AI_Objective *>::`vftable'
PUBLIC	?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
PUBLIC	??_7dp88_AI_Objective@@6B@			; dp88_AI_Objective::`vftable'
PUBLIC	??_C@_0HL@GDCLDGM@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Only?5@ ; `string'
PUBLIC	??_C@_0BC@NBNMMJKM@Priority_Infantry?$AA@	; `string'
PUBLIC	??_C@_0BH@FGCBALMH@Priority_Light_Vehicle?$AA@	; `string'
PUBLIC	??_C@_0BH@DDHEPMLK@Priority_Heavy_Vehicle?$AA@	; `string'
PUBLIC	??_C@_0O@NPEIAKIN@Priority_VTOL?$AA@		; `string'
PUBLIC	??_C@_0BC@BBDAOLBD@Priority_Building?$AA@	; `string'
PUBLIC	??_C@_0BC@DCBJBJAE@Modifier_Distance?$AA@	; `string'
PUBLIC	??_C@_0BH@EJDJNCFC@Modifier_Target_Damage?$AA@	; `string'
PUBLIC	??_C@_0BG@LCPGCHOK@Modifier_Target_Value?$AA@	; `string'
PUBLIC	??_C@_0BA@BLEJNMBJ@Weapon_Infantry?$AA@		; `string'
PUBLIC	??_C@_0BF@CDAMGONB@Weapon_Light_Vehicle?$AA@	; `string'
PUBLIC	??_C@_0BF@EGFJJJKM@Weapon_Heavy_Vehicle?$AA@	; `string'
PUBLIC	??_C@_0M@NIGAELBF@Weapon_VTOL?$AA@		; `string'
PUBLIC	??_C@_0BA@NLKFPOKG@Weapon_Building?$AA@		; `string'
PUBLIC	??_C@_0BB@CCIEHIDO@Min_Attack_Range?$AA@	; `string'
PUBLIC	??_C@_0BB@DHAPKMMM@Max_Attack_Range?$AA@	; `string'
PUBLIC	??_C@_0BL@EKEHGKIF@Min_Attack_Range_Secondary?$AA@ ; `string'
PUBLIC	??_C@_0BL@CMKCAMPB@Max_Attack_Range_Secondary?$AA@ ; `string'
PUBLIC	??_C@_0BA@GJMGCGII@Detects_Stealth?$AA@		; `string'
PUBLIC	??_C@_05GCIPIGEI@Debug?$AA@			; `string'
PUBLIC	??_C@_0N@KKGDDBPP@?$CFs_?$CFd_?$CFd?4log?$AA@	; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0CB@HOOENEEI@Calculating?5priority?5of?5?$CFd?5?$CI?$CFs?$CJ?6@ ; `string'
PUBLIC	??_C@_0CJ@KBAGLFIO@Target?5?$CFd?5is?5dead?5or?5unteamed?0?5i@ ; `string'
PUBLIC	??_C@_0DB@ELEJHPAH@Target?5?$CFd?5is?5an?5empty?0?5non?9AI?5ve@ ; `string'
PUBLIC	??_C@_0EE@JFOGFIIM@Target?5?$CFd?5is?5currently?5stealthed@ ; `string'
PUBLIC	??_C@_0CH@MLCAJKAC@?7Invalid?5target?5type?0?5priority?5i@ ; `string'
PUBLIC	??_C@_0CL@KFFNFBIH@?7Base?5priority?5for?5this?5unit?5typ@ ; `string'
PUBLIC	??_C@_0EP@MPEMHLEK@?7Target?5Value?5Modifier?3?5Adding?5?$CF@ ; `string'
PUBLIC	??_C@_0GB@JBNDDAJJ@?7Target?5Damage?5Modifier?3?5Adding?5@ ; `string'
PUBLIC	??_C@_0GA@GAACONDP@?7Distance?5Modifier?3?5Subtracting?5@ ; `string'
PUBLIC	??_C@_0BH@DODFLDLH@?7Final?5Priority?3?5?$CF?44f?6?$AA@ ; `string'
PUBLIC	??_C@_0DC@IMIMFLLN@?7Adjusting?5final?5priority?5to?50?40@ ; `string'
PUBLIC	??_C@_0BI@CAAFFJKG@dp88_AI_Marker_Building?$AA@	; `string'
PUBLIC	??_C@_0CB@HDJOKPNM@JFW_Deployable_Aircraft_Deployed@ ; `string'
PUBLIC	??_C@_0M@JENJFJLB@MS_Paradrop?$AA@		; `string'
PUBLIC	??_C@_0BB@IILHOKGK@dp88_AR_Paradrop?$AA@	; `string'
PUBLIC	??_C@_0BM@OHLJBOHK@dp88_AI_Marker_HeavyVehicle?$AA@ ; `string'
PUBLIC	??_C@_0BL@MGGLMLEA@dp88_AI_heavyVehicleMarker?$AA@ ; `string'
PUBLIC	??_C@_0BK@BMNLCPDP@dp88_AI_Marker_Repairable?$AA@ ; `string'
PUBLIC	??_C@_0FB@EBLHHLPH@?$FL?$CFd?3?$CFhs?3?$CFhs?$FN?5This?5script?5is?5depr@ ; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_0BC@MGDIDNJB@Pathfind_Distance?$AA@	; `string'
PUBLIC	??_C@_0GO@GNPKALOE@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Vehic@ ; `string'
PUBLIC	??_C@_0BH@LLMPFMHL@Preferred_Attack_Range?$AA@	; `string'
PUBLIC	??_C@_0CB@ODGOJIJK@Preferred_Attack_Range_Secondary@ ; `string'
PUBLIC	??_7?$VectorClass@H@@6B@			; VectorClass<int>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@H@@6B@			; DynamicVectorClass<int>::`vftable'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@6B@ ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`vftable'
PUBLIC	?dp88_AI_Tank_Offensive_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@A ; dp88_AI_Tank_Offensive_Registrant
PUBLIC	??_C@_0CFI@PPMHEDDD@Priority_Infantry?$DN1?40?3float?0Weap@ ; `string'
PUBLIC	??_C@_0BH@JDEODPME@dp88_AI_Tank_Offensive?$AA@	; `string'
PUBLIC	??_C@_0P@FHEEEPDF@Requires_Power?$AA@		; `string'
PUBLIC	??_C@_0BA@IHFBNEGA@Splash_Infantry?$AA@		; `string'
PUBLIC	??_C@_0BI@JKCMNHEG@Seen?5an?5enemy?3?5?$CFd?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0DO@JIOBFADF@Enemy?5is?5current?5target?0?5last?5se@ ; `string'
PUBLIC	??_C@_0CI@NEFPOHNA@Unable?5to?5attack?0?5no?5power?5avail@ ; `string'
PUBLIC	??_C@_07CJDBHDIN@primary?$AA@			; `string'
PUBLIC	??_C@_09EADLKHON@secondary?$AA@			; `string'
PUBLIC	??_C@_0CD@IIDFODBG@Using?5?$CFs?5fire?5on?5this?5target?5typ@ ; `string'
PUBLIC	??_C@_0CH@FPJDMGFB@Unable?5to?5attack?0?5target?5out?5of?5@ ; `string'
PUBLIC	??_C@_0DF@PHMMCDIA@No?5current?5target?5to?5compare?5wit@ ; `string'
PUBLIC	??_C@_0EG@BOFCEBL@New?5enemy?5has?5a?5higher?5priority?5@ ; `string'
PUBLIC	??_C@_0CJ@OOKLKKBM@Using?5splash?5damage?5against?5this@ ; `string'
PUBLIC	??_C@_0FK@GPLKDLHA@Current?5target?5has?5a?5higher?5prio@ ; `string'
PUBLIC	??_C@_0CM@MGDFLFMJ@Target?5?$CFd?5no?5longer?5valid?0?5ceasi@ ; `string'
PUBLIC	??_C@_0EA@MAAJCEDB@Target?5is?5too?5close?5to?5attack?5?$CId@ ; `string'
PUBLIC	??_C@_0ED@NHCIAICJ@Target?5is?5too?5far?5away?5to?5attack@ ; `string'
PUBLIC	??_C@_0P@DACGJHIB@Spotter_Preset?$AA@		; `string'
PUBLIC	??_C@_05HBJPNAAK@Blamo?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BM@GAGONNPO@dp88_AI_PopupTurret_Spotter?$AA@ ; `string'
PUBLIC	??_C@_0BI@MKDFJGMB@Deploy_Animation_Frames?$AA@	; `string'
PUBLIC	??_C@_0BB@HBCJANPM@Deploy_Animation?$AA@	; `string'
PUBLIC	??_C@_0P@MDDEPNOL@Deploy_Timeout?$AA@		; `string'
PUBLIC	??_C@_0N@GDKODACH@Deploy_Sound?$AA@		; `string'
PUBLIC	??_C@_03EEDMAPME@tId?$AA@			; `string'
PUBLIC	??_C@_0BA@IPCHLLAK@Animation_Model?$AA@		; `string'
PUBLIC	??_C@_0BB@NHJNEILC@Invisible_Object?$AA@	; `string'
PUBLIC	??_C@_0BF@OHLHCKEN@Animation_Model_Bone?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_AI_ChargedTurret::Init'::`2'::__LINE__Var
PUBLIC	??_C@_0BM@DBHCJMNG@dp88_AI_ChargedTurret?3?3Init?$AA@ ; `string'
PUBLIC	??_C@_0DL@GOAALILL@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HG@IMPPFMMJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_09ONEINPNJ@Animation?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_AI_ChargedTurret::Destroyed'::`2'::__LINE__Var
PUBLIC	??_C@_0CB@POOJFDMP@dp88_AI_ChargedTurret?3?3Destroyed@ ; `string'
PUBLIC	??_C@_0BL@CEGLFJCP@Animation_Charge_End_Frame?$AA@ ; `string'
PUBLIC	??_C@_0BN@HMDMOGPC@Animation_Charge_Start_Frame?$AA@ ; `string'
PUBLIC	??_C@_0N@EGKBBLLN@Charge_Sound?$AA@		; `string'
PUBLIC	??_C@_0BJ@DJIDONGK@Animation_Idle_End_Frame?$AA@ ; `string'
PUBLIC	??_C@_0BL@DNDODHMP@Animation_Idle_Start_Frame?$AA@ ; `string'
PUBLIC	??_C@_0BO@FOANNFDJ@Animation_Unpowered_End_Frame?$AA@ ; `string'
PUBLIC	??_C@_0CA@IEKKOGEI@Animation_Unpowered_Start_Frame?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@6B@ ; ScriptRegistrant<dp88_AI_ChargedTurret>::`vftable'
PUBLIC	?dp88_AI_ChargedTurret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@A ; dp88_AI_ChargedTurret_Registrant
PUBLIC	??_C@_0DAO@GPFAKAHL@Priority_Infantry?$DN1?40?3float?0Weap@ ; `string'
PUBLIC	??_C@_0BG@GNKJMIEN@dp88_AI_ChargedTurret?$AA@	; `string'
PUBLIC	??_C@_0CI@BKNNHEAE@dp88_AI_ChargedTurret_AnimationO@ ; `string'
PUBLIC	??_C@_04KOACHJEN@Type?$AA@			; `string'
PUBLIC	??_C@_05CFMCGLCK@Range?$AA@			; `string'
PUBLIC	??_C@_04GBPANCCF@Team?$AA@			; `string'
PUBLIC	??_C@_09DJDKAPII@Debug_Tag?$AA@			; `string'
PUBLIC	??_C@_06GJACHIKM@No?5Tag?$AA@			; `string'
PUBLIC	??_C@_0BB@OMDDOPID@Priority_Soldier?$AA@	; `string'
PUBLIC	??_C@_0BC@NCMONDLE@Priority_Aircraft?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_Objective@@@@6B@ ; ScriptRegistrant<dp88_AI_Objective>::`vftable'
PUBLIC	?dp88_AI_Objective_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Objective@@@@A ; dp88_AI_Objective_Registrant
PUBLIC	??_C@_0JL@PCLPMECL@Team?3int?0Type?$DN1?3int?0Range?$DN25?3int@ ; `string'
PUBLIC	??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@6B@ ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`vftable'
PUBLIC	?dp88_AI_heavyVehicleMarker_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@A ; dp88_AI_heavyVehicleMarker_Registrant
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_Building>::`vftable'
PUBLIC	?dp88_AI_Marker_Building_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@A ; dp88_AI_Marker_Building_Registrant
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`vftable'
PUBLIC	?dp88_AI_Marker_HeavyVehicle_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@A ; dp88_AI_Marker_HeavyVehicle_Registrant
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`vftable'
PUBLIC	?dp88_AI_Marker_Repairable_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@A ; dp88_AI_Marker_Repairable_Registrant
PUBLIC	??_C@_0BM@EFFHBFKH@Pathfind_Distance?$DN5?40?3float?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_Turret@@@@6B@	; ScriptRegistrant<dp88_AI_Turret>::`vftable'
PUBLIC	?dp88_AI_Turret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Turret@@@@A ; dp88_AI_Turret_Registrant
PUBLIC	??_C@_0BPE@NMPEDIOA@Priority_Infantry?$DN1?40?3float?0Weap@ ; `string'
PUBLIC	??_C@_0P@OKEJDPHI@dp88_AI_Turret?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@6B@ ; ScriptRegistrant<dp88_AI_PopupTurret>::`vftable'
PUBLIC	?dp88_AI_PopupTurret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@A ; dp88_AI_PopupTurret_Registrant
PUBLIC	??_C@_0CGF@IAJMADCM@Priority_Infantry?$DN1?40?3float?0Weap@ ; `string'
PUBLIC	??_C@_0BE@HCJJAADE@dp88_AI_PopupTurret?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@6B@ ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`vftable'
PUBLIC	?dp88_AI_PopupTurret_Spotter_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@A ; dp88_AI_PopupTurret_Spotter_Registrant
PUBLIC	??_C@_07FEJEIAGM@tId?3int?$AA@			; `string'
PUBLIC	??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0CK@KOHPOAIM@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@ ; `string'
PUBLIC	??_C@_0CJ@OFHADDID@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@ ; `string'
PUBLIC	??_C@_0CP@EIKABCDJ@VectorClass?$DMclass?5dp88_AI_Object@ ; `string'
PUBLIC	??_C@_0CO@FJNOIHMM@VectorClass?$DMclass?5dp88_AI_Object@ ; `string'
PUBLIC	??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@ ; `string'
PUBLIC	??_C@_0BI@DBAHDKIN@VectorClass?$DMint?$DO?3?3Clear?$AA@ ; `string'
PUBLIC	??_C@_0DH@IMHIKNGJ@ScriptRegistrant?$DMclass?5dp88_AI_T@ ; `string'
PUBLIC	??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0DG@PMGLKLPB@ScriptRegistrant?$DMclass?5dp88_AI_C@ ; `string'
PUBLIC	??_C@_0DC@DKOMIJBP@ScriptRegistrant?$DMclass?5dp88_AI_O@ ; `string'
PUBLIC	??_C@_0DL@BBKKKCKG@ScriptRegistrant?$DMclass?5dp88_AI_h@ ; `string'
PUBLIC	??_C@_0DI@JJEMAEDL@ScriptRegistrant?$DMclass?5dp88_AI_M@ ; `string'
PUBLIC	??_C@_0DM@EMNGOKNL@ScriptRegistrant?$DMclass?5dp88_AI_M@ ; `string'
PUBLIC	??_C@_0DK@PAAIFCON@ScriptRegistrant?$DMclass?5dp88_AI_M@ ; `string'
PUBLIC	??_C@_0CP@JIIGOIBL@ScriptRegistrant?$DMclass?5dp88_AI_T@ ; `string'
PUBLIC	??_C@_0DE@PMCKICJG@ScriptRegistrant?$DMclass?5dp88_AI_P@ ; `string'
PUBLIC	??_C@_0DM@OOJHOCOH@ScriptRegistrant?$DMclass?5dp88_AI_P@ ; `string'
PUBLIC	??_C@_0CP@CGHEKOML@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@ ; `string'
PUBLIC	??_C@_0DE@FMMNNBOE@VectorClass?$DMclass?5dp88_AI_Object@ ; `string'
PUBLIC	??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@ ; `string'
PUBLIC	??_C@_0BN@BIKGHIDO@VectorClass?$DMint?$DO?3?3operator?5?$DN?$AA@ ; `string'
PUBLIC	?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
PUBLIC	??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51 ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`local static guard'
PUBLIC	??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@ ; `string'
PUBLIC	??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ ; `string'
PUBLIC	??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@ ; `string'
PUBLIC	??_R4ScriptFactory@@6B@				; ScriptFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptFactory@@@8			; ScriptFactory `RTTI Type Descriptor'
PUBLIC	??_R3ScriptFactory@@8				; ScriptFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptFactory@@8				; ScriptFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptFactory@@8			; ScriptFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ScriptClass@@6B@				; ScriptClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptClass@@@8				; ScriptClass `RTTI Type Descriptor'
PUBLIC	??_R3ScriptClass@@8				; ScriptClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptClass@@8				; ScriptClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptClass@@8			; ScriptClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@GameObjObserverClass@@8		; GameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGameObjObserverClass@@@8		; GameObjObserverClass `RTTI Type Descriptor'
PUBLIC	??_R3GameObjObserverClass@@8			; GameObjObserverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GameObjObserverClass@@8			; GameObjObserverClass::`RTTI Base Class Array'
PUBLIC	??_R4GameObjObserverClass@@6B@			; GameObjObserverClass::`RTTI Complete Object Locator'
PUBLIC	??_R4ScriptImpClass@@6B@			; ScriptImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptImpClass@@@8			; ScriptImpClass `RTTI Type Descriptor'
PUBLIC	??_R3ScriptImpClass@@8				; ScriptImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptImpClass@@8				; ScriptImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptImpClass@@8			; ScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INIClass@@6B@				; INIClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVINIClass@@@8				; INIClass `RTTI Type Descriptor'
PUBLIC	??_R3INIClass@@8				; INIClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INIClass@@8				; INIClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INIClass@@8			; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@PostLoadableClass@@8		; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPostLoadableClass@@@8			; PostLoadableClass `RTTI Type Descriptor'
PUBLIC	??_R3PostLoadableClass@@8			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PostLoadableClass@@8			; PostLoadableClass::`RTTI Base Class Array'
PUBLIC	??_R4PostLoadableClass@@6B@			; PostLoadableClass::`RTTI Complete Object Locator'
PUBLIC	??_R4ReferencerClass@@6B@			; ReferencerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReferencerClass@@@8			; ReferencerClass `RTTI Type Descriptor'
PUBLIC	??_R3ReferencerClass@@8				; ReferencerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ReferencerClass@@8				; ReferencerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ReferencerClass@@8		; ReferencerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@H@@6B@		; DynamicVectorClass<int>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@H@@@8		; DynamicVectorClass<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@H@@8			; DynamicVectorClass<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@H@@8			; DynamicVectorClass<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@H@@8		; DynamicVectorClass<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@H@@8		; VectorClass<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@H@@@8			; VectorClass<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@H@@8				; VectorClass<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@H@@8				; VectorClass<int>::`RTTI Base Class Array'
PUBLIC	??_R4JFW_Key_Hook_Base@@6B@			; JFW_Key_Hook_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVJFW_Key_Hook_Base@@@8			; JFW_Key_Hook_Base `RTTI Type Descriptor'
PUBLIC	??_R3JFW_Key_Hook_Base@@8			; JFW_Key_Hook_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2JFW_Key_Hook_Base@@8			; JFW_Key_Hook_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@JFW_Key_Hook_Base@@8		; JFW_Key_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MultiKeyHookScriptImpClass@@6B@		; MultiKeyHookScriptImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMultiKeyHookScriptImpClass@@@8		; MultiKeyHookScriptImpClass `RTTI Type Descriptor'
PUBLIC	??_R3MultiKeyHookScriptImpClass@@8		; MultiKeyHookScriptImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MultiKeyHookScriptImpClass@@8		; MultiKeyHookScriptImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8	; MultiKeyHookScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct> `RTTI Type Descriptor'
PUBLIC	??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4JFW_Object_Created_Hook_Base@@6B@		; JFW_Object_Created_Hook_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVJFW_Object_Created_Hook_Base@@@8	; JFW_Object_Created_Hook_Base `RTTI Type Descriptor'
PUBLIC	??_R3JFW_Object_Created_Hook_Base@@8		; JFW_Object_Created_Hook_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2JFW_Object_Created_Hook_Base@@8		; JFW_Object_Created_Hook_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8	; JFW_Object_Created_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ObserverImpClass@@6B@			; ObserverImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObserverImpClass@@@8			; ObserverImpClass `RTTI Type Descriptor'
PUBLIC	??_R3ObserverImpClass@@8			; ObserverImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObserverImpClass@@8			; ObserverImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObserverImpClass@@8		; ObserverImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_Objective@@6B@			; dp88_AI_Objective::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_Objective@@@8			; dp88_AI_Objective `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_Objective@@8			; dp88_AI_Objective::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_Objective@@8			; dp88_AI_Objective::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_Objective@@8		; dp88_AI_Objective::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_ChargedTurret_AnimationObserver@@6B@ ; dp88_AI_ChargedTurret_AnimationObserver::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_ChargedTurret_AnimationObserver@@@8 ; dp88_AI_ChargedTurret_AnimationObserver `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_ChargedTurret_AnimationObserver@@8	; dp88_AI_ChargedTurret_AnimationObserver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_ChargedTurret_AnimationObserver@@8	; dp88_AI_ChargedTurret_AnimationObserver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_ChargedTurret_AnimationObserver@@8 ; dp88_AI_ChargedTurret_AnimationObserver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_customAI@@6B@				; dp88_customAI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_customAI@@@8			; dp88_customAI `RTTI Type Descriptor'
PUBLIC	??_R3dp88_customAI@@8				; dp88_customAI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_customAI@@8				; dp88_customAI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_customAI@@8			; dp88_customAI::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_heavyVehicleMarker@@6B@		; dp88_AI_heavyVehicleMarker::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_heavyVehicleMarker@@@8		; dp88_AI_heavyVehicleMarker `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_heavyVehicleMarker@@8		; dp88_AI_heavyVehicleMarker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_heavyVehicleMarker@@8		; dp88_AI_heavyVehicleMarker::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_heavyVehicleMarker@@8	; dp88_AI_heavyVehicleMarker::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_Marker_Building@@6B@		; dp88_AI_Marker_Building::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_Marker_Building@@@8		; dp88_AI_Marker_Building `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_Marker_Building@@8			; dp88_AI_Marker_Building::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_Marker_Building@@8			; dp88_AI_Marker_Building::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_Marker_Building@@8	; dp88_AI_Marker_Building::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_Marker_HeavyVehicle@@6B@		; dp88_AI_Marker_HeavyVehicle::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_Marker_HeavyVehicle@@@8		; dp88_AI_Marker_HeavyVehicle `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_Marker_HeavyVehicle@@8		; dp88_AI_Marker_HeavyVehicle::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_Marker_HeavyVehicle@@8		; dp88_AI_Marker_HeavyVehicle::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_Marker_HeavyVehicle@@8	; dp88_AI_Marker_HeavyVehicle::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_Marker_Repairable@@6B@		; dp88_AI_Marker_Repairable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_Marker_Repairable@@@8		; dp88_AI_Marker_Repairable `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_Marker_Repairable@@8		; dp88_AI_Marker_Repairable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_Marker_Repairable@@8		; dp88_AI_Marker_Repairable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_Marker_Repairable@@8	; dp88_AI_Marker_Repairable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_Unit@@6B@				; dp88_AI_Unit::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_Unit@@@8			; dp88_AI_Unit `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_Unit@@8				; dp88_AI_Unit::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_Unit@@8				; dp88_AI_Unit::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_Unit@@8			; dp88_AI_Unit::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@PAVdp88_AI_Unit@@@@6B@ ; DynamicVectorClass<dp88_AI_Unit *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Unit@@@@@8 ; DynamicVectorClass<dp88_AI_Unit *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8	; DynamicVectorClass<dp88_AI_Unit *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8	; DynamicVectorClass<dp88_AI_Unit *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8 ; DynamicVectorClass<dp88_AI_Unit *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Unit@@@@8 ; VectorClass<dp88_AI_Unit *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAVdp88_AI_Unit@@@@@8	; VectorClass<dp88_AI_Unit *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAVdp88_AI_Unit@@@@8		; VectorClass<dp88_AI_Unit *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAVdp88_AI_Unit@@@@8		; VectorClass<dp88_AI_Unit *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAVdp88_AI_Unit@@@@6B@	; VectorClass<dp88_AI_Unit *>::`RTTI Complete Object Locator'
PUBLIC	??_R4dp88_AI_Tank_Offensive@@6B@		; dp88_AI_Tank_Offensive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_Tank_Offensive@@@8		; dp88_AI_Tank_Offensive `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_Tank_Offensive@@8			; dp88_AI_Tank_Offensive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_Tank_Offensive@@8			; dp88_AI_Tank_Offensive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_Tank_Offensive@@8		; dp88_AI_Tank_Offensive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_Turret@@6B@			; dp88_AI_Turret::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_Turret@@@8			; dp88_AI_Turret `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_Turret@@8				; dp88_AI_Turret::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_Turret@@8				; dp88_AI_Turret::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_Turret@@8			; dp88_AI_Turret::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_PopupTurret@@6B@			; dp88_AI_PopupTurret::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_PopupTurret@@@8			; dp88_AI_PopupTurret `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_PopupTurret@@8			; dp88_AI_PopupTurret::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_PopupTurret@@8			; dp88_AI_PopupTurret::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_PopupTurret@@8		; dp88_AI_PopupTurret::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_PopupTurret_Spotter@@6B@		; dp88_AI_PopupTurret_Spotter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_PopupTurret_Spotter@@@8		; dp88_AI_PopupTurret_Spotter `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_PopupTurret_Spotter@@8		; dp88_AI_PopupTurret_Spotter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_PopupTurret_Spotter@@8		; dp88_AI_PopupTurret_Spotter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_PopupTurret_Spotter@@8	; dp88_AI_PopupTurret_Spotter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_AI_ChargedTurret@@6B@			; dp88_AI_ChargedTurret::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_AI_ChargedTurret@@@8		; dp88_AI_ChargedTurret `RTTI Type Descriptor'
PUBLIC	??_R3dp88_AI_ChargedTurret@@8			; dp88_AI_ChargedTurret::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_AI_ChargedTurret@@8			; dp88_AI_ChargedTurret::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8		; dp88_AI_ChargedTurret::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@PAVdp88_AI_Objective@@@@6B@ ; DynamicVectorClass<dp88_AI_Objective *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Objective@@@@@8 ; DynamicVectorClass<dp88_AI_Objective *> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8 ; DynamicVectorClass<dp88_AI_Objective *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8 ; DynamicVectorClass<dp88_AI_Objective *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8 ; DynamicVectorClass<dp88_AI_Objective *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Objective@@@@8 ; VectorClass<dp88_AI_Objective *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@PAVdp88_AI_Objective@@@@@8 ; VectorClass<dp88_AI_Objective *> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@PAVdp88_AI_Objective@@@@8	; VectorClass<dp88_AI_Objective *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@PAVdp88_AI_Objective@@@@8	; VectorClass<dp88_AI_Objective *>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@PAVdp88_AI_Objective@@@@6B@	; VectorClass<dp88_AI_Objective *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$VectorClass@H@@6B@			; VectorClass<int>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@6B@ ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@@8 ; ScriptRegistrant<dp88_AI_Tank_Offensive> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8 ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8 ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8 ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@6B@ ; ScriptRegistrant<dp88_AI_ChargedTurret>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@@8 ; ScriptRegistrant<dp88_AI_ChargedTurret> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8 ; ScriptRegistrant<dp88_AI_ChargedTurret>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8 ; ScriptRegistrant<dp88_AI_ChargedTurret>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8 ; ScriptRegistrant<dp88_AI_ChargedTurret>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_Objective@@@@6B@ ; ScriptRegistrant<dp88_AI_Objective>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_Objective@@@@@8 ; ScriptRegistrant<dp88_AI_Objective> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_Objective@@@@8	; ScriptRegistrant<dp88_AI_Objective>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_Objective@@@@8	; ScriptRegistrant<dp88_AI_Objective>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Objective@@@@8 ; ScriptRegistrant<dp88_AI_Objective>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@6B@ ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@@8 ; ScriptRegistrant<dp88_AI_heavyVehicleMarker> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8 ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8 ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8 ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_Building>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Building> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Building>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Building>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Building>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@@8 ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8 ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8 ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8 ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Repairable> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_Turret@@@@6B@	; ScriptRegistrant<dp88_AI_Turret>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_Turret@@@@@8 ; ScriptRegistrant<dp88_AI_Turret> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_Turret@@@@8	; ScriptRegistrant<dp88_AI_Turret>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_Turret@@@@8	; ScriptRegistrant<dp88_AI_Turret>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Turret@@@@8 ; ScriptRegistrant<dp88_AI_Turret>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@6B@ ; ScriptRegistrant<dp88_AI_PopupTurret>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@6B@ ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@02081cea
PUBLIC	__real@38d1b717
PUBLIC	__real@3f79999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@42a00000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@42ca0000
PUBLIC	__real@437f0000
PUBLIC	__real@44000000
PUBLIC	__real@44800000
PUBLIC	__real@7f7fffff
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___wassert:PROC
EXTRN	__imp__atof:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__atoi:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__sprintf_s:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp___time64:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	?Random_Float@WWMath@@SAMXZ:PROC		; WWMath::Random_Float
EXTRN	??0ScriptImpClass@@QAE@XZ:PROC			; ScriptImpClass::ScriptImpClass
EXTRN	??1ScriptImpClass@@UAE@XZ:PROC			; ScriptImpClass::~ScriptImpClass
EXTRN	?Get_Name@ScriptImpClass@@UAEPBDXZ:PROC		; ScriptImpClass::Get_Name
EXTRN	?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z:PROC ; ScriptImpClass::Set_Parameters_String
EXTRN	?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z:PROC ; ScriptImpClass::Get_Parameters_String
EXTRN	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z:PROC	; ScriptImpClass::Get_Parameter
EXTRN	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z:PROC	; ScriptImpClass::Get_Parameter
EXTRN	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z:PROC ; ScriptImpClass::Get_Int_Parameter
EXTRN	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z:PROC ; ScriptImpClass::Get_Float_Parameter
EXTRN	?Destroy_Script@ScriptImpClass@@QAEXXZ:PROC	; ScriptImpClass::Destroy_Script
EXTRN	?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z:PROC ; ScriptImpClass::Attach
EXTRN	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z:PROC ; ScriptImpClass::Detach
EXTRN	?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z:PROC ; ScriptImpClass::Save
EXTRN	?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z:PROC ; ScriptImpClass::Load
EXTRN	??1ScriptFactory@@UAE@XZ:PROC			; ScriptFactory::~ScriptFactory
EXTRN	??0ScriptFactory@@IAE@PBD0@Z:PROC		; ScriptFactory::ScriptFactory
EXTRN	?Console_Output@@YAXPBDZZ:PROC			; Console_Output
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	__imp_?Format@StringClass@@QAAHPBDZZ:PROC
EXTRN	__imp_?Get_String@StringClass@@AAEXH_N@Z:PROC
EXTRN	__imp_?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC
EXTRN	__imp_?Free_String@StringClass@@AAEXXZ:PROC
EXTRN	__imp_?Free_String@WideStringClass@@AAEXXZ:PROC
EXTRN	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z:PROC ; INIClass::Find_Entry
EXTRN	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z:PROC ; INIClass::Find_Section
EXTRN	??1INIClass@@UAE@XZ:PROC			; INIClass::~INIClass
EXTRN	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z:PROC ; Matrix3D::Set
EXTRN	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z:PROC ; Matrix3D::Set
EXTRN	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Object_Type
EXTRN	?Get_Current_Bullets@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Current_Bullets
EXTRN	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z:PROC ; Get_Vehicle
EXTRN	?Get_Fly_Mode@@YA_NPAVScriptableGameObj@@@Z:PROC ; Get_Fly_Mode
EXTRN	?Get_Vehicle_Mode@@YAIPAVScriptableGameObj@@@Z:PROC ; Get_Vehicle_Mode
EXTRN	?Set@Matrix3@@QAEXABVQuaternion@@@Z:PROC	; Matrix3::Set
EXTRN	??1ReferencerClass@@UAE@XZ:PROC			; ReferencerClass::~ReferencerClass
EXTRN	?On_Post_Load@ReferencerClass@@UAEXXZ:PROC	; ReferencerClass::On_Post_Load
EXTRN	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z:PROC ; ReferencerClass::operator=
EXTRN	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ:PROC ; ReferencerClass::operator ScriptableGameObj *
EXTRN	?Add_Observer@ScriptableGameObj@@QAEXPAVGameObjObserverClass@@@Z:PROC ; ScriptableGameObj::Add_Observer
EXTRN	?Remove_Observer@ScriptableGameObj@@QAEXPAVGameObjObserverClass@@@Z:PROC ; ScriptableGameObj::Remove_Observer
EXTRN	?Set@LineSegClass@@QAEXABV1@ABVMatrix3D@@@Z:PROC ; LineSegClass::Set
EXTRN	?Is_Acting@ActionClass@@QAE_NXZ:PROC		; ActionClass::Is_Acting
EXTRN	?Is_Splash_Possible@SmartGameObj@@QAE_NPAVPhysicalGameObj@@@Z:PROC ; SmartGameObj::Is_Splash_Possible
EXTRN	?Is_Stealthed@SmartGameObj@@QBE_NXZ:PROC	; SmartGameObj::Is_Stealthed
EXTRN	?Is_Base_Powered@@YA_NH@Z:PROC			; Is_Base_Powered
EXTRN	?Get_Team_Cost@@YAIHI@Z:PROC			; Get_Team_Cost
EXTRN	?Set_Skin@@YAXPAVScriptableGameObj@@PBD@Z:PROC	; Set_Skin
EXTRN	?Get_Model@@YAPBDPAVScriptableGameObj@@@Z:PROC	; Get_Model
EXTRN	?Get_Animation_Frame@@YAMPAVScriptableGameObj@@@Z:PROC ; Get_Animation_Frame
EXTRN	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z:PROC ; Is_Script_Attached
EXTRN	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z:PROC ; Find_Script_On_Object
EXTRN	?Attach_Script_V@@YAXPAVScriptableGameObj@@PBD1ZZ:PROC ; Attach_Script_V
EXTRN	?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::Detach
EXTRN	?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::Destroyed
EXTRN	??1JFW_Key_Hook_Base@@UAE@XZ:PROC		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
EXTRN	?Detach@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z:PROC ; MultiKeyHookScriptImpClass::Detach
EXTRN	?Destroyed@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z:PROC ; MultiKeyHookScriptImpClass::Destroyed
EXTRN	??_E?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z:PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vector deleting destructor'
EXTRN	?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Object_Created_Hook_Base::Detach
EXTRN	?Created@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Object_Created_Hook_Base::Created
EXTRN	??1JFW_Object_Created_Hook_Base@@UAE@XZ:PROC	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
EXTRN	??0LoopedAnimationController@@QAE@PAVScriptableGameObj@@@Z:PROC ; LoopedAnimationController::LoopedAnimationController
EXTRN	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z:PROC ; LoopedAnimationController::PlayAnimation
EXTRN	??_EObserverImpClass@@UAEPAXI@Z:PROC		; ObserverImpClass::`vector deleting destructor'
EXTRN	??_Edp88_customAI@@UAEPAXI@Z:PROC		; dp88_customAI::`vector deleting destructor'
EXTRN	??_Edp88_AI_heavyVehicleMarker@@UAEPAXI@Z:PROC	; dp88_AI_heavyVehicleMarker::`vector deleting destructor'
EXTRN	??_Edp88_AI_Marker_Building@@UAEPAXI@Z:PROC	; dp88_AI_Marker_Building::`vector deleting destructor'
EXTRN	??_Edp88_AI_Marker_HeavyVehicle@@UAEPAXI@Z:PROC	; dp88_AI_Marker_HeavyVehicle::`vector deleting destructor'
EXTRN	??_Edp88_AI_Marker_Repairable@@UAEPAXI@Z:PROC	; dp88_AI_Marker_Repairable::`vector deleting destructor'
EXTRN	??_E?$VectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z:PROC ; VectorClass<dp88_AI_Unit *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<dp88_AI_Unit *>::`vector deleting destructor'
EXTRN	??_Edp88_AI_Unit@@UAEPAXI@Z:PROC		; dp88_AI_Unit::`vector deleting destructor'
EXTRN	??_Edp88_AI_Tank_Offensive@@UAEPAXI@Z:PROC	; dp88_AI_Tank_Offensive::`vector deleting destructor'
EXTRN	??_Edp88_AI_Turret@@UAEPAXI@Z:PROC		; dp88_AI_Turret::`vector deleting destructor'
EXTRN	??_Edp88_AI_PopupTurret@@UAEPAXI@Z:PROC		; dp88_AI_PopupTurret::`vector deleting destructor'
EXTRN	??_Edp88_AI_PopupTurret_Spotter@@UAEPAXI@Z:PROC	; dp88_AI_PopupTurret_Spotter::`vector deleting destructor'
EXTRN	??_Edp88_AI_ChargedTurret@@UAEPAXI@Z:PROC	; dp88_AI_ChargedTurret::`vector deleting destructor'
EXTRN	??_Edp88_AI_ChargedTurret_AnimationObserver@@UAEPAXI@Z:PROC ; dp88_AI_ChargedTurret_AnimationObserver::`vector deleting destructor'
EXTRN	??_E?$VectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z:PROC ; VectorClass<dp88_AI_Objective *>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<dp88_AI_Objective *>::`vector deleting destructor'
EXTRN	??_Edp88_AI_Objective@@UAEPAXI@Z:PROC		; dp88_AI_Objective::`vector deleting destructor'
EXTRN	?Get_Definition@VehicleGameObj@@QBEABVVehicleGameObjDef@@XZ:PROC ; VehicleGameObj::Get_Definition
EXTRN	?Get_Occupant_Count@VehicleGameObj@@QAEHXZ:PROC	; VehicleGameObj::Get_Occupant_Count
EXTRN	??_E?$VectorClass@H@@UAEPAXI@Z:PROC		; VectorClass<int>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@H@@UAEPAXI@Z:PROC	; DynamicVectorClass<int>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_ChargedTurret>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_Objective>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_Marker_Building>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_Turret>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_PopupTurret>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`vector deleting destructor'
EXTRN	__CIatan2:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_asin_precise:PROC
EXTRN	__libm_sse2_atan_precise:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__libm_sse2_tan_precise:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	?Exe@@3HA:DWORD					; Exe
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAcosTable
EXTRN	?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAsinTable
EXTRN	?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastSinTable
EXTRN	?Commands@@3PAUScriptCommands@@A:DWORD		; Commands
EXTRN	__imp_?m_EmptyString@StringClass@@0AAPADA:DWORD
EXTRN	__imp_?m_NullChar@StringClass@@0AADA:DWORD
EXTRN	?Set_Current_Bullets@@3P6AXPAVScriptableGameObj@@H@ZA:DWORD ; Set_Current_Bullets
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A DB 018H DUP (?) ; dp88_AI_Unit::ListOfAIUnits
?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A DB 018H DUP (?) ; dp88_AI_Objective::Objectives
?dp88_AI_Tank_Offensive_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@A DB 010H DUP (?) ; dp88_AI_Tank_Offensive_Registrant
?dp88_AI_ChargedTurret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@A DB 010H DUP (?) ; dp88_AI_ChargedTurret_Registrant
?dp88_AI_Objective_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Objective@@@@A DB 010H DUP (?) ; dp88_AI_Objective_Registrant
?dp88_AI_heavyVehicleMarker_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@A DB 010H DUP (?) ; dp88_AI_heavyVehicleMarker_Registrant
?dp88_AI_Marker_Building_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@A DB 010H DUP (?) ; dp88_AI_Marker_Building_Registrant
?dp88_AI_Marker_HeavyVehicle_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@A DB 010H DUP (?) ; dp88_AI_Marker_HeavyVehicle_Registrant
?dp88_AI_Marker_Repairable_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@A DB 010H DUP (?) ; dp88_AI_Marker_Repairable_Registrant
?dp88_AI_Turret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Turret@@@@A DB 010H DUP (?) ; dp88_AI_Turret_Registrant
?dp88_AI_PopupTurret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@A DB 010H DUP (?) ; dp88_AI_PopupTurret_Registrant
?dp88_AI_PopupTurret_Spotter_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@A DB 010H DUP (?) ; dp88_AI_PopupTurret_Spotter_Registrant
_BSS	ENDS
;	COMDAT ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A
_BSS	SEGMENT
?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A DB 014H DUP (?) ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
_BSS	ENDS
;	COMDAT ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
_BSS	SEGMENT
??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51 DD 01H DUP (?) ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`local static guard'
_BSS	ENDS
CRT$XCU	SEGMENT
?ListOfAIUnits$initializer$@dp88_AI_Unit@@2P6AXXZA DD FLAT:??__E?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A@@YAXXZ ; dp88_AI_Unit::ListOfAIUnits$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42ca0000
CONST	SEGMENT
__real@42ca0000 DD 042ca0000r			; 101
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f79999a
CONST	SEGMENT
__real@3f79999a DD 03f79999ar			; 0.975
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@02081cea
CONST	SEGMENT
__real@02081cea DD 002081cear			; 1e-037
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8 DD 00H ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8 ; ScriptRegistrant<dp88_AI_PopupTurret>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8 DD 00H ; ScriptRegistrant<dp88_AI_PopupTurret>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_PopupTurret> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_PopupTurret>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Turret@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Turret@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Turret@@@@@8 ; ScriptRegistrant<dp88_AI_Turret>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Turret@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_Turret@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_Turret@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Turret@@@@8 ; ScriptRegistrant<dp88_AI_Turret>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_Turret@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_Turret@@@@8 DD 00H	; ScriptRegistrant<dp88_AI_Turret>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_Turret@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_Turret@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_Turret@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_Turret> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_Turret@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_Turret@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_Turret@@@@6B@ DD 00H	; ScriptRegistrant<dp88_AI_Turret>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Turret@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Turret@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8 DD 00H ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_Marker_Repairable> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@@8 ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8 ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8 DD 00H ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Building>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8 ; ScriptRegistrant<dp88_AI_Marker_Building>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8 DD 00H ; ScriptRegistrant<dp88_AI_Marker_Building>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_Marker_Building> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_Marker_Building>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@@8 ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8 ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8 DD 00H ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_heavyVehicleMarker> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Objective@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Objective@@@@@8 ; ScriptRegistrant<dp88_AI_Objective>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_Objective@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Objective@@@@8 ; ScriptRegistrant<dp88_AI_Objective>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_Objective@@@@8 DD 00H	; ScriptRegistrant<dp88_AI_Objective>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_Objective@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_Objective@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_Objective> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_Objective@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_Objective@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_Objective@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_Objective>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Objective@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@@8 ; ScriptRegistrant<dp88_AI_ChargedTurret>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8 ; ScriptRegistrant<dp88_AI_ChargedTurret>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8 DD 00H ; ScriptRegistrant<dp88_AI_ChargedTurret>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_ChargedTurret> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_ChargedTurret>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@@8 ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8 ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8 DD 00H ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_AI_Tank_Offensive> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@6B@ DD 00H ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@H@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@H@@6B@ DD 00H			; VectorClass<int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@H@@@8
	DD	FLAT:??_R3?$VectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAVdp88_AI_Objective@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAVdp88_AI_Objective@@@@6B@ DD 00H	; VectorClass<dp88_AI_Objective *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAVdp88_AI_Objective@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAVdp88_AI_Objective@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Objective@@@@8 ; VectorClass<dp88_AI_Objective *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAVdp88_AI_Objective@@@@8 DD 00H	; VectorClass<dp88_AI_Objective *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAVdp88_AI_Objective@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAVdp88_AI_Objective@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<dp88_AI_Objective *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAVdp88_AI_Objective@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Objective@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAVdp88_AI_Objective@@@@@8 ; VectorClass<dp88_AI_Objective *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Objective@@@@@8 ; DynamicVectorClass<dp88_AI_Objective *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8 ; DynamicVectorClass<dp88_AI_Objective *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8 DD 00H ; DynamicVectorClass<dp88_AI_Objective *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Objective@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Objective@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<dp88_AI_Objective *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAVdp88_AI_Objective@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAVdp88_AI_Objective@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAVdp88_AI_Objective@@@@6B@ DD 00H ; DynamicVectorClass<dp88_AI_Objective *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Objective@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAVdp88_AI_Objective@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8 DD FLAT:??_R0?AVdp88_AI_ChargedTurret@@@8 ; dp88_AI_ChargedTurret::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_ChargedTurret@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_ChargedTurret@@8
rdata$r	SEGMENT
??_R2dp88_AI_ChargedTurret@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_ChargedTurret@@8 ; dp88_AI_ChargedTurret::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_AI_Turret@@8
	DD	FLAT:??_R1A@?0A@EA@dp88_customAI@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_ChargedTurret@@8
rdata$r	SEGMENT
??_R3dp88_AI_ChargedTurret@@8 DD 00H			; dp88_AI_ChargedTurret::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2dp88_AI_ChargedTurret@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_ChargedTurret@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_ChargedTurret@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_ChargedTurret `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_ChargedTurret@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_ChargedTurret@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_ChargedTurret@@6B@ DD 00H			; dp88_AI_ChargedTurret::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_ChargedTurret@@@8
	DD	FLAT:??_R3dp88_AI_ChargedTurret@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_PopupTurret_Spotter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_PopupTurret_Spotter@@8 DD FLAT:??_R0?AVdp88_AI_PopupTurret_Spotter@@@8 ; dp88_AI_PopupTurret_Spotter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_PopupTurret_Spotter@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_PopupTurret_Spotter@@8
rdata$r	SEGMENT
??_R2dp88_AI_PopupTurret_Spotter@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_PopupTurret_Spotter@@8 ; dp88_AI_PopupTurret_Spotter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_PopupTurret_Spotter@@8
rdata$r	SEGMENT
??_R3dp88_AI_PopupTurret_Spotter@@8 DD 00H		; dp88_AI_PopupTurret_Spotter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AI_PopupTurret_Spotter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_PopupTurret_Spotter@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_PopupTurret_Spotter@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_PopupTurret_Spotter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_PopupTurret_Spotter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_PopupTurret_Spotter@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_PopupTurret_Spotter@@6B@ DD 00H		; dp88_AI_PopupTurret_Spotter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_PopupTurret_Spotter@@@8
	DD	FLAT:??_R3dp88_AI_PopupTurret_Spotter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_PopupTurret@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_PopupTurret@@8 DD FLAT:??_R0?AVdp88_AI_PopupTurret@@@8 ; dp88_AI_PopupTurret::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_PopupTurret@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_PopupTurret@@8
rdata$r	SEGMENT
??_R2dp88_AI_PopupTurret@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_PopupTurret@@8 ; dp88_AI_PopupTurret::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_AI_Turret@@8
	DD	FLAT:??_R1A@?0A@EA@dp88_customAI@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_PopupTurret@@8
rdata$r	SEGMENT
??_R3dp88_AI_PopupTurret@@8 DD 00H			; dp88_AI_PopupTurret::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2dp88_AI_PopupTurret@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_PopupTurret@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_PopupTurret@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_PopupTurret `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_PopupTurret@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_PopupTurret@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_PopupTurret@@6B@ DD 00H			; dp88_AI_PopupTurret::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_PopupTurret@@@8
	DD	FLAT:??_R3dp88_AI_PopupTurret@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_Turret@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_Turret@@8 DD FLAT:??_R0?AVdp88_AI_Turret@@@8 ; dp88_AI_Turret::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_Turret@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_Turret@@8
rdata$r	SEGMENT
??_R2dp88_AI_Turret@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_Turret@@8 ; dp88_AI_Turret::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_customAI@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_Turret@@8
rdata$r	SEGMENT
??_R3dp88_AI_Turret@@8 DD 00H				; dp88_AI_Turret::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2dp88_AI_Turret@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_Turret@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_Turret@@@8 DD FLAT:??_7type_info@@6B@	; dp88_AI_Turret `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_Turret@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_Turret@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_Turret@@6B@ DD 00H				; dp88_AI_Turret::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_Turret@@@8
	DD	FLAT:??_R3dp88_AI_Turret@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_Tank_Offensive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_Tank_Offensive@@8 DD FLAT:??_R0?AVdp88_AI_Tank_Offensive@@@8 ; dp88_AI_Tank_Offensive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_Tank_Offensive@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_Tank_Offensive@@8
rdata$r	SEGMENT
??_R2dp88_AI_Tank_Offensive@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_Tank_Offensive@@8 ; dp88_AI_Tank_Offensive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_AI_Unit@@8
	DD	FLAT:??_R1A@?0A@EA@dp88_customAI@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_Tank_Offensive@@8
rdata$r	SEGMENT
??_R3dp88_AI_Tank_Offensive@@8 DD 00H			; dp88_AI_Tank_Offensive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2dp88_AI_Tank_Offensive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_Tank_Offensive@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_Tank_Offensive@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_Tank_Offensive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_Tank_Offensive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_Tank_Offensive@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_Tank_Offensive@@6B@ DD 00H			; dp88_AI_Tank_Offensive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_Tank_Offensive@@@8
	DD	FLAT:??_R3dp88_AI_Tank_Offensive@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@PAVdp88_AI_Unit@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@PAVdp88_AI_Unit@@@@6B@ DD 00H	; VectorClass<dp88_AI_Unit *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@PAVdp88_AI_Unit@@@@@8
	DD	FLAT:??_R3?$VectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@PAVdp88_AI_Unit@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Unit@@@@8 ; VectorClass<dp88_AI_Unit *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@PAVdp88_AI_Unit@@@@8 DD 00H		; VectorClass<dp88_AI_Unit *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@PAVdp88_AI_Unit@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@PAVdp88_AI_Unit@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<dp88_AI_Unit *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@PAVdp88_AI_Unit@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Unit@@@@8 DD FLAT:??_R0?AV?$VectorClass@PAVdp88_AI_Unit@@@@@8 ; VectorClass<dp88_AI_Unit *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Unit@@@@@8 ; DynamicVectorClass<dp88_AI_Unit *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8 ; DynamicVectorClass<dp88_AI_Unit *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8 DD 00H	; DynamicVectorClass<dp88_AI_Unit *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Unit@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Unit@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<dp88_AI_Unit *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@PAVdp88_AI_Unit@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@PAVdp88_AI_Unit@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@PAVdp88_AI_Unit@@@@6B@ DD 00H	; DynamicVectorClass<dp88_AI_Unit *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@PAVdp88_AI_Unit@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@PAVdp88_AI_Unit@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_Unit@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_Unit@@8 DD FLAT:??_R0?AVdp88_AI_Unit@@@8 ; dp88_AI_Unit::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_Unit@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_Unit@@8
rdata$r	SEGMENT
??_R2dp88_AI_Unit@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_Unit@@8 ; dp88_AI_Unit::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@dp88_customAI@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_Unit@@8
rdata$r	SEGMENT
??_R3dp88_AI_Unit@@8 DD 00H				; dp88_AI_Unit::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2dp88_AI_Unit@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_Unit@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_Unit@@@8 DD FLAT:??_7type_info@@6B@	; dp88_AI_Unit `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_Unit@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_Unit@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_Unit@@6B@ DD 00H				; dp88_AI_Unit::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_Unit@@@8
	DD	FLAT:??_R3dp88_AI_Unit@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_Marker_Repairable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_Marker_Repairable@@8 DD FLAT:??_R0?AVdp88_AI_Marker_Repairable@@@8 ; dp88_AI_Marker_Repairable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_Marker_Repairable@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_Marker_Repairable@@8
rdata$r	SEGMENT
??_R2dp88_AI_Marker_Repairable@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_Marker_Repairable@@8 ; dp88_AI_Marker_Repairable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_Marker_Repairable@@8
rdata$r	SEGMENT
??_R3dp88_AI_Marker_Repairable@@8 DD 00H		; dp88_AI_Marker_Repairable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AI_Marker_Repairable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_Marker_Repairable@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_Marker_Repairable@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_Marker_Repairable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_Marker_Repairable@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_Marker_Repairable@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_Marker_Repairable@@6B@ DD 00H		; dp88_AI_Marker_Repairable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_Marker_Repairable@@@8
	DD	FLAT:??_R3dp88_AI_Marker_Repairable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_Marker_HeavyVehicle@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_Marker_HeavyVehicle@@8 DD FLAT:??_R0?AVdp88_AI_Marker_HeavyVehicle@@@8 ; dp88_AI_Marker_HeavyVehicle::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_Marker_HeavyVehicle@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_Marker_HeavyVehicle@@8
rdata$r	SEGMENT
??_R2dp88_AI_Marker_HeavyVehicle@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_Marker_HeavyVehicle@@8 ; dp88_AI_Marker_HeavyVehicle::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_Marker_HeavyVehicle@@8
rdata$r	SEGMENT
??_R3dp88_AI_Marker_HeavyVehicle@@8 DD 00H		; dp88_AI_Marker_HeavyVehicle::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AI_Marker_HeavyVehicle@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_Marker_HeavyVehicle@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_Marker_HeavyVehicle@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_Marker_HeavyVehicle `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_Marker_HeavyVehicle@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_Marker_HeavyVehicle@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_Marker_HeavyVehicle@@6B@ DD 00H		; dp88_AI_Marker_HeavyVehicle::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_Marker_HeavyVehicle@@@8
	DD	FLAT:??_R3dp88_AI_Marker_HeavyVehicle@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_Marker_Building@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_Marker_Building@@8 DD FLAT:??_R0?AVdp88_AI_Marker_Building@@@8 ; dp88_AI_Marker_Building::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_Marker_Building@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_Marker_Building@@8
rdata$r	SEGMENT
??_R2dp88_AI_Marker_Building@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_Marker_Building@@8 ; dp88_AI_Marker_Building::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_Marker_Building@@8
rdata$r	SEGMENT
??_R3dp88_AI_Marker_Building@@8 DD 00H			; dp88_AI_Marker_Building::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AI_Marker_Building@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_Marker_Building@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_Marker_Building@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_Marker_Building `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_Marker_Building@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_Marker_Building@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_Marker_Building@@6B@ DD 00H		; dp88_AI_Marker_Building::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_Marker_Building@@@8
	DD	FLAT:??_R3dp88_AI_Marker_Building@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_heavyVehicleMarker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_heavyVehicleMarker@@8 DD FLAT:??_R0?AVdp88_AI_heavyVehicleMarker@@@8 ; dp88_AI_heavyVehicleMarker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_heavyVehicleMarker@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_heavyVehicleMarker@@8
rdata$r	SEGMENT
??_R2dp88_AI_heavyVehicleMarker@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_heavyVehicleMarker@@8 ; dp88_AI_heavyVehicleMarker::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_heavyVehicleMarker@@8
rdata$r	SEGMENT
??_R3dp88_AI_heavyVehicleMarker@@8 DD 00H		; dp88_AI_heavyVehicleMarker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AI_heavyVehicleMarker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_heavyVehicleMarker@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_heavyVehicleMarker@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_heavyVehicleMarker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_heavyVehicleMarker@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_heavyVehicleMarker@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_heavyVehicleMarker@@6B@ DD 00H		; dp88_AI_heavyVehicleMarker::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_heavyVehicleMarker@@@8
	DD	FLAT:??_R3dp88_AI_heavyVehicleMarker@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_customAI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_customAI@@8 DD FLAT:??_R0?AVdp88_customAI@@@8 ; dp88_customAI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_customAI@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_customAI@@8
rdata$r	SEGMENT
??_R2dp88_customAI@@8 DD FLAT:??_R1A@?0A@EA@dp88_customAI@@8 ; dp88_customAI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_customAI@@8
rdata$r	SEGMENT
??_R3dp88_customAI@@8 DD 00H				; dp88_customAI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_customAI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_customAI@@@8
_DATA	SEGMENT
??_R0?AVdp88_customAI@@@8 DD FLAT:??_7type_info@@6B@	; dp88_customAI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_customAI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_customAI@@6B@
rdata$r	SEGMENT
??_R4dp88_customAI@@6B@ DD 00H				; dp88_customAI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_customAI@@@8
	DD	FLAT:??_R3dp88_customAI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_ChargedTurret_AnimationObserver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_ChargedTurret_AnimationObserver@@8 DD FLAT:??_R0?AVdp88_AI_ChargedTurret_AnimationObserver@@@8 ; dp88_AI_ChargedTurret_AnimationObserver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_ChargedTurret_AnimationObserver@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_ChargedTurret_AnimationObserver@@8
rdata$r	SEGMENT
??_R2dp88_AI_ChargedTurret_AnimationObserver@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_ChargedTurret_AnimationObserver@@8 ; dp88_AI_ChargedTurret_AnimationObserver::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ObserverImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_ChargedTurret_AnimationObserver@@8
rdata$r	SEGMENT
??_R3dp88_AI_ChargedTurret_AnimationObserver@@8 DD 00H	; dp88_AI_ChargedTurret_AnimationObserver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2dp88_AI_ChargedTurret_AnimationObserver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_ChargedTurret_AnimationObserver@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_ChargedTurret_AnimationObserver@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_ChargedTurret_AnimationObserver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_ChargedTurret_AnimationObserver@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_ChargedTurret_AnimationObserver@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_ChargedTurret_AnimationObserver@@6B@ DD 00H ; dp88_AI_ChargedTurret_AnimationObserver::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_ChargedTurret_AnimationObserver@@@8
	DD	FLAT:??_R3dp88_AI_ChargedTurret_AnimationObserver@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_AI_Objective@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_AI_Objective@@8 DD FLAT:??_R0?AVdp88_AI_Objective@@@8 ; dp88_AI_Objective::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_AI_Objective@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_AI_Objective@@8
rdata$r	SEGMENT
??_R2dp88_AI_Objective@@8 DD FLAT:??_R1A@?0A@EA@dp88_AI_Objective@@8 ; dp88_AI_Objective::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_AI_Objective@@8
rdata$r	SEGMENT
??_R3dp88_AI_Objective@@8 DD 00H			; dp88_AI_Objective::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_AI_Objective@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_AI_Objective@@@8
_DATA	SEGMENT
??_R0?AVdp88_AI_Objective@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_AI_Objective `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_AI_Objective@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_AI_Objective@@6B@
rdata$r	SEGMENT
??_R4dp88_AI_Objective@@6B@ DD 00H			; dp88_AI_Objective::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_AI_Objective@@@8
	DD	FLAT:??_R3dp88_AI_Objective@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ObserverImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObserverImpClass@@8 DD FLAT:??_R0?AVObserverImpClass@@@8 ; ObserverImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObserverImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ObserverImpClass@@8
rdata$r	SEGMENT
??_R2ObserverImpClass@@8 DD FLAT:??_R1A@?0A@EA@ObserverImpClass@@8 ; ObserverImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ObserverImpClass@@8
rdata$r	SEGMENT
??_R3ObserverImpClass@@8 DD 00H				; ObserverImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObserverImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObserverImpClass@@@8
_DATA	SEGMENT
??_R0?AVObserverImpClass@@@8 DD FLAT:??_7type_info@@6B@	; ObserverImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObserverImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObserverImpClass@@6B@
rdata$r	SEGMENT
??_R4ObserverImpClass@@6B@ DD 00H			; ObserverImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObserverImpClass@@@8
	DD	FLAT:??_R3ObserverImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8 DD FLAT:??_R0?AVJFW_Object_Created_Hook_Base@@@8 ; JFW_Object_Created_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R2JFW_Object_Created_Hook_Base@@8 DD FLAT:??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8 ; JFW_Object_Created_Hook_Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R3JFW_Object_Created_Hook_Base@@8 DD 00H		; JFW_Object_Created_Hook_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVJFW_Object_Created_Hook_Base@@@8
_DATA	SEGMENT
??_R0?AVJFW_Object_Created_Hook_Base@@@8 DD FLAT:??_7type_info@@6B@ ; JFW_Object_Created_Hook_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVJFW_Object_Created_Hook_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4JFW_Object_Created_Hook_Base@@6B@
rdata$r	SEGMENT
??_R4JFW_Object_Created_Hook_Base@@6B@ DD 00H		; JFW_Object_Created_Hook_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVJFW_Object_Created_Hook_Base@@@8
	DD	FLAT:??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD FLAT:??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD 00H ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpC'
	DB	'lass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
rdata$r	SEGMENT
??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ DD 00H ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8
	DD	FLAT:??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8 DD FLAT:??_R0?AVMultiKeyHookScriptImpClass@@@8 ; MultiKeyHookScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R2MultiKeyHookScriptImpClass@@8 DD FLAT:??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8 ; MultiKeyHookScriptImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R3MultiKeyHookScriptImpClass@@8 DD 00H		; MultiKeyHookScriptImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMultiKeyHookScriptImpClass@@@8
_DATA	SEGMENT
??_R0?AVMultiKeyHookScriptImpClass@@@8 DD FLAT:??_7type_info@@6B@ ; MultiKeyHookScriptImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMultiKeyHookScriptImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MultiKeyHookScriptImpClass@@6B@
rdata$r	SEGMENT
??_R4MultiKeyHookScriptImpClass@@6B@ DD 00H		; MultiKeyHookScriptImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMultiKeyHookScriptImpClass@@@8
	DD	FLAT:??_R3MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@JFW_Key_Hook_Base@@8 DD FLAT:??_R0?AVJFW_Key_Hook_Base@@@8 ; JFW_Key_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R2JFW_Key_Hook_Base@@8 DD FLAT:??_R1A@?0A@EA@JFW_Key_Hook_Base@@8 ; JFW_Key_Hook_Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R3JFW_Key_Hook_Base@@8 DD 00H			; JFW_Key_Hook_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVJFW_Key_Hook_Base@@@8
_DATA	SEGMENT
??_R0?AVJFW_Key_Hook_Base@@@8 DD FLAT:??_7type_info@@6B@ ; JFW_Key_Hook_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVJFW_Key_Hook_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4JFW_Key_Hook_Base@@6B@
rdata$r	SEGMENT
??_R4JFW_Key_Hook_Base@@6B@ DD 00H			; JFW_Key_Hook_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVJFW_Key_Hook_Base@@@8
	DD	FLAT:??_R3JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@H@@8
rdata$r	SEGMENT
??_R2?$VectorClass@H@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@H@@8 ; VectorClass<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@H@@8
rdata$r	SEGMENT
??_R3?$VectorClass@H@@8 DD 00H				; VectorClass<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@H@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@H@@@8 DD FLAT:??_7type_info@@6B@	; VectorClass<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@H@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@H@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@H@@8 DD FLAT:??_R0?AV?$VectorClass@H@@@8 ; VectorClass<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@H@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@H@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@H@@@8 ; DynamicVectorClass<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@H@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@H@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@H@@8 ; DynamicVectorClass<int>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@H@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@H@@8 DD 00H			; DynamicVectorClass<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@H@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@H@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@H@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@H@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@H@@6B@ DD 00H			; DynamicVectorClass<int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@H@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@H@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ReferencerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ReferencerClass@@8 DD FLAT:??_R0?AVReferencerClass@@@8 ; ReferencerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ReferencerClass@@8
rdata$r	SEGMENT
??_R2ReferencerClass@@8 DD FLAT:??_R1A@?0A@EA@ReferencerClass@@8 ; ReferencerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ReferencerClass@@8
rdata$r	SEGMENT
??_R3ReferencerClass@@8 DD 00H				; ReferencerClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReferencerClass@@@8
_DATA	SEGMENT
??_R0?AVReferencerClass@@@8 DD FLAT:??_7type_info@@6B@	; ReferencerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReferencerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ReferencerClass@@6B@
rdata$r	SEGMENT
??_R4ReferencerClass@@6B@ DD 00H			; ReferencerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReferencerClass@@@8
	DD	FLAT:??_R3ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R4PostLoadableClass@@6B@
rdata$r	SEGMENT
??_R4PostLoadableClass@@6B@ DD 00H			; PostLoadableClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPostLoadableClass@@@8
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PostLoadableClass@@8
rdata$r	SEGMENT
??_R2PostLoadableClass@@8 DD FLAT:??_R1A@?0A@EA@PostLoadableClass@@8 ; PostLoadableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PostLoadableClass@@8
rdata$r	SEGMENT
??_R3PostLoadableClass@@8 DD 00H			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPostLoadableClass@@@8
_DATA	SEGMENT
??_R0?AVPostLoadableClass@@@8 DD FLAT:??_7type_info@@6B@ ; PostLoadableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPostLoadableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PostLoadableClass@@8 DD FLAT:??_R0?AVPostLoadableClass@@@8 ; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INIClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INIClass@@8 DD FLAT:??_R0?AVINIClass@@@8	; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R2INIClass@@8
rdata$r	SEGMENT
??_R2INIClass@@8 DD FLAT:??_R1A@?0A@EA@INIClass@@8	; INIClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INIClass@@8
rdata$r	SEGMENT
??_R3INIClass@@8 DD 00H					; INIClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVINIClass@@@8
_DATA	SEGMENT
??_R0?AVINIClass@@@8 DD FLAT:??_7type_info@@6B@		; INIClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVINIClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INIClass@@6B@
rdata$r	SEGMENT
??_R4INIClass@@6B@ DD 00H				; INIClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVINIClass@@@8
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptImpClass@@8 DD FLAT:??_R0?AVScriptImpClass@@@8 ; ScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptImpClass@@8
rdata$r	SEGMENT
??_R2ScriptImpClass@@8 DD FLAT:??_R1A@?0A@EA@ScriptImpClass@@8 ; ScriptImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ScriptImpClass@@8
rdata$r	SEGMENT
??_R3ScriptImpClass@@8 DD 00H				; ScriptImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptImpClass@@@8
_DATA	SEGMENT
??_R0?AVScriptImpClass@@@8 DD FLAT:??_7type_info@@6B@	; ScriptImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptImpClass@@6B@
rdata$r	SEGMENT
??_R4ScriptImpClass@@6B@ DD 00H				; ScriptImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptImpClass@@@8
	DD	FLAT:??_R3ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R4GameObjObserverClass@@6B@
rdata$r	SEGMENT
??_R4GameObjObserverClass@@6B@ DD 00H			; GameObjObserverClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGameObjObserverClass@@@8
	DD	FLAT:??_R3GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R2GameObjObserverClass@@8
rdata$r	SEGMENT
??_R2GameObjObserverClass@@8 DD FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8 ; GameObjObserverClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GameObjObserverClass@@8
rdata$r	SEGMENT
??_R3GameObjObserverClass@@8 DD 00H			; GameObjObserverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGameObjObserverClass@@@8
_DATA	SEGMENT
??_R0?AVGameObjObserverClass@@@8 DD FLAT:??_7type_info@@6B@ ; GameObjObserverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGameObjObserverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GameObjObserverClass@@8 DD FLAT:??_R0?AVGameObjObserverClass@@@8 ; GameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptClass@@8 DD FLAT:??_R0?AVScriptClass@@@8 ; ScriptClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptClass@@8
rdata$r	SEGMENT
??_R2ScriptClass@@8 DD FLAT:??_R1A@?0A@EA@ScriptClass@@8 ; ScriptClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ScriptClass@@8
rdata$r	SEGMENT
??_R3ScriptClass@@8 DD 00H				; ScriptClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptClass@@@8
_DATA	SEGMENT
??_R0?AVScriptClass@@@8 DD FLAT:??_7type_info@@6B@	; ScriptClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptClass@@6B@
rdata$r	SEGMENT
??_R4ScriptClass@@6B@ DD 00H				; ScriptClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptClass@@@8
	DD	FLAT:??_R3ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptFactory@@8 DD FLAT:??_R0?AVScriptFactory@@@8 ; ScriptFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptFactory@@8
rdata$r	SEGMENT
??_R2ScriptFactory@@8 DD FLAT:??_R1A@?0A@EA@ScriptFactory@@8 ; ScriptFactory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ScriptFactory@@8
rdata$r	SEGMENT
??_R3ScriptFactory@@8 DD 00H				; ScriptFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptFactory@@@8
_DATA	SEGMENT
??_R0?AVScriptFactory@@@8 DD FLAT:??_7type_info@@6B@	; ScriptFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptFactory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptFactory@@6B@
rdata$r	SEGMENT
??_R4ScriptFactory@@6B@ DD 00H				; ScriptFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptFactory@@@8
	DD	FLAT:??_R3ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@
CONST	SEGMENT
??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@ DB 'ObjectPoolCl'
	DB	'ass<class GenericSLNode,256>::~ObjectPoolClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
CONST	SEGMENT
??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ DB '%d memor'
	DB	'y leaks found in ObjectPoolClass<class GenericSLNode,256>::~O'
	DB	'bjectPoolClass', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@
CONST	SEGMENT
??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@ DB 'ObjectPoolCl'
	DB	'ass<class GenericSLNode,256>::Allocate_Object_Memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BIKGHIDO@VectorClass?$DMint?$DO?3?3operator?5?$DN?$AA@
CONST	SEGMENT
??_C@_0BN@BIKGHIDO@VectorClass?$DMint?$DO?3?3operator?5?$DN?$AA@ DB 'Vect'
	DB	'orClass<int>::operator =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@
CONST	SEGMENT
??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@ DB 'VectorC'
	DB	'lass<int>::VectorClass', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FMMNNBOE@VectorClass?$DMclass?5dp88_AI_Object@
CONST	SEGMENT
??_C@_0DE@FMMNNBOE@VectorClass?$DMclass?5dp88_AI_Object@ DB 'VectorClass<'
	DB	'class dp88_AI_Objective *>::VectorClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@CGHEKOML@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
CONST	SEGMENT
??_C@_0CP@CGHEKOML@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@ DB 'VectorCl'
	DB	'ass<class dp88_AI_Unit *>::VectorClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@OOJHOCOH@ScriptRegistrant?$DMclass?5dp88_AI_P@
CONST	SEGMENT
??_C@_0DM@OOJHOCOH@ScriptRegistrant?$DMclass?5dp88_AI_P@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_PopupTurret_Spotter>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PMCKICJG@ScriptRegistrant?$DMclass?5dp88_AI_P@
CONST	SEGMENT
??_C@_0DE@PMCKICJG@ScriptRegistrant?$DMclass?5dp88_AI_P@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_PopupTurret>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@JIIGOIBL@ScriptRegistrant?$DMclass?5dp88_AI_T@
CONST	SEGMENT
??_C@_0CP@JIIGOIBL@ScriptRegistrant?$DMclass?5dp88_AI_T@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_Turret>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@PAAIFCON@ScriptRegistrant?$DMclass?5dp88_AI_M@
CONST	SEGMENT
??_C@_0DK@PAAIFCON@ScriptRegistrant?$DMclass?5dp88_AI_M@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_Marker_Repairable>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@EMNGOKNL@ScriptRegistrant?$DMclass?5dp88_AI_M@
CONST	SEGMENT
??_C@_0DM@EMNGOKNL@ScriptRegistrant?$DMclass?5dp88_AI_M@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_Marker_HeavyVehicle>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JJEMAEDL@ScriptRegistrant?$DMclass?5dp88_AI_M@
CONST	SEGMENT
??_C@_0DI@JJEMAEDL@ScriptRegistrant?$DMclass?5dp88_AI_M@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_Marker_Building>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@BBKKKCKG@ScriptRegistrant?$DMclass?5dp88_AI_h@
CONST	SEGMENT
??_C@_0DL@BBKKKCKG@ScriptRegistrant?$DMclass?5dp88_AI_h@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_heavyVehicleMarker>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DKOMIJBP@ScriptRegistrant?$DMclass?5dp88_AI_O@
CONST	SEGMENT
??_C@_0DC@DKOMIJBP@ScriptRegistrant?$DMclass?5dp88_AI_O@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_Objective>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@PMGLKLPB@ScriptRegistrant?$DMclass?5dp88_AI_C@
CONST	SEGMENT
??_C@_0DG@PMGLKLPB@ScriptRegistrant?$DMclass?5dp88_AI_C@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_ChargedTurret>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H
	DB	't', 00H, 's', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\scripts.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IMHIKNGJ@ScriptRegistrant?$DMclass?5dp88_AI_T@
CONST	SEGMENT
??_C@_0DH@IMHIKNGJ@ScriptRegistrant?$DMclass?5dp88_AI_T@ DB 'ScriptRegist'
	DB	'rant<class dp88_AI_Tank_Offensive>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DBAHDKIN@VectorClass?$DMint?$DO?3?3Clear?$AA@
CONST	SEGMENT
??_C@_0BI@DBAHDKIN@VectorClass?$DMint?$DO?3?3Clear?$AA@ DB 'VectorClass<i'
	DB	'nt>::Clear', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@
CONST	SEGMENT
??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@ DB 'VectorClass<'
	DB	'int>::Resize', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FJNOIHMM@VectorClass?$DMclass?5dp88_AI_Object@
CONST	SEGMENT
??_C@_0CO@FJNOIHMM@VectorClass?$DMclass?5dp88_AI_Object@ DB 'VectorClass<'
	DB	'class dp88_AI_Objective *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EIKABCDJ@VectorClass?$DMclass?5dp88_AI_Object@
CONST	SEGMENT
??_C@_0CP@EIKABCDJ@VectorClass?$DMclass?5dp88_AI_Object@ DB 'VectorClass<'
	DB	'class dp88_AI_Objective *>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OFHADDID@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
CONST	SEGMENT
??_C@_0CJ@OFHADDID@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@ DB 'VectorCl'
	DB	'ass<class dp88_AI_Unit *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KOHPOAIM@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
CONST	SEGMENT
??_C@_0CK@KOHPOAIM@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@ DB 'VectorCl'
	DB	'ass<class dp88_AI_Unit *>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct '
	DB	'MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Aft'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Be'
	DB	'fore', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Al'
	DB	'l', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_He'
	DB	'ad', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\slist.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct '
	DB	'MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FEJEIAGM@tId?3int?$AA@
CONST	SEGMENT
??_C@_07FEJEIAGM@tId?3int?$AA@ DB 'tId:int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@6B@ ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BE@HCJJAADE@dp88_AI_PopupTurret?$AA@
CONST	SEGMENT
??_C@_0BE@HCJJAADE@dp88_AI_PopupTurret?$AA@ DB 'dp88_AI_PopupTurret', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CGF@IAJMADCM@Priority_Infantry?$DN1?40?3float?0Weap@
CONST	SEGMENT
??_C@_0CGF@IAJMADCM@Priority_Infantry?$DN1?40?3float?0Weap@ DB 'Priority_'
	DB	'Infantry=1.0:float,Weapon_Infantry=1:int,Splash_Infantry=0:in'
	DB	't,Priority_Light_Vehicle=5.0:float,Weapon_Light_Vehicle=1:int'
	DB	',Priority_Heavy_Vehicle=7.0:float,Weapon_Heavy_Vehicle=1:int,'
	DB	'Priority_VTOL=5.0:float,Weapon_VTOL=1:int,Min_Attack_Range=0:'
	DB	'int,Max_Attack_Range=150:int,Min_Attack_Range_Secondary=0:int'
	DB	',Max_Attack_Range_Secondary=150:int,Deploy_Animation:string,D'
	DB	'eploy_Animation_Frames:int,Deploy_Sound:string,Deploy_Timeout'
	DB	':int,Spotter_Preset:string,Modifier_Distance=0.25:float,Modif'
	DB	'ier_Target_Damage=0.1:float,Modifier_Target_Value=0.05:float,'
	DB	'Requires_Power=0:int,Debug=0:int,Detects_Stealth=1:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@6B@ ; ScriptRegistrant<dp88_AI_PopupTurret>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0P@OKEJDPHI@dp88_AI_Turret?$AA@
CONST	SEGMENT
??_C@_0P@OKEJDPHI@dp88_AI_Turret?$AA@ DB 'dp88_AI_Turret', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BPE@NMPEDIOA@Priority_Infantry?$DN1?40?3float?0Weap@
CONST	SEGMENT
??_C@_0BPE@NMPEDIOA@Priority_Infantry?$DN1?40?3float?0Weap@ DB 'Priority_'
	DB	'Infantry=1.0:float,Weapon_Infantry=1:int,Splash_Infantry=0:in'
	DB	't,Priority_Light_Vehicle=5.0:float,Weapon_Light_Vehicle=1:int'
	DB	',Priority_Heavy_Vehicle=7.0:float,Weapon_Heavy_Vehicle=1:int,'
	DB	'Priority_VTOL=5.0:float,Weapon_VTOL=1:int,Min_Attack_Range=0:'
	DB	'int,Max_Attack_Range=150:int,Min_Attack_Range_Secondary=0:int'
	DB	',Max_Attack_Range_Secondary=150:int,Modifier_Distance=0.25:fl'
	DB	'oat,Modifier_Target_Damage=0.1:float,Modifier_Target_Value=0.'
	DB	'05:float,Requires_Power=0:int,Debug=0:int,Detects_Stealth=1:i'
	DB	'nt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_Turret@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_Turret@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_Turret@@@@6B@ ; ScriptRegistrant<dp88_AI_Turret>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BM@EFFHBFKH@Pathfind_Distance?$DN5?40?3float?$AA@
CONST	SEGMENT
??_C@_0BM@EFFHBFKH@Pathfind_Distance?$DN5?40?3float?$AA@ DB 'Pathfind_Dis'
	DB	'tance=5.0:float', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@6B@ ; ScriptRegistrant<dp88_AI_Marker_Building>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@6B@ ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@
CONST	SEGMENT
??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@ DB 'dp88_AI_Objective', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JL@PCLPMECL@Team?3int?0Type?$DN1?3int?0Range?$DN25?3int@
CONST	SEGMENT
??_C@_0JL@PCLPMECL@Team?3int?0Type?$DN1?3int?0Range?$DN25?3int@ DB 'Team:'
	DB	'int,Type=1:int,Range=25:int,Priority_Soldier=1:int,Priority_L'
	DB	'ight_Vehicle=1:int,Priority_Heavy_Vehicle=1:int,Priority_Airc'
	DB	'raft=1:int,Debug_Tag:string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_Objective@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_Objective@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_Objective@@@@6B@ ; ScriptRegistrant<dp88_AI_Objective>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BC@NCMONDLE@Priority_Aircraft?$AA@
CONST	SEGMENT
??_C@_0BC@NCMONDLE@Priority_Aircraft?$AA@ DB 'Priority_Aircraft', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMDDOPID@Priority_Soldier?$AA@
CONST	SEGMENT
??_C@_0BB@OMDDOPID@Priority_Soldier?$AA@ DB 'Priority_Soldier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJACHIKM@No?5Tag?$AA@
CONST	SEGMENT
??_C@_06GJACHIKM@No?5Tag?$AA@ DB 'No Tag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DJDKAPII@Debug_Tag?$AA@
CONST	SEGMENT
??_C@_09DJDKAPII@Debug_Tag?$AA@ DB 'Debug_Tag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBPANCCF@Team?$AA@
CONST	SEGMENT
??_C@_04GBPANCCF@Team?$AA@ DB 'Team', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFMCGLCK@Range?$AA@
CONST	SEGMENT
??_C@_05CFMCGLCK@Range?$AA@ DB 'Range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KOACHJEN@Type?$AA@
CONST	SEGMENT
??_C@_04KOACHJEN@Type?$AA@ DB 'Type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BKNNHEAE@dp88_AI_ChargedTurret_AnimationO@
CONST	SEGMENT
??_C@_0CI@BKNNHEAE@dp88_AI_ChargedTurret_AnimationO@ DB 'dp88_AI_ChargedT'
	DB	'urret_AnimationObserver', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GNKJMIEN@dp88_AI_ChargedTurret?$AA@
CONST	SEGMENT
??_C@_0BG@GNKJMIEN@dp88_AI_ChargedTurret?$AA@ DB 'dp88_AI_ChargedTurret', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DAO@GPFAKAHL@Priority_Infantry?$DN1?40?3float?0Weap@
CONST	SEGMENT
??_C@_0DAO@GPFAKAHL@Priority_Infantry?$DN1?40?3float?0Weap@ DB 'Priority_'
	DB	'Infantry=1.0:float,Weapon_Infantry=1:int,Splash_Infantry=0:in'
	DB	't,Priority_Light_Vehicle=5.0:float,Weapon_Light_Vehicle=1:int'
	DB	',Priority_Heavy_Vehicle=7.0:float,Weapon_Heavy_Vehicle=1:int,'
	DB	'Priority_VTOL=5.0:float,Weapon_VTOL=1:int,Min_Attack_Range=0:'
	DB	'int,Max_Attack_Range=150:int,Min_Attack_Range_Secondary=0:int'
	DB	',Max_Attack_Range_Secondary=150:int,Animation_Model:string,An'
	DB	'imation_Model_Bone:string,Animation:string,Animation_Idle_Sta'
	DB	'rt_Frame:int,Animation_Idle_End_Frame:int,Animation_Unpowered'
	DB	'_Start_Frame:int,Animation_Unpowered_End_Frame:int,Animation_'
	DB	'Charge_Start_Frame:int,Animation_Charge_End_Frame:int,Charge_'
	DB	'Sound:string,Modifier_Distance=0.25:float,Modifier_Target_Dam'
	DB	'age=0.1:float,Modifier_Target_Value=0.05:float,Requires_Power'
	DB	'=0:int,Debug=0:int,Detects_Stealth=1:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@6B@ ; ScriptRegistrant<dp88_AI_ChargedTurret>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0CA@IEKKOGEI@Animation_Unpowered_Start_Frame?$AA@
CONST	SEGMENT
??_C@_0CA@IEKKOGEI@Animation_Unpowered_Start_Frame?$AA@ DB 'Animation_Unp'
	DB	'owered_Start_Frame', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FOANNFDJ@Animation_Unpowered_End_Frame?$AA@
CONST	SEGMENT
??_C@_0BO@FOANNFDJ@Animation_Unpowered_End_Frame?$AA@ DB 'Animation_Unpow'
	DB	'ered_End_Frame', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DNDODHMP@Animation_Idle_Start_Frame?$AA@
CONST	SEGMENT
??_C@_0BL@DNDODHMP@Animation_Idle_Start_Frame?$AA@ DB 'Animation_Idle_Sta'
	DB	'rt_Frame', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJIDONGK@Animation_Idle_End_Frame?$AA@
CONST	SEGMENT
??_C@_0BJ@DJIDONGK@Animation_Idle_End_Frame?$AA@ DB 'Animation_Idle_End_F'
	DB	'rame', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EGKBBLLN@Charge_Sound?$AA@
CONST	SEGMENT
??_C@_0N@EGKBBLLN@Charge_Sound?$AA@ DB 'Charge_Sound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HMDMOGPC@Animation_Charge_Start_Frame?$AA@
CONST	SEGMENT
??_C@_0BN@HMDMOGPC@Animation_Charge_Start_Frame?$AA@ DB 'Animation_Charge'
	DB	'_Start_Frame', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CEGLFJCP@Animation_Charge_End_Frame?$AA@
CONST	SEGMENT
??_C@_0BL@CEGLFJCP@Animation_Charge_End_Frame?$AA@ DB 'Animation_Charge_E'
	DB	'nd_Frame', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@POOJFDMP@dp88_AI_ChargedTurret?3?3Destroyed@
CONST	SEGMENT
??_C@_0CB@POOJFDMP@dp88_AI_ChargedTurret?3?3Destroyed@ DB 'dp88_AI_Charge'
	DB	'dTurret::Destroyed', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA DD 0537H ; `dp88_AI_ChargedTurret::Destroyed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09ONEINPNJ@Animation?$AA@
CONST	SEGMENT
??_C@_09ONEINPNJ@Animation?$AA@ DB 'Animation', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@IMPPFMMJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HG@IMPPFMMJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'p', 00H, '8', 00H, '8', 00H, '_', 00H
	DB	'c', 00H, 'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a'
	DB	00H, 'i', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GOAALILL@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DL@GOAALILL@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\dp88_customai.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DBHCJMNG@dp88_AI_ChargedTurret?3?3Init?$AA@
CONST	SEGMENT
??_C@_0BM@DBHCJMNG@dp88_AI_ChargedTurret?3?3Init?$AA@ DB 'dp88_AI_Charged'
	DB	'Turret::Init', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA DD 04b2H ; `dp88_AI_ChargedTurret::Init'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@OHLHCKEN@Animation_Model_Bone?$AA@
CONST	SEGMENT
??_C@_0BF@OHLHCKEN@Animation_Model_Bone?$AA@ DB 'Animation_Model_Bone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NHJNEILC@Invisible_Object?$AA@
CONST	SEGMENT
??_C@_0BB@NHJNEILC@Invisible_Object?$AA@ DB 'Invisible_Object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IPCHLLAK@Animation_Model?$AA@
CONST	SEGMENT
??_C@_0BA@IPCHLLAK@Animation_Model?$AA@ DB 'Animation_Model', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEDMAPME@tId?$AA@
CONST	SEGMENT
??_C@_03EEDMAPME@tId?$AA@ DB 'tId', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GDKODACH@Deploy_Sound?$AA@
CONST	SEGMENT
??_C@_0N@GDKODACH@Deploy_Sound?$AA@ DB 'Deploy_Sound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MDDEPNOL@Deploy_Timeout?$AA@
CONST	SEGMENT
??_C@_0P@MDDEPNOL@Deploy_Timeout?$AA@ DB 'Deploy_Timeout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HBCJANPM@Deploy_Animation?$AA@
CONST	SEGMENT
??_C@_0BB@HBCJANPM@Deploy_Animation?$AA@ DB 'Deploy_Animation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MKDFJGMB@Deploy_Animation_Frames?$AA@
CONST	SEGMENT
??_C@_0BI@MKDFJGMB@Deploy_Animation_Frames?$AA@ DB 'Deploy_Animation_Fram'
	DB	'es', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GAGONNPO@dp88_AI_PopupTurret_Spotter?$AA@
CONST	SEGMENT
??_C@_0BM@GAGONNPO@dp88_AI_PopupTurret_Spotter?$AA@ DB 'dp88_AI_PopupTurr'
	DB	'et_Spotter', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HBJPNAAK@Blamo?$AA@
CONST	SEGMENT
??_C@_05HBJPNAAK@Blamo?$AA@ DB 'Blamo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DACGJHIB@Spotter_Preset?$AA@
CONST	SEGMENT
??_C@_0P@DACGJHIB@Spotter_Preset?$AA@ DB 'Spotter_Preset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@NHCIAICJ@Target?5is?5too?5far?5away?5to?5attack@
CONST	SEGMENT
??_C@_0ED@NHCIAICJ@Target?5is?5too?5far?5away?5to?5attack@ DB 'Target is '
	DB	'too far away to attack (distance: %.3f > max range: %d)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MAAJCEDB@Target?5is?5too?5close?5to?5attack?5?$CId@
CONST	SEGMENT
??_C@_0EA@MAAJCEDB@Target?5is?5too?5close?5to?5attack?5?$CId@ DB 'Target '
	DB	'is too close to attack (distance: %.3f < min range: %d)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MGDFLFMJ@Target?5?$CFd?5no?5longer?5valid?0?5ceasi@
CONST	SEGMENT
??_C@_0CM@MGDFLFMJ@Target?5?$CFd?5no?5longer?5valid?0?5ceasi@ DB 'Target '
	DB	'%d no longer valid, ceasing attack.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@GPLKDLHA@Current?5target?5has?5a?5higher?5prio@
CONST	SEGMENT
??_C@_0FK@GPLKDLHA@Current?5target?5has?5a?5higher?5prio@ DB 'Current tar'
	DB	'get has a higher priority than new enemy, continuing to attac'
	DB	'k current target', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OOKLKKBM@Using?5splash?5damage?5against?5this@
CONST	SEGMENT
??_C@_0CJ@OOKLKKBM@Using?5splash?5damage?5against?5this@ DB 'Using splash'
	DB	' damage against this target', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BOFCEBL@New?5enemy?5has?5a?5higher?5priority?5@
CONST	SEGMENT
??_C@_0EG@BOFCEBL@New?5enemy?5has?5a?5higher?5priority?5@ DB 'New enemy h'
	DB	'as a higher priority than current target, attacking enemy', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PHMMCDIA@No?5current?5target?5to?5compare?5wit@
CONST	SEGMENT
??_C@_0DF@PHMMCDIA@No?5current?5target?5to?5compare?5wit@ DB 'No current '
	DB	'target to compare with, attacking enemy!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FPJDMGFB@Unable?5to?5attack?0?5target?5out?5of?5@
CONST	SEGMENT
??_C@_0CH@FPJDMGFB@Unable?5to?5attack?0?5target?5out?5of?5@ DB 'Unable to'
	DB	' attack, target out of range', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IIDFODBG@Using?5?$CFs?5fire?5on?5this?5target?5typ@
CONST	SEGMENT
??_C@_0CD@IIDFODBG@Using?5?$CFs?5fire?5on?5this?5target?5typ@ DB 'Using %'
	DB	's fire on this target type', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EADLKHON@secondary?$AA@
CONST	SEGMENT
??_C@_09EADLKHON@secondary?$AA@ DB 'secondary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJDBHDIN@primary?$AA@
CONST	SEGMENT
??_C@_07CJDBHDIN@primary?$AA@ DB 'primary', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NEFPOHNA@Unable?5to?5attack?0?5no?5power?5avail@
CONST	SEGMENT
??_C@_0CI@NEFPOHNA@Unable?5to?5attack?0?5no?5power?5avail@ DB 'Unable to '
	DB	'attack, no power available...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@JIOBFADF@Enemy?5is?5current?5target?0?5last?5se@
CONST	SEGMENT
??_C@_0DO@JIOBFADF@Enemy?5is?5current?5target?0?5last?5se@ DB 'Enemy is c'
	DB	'urrent target, last seen time and priority updated', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JKCMNHEG@Seen?5an?5enemy?3?5?$CFd?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BI@JKCMNHEG@Seen?5an?5enemy?3?5?$CFd?5?$CI?$CFs?$CJ?6?$AA@ DB 'See'
	DB	'n an enemy: %d (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IHFBNEGA@Splash_Infantry?$AA@
CONST	SEGMENT
??_C@_0BA@IHFBNEGA@Splash_Infantry?$AA@ DB 'Splash_Infantry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHEEEPDF@Requires_Power?$AA@
CONST	SEGMENT
??_C@_0P@FHEEEPDF@Requires_Power?$AA@ DB 'Requires_Power', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JDEODPME@dp88_AI_Tank_Offensive?$AA@
CONST	SEGMENT
??_C@_0BH@JDEODPME@dp88_AI_Tank_Offensive?$AA@ DB 'dp88_AI_Tank_Offensive'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CFI@PPMHEDDD@Priority_Infantry?$DN1?40?3float?0Weap@
CONST	SEGMENT
??_C@_0CFI@PPMHEDDD@Priority_Infantry?$DN1?40?3float?0Weap@ DB 'Priority_'
	DB	'Infantry=1.0:float,Weapon_Infantry=1:int,Splash_Infantry=0:in'
	DB	't,Priority_Light_Vehicle=5.0:float,Weapon_Light_Vehicle=1:int'
	DB	',Priority_Heavy_Vehicle=7.0:float,Weapon_Heavy_Vehicle=1:int,'
	DB	'Priority_VTOL=5.0:float,Weapon_VTOL=1:int,Priority_Building=1'
	DB	'2.0:float,Weapon_Building=1:int,Max_Attack_Range=150:int,Min_'
	DB	'Attack_Range=0:int,Preferred_Attack_Range=60:int,Max_Attack_R'
	DB	'ange_Secondary=150:int,Min_Attack_Range_Secondary=0:int,Prefe'
	DB	'rred_Attack_Range_Secondary=60:int,Modifier_Distance=0.25:flo'
	DB	'at,Modifier_Target_Damage=0.1:float,Modifier_Target_Value=0.0'
	DB	'5:float,Debug=0:int,Detects_Stealth=1:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@6B@ ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@H@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@H@@6B@ DD FLAT:??_R4?$DynamicVectorClass@H@@6B@ ; DynamicVectorClass<int>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@H@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@H@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@H@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@H@@UAEHABH@Z
	DD	FLAT:?ID@?$DynamicVectorClass@H@@UAEHPBH@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@H@@6B@
CONST	SEGMENT
??_7?$VectorClass@H@@6B@ DD FLAT:??_R4?$VectorClass@H@@6B@ ; VectorClass<int>::`vftable'
	DD	FLAT:??_E?$VectorClass@H@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@H@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@H@@UAE_NHPBH@Z
	DD	FLAT:?Clear@?$VectorClass@H@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@H@@UAEHABH@Z
	DD	FLAT:?ID@?$VectorClass@H@@UAEHPBH@Z
CONST	ENDS
;	COMDAT ??_C@_0CB@ODGOJIJK@Preferred_Attack_Range_Secondary@
CONST	SEGMENT
??_C@_0CB@ODGOJIJK@Preferred_Attack_Range_Secondary@ DB 'Preferred_Attack'
	DB	'_Range_Secondary', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLMPFMHL@Preferred_Attack_Range?$AA@
CONST	SEGMENT
??_C@_0BH@LLMPFMHL@Preferred_Attack_Range?$AA@ DB 'Preferred_Attack_Range'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@GNPKALOE@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Vehic@
CONST	SEGMENT
??_C@_0GO@GNPKALOE@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Vehic@ DB '['
	DB	'%d:%s:%s] Critical Error: Vehicle AI base class created funct'
	DB	'ion should not be called. Destroying script...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MGDIDNJB@Pathfind_Distance?$AA@
CONST	SEGMENT
??_C@_0BC@MGDIDNJB@Pathfind_Distance?$AA@ DB 'Pathfind_Distance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@EBLHHLPH@?$FL?$CFd?3?$CFhs?3?$CFhs?$FN?5This?5script?5is?5depr@
CONST	SEGMENT
??_C@_0FB@EBLHHLPH@?$FL?$CFd?3?$CFhs?3?$CFhs?$FN?5This?5script?5is?5depr@ DB '['
	DB	'%d:%hs:%hs] This script is deprecated, use dp88_AI_Marker_Hea'
	DB	'vyVehicle instead', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMNLCPDP@dp88_AI_Marker_Repairable?$AA@
CONST	SEGMENT
??_C@_0BK@BMNLCPDP@dp88_AI_Marker_Repairable?$AA@ DB 'dp88_AI_Marker_Repa'
	DB	'irable', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MGGLMLEA@dp88_AI_heavyVehicleMarker?$AA@
CONST	SEGMENT
??_C@_0BL@MGGLMLEA@dp88_AI_heavyVehicleMarker?$AA@ DB 'dp88_AI_heavyVehic'
	DB	'leMarker', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OHLJBOHK@dp88_AI_Marker_HeavyVehicle?$AA@
CONST	SEGMENT
??_C@_0BM@OHLJBOHK@dp88_AI_Marker_HeavyVehicle?$AA@ DB 'dp88_AI_Marker_He'
	DB	'avyVehicle', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IILHOKGK@dp88_AR_Paradrop?$AA@
CONST	SEGMENT
??_C@_0BB@IILHOKGK@dp88_AR_Paradrop?$AA@ DB 'dp88_AR_Paradrop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JENJFJLB@MS_Paradrop?$AA@
CONST	SEGMENT
??_C@_0M@JENJFJLB@MS_Paradrop?$AA@ DB 'MS_Paradrop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HDJOKPNM@JFW_Deployable_Aircraft_Deployed@
CONST	SEGMENT
??_C@_0CB@HDJOKPNM@JFW_Deployable_Aircraft_Deployed@ DB 'JFW_Deployable_A'
	DB	'ircraft_Deployed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CAAFFJKG@dp88_AI_Marker_Building?$AA@
CONST	SEGMENT
??_C@_0BI@CAAFFJKG@dp88_AI_Marker_Building?$AA@ DB 'dp88_AI_Marker_Buildi'
	DB	'ng', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IMIMFLLN@?7Adjusting?5final?5priority?5to?50?40@
CONST	SEGMENT
??_C@_0DC@IMIMFLLN@?7Adjusting?5final?5priority?5to?50?40@ DB 09H, 'Adjus'
	DB	'ting final priority to 0.0001 (must be >0)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DODFLDLH@?7Final?5Priority?3?5?$CF?44f?6?$AA@
CONST	SEGMENT
??_C@_0BH@DODFLDLH@?7Final?5Priority?3?5?$CF?44f?6?$AA@ DB 09H, 'Final Pr'
	DB	'iority: %.4f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@GAACONDP@?7Distance?5Modifier?3?5Subtracting?5@
CONST	SEGMENT
??_C@_0GA@GAACONDP@?7Distance?5Modifier?3?5Subtracting?5@ DB 09H, 'Distan'
	DB	'ce Modifier: Subtracting %.4f priority ((Distance to target %'
	DB	'.2f) /10) * modifier %.2f)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@JBNDDAJJ@?7Target?5Damage?5Modifier?3?5Adding?5@
CONST	SEGMENT
??_C@_0GB@JBNDDAJJ@?7Target?5Damage?5Modifier?3?5Adding?5@ DB 09H, 'Targe'
	DB	't Damage Modifier: Adding %.4f priority ((Target Damage Taken'
	DB	' %.2f) /10) * modifier %.2f)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MPEMHLEK@?7Target?5Value?5Modifier?3?5Adding?5?$CF@
CONST	SEGMENT
??_C@_0EP@MPEMHLEK@?7Target?5Value?5Modifier?3?5Adding?5?$CF@ DB 09H, 'Ta'
	DB	'rget Value Modifier: Adding %.4f priority ((Value %d /10) * m'
	DB	'odifier %.2f)', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KFFNFBIH@?7Base?5priority?5for?5this?5unit?5typ@
CONST	SEGMENT
??_C@_0CL@KFFNFBIH@?7Base?5priority?5for?5this?5unit?5typ@ DB 09H, 'Base '
	DB	'priority for this unit type is %.2f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MLCAJKAC@?7Invalid?5target?5type?0?5priority?5i@
CONST	SEGMENT
??_C@_0CH@MLCAJKAC@?7Invalid?5target?5type?0?5priority?5i@ DB 09H, 'Inval'
	DB	'id target type, priority is 0.0', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JFOGFIIM@Target?5?$CFd?5is?5currently?5stealthed@
CONST	SEGMENT
??_C@_0EE@JFOGFIIM@Target?5?$CFd?5is?5currently?5stealthed@ DB 'Target %d'
	DB	' is currently stealthed and stealth detection is disabled', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@ELEJHPAH@Target?5?$CFd?5is?5an?5empty?0?5non?9AI?5ve@
CONST	SEGMENT
??_C@_0DB@ELEJHPAH@Target?5?$CFd?5is?5an?5empty?0?5non?9AI?5ve@ DB 'Targe'
	DB	't %d is an empty, non-AI vehicle, ignoring', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KBAGLFIO@Target?5?$CFd?5is?5dead?5or?5unteamed?0?5i@
CONST	SEGMENT
??_C@_0CJ@KBAGLFIO@Target?5?$CFd?5is?5dead?5or?5unteamed?0?5i@ DB 'Target'
	DB	' %d is dead or unteamed, ignoring', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HOOENEEI@Calculating?5priority?5of?5?$CFd?5?$CI?$CFs?$CJ?6@
CONST	SEGMENT
??_C@_0CB@HOOENEEI@Calculating?5priority?5of?5?$CFd?5?$CI?$CFs?$CJ?6@ DB 'C'
	DB	'alculating priority of %d (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KKGDDBPP@?$CFs_?$CFd_?$CFd?4log?$AA@
CONST	SEGMENT
??_C@_0N@KKGDDBPP@?$CFs_?$CFd_?$CFd?4log?$AA@ DB '%s_%d_%d.log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GCIPIGEI@Debug?$AA@
CONST	SEGMENT
??_C@_05GCIPIGEI@Debug?$AA@ DB 'Debug', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GJMGCGII@Detects_Stealth?$AA@
CONST	SEGMENT
??_C@_0BA@GJMGCGII@Detects_Stealth?$AA@ DB 'Detects_Stealth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CMKCAMPB@Max_Attack_Range_Secondary?$AA@
CONST	SEGMENT
??_C@_0BL@CMKCAMPB@Max_Attack_Range_Secondary?$AA@ DB 'Max_Attack_Range_S'
	DB	'econdary', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EKEHGKIF@Min_Attack_Range_Secondary?$AA@
CONST	SEGMENT
??_C@_0BL@EKEHGKIF@Min_Attack_Range_Secondary?$AA@ DB 'Min_Attack_Range_S'
	DB	'econdary', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DHAPKMMM@Max_Attack_Range?$AA@
CONST	SEGMENT
??_C@_0BB@DHAPKMMM@Max_Attack_Range?$AA@ DB 'Max_Attack_Range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CCIEHIDO@Min_Attack_Range?$AA@
CONST	SEGMENT
??_C@_0BB@CCIEHIDO@Min_Attack_Range?$AA@ DB 'Min_Attack_Range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NLKFPOKG@Weapon_Building?$AA@
CONST	SEGMENT
??_C@_0BA@NLKFPOKG@Weapon_Building?$AA@ DB 'Weapon_Building', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NIGAELBF@Weapon_VTOL?$AA@
CONST	SEGMENT
??_C@_0M@NIGAELBF@Weapon_VTOL?$AA@ DB 'Weapon_VTOL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EGFJJJKM@Weapon_Heavy_Vehicle?$AA@
CONST	SEGMENT
??_C@_0BF@EGFJJJKM@Weapon_Heavy_Vehicle?$AA@ DB 'Weapon_Heavy_Vehicle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CDAMGONB@Weapon_Light_Vehicle?$AA@
CONST	SEGMENT
??_C@_0BF@CDAMGONB@Weapon_Light_Vehicle?$AA@ DB 'Weapon_Light_Vehicle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BLEJNMBJ@Weapon_Infantry?$AA@
CONST	SEGMENT
??_C@_0BA@BLEJNMBJ@Weapon_Infantry?$AA@ DB 'Weapon_Infantry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LCPGCHOK@Modifier_Target_Value?$AA@
CONST	SEGMENT
??_C@_0BG@LCPGCHOK@Modifier_Target_Value?$AA@ DB 'Modifier_Target_Value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EJDJNCFC@Modifier_Target_Damage?$AA@
CONST	SEGMENT
??_C@_0BH@EJDJNCFC@Modifier_Target_Damage?$AA@ DB 'Modifier_Target_Damage'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCBJBJAE@Modifier_Distance?$AA@
CONST	SEGMENT
??_C@_0BC@DCBJBJAE@Modifier_Distance?$AA@ DB 'Modifier_Distance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BBDAOLBD@Priority_Building?$AA@
CONST	SEGMENT
??_C@_0BC@BBDAOLBD@Priority_Building?$AA@ DB 'Priority_Building', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NPEIAKIN@Priority_VTOL?$AA@
CONST	SEGMENT
??_C@_0O@NPEIAKIN@Priority_VTOL?$AA@ DB 'Priority_VTOL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DDHEPMLK@Priority_Heavy_Vehicle?$AA@
CONST	SEGMENT
??_C@_0BH@DDHEPMLK@Priority_Heavy_Vehicle?$AA@ DB 'Priority_Heavy_Vehicle'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FGCBALMH@Priority_Light_Vehicle?$AA@
CONST	SEGMENT
??_C@_0BH@FGCBALMH@Priority_Light_Vehicle?$AA@ DB 'Priority_Light_Vehicle'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NBNMMJKM@Priority_Infantry?$AA@
CONST	SEGMENT
??_C@_0BC@NBNMMJKM@Priority_Infantry?$AA@ DB 'Priority_Infantry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HL@GDCLDGM@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Only?5@
CONST	SEGMENT
??_C@_0HL@GDCLDGM@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Only?5@ DB '['
	DB	'%d:%s:%s] Critical Error: Only object of type SmartGameObj ca'
	DB	'n use the dp88_AI_* series of scripts. Destroying script...', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7dp88_AI_Objective@@6B@
CONST	SEGMENT
??_7dp88_AI_Objective@@6B@ DD FLAT:??_R4dp88_AI_Objective@@6B@ ; dp88_AI_Objective::`vftable'
	DD	FLAT:??_Edp88_AI_Objective@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAVdp88_AI_Objective@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAVdp88_AI_Objective@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAVdp88_AI_Objective@@@@6B@ ; DynamicVectorClass<dp88_AI_Objective *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVdp88_AI_Objective@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAVdp88_AI_Objective@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAVdp88_AI_Objective@@@@6B@ DD FLAT:??_R4?$VectorClass@PAVdp88_AI_Objective@@@@6B@ ; VectorClass<dp88_AI_Objective *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVdp88_AI_Objective@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAVdp88_AI_Objective@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z
	DD	FLAT:?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AI_ChargedTurret_AnimationObserver@@6B@
CONST	SEGMENT
??_7dp88_AI_ChargedTurret_AnimationObserver@@6B@ DD FLAT:??_R4dp88_AI_ChargedTurret_AnimationObserver@@6B@ ; dp88_AI_ChargedTurret_AnimationObserver::`vftable'
	DD	FLAT:??_Edp88_AI_ChargedTurret_AnimationObserver@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ObserverImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ObserverImpClass@@MAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ObserverImpClass@@MAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ObserverImpClass@@MAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ObserverImpClass@@MAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@dp88_AI_ChargedTurret_AnimationObserver@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
CONST	ENDS
;	COMDAT ??_7dp88_AI_ChargedTurret@@6B@
CONST	SEGMENT
??_7dp88_AI_ChargedTurret@@6B@ DD FLAT:??_R4dp88_AI_ChargedTurret@@6B@ ; dp88_AI_ChargedTurret::`vftable'
	DD	FLAT:??_Edp88_AI_ChargedTurret@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z
	DD	FLAT:?attackTarget@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?attackLocation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z
	DD	FLAT:?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?StartCharging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?StartDischarging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?GetAnimationObject@dp88_AI_ChargedTurret@@MAEPAVScriptableGameObj@@PAV2@@Z
	DD	FLAT:?ApplyIdleAnimation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AI_PopupTurret_Spotter@@6B@
CONST	SEGMENT
??_7dp88_AI_PopupTurret_Spotter@@6B@ DD FLAT:??_R4dp88_AI_PopupTurret_Spotter@@6B@ ; dp88_AI_PopupTurret_Spotter::`vftable'
	DD	FLAT:??_Edp88_AI_PopupTurret_Spotter@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_AI_PopupTurret_Spotter@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AI_PopupTurret@@6B@
CONST	SEGMENT
??_7dp88_AI_PopupTurret@@6B@ DD FLAT:??_R4dp88_AI_PopupTurret@@6B@ ; dp88_AI_PopupTurret::`vftable'
	DD	FLAT:??_Edp88_AI_PopupTurret@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z
	DD	FLAT:?attackTarget@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?attackLocation@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z
	DD	FLAT:?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Deploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Undeploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AI_Turret@@6B@
CONST	SEGMENT
??_7dp88_AI_Turret@@6B@ DD FLAT:??_R4dp88_AI_Turret@@6B@ ; dp88_AI_Turret::`vftable'
	DD	FLAT:??_Edp88_AI_Turret@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z
	DD	FLAT:?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z
	DD	FLAT:?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z
	DD	FLAT:?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AI_Tank_Offensive@@6B@
CONST	SEGMENT
??_7dp88_AI_Tank_Offensive@@6B@ DD FLAT:??_R4dp88_AI_Tank_Offensive@@6B@ ; dp88_AI_Tank_Offensive::`vftable'
	DD	FLAT:??_Edp88_AI_Tank_Offensive@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Force_Clear_Current_Objective@dp88_AI_Unit@@UAEXXZ
	DD	FLAT:?GoToObjective@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@M@Z
	DD	FLAT:?AttackTarget@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?ShouldPursueTarget@dp88_AI_Unit@@MAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:?GetPreferredAttackRange@dp88_AI_Tank_Offensive@@MAEHPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsValidTarget@dp88_AI_Tank_Offensive@@MAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:?ChooseNewObjective@dp88_AI_Tank_Offensive@@MAEPAVdp88_AI_Objective@@PAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AI_Unit@@6B@
CONST	SEGMENT
??_7dp88_AI_Unit@@6B@ DD FLAT:??_R4dp88_AI_Unit@@6B@	; dp88_AI_Unit::`vftable'
	DD	FLAT:??_Edp88_AI_Unit@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?Force_Clear_Current_Objective@dp88_AI_Unit@@UAEXXZ
	DD	FLAT:?GoToObjective@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@M@Z
	DD	FLAT:?AttackTarget@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?ShouldPursueTarget@dp88_AI_Unit@@MAE_NPAVScriptableGameObj@@0@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@PAVdp88_AI_Unit@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@PAVdp88_AI_Unit@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@PAVdp88_AI_Unit@@@@6B@ ; DynamicVectorClass<dp88_AI_Unit *>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVdp88_AI_Unit@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@PAVdp88_AI_Unit@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@PAVdp88_AI_Unit@@@@6B@ DD FLAT:??_R4?$VectorClass@PAVdp88_AI_Unit@@@@6B@ ; VectorClass<dp88_AI_Unit *>::`vftable'
	DD	FLAT:??_E?$VectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@PAVdp88_AI_Unit@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z
	DD	FLAT:?Clear@?$VectorClass@PAVdp88_AI_Unit@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z
	DD	FLAT:?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_AI_Marker_Repairable@@6B@
CONST	SEGMENT
??_7dp88_AI_Marker_Repairable@@6B@ DD FLAT:??_R4dp88_AI_Marker_Repairable@@6B@ ; dp88_AI_Marker_Repairable::`vftable'
	DD	FLAT:??_Edp88_AI_Marker_Repairable@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AI_Marker_Repairable@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AI_Marker_HeavyVehicle@@6B@
CONST	SEGMENT
??_7dp88_AI_Marker_HeavyVehicle@@6B@ DD FLAT:??_R4dp88_AI_Marker_HeavyVehicle@@6B@ ; dp88_AI_Marker_HeavyVehicle::`vftable'
	DD	FLAT:??_Edp88_AI_Marker_HeavyVehicle@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AI_Marker_Building@@6B@
CONST	SEGMENT
??_7dp88_AI_Marker_Building@@6B@ DD FLAT:??_R4dp88_AI_Marker_Building@@6B@ ; dp88_AI_Marker_Building::`vftable'
	DD	FLAT:??_Edp88_AI_Marker_Building@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_AI_heavyVehicleMarker@@6B@
CONST	SEGMENT
??_7dp88_AI_heavyVehicleMarker@@6B@ DD FLAT:??_R4dp88_AI_heavyVehicleMarker@@6B@ ; dp88_AI_heavyVehicleMarker::`vftable'
	DD	FLAT:??_Edp88_AI_heavyVehicleMarker@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_AI_heavyVehicleMarker@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_customAI@@6B@
CONST	SEGMENT
??_7dp88_customAI@@6B@ DD FLAT:??_R4dp88_customAI@@6B@	; dp88_customAI::`vftable'
	DD	FLAT:??_Edp88_customAI@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z
	DD	FLAT:?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z
	DD	FLAT:?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
	DD	FLAT:?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
	DD	FLAT:?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
	DD	FLAT:?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7ObserverImpClass@@6B@
CONST	SEGMENT
??_7ObserverImpClass@@6B@ DD FLAT:??_R4ObserverImpClass@@6B@ ; ObserverImpClass::`vftable'
	DD	FLAT:??_EObserverImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ObserverImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ObserverImpClass@@MAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ObserverImpClass@@MAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ObserverImpClass@@MAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ObserverImpClass@@MAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
CONST	ENDS
;	COMDAT ??_7JFW_Object_Created_Hook_Base@@6B@
CONST	SEGMENT
??_7JFW_Object_Created_Hook_Base@@6B@ DD FLAT:??_R4JFW_Object_Created_Hook_Base@@6B@ ; JFW_Object_Created_Hook_Base::`vftable'
	DD	FLAT:??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7MultiKeyHookScriptImpClass@@6B@
CONST	SEGMENT
??_7MultiKeyHookScriptImpClass@@6B@ DD FLAT:??_R4MultiKeyHookScriptImpClass@@6B@ ; MultiKeyHookScriptImpClass::`vftable'
	DD	FLAT:??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
CONST	SEGMENT
??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ DD FLAT:??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vftable'
	DD	FLAT:??_E?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z
	DD	FLAT:?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
	DD	FLAT:?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
	DD	FLAT:?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ
	DD	FLAT:?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
	DD	FLAT:?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
	DD	FLAT:?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ
	DD	FLAT:?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ
CONST	ENDS
;	COMDAT ??_7JFW_Key_Hook_Base@@6B@
CONST	SEGMENT
??_7JFW_Key_Hook_Base@@6B@ DD FLAT:??_R4JFW_Key_Hook_Base@@6B@ ; JFW_Key_Hook_Base::`vftable'
	DD	FLAT:??_EJFW_Key_Hook_Base@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ReferencerClass@@6B@
CONST	SEGMENT
??_7ReferencerClass@@6B@ DD FLAT:??_R4ReferencerClass@@6B@ ; ReferencerClass::`vftable'
	DD	FLAT:??_EReferencerClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@ReferencerClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7PostLoadableClass@@6B@
CONST	SEGMENT
??_7PostLoadableClass@@6B@ DD FLAT:??_R4PostLoadableClass@@6B@ ; PostLoadableClass::`vftable'
	DD	FLAT:??_EPostLoadableClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7INIClass@@6B@
CONST	SEGMENT
??_7INIClass@@6B@ DD FLAT:??_R4INIClass@@6B@		; INIClass::`vftable'
	DD	FLAT:??_EINIClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_vector.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ScriptFactory@@6B@
CONST	SEGMENT
??_7ScriptFactory@@6B@ DD FLAT:??_R4ScriptFactory@@6B@	; ScriptFactory::`vftable'
	DD	FLAT:??_EScriptFactory@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ScriptImpClass@@6B@
CONST	SEGMENT
??_7ScriptImpClass@@6B@ DD FLAT:??_R4ScriptImpClass@@6B@ ; ScriptImpClass::`vftable'
	DD	FLAT:??_EScriptImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7ScriptClass@@6B@
CONST	SEGMENT
??_7ScriptClass@@6B@ DD FLAT:??_R4ScriptClass@@6B@	; ScriptClass::`vftable'
	DD	FLAT:??_EScriptClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7GameObjObserverClass@@6B@
CONST	SEGMENT
??_7GameObjObserverClass@@6B@ DD FLAT:??_R4GameObjObserverClass@@6B@ ; GameObjObserverClass::`vftable'
	DD	FLAT:??_EGameObjObserverClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
CONST	ENDS
CRT$XCU	SEGMENT
_dp88_AI_Tank_Offensive_Registrant$initializer$ DD FLAT:??__Edp88_AI_Tank_Offensive_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_ChargedTurret_Registrant$initializer$ DD FLAT:??__Edp88_AI_ChargedTurret_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?Objectives$initializer$@dp88_AI_Objective@@1P6AXXZA DD FLAT:??__E?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A@@YAXXZ ; dp88_AI_Objective::Objectives$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_Objective_Registrant$initializer$ DD FLAT:??__Edp88_AI_Objective_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_heavyVehicleMarker_Registrant$initializer$ DD FLAT:??__Edp88_AI_heavyVehicleMarker_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_Marker_Building_Registrant$initializer$ DD FLAT:??__Edp88_AI_Marker_Building_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_Marker_HeavyVehicle_Registrant$initializer$ DD FLAT:??__Edp88_AI_Marker_HeavyVehicle_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_Marker_Repairable_Registrant$initializer$ DD FLAT:??__Edp88_AI_Marker_Repairable_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_Turret_Registrant$initializer$ DD FLAT:??__Edp88_AI_Turret_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_PopupTurret_Registrant$initializer$ DD FLAT:??__Edp88_AI_PopupTurret_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_AI_PopupTurret_Spotter_Registrant$initializer$ DD FLAT:??__Edp88_AI_PopupTurret_Spotter_Registrant@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ
text$yd	SEGMENT
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ PROC ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
	call	??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ENDP ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z
_TEXT	SEGMENT
_endDword$ = -12					; size = 4
_dword$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
_pattern$ = 12						; size = 4
?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z PROC ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern, COMDAT
; _this$ = ecx

; 1445 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1446 : #ifdef DEBUG
; 1447 : 		static_assert(sizeof(T) % 4 == 0, "Expected type size to be a multiple of 4.");
; 1448 : 		DWORD* dword = (DWORD*)&object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _dword$[ebp], eax

; 1449 : 		DWORD* endDword = (DWORD*)(&object+1);

	mov	eax, DWORD PTR _object$[ebp]
	add	eax, 8
	mov	DWORD PTR _endDword$[ebp], eax

; 1450 : 		for (; dword < endDword; ++dword)

	jmp	SHORT $LN3@writeDummy
$LN2@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	add	eax, 4
	mov	DWORD PTR _dword$[ebp], eax
$LN3@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	cmp	eax, DWORD PTR _endDword$[ebp]
	jae	SHORT $LN4@writeDummy

; 1451 : 			*dword = pattern;

	mov	eax, DWORD PTR _dword$[ebp]
	mov	ecx, DWORD PTR _pattern$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN2@writeDummy
$LN4@writeDummy:

; 1452 : #endif
; 1453 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ENDP ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z
_TEXT	SEGMENT
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z PROC ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory, COMDAT
; _this$ = ecx

; 1436 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1437 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1438 : 		writeDummyPattern(object, 0xEDE7E10D);

	push	-303570675				; ede7e10dH
	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern

; 1439 : 		(T*&)object = FreeListHead;

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1440 : 		FreeListHead = &object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx

; 1441 : 		FreeObjectCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1442 : 	}

	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ENDP ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ
_TEXT	SEGMENT
tv82 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
_object$ = -20						; size = 4
_i$3 = -16						; size = 4
_newBlockListHead$4 = -12				; size = 4
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory, COMDAT
; _this$ = ecx

; 1413 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1415 :  		if (!FreeListHead)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN4@Allocate_O

; 1416 : 		{
; 1417 : 			void* newBlockListHead = (void*)((void*)new char[sizeof(void*) + sizeof(T[BLOCK_SIZE])]);

	push	OFFSET ??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@
	push	1417					; 00000589H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Allocate_O
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_O
	push	1417					; 00000589H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN7@Allocate_O:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN9@Allocate_O
$LN8@Allocate_O:
	push	2052					; 00000804H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN9@Allocate_O:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _newBlockListHead$4[ebp], ecx

; 1418 : 			*(void**)newBlockListHead = BlockListHead;

	mov	eax, DWORD PTR _newBlockListHead$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1419 : 			BlockListHead = newBlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newBlockListHead$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1420 : 			FreeListHead = (T*)((intptr_t)BlockListHead + sizeof(void*));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1421 : 			for (int i = 0; i < BLOCK_SIZE; i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@Allocate_O
$LN2@Allocate_O:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@Allocate_O:
	cmp	DWORD PTR _i$3[ebp], 256		; 00000100H
	jge	SHORT $LN1@Allocate_O

; 1422 : 				(T*&)FreeListHead[i] = &FreeListHead[i+1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
	jmp	SHORT $LN2@Allocate_O
$LN1@Allocate_O:

; 1423 : 			
; 1424 : 			(T*&)FreeListHead[BLOCK_SIZE-1] = NULL;

	mov	eax, 8
	imul	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], 0

; 1425 : 			FreeObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1426 : 			TotalObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN4@Allocate_O:

; 1427 : 		}
; 1428 : 
; 1429 : 		T* object = FreeListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _object$[ebp], ecx

; 1430 : 		FreeListHead = *(T**)(FreeListHead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1431 : 		FreeObjectCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1432 : 		return object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	mov	eax, DWORD PTR $T2[ebp]

; 1433 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
$T1 = -336						; size = 4
_nextBlock$2 = -268					; size = 4
_block$ = -264						; size = 4
_buffer$3 = -260					; size = 256
_this$ = -4						; size = 4
??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>, COMDAT
; _this$ = ecx

; 1393 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1394 : 		// If you hit the following assert, one or more objects were not freed.
; 1395 : 		if (FreeObjectCount != TotalObjectCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN3@ObjectPool

; 1396 : 		{
; 1397 : 			char buffer[256];
; 1398 : 			sprintf(buffer, "%d memory leaks found in " __FUNCTION__ "\n", TotalObjectCount - FreeObjectCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 1399 : 			OutputDebugStringA(buffer);

	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN3@ObjectPool:

; 1400 : 			// TODO: There are quite a few mem leaks of this kind. Fix them.
; 1401 : 		}
; 1402 : 
; 1403 : 		void* block = BlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _block$[ebp], ecx
$LN2@ObjectPool:

; 1404 :  		while (block)

	cmp	DWORD PTR _block$[ebp], 0
	je	SHORT $LN4@ObjectPool

; 1405 : 		{
; 1406 : 			void* nextBlock = *(void**)block;

	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nextBlock$2[ebp], ecx

; 1407 : 			delete[] block;

	push	OFFSET ??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@
	push	1407					; 0000057fH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@ObjectPool
	xor	ecx, ecx
	jne	SHORT $LN6@ObjectPool
	push	1407					; 0000057fH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@ObjectPool:
	jmp	SHORT $LN8@ObjectPool
$LN7@ObjectPool:
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@ObjectPool:

; 1408 : 			block = nextBlock;

	mov	eax, DWORD PTR _nextBlock$2[ebp]
	mov	DWORD PTR _block$[ebp], eax

; 1409 : 		}

	jmp	SHORT $LN2@ObjectPool
$LN4@ObjectPool:

; 1410 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>, COMDAT
; _this$ = ecx

; 1384 : 	ObjectPoolClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::FastCriticalSectionClass
	mov	eax, DWORD PTR [eax]

; 1385 : 	{
; 1386 : 		FreeListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1387 : 		BlockListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1388 : 		FreeObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1389 : 		TotalObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1390 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\singleton.h
;	COMDAT ?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ
_TEXT	SEGMENT
?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ PROC ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 		static T instancex;

	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getInstanc
	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
	or	eax, 1
	mov	DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51, eax
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
	call	??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
	push	OFFSET ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
	call	_atexit
	add	esp, 4
$LN1@getInstanc:

; 61   : 		return instancex;

	mov	eax, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex

; 62   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ENDP ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAH@std@@YA$$QAHAAH@Z PROC			; std::move<int &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVdp88_AI_Objective@@@std@@YA$$QAPAVdp88_AI_Objective@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVdp88_AI_Objective@@@std@@YA$$QAPAVdp88_AI_Objective@@AAPAV1@@Z PROC ; std::move<dp88_AI_Objective * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVdp88_AI_Objective@@@std@@YA$$QAPAVdp88_AI_Objective@@AAPAV1@@Z ENDP ; std::move<dp88_AI_Objective * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVdp88_AI_Unit@@@std@@YA$$QAPAVdp88_AI_Unit@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVdp88_AI_Unit@@@std@@YA$$QAPAVdp88_AI_Unit@@AAPAV1@@Z PROC ; std::move<dp88_AI_Unit * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVdp88_AI_Unit@@@std@@YA$$QAPAVdp88_AI_Unit@@AAPAV1@@Z ENDP ; std::move<dp88_AI_Unit * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 69   : 	SLNode(T *obj) : GenericSLNode(obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericSLNode@@IAE@PAX@Z		; GenericSLNode::GenericSLNode
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (T*)NodeData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		return (SLNode<T>*)NodeNext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next, COMDAT
; _this$ = ecx

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 		NodeNext = n;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx

; 59   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_PopupTurret_Spotter_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_PopupTurret_Spotter_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AI_PopupTurret_Spotter_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_PopupTurret_Spotter_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@A ; dp88_AI_PopupTurret_Spotter_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_PopupTurret_Spotter_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AI_PopupTurret_Spotter_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_PopupTurret_Spotter_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_PopupTurret_Spotter_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AI_PopupTurret_Spotter_Registrant'', COMDAT

; 1722 : ScriptRegistrant<dp88_AI_PopupTurret_Spotter> dp88_AI_PopupTurret_Spotter_Registrant("dp88_AI_PopupTurret_Spotter","tId:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_07FEJEIAGM@tId?3int?$AA@
	push	OFFSET ??_C@_0BM@GAGONNPO@dp88_AI_PopupTurret_Spotter?$AA@
	mov	ecx, OFFSET ?dp88_AI_PopupTurret_Spotter_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@A ; dp88_AI_PopupTurret_Spotter_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::ScriptRegistrant<dp88_AI_PopupTurret_Spotter>
	push	OFFSET ??__Fdp88_AI_PopupTurret_Spotter_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_PopupTurret_Spotter_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_PopupTurret_Spotter_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AI_PopupTurret_Spotter_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::~ScriptRegistrant<dp88_AI_PopupTurret_Spotter>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::~ScriptRegistrant<dp88_AI_PopupTurret_Spotter>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DM@OOJHOCOH@ScriptRegistrant?$DMclass?5dp88_AI_P@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_PopupTurret_Spotter@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::ScriptRegistrant<dp88_AI_PopupTurret_Spotter>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_PopupTurret_Spotter@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_PopupTurret_Spotter>::ScriptRegistrant<dp88_AI_PopupTurret_Spotter>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_PopupTurret_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_PopupTurret_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_AI_PopupTurret_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_PopupTurret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@A ; dp88_AI_PopupTurret_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_PopupTurret_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_AI_PopupTurret_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_PopupTurret_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_PopupTurret_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_AI_PopupTurret_Registrant'', COMDAT

; 1721 : ScriptRegistrant<dp88_AI_PopupTurret> dp88_AI_PopupTurret_Registrant("dp88_AI_PopupTurret","Priority_Infantry=1.0:float,Weapon_Infantry=1:int,Splash_Infantry=0:int,Priority_Light_Vehicle=5.0:float,Weapon_Light_Vehicle=1:int,Priority_Heavy_Vehicle=7.0:float,Weapon_Heavy_Vehicle=1:int,Priority_VTOL=5.0:float,Weapon_VTOL=1:int,Min_Attack_Range=0:int,Max_Attack_Range=150:int,Min_Attack_Range_Secondary=0:int,Max_Attack_Range_Secondary=150:int,Deploy_Animation:string,Deploy_Animation_Frames:int,Deploy_Sound:string,Deploy_Timeout:int,Spotter_Preset:string,Modifier_Distance=0.25:float,Modifier_Target_Damage=0.1:float,Modifier_Target_Value=0.05:float,Requires_Power=0:int,Debug=0:int,Detects_Stealth=1:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0CGF@IAJMADCM@Priority_Infantry?$DN1?40?3float?0Weap@
	push	OFFSET ??_C@_0BE@HCJJAADE@dp88_AI_PopupTurret?$AA@
	mov	ecx, OFFSET ?dp88_AI_PopupTurret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@A ; dp88_AI_PopupTurret_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_PopupTurret>::ScriptRegistrant<dp88_AI_PopupTurret>
	push	OFFSET ??__Fdp88_AI_PopupTurret_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_PopupTurret_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_PopupTurret_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_AI_PopupTurret_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_PopupTurret>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_PopupTurret>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AI_PopupTurret>::~ScriptRegistrant<dp88_AI_PopupTurret>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AI_PopupTurret>::~ScriptRegistrant<dp88_AI_PopupTurret>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_PopupTurret>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DE@PMCKICJG@ScriptRegistrant?$DMclass?5dp88_AI_P@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	168					; 000000a8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_PopupTurret@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_PopupTurret>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_PopupTurret>::ScriptRegistrant<dp88_AI_PopupTurret>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_PopupTurret@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_PopupTurret>::ScriptRegistrant<dp88_AI_PopupTurret>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_Turret_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_Turret_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_AI_Turret_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_Turret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Turret@@@@A ; dp88_AI_Turret_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_Turret_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_AI_Turret_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_Turret_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_Turret_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_AI_Turret_Registrant'', COMDAT

; 1720 : ScriptRegistrant<dp88_AI_Turret> dp88_AI_Turret_Registrant("dp88_AI_Turret","Priority_Infantry=1.0:float,Weapon_Infantry=1:int,Splash_Infantry=0:int,Priority_Light_Vehicle=5.0:float,Weapon_Light_Vehicle=1:int,Priority_Heavy_Vehicle=7.0:float,Weapon_Heavy_Vehicle=1:int,Priority_VTOL=5.0:float,Weapon_VTOL=1:int,Min_Attack_Range=0:int,Max_Attack_Range=150:int,Min_Attack_Range_Secondary=0:int,Max_Attack_Range_Secondary=150:int,Modifier_Distance=0.25:float,Modifier_Target_Damage=0.1:float,Modifier_Target_Value=0.05:float,Requires_Power=0:int,Debug=0:int,Detects_Stealth=1:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BPE@NMPEDIOA@Priority_Infantry?$DN1?40?3float?0Weap@
	push	OFFSET ??_C@_0P@OKEJDPHI@dp88_AI_Turret?$AA@
	mov	ecx, OFFSET ?dp88_AI_Turret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Turret@@@@A ; dp88_AI_Turret_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_Turret@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Turret>::ScriptRegistrant<dp88_AI_Turret>
	push	OFFSET ??__Fdp88_AI_Turret_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_Turret_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_Turret_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_AI_Turret_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_Turret>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_Turret>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_AI_Turret>::~ScriptRegistrant<dp88_AI_Turret>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_AI_Turret>::~ScriptRegistrant<dp88_AI_Turret>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_Turret>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0CP@JIIGOIBL@ScriptRegistrant?$DMclass?5dp88_AI_T@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_Turret@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_Turret@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_Turret>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_Turret@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_Turret@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_Turret>::ScriptRegistrant<dp88_AI_Turret>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_Turret@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_Turret@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_Turret>::ScriptRegistrant<dp88_AI_Turret>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_Marker_Repairable_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_Marker_Repairable_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AI_Marker_Repairable_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_Marker_Repairable_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@A ; dp88_AI_Marker_Repairable_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_Marker_Repairable_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AI_Marker_Repairable_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_Marker_Repairable_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_Marker_Repairable_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AI_Marker_Repairable_Registrant'', COMDAT

; 1718 : ScriptRegistrant<dp88_AI_Marker_Repairable> dp88_AI_Marker_Repairable_Registrant("dp88_AI_Marker_Repairable","Pathfind_Distance=5.0:float");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BM@EFFHBFKH@Pathfind_Distance?$DN5?40?3float?$AA@
	push	OFFSET ??_C@_0BK@BMNLCPDP@dp88_AI_Marker_Repairable?$AA@
	mov	ecx, OFFSET ?dp88_AI_Marker_Repairable_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@A ; dp88_AI_Marker_Repairable_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Marker_Repairable>::ScriptRegistrant<dp88_AI_Marker_Repairable>
	push	OFFSET ??__Fdp88_AI_Marker_Repairable_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_Marker_Repairable_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_Marker_Repairable_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AI_Marker_Repairable_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_Marker_Repairable>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AI_Marker_Repairable>::~ScriptRegistrant<dp88_AI_Marker_Repairable>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AI_Marker_Repairable>::~ScriptRegistrant<dp88_AI_Marker_Repairable>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_Marker_Repairable>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DK@PAAIFCON@ScriptRegistrant?$DMclass?5dp88_AI_M@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_Marker_Repairable@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_Marker_Repairable>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_Marker_Repairable>::ScriptRegistrant<dp88_AI_Marker_Repairable>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_Marker_Repairable@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_Marker_Repairable>::ScriptRegistrant<dp88_AI_Marker_Repairable>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_Marker_HeavyVehicle_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_Marker_HeavyVehicle_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AI_Marker_HeavyVehicle_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_Marker_HeavyVehicle_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@A ; dp88_AI_Marker_HeavyVehicle_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_Marker_HeavyVehicle_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AI_Marker_HeavyVehicle_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_Marker_HeavyVehicle_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_Marker_HeavyVehicle_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AI_Marker_HeavyVehicle_Registrant'', COMDAT

; 1715 : ScriptRegistrant<dp88_AI_Marker_HeavyVehicle> dp88_AI_Marker_HeavyVehicle_Registrant("dp88_AI_Marker_HeavyVehicle","");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0BM@OHLJBOHK@dp88_AI_Marker_HeavyVehicle?$AA@
	mov	ecx, OFFSET ?dp88_AI_Marker_HeavyVehicle_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@A ; dp88_AI_Marker_HeavyVehicle_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>
	push	OFFSET ??__Fdp88_AI_Marker_HeavyVehicle_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_Marker_HeavyVehicle_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_Marker_HeavyVehicle_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AI_Marker_HeavyVehicle_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::~ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::~ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DM@EMNGOKNL@ScriptRegistrant?$DMclass?5dp88_AI_M@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_Marker_HeavyVehicle@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_Marker_HeavyVehicle@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>::ScriptRegistrant<dp88_AI_Marker_HeavyVehicle>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_Marker_Building_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_Marker_Building_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AI_Marker_Building_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_Marker_Building_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@A ; dp88_AI_Marker_Building_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_Marker_Building_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AI_Marker_Building_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_Marker_Building_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_Marker_Building_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AI_Marker_Building_Registrant'', COMDAT

; 1712 : ScriptRegistrant<dp88_AI_Marker_Building> dp88_AI_Marker_Building_Registrant("dp88_AI_Marker_Building","");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0BI@CAAFFJKG@dp88_AI_Marker_Building?$AA@
	mov	ecx, OFFSET ?dp88_AI_Marker_Building_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@A ; dp88_AI_Marker_Building_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Marker_Building>::ScriptRegistrant<dp88_AI_Marker_Building>
	push	OFFSET ??__Fdp88_AI_Marker_Building_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_Marker_Building_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_Marker_Building_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AI_Marker_Building_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_Marker_Building>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_Marker_Building>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AI_Marker_Building>::~ScriptRegistrant<dp88_AI_Marker_Building>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AI_Marker_Building>::~ScriptRegistrant<dp88_AI_Marker_Building>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_Marker_Building>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DI@JJEMAEDL@ScriptRegistrant?$DMclass?5dp88_AI_M@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_Marker_Building@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_Marker_Building>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_Marker_Building>::ScriptRegistrant<dp88_AI_Marker_Building>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_Marker_Building@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_Marker_Building>::ScriptRegistrant<dp88_AI_Marker_Building>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_heavyVehicleMarker_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_heavyVehicleMarker_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AI_heavyVehicleMarker_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_heavyVehicleMarker_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@A ; dp88_AI_heavyVehicleMarker_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_heavyVehicleMarker_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AI_heavyVehicleMarker_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_heavyVehicleMarker_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_heavyVehicleMarker_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AI_heavyVehicleMarker_Registrant'', COMDAT

; 1709 : ScriptRegistrant<dp88_AI_heavyVehicleMarker> dp88_AI_heavyVehicleMarker_Registrant("dp88_AI_heavyVehicleMarker","");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0BL@MGGLMLEA@dp88_AI_heavyVehicleMarker?$AA@
	mov	ecx, OFFSET ?dp88_AI_heavyVehicleMarker_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@A ; dp88_AI_heavyVehicleMarker_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::ScriptRegistrant<dp88_AI_heavyVehicleMarker>
	push	OFFSET ??__Fdp88_AI_heavyVehicleMarker_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_heavyVehicleMarker_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_heavyVehicleMarker_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AI_heavyVehicleMarker_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::~ScriptRegistrant<dp88_AI_heavyVehicleMarker>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::~ScriptRegistrant<dp88_AI_heavyVehicleMarker>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DL@BBKKKCKG@ScriptRegistrant?$DMclass?5dp88_AI_h@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_heavyVehicleMarker@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::ScriptRegistrant<dp88_AI_heavyVehicleMarker>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_heavyVehicleMarker@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_heavyVehicleMarker>::ScriptRegistrant<dp88_AI_heavyVehicleMarker>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_Objective_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_Objective_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_AI_Objective_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_Objective_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Objective@@@@A ; dp88_AI_Objective_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_Objective_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_AI_Objective_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_Objective_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_Objective_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_AI_Objective_Registrant'', COMDAT

; 1697 :   "Debug_Tag:string");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0JL@PCLPMECL@Team?3int?0Type?$DN1?3int?0Range?$DN25?3int@
	push	OFFSET ??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@
	mov	ecx, OFFSET ?dp88_AI_Objective_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Objective@@@@A ; dp88_AI_Objective_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_Objective@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Objective>::ScriptRegistrant<dp88_AI_Objective>
	push	OFFSET ??__Fdp88_AI_Objective_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_Objective_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_Objective_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_AI_Objective_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_Objective>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_Objective>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_AI_Objective>::~ScriptRegistrant<dp88_AI_Objective>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_AI_Objective>::~ScriptRegistrant<dp88_AI_Objective>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_Objective>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DC@DKOMIJBP@ScriptRegistrant?$DMclass?5dp88_AI_O@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_Objective@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_Objective@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_Objective>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_Objective@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_Objective@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_Objective>::ScriptRegistrant<dp88_AI_Objective>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_Objective@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_Objective@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_Objective>::ScriptRegistrant<dp88_AI_Objective>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__F?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'dp88_AI_Objective::Objectives'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??1?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'dp88_AI_Objective::Objectives''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__E?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A@@YAXXZ
text$yc	SEGMENT
??__E?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A@@YAXXZ PROC ; `dynamic initializer for 'dp88_AI_Objective::Objectives'', COMDAT

; 1520 : DynamicVectorClass<dp88_AI_Objective *> dp88_AI_Objective::Objectives;

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	0
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??0?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE@IPBQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::DynamicVectorClass<dp88_AI_Objective *>
	push	OFFSET ??__F?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_Objective::Objectives''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'dp88_AI_Objective::Objectives''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_ChargedTurret_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_ChargedTurret_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AI_ChargedTurret_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_ChargedTurret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@A ; dp88_AI_ChargedTurret_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_ChargedTurret_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AI_ChargedTurret_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_ChargedTurret_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_ChargedTurret_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AI_ChargedTurret_Registrant'', COMDAT

; 1486 :   "Detects_Stealth=1:int");

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0DAO@GPFAKAHL@Priority_Infantry?$DN1?40?3float?0Weap@
	push	OFFSET ??_C@_0BG@GNKJMIEN@dp88_AI_ChargedTurret?$AA@
	mov	ecx, OFFSET ?dp88_AI_ChargedTurret_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@A ; dp88_AI_ChargedTurret_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_ChargedTurret>::ScriptRegistrant<dp88_AI_ChargedTurret>
	push	OFFSET ??__Fdp88_AI_ChargedTurret_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_ChargedTurret_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_ChargedTurret_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AI_ChargedTurret_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_ChargedTurret>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_ChargedTurret>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AI_ChargedTurret>::~ScriptRegistrant<dp88_AI_ChargedTurret>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AI_ChargedTurret>::~ScriptRegistrant<dp88_AI_ChargedTurret>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_ChargedTurret>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DG@PMGLKLPB@ScriptRegistrant?$DMclass?5dp88_AI_C@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	168					; 000000a8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_ChargedTurret@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_ChargedTurret>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_ChargedTurret>::ScriptRegistrant<dp88_AI_ChargedTurret>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_ChargedTurret@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_ChargedTurret>::ScriptRegistrant<dp88_AI_ChargedTurret>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_AI_Tank_Offensive_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_AI_Tank_Offensive_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_AI_Tank_Offensive_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_AI_Tank_Offensive_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@A ; dp88_AI_Tank_Offensive_Registrant
	call	??1?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_AI_Tank_Offensive_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_AI_Tank_Offensive_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__Edp88_AI_Tank_Offensive_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_AI_Tank_Offensive_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_AI_Tank_Offensive_Registrant'', COMDAT

; 750  : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0CFI@PPMHEDDD@Priority_Infantry?$DN1?40?3float?0Weap@
	push	OFFSET ??_C@_0BH@JDEODPME@dp88_AI_Tank_Offensive?$AA@
	mov	ecx, OFFSET ?dp88_AI_Tank_Offensive_Registrant@@3V?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@A ; dp88_AI_Tank_Offensive_Registrant
	call	??0?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_AI_Tank_Offensive>::ScriptRegistrant<dp88_AI_Tank_Offensive>
	push	OFFSET ??__Fdp88_AI_Tank_Offensive_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_Tank_Offensive_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_AI_Tank_Offensive_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_AI_Tank_Offensive_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_AI_Tank_Offensive>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_AI_Tank_Offensive>::~ScriptRegistrant<dp88_AI_Tank_Offensive>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_AI_Tank_Offensive>::~ScriptRegistrant<dp88_AI_Tank_Offensive>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_AI_Tank_Offensive>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DH@IMHIKNGJ@ScriptRegistrant?$DMclass?5dp88_AI_T@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	160					; 000000a0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_AI_Tank_Offensive@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_AI_Tank_Offensive>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_AI_Tank_Offensive>::ScriptRegistrant<dp88_AI_Tank_Offensive>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_AI_Tank_Offensive@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_AI_Tank_Offensive>::ScriptRegistrant<dp88_AI_Tank_Offensive>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@H@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@H@@UAEPAXI@Z PROC		; DynamicVectorClass<int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@H@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@H@@UAEPAXI@Z ENDP		; DynamicVectorClass<int>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@H@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@H@@UAE@XZ PROC			; DynamicVectorClass<int>::~DynamicVectorClass<int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@H@@UAE@XZ		; VectorClass<int>::~VectorClass<int>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@H@@UAE@XZ ENDP			; DynamicVectorClass<int>::~DynamicVectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@H@@UAEHABH@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@H@@UAEHABH@Z PROC		; DynamicVectorClass<int>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@H@@QBEHXZ	; DynamicVectorClass<int>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@H@@UAEHABH@Z ENDP		; DynamicVectorClass<int>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@H@@UAEHPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@H@@UAEHPBH@Z PROC		; DynamicVectorClass<int>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@H@@UAEHPBH@Z		; VectorClass<int>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@H@@UAEHPBH@Z ENDP		; DynamicVectorClass<int>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@H@@QBEHXZ PROC		; DynamicVectorClass<int>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@H@@QBEHXZ ENDP		; DynamicVectorClass<int>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@H@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@H@@UAEXXZ PROC		; DynamicVectorClass<int>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@H@@UAEXXZ		; VectorClass<int>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@H@@UAEXXZ ENDP		; DynamicVectorClass<int>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z PROC	; DynamicVectorClass<int>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@H@@UAE_NHPBH@Z	; VectorClass<int>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@H@@UAE_NHPBH@Z ENDP	; DynamicVectorClass<int>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$DynamicVectorClass@H@@QAE@ABV0@@Z PROC		; DynamicVectorClass<int>::DynamicVectorClass<int>, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@H@@QAE@ABV0@@Z		; VectorClass<int>::VectorClass<int>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@H@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 250  : 		/* nothing */
; 251  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$DynamicVectorClass@H@@QAE@ABV0@@Z ENDP		; DynamicVectorClass<int>::DynamicVectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@H@@QAE@IPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@H@@QAE@IPBH@Z PROC		; DynamicVectorClass<int>::DynamicVectorClass<int>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@H@@QAE@HPBH@Z		; VectorClass<int>::VectorClass<int>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@H@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@H@@QAE@IPBH@Z ENDP		; DynamicVectorClass<int>::DynamicVectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@H@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@H@@UAEPAXI@Z PROC			; VectorClass<int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@H@@UAE@XZ		; VectorClass<int>::~VectorClass<int>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@H@@UAEPAXI@Z ENDP			; VectorClass<int>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@H@@UAEHABH@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@H@@UAEHABH@Z PROC			; VectorClass<int>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@H@@UAEHABH@Z ENDP			; VectorClass<int>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@H@@UAEHPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@H@@UAEHPBH@Z PROC			; VectorClass<int>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@H@@QAEAAHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@H@@UAEHPBH@Z ENDP			; VectorClass<int>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@H@@QBEHXZ PROC			; VectorClass<int>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@H@@QBEHXZ ENDP			; VectorClass<int>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@H@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@H@@UAEXXZ PROC			; VectorClass<int>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0BI@DBAHDKIN@VectorClass?$DMint?$DO?3?3Clear?$AA@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@H@@UAEXXZ ENDP			; VectorClass<int>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@H@@UAE_NHPBH@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@H@@UAE_NHPBH@Z PROC		; VectorClass<int>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0BJ@EJBDLKIC@VectorClass?$DMint?$DO?3?3Resize?$AA@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@H@@UAE_NHPBH@Z ENDP		; VectorClass<int>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@H@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@H@@UBE_NABV0@@Z PROC			; VectorClass<int>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@H@@QBEABHH@Z		; VectorClass<int>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@H@@UBE_NABV0@@Z ENDP			; VectorClass<int>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@H@@QBEABHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@H@@QBEABHH@Z PROC			; VectorClass<int>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@H@@QBEABHH@Z ENDP			; VectorClass<int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@H@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@H@@QAEAAHH@Z PROC			; VectorClass<int>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@H@@QAEAAHH@Z ENDP			; VectorClass<int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@H@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@H@@UAE@XZ PROC				; VectorClass<int>::~VectorClass<int>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@H@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@H@@UAEXXZ		; VectorClass<int>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@H@@UAE@XZ ENDP				; VectorClass<int>::~VectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@H@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@H@@QAEAAV0@ABV0@@Z PROC		; VectorClass<int>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0BN@BIKGHIDO@VectorClass?$DMint?$DO?3?3operator?5?$DN?$AA@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN11@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN12@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@H@@QBEABHH@Z		; VectorClass<int>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@H@@QAEAAV0@ABV0@@Z ENDP		; VectorClass<int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??0?$VectorClass@H@@QAE@ABV0@@Z PROC			; VectorClass<int>::VectorClass<int>, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@H@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 65   : 		*this = vector;

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@H@@QAEAAV0@ABV0@@Z	; VectorClass<int>::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VectorClass@H@@QAE@ABV0@@Z ENDP			; VectorClass<int>::VectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@H@@QAE@HPBH@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@H@@QAE@HPBH@Z PROC			; VectorClass<int>::VectorClass<int>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@H@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0BO@GNAGKIAD@VectorClass?$DMint?$DO?3?3VectorClass?$AA@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@H@@QAE@HPBH@Z ENDP			; VectorClass<int>::VectorClass<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__F?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'dp88_AI_Unit::ListOfAIUnits'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A ; dp88_AI_Unit::ListOfAIUnits
	call	??1?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'dp88_AI_Unit::ListOfAIUnits''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??__E?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A@@YAXXZ
text$yc	SEGMENT
??__E?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A@@YAXXZ PROC ; `dynamic initializer for 'dp88_AI_Unit::ListOfAIUnits'', COMDAT

; 392  : DynamicVectorClass<dp88_AI_Unit*> dp88_AI_Unit::ListOfAIUnits;

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	0
	mov	ecx, OFFSET ?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A ; dp88_AI_Unit::ListOfAIUnits
	call	??0?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE@IPBQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::DynamicVectorClass<dp88_AI_Unit *>
	push	OFFSET ??__F?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A@@YAXXZ ; `dynamic atexit destructor for 'dp88_AI_Unit::ListOfAIUnits''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'dp88_AI_Unit::ListOfAIUnits''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z PROC		; ArmorWarheadManager::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z ENDP		; ArmorWarheadManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vehiclegameobjdef.h
;	COMDAT ?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ PROC		; VehicleGameObjDef::Get_Seat_Count, COMDAT
; _this$ = ecx

; 58   : 	int Get_Seat_Count() const {return NumSeats;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ ENDP		; VehicleGameObjDef::Get_Seat_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_Objective@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_Objective@@UAEPAXI@Z PROC			; dp88_AI_Objective::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Objective@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_Objective@@UAEPAXI@Z ENDP			; dp88_AI_Objective::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_Objective@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_Objective@@UAE@XZ PROC			; dp88_AI_Objective::~dp88_AI_Objective, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_Objective@@UAE@XZ ENDP			; dp88_AI_Objective::~dp88_AI_Objective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_Objective@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_Objective@@QAE@XZ PROC			; dp88_AI_Objective::dp88_AI_Objective, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_Objective@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_Objective@@QAE@XZ ENDP			; dp88_AI_Objective::dp88_AI_Objective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z PROC ; DynamicVectorClass<dp88_AI_Objective *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<dp88_AI_Objective *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE@XZ PROC ; DynamicVectorClass<dp88_AI_Objective *>::~DynamicVectorClass<dp88_AI_Objective *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVdp88_AI_Objective@@@@UAE@XZ ; VectorClass<dp88_AI_Objective *>::~VectorClass<dp88_AI_Objective *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE@XZ ENDP ; DynamicVectorClass<dp88_AI_Objective *>::~DynamicVectorClass<dp88_AI_Objective *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z PROC ; DynamicVectorClass<dp88_AI_Objective *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Objective *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z ENDP ; DynamicVectorClass<dp88_AI_Objective *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z PROC ; DynamicVectorClass<dp88_AI_Objective *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z ; VectorClass<dp88_AI_Objective *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z ENDP ; DynamicVectorClass<dp88_AI_Objective *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NH@Z PROC ; DynamicVectorClass<dp88_AI_Objective *>::Delete, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		if (index < ActiveCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN4@Delete

; 446  : 		{
; 447  : 			ActiveCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 448  : 			for (int i = index; i < ActiveCount; i++)

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN3@Delete
$LN2@Delete:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Delete:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN1@Delete

; 449  : 			{
; 450  : 				(*this)[i] = std::move((*this)[i+1]);

	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	push	eax
	call	??$move@AAPAVdp88_AI_Objective@@@std@@YA$$QAPAVdp88_AI_Objective@@AAPAV1@@Z ; std::move<dp88_AI_Objective * &>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 451  : 			}

	jmp	SHORT $LN2@Delete
$LN1@Delete:

; 452  : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Delete
$LN4@Delete:

; 453  : 		}
; 454  : 		return false;

	xor	al, al
$LN5@Delete:

; 455  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NH@Z ENDP ; DynamicVectorClass<dp88_AI_Objective *>::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z PROC ; DynamicVectorClass<dp88_AI_Objective *>::DeleteObj, COMDAT
; _this$ = ecx

; 435  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 		int id = ID(object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR _id$[ebp], eax

; 437  : 		if (id != -1)

	cmp	DWORD PTR _id$[ebp], -1
	je	SHORT $LN1@DeleteObj

; 438  : 		{
; 439  : 			return Delete(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NH@Z ; DynamicVectorClass<dp88_AI_Objective *>::Delete
	jmp	SHORT $LN2@DeleteObj
$LN1@DeleteObj:

; 440  : 		}
; 441  : 		return false;

	xor	al, al
$LN2@DeleteObj:

; 442  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z ENDP ; DynamicVectorClass<dp88_AI_Objective *>::DeleteObj
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z PROC ; DynamicVectorClass<dp88_AI_Objective *>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; VectorClass<dp88_AI_Objective *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; VectorClass<dp88_AI_Objective *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z ENDP ; DynamicVectorClass<dp88_AI_Objective *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ PROC ; DynamicVectorClass<dp88_AI_Objective *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ENDP ; DynamicVectorClass<dp88_AI_Objective *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEXXZ PROC ; DynamicVectorClass<dp88_AI_Objective *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVdp88_AI_Objective@@@@UAEXXZ ; VectorClass<dp88_AI_Objective *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAEXXZ ENDP ; DynamicVectorClass<dp88_AI_Objective *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z PROC ; DynamicVectorClass<dp88_AI_Objective *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z ; VectorClass<dp88_AI_Objective *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; VectorClass<dp88_AI_Objective *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; VectorClass<dp88_AI_Objective *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z ENDP ; DynamicVectorClass<dp88_AI_Objective *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE@IPBQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE@IPBQAVdp88_AI_Objective@@@Z PROC ; DynamicVectorClass<dp88_AI_Objective *>::DynamicVectorClass<dp88_AI_Objective *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAVdp88_AI_Objective@@@@QAE@HPBQAVdp88_AI_Objective@@@Z ; VectorClass<dp88_AI_Objective *>::VectorClass<dp88_AI_Objective *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAVdp88_AI_Objective@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE@IPBQAVdp88_AI_Objective@@@Z ENDP ; DynamicVectorClass<dp88_AI_Objective *>::DynamicVectorClass<dp88_AI_Objective *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z PROC ; VectorClass<dp88_AI_Objective *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVdp88_AI_Objective@@@@UAE@XZ ; VectorClass<dp88_AI_Objective *>::~VectorClass<dp88_AI_Objective *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAVdp88_AI_Objective@@@@UAEPAXI@Z ENDP ; VectorClass<dp88_AI_Objective *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z PROC ; VectorClass<dp88_AI_Objective *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHABQAVdp88_AI_Objective@@@Z ENDP ; VectorClass<dp88_AI_Objective *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z PROC ; VectorClass<dp88_AI_Objective *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVdp88_AI_Objective@@@@UAEHPBQAVdp88_AI_Objective@@@Z ENDP ; VectorClass<dp88_AI_Objective *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ PROC ; VectorClass<dp88_AI_Objective *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ENDP ; VectorClass<dp88_AI_Objective *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAVdp88_AI_Objective@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAVdp88_AI_Objective@@@@UAEXXZ PROC ; VectorClass<dp88_AI_Objective *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CO@FJNOIHMM@VectorClass?$DMclass?5dp88_AI_Object@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAVdp88_AI_Objective@@@@UAEXXZ ENDP ; VectorClass<dp88_AI_Objective *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z PROC ; VectorClass<dp88_AI_Objective *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CP@EIKABCDJ@VectorClass?$DMclass?5dp88_AI_Object@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CP@EIKABCDJ@VectorClass?$DMclass?5dp88_AI_Object@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAVdp88_AI_Objective@@@std@@YA$$QAPAVdp88_AI_Objective@@AAPAV1@@Z ; std::move<dp88_AI_Objective * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CP@EIKABCDJ@VectorClass?$DMclass?5dp88_AI_Object@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAVdp88_AI_Objective@@@@UAE_NHPBQAVdp88_AI_Objective@@@Z ENDP ; VectorClass<dp88_AI_Objective *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAVdp88_AI_Objective@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAVdp88_AI_Objective@@@@UBE_NABV0@@Z PROC ; VectorClass<dp88_AI_Objective *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; VectorClass<dp88_AI_Objective *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QBEABQAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAVdp88_AI_Objective@@@@UBE_NABV0@@Z ENDP ; VectorClass<dp88_AI_Objective *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVdp88_AI_Objective@@@@QBEABQAVdp88_AI_Objective@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVdp88_AI_Objective@@@@QBEABQAVdp88_AI_Objective@@H@Z PROC ; VectorClass<dp88_AI_Objective *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVdp88_AI_Objective@@@@QBEABQAVdp88_AI_Objective@@H@Z ENDP ; VectorClass<dp88_AI_Objective *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z PROC ; VectorClass<dp88_AI_Objective *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ENDP ; VectorClass<dp88_AI_Objective *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAVdp88_AI_Objective@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAVdp88_AI_Objective@@@@UAE@XZ PROC	; VectorClass<dp88_AI_Objective *>::~VectorClass<dp88_AI_Objective *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVdp88_AI_Objective@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVdp88_AI_Objective@@@@UAEXXZ ; VectorClass<dp88_AI_Objective *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAVdp88_AI_Objective@@@@UAE@XZ ENDP	; VectorClass<dp88_AI_Objective *>::~VectorClass<dp88_AI_Objective *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAVdp88_AI_Objective@@@@QAE@HPBQAVdp88_AI_Objective@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAVdp88_AI_Objective@@@@QAE@HPBQAVdp88_AI_Objective@@@Z PROC ; VectorClass<dp88_AI_Objective *>::VectorClass<dp88_AI_Objective *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVdp88_AI_Objective@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0DE@FMMNNBOE@VectorClass?$DMclass?5dp88_AI_Object@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0DE@FMMNNBOE@VectorClass?$DMclass?5dp88_AI_Object@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAVdp88_AI_Objective@@@@QAE@HPBQAVdp88_AI_Objective@@@Z ENDP ; VectorClass<dp88_AI_Objective *>::VectorClass<dp88_AI_Objective *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?GetUnitType@dp88_AI_Objective@@IAEEPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?GetUnitType@dp88_AI_Objective@@IAEEPAVScriptableGameObj@@@Z PROC ; dp88_AI_Objective::GetUnitType, COMDAT
; _this$ = ecx

; 1576 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1577 :   if (obj->As_SoldierGameObj() && !Get_Fly_Mode(obj))

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	SHORT $LN6@GetUnitTyp
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Fly_Mode@@YA_NPAVScriptableGameObj@@@Z ; Get_Fly_Mode
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@GetUnitTyp

; 1578 :     return UNITTYPE_SOLDIER;

	xor	al, al
	jmp	$LN7@GetUnitTyp
$LN6@GetUnitTyp:

; 1579 : 
; 1580 :   if (Get_Vehicle_Mode(obj) == VEHICLE_TYPE_FLYING || (obj->As_SoldierGameObj() && Get_Fly_Mode(obj)))

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Mode@@YAIPAVScriptableGameObj@@@Z ; Get_Vehicle_Mode
	add	esp, 4
	cmp	eax, 3
	je	SHORT $LN4@GetUnitTyp
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	SHORT $LN5@GetUnitTyp
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Fly_Mode@@YA_NPAVScriptableGameObj@@@Z ; Get_Fly_Mode
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@GetUnitTyp
$LN4@GetUnitTyp:

; 1581 :     return UNITTYPE_AIRCRAFT;

	mov	al, 3
	jmp	SHORT $LN7@GetUnitTyp
$LN5@GetUnitTyp:

; 1582 : 
; 1583 :   if (obj->As_VehicleGameObj())

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN3@GetUnitTyp

; 1584 :   {
; 1585 :     if (Is_Script_Attached(obj, "dp88_AI_heavyVehicleMarker") || Is_Script_Attached(obj, "dp88_AI_Marker_HeavyVehicle"))

	push	OFFSET ??_C@_0BL@MGGLMLEA@dp88_AI_heavyVehicleMarker?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z ; Is_Script_Attached
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@GetUnitTyp
	push	OFFSET ??_C@_0BM@OHLJBOHK@dp88_AI_Marker_HeavyVehicle?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z ; Is_Script_Attached
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetUnitTyp
$LN1@GetUnitTyp:

; 1586 :       return UNITTYPE_HVEHICLE;

	mov	al, 2
	jmp	SHORT $LN7@GetUnitTyp
$LN2@GetUnitTyp:

; 1587 :     return UNITTYPE_LVEHICLE;

	mov	al, 1
	jmp	SHORT $LN7@GetUnitTyp
$LN3@GetUnitTyp:

; 1588 :   }
; 1589 : 
; 1590 :   return UNITTYPE_UNKNOWN;

	or	al, 255					; 000000ffH
$LN7@GetUnitTyp:

; 1591 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitType@dp88_AI_Objective@@IAEEPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Objective::GetUnitType
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?IsValidObjective@dp88_AI_Objective@@SA_NPAV1@@Z
_TEXT	SEGMENT
tv86 = -72						; size = 4
_i$1 = -4						; size = 4
_pObjective$ = 8					; size = 4
?IsValidObjective@dp88_AI_Objective@@SA_NPAV1@@Z PROC	; dp88_AI_Objective::IsValidObjective, COMDAT

; 1676 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1677 :   for ( int i = 0; i < Objectives.Count(); ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@IsValidObj
$LN3@IsValidObj:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@IsValidObj:
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Objective *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@IsValidObj

; 1678 :   {
; 1679 :     if ( Objectives[i] == pObjective )

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pObjective$[ebp]
	jne	SHORT $LN1@IsValidObj

; 1680 :       return ( Objectives[i]->GetGameObject() != NULL );

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ ; dp88_AI_Objective::GetGameObject
	test	eax, eax
	je	SHORT $LN7@IsValidObj
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN8@IsValidObj
$LN7@IsValidObj:
	mov	DWORD PTR tv86[ebp], 0
$LN8@IsValidObj:
	mov	al, BYTE PTR tv86[ebp]
	jmp	SHORT $LN5@IsValidObj
$LN1@IsValidObj:

; 1681 :   }

	jmp	SHORT $LN3@IsValidObj
$LN2@IsValidObj:

; 1682 : 
; 1683 :   return false;

	xor	al, al
$LN5@IsValidObj:

; 1684 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsValidObjective@dp88_AI_Objective@@SA_NPAV1@@Z ENDP	; dp88_AI_Objective::IsValidObjective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?CountUnitObjectives@dp88_AI_Objective@@SAHHIPAVScriptableGameObj@@M@Z
_TEXT	SEGMENT
tv151 = -80						; size = 4
_objTeam$1 = -12					; size = 4
_i$2 = -8						; size = 4
_count$ = -4						; size = 4
_team$ = 8						; size = 4
_objective_type$ = 12					; size = 4
_obj$ = 16						; size = 4
_distance_modifier$ = 20				; size = 4
?CountUnitObjectives@dp88_AI_Objective@@SAHHIPAVScriptableGameObj@@M@Z PROC ; dp88_AI_Objective::CountUnitObjectives, COMDAT

; 1659 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1660 :   int count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 1661 : 
; 1662 :   for (int i = 0; i < Objectives.Count(); ++i)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@CountUnitO
$LN5@CountUnitO:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@CountUnitO:
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Objective *>::Count
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN4@CountUnitO

; 1663 :   {
; 1664 :     int objTeam = Objectives[i]->GetTeam();

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetTeam@dp88_AI_Objective@@QAEHXZ	; dp88_AI_Objective::GetTeam
	mov	DWORD PTR _objTeam$1[ebp], eax

; 1665 :     if (objective_type != Objectives[i]->GetType() || (objTeam != 2 && team != objTeam) || Objectives[i]->GetPriority(obj, distance_modifier) == 0)

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetType@dp88_AI_Objective@@QAEIXZ	; dp88_AI_Objective::GetType
	cmp	DWORD PTR _objective_type$[ebp], eax
	jne	SHORT $LN2@CountUnitO
	cmp	DWORD PTR _objTeam$1[ebp], 2
	je	SHORT $LN1@CountUnitO
	mov	eax, DWORD PTR _team$[ebp]
	cmp	eax, DWORD PTR _objTeam$1[ebp]
	jne	SHORT $LN2@CountUnitO
$LN1@CountUnitO:
	push	ecx
	movss	xmm0, DWORD PTR _distance_modifier$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	push	ecx
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetPriority@dp88_AI_Objective@@QAEMPAVScriptableGameObj@@M@Z ; dp88_AI_Objective::GetPriority
	fstp	DWORD PTR tv151[ebp]
	movss	xmm0, DWORD PTR tv151[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@CountUnitO
$LN2@CountUnitO:

; 1666 :       continue;

	jmp	$LN5@CountUnitO
$LN3@CountUnitO:

; 1667 :     count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 1668 :   }

	jmp	$LN5@CountUnitO
$LN4@CountUnitO:

; 1669 : 
; 1670 :   return count;

	mov	eax, DWORD PTR _count$[ebp]

; 1671 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CountUnitObjectives@dp88_AI_Objective@@SAHHIPAVScriptableGameObj@@M@Z ENDP ; dp88_AI_Objective::CountUnitObjectives
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?CountObjectives@dp88_AI_Objective@@SAHHI@Z
_TEXT	SEGMENT
_objTeam$1 = -12					; size = 4
_i$2 = -8						; size = 4
_count$ = -4						; size = 4
_team$ = 8						; size = 4
_objective_type$ = 12					; size = 4
?CountObjectives@dp88_AI_Objective@@SAHHI@Z PROC	; dp88_AI_Objective::CountObjectives, COMDAT

; 1642 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1643 :   int count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 1644 : 
; 1645 :   for (int i = 0; i < Objectives.Count(); ++i)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CountObjec
$LN4@CountObjec:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CountObjec:
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Objective *>::Count
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN3@CountObjec

; 1646 :   {
; 1647 :     int objTeam = Objectives[i]->GetTeam();

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetTeam@dp88_AI_Objective@@QAEHXZ	; dp88_AI_Objective::GetTeam
	mov	DWORD PTR _objTeam$1[ebp], eax

; 1648 :     if (objective_type != Objectives[i]->GetType() || (objTeam != 2 && team != objTeam))

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetType@dp88_AI_Objective@@QAEIXZ	; dp88_AI_Objective::GetType
	cmp	DWORD PTR _objective_type$[ebp], eax
	jne	SHORT $LN1@CountObjec
	cmp	DWORD PTR _objTeam$1[ebp], 2
	je	SHORT $LN2@CountObjec
	mov	eax, DWORD PTR _team$[ebp]
	cmp	eax, DWORD PTR _objTeam$1[ebp]
	je	SHORT $LN2@CountObjec
$LN1@CountObjec:

; 1649 :       continue;

	jmp	SHORT $LN4@CountObjec
$LN2@CountObjec:

; 1650 :     count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 1651 :   }

	jmp	SHORT $LN4@CountObjec
$LN3@CountObjec:

; 1652 : 
; 1653 :   return count;

	mov	eax, DWORD PTR _count$[ebp]

; 1654 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CountObjectives@dp88_AI_Objective@@SAHHI@Z ENDP	; dp88_AI_Objective::CountObjectives
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?GetBestObjective@dp88_AI_Objective@@SAPAV1@PAVScriptableGameObj@@IMV?$DynamicVectorClass@H@@@Z
_TEXT	SEGMENT
$T1 = -128						; size = 4
$T2 = -124						; size = 12
$T3 = -112						; size = 12
$T4 = -100						; size = 4
_distance$5 = -32					; size = 4
_priority$6 = -28					; size = 4
_objTeam$7 = -24					; size = 4
_i$8 = -20						; size = 4
_team$ = -16						; size = 4
_best_distance$ = -12					; size = 4
_top_priority$ = -8					; size = 4
_result$ = -4						; size = 4
_obj$ = 8						; size = 4
_objective_type$ = 12					; size = 4
_distance_modifier$ = 16				; size = 4
_ignoredObjectives$ = 20				; size = 24
?GetBestObjective@dp88_AI_Objective@@SAPAV1@PAVScriptableGameObj@@IMV?$DynamicVectorClass@H@@@Z PROC ; dp88_AI_Objective::GetBestObjective, COMDAT

; 1614 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi

; 1615 :   dp88_AI_Objective* result = NULL;

	mov	DWORD PTR _result$[ebp], 0

; 1616 :   float top_priority = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _top_priority$[ebp], xmm0

; 1617 :   float best_distance = FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _best_distance$[ebp], xmm0

; 1618 : 
; 1619 :   int team = Get_Object_Type(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	DWORD PTR _team$[ebp], eax

; 1620 :   for ( int i = 0; i < Objectives.Count(); ++i )

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN8@GetBestObj
$LN7@GetBestObj:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN8@GetBestObj:
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	?Count@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Objective *>::Count
	cmp	DWORD PTR _i$8[ebp], eax
	jge	$LN6@GetBestObj

; 1621 :   {
; 1622 :     int objTeam = Objectives[i]->GetTeam();

	mov	eax, DWORD PTR _i$8[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetTeam@dp88_AI_Objective@@QAEHXZ	; dp88_AI_Objective::GetTeam
	mov	DWORD PTR _objTeam$7[ebp], eax

; 1623 :     if (objective_type != Objectives[i]->GetType() || (objTeam != 2 && team != objTeam) || (ignoredObjectives.Length() && ignoredObjectives.ID(Objectives[i]->GetGameObject()->Get_ID()) != -1))

	mov	eax, DWORD PTR _i$8[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetType@dp88_AI_Objective@@QAEIXZ	; dp88_AI_Objective::GetType
	cmp	DWORD PTR _objective_type$[ebp], eax
	jne	SHORT $LN4@GetBestObj
	cmp	DWORD PTR _objTeam$7[ebp], 2
	je	SHORT $LN3@GetBestObj
	mov	eax, DWORD PTR _team$[ebp]
	cmp	eax, DWORD PTR _objTeam$7[ebp]
	jne	SHORT $LN4@GetBestObj
$LN3@GetBestObj:
	lea	ecx, DWORD PTR _ignoredObjectives$[ebp]
	call	?Length@?$VectorClass@H@@QBEHXZ		; VectorClass<int>::Length
	test	eax, eax
	je	SHORT $LN5@GetBestObj
	mov	eax, DWORD PTR _i$8[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ ; dp88_AI_Objective::GetGameObject
	mov	ecx, eax
	call	?Get_ID@BaseGameObj@@QBEHXZ		; BaseGameObj::Get_ID
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ignoredObjectives$[ebp]
	call	?ID@?$DynamicVectorClass@H@@UAEHABH@Z	; DynamicVectorClass<int>::ID
	cmp	eax, -1
	je	SHORT $LN5@GetBestObj
$LN4@GetBestObj:

; 1624 :       continue;

	jmp	$LN7@GetBestObj
$LN5@GetBestObj:

; 1625 : 
; 1626 :     float priority = Objectives[i]->GetPriority(obj, distance_modifier);

	push	ecx
	movss	xmm0, DWORD PTR _distance_modifier$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$8[ebp]
	push	ecx
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetPriority@dp88_AI_Objective@@QAEMPAVScriptableGameObj@@M@Z ; dp88_AI_Objective::GetPriority
	fstp	DWORD PTR _priority$6[ebp]

; 1627 :     float distance = Vector3::Distance_Squared(Commands->Get_Position(obj), Commands->Get_Position(Objectives[i]->GetGameObject()));

	mov	eax, DWORD PTR _i$8[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ ; dp88_AI_Objective::GetGameObject
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	call	?Distance_Squared@Vector3@@SAMABV1@0@Z	; Vector3::Distance_Squared
	add	esp, 8
	fstp	DWORD PTR _distance$5[ebp]

; 1628 :     if( priority > top_priority || (priority > 0 && priority == top_priority && distance < best_distance) )

	movss	xmm0, DWORD PTR _priority$6[ebp]
	comiss	xmm0, DWORD PTR _top_priority$[ebp]
	ja	SHORT $LN1@GetBestObj
	movss	xmm0, DWORD PTR _priority$6[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@GetBestObj
	movss	xmm0, DWORD PTR _priority$6[ebp]
	ucomiss	xmm0, DWORD PTR _top_priority$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@GetBestObj
	movss	xmm0, DWORD PTR _best_distance$[ebp]
	comiss	xmm0, DWORD PTR _distance$5[ebp]
	jbe	SHORT $LN2@GetBestObj
$LN1@GetBestObj:

; 1629 :     {
; 1630 :       top_priority = priority;

	movss	xmm0, DWORD PTR _priority$6[ebp]
	movss	DWORD PTR _top_priority$[ebp], xmm0

; 1631 :       best_distance = distance;

	movss	xmm0, DWORD PTR _distance$5[ebp]
	movss	DWORD PTR _best_distance$[ebp], xmm0

; 1632 :       result = Objectives[i];

	mov	eax, DWORD PTR _i$8[ebp]
	push	eax
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	??A?$VectorClass@PAVdp88_AI_Objective@@@@QAEAAPAVdp88_AI_Objective@@H@Z ; VectorClass<dp88_AI_Objective *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _result$[ebp], ecx
$LN2@GetBestObj:

; 1633 :     }
; 1634 :   }

	jmp	$LN7@GetBestObj
$LN6@GetBestObj:

; 1635 : 
; 1636 :   return result;

	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR $T4[ebp], eax
	lea	ecx, DWORD PTR _ignoredObjectives$[ebp]
	call	??1?$DynamicVectorClass@H@@UAE@XZ
	mov	eax, DWORD PTR $T4[ebp]

; 1637 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBestObjective@dp88_AI_Objective@@SAPAV1@PAVScriptableGameObj@@IMV?$DynamicVectorClass@H@@@Z ENDP ; dp88_AI_Objective::GetBestObjective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?GetPriority@dp88_AI_Objective@@QAEMPAVScriptableGameObj@@M@Z
_TEXT	SEGMENT
tv143 = -88						; size = 4
tv151 = -84						; size = 4
tv91 = -84						; size = 4
_priority$1 = -16					; size = 4
_objective$ = -12					; size = 4
_unitType$ = -5						; size = 1
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_distance_modifier$ = 12				; size = 4
?GetPriority@dp88_AI_Objective@@QAEMPAVScriptableGameObj@@M@Z PROC ; dp88_AI_Objective::GetPriority, COMDAT
; _this$ = ecx

; 1596 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1597 :   unsigned char unitType = GetUnitType(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitType@dp88_AI_Objective@@IAEEPAVScriptableGameObj@@@Z ; dp88_AI_Objective::GetUnitType
	mov	BYTE PTR _unitType$[ebp], al

; 1598 :   if (unitType > UNITTYPE_MAX || m_priority[unitType] == 0)

	movzx	eax, BYTE PTR _unitType$[ebp]
	cmp	eax, 3
	jg	SHORT $LN2@GetPriorit
	movzx	eax, BYTE PTR _unitType$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+32], 0
	jne	SHORT $LN3@GetPriorit
$LN2@GetPriorit:

; 1599 :     return 0.0f;

	fldz
	jmp	$LN4@GetPriorit
$LN3@GetPriorit:

; 1600 :   
; 1601 :   GameObject* objective = GetGameObject();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ ; dp88_AI_Objective::GetGameObject
	mov	DWORD PTR _objective$[ebp], eax

; 1602 :   if (NULL != objective)

	cmp	DWORD PTR _objective$[ebp], 0
	je	SHORT $LN1@GetPriorit

; 1603 :   {
; 1604 :     float priority = abs(m_priority[unitType]) - (dp88_customAI::getDistance(obj, objective)*distance_modifier);

	movzx	eax, BYTE PTR _unitType$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+32]
	cdq
	xor	eax, edx
	sub	eax, edx
	cvtsi2ss xmm0, eax
	mov	edx, DWORD PTR _objective$[ebp]
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	movss	DWORD PTR tv151[ebp], xmm0
	call	?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ; dp88_customAI::getDistance
	add	esp, 8
	fstp	DWORD PTR tv143[ebp]
	movss	xmm0, DWORD PTR tv143[ebp]
	mulss	xmm0, DWORD PTR _distance_modifier$[ebp]
	movss	xmm1, DWORD PTR tv151[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _priority$1[ebp], xmm1

; 1605 :     return (priority <= 0.0f) ? 0.0001f : priority;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _priority$1[ebp]
	jb	SHORT $LN6@GetPriorit
	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR tv91[ebp], xmm0
	jmp	SHORT $LN7@GetPriorit
$LN6@GetPriorit:
	movss	xmm0, DWORD PTR _priority$1[ebp]
	movss	DWORD PTR tv91[ebp], xmm0
$LN7@GetPriorit:
	fld	DWORD PTR tv91[ebp]
	jmp	SHORT $LN4@GetPriorit
$LN1@GetPriorit:

; 1606 :   }
; 1607 : 
; 1608 :   return 0.0f;

	fldz
$LN4@GetPriorit:

; 1609 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetPriority@dp88_AI_Objective@@QAEMPAVScriptableGameObj@@M@Z ENDP ; dp88_AI_Objective::GetPriority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.h
;	COMDAT ?GetRange@dp88_AI_Objective@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRange@dp88_AI_Objective@@QAEHXZ PROC		; dp88_AI_Objective::GetRange, COMDAT
; _this$ = ecx

; 836  :   int GetRange()            { return m_range; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRange@dp88_AI_Objective@@QAEHXZ ENDP		; dp88_AI_Objective::GetRange
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.h
;	COMDAT ?GetTeam@dp88_AI_Objective@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTeam@dp88_AI_Objective@@QAEHXZ PROC			; dp88_AI_Objective::GetTeam, COMDAT
; _this$ = ecx

; 835  :   int GetTeam()             { return m_team; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@dp88_AI_Objective@@QAEHXZ ENDP			; dp88_AI_Objective::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.h
;	COMDAT ?GetType@dp88_AI_Objective@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@dp88_AI_Objective@@QAEIXZ PROC			; dp88_AI_Objective::GetType, COMDAT
; _this$ = ecx

; 834  :   unsigned int GetType()    { return m_type; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@dp88_AI_Objective@@QAEIXZ ENDP			; dp88_AI_Objective::GetType
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ PROC ; dp88_AI_Objective::GetGameObject, COMDAT
; _this$ = ecx

; 1566 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1567 :   // NOTE: We no longer need to store object IDs since the objective script itself is destroyed when its owner is destroyed anyways.
; 1568 :   //       The objective is removed from all AI units when destroyed (see Detach()), so we don't need to do lookups at all.
; 1569 :   return Owner();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 1570 :   // return Commands->Find_Object(m_objID);
; 1571 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ ENDP ; dp88_AI_Objective::GetGameObject
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Detach@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_unit$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Detach@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_Objective::Detach, COMDAT
; _this$ = ecx

; 1548 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1549 :   ScriptImpClass::Detach(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Detach

; 1550 :   // De-register objective
; 1551 :   if (Exe != EXE_LEVELEDIT)

	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	je	SHORT $LN5@Detach

; 1552 :     Objectives.DeleteObj(this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::DeleteObj
$LN5@Detach:

; 1553 : 
; 1554 :   // delete references to this objective from AI units so they don't try to access our memory after it's freed
; 1555 :   for (int i = 0; i < dp88_AI_Unit::ListOfAIUnits.Count(); i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@Detach
$LN3@Detach:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@Detach:
	mov	ecx, OFFSET ?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A ; dp88_AI_Unit::ListOfAIUnits
	call	?Count@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Unit *>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN6@Detach

; 1556 :   {
; 1557 :     dp88_AI_Unit *unit = dp88_AI_Unit::ListOfAIUnits[i];

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, OFFSET ?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A ; dp88_AI_Unit::ListOfAIUnits
	call	??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _unit$2[ebp], ecx

; 1558 :     if (unit->Get_Current_Objective() == this)

	mov	ecx, DWORD PTR _unit$2[ebp]
	call	?Get_Current_Objective@dp88_AI_Unit@@QAEPAVdp88_AI_Objective@@XZ ; dp88_AI_Unit::Get_Current_Objective
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@Detach

; 1559 :       unit->Force_Clear_Current_Objective();

	mov	eax, DWORD PTR _unit$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _unit$2[ebp]
	mov	eax, DWORD PTR [edx+140]
	call	eax
$LN1@Detach:

; 1560 :   }

	jmp	SHORT $LN3@Detach
$LN6@Detach:

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Objective::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Created@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv133 = -88						; size = 4
tv194 = -81						; size = 1
tv191 = -80						; size = 4
tv188 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_Objective::Created, COMDAT
; _this$ = ecx

; 1525 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 :   // Register objective
; 1527 :   //m_objID = Commands->Get_ID(obj);
; 1528 :   Objectives.Add(this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, OFFSET ?Objectives@dp88_AI_Objective@@1V?$DynamicVectorClass@PAVdp88_AI_Objective@@@@A ; dp88_AI_Objective::Objectives
	call	?Add@?$DynamicVectorClass@PAVdp88_AI_Objective@@@@QAE_NABQAVdp88_AI_Objective@@@Z ; DynamicVectorClass<dp88_AI_Objective *>::Add

; 1529 : 
; 1530 :   // Store data
; 1531 :   m_type = (unsigned int)Get_Int_Parameter("Type");

	push	OFFSET ??_C@_04KOACHJEN@Type?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1532 :   m_range = Get_Int_Parameter("Range");

	push	OFFSET ??_C@_05CFMCGLCK@Range?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 1533 :   m_team = Get_Int_Parameter("Team");

	push	OFFSET ??_C@_04GBPANCCF@Team?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 1534 :   m_debugTag = Get_Parameter("Debug_Tag");

	push	OFFSET ??_C@_09DJDKAPII@Debug_Tag?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1535 :   if (strlen(m_debugTag) == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR tv188[ebp], ecx
	mov	edx, DWORD PTR tv188[ebp]
	add	edx, 1
	mov	DWORD PTR tv191[ebp], edx
$LL4@Created:
	mov	eax, DWORD PTR tv188[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv194[ebp], cl
	add	DWORD PTR tv188[ebp], 1
	cmp	BYTE PTR tv194[ebp], 0
	jne	SHORT $LL4@Created
	mov	edx, DWORD PTR tv188[ebp]
	sub	edx, DWORD PTR tv191[ebp]
	mov	DWORD PTR tv133[ebp], edx
	jne	SHORT $LN1@Created

; 1536 :     m_debugTag = "No Tag";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], OFFSET ??_C@_06GJACHIKM@No?5Tag?$AA@
$LN1@Created:

; 1537 :   }
; 1538 : 
; 1539 :   m_priority[UNITTYPE_SOLDIER] = Get_Int_Parameter("Priority_Soldier");

	push	OFFSET ??_C@_0BB@OMDDOPID@Priority_Soldier?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+32], eax

; 1540 :   m_priority[UNITTYPE_LVEHICLE] = Get_Int_Parameter("Priority_Light_Vehicle");

	push	OFFSET ??_C@_0BH@FGCBALMH@Priority_Light_Vehicle?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+32], eax

; 1541 :   m_priority[UNITTYPE_HVEHICLE] = Get_Int_Parameter("Priority_Heavy_Vehicle");

	push	OFFSET ??_C@_0BH@DDHEPMLK@Priority_Heavy_Vehicle?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+32], eax

; 1542 :   m_priority[UNITTYPE_AIRCRAFT] = Get_Int_Parameter("Priority_Aircraft");

	push	OFFSET ??_C@_0BC@NCMONDLE@Priority_Aircraft?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+32], eax

; 1543 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AI_Objective@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Objective::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_ChargedTurret_AnimationObserver@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_ChargedTurret_AnimationObserver@@UAEPAXI@Z PROC ; dp88_AI_ChargedTurret_AnimationObserver::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_ChargedTurret_AnimationObserver@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_ChargedTurret_AnimationObserver@@UAEPAXI@Z ENDP ; dp88_AI_ChargedTurret_AnimationObserver::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_ChargedTurret_AnimationObserver@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_ChargedTurret_AnimationObserver@@UAE@XZ PROC	; dp88_AI_ChargedTurret_AnimationObserver::~dp88_AI_ChargedTurret_AnimationObserver, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObserverImpClass@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_ChargedTurret_AnimationObserver@@UAE@XZ ENDP	; dp88_AI_ChargedTurret_AnimationObserver::~dp88_AI_ChargedTurret_AnimationObserver
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Animation_Complete@dp88_AI_ChargedTurret_AnimationObserver@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@dp88_AI_ChargedTurret_AnimationObserver@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; dp88_AI_ChargedTurret_AnimationObserver::Animation_Complete, COMDAT
; _this$ = ecx

; 1505 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1506 :   m_pParent->Animation_Complete(pSelf, animation_name);

	mov	eax, DWORD PTR _animation_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 1507 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@dp88_AI_ChargedTurret_AnimationObserver@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; dp88_AI_ChargedTurret_AnimationObserver::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ??0dp88_AI_ChargedTurret_AnimationObserver@@QAE@PAVdp88_AI_ChargedTurret@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pParent$ = 8						; size = 4
??0dp88_AI_ChargedTurret_AnimationObserver@@QAE@PAVdp88_AI_ChargedTurret@@@Z PROC ; dp88_AI_ChargedTurret_AnimationObserver::dp88_AI_ChargedTurret_AnimationObserver, COMDAT
; _this$ = ecx

; 1500 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	push	0
	push	OFFSET ??_C@_0CI@BKNNHEAE@dp88_AI_ChargedTurret_AnimationO@
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ObserverImpClass@@QAE@VStringClass@@@Z ; ObserverImpClass::ObserverImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_ChargedTurret_AnimationObserver@@6B@

; 1501 :   m_pParent = pParent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1502 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0dp88_AI_ChargedTurret_AnimationObserver@@QAE@PAVdp88_AI_ChargedTurret@@@Z ENDP ; dp88_AI_ChargedTurret_AnimationObserver::dp88_AI_ChargedTurret_AnimationObserver
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_ChargedTurret@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_ChargedTurret@@UAEPAXI@Z PROC		; dp88_AI_ChargedTurret::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_ChargedTurret@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_ChargedTurret@@UAEPAXI@Z ENDP		; dp88_AI_ChargedTurret::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_ChargedTurret@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_ChargedTurret@@UAE@XZ PROC			; dp88_AI_ChargedTurret::~dp88_AI_ChargedTurret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Turret@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_ChargedTurret@@UAE@XZ ENDP			; dp88_AI_ChargedTurret::~dp88_AI_ChargedTurret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_ChargedTurret@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_ChargedTurret@@QAE@XZ PROC			; dp88_AI_ChargedTurret::dp88_AI_ChargedTurret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_AI_Turret@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_ChargedTurret@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_ChargedTurret@@QAE@XZ ENDP			; dp88_AI_ChargedTurret::dp88_AI_ChargedTurret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?ApplyIdleAnimation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?ApplyIdleAnimation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_ChargedTurret::ApplyIdleAnimation, COMDAT
; _this$ = ecx

; 1445 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1446 :   // Apply the correct animation frames for the uncharged state dependant upon base power conditions,
; 1447 :   // which should already have been updated before calling this function
; 1448 :   if (m_bPowerState)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+156]
	test	ecx, ecx
	je	SHORT $LN2@ApplyIdleA

; 1449 :     m_pLoopedAnimCtrl->PlayAnimation(Get_Parameter("Animation"), Get_Int_Parameter("Animation_Idle_Start_Frame"), Get_Int_Parameter("Animation_Idle_End_Frame"));

	push	0
	push	OFFSET ??_C@_0BJ@DJIDONGK@Animation_Idle_End_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0BL@DNDODHMP@Animation_Idle_Start_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_09ONEINPNJ@Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation

; 1450 :   else

	jmp	SHORT $LN3@ApplyIdleA
$LN2@ApplyIdleA:

; 1451 :     m_pLoopedAnimCtrl->PlayAnimation(Get_Parameter("Animation"), Get_Int_Parameter("Animation_Unpowered_Start_Frame"), Get_Int_Parameter("Animation_Unpowered_End_Frame"));

	push	0
	push	OFFSET ??_C@_0BO@FOANNFDJ@Animation_Unpowered_End_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0CA@IEKKOGEI@Animation_Unpowered_Start_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_09ONEINPNJ@Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation
$LN3@ApplyIdleA:

; 1452 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ApplyIdleAnimation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_ChargedTurret::ApplyIdleAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?GetAnimationObject@dp88_AI_ChargedTurret@@MAEPAVScriptableGameObj@@PAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?GetAnimationObject@dp88_AI_ChargedTurret@@MAEPAVScriptableGameObj@@PAV2@@Z PROC ; dp88_AI_ChargedTurret::GetAnimationObject, COMDAT
; _this$ = ecx

; 1436 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1437 :   if (NULL != m_chargeAnimObjId)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN1@GetAnimati

; 1438 :     return Commands->Find_Object(m_chargeAnimObjId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	jmp	SHORT $LN2@GetAnimati
$LN1@GetAnimati:

; 1439 :   return pSelf;

	mov	eax, DWORD PTR _pSelf$[ebp]
$LN2@GetAnimati:

; 1440 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAnimationObject@dp88_AI_ChargedTurret@@MAEPAVScriptableGameObj@@PAV2@@Z ENDP ; dp88_AI_ChargedTurret::GetAnimationObject
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?StartDischarging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv135 = -88						; size = 4
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?StartDischarging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_ChargedTurret::StartDischarging, COMDAT
; _this$ = ecx

; 1408 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1409 :   // Were we charging up? If so we are now fully charged and can start shooting stuff, if we still
; 1410 :   // have a valid target...
; 1411 :   if (m_bIsCharging)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	test	ecx, ecx
	je	$LN6@StartDisch

; 1412 :   {
; 1413 :     m_bIsCharging = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 0

; 1414 :   
; 1415 :     // Got an enemy? Also double check power state whilst we are here, just to be sure
; 1416 :     if (m_target && checkPowerState(pSelf))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	$LN4@StartDisch
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@StartDisch

; 1417 :     {
; 1418 :         m_bIsDischarging = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 1

; 1419 : 
; 1420 :         // Call into the base class and let it do it's thing
; 1421 :         if (splashInfantry && m_target->As_SoldierGameObj())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	test	ecx, ecx
	je	SHORT $LN3@StartDisch
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR tv135[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	SHORT $LN3@StartDisch

; 1422 :           dp88_AI_Turret::attackLocation(pSelf, Commands->Get_Position(m_target), m_bTargetPrimaryFire);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	edx, DWORD PTR _pSelf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ; dp88_AI_Turret::attackLocation

; 1423 :         else

	jmp	SHORT $LN4@StartDisch
$LN3@StartDisch:

; 1424 :           dp88_AI_Turret::attackTarget(pSelf, m_target, m_bTargetPrimaryFire);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	edx, DWORD PTR _pSelf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z ; dp88_AI_Turret::attackTarget
$LN4@StartDisch:

; 1425 :     }
; 1426 : 
; 1427 :     // If we didn't find anything to shoot at then apply the idle animation again
; 1428 :     if (!m_bIsDischarging)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+149]
	test	ecx, ecx
	jne	SHORT $LN6@StartDisch

; 1429 :       ApplyIdleAnimation(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
$LN6@StartDisch:

; 1430 :   }
; 1431 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?StartDischarging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_ChargedTurret::StartDischarging
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?StartCharging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?StartCharging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_ChargedTurret::StartCharging, COMDAT
; _this$ = ecx

; 1387 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :   // If we are not charging, not discharging, powered and have a target then we can start a new
; 1389 :   // charging cycle
; 1390 :   if (!m_bIsPreReloading && !m_bIsCharging && !m_bIsDischarging && checkPowerState(pSelf) && m_target)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	jne	$LN3@StartCharg
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	test	ecx, ecx
	jne	$LN3@StartCharg
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+149]
	test	ecx, ecx
	jne	$LN3@StartCharg
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@StartCharg
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	$LN3@StartCharg

; 1391 :   {
; 1392 :     m_bIsCharging = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 1

; 1393 : 
; 1394 :     // Only play a single iteration of the charge up animation - if we need to keep attacking after
; 1395 :     // the shot is fired this will get called again
; 1396 :     m_pLoopedAnimCtrl->PlayAnimation(Get_Parameter("Animation"), Get_Int_Parameter("Animation_Charge_Start_Frame"), Get_Int_Parameter("Animation_Charge_End_Frame"), 1);

	push	1
	push	OFFSET ??_C@_0BL@CEGLFJCP@Animation_Charge_End_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0BN@HMDMOGPC@Animation_Charge_Start_Frame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_09ONEINPNJ@Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation

; 1397 : 
; 1398 :     if (_stricmp(Get_Parameter("Charge_Sound"), "0"))

	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	OFFSET ??_C@_0N@EGKBBLLN@Charge_Sound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@StartCharg

; 1399 :       Commands->Create_Sound(Get_Parameter("Charge_Sound"), Commands->Get_Position(pSelf), pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0N@EGKBBLLN@Charge_Sound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+172]
	call	eax
	add	esp, 12					; 0000000cH
$LN3@StartCharg:

; 1400 : 
; 1401 :     // Nothing to do but wait for the charging to complete... hum de dum...
; 1402 :   }
; 1403 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?StartCharging@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_ChargedTurret::StartCharging
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?attackLocation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_location$ = 12						; size = 12
_primary$ = 24						; size = 1
?attackLocation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z PROC ; dp88_AI_ChargedTurret::attackLocation, COMDAT
; _this$ = ecx

; 1375 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1376 :   // Changing targets in the middle of discharging? Sure, why not...
; 1377 :   if (m_bIsDischarging)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+149]
	test	ecx, ecx
	je	SHORT $LN1@attackLoca

; 1378 :     dp88_AI_Turret::attackLocation(pSelf, location, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR _location$[ebp]
	push	edx
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ; dp88_AI_Turret::attackLocation
$LN1@attackLoca:

; 1379 : 
; 1380 :   // Otherwise call StartCharging and let it determine what to do...
; 1381 :   StartCharging(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 1382 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?attackLocation@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ENDP ; dp88_AI_ChargedTurret::attackLocation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?attackTarget@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@0_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_pTarget$ = 12						; size = 4
_primary$ = 16						; size = 1
?attackTarget@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@0_N@Z PROC ; dp88_AI_ChargedTurret::attackTarget, COMDAT
; _this$ = ecx

; 1363 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1364 :   // Changing targets in the middle of discharging? Sure, why not...
; 1365 :   if (m_bIsDischarging)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+149]
	test	ecx, ecx
	je	SHORT $LN1@attackTarg

; 1366 :     dp88_AI_Turret::attackTarget(pSelf, pTarget, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTarget$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSelf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z ; dp88_AI_Turret::attackTarget
$LN1@attackTarg:

; 1367 : 
; 1368 :   // Otherwise call StartCharging and let it determine what to do... 
; 1369 :  StartCharging(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 1370 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?attackTarget@dp88_AI_ChargedTurret@@MAEXPAVScriptableGameObj@@0_N@Z ENDP ; dp88_AI_ChargedTurret::attackTarget
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?loadSettings@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@_N1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_loadSecondaryFireSettings$ = 12			; size = 1
_loadBuildingTargetSettings$ = 16			; size = 1
?loadSettings@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@_N1@Z PROC ; dp88_AI_ChargedTurret::loadSettings, COMDAT
; _this$ = ecx

; 1241 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1242 :   dp88_AI_Turret::loadSettings(pSelf, loadSecondaryFireSettings, loadBuildingTargetSettings);

	movzx	eax, BYTE PTR _loadBuildingTargetSettings$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _loadSecondaryFireSettings$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSelf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_AI_Turret::loadSettings

; 1243 : 
; 1244 :   // Not currently loading any settings... probably should add this sometime...
; 1245 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?loadSettings@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@_N1@Z ENDP ; dp88_AI_ChargedTurret::loadSettings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv88 = -112						; size = 4
tv260 = -105						; size = 1
tv257 = -104						; size = 4
tv222 = -104						; size = 4
tv193 = -104						; size = 4
tv173 = -104						; size = 4
tv254 = -100						; size = 4
tv224 = -100						; size = 4
tv195 = -100						; size = 4
tv175 = -100						; size = 4
$T1 = -96						; size = 12
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 4
_pChargeAnimObj$5 = -8					; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_ChargedTurret::Init, COMDAT
; _this$ = ecx

; 1202 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1203 :   dp88_AI_Turret::Init(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Turret::Init

; 1204 : 
; 1205 :   m_myObjId = Commands->Get_ID(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], eax

; 1206 :   m_bIsCharging = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 0

; 1207 :   m_bIsDischarging = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 0

; 1208 :   m_bIsPreReloading = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+150], 0

; 1209 :   m_chargeAnimObjId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 0

; 1210 :   m_pAnimationObserver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0

; 1211 : 
; 1212 :   // If a seperate charge animation model has been specified then go ahead and spawn it
; 1213 :   if (strlen(Get_Parameter("Animation_Model")) > 0)

	push	OFFSET ??_C@_0BA@IPCHLLAK@Animation_Model?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv254[ebp], eax
	mov	eax, DWORD PTR tv254[ebp]
	add	eax, 1
	mov	DWORD PTR tv257[ebp], eax
$LL21@Init:
	mov	ecx, DWORD PTR tv254[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv260[ebp], dl
	add	DWORD PTR tv254[ebp], 1
	cmp	BYTE PTR tv260[ebp], 0
	jne	SHORT $LL21@Init
	mov	eax, DWORD PTR tv254[ebp]
	sub	eax, DWORD PTR tv257[ebp]
	mov	DWORD PTR tv88[ebp], eax
	je	$LN3@Init

; 1214 :   {
; 1215 :     GameObject* pChargeAnimObj = Commands->Create_Object("Invisible_Object", Commands->Get_Position(pSelf));

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BB@NHJNEILC@Invisible_Object?$AA@
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _pChargeAnimObj$5[ebp], eax

; 1216 :     if (NULL != pChargeAnimObj)

	cmp	DWORD PTR _pChargeAnimObj$5[ebp], 0
	je	$LN3@Init

; 1217 :     {
; 1218 :       m_chargeAnimObjId = Commands->Get_ID(pChargeAnimObj);

	mov	eax, DWORD PTR _pChargeAnimObj$5[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], eax

; 1219 :       Commands->Set_Model(pChargeAnimObj, Get_Parameter("Animation_Model"));

	push	OFFSET ??_C@_0BA@IPCHLLAK@Animation_Model?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pChargeAnimObj$5[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+160]
	call	edx
	add	esp, 8

; 1220 :       Commands->Attach_To_Object_Bone(pChargeAnimObj, pSelf, Get_Parameter("Animation_Model_Bone"));

	push	OFFSET ??_C@_0BF@OHLHCKEN@Animation_Model_Bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pChargeAnimObj$5[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+572]
	call	eax
	add	esp, 12					; 0000000cH

; 1221 : 
; 1222 :       // Create the looped animation controller on the charge animation object and attach an observer
; 1223 :       // so we know when the charge animation is completed
; 1224 :       m_pLoopedAnimCtrl = new LoopedAnimationController(pChargeAnimObj);

	push	OFFSET ??_C@_0BM@DBHCJMNG@dp88_AI_ChargedTurret?3?3Init?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 22					; 00000016H
	push	eax
	push	OFFSET ??_C@_0DL@GOAALILL@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN9@Init
	xor	edx, edx
	jne	SHORT $LN6@Init
	mov	eax, DWORD PTR ?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 22					; 00000016H
	push	eax
	push	OFFSET ??_C@_1HG@IMPPFMMJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Init:
	mov	DWORD PTR tv175[ebp], 0
	jmp	SHORT $LN10@Init
$LN9@Init:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@Init
	mov	edx, DWORD PTR _pChargeAnimObj$5[ebp]
	push	edx
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0LoopedAnimationController@@QAE@PAVScriptableGameObj@@@Z ; LoopedAnimationController::LoopedAnimationController
	mov	DWORD PTR tv173[ebp], eax
	jmp	SHORT $LN8@Init
$LN7@Init:
	mov	DWORD PTR tv173[ebp], 0
$LN8@Init:
	mov	eax, DWORD PTR tv173[ebp]
	mov	DWORD PTR tv175[ebp], eax
$LN10@Init:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv175[ebp]
	mov	DWORD PTR [ecx+160], edx

; 1225 :       m_pAnimationObserver = new dp88_AI_ChargedTurret_AnimationObserver(this);

	push	OFFSET ??_C@_0BM@DBHCJMNG@dp88_AI_ChargedTurret?3?3Init?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 23					; 00000017H
	push	eax
	push	OFFSET ??_C@_0DL@GOAALILL@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN14@Init
	xor	edx, edx
	jne	SHORT $LN11@Init
	mov	eax, DWORD PTR ?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 23					; 00000017H
	push	eax
	push	OFFSET ??_C@_1HG@IMPPFMMJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@Init:
	mov	DWORD PTR tv195[ebp], 0
	jmp	SHORT $LN15@Init
$LN14@Init:
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN12@Init
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0dp88_AI_ChargedTurret_AnimationObserver@@QAE@PAVdp88_AI_ChargedTurret@@@Z ; dp88_AI_ChargedTurret_AnimationObserver::dp88_AI_ChargedTurret_AnimationObserver
	mov	DWORD PTR tv193[ebp], eax
	jmp	SHORT $LN13@Init
$LN12@Init:
	mov	DWORD PTR tv193[ebp], 0
$LN13@Init:
	mov	eax, DWORD PTR tv193[ebp]
	mov	DWORD PTR tv195[ebp], eax
$LN15@Init:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv195[ebp]
	mov	DWORD PTR [ecx+164], edx

; 1226 :       pChargeAnimObj->Add_Observer(m_pAnimationObserver);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	ecx, DWORD PTR _pChargeAnimObj$5[ebp]
	call	?Add_Observer@ScriptableGameObj@@QAEXPAVGameObjObserverClass@@@Z ; ScriptableGameObj::Add_Observer
$LN3@Init:

; 1227 :     }
; 1228 :   }
; 1229 : 
; 1230 :   // If we don't have a charge animation object create the looped animation controller on ourselves
; 1231 :   if (NULL == m_chargeAnimObjId)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+152], 0
	jne	$LN1@Init

; 1232 :     m_pLoopedAnimCtrl = new LoopedAnimationController(pSelf);

	push	OFFSET ??_C@_0BM@DBHCJMNG@dp88_AI_ChargedTurret?3?3Init?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 30					; 0000001eH
	push	eax
	push	OFFSET ??_C@_0DL@GOAALILL@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN19@Init
	xor	edx, edx
	jne	SHORT $LN16@Init
	mov	eax, DWORD PTR ?__LINE__Var@?1??Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 30					; 0000001eH
	push	eax
	push	OFFSET ??_C@_1HG@IMPPFMMJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Init:
	mov	DWORD PTR tv224[ebp], 0
	jmp	SHORT $LN20@Init
$LN19@Init:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN17@Init
	mov	edx, DWORD PTR _pSelf$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0LoopedAnimationController@@QAE@PAVScriptableGameObj@@@Z ; LoopedAnimationController::LoopedAnimationController
	mov	DWORD PTR tv222[ebp], eax
	jmp	SHORT $LN18@Init
$LN17@Init:
	mov	DWORD PTR tv222[ebp], 0
$LN18@Init:
	mov	eax, DWORD PTR tv222[ebp]
	mov	DWORD PTR tv224[ebp], eax
$LN20@Init:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv224[ebp]
	mov	DWORD PTR [ecx+160], edx
$LN1@Init:

; 1233 : 
; 1234 :   m_bPowerState = checkPowerState(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+156], al

; 1235 :   ApplyIdleAnimation(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1236 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_ChargedTurret::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv161 = -92						; size = 4
tv128 = -92						; size = 4
tv87 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 4
_pChargeAnimObj$ = -8					; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_ChargedTurret::Destroyed, COMDAT
; _this$ = ecx

; 1335 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1336 :   if (NULL != m_pLoopedAnimCtrl)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	$LN4@Destroyed

; 1337 :   {
; 1338 :     delete m_pLoopedAnimCtrl;

	push	OFFSET ??_C@_0CB@POOJFDMP@dp88_AI_ChargedTurret?3?3Destroyed@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DL@GOAALILL@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN10@Destroyed
	xor	edx, edx
	jne	SHORT $LN7@Destroyed
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1HG@IMPPFMMJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN7@Destroyed:
	jmp	SHORT $LN11@Destroyed
$LN10@Destroyed:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN8@Destroyed
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN11@Destroyed
$LN8@Destroyed:
	mov	DWORD PTR tv87[ebp], 0
$LN11@Destroyed:

; 1339 :     m_pLoopedAnimCtrl = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 0
$LN4@Destroyed:

; 1340 :   }
; 1341 :   
; 1342 :   GameObject* pChargeAnimObj = (NULL != m_chargeAnimObjId) ? Commands->Find_Object(m_chargeAnimObjId) : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN12@Destroyed
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN13@Destroyed
$LN12@Destroyed:
	mov	DWORD PTR tv128[ebp], 0
$LN13@Destroyed:
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _pChargeAnimObj$[ebp], edx

; 1343 :   m_chargeAnimObjId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 0

; 1344 :   
; 1345 :   if (NULL != m_pAnimationObserver)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	$LN3@Destroyed

; 1346 :   {
; 1347 :     if (NULL != pChargeAnimObj)

	cmp	DWORD PTR _pChargeAnimObj$[ebp], 0
	je	SHORT $LN2@Destroyed

; 1348 :       pChargeAnimObj->Remove_Observer(m_pAnimationObserver);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	ecx, DWORD PTR _pChargeAnimObj$[ebp]
	call	?Remove_Observer@ScriptableGameObj@@QAEXPAVGameObjObserverClass@@@Z ; ScriptableGameObj::Remove_Observer
$LN2@Destroyed:

; 1349 :       
; 1350 :     delete m_pAnimationObserver;

	push	OFFSET ??_C@_0CB@POOJFDMP@dp88_AI_ChargedTurret?3?3Destroyed@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 15					; 0000000fH
	push	eax
	push	OFFSET ??_C@_0DL@GOAALILL@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN17@Destroyed
	xor	edx, edx
	jne	SHORT $LN14@Destroyed
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 15					; 0000000fH
	push	eax
	push	OFFSET ??_C@_1HG@IMPPFMMJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN14@Destroyed:
	jmp	SHORT $LN18@Destroyed
$LN17@Destroyed:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN15@Destroyed
	push	1
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN18@Destroyed
$LN15@Destroyed:
	mov	DWORD PTR tv161[ebp], 0
$LN18@Destroyed:

; 1351 :     m_pAnimationObserver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0
$LN3@Destroyed:

; 1352 :   }
; 1353 :   
; 1354 :   if (NULL != pChargeAnimObj)

	cmp	DWORD PTR _pChargeAnimObj$[ebp], 0
	je	SHORT $LN5@Destroyed

; 1355 :   {
; 1356 :     Commands->Destroy_Object(pChargeAnimObj);

	mov	eax, DWORD PTR _pChargeAnimObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN5@Destroyed:

; 1357 :   }
; 1358 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_ChargedTurret::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Animation_Complete@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
tv93 = -76						; size = 4
tv71 = -76						; size = 4
_bSenderIsObserver$ = -5				; size = 1
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; dp88_AI_ChargedTurret::Animation_Complete, COMDAT
; _this$ = ecx

; 1319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1320 :   bool bSenderIsObserver = (NULL != m_chargeAnimObjId && Commands->Get_ID(obj) == m_chargeAnimObjId);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN5@Animation_
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+152]
	jne	SHORT $LN5@Animation_
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN6@Animation_
$LN5@Animation_:
	mov	DWORD PTR tv71[ebp], 0
$LN6@Animation_:
	mov	dl, BYTE PTR tv71[ebp]
	mov	BYTE PTR _bSenderIsObserver$[ebp], dl

; 1321 :   
; 1322 :   // Only trigger on the name of the charge animation
; 1323 :   if (0 == _stricmp(animation_name, Get_Parameter("Animation")))

	push	OFFSET ??_C@_09ONEINPNJ@Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _animation_name$[ebp]
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@Animation_

; 1324 :   {
; 1325 :     StartDischarging(bSenderIsObserver ? Commands->Find_Object(m_myObjId) : obj);

	movzx	eax, BYTE PTR _bSenderIsObserver$[ebp]
	test	eax, eax
	je	SHORT $LN7@Animation_
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN8@Animation_
$LN7@Animation_:
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR tv93[ebp], edx
$LN8@Animation_:
	mov	eax, DWORD PTR tv93[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
$LN2@Animation_:

; 1326 :   }
; 1327 : 
; 1328 :   if (!bSenderIsObserver)

	movzx	eax, BYTE PTR _bSenderIsObserver$[ebp]
	test	eax, eax
	jne	SHORT $LN3@Animation_

; 1329 :     dp88_AI_Turret::Animation_Complete(obj, animation_name);

	mov	eax, DWORD PTR _animation_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ; ScriptImpClass::Animation_Complete
$LN3@Animation_:

; 1330 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; dp88_AI_ChargedTurret::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Timer_Expired@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv82 = -72						; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AI_ChargedTurret::Timer_Expired, COMDAT
; _this$ = ecx

; 1250 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1251 :   // Use the existing custom AI think timer to check for a base power state changes and, if it has
; 1252 :   // changed, update the idle animation (and abort any charge up in progress)
; 1253 :   if (number == TIMER_AI_THINK && m_bPowerState != checkPowerState(pSelf))

	cmp	DWORD PTR _number$[ebp], -620363775	; db060001H
	jne	$LN10@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+156]
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	movzx	eax, al
	cmp	esi, eax
	je	$LN10@Timer_Expi

; 1254 :   {
; 1255 :     m_bPowerState = !m_bPowerState;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+156]
	test	ecx, ecx
	jne	SHORT $LN13@Timer_Expi
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN14@Timer_Expi
$LN13@Timer_Expi:
	mov	DWORD PTR tv82[ebp], 0
$LN14@Timer_Expi:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv82[ebp]
	mov	BYTE PTR [edx+156], al

; 1256 : 
; 1257 :     // Charging state must always become false now - either we were unpowered to begin with or
; 1258 :     // we were powered and have now gone offline. Either way, we can't possibly be charging now.
; 1259 :     m_bIsCharging = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 0

; 1260 : 
; 1261 :     // If we were discharging our weapon we need to stop now and trigger a reload so we don't
; 1262 :     // fire a partial charge next time around
; 1263 :     if (m_bIsDischarging)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+149]
	test	ecx, ecx
	je	SHORT $LN9@Timer_Expi

; 1264 :     {
; 1265 :       m_bIsDischarging = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 0

; 1266 :       stopAttacking(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1267 :       Set_Current_Bullets(pSelf, 0);

	push	0
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	call	DWORD PTR ?Set_Current_Bullets@@3P6AXPAVScriptableGameObj@@H@ZA ; Set_Current_Bullets
	add	esp, 8
$LN9@Timer_Expi:

; 1268 :     }
; 1269 : 
; 1270 :     // Apply the appropriate idle animation
; 1271 :     ApplyIdleAnimation(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
$LN10@Timer_Expi:

; 1272 :   }
; 1273 : 
; 1274 : 
; 1275 :   // We might as well piggy back the discharged checks on the same timer too whilst we are at it...
; 1276 :   if (number == TIMER_AI_THINK && m_bIsDischarging)

	cmp	DWORD PTR _number$[ebp], -620363775	; db060001H
	jne	$LN8@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+149]
	test	ecx, ecx
	je	$LN8@Timer_Expi

; 1277 :   {
; 1278 :     // Have we unloaded our entire clip? If so then we can start charging for the next attack
; 1279 :     if (0 == Get_Current_Bullets(pSelf))

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	call	?Get_Current_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Bullets
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN7@Timer_Expi

; 1280 :     {
; 1281 :       m_bIsDischarging = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 0

; 1282 :       stopAttacking(pSelf);   // Don't want to fire again before we are ready!

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1283 :       
; 1284 :       // todo: set bpreloading as appropriate
; 1285 : 
; 1286 :       if (m_target)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN6@Timer_Expi

; 1287 :         StartCharging(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 1288 :       else

	jmp	SHORT $LN5@Timer_Expi
$LN6@Timer_Expi:

; 1289 :         ApplyIdleAnimation(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
$LN5@Timer_Expi:
	jmp	SHORT $LN8@Timer_Expi
$LN7@Timer_Expi:

; 1290 :     }
; 1291 : 
; 1292 :     // Has our target already died or ran like a coward before we could empty our clip? If so then
; 1293 :     // reset and trigger a reload (so we don't have a partial charge next time round)
; 1294 :     else if (!m_target)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	jne	SHORT $LN8@Timer_Expi

; 1295 :     {
; 1296 :       m_bIsDischarging = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 0

; 1297 :       Set_Current_Bullets(pSelf, 0);

	push	0
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	call	DWORD PTR ?Set_Current_Bullets@@3P6AXPAVScriptableGameObj@@H@ZA ; Set_Current_Bullets
	add	esp, 8

; 1298 :       
; 1299 :       // todo: set bpreloading as appropriate
; 1300 :       
; 1301 :       ApplyIdleAnimation(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
$LN8@Timer_Expi:

; 1302 :     }
; 1303 :   }
; 1304 :   
; 1305 :   
; 1306 :   if (number == TIMER_AI_CHARGE_PRERELOAD_COMPLETE && m_bIsPreReloading)

	cmp	DWORD PTR _number$[ebp], -620363774	; db060002H
	jne	SHORT $LN2@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	je	SHORT $LN2@Timer_Expi

; 1307 :   {
; 1308 :     m_bIsPreReloading = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+150], 0

; 1309 :     if (m_target)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN2@Timer_Expi

; 1310 :       StartCharging(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN2@Timer_Expi:

; 1311 :   }
; 1312 : 
; 1313 :   dp88_AI_Turret::Timer_Expired(pSelf, number);

	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AI_Turret::Timer_Expired

; 1314 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AI_ChargedTurret@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AI_ChargedTurret::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_PopupTurret_Spotter@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_PopupTurret_Spotter@@UAEPAXI@Z PROC		; dp88_AI_PopupTurret_Spotter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_PopupTurret_Spotter@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_PopupTurret_Spotter@@UAEPAXI@Z ENDP		; dp88_AI_PopupTurret_Spotter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_PopupTurret_Spotter@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_PopupTurret_Spotter@@UAE@XZ PROC		; dp88_AI_PopupTurret_Spotter::~dp88_AI_PopupTurret_Spotter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_PopupTurret_Spotter@@UAE@XZ ENDP		; dp88_AI_PopupTurret_Spotter::~dp88_AI_PopupTurret_Spotter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_PopupTurret_Spotter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_PopupTurret_Spotter@@QAE@XZ PROC		; dp88_AI_PopupTurret_Spotter::dp88_AI_PopupTurret_Spotter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_PopupTurret_Spotter@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_PopupTurret_Spotter@@QAE@XZ ENDP		; dp88_AI_PopupTurret_Spotter::dp88_AI_PopupTurret_Spotter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Enemy_Seen@dp88_AI_PopupTurret_Spotter@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_pTurret$1 = -8						; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_pEnemy$ = 12						; size = 4
?Enemy_Seen@dp88_AI_PopupTurret_Spotter@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AI_PopupTurret_Spotter::Enemy_Seen, COMDAT
; _this$ = ecx

; 1186 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1187 :   if ( GameObject* pTurret = Commands->Find_Object(Get_Int_Parameter("tId")) )

	push	OFFSET ??_C@_03EEDMAPME@tId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	mov	DWORD PTR _pTurret$1[ebp], eax
	cmp	DWORD PTR _pTurret$1[ebp], 0
	je	SHORT $LN1@Enemy_Seen

; 1188 :     Commands->Send_Custom_Event ( pSelf, pTurret, CUSTOM_TURRETAI_ENEMYSEEN, Commands->Get_ID(pEnemy), 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pEnemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	-637140991				; da060001H
	mov	eax, DWORD PTR _pTurret$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H
$LN1@Enemy_Seen:

; 1189 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@dp88_AI_PopupTurret_Spotter@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AI_PopupTurret_Spotter::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_PopupTurret@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_PopupTurret@@UAEPAXI@Z PROC			; dp88_AI_PopupTurret::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_PopupTurret@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_PopupTurret@@UAEPAXI@Z ENDP			; dp88_AI_PopupTurret::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_PopupTurret@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_PopupTurret@@UAE@XZ PROC			; dp88_AI_PopupTurret::~dp88_AI_PopupTurret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Turret@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_PopupTurret@@UAE@XZ ENDP			; dp88_AI_PopupTurret::~dp88_AI_PopupTurret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_PopupTurret@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_PopupTurret@@QAE@XZ PROC			; dp88_AI_PopupTurret::dp88_AI_PopupTurret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_AI_Turret@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_PopupTurret@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_PopupTurret@@QAE@XZ ENDP			; dp88_AI_PopupTurret::dp88_AI_PopupTurret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Undeploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?Undeploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_PopupTurret::Undeploy, COMDAT
; _this$ = ecx

; 1163 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1164 :   if ( m_deploymentState == STATE_DEPLOYED )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+144]
	cmp	ecx, 2
	jne	$LN1@Undeploy

; 1165 :   {
; 1166 :     m_deploymentState = STATE_UNDEPLOYING;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 3

; 1167 : 
; 1168 :     Commands->Set_Animation(pSelf,Get_Parameter("Deploy_Animation"),false,0,(float)Get_Int_Parameter("Deploy_Animation_Frames"),0, false);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BI@MKDFJGMB@Deploy_Animation_Frames?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	push	OFFSET ??_C@_0BB@HBCJANPM@Deploy_Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+164]
	call	edx
	add	esp, 28					; 0000001cH

; 1169 : 
; 1170 :     if (_stricmp(Get_Parameter("Deploy_Sound"),"0"))

	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	OFFSET ??_C@_0N@GDKODACH@Deploy_Sound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@Undeploy

; 1171 :       Commands->Create_Sound(Get_Parameter("Deploy_Sound"),Commands->Get_Position(pSelf),pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0N@GDKODACH@Deploy_Sound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+172]
	call	eax
	add	esp, 12					; 0000000cH
$LN1@Undeploy:

; 1172 :   }
; 1173 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Undeploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_PopupTurret::Undeploy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Deploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?Deploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_PopupTurret::Deploy, COMDAT
; _this$ = ecx

; 1148 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1149 :   if ( m_deploymentState == STATE_UNDEPLOYED || m_deploymentState == STATE_UNDEPLOYING )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+144]
	test	ecx, ecx
	je	SHORT $LN2@Deploy
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+144]
	cmp	ecx, 3
	jne	$LN1@Deploy
$LN2@Deploy:

; 1150 :   {
; 1151 :     m_deploymentState = STATE_DEPLOYING;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1

; 1152 : 
; 1153 :     Commands->Set_Animation(pSelf,Get_Parameter("Deploy_Animation"),false,0,Get_Animation_Frame(pSelf),(float)Get_Int_Parameter("Deploy_Animation_Frames"),false);

	push	0
	push	OFFSET ??_C@_0BI@MKDFJGMB@Deploy_Animation_Frames?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	call	?Get_Animation_Frame@@YAMPAVScriptableGameObj@@@Z ; Get_Animation_Frame
	fstp	DWORD PTR [esp]
	push	0
	push	0
	push	OFFSET ??_C@_0BB@HBCJANPM@Deploy_Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+164]
	call	eax
	add	esp, 28					; 0000001cH

; 1154 : 
; 1155 :     if (_stricmp(Get_Parameter("Deploy_Sound"),"0"))

	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	OFFSET ??_C@_0N@GDKODACH@Deploy_Sound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@Deploy

; 1156 :       Commands->Create_Sound(Get_Parameter("Deploy_Sound"),Commands->Get_Position(pSelf),pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0N@GDKODACH@Deploy_Sound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+172]
	call	eax
	add	esp, 12					; 0000000cH
$LN1@Deploy:

; 1157 :   }
; 1158 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Deploy@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_PopupTurret::Deploy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?attackLocation@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_location$ = 12						; size = 12
_primary$ = 24						; size = 1
?attackLocation@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z PROC ; dp88_AI_PopupTurret::attackLocation, COMDAT
; _this$ = ecx

; 1138 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1139 :   if ( m_deploymentState == STATE_DEPLOYED )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+144]
	cmp	ecx, 2
	jne	SHORT $LN2@attackLoca

; 1140 :     dp88_AI_Turret::attackLocation(pSelf, location, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR _location$[ebp]
	push	edx
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ; dp88_AI_Turret::attackLocation

; 1141 :   else

	jmp	SHORT $LN3@attackLoca
$LN2@attackLoca:

; 1142 :     Deploy(pSelf); // No need to remember what we are deploying to shoot, enemy seen will be re-triggered

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN3@attackLoca:

; 1143 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?attackLocation@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ENDP ; dp88_AI_PopupTurret::attackLocation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?attackTarget@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@0_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_pTarget$ = 12						; size = 4
_primary$ = 16						; size = 1
?attackTarget@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@0_N@Z PROC ; dp88_AI_PopupTurret::attackTarget, COMDAT
; _this$ = ecx

; 1128 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1129 :   if ( m_deploymentState == STATE_DEPLOYED )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+144]
	cmp	ecx, 2
	jne	SHORT $LN2@attackTarg

; 1130 :     dp88_AI_Turret::attackTarget(pSelf, pTarget, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTarget$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSelf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z ; dp88_AI_Turret::attackTarget

; 1131 :   else

	jmp	SHORT $LN3@attackTarg
$LN2@attackTarg:

; 1132 :     Deploy(pSelf); // No need to remember what we are deploying to shoot, enemy seen will be re-triggered

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN3@attackTarg:

; 1133 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?attackTarget@dp88_AI_PopupTurret@@MAEXPAVScriptableGameObj@@0_N@Z ENDP ; dp88_AI_PopupTurret::attackTarget
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Destroyed@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_pSpotter$1 = -8					; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?Destroyed@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_PopupTurret::Destroyed, COMDAT
; _this$ = ecx

; 1120 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1121 :   if ( GameObject* pSpotter = Commands->Find_Object(m_spotterId) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pSpotter$1[ebp], eax
	cmp	DWORD PTR _pSpotter$1[ebp], 0
	je	SHORT $LN2@Destroyed

; 1122 :     Commands->Destroy_Object(pSpotter);

	mov	eax, DWORD PTR _pSpotter$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN2@Destroyed:

; 1123 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_PopupTurret::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Animation_Complete@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; dp88_AI_PopupTurret::Animation_Complete, COMDAT
; _this$ = ecx

; 1100 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1101 :   if ( m_deploymentState == STATE_DEPLOYING )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+144]
	cmp	ecx, 1
	jne	SHORT $LN3@Animation_

; 1102 :   {
; 1103 :     m_deploymentState = STATE_DEPLOYED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 2

; 1104 :     m_undeployTime = time(NULL)+Get_Int_Parameter("Deploy_Timeout");

	push	0
	call	_time
	add	esp, 4
	mov	esi, eax
	mov	edi, edx
	push	OFFSET ??_C@_0P@MDDEPNOL@Deploy_Timeout?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cdq
	add	esi, eax
	adc	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], esi
	mov	DWORD PTR [eax+156], edi

; 1105 : 
; 1106 :     // Reset targetting parameters, otherwise the next Enemy_Seen call will think we are already attacking
; 1107 :     // an enemy and not trigger the appropriate actions we are depending upon
; 1108 :     m_target = nullptr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 1109 : 	hasTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0
	jmp	SHORT $LN2@Animation_
$LN3@Animation_:

; 1110 :   }
; 1111 :   else if ( m_deploymentState == STATE_UNDEPLOYING )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+144]
	cmp	ecx, 3
	jne	SHORT $LN2@Animation_

; 1112 :     m_deploymentState = STATE_UNDEPLOYED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 0
$LN2@Animation_:

; 1113 : 
; 1114 :   dp88_AI_Turret::Animation_Complete(pSelf, animation_name);

	mov	eax, DWORD PTR _animation_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ; ScriptImpClass::Animation_Complete

; 1115 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; dp88_AI_PopupTurret::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Custom@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_pEnemy$1 = -8						; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_AI_PopupTurret::Custom, COMDAT
; _this$ = ecx

; 1083 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1084 :   if ( m_spotterId == Commands->Get_ID(pSender) )

	mov	eax, DWORD PTR _pSender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+160], eax
	jne	SHORT $LN3@Custom

; 1085 :   {
; 1086 :     // Spotter only ever sends us one type of message... enemy spotted! Note that we don't simply
; 1087 :     // deploy here because it might be a target we can't / shouldn't attack, let Enemy_Seen decide
; 1088 :     // if we actually need to do anything
; 1089 :     GameObject* pEnemy = Commands->Find_Object(param);

	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	mov	DWORD PTR _pEnemy$1[ebp], eax

; 1090 :     if ( pEnemy )

	cmp	DWORD PTR _pEnemy$1[ebp], 0
	je	SHORT $LN2@Custom

; 1091 :       Enemy_Seen(pSelf, pEnemy);

	mov	eax, DWORD PTR _pEnemy$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
$LN2@Custom:

; 1092 :   }
; 1093 :   else

	jmp	SHORT $LN4@Custom
$LN3@Custom:

; 1094 :     dp88_AI_Turret::Custom(pSelf, type, param, pSender);

	mov	eax, DWORD PTR _pSender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _param$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_customAI::Custom
$LN4@Custom:

; 1095 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_AI_PopupTurret::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Timer_Expired@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv156 = -80						; size = 4
tv153 = -76						; size = 8
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AI_PopupTurret::Timer_Expired, COMDAT
; _this$ = ecx

; 1064 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1065 :   // Piggy-back the undeploy timer logic on the existing target check timer since its always running
; 1066 :   if ( number == TIMER_AI_THINK && m_deploymentState == STATE_DEPLOYED )

	cmp	DWORD PTR _number$[ebp], -620363775	; db060001H
	jne	$LN4@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+144]
	cmp	ecx, 2
	jne	$LN4@Timer_Expi

; 1067 :   {
; 1068 :     // If we have no target and have reached the undeploy timeout then trigger undeployment
; 1069 :     if ( !m_target && time(NULL) > m_undeployTime )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	jne	SHORT $LN3@Timer_Expi
	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv153[ebp], eax
	mov	DWORD PTR tv153[ebp+4], edx
	mov	DWORD PTR tv156[ebp], ecx
	mov	edx, DWORD PTR tv156[ebp]
	mov	eax, DWORD PTR tv153[ebp+4]
	cmp	eax, DWORD PTR [edx+156]
	jl	SHORT $LN3@Timer_Expi
	jg	SHORT $LN7@Timer_Expi
	mov	ecx, DWORD PTR tv156[ebp]
	mov	edx, DWORD PTR tv153[ebp]
	cmp	edx, DWORD PTR [ecx+152]
	jbe	SHORT $LN3@Timer_Expi
$LN7@Timer_Expi:

; 1070 :       Undeploy(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	jmp	SHORT $LN4@Timer_Expi
$LN3@Timer_Expi:

; 1071 :     
; 1072 :     // Else, if we have an active target, update the undeployment timeout time
; 1073 :     else if ( m_target )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN4@Timer_Expi

; 1074 :       m_undeployTime = time(NULL)+Get_Int_Parameter("Deploy_Timeout");

	push	0
	call	_time
	add	esp, 4
	mov	esi, eax
	mov	edi, edx
	push	OFFSET ??_C@_0P@MDDEPNOL@Deploy_Timeout?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cdq
	add	esi, eax
	adc	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], esi
	mov	DWORD PTR [eax+156], edi
$LN4@Timer_Expi:

; 1075 :   }
; 1076 : 
; 1077 :   dp88_AI_Turret::Timer_Expired(pSelf, number);

	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z ; dp88_AI_Turret::Timer_Expired

; 1078 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AI_PopupTurret::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Created@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -104						; size = 12
_scriptParams$2 = -28					; size = 20
_pSpotter$ = -8						; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?Created@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_PopupTurret::Created, COMDAT
; _this$ = ecx

; 1028 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1029 :   m_deploymentState = STATE_UNDEPLOYED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 0

; 1030 :   m_spotterId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 0

; 1031 : 
; 1032 :   // Create our spotter turret
; 1033 :   GameObject* pSpotter = Commands->Create_Object ( Get_Parameter("Spotter_Preset"), Commands->Get_Position(pSelf) );

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0P@DACGJHIB@Spotter_Preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _pSpotter$[ebp], eax

; 1034 :   if ( pSpotter )

	cmp	DWORD PTR _pSpotter$[ebp], 0
	je	$LN1@Created

; 1035 :   {
; 1036 :     m_spotterId = Commands->Get_ID(pSpotter);

	mov	eax, DWORD PTR _pSpotter$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], eax

; 1037 : 
; 1038 :     // Set the spotter turret to match our configuration, but invisible
; 1039 :     Commands->Set_Model ( pSpotter, Get_Model(pSelf) );

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	call	?Get_Model@@YAPBDPAVScriptableGameObj@@@Z ; Get_Model
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pSpotter$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+160]
	call	eax
	add	esp, 8

; 1040 :     Commands->Set_Is_Rendered ( pSpotter, false );

	push	0
	mov	eax, DWORD PTR _pSpotter$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+628]
	call	edx
	add	esp, 8

; 1041 :     Commands->Enable_Enemy_Seen ( pSpotter, true );

	push	1
	mov	eax, DWORD PTR _pSpotter$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+300]
	call	edx
	add	esp, 8

; 1042 :     Commands->Disable_All_Collisions ( pSpotter );

	mov	eax, DWORD PTR _pSpotter$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 4

; 1043 :     Commands->Innate_Enable ( pSpotter );

	mov	eax, DWORD PTR _pSpotter$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+440]
	call	edx
	add	esp, 4

; 1044 :     Set_Skin ( pSpotter, "Blamo" );

	push	OFFSET ??_C@_05HBJPNAAK@Blamo?$AA@
	mov	eax, DWORD PTR _pSpotter$[ebp]
	push	eax
	call	?Set_Skin@@YAXPAVScriptableGameObj@@PBD@Z ; Set_Skin
	add	esp, 8

; 1045 : 
; 1046 :     // Attach the spotter script
; 1047 :     char scriptParams[20];
; 1048 :     sprintf_s ( scriptParams, sizeof(scriptParams), "%d", Commands->Get_ID(pSelf) );

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	20					; 00000014H
	lea	eax, DWORD PTR _scriptParams$2[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H

; 1049 :     Commands->Attach_Script ( pSpotter, "dp88_AI_PopupTurret_Spotter", scriptParams );

	lea	eax, DWORD PTR _scriptParams$2[ebp]
	push	eax
	push	OFFSET ??_C@_0BM@GAGONNPO@dp88_AI_PopupTurret_Spotter?$AA@
	mov	ecx, DWORD PTR _pSpotter$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+120]
	call	eax
	add	esp, 12					; 0000000cH

; 1050 : 
; 1051 :     // 'Deploy' the spotter turret so it can see what we would be able to see whilst deployed
; 1052 :     Commands->Set_Animation_Frame ( pSpotter, Get_Parameter("Deploy_Animation"), Get_Int_Parameter("Deploy_Animation_Frames") );

	push	OFFSET ??_C@_0BI@MKDFJGMB@Deploy_Animation_Frames?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0BB@HBCJANPM@Deploy_Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pSpotter$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 12					; 0000000cH

; 1053 : 
; 1054 : 	// Make sure the turret itself starts popped down
; 1055 : 	Commands->Set_Animation_Frame ( pSelf, Get_Parameter("Deploy_Animation"), 0 );

	push	0
	push	OFFSET ??_C@_0BB@HBCJANPM@Deploy_Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 12					; 0000000cH
$LN1@Created:

; 1056 :   }
; 1057 : 
; 1058 :   dp88_AI_Turret::Created(pSelf);

	mov	eax, DWORD PTR _pSelf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ; dp88_customAI::Created

; 1059 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AI_PopupTurret@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_PopupTurret::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_Turret@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_Turret@@UAEPAXI@Z PROC			; dp88_AI_Turret::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Turret@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_Turret@@UAEPAXI@Z ENDP			; dp88_AI_Turret::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_Turret@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_Turret@@UAE@XZ PROC				; dp88_AI_Turret::~dp88_AI_Turret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_customAI@@UAE@XZ		; dp88_customAI::~dp88_customAI
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_Turret@@UAE@XZ ENDP				; dp88_AI_Turret::~dp88_AI_Turret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_Turret@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_Turret@@QAE@XZ PROC				; dp88_AI_Turret::dp88_AI_Turret, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_customAI@@QAE@XZ		; dp88_customAI::dp88_customAI
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_Turret@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_Turret@@QAE@XZ ENDP				; dp88_AI_Turret::dp88_AI_Turret
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_Turret::stopAttacking, COMDAT
; _this$ = ecx

; 1012 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1013 :   Commands->Action_Reset(obj,101.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42ca0000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8

; 1014 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Turret::stopAttacking
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z
_TEXT	SEGMENT
tv160 = -268						; size = 4
tv91 = -268						; size = 4
_params$ = -200						; size = 196
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_location$ = 12						; size = 12
_primary$ = 24						; size = 1
?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z PROC ; dp88_AI_Turret::attackLocation, COMDAT
; _this$ = ecx

; 978  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 979  : 	ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 980  : 	Commands->Get_Action_Params(obj,params);

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 8

; 981  : 	
; 982  : 	// If we are already using splash on a target then we just want to modify the action (if
; 983  : 	// priority is 0 the action has been completed or reset, so we don't want to use modify)
; 984  : 	if ( params.ActionID == 8951 && params.Priority > 0.0f )

	cmp	DWORD PTR _params$[ebp+4], 8951		; 000022f7H
	jne	$LN2@attackLoca
	cvtsi2ss xmm0, DWORD PTR _params$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN2@attackLoca

; 985  : 	{
; 986  : 		Commands->Get_Action_Params(obj,params);

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 8

; 987  : 		params.Set_Attack( location, (primary)?(float)primary_maxRange:(float)secondary_maxRange, 0.0, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	je	SHORT $LN5@attackLoca
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+84]
	movss	DWORD PTR tv91[ebp], xmm0
	jmp	SHORT $LN6@attackLoca
$LN5@attackLoca:
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+92]
	movss	DWORD PTR tv91[ebp], xmm0
$LN6@attackLoca:
	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR tv91[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _location$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Attack@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ; ActionParamsStruct::Set_Attack

; 988  : 		Commands->Modify_Action(obj,8951,params,false,true);

	push	1
	push	0
	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	push	8951					; 000022f7H
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 20					; 00000014H

; 989  : 	}
; 990  : 
; 991  : 	// Otherwise setup a new action
; 992  : 	else

	jmp	$LN1@attackLoca
$LN2@attackLoca:

; 993  : 	{
; 994  : 		params.AttackObject = 0;

	mov	DWORD PTR _params$[ebp+88], 0

; 995  : 		// Reset any current attack (note: specifically use the function from THIS
; 996  : 		// class and not a derived class as we do not know what functionality may
; 997  : 		// be implemented in a derived class)
; 998  : 		dp88_AI_Turret::stopAttacking(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_Turret::stopAttacking

; 999  : 
; 1000 : 		params.Set_Basic( this, 100.0f, 8951 );

	push	-1
	push	8951					; 000022f7H
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 1001 : 		params.Set_Attack( location, (primary)?(float)primary_maxRange:(float)secondary_maxRange, 0.0, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	je	SHORT $LN7@attackLoca
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+84]
	movss	DWORD PTR tv160[ebp], xmm0
	jmp	SHORT $LN8@attackLoca
$LN7@attackLoca:
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+92]
	movss	DWORD PTR tv160[ebp], xmm0
$LN8@attackLoca:
	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR tv160[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _location$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Attack@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ; ActionParamsStruct::Set_Attack

; 1002 : 		params.AttackCheckBlocked = false;

	mov	BYTE PTR _params$[ebp+108], 0

; 1003 : 		Commands->Action_Attack( obj, params );

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 8
$LN1@attackLoca:

; 1004 : 	}
; 1005 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?attackLocation@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@VVector3@@_N@Z ENDP ; dp88_AI_Turret::attackLocation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z
_TEXT	SEGMENT
tv93 = -268						; size = 4
_params$ = -200						; size = 196
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
_primary$ = 16						; size = 1
?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z PROC ; dp88_AI_Turret::attackTarget, COMDAT
; _this$ = ecx

; 958  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 959  : 	// Reset any current attack (note: specifically use the function from THIS
; 960  : 	// class and not a derived class as we do not know what functionality may
; 961  : 	// be implemented in a derived class)
; 962  : 	dp88_AI_Turret::stopAttacking(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stopAttacking@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@@Z ; dp88_AI_Turret::stopAttacking

; 963  : 
; 964  : 	ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 965  : 	params.Set_Basic( this, 100.0f, 8950 );

	push	-1
	push	8950					; 000022f6H
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 966  : 	params.Set_Attack( target, (primary)?(float)primary_maxRange:(float)secondary_maxRange, 0.0, primary);

	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	je	SHORT $LN3@attackTarg
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+84]
	movss	DWORD PTR tv93[ebp], xmm0
	jmp	SHORT $LN4@attackTarg
$LN3@attackTarg:
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+92]
	movss	DWORD PTR tv93[ebp], xmm0
$LN4@attackTarg:
	movzx	eax, BYTE PTR _primary$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR tv93[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Attack@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z ; ActionParamsStruct::Set_Attack

; 967  : 	params.AttackCheckBlocked = false;

	mov	BYTE PTR _params$[ebp+108], 0

; 968  : 	Commands->Action_Attack( obj, params );

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 8

; 969  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?attackTarget@dp88_AI_Turret@@MAEXPAVScriptableGameObj@@0_N@Z ENDP ; dp88_AI_Turret::attackTarget
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z PROC ; dp88_AI_Turret::checkPowerState, COMDAT
; _this$ = ecx

; 948  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 949  : 	return ( !requiresPower || Is_Base_Powered(Get_Object_Type(obj)) );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+140]
	test	ecx, ecx
	je	SHORT $LN3@checkPower
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	call	?Is_Base_Powered@@YA_NH@Z		; Is_Base_Powered
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@checkPower
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@checkPower
$LN3@checkPower:
	mov	DWORD PTR tv73[ebp], 1
$LN4@checkPower:
	mov	al, BYTE PTR tv73[ebp]

; 950  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?checkPowerState@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Turret::checkPowerState
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z
_TEXT	SEGMENT
tv185 = -76						; size = 4
tv137 = -76						; size = 4
_distance$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
_primary$ = 16						; size = 1
?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z PROC ; dp88_AI_Turret::checkRange, COMDAT
; _this$ = ecx

; 927  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 928  : 	// Get distance to target
; 929  : 	float distance = getDistance ( obj, target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ; dp88_customAI::getDistance
	add	esp, 8
	fstp	DWORD PTR _distance$[ebp]

; 930  : 	if ( (primary && distance < primary_minRange) || (!primary && distance < secondary_minRange) )

	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	je	SHORT $LN6@checkRange
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+80]
	comiss	xmm0, DWORD PTR _distance$[ebp]
	ja	SHORT $LN7@checkRange
$LN6@checkRange:
	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	jne	SHORT $LN8@checkRange
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+88]
	comiss	xmm0, DWORD PTR _distance$[ebp]
	jbe	SHORT $LN8@checkRange
$LN7@checkRange:

; 931  : 	{
; 932  : 		if ( debug ) fprintf( debugFile, "Target is too close to attack (distance: %.3f < min range: %d)\n", distance, (primary)?primary_minRange:secondary_minRange );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN5@checkRange
	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	je	SHORT $LN11@checkRange
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR tv137[ebp], edx
	jmp	SHORT $LN12@checkRange
$LN11@checkRange:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR tv137[ebp], ecx
$LN12@checkRange:
	mov	edx, DWORD PTR tv137[ebp]
	push	edx
	cvtss2sd xmm0, DWORD PTR _distance$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0EA@MAAJCEDB@Target?5is?5too?5close?5to?5attack?5?$CId@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
$LN5@checkRange:

; 933  : 		return false;

	xor	al, al
	jmp	$LN9@checkRange
$LN8@checkRange:

; 934  : 	}
; 935  : 	if ( (primary && distance > primary_maxRange) || (!primary && distance > secondary_maxRange) )

	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	je	SHORT $LN2@checkRange
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+84]
	movss	xmm1, DWORD PTR _distance$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN3@checkRange
$LN2@checkRange:
	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	jne	SHORT $LN4@checkRange
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+92]
	movss	xmm1, DWORD PTR _distance$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN4@checkRange
$LN3@checkRange:

; 936  : 	{
; 937  : 		if ( debug ) fprintf( debugFile, "Target is too far away to attack (distance: %.3f > max range: %d)\n", distance, (primary)?primary_maxRange:secondary_maxRange );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN1@checkRange
	movzx	eax, BYTE PTR _primary$[ebp]
	test	eax, eax
	je	SHORT $LN13@checkRange
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR tv185[ebp], edx
	jmp	SHORT $LN14@checkRange
$LN13@checkRange:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR tv185[ebp], ecx
$LN14@checkRange:
	mov	edx, DWORD PTR tv185[ebp]
	push	edx
	cvtss2sd xmm0, DWORD PTR _distance$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0ED@NHCIAICJ@Target?5is?5too?5far?5away?5to?5attack@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
$LN1@checkRange:

; 938  : 		return false;

	xor	al, al
	jmp	SHORT $LN9@checkRange
$LN4@checkRange:

; 939  : 	}
; 940  : 
; 941  : 	return true;

	mov	al, 1
$LN9@checkRange:

; 942  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?checkRange@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0_N@Z ENDP ; dp88_AI_Turret::checkRange
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv75 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z PROC ; dp88_AI_Turret::checkTeam, COMDAT
; _this$ = ecx

; 918  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 919  : 	return !( Commands->Get_Player_Type ( target ) == 2 || Commands->Get_Player_Type ( target ) == Commands->Get_Player_Type ( obj ) );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	cmp	eax, 2
	je	SHORT $LN3@checkTeam
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN3@checkTeam
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@checkTeam
$LN3@checkTeam:
	mov	DWORD PTR tv75[ebp], 0
$LN4@checkTeam:
	mov	al, BYTE PTR tv75[ebp]

; 920  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?checkTeam@dp88_AI_Turret@@MAE_NPAVScriptableGameObj@@0@Z ENDP ; dp88_AI_Turret::checkTeam
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_bEnabled$ = 12						; size = 1
?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z PROC ; dp88_AI_Turret::AIStateChanged, COMDAT
; _this$ = ecx

; 907  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 908  :   dp88_customAI::AIStateChanged(pObj, bEnabled);

	movzx	eax, BYTE PTR _bEnabled$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z ; dp88_customAI::AIStateChanged

; 909  : 
; 910  :   if ( !bEnabled )

	movzx	eax, BYTE PTR _bEnabled$[ebp]
	test	eax, eax
	jne	SHORT $LN2@AIStateCha

; 911  :     stopAttacking(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN2@AIStateCha:

; 912  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?AIStateChanged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N@Z ENDP ; dp88_AI_Turret::AIStateChanged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z
_TEXT	SEGMENT
tv91 = -69						; size = 1
tv81 = -69						; size = 1
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_loadSecondaryFireSettings$ = 12			; size = 1
_loadBuildingTargetSettings$ = 16			; size = 1
?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z PROC ; dp88_AI_Turret::loadSettings, COMDAT
; _this$ = ecx

; 771  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 772  :   dp88_customAI::loadSettings(obj, loadSecondaryFireSettings, loadBuildingTargetSettings);

	movzx	eax, BYTE PTR _loadBuildingTargetSettings$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _loadSecondaryFireSettings$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_customAI::loadSettings

; 773  : 
; 774  :   requiresPower = (Get_Int_Parameter("Requires_Power") > 0 ) ? true: false;

	push	OFFSET ??_C@_0P@FHEEEPDF@Requires_Power?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jle	SHORT $LN3@loadSettin
	mov	BYTE PTR tv81[ebp], 1
	jmp	SHORT $LN4@loadSettin
$LN3@loadSettin:
	mov	BYTE PTR tv81[ebp], 0
$LN4@loadSettin:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv81[ebp]
	mov	BYTE PTR [eax+140], cl

; 775  :   splashInfantry = (Get_Int_Parameter("Splash_Infantry") > 0 ) ? true: false;

	push	OFFSET ??_C@_0BA@IHFBNEGA@Splash_Infantry?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jle	SHORT $LN5@loadSettin
	mov	BYTE PTR tv91[ebp], 1
	jmp	SHORT $LN6@loadSettin
$LN5@loadSettin:
	mov	BYTE PTR tv91[ebp], 0
$LN6@loadSettin:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv91[ebp]
	mov	BYTE PTR [eax+141], cl

; 776  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?loadSettings@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@_N1@Z ENDP ; dp88_AI_Turret::loadSettings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z PROC	; dp88_AI_Turret::Init, COMDAT
; _this$ = ecx

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 765  :   dp88_customAI::Init( obj );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ; dp88_customAI::Init

; 766  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@@Z ENDP	; dp88_AI_Turret::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_AI_Turret::Damaged, COMDAT
; _this$ = ecx

; 853  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 854  : 	if (!damager || amount <= 0 || !checkTeam(obj,damager) || Get_Object_Type(obj)==-2 || obj->As_SmartGameObj()->Is_Enemy_Seen_Enabled()==false)

	cmp	DWORD PTR _damager$[ebp], 0
	je	SHORT $LN1@Damaged
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _amount$[ebp]
	jae	SHORT $LN1@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+140]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Damaged
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	eax, -2					; fffffffeH
	je	SHORT $LN1@Damaged
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, eax
	call	?Is_Enemy_Seen_Enabled@SmartGameObj@@QAE_NXZ ; SmartGameObj::Is_Enemy_Seen_Enabled
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Damaged
$LN1@Damaged:

; 855  : 	{
; 856  : 		return;

	jmp	SHORT $LN3@Damaged
$LN2@Damaged:

; 857  : 	}
; 858  : 	Enemy_Seen(obj,damager);

	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
$LN3@Damaged:

; 859  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_AI_Turret::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv473 = -100						; size = 4
tv577 = -96						; size = 4
tv420 = -96						; size = 4
tv465 = -92						; size = 4
tv414 = -92						; size = 4
tv350 = -92						; size = 4
tv323 = -92						; size = 4
tv251 = -92						; size = 4
tv224 = -92						; size = 4
tv199 = -92						; size = 4
$T1 = -84						; size = 12
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AI_Turret::Timer_Expired, COMDAT
; _this$ = ecx

; 864  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 865  : 	// Check target is still alive, still an enemy (eg: stolen vehicles) and in range
; 866  : 	if ( number == TIMER_AI_THINK )

	cmp	DWORD PTR _number$[ebp], -620363775	; db060001H
	jne	$LN1@Timer_Expi

; 867  : 	{
; 868  : 		if ( hasTarget )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+112]
	test	ecx, ecx
	je	$LN1@Timer_Expi

; 869  : 		{
; 870  : 			if (!m_target || !checkPowerState(obj)
; 871  : 				|| ( Commands->Get_Health ( m_target ) + Commands->Get_Shield_Strength ( m_target ) <= 0 )
; 872  : 				|| !checkTeam ( obj, m_target )
; 873  : 				|| !checkRange ( obj, m_target, m_bTargetPrimaryFire )
; 874  : 				|| (int)time(NULL) - targetLastSeen > 3
; 875  : 				|| ( m_target->As_VehicleGameObj() && !IsVehicleAIEnabled(m_target->As_VehicleGameObj()) && IsVehicleEmpty(m_target->As_VehicleGameObj()) ))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	$LN6@Timer_Expi
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+220]
	call	ecx
	add	esp, 4
	fstp	DWORD PTR tv465[ebp]
	movss	xmm0, DWORD PTR tv465[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	movss	DWORD PTR tv577[ebp], xmm0
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+232]
	call	eax
	add	esp, 4
	fstp	DWORD PTR tv473[ebp]
	movss	xmm0, DWORD PTR tv577[ebp]
	addss	xmm0, DWORD PTR tv473[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jae	$LN6@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@Timer_Expi
	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+116]
	cmp	eax, 3
	jg	$LN6@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	DWORD PTR tv199[ebp], eax
	mov	eax, DWORD PTR tv199[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv199[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	$LN7@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	DWORD PTR tv224[ebp], eax
	mov	eax, DWORD PTR tv224[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv224[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN7@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	DWORD PTR tv251[ebp], eax
	mov	eax, DWORD PTR tv251[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv251[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN7@Timer_Expi
$LN6@Timer_Expi:

; 876  : 			{
; 877  : 				if ( debug ) fprintf ( debugFile, "Target %d no longer valid, ceasing attack.\n", m_target->Get_ID());

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN5@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	ecx, eax
	call	?Get_ID@BaseGameObj@@QBEHXZ		; BaseGameObj::Get_ID
	push	eax
	push	OFFSET ??_C@_0CM@MGDFLFMJ@Target?5?$CFd?5no?5longer?5valid?0?5ceasi@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN5@Timer_Expi:

; 878  : 				m_target = nullptr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 879  : 				hasTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 880  : 				targetPriority = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 881  : 				targetLastSeen = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+116], 0

; 882  : 				stopAttacking(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
	jmp	$LN1@Timer_Expi
$LN7@Timer_Expi:

; 883  : 			}
; 884  : 
; 885  : 			// Otherwise we are OK to continue attacking... if this is an infantry unit
; 886  : 			// and splash targetting is enabled then update targetting position
; 887  : 			else if ( splashInfantry && m_target->As_SoldierGameObj())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	test	ecx, ecx
	je	$LN1@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	DWORD PTR tv323[ebp], eax
	mov	eax, DWORD PTR tv323[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv323[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	$LN1@Timer_Expi

; 888  : 			{
; 889  : 				if(obj->As_SmartGameObj()->Is_Splash_Possible(m_target->As_PhysicalGameObj()))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	DWORD PTR tv350[ebp], eax
	mov	eax, DWORD PTR tv350[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv350[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, eax
	call	?Is_Splash_Possible@SmartGameObj@@QAE_NPAVPhysicalGameObj@@@Z ; SmartGameObj::Is_Splash_Possible
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Timer_Expi

; 890  : 				{
; 891  : 					attackLocation ( obj, Commands->Get_Position(m_target), m_bTargetPrimaryFire );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax

; 892  : 				}
; 893  : 				else

	jmp	SHORT $LN1@Timer_Expi
$LN2@Timer_Expi:

; 894  : 				{
; 895  : 					attackLocation ( obj, m_target->As_SoldierGameObj()->Get_Bullseye_Position(), m_bTargetPrimaryFire );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ; ReferencerClass::operator->
	mov	DWORD PTR tv414[ebp], eax
	mov	eax, DWORD PTR tv414[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv414[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR tv420[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+124]
	push	edx
	sub	esp, 12					; 0000000cH
	push	esp
	mov	eax, DWORD PTR tv420[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv420[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+156]
	call	edx
$LN1@Timer_Expi:

; 896  : 				}
; 897  : 			}
; 898  : 		}
; 899  : 	}
; 900  : 
; 901  :   dp88_customAI::Timer_Expired(obj, number);

	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z ; dp88_customAI::Timer_Expired

; 902  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AI_Turret::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv421 = -100						; size = 4
tv207 = -100						; size = 4
tv69 = -100						; size = 4
$T1 = -92						; size = 12
_enemyPriority$ = -12					; size = 4
_attackPrimary$ = -5					; size = 1
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enemy$ = 12						; size = 4
?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AI_Turret::Enemy_Seen, COMDAT
; _this$ = ecx

; 781  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 782  :   // If we saw a soldier in a vehicle, switch the GameObject to that of the vehicle
; 783  :   enemy = ( Get_Vehicle(enemy) ) ? Get_Vehicle(enemy) : enemy;

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	call	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle
	add	esp, 4
	test	eax, eax
	je	SHORT $LN24@Enemy_Seen
	mov	ecx, DWORD PTR _enemy$[ebp]
	push	ecx
	call	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle
	add	esp, 4
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN25@Enemy_Seen
$LN24@Enemy_Seen:
	mov	edx, DWORD PTR _enemy$[ebp]
	mov	DWORD PTR tv69[ebp], edx
$LN25@Enemy_Seen:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _enemy$[ebp], eax

; 784  :   if ( debug ) fprintf( debugFile, "Seen an enemy: %d (%s)\n", Commands->Get_ID(enemy), Commands->Get_Preset_Name(enemy) );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN21@Enemy_Seen
	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0BI@JKCMNHEG@Seen?5an?5enemy?3?5?$CFd?5?$CI?$CFs?$CJ?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
$LN21@Enemy_Seen:

; 785  : 
; 786  : 	// If this is our current target update last seen time and priority
; 787  : 	if ( enemy == m_target )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	cmp	DWORD PTR _enemy$[ebp], eax
	jne	SHORT $LN20@Enemy_Seen

; 788  : 	{
; 789  : 		if ( debug ) fprintf( debugFile, "Enemy is current target, last seen time and priority updated\n" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN19@Enemy_Seen
	push	OFFSET ??_C@_0DO@JIOBFADF@Enemy?5is?5current?5target?0?5last?5se@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN19@Enemy_Seen:

; 790  : 		targetLastSeen = (int)time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 791  : 		targetPriority = getPriority(obj, enemy);

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+120]

; 792  : 		return;

	jmp	$LN22@Enemy_Seen
$LN20@Enemy_Seen:

; 793  : 	}
; 794  : 
; 795  : 	// If base power is offline and we require power then abort
; 796  : 	if ( !checkPowerState(obj) )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN18@Enemy_Seen

; 797  : 	{
; 798  : 		if ( debug ) fprintf( debugFile, "Unable to attack, no power available..." );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN17@Enemy_Seen
	push	OFFSET ??_C@_0CI@NEFPOHNA@Unable?5to?5attack?0?5no?5power?5avail@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN17@Enemy_Seen:

; 799  : 		return;

	jmp	$LN22@Enemy_Seen
$LN18@Enemy_Seen:

; 800  : 	}
; 801  : 
; 802  : 
; 803  : 	// Determine if we want to use primary or secondary fire on this target
; 804  : 	bool attackPrimary = getPrimary ( enemy );

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getPrimary@dp88_customAI@@QAE_NPAVScriptableGameObj@@@Z ; dp88_customAI::getPrimary
	mov	BYTE PTR _attackPrimary$[ebp], al

; 805  : 	if ( debug ) fprintf( debugFile, "Using %s fire on this target type\n", (attackPrimary)?"primary":"secondary" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN16@Enemy_Seen
	movzx	eax, BYTE PTR _attackPrimary$[ebp]
	test	eax, eax
	je	SHORT $LN26@Enemy_Seen
	mov	DWORD PTR tv207[ebp], OFFSET ??_C@_07CJDBHDIN@primary?$AA@
	jmp	SHORT $LN27@Enemy_Seen
$LN26@Enemy_Seen:
	mov	DWORD PTR tv207[ebp], OFFSET ??_C@_09EADLKHON@secondary?$AA@
$LN27@Enemy_Seen:
	mov	ecx, DWORD PTR tv207[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@IIDFODBG@Using?5?$CFs?5fire?5on?5this?5target?5typ@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN16@Enemy_Seen:

; 806  : 
; 807  : 
; 808  : 	// Check if the target is between our min and max firing ranges
; 809  : 	if ( !checkRange(obj, enemy, attackPrimary ) )

	movzx	eax, BYTE PTR _attackPrimary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enemy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN15@Enemy_Seen

; 810  : 	{
; 811  : 		if ( debug ) fprintf( debugFile, "Unable to attack, target out of range\n" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN14@Enemy_Seen
	push	OFFSET ??_C@_0CH@FPJDMGFB@Unable?5to?5attack?0?5target?5out?5of?5@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN14@Enemy_Seen:

; 812  : 		return;

	jmp	$LN22@Enemy_Seen
$LN15@Enemy_Seen:

; 813  : 	}
; 814  : 
; 815  : 
; 816  : 	// Determine the priority of the target
; 817  : 	float enemyPriority = getPriority( obj, enemy );

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	fstp	DWORD PTR _enemyPriority$[ebp]

; 818  : 	if ( enemyPriority == 0.0 )

	cvtss2sd xmm0, DWORD PTR _enemyPriority$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@Enemy_Seen

; 819  : 		return;

	jmp	$LN22@Enemy_Seen
$LN13@Enemy_Seen:

; 820  : 
; 821  : 
; 822  : 	// If this is a higher priority than our current target attack it
; 823  : 	if ( !m_target || enemyPriority > targetPriority )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN11@Enemy_Seen
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _enemyPriority$[ebp]
	comiss	xmm0, DWORD PTR [eax+120]
	jbe	$LN12@Enemy_Seen
$LN11@Enemy_Seen:

; 824  : 	{
; 825  : 		if ( debug && !m_target ) fprintf ( debugFile, "No current target to compare with, attacking enemy!\n" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN10@Enemy_Seen
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	jne	SHORT $LN10@Enemy_Seen
	push	OFFSET ??_C@_0DF@PHMMCDIA@No?5current?5target?5to?5compare?5wit@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	jmp	SHORT $LN8@Enemy_Seen
$LN10@Enemy_Seen:

; 826  : 		else if ( debug ) fprintf ( debugFile, "New enemy has a higher priority than current target, attacking enemy\n" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN8@Enemy_Seen
	push	OFFSET ??_C@_0EG@BOFCEBL@New?5enemy?5has?5a?5higher?5priority?5@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN8@Enemy_Seen:

; 827  : 
; 828  : 		m_target = enemy;

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 829  : 		hasTarget = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 1

; 830  : 		targetLastSeen = (int)time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 831  : 		targetPriority = enemyPriority;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _enemyPriority$[ebp]
	movss	DWORD PTR [eax+120], xmm0

; 832  : 		m_bTargetPrimaryFire = attackPrimary;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _attackPrimary$[ebp]
	mov	BYTE PTR [eax+124], cl

; 833  : 
; 834  : 		if ( splashInfantry && enemy->As_SoldierGameObj())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	test	ecx, ecx
	je	$LN7@Enemy_Seen
	mov	eax, DWORD PTR _enemy$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	$LN7@Enemy_Seen

; 835  : 		{
; 836  : 			if ( debug ) fprintf ( debugFile, "Using splash damage against this target\n" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN6@Enemy_Seen
	push	OFFSET ??_C@_0CJ@OOKLKKBM@Using?5splash?5damage?5against?5this@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN6@Enemy_Seen:

; 837  : 			if(obj->As_SmartGameObj()->Is_Splash_Possible(enemy->As_PhysicalGameObj()))

	mov	eax, DWORD PTR _enemy$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, eax
	call	?Is_Splash_Possible@SmartGameObj@@QAE_NPAVPhysicalGameObj@@@Z ; SmartGameObj::Is_Splash_Possible
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Enemy_Seen

; 838  : 			{
; 839  : 				attackLocation ( obj, Commands->Get_Position(enemy), m_bTargetPrimaryFire );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	push	ecx
	mov	edx, DWORD PTR _enemy$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax

; 840  : 			}
; 841  : 			else

	jmp	SHORT $LN4@Enemy_Seen
$LN5@Enemy_Seen:

; 842  : 			{
; 843  : 				attackLocation ( obj, enemy->As_SoldierGameObj()->Get_Bullseye_Position(), m_bTargetPrimaryFire );

	mov	eax, DWORD PTR _enemy$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _enemy$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR tv421[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+124]
	push	edx
	sub	esp, 12					; 0000000cH
	push	esp
	mov	eax, DWORD PTR tv421[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv421[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+156]
	call	edx
$LN4@Enemy_Seen:

; 844  : 			}
; 845  : 		}
; 846  : 		else

	jmp	SHORT $LN3@Enemy_Seen
$LN7@Enemy_Seen:

; 847  : 			attackTarget(obj,enemy,m_bTargetPrimaryFire);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	push	ecx
	mov	edx, DWORD PTR _enemy$[ebp]
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax
$LN3@Enemy_Seen:
	jmp	SHORT $LN1@Enemy_Seen
$LN12@Enemy_Seen:

; 848  : 	}
; 849  : 	else if ( debug ) fprintf ( debugFile, "Current target has a higher priority than new enemy, continuing to attack current target\n" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN1@Enemy_Seen
	push	OFFSET ??_C@_0FK@GPLKDLHA@Current?5target?5has?5a?5higher?5prio@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN1@Enemy_Seen:
$LN22@Enemy_Seen:

; 850  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@dp88_AI_Turret@@UAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AI_Turret::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_Tank_Offensive@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_Tank_Offensive@@UAEPAXI@Z PROC		; dp88_AI_Tank_Offensive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Tank_Offensive@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_Tank_Offensive@@UAEPAXI@Z ENDP		; dp88_AI_Tank_Offensive::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_Tank_Offensive@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_Tank_Offensive@@UAE@XZ PROC			; dp88_AI_Tank_Offensive::~dp88_AI_Tank_Offensive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Unit@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_Tank_Offensive@@UAE@XZ ENDP			; dp88_AI_Tank_Offensive::~dp88_AI_Tank_Offensive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_Tank_Offensive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_Tank_Offensive@@QAE@XZ PROC			; dp88_AI_Tank_Offensive::dp88_AI_Tank_Offensive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_AI_Unit@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_Tank_Offensive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_Tank_Offensive@@QAE@XZ ENDP			; dp88_AI_Tank_Offensive::dp88_AI_Tank_Offensive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?ChooseNewObjective@dp88_AI_Tank_Offensive@@MAEPAVdp88_AI_Objective@@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -100						; size = 4
_pObjective$ = -32					; size = 4
_ignoredObjectives$ = -28				; size = 24
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?ChooseNewObjective@dp88_AI_Tank_Offensive@@MAEPAVdp88_AI_Objective@@PAVScriptableGameObj@@@Z PROC ; dp88_AI_Tank_Offensive::ChooseNewObjective, COMDAT
; _this$ = ecx

; 715  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 716  :   DynamicVectorClass<int> ignoredObjectives;

	push	0
	push	0
	lea	ecx, DWORD PTR _ignoredObjectives$[ebp]
	call	??0?$DynamicVectorClass@H@@QAE@IPBH@Z	; DynamicVectorClass<int>::DynamicVectorClass<int>

; 717  :   dp88_AI_Objective* pObjective = dp88_AI_Objective::GetBestObjective(obj, dp88_AI_Objective::TYPE_OFFENSIVE, modifier_distance, ignoredObjectives);

	sub	esp, 24					; 00000018H
	mov	ecx, esp
	lea	eax, DWORD PTR _ignoredObjectives$[ebp]
	push	eax
	call	??0?$DynamicVectorClass@H@@QAE@ABV0@@Z	; DynamicVectorClass<int>::DynamicVectorClass<int>
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+68]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?GetBestObjective@dp88_AI_Objective@@SAPAV1@PAVScriptableGameObj@@IMV?$DynamicVectorClass@H@@@Z ; dp88_AI_Objective::GetBestObjective
	add	esp, 36					; 00000024H
	mov	DWORD PTR _pObjective$[ebp], eax

; 718  :   if (NULL == pObjective)

	cmp	DWORD PTR _pObjective$[ebp], 0
	jne	SHORT $LN1@ChooseNewO

; 719  :     pObjective = dp88_AI_Objective::GetBestObjective(obj, dp88_AI_Objective::TYPE_DEFENSIVE, modifier_distance, ignoredObjectives);

	sub	esp, 24					; 00000018H
	mov	ecx, esp
	lea	eax, DWORD PTR _ignoredObjectives$[ebp]
	push	eax
	call	??0?$DynamicVectorClass@H@@QAE@ABV0@@Z	; DynamicVectorClass<int>::DynamicVectorClass<int>
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+68]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?GetBestObjective@dp88_AI_Objective@@SAPAV1@PAVScriptableGameObj@@IMV?$DynamicVectorClass@H@@@Z ; dp88_AI_Objective::GetBestObjective
	add	esp, 36					; 00000024H
	mov	DWORD PTR _pObjective$[ebp], eax
$LN1@ChooseNewO:

; 720  : 
; 721  :   return pObjective;

	mov	eax, DWORD PTR _pObjective$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR _ignoredObjectives$[ebp]
	call	??1?$DynamicVectorClass@H@@UAE@XZ
	mov	eax, DWORD PTR $T1[ebp]

; 722  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ChooseNewObjective@dp88_AI_Tank_Offensive@@MAEPAVdp88_AI_Objective@@PAVScriptableGameObj@@@Z ENDP ; dp88_AI_Tank_Offensive::ChooseNewObjective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?IsValidTarget@dp88_AI_Tank_Offensive@@MAE_NPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv163 = -92						; size = 4
tv188 = -88						; size = 4
tv131 = -88						; size = 4
tv86 = -88						; size = 4
_maxRange$ = -20					; size = 4
_minRange$ = -16					; size = 4
_targetDistance$ = -12					; size = 4
_attackPrimary$ = -5					; size = 1
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?IsValidTarget@dp88_AI_Tank_Offensive@@MAE_NPAVScriptableGameObj@@0@Z PROC ; dp88_AI_Tank_Offensive::IsValidTarget, COMDAT
; _this$ = ecx

; 699  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 700  :   bool attackPrimary = getPrimary(target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getPrimary@dp88_customAI@@QAE_NPAVScriptableGameObj@@@Z ; dp88_customAI::getPrimary
	mov	BYTE PTR _attackPrimary$[ebp], al

; 701  :   float targetDistance = getDistance(obj, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ; dp88_customAI::getDistance
	add	esp, 8
	fstp	DWORD PTR _targetDistance$[ebp]

; 702  :   int minRange = attackPrimary ? primary_minRange : secondary_minRange;

	movzx	eax, BYTE PTR _attackPrimary$[ebp]
	test	eax, eax
	je	SHORT $LN3@IsValidTar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN4@IsValidTar
$LN3@IsValidTar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR tv86[ebp], ecx
$LN4@IsValidTar:
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _minRange$[ebp], edx

; 703  :   int maxRange = attackPrimary ? primary_maxRange : secondary_maxRange;

	movzx	eax, BYTE PTR _attackPrimary$[ebp]
	test	eax, eax
	je	SHORT $LN5@IsValidTar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR tv131[ebp], edx
	jmp	SHORT $LN6@IsValidTar
$LN5@IsValidTar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR tv131[ebp], ecx
$LN6@IsValidTar:
	mov	edx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _maxRange$[ebp], edx

; 704  : 
; 705  :   return 0.0f < Commands->Get_Health(target)
; 706  :         && SCRIPT_PLAYERTYPE_NEUTRAL != Get_Object_Type(target)
; 707  :         && (Get_Object_Type(target) != Get_Object_Type(obj) || GetTargetType(target) == REPAIRABLE)
; 708  :         && targetDistance >= minRange
; 709  :         && (ShouldPursueTarget(obj, target) || targetDistance <= maxRange);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv188[ebp]
	movss	xmm0, DWORD PTR tv188[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN7@IsValidTar
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	eax, -2					; fffffffeH
	je	SHORT $LN7@IsValidTar
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN8@IsValidTar
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?GetTargetType@dp88_customAI@@SA?AW4TargetType@1@PAVScriptableGameObj@@@Z ; dp88_customAI::GetTargetType
	add	esp, 4
	cmp	eax, 5
	jne	SHORT $LN7@IsValidTar
$LN8@IsValidTar:
	cvtsi2ss xmm0, DWORD PTR _minRange$[ebp]
	movss	xmm1, DWORD PTR _targetDistance$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN7@IsValidTar
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@IsValidTar
	cvtsi2ss xmm0, DWORD PTR _maxRange$[ebp]
	comiss	xmm0, DWORD PTR _targetDistance$[ebp]
	jb	SHORT $LN7@IsValidTar
$LN9@IsValidTar:
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN10@IsValidTar
$LN7@IsValidTar:
	mov	DWORD PTR tv163[ebp], 0
$LN10@IsValidTar:
	mov	al, BYTE PTR tv163[ebp]

; 710  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?IsValidTarget@dp88_AI_Tank_Offensive@@MAE_NPAVScriptableGameObj@@0@Z ENDP ; dp88_AI_Tank_Offensive::IsValidTarget
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?GetPreferredAttackRange@dp88_AI_Tank_Offensive@@MAEHPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?GetPreferredAttackRange@dp88_AI_Tank_Offensive@@MAEHPAVScriptableGameObj@@0@Z PROC ; dp88_AI_Tank_Offensive::GetPreferredAttackRange, COMDAT
; _this$ = ecx

; 692  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 693  :   return (m_bTargetPrimaryFire) ? m_primary_prefRange : m_secondary_prefRange;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	test	ecx, ecx
	je	SHORT $LN3@GetPreferr
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@GetPreferr
$LN3@GetPreferr:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	DWORD PTR tv73[ebp], edx
$LN4@GetPreferr:
	mov	eax, DWORD PTR tv73[ebp]

; 694  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetPreferredAttackRange@dp88_AI_Tank_Offensive@@MAEHPAVScriptableGameObj@@0@Z ENDP ; dp88_AI_Tank_Offensive::GetPreferredAttackRange
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?loadSettings@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@_N1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_loadSecondaryFireSettings$ = 12			; size = 1
_loadBuildingTargetSettings$ = 16			; size = 1
?loadSettings@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@_N1@Z PROC ; dp88_AI_Tank_Offensive::loadSettings, COMDAT
; _this$ = ecx

; 642  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 643  :   dp88_AI_Unit::loadSettings(obj, loadSecondaryFireSettings, loadBuildingTargetSettings);

	movzx	eax, BYTE PTR _loadBuildingTargetSettings$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _loadSecondaryFireSettings$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?loadSettings@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_AI_Unit::loadSettings

; 644  : 
; 645  :   m_primary_prefRange = Get_Int_Parameter("Preferred_Attack_Range");

	push	OFFSET ??_C@_0BH@LLMPFMHL@Preferred_Attack_Range?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], eax

; 646  :   m_secondary_prefRange = Get_Int_Parameter("Preferred_Attack_Range_Secondary");

	push	OFFSET ??_C@_0CB@ODGOJIJK@Preferred_Attack_Range_Secondary@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], eax

; 647  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?loadSettings@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@_N1@Z ENDP ; dp88_AI_Tank_Offensive::loadSettings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Init@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Init@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_Tank_Offensive::Init, COMDAT
; _this$ = ecx

; 635  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 636  :   dp88_AI_Unit::Init(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z ; dp88_AI_Unit::Init

; 637  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Tank_Offensive::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Enemy_Seen@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_seenPriority$ = -12					; size = 4
_o$1 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enemy$ = 12						; size = 4
?Enemy_Seen@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AI_Tank_Offensive::Enemy_Seen, COMDAT
; _this$ = ecx

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 653  :   // If we saw a soldier in a vehicle, switch the GameObject to that of the vehicle
; 654  :   if (GameObject *o = Get_Vehicle(enemy))

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	call	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle
	add	esp, 4
	mov	DWORD PTR _o$1[ebp], eax
	cmp	DWORD PTR _o$1[ebp], 0
	je	SHORT $LN6@Enemy_Seen

; 655  :     enemy = o;

	mov	eax, DWORD PTR _o$1[ebp]
	mov	DWORD PTR _enemy$[ebp], eax
$LN6@Enemy_Seen:

; 656  : 
; 657  :   //fprintf( debugFile, "Seen enemy %s\n", Commands->Get_Preset_Name(enemy) );
; 658  : 
; 659  :   // If this is our current target update it's last seen time and priority
; 660  :   if (enemy == m_target)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	cmp	DWORD PTR _enemy$[ebp], eax
	jne	SHORT $LN5@Enemy_Seen

; 661  :   {
; 662  :     targetLastSeen = (int)time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 663  :     targetPriority = getPriority(obj, m_target);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+120]

; 664  :     return;

	jmp	$LN7@Enemy_Seen
$LN5@Enemy_Seen:

; 665  :   }
; 666  : 
; 667  :   // Update current target priority (needed due to linked hp objects)
; 668  :   if (m_target)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN4@Enemy_Seen

; 669  :     targetPriority = getPriority(obj, m_target);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+120]
$LN4@Enemy_Seen:

; 670  : 
; 671  :   // Get priority for seen object and return if 0 or lower than current target
; 672  :   float seenPriority = getPriority( obj, enemy );

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	fstp	DWORD PTR _seenPriority$[ebp]

; 673  :   if (seenPriority == 0.0 || (m_target && seenPriority <= targetPriority))

	cvtss2sd xmm0, DWORD PTR _seenPriority$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Enemy_Seen
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN3@Enemy_Seen
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+120]
	comiss	xmm0, DWORD PTR _seenPriority$[ebp]
	jb	SHORT $LN3@Enemy_Seen
$LN2@Enemy_Seen:

; 674  :     return;

	jmp	SHORT $LN7@Enemy_Seen
$LN3@Enemy_Seen:

; 675  : 
; 676  :   //fprintf( debugFile, "Higher priority than existing target... attacking!\n" );
; 677  : 
; 678  :   // Check this is a valid target
; 679  :   if (!IsValidTarget(obj, enemy))

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Enemy_Seen

; 680  :     return;

	jmp	SHORT $LN7@Enemy_Seen
$LN1@Enemy_Seen:

; 681  : 
; 682  :   // All good, attack the enemy
; 683  :   m_target = enemy;

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 684  :   hasTarget = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 1

; 685  :   targetLastSeen = (int)time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 686  :   AttackTarget(obj, enemy);

	mov	eax, DWORD PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
$LN7@Enemy_Seen:

; 687  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AI_Tank_Offensive::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Created@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_Tank_Offensive::Created, COMDAT
; _this$ = ecx

; 626  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 627  :   // Load settings and init
; 628  :   loadSettings( obj, true, true );

	push	1
	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax

; 629  :   Init(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax

; 630  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AI_Tank_Offensive@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Tank_Offensive::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_Unit@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_Unit@@UAEPAXI@Z PROC			; dp88_AI_Unit::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Unit@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_Unit@@UAEPAXI@Z ENDP			; dp88_AI_Unit::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_Unit@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_Unit@@UAE@XZ PROC				; dp88_AI_Unit::~dp88_AI_Unit, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_customAI@@UAE@XZ		; dp88_customAI::~dp88_customAI
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_Unit@@UAE@XZ ENDP				; dp88_AI_Unit::~dp88_AI_Unit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_Unit@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_Unit@@QAE@XZ PROC				; dp88_AI_Unit::dp88_AI_Unit, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0dp88_customAI@@QAE@XZ		; dp88_customAI::dp88_customAI
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_Unit@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_Unit@@QAE@XZ ENDP				; dp88_AI_Unit::dp88_AI_Unit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?ShouldPursueTarget@dp88_AI_Unit@@MAE_NPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv86 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?ShouldPursueTarget@dp88_AI_Unit@@MAE_NPAVScriptableGameObj@@0@Z PROC ; dp88_AI_Unit::ShouldPursueTarget, COMDAT
; _this$ = ecx

; 610  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 611  :   return (NULL == m_pCurrentObjective || 0.0f < getBasePriority(target));

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN3@ShouldPurs
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	fstp	DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR tv86[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN3@ShouldPurs
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@ShouldPurs
$LN3@ShouldPurs:
	mov	DWORD PTR tv76[ebp], 1
$LN4@ShouldPurs:
	mov	al, BYTE PTR tv76[ebp]

; 612  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?ShouldPursueTarget@dp88_AI_Unit@@MAE_NPAVScriptableGameObj@@0@Z ENDP ; dp88_AI_Unit::ShouldPursueTarget
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?AttackTarget@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv229 = -284						; size = 4
tv318 = -280						; size = 4
tv340 = -276						; size = 4
tv211 = -276						; size = 4
_preferredRange$1 = -208				; size = 4
_bModifyAction$ = -202					; size = 1
_bPersueTarget$ = -201					; size = 1
_params$ = -200						; size = 196
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?AttackTarget@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_AI_Unit::AttackTarget, COMDAT
; _this$ = ecx

; 563  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 564  :   ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 565  :   bool bPersueTarget = ShouldPursueTarget(obj, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+152]
	call	edx
	mov	BYTE PTR _bPersueTarget$[ebp], al

; 566  :   bool bModifyAction = false;

	mov	BYTE PTR _bModifyAction$[ebp], 0

; 567  : 
; 568  :   // If we are going to persue the target then clear any existing actions
; 569  :   if (bPersueTarget || !obj->As_SmartGameObj()->Get_Action()->Is_Acting())

	movzx	eax, BYTE PTR _bPersueTarget$[ebp]
	test	eax, eax
	jne	SHORT $LN6@AttackTarg
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, eax
	call	?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ ; SmartGameObj::Get_Action
	mov	ecx, eax
	call	?Is_Acting@ActionClass@@QAE_NXZ		; ActionClass::Is_Acting
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@AttackTarg
$LN6@AttackTarg:

; 570  :   {
; 571  :     ResetAllActions(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax

; 572  :     params.Set_Basic(this, 90, ACTION_ID_ATTACK_TARGET);

	push	-1
	push	7850002					; 0077c812H
	push	ecx
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 573  :   }
; 574  :   else

	jmp	SHORT $LN5@AttackTarg
$LN7@AttackTarg:

; 575  :   {
; 576  :     Commands->Get_Action_Params(obj, params);

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 8

; 577  :     bModifyAction = true;

	mov	BYTE PTR _bModifyAction$[ebp], 1
$LN5@AttackTarg:

; 578  :   }
; 579  : 
; 580  :   // Setup parameters to track state
; 581  :   m_target = target;

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 582  :   hasTarget = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 1

; 583  :   m_bTargetPrimaryFire = getPrimary(target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getPrimary@dp88_customAI@@QAE_NPAVScriptableGameObj@@@Z ; dp88_customAI::getPrimary
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+124], al

; 584  :   targetPriority = getPriority(obj, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+120]

; 585  :   targetLastSeen = (int)time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 586  : 
; 587  :   // Setup the attack parameters
; 588  :   params.Set_Attack(target, (float)((m_bTargetPrimaryFire)?primary_maxRange:secondary_maxRange), 0.0, m_bTargetPrimaryFire);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	test	ecx, ecx
	je	SHORT $LN10@AttackTarg
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR tv211[ebp], eax
	jmp	SHORT $LN11@AttackTarg
$LN10@AttackTarg:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR tv211[ebp], edx
$LN11@AttackTarg:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR tv211[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Attack@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z ; ActionParamsStruct::Set_Attack

; 589  :   params.AttackCheckBlocked = false;

	mov	BYTE PTR _params$[ebp+108], 0

; 590  : 
; 591  :   // Setup the movement parameters if we want to persue the target
; 592  :   if (bPersueTarget)

	movzx	eax, BYTE PTR _bPersueTarget$[ebp]
	test	eax, eax
	je	$LN3@AttackTarg

; 593  :   {
; 594  :     int preferredRange = GetPreferredAttackRange(obj, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+156]
	call	edx
	mov	DWORD PTR _preferredRange$1[ebp], eax

; 595  :     m_bMovingToTarget = preferredRange < getDistance(obj, target);

	cvtsi2ss xmm0, DWORD PTR _preferredRange$1[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	movss	DWORD PTR tv340[ebp], xmm0
	call	?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ; dp88_customAI::getDistance
	add	esp, 8
	fstp	DWORD PTR tv318[ebp]
	movss	xmm0, DWORD PTR tv318[ebp]
	movss	xmm1, DWORD PTR tv340[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN12@AttackTarg
	mov	DWORD PTR tv229[ebp], 1
	jmp	SHORT $LN13@AttackTarg
$LN12@AttackTarg:
	mov	DWORD PTR tv229[ebp], 0
$LN13@AttackTarg:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv229[ebp]
	mov	BYTE PTR [edx+141], al

; 596  :     if (m_bMovingToTarget)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	test	ecx, ecx
	je	SHORT $LN3@AttackTarg

; 597  :       params.Set_Movement(target, 1.0f, (float)preferredRange);

	push	0
	cvtsi2ss xmm0, DWORD PTR _preferredRange$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Movement@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z ; ActionParamsStruct::Set_Movement
$LN3@AttackTarg:

; 598  :   }
; 599  : 
; 600  :   // Commence the action
; 601  :   if (bModifyAction)

	movzx	eax, BYTE PTR _bModifyAction$[ebp]
	test	eax, eax
	je	SHORT $LN2@AttackTarg

; 602  :     Commands->Modify_Action(obj, params.ActionID, params, m_bMovingToTarget, true);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	push	ecx
	lea	edx, DWORD PTR _params$[ebp]
	push	edx
	mov	eax, DWORD PTR _params$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 20					; 00000014H

; 603  :   else

	jmp	SHORT $LN1@AttackTarg
$LN2@AttackTarg:

; 604  :     Commands->Action_Attack(obj, params);

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 8
$LN1@AttackTarg:

; 605  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?AttackTarget@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_AI_Unit::AttackTarget
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?GoToObjective@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@M@Z
_TEXT	SEGMENT
tv155 = -284						; size = 4
tv224 = -280						; size = 4
tv250 = -276						; size = 4
_arrivalRange$ = -208					; size = 4
_bModifyAction$ = -201					; size = 1
_params$ = -200						; size = 196
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_speed$ = 12						; size = 4
?GoToObjective@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@M@Z PROC ; dp88_AI_Unit::GoToObjective, COMDAT
; _this$ = ecx

; 518  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 519  :   if (NULL == m_pCurrentObjective)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	jne	SHORT $LN9@GoToObject

; 520  :     return;

	jmp	$LN10@GoToObject
$LN9@GoToObject:

; 521  : 
; 522  :   ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 523  :   bool bModifyAction = false;

	mov	BYTE PTR _bModifyAction$[ebp], 0

; 524  : 
; 525  :   if (!m_target || !obj->As_SmartGameObj()->Get_Action()->Is_Acting())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN7@GoToObject
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, eax
	call	?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ ; SmartGameObj::Get_Action
	mov	ecx, eax
	call	?Is_Acting@ActionClass@@QAE_NXZ		; ActionClass::Is_Acting
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@GoToObject
$LN7@GoToObject:

; 526  :   {
; 527  :     ResetAllActions(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax

; 528  :     params.Set_Basic(this, 80, ACTION_ID_MOVE_TO_OBJECTIVE);

	push	-1
	push	7850001					; 0077c811H
	push	ecx
	movss	xmm0, DWORD PTR __real@42a00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 529  :   }
; 530  :   else

	jmp	SHORT $LN6@GoToObject
$LN8@GoToObject:

; 531  :   {
; 532  :     m_bMovingToTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+141], 0

; 533  :     Commands->Get_Action_Params(obj, params);

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 8

; 534  :     bModifyAction = true;

	mov	BYTE PTR _bModifyAction$[ebp], 1
$LN6@GoToObject:

; 535  :   }
; 536  : 
; 537  :   // Setup the movement parameters
; 538  :   int arrivalRange = m_pCurrentObjective->GetRange();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetRange@dp88_AI_Objective@@QAEHXZ	; dp88_AI_Objective::GetRange
	mov	DWORD PTR _arrivalRange$[ebp], eax

; 539  :   // Fix arrival range by letting it 1 meter further than wanted, because soldiers keep calling action_complete when 1.58m away than 1.0 wanted.
; 540  :   m_bMovingToObjective = (arrivalRange + 1) < getDistance(obj, m_pCurrentObjective->GetGameObject());

	mov	eax, DWORD PTR _arrivalRange$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	movss	DWORD PTR tv250[ebp], xmm0
	call	?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ ; dp88_AI_Objective::GetGameObject
	push	eax
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ; dp88_customAI::getDistance
	add	esp, 8
	fstp	DWORD PTR tv224[ebp]
	movss	xmm0, DWORD PTR tv224[ebp]
	movss	xmm1, DWORD PTR tv250[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN12@GoToObject
	mov	DWORD PTR tv155[ebp], 1
	jmp	SHORT $LN13@GoToObject
$LN12@GoToObject:
	mov	DWORD PTR tv155[ebp], 0
$LN13@GoToObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv155[ebp]
	mov	BYTE PTR [eax+140], cl

; 541  :   if (m_bMovingToObjective)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+140]
	test	ecx, ecx
	je	SHORT $LN5@GoToObject

; 542  :     params.Set_Movement(m_pCurrentObjective->GetGameObject(), speed, (float)arrivalRange);

	push	0
	cvtsi2ss xmm0, DWORD PTR _arrivalRange$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetGameObject@dp88_AI_Objective@@QAEPAVScriptableGameObj@@XZ ; dp88_AI_Objective::GetGameObject
	push	eax
	lea	ecx, DWORD PTR _params$[ebp]
	call	?Set_Movement@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z ; ActionParamsStruct::Set_Movement

; 543  :   else

	jmp	SHORT $LN4@GoToObject
$LN5@GoToObject:

; 544  :   {
; 545  :     // Already in range of the objective
; 546  :     Action_Complete(obj, params.ActionID, ActionCompleteReason::MOVEMENT_COMPLETE_ARRIVED);

	push	9
	mov	eax, DWORD PTR _params$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx

; 547  :     return;

	jmp	SHORT $LN10@GoToObject
$LN4@GoToObject:

; 548  :   }
; 549  : 
; 550  :   if (GetTargetType(obj) == FLYING)

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?GetTargetType@dp88_customAI@@SA?AW4TargetType@1@PAVScriptableGameObj@@@Z ; dp88_customAI::GetTargetType
	add	esp, 4
	cmp	eax, 3
	jne	SHORT $LN3@GoToObject

; 551  :     params.MovePathfind = false;

	mov	BYTE PTR _params$[ebp+71], 0
$LN3@GoToObject:

; 552  : 
; 553  :   // Commence the action
; 554  :   if (bModifyAction)

	movzx	eax, BYTE PTR _bModifyAction$[ebp]
	test	eax, eax
	je	SHORT $LN2@GoToObject

; 555  :     Commands->Modify_Action(obj, params.ActionID, params, true, false);

	push	0
	push	1
	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _params$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 20					; 00000014H

; 556  :   else

	jmp	SHORT $LN1@GoToObject
$LN2@GoToObject:

; 557  :     Commands->Action_Goto(obj, params);

	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
$LN1@GoToObject:
$LN10@GoToObject:

; 558  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?GoToObjective@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@M@Z ENDP ; dp88_AI_Unit::GoToObjective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?ResetAllActions@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?ResetAllActions@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_Unit::ResetAllActions, COMDAT
; _this$ = ecx

; 508  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 509  :   dp88_customAI::ResetAllActions(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ; dp88_customAI::ResetAllActions

; 510  : 
; 511  :   m_bMovingToTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+141], 0

; 512  :   m_bMovingToObjective = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+140], 0

; 513  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ResetAllActions@dp88_AI_Unit@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Unit::ResetAllActions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z PROC ; DynamicVectorClass<dp88_AI_Unit *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<dp88_AI_Unit *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE@XZ PROC	; DynamicVectorClass<dp88_AI_Unit *>::~DynamicVectorClass<dp88_AI_Unit *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVdp88_AI_Unit@@@@UAE@XZ ; VectorClass<dp88_AI_Unit *>::~VectorClass<dp88_AI_Unit *>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE@XZ ENDP	; DynamicVectorClass<dp88_AI_Unit *>::~DynamicVectorClass<dp88_AI_Unit *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z PROC ; DynamicVectorClass<dp88_AI_Unit *>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ; DynamicVectorClass<dp88_AI_Unit *>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z ENDP ; DynamicVectorClass<dp88_AI_Unit *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z PROC ; DynamicVectorClass<dp88_AI_Unit *>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z ; VectorClass<dp88_AI_Unit *>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z ENDP ; DynamicVectorClass<dp88_AI_Unit *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NH@Z PROC ; DynamicVectorClass<dp88_AI_Unit *>::Delete, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		if (index < ActiveCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN4@Delete

; 446  : 		{
; 447  : 			ActiveCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 448  : 			for (int i = index; i < ActiveCount; i++)

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN3@Delete
$LN2@Delete:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Delete:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN1@Delete

; 449  : 			{
; 450  : 				(*this)[i] = std::move((*this)[i+1]);

	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
	push	eax
	call	??$move@AAPAVdp88_AI_Unit@@@std@@YA$$QAPAVdp88_AI_Unit@@AAPAV1@@Z ; std::move<dp88_AI_Unit * &>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 451  : 			}

	jmp	SHORT $LN2@Delete
$LN1@Delete:

; 452  : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Delete
$LN4@Delete:

; 453  : 		}
; 454  : 		return false;

	xor	al, al
$LN5@Delete:

; 455  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NH@Z ENDP ; DynamicVectorClass<dp88_AI_Unit *>::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z PROC ; DynamicVectorClass<dp88_AI_Unit *>::DeleteObj, COMDAT
; _this$ = ecx

; 435  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 		int id = ID(object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR _id$[ebp], eax

; 437  : 		if (id != -1)

	cmp	DWORD PTR _id$[ebp], -1
	je	SHORT $LN1@DeleteObj

; 438  : 		{
; 439  : 			return Delete(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NH@Z ; DynamicVectorClass<dp88_AI_Unit *>::Delete
	jmp	SHORT $LN2@DeleteObj
$LN1@DeleteObj:

; 440  : 		}
; 441  : 		return false;

	xor	al, al
$LN2@DeleteObj:

; 442  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z ENDP ; DynamicVectorClass<dp88_AI_Unit *>::DeleteObj
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z PROC ; DynamicVectorClass<dp88_AI_Unit *>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ; VectorClass<dp88_AI_Unit *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ; VectorClass<dp88_AI_Unit *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z ENDP ; DynamicVectorClass<dp88_AI_Unit *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QBEHXZ PROC ; DynamicVectorClass<dp88_AI_Unit *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ENDP ; DynamicVectorClass<dp88_AI_Unit *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEXXZ PROC ; DynamicVectorClass<dp88_AI_Unit *>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVdp88_AI_Unit@@@@UAEXXZ ; VectorClass<dp88_AI_Unit *>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAEXXZ ENDP ; DynamicVectorClass<dp88_AI_Unit *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z PROC ; DynamicVectorClass<dp88_AI_Unit *>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z ; VectorClass<dp88_AI_Unit *>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ; VectorClass<dp88_AI_Unit *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ; VectorClass<dp88_AI_Unit *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z ENDP ; DynamicVectorClass<dp88_AI_Unit *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE@IPBQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE@IPBQAVdp88_AI_Unit@@@Z PROC ; DynamicVectorClass<dp88_AI_Unit *>::DynamicVectorClass<dp88_AI_Unit *>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@PAVdp88_AI_Unit@@@@QAE@HPBQAVdp88_AI_Unit@@@Z ; VectorClass<dp88_AI_Unit *>::VectorClass<dp88_AI_Unit *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@PAVdp88_AI_Unit@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE@IPBQAVdp88_AI_Unit@@@Z ENDP ; DynamicVectorClass<dp88_AI_Unit *>::DynamicVectorClass<dp88_AI_Unit *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z PROC	; VectorClass<dp88_AI_Unit *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@PAVdp88_AI_Unit@@@@UAE@XZ ; VectorClass<dp88_AI_Unit *>::~VectorClass<dp88_AI_Unit *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@PAVdp88_AI_Unit@@@@UAEPAXI@Z ENDP	; VectorClass<dp88_AI_Unit *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z PROC ; VectorClass<dp88_AI_Unit *>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHABQAVdp88_AI_Unit@@@Z ENDP ; VectorClass<dp88_AI_Unit *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z PROC ; VectorClass<dp88_AI_Unit *>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@PAVdp88_AI_Unit@@@@UAEHPBQAVdp88_AI_Unit@@@Z ENDP ; VectorClass<dp88_AI_Unit *>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ PROC	; VectorClass<dp88_AI_Unit *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ENDP	; VectorClass<dp88_AI_Unit *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@PAVdp88_AI_Unit@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@PAVdp88_AI_Unit@@@@UAEXXZ PROC	; VectorClass<dp88_AI_Unit *>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CJ@OFHADDID@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@PAVdp88_AI_Unit@@@@UAEXXZ ENDP	; VectorClass<dp88_AI_Unit *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
tv172 = -96						; size = 4
tv141 = -96						; size = 4
tv133 = -96						; size = 4
tv83 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_index$4 = -16						; size = 4
_copycount$5 = -12					; size = 4
_newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z PROC ; VectorClass<dp88_AI_Unit *>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CK@KOHPOAIM@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN15@Resize:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CK@KOHPOAIM@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN17@Resize
	xor	ecx, ecx
	jne	SHORT $LN16@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Resize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN18@Resize
$LN17@Resize:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN18@Resize:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _newptr$6[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$6[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN19@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv141[ebp], ecx
$LN20@Resize:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _copycount$5[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$4[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	add	eax, 1
	mov	DWORD PTR _index$4[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$4[ebp]
	cmp	eax, DWORD PTR _copycount$5[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAPAVdp88_AI_Unit@@@std@@YA$$QAPAVdp88_AI_Unit@@AAPAV1@@Z ; std::move<dp88_AI_Unit * &>
	add	esp, 4
	mov	ecx, DWORD PTR _index$4[ebp]
	mov	edx, DWORD PTR _newptr$6[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CK@KOHPOAIM@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN22@Resize
	xor	ecx, ecx
	jne	SHORT $LN21@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN21@Resize:
	jmp	SHORT $LN23@Resize
$LN22@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN24@Resize
	mov	DWORD PTR tv172[ebp], 1
	jmp	SHORT $LN25@Resize
$LN24@Resize:
	mov	DWORD PTR tv172[ebp], 0
$LN25@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv172[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@PAVdp88_AI_Unit@@@@UAE_NHPBQAVdp88_AI_Unit@@@Z ENDP ; VectorClass<dp88_AI_Unit *>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@PAVdp88_AI_Unit@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@PAVdp88_AI_Unit@@@@UBE_NABV0@@Z PROC	; VectorClass<dp88_AI_Unit *>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@PAVdp88_AI_Unit@@@@QBEHXZ ; VectorClass<dp88_AI_Unit *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _index$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@PAVdp88_AI_Unit@@@@QBEABQAVdp88_AI_Unit@@H@Z ; VectorClass<dp88_AI_Unit *>::operator[]
	mov	edx, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [esi+edx*4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@PAVdp88_AI_Unit@@@@UBE_NABV0@@Z ENDP	; VectorClass<dp88_AI_Unit *>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVdp88_AI_Unit@@@@QBEABQAVdp88_AI_Unit@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVdp88_AI_Unit@@@@QBEABQAVdp88_AI_Unit@@H@Z PROC ; VectorClass<dp88_AI_Unit *>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVdp88_AI_Unit@@@@QBEABQAVdp88_AI_Unit@@H@Z ENDP ; VectorClass<dp88_AI_Unit *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z PROC ; VectorClass<dp88_AI_Unit *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVdp88_AI_Unit@@@@QAEAAPAVdp88_AI_Unit@@H@Z ENDP ; VectorClass<dp88_AI_Unit *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@PAVdp88_AI_Unit@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@PAVdp88_AI_Unit@@@@UAE@XZ PROC		; VectorClass<dp88_AI_Unit *>::~VectorClass<dp88_AI_Unit *>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVdp88_AI_Unit@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@PAVdp88_AI_Unit@@@@UAEXXZ ; VectorClass<dp88_AI_Unit *>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@PAVdp88_AI_Unit@@@@UAE@XZ ENDP		; VectorClass<dp88_AI_Unit *>::~VectorClass<dp88_AI_Unit *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@PAVdp88_AI_Unit@@@@QAE@HPBQAVdp88_AI_Unit@@@Z
_TEXT	SEGMENT
tv139 = -80						; size = 4
tv89 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@PAVdp88_AI_Unit@@@@QAE@HPBQAVdp88_AI_Unit@@@Z PROC ; VectorClass<dp88_AI_Unit *>::VectorClass<dp88_AI_Unit *>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@PAVdp88_AI_Unit@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0CP@CGHEKOML@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN8@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	SHORT $LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0CP@CGHEKOML@VectorClass?$DMclass?5dp88_AI_Unit?5?$CK@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN10@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN9@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@VectorClas:
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN11@VectorClas
$LN10@VectorClas:
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN11@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@PAVdp88_AI_Unit@@@@QAE@HPBQAVdp88_AI_Unit@@@Z ENDP ; VectorClass<dp88_AI_Unit *>::VectorClass<dp88_AI_Unit *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.h
;	COMDAT ?Get_Current_Objective@dp88_AI_Unit@@QAEPAVdp88_AI_Objective@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Current_Objective@dp88_AI_Unit@@QAEPAVdp88_AI_Objective@@XZ PROC ; dp88_AI_Unit::Get_Current_Objective, COMDAT
; _this$ = ecx

; 244  :   dp88_AI_Objective* Get_Current_Objective() { return m_pCurrentObjective; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+144]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Objective@dp88_AI_Unit@@QAEPAVdp88_AI_Objective@@XZ ENDP ; dp88_AI_Unit::Get_Current_Objective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Force_Clear_Current_Objective@dp88_AI_Unit@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Force_Clear_Current_Objective@dp88_AI_Unit@@UAEXXZ PROC ; dp88_AI_Unit::Force_Clear_Current_Objective, COMDAT
; _this$ = ecx

; 426  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 427  :     m_pCurrentObjective = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0

; 428  :     m_bMovingToObjective = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+140], 0

; 429  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Force_Clear_Current_Objective@dp88_AI_Unit@@UAEXXZ ENDP ; dp88_AI_Unit::Force_Clear_Current_Objective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?loadSettings@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@_N1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_loadSecondaryFireSettings$ = 12			; size = 1
_loadBuildingTargetSettings$ = 16			; size = 1
?loadSettings@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@_N1@Z PROC ; dp88_AI_Unit::loadSettings, COMDAT
; _this$ = ecx

; 501  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 502  :   dp88_customAI::loadSettings(obj, loadSecondaryFireSettings, loadBuildingTargetSettings);

	movzx	eax, BYTE PTR _loadBuildingTargetSettings$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _loadSecondaryFireSettings$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z ; dp88_customAI::loadSettings

; 503  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?loadSettings@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@_N1@Z ENDP ; dp88_AI_Unit::loadSettings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Init@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Init@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z PROC	; dp88_AI_Unit::Init, COMDAT
; _this$ = ecx

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 407  :   dp88_customAI::Init(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ; dp88_customAI::Init

; 408  : 
; 409  :   m_bMovingToTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+141], 0

; 410  :   m_bMovingToObjective = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+140], 0

; 411  :   m_pCurrentObjective = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0

; 412  :   ListOfAIUnits.Add(this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, OFFSET ?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A ; dp88_AI_Unit::ListOfAIUnits
	call	?Add@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::Add

; 413  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z ENDP	; dp88_AI_Unit::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Action_Complete@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_reason$ = 16						; size = 4
?Action_Complete@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; dp88_AI_Unit::Action_Complete, COMDAT
; _this$ = ecx

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 489  :   ResetAllActions(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax

; 490  : 
; 491  :   if (MOVEMENT_COMPLETE_ARRIVED == reason && action_id == ACTION_ID_ATTACK_TARGET)

	cmp	DWORD PTR _reason$[ebp], 9
	jne	SHORT $LN3@Action_Com
	cmp	DWORD PTR _action_id$[ebp], 7850002	; 0077c812H
	jne	SHORT $LN3@Action_Com

; 492  :   {
; 493  :     if (m_target)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN3@Action_Com

; 494  :       AttackTarget(obj, m_target);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
$LN3@Action_Com:

; 495  :   }
; 496  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; dp88_AI_Unit::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Timer_Expired@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv423 = -76						; size = 4
tv400 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_AI_Unit::Timer_Expired, COMDAT
; _this$ = ecx

; 434  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 435  :   // Check target is still alive, still an enemy (eg: stolen vehicles) and in range
; 436  :   if (TIMER_AI_THINK == number)

	cmp	DWORD PTR _number$[ebp], -620363775	; db060001H
	jne	$LN1@Timer_Expi

; 437  :   {
; 438  :     // Check the current objective, if any, is still valid
; 439  :     if (NULL != m_pCurrentObjective && !dp88_AI_Objective::IsValidObjective(m_pCurrentObjective))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	$LN11@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	call	?IsValidObjective@dp88_AI_Objective@@SA_NPAV1@@Z ; dp88_AI_Objective::IsValidObjective
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	$LN11@Timer_Expi

; 440  :     {
; 441  :       m_pCurrentObjective = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0

; 442  :       if (m_bMovingToObjective)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+140]
	test	ecx, ecx
	je	SHORT $LN11@Timer_Expi

; 443  :       {
; 444  :         if (m_target && IsValidTarget(obj, m_target))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN12@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Timer_Expi

; 445  :           AttackTarget(obj, m_target);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax

; 446  :         else

	jmp	SHORT $LN11@Timer_Expi
$LN12@Timer_Expi:

; 447  :           ResetAllActions(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
$LN11@Timer_Expi:

; 448  :       }
; 449  :     }
; 450  : 
; 451  :     // If we have no objective then choose a new one
; 452  :     if (NULL == m_pCurrentObjective)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	jne	$LN9@Timer_Expi

; 453  :     {
; 454  :       m_pCurrentObjective = ChooseNewObjective(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], eax

; 455  :       if (NULL != m_pCurrentObjective && (!m_target || !ShouldPursueTarget(obj, m_target)))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN9@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	SHORT $LN8@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@Timer_Expi
$LN8@Timer_Expi:

; 456  :         GoToObjective(obj);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	call	eax
$LN9@Timer_Expi:

; 457  :     }
; 458  : 
; 459  :     // If we have a target check it is still valid
; 460  :     if (m_target)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	test	eax, eax
	je	$LN7@Timer_Expi

; 461  :     {
; 462  :       if (!IsValidTarget(obj, m_target) || (int)time(NULL) - targetLastSeen > 3)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Timer_Expi
	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+116]
	cmp	eax, 3
	jle	SHORT $LN6@Timer_Expi
$LN5@Timer_Expi:

; 463  :       {
; 464  :         m_target = nullptr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 465  : 		hasTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 466  :         ResetAllActions(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	jmp	$LN3@Timer_Expi
$LN6@Timer_Expi:

; 467  :       }
; 468  : 
; 469  :       // Check if we need to move closer to our target
; 470  :       else if (!m_bMovingToTarget && ShouldPursueTarget(obj, m_target) && getDistance(obj, m_target) > GetPreferredAttackRange(obj, m_target))

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	test	ecx, ecx
	jne	$LN3@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Timer_Expi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ; dp88_customAI::getDistance
	add	esp, 8
	fstp	DWORD PTR tv400[ebp]
	movss	xmm0, DWORD PTR tv400[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	movss	DWORD PTR tv423[ebp], xmm0
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+156]
	call	edx
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv423[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@Timer_Expi

; 471  :       {
; 472  :         AttackTarget(obj, m_target);    // Will modify the action with movement parameters

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??BReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::operator ScriptableGameObj *
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
$LN3@Timer_Expi:

; 473  :       }
; 474  :     }

	jmp	SHORT $LN1@Timer_Expi
$LN7@Timer_Expi:

; 475  : 
; 476  :     else if (NULL != m_pCurrentObjective && !m_bMovingToObjective)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN1@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+140]
	test	ecx, ecx
	jne	SHORT $LN1@Timer_Expi

; 477  :     {
; 478  :       GoToObjective(obj);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	call	eax
$LN1@Timer_Expi:

; 479  :     }
; 480  :   }
; 481  : 
; 482  :   dp88_customAI::Timer_Expired(obj, number);

	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z ; dp88_customAI::Timer_Expired

; 483  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_AI_Unit::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Detach@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Detach@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z PROC	; dp88_AI_Unit::Detach, COMDAT
; _this$ = ecx

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 419  :     ListOfAIUnits.DeleteObj(this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, OFFSET ?ListOfAIUnits@dp88_AI_Unit@@2V?$DynamicVectorClass@PAVdp88_AI_Unit@@@@A ; dp88_AI_Unit::ListOfAIUnits
	call	?DeleteObj@?$DynamicVectorClass@PAVdp88_AI_Unit@@@@QAE_NABQAVdp88_AI_Unit@@@Z ; DynamicVectorClass<dp88_AI_Unit *>::DeleteObj

; 420  :     dp88_customAI::Detach(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Detach

; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z ENDP	; dp88_AI_Unit::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Created@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_Unit::Created, COMDAT
; _this$ = ecx

; 397  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 398  :   // Base class should not be instantiated
; 399  :   Console_Output("[%d:%s:%s] Critical Error: Vehicle AI base class created function should not be called. Destroying script...\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0GO@GNPKALOE@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Vehic@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 400  :   Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 401  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AI_Unit@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Unit::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_Marker_Repairable@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_Marker_Repairable@@UAEPAXI@Z PROC		; dp88_AI_Marker_Repairable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Marker_Repairable@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_Marker_Repairable@@UAEPAXI@Z ENDP		; dp88_AI_Marker_Repairable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_Marker_Repairable@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_Marker_Repairable@@UAE@XZ PROC		; dp88_AI_Marker_Repairable::~dp88_AI_Marker_Repairable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_Marker_Repairable@@UAE@XZ ENDP		; dp88_AI_Marker_Repairable::~dp88_AI_Marker_Repairable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_Marker_Repairable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_Marker_Repairable@@QAE@XZ PROC		; dp88_AI_Marker_Repairable::dp88_AI_Marker_Repairable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_Marker_Repairable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_Marker_Repairable@@QAE@XZ ENDP		; dp88_AI_Marker_Repairable::dp88_AI_Marker_Repairable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Get_Distance_From_Pathfind@dp88_AI_Marker_Repairable@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Distance_From_Pathfind@dp88_AI_Marker_Repairable@@QAEMXZ PROC ; dp88_AI_Marker_Repairable::Get_Distance_From_Pathfind, COMDAT
; _this$ = ecx

; 383  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 384  :     return pathfindDistance;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]

; 385  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Distance_From_Pathfind@dp88_AI_Marker_Repairable@@QAEMXZ ENDP ; dp88_AI_Marker_Repairable::Get_Distance_From_Pathfind
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Created@dp88_AI_Marker_Repairable@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AI_Marker_Repairable@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_Marker_Repairable::Created, COMDAT
; _this$ = ecx

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  :     pathfindDistance = Get_Float_Parameter("Pathfind_Distance");

	push	OFFSET ??_C@_0BC@MGDIDNJB@Pathfind_Distance?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+28]

; 378  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AI_Marker_Repairable@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_Marker_Repairable::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_Marker_HeavyVehicle@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_Marker_HeavyVehicle@@UAEPAXI@Z PROC		; dp88_AI_Marker_HeavyVehicle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Marker_HeavyVehicle@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_Marker_HeavyVehicle@@UAEPAXI@Z ENDP		; dp88_AI_Marker_HeavyVehicle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_Marker_HeavyVehicle@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_Marker_HeavyVehicle@@UAE@XZ PROC		; dp88_AI_Marker_HeavyVehicle::~dp88_AI_Marker_HeavyVehicle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_Marker_HeavyVehicle@@UAE@XZ ENDP		; dp88_AI_Marker_HeavyVehicle::~dp88_AI_Marker_HeavyVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_Marker_HeavyVehicle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_Marker_HeavyVehicle@@QAE@XZ PROC		; dp88_AI_Marker_HeavyVehicle::dp88_AI_Marker_HeavyVehicle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_Marker_HeavyVehicle@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_Marker_HeavyVehicle@@QAE@XZ ENDP		; dp88_AI_Marker_HeavyVehicle::dp88_AI_Marker_HeavyVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_Marker_Building@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_Marker_Building@@UAEPAXI@Z PROC		; dp88_AI_Marker_Building::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_Marker_Building@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_Marker_Building@@UAEPAXI@Z ENDP		; dp88_AI_Marker_Building::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_Marker_Building@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_Marker_Building@@UAE@XZ PROC			; dp88_AI_Marker_Building::~dp88_AI_Marker_Building, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_Marker_Building@@UAE@XZ ENDP			; dp88_AI_Marker_Building::~dp88_AI_Marker_Building
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_Marker_Building@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_Marker_Building@@QAE@XZ PROC			; dp88_AI_Marker_Building::dp88_AI_Marker_Building, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_Marker_Building@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_Marker_Building@@QAE@XZ ENDP			; dp88_AI_Marker_Building::dp88_AI_Marker_Building
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_AI_heavyVehicleMarker@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_AI_heavyVehicleMarker@@UAEPAXI@Z PROC		; dp88_AI_heavyVehicleMarker::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_AI_heavyVehicleMarker@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_AI_heavyVehicleMarker@@UAEPAXI@Z ENDP		; dp88_AI_heavyVehicleMarker::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_AI_heavyVehicleMarker@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_AI_heavyVehicleMarker@@UAE@XZ PROC		; dp88_AI_heavyVehicleMarker::~dp88_AI_heavyVehicleMarker, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_AI_heavyVehicleMarker@@UAE@XZ ENDP		; dp88_AI_heavyVehicleMarker::~dp88_AI_heavyVehicleMarker
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_AI_heavyVehicleMarker@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_AI_heavyVehicleMarker@@QAE@XZ PROC		; dp88_AI_heavyVehicleMarker::dp88_AI_heavyVehicleMarker, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_AI_heavyVehicleMarker@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_AI_heavyVehicleMarker@@QAE@XZ ENDP		; dp88_AI_heavyVehicleMarker::dp88_AI_heavyVehicleMarker
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Created@dp88_AI_heavyVehicleMarker@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_AI_heavyVehicleMarker@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_AI_heavyVehicleMarker::Created, COMDAT
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 366  : 	Console_Output("[%d:%hs:%hs] This script is deprecated, use dp88_AI_Marker_HeavyVehicle instead\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FB@EBLHHLPH@?$FL?$CFd?3?$CFhs?3?$CFhs?$FN?5This?5script?5is?5depr@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 367  : 	Attach_Script_V(obj,"dp88_AI_Marker_HeavyVehicle","0");

	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	OFFSET ??_C@_0BM@OHLJBOHK@dp88_AI_Marker_HeavyVehicle?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Attach_Script_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_V
	add	esp, 12					; 0000000cH

; 368  : 	Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 369  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_AI_heavyVehicleMarker@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_AI_heavyVehicleMarker::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_customAI@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_customAI@@UAEPAXI@Z PROC			; dp88_customAI::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_customAI@@UAE@XZ		; dp88_customAI::~dp88_customAI
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_customAI@@UAEPAXI@Z ENDP			; dp88_customAI::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?GetTargetType@dp88_customAI@@SA?AW4TargetType@1@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
?GetTargetType@dp88_customAI@@SA?AW4TargetType@1@PAVScriptableGameObj@@@Z PROC ; dp88_customAI::GetTargetType, COMDAT

; 340  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 341  :   if (target->As_BuildingGameObj() || Is_Script_Attached(target, "dp88_AI_Marker_Building"))

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	test	eax, eax
	jne	SHORT $LN10@GetTargetT
	push	OFFSET ??_C@_0BI@CAAFFJKG@dp88_AI_Marker_Building?$AA@
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z ; Is_Script_Attached
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@GetTargetT
$LN10@GetTargetT:

; 342  :     return BUILDING;

	mov	eax, 4
	jmp	$LN12@GetTargetT
$LN11@GetTargetT:

; 343  :   if (Is_Script_Attached(target, "JFW_Deployable_Aircraft_Deployed"))

	push	OFFSET ??_C@_0CB@HDJOKPNM@JFW_Deployable_Aircraft_Deployed@
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z ; Is_Script_Attached
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@GetTargetT

; 344  :     return LIGHT_VEHICLE;

	mov	eax, 1
	jmp	$LN12@GetTargetT
$LN9@GetTargetT:

; 345  :   if ((Get_Vehicle_Mode(target) == VEHICLE_TYPE_FLYING) || (target->As_SoldierGameObj() && (Get_Fly_Mode(target) || Find_Script_On_Object(target, "MS_Paradrop") || Find_Script_On_Object(target, "dp88_AR_Paradrop"))))

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Get_Vehicle_Mode@@YAIPAVScriptableGameObj@@@Z ; Get_Vehicle_Mode
	add	esp, 4
	cmp	eax, 3
	je	SHORT $LN7@GetTargetT
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	SHORT $LN8@GetTargetT
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Get_Fly_Mode@@YA_NPAVScriptableGameObj@@@Z ; Get_Fly_Mode
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@GetTargetT
	push	OFFSET ??_C@_0M@JENJFJLB@MS_Paradrop?$AA@
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@GetTargetT
	push	OFFSET ??_C@_0BB@IILHOKGK@dp88_AR_Paradrop?$AA@
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@GetTargetT
$LN7@GetTargetT:

; 346  :     return FLYING;

	mov	eax, 3
	jmp	$LN12@GetTargetT
$LN8@GetTargetT:

; 347  :   if (target->As_SoldierGameObj())

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	SHORT $LN5@GetTargetT

; 348  :     return SOLDIER;

	xor	eax, eax
	jmp	$LN12@GetTargetT
$LN5@GetTargetT:

; 349  :   if (target->As_VehicleGameObj() && (Is_Script_Attached(target, "dp88_AI_Marker_HeavyVehicle") || Is_Script_Attached ( target, "dp88_AI_heavyVehicleMarker")))

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN4@GetTargetT
	push	OFFSET ??_C@_0BM@OHLJBOHK@dp88_AI_Marker_HeavyVehicle?$AA@
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z ; Is_Script_Attached
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@GetTargetT
	push	OFFSET ??_C@_0BL@MGGLMLEA@dp88_AI_heavyVehicleMarker?$AA@
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z ; Is_Script_Attached
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@GetTargetT
$LN3@GetTargetT:

; 350  :     return HEAVY_VEHICLE;

	mov	eax, 2
	jmp	SHORT $LN12@GetTargetT
$LN4@GetTargetT:

; 351  :   if (Is_Script_Attached(target, "dp88_AI_Marker_Repairable"))

	push	OFFSET ??_C@_0BK@BMNLCPDP@dp88_AI_Marker_Repairable?$AA@
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?Is_Script_Attached@@YA_NPAVScriptableGameObj@@PBD@Z ; Is_Script_Attached
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetTargetT

; 352  :     return REPAIRABLE;

	mov	eax, 5
	jmp	SHORT $LN12@GetTargetT
$LN2@GetTargetT:

; 353  :   if (target->As_VehicleGameObj())

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN1@GetTargetT

; 354  :     return LIGHT_VEHICLE;

	mov	eax, 1
	jmp	SHORT $LN12@GetTargetT
$LN1@GetTargetT:

; 355  : 
; 356  :   return UNKNOWN;

	mov	eax, 6
$LN12@GetTargetT:

; 357  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTargetType@dp88_customAI@@SA?AW4TargetType@1@PAVScriptableGameObj@@@Z ENDP ; dp88_customAI::GetTargetType
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vobj$ = 8						; size = 4
?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z PROC ; dp88_customAI::IsVehicleAIEnabled, COMDAT
; _this$ = ecx

; 331  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 332  :   if ( vobj == NULL )

	cmp	DWORD PTR _vobj$[ebp], 0
	jne	SHORT $LN1@IsVehicleA

; 333  :     return false;

	xor	al, al
	jmp	SHORT $LN2@IsVehicleA
$LN1@IsVehicleA:

; 334  :   return (vobj->Get_Action()->Is_Acting());

	mov	ecx, DWORD PTR _vobj$[ebp]
	call	?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ ; SmartGameObj::Get_Action
	mov	ecx, eax
	call	?Is_Acting@ActionClass@@QAE_NXZ		; ActionClass::Is_Acting
$LN2@IsVehicleA:

; 335  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsVehicleAIEnabled@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z ENDP ; dp88_customAI::IsVehicleAIEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z
_TEXT	SEGMENT
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_vobj$ = 8						; size = 4
?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z PROC ; dp88_customAI::IsVehicleEmpty, COMDAT
; _this$ = ecx

; 320  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 321  :   if ( vobj == NULL )

	cmp	DWORD PTR _vobj$[ebp], 0
	jne	SHORT $LN2@IsVehicleE

; 322  :     return false;

	xor	al, al
	jmp	SHORT $LN3@IsVehicleE
$LN2@IsVehicleE:

; 323  :   if ( vobj->Get_Definition().Get_Seat_Count() == 0)

	mov	ecx, DWORD PTR _vobj$[ebp]
	call	?Get_Definition@VehicleGameObj@@QBEABVVehicleGameObjDef@@XZ ; VehicleGameObj::Get_Definition
	mov	ecx, eax
	call	?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ ; VehicleGameObjDef::Get_Seat_Count
	test	eax, eax
	jne	SHORT $LN1@IsVehicleE

; 324  :     return false;

	xor	al, al
	jmp	SHORT $LN3@IsVehicleE
$LN1@IsVehicleE:

; 325  :   return (vobj->Get_Occupant_Count() == 0);

	mov	ecx, DWORD PTR _vobj$[ebp]
	call	?Get_Occupant_Count@VehicleGameObj@@QAEHXZ ; VehicleGameObj::Get_Occupant_Count
	test	eax, eax
	jne	SHORT $LN5@IsVehicleE
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@IsVehicleE
$LN5@IsVehicleE:
	mov	DWORD PTR tv73[ebp], 0
$LN6@IsVehicleE:
	mov	al, BYTE PTR tv73[ebp]
$LN3@IsVehicleE:

; 326  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsVehicleEmpty@dp88_customAI@@UAE_NPAVVehicleGameObj@@@Z ENDP ; dp88_customAI::IsVehicleEmpty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?getPrimary@dp88_customAI@@QAE_NPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
_target$ = 8						; size = 4
?getPrimary@dp88_customAI@@QAE_NPAVScriptableGameObj@@@Z PROC ; dp88_customAI::getPrimary, COMDAT
; _this$ = ecx

; 300  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 301  :   switch (GetTargetType(target))

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?GetTargetType@dp88_customAI@@SA?AW4TargetType@1@PAVScriptableGameObj@@@Z ; dp88_customAI::GetTargetType
	add	esp, 4
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 4
	ja	SHORT $LN6@getPrimary
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN10@getPrimary[ecx*4]
$LN5@getPrimary:

; 302  :   {
; 303  :     case SOLDIER:
; 304  :       return primary_infantry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+32]
	jmp	SHORT $LN8@getPrimary
$LN4@getPrimary:

; 305  :     case LIGHT_VEHICLE:
; 306  :       return primary_lightVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+40]
	jmp	SHORT $LN8@getPrimary
$LN3@getPrimary:

; 307  :     case HEAVY_VEHICLE:
; 308  :       return primary_heavyVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+48]
	jmp	SHORT $LN8@getPrimary
$LN2@getPrimary:

; 309  :     case FLYING:
; 310  :       return primary_VTOL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+56]
	jmp	SHORT $LN8@getPrimary
$LN1@getPrimary:

; 311  :     case BUILDING:
; 312  :       return primary_building;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+64]
	jmp	SHORT $LN8@getPrimary
$LN6@getPrimary:

; 313  :   }
; 314  :   return true;

	mov	al, 1
$LN8@getPrimary:

; 315  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN10@getPrimary:
	DD	$LN5@getPrimary
	DD	$LN4@getPrimary
	DD	$LN3@getPrimary
	DD	$LN2@getPrimary
	DD	$LN1@getPrimary
?getPrimary@dp88_customAI@@QAE_NPAVScriptableGameObj@@@Z ENDP ; dp88_customAI::getPrimary
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target_id$ = 12					; size = 4
?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z PROC ; dp88_customAI::getPriority, COMDAT
; _this$ = ecx

; 292  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 293  :   // Overloaded function to accept object ID's
; 294  :   return getPriority ( obj, Commands->Find_Object ( target_id ) );

	mov	eax, DWORD PTR _target_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 295  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@H@Z ENDP ; dp88_customAI::getPriority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv496 = -128						; size = 4
tv628 = -124						; size = 4
tv574 = -124						; size = 4
tv560 = -124						; size = 4
tv432 = -124						; size = 4
tv632 = -120						; size = 4
tv630 = -120						; size = 4
tv626 = -120						; size = 4
tv490 = -120						; size = 4
tv567 = -116						; size = 4
tv553 = -116						; size = 4
tv425 = -116						; size = 4
tv224 = -116						; size = 4
$T1 = -112						; size = 12
$T2 = -100						; size = 12
_distance$ = -24					; size = 4
_maxHitPts$ = -20					; size = 4
_totalHitPts$ = -16					; size = 4
_cost$3 = -12						; size = 4
_priority$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z PROC ; dp88_customAI::getPriority, COMDAT
; _this$ = ecx

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 209  :   if (!obj || !target)

	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN19@getPriorit
	cmp	DWORD PTR _target$[ebp], 0
	jne	SHORT $LN20@getPriorit
$LN19@getPriorit:

; 210  :     return 0.0f;

	fldz
	jmp	$LN21@getPriorit
$LN20@getPriorit:

; 211  : 
; 212  :   if ( debug ) fprintf ( debugFile, "Calculating priority of %d (%s)\n", Commands->Get_ID(target), Commands->Get_Preset_Name(target) );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN18@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0CB@HOOENEEI@Calculating?5priority?5of?5?$CFd?5?$CI?$CFs?$CJ?6@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
$LN18@getPriorit:

; 213  : 
; 214  :   // Priority is 0 if the unit is dead or not on teams 0 or 1
; 215  :   if ( ( Commands->Get_Health ( target ) + Commands->Get_Shield_Strength ( target ) ) == 0
; 216  :     ||   Commands->Get_Player_Type ( target ) == SCRIPT_PLAYERTYPE_NEUTRAL || Commands->Get_Player_Type ( target ) == SCRIPT_PLAYERTYPE_SPECTATOR )

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv425[ebp]
	movss	xmm0, DWORD PTR tv425[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	movss	DWORD PTR tv626[ebp], xmm0
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv432[ebp]
	movss	xmm0, DWORD PTR tv626[ebp]
	addss	xmm0, DWORD PTR tv432[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN16@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	cmp	eax, -2					; fffffffeH
	je	SHORT $LN16@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	cmp	eax, -4					; fffffffcH
	jne	SHORT $LN17@getPriorit
$LN16@getPriorit:

; 217  :   {
; 218  :     if ( debug ) fprintf ( debugFile, "Target %d is dead or unteamed, ignoring\n", Commands->Get_ID(target));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN15@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0CJ@KBAGLFIO@Target?5?$CFd?5is?5dead?5or?5unteamed?0?5i@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN15@getPriorit:

; 219  :     return 0.0;

	fldz
	jmp	$LN21@getPriorit
$LN17@getPriorit:

; 220  :   }
; 221  : 
; 222  :   if ( target->As_VehicleGameObj() && !IsVehicleAIEnabled(target->As_VehicleGameObj()) && IsVehicleEmpty(target->As_VehicleGameObj()) )

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	$LN14@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN14@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@getPriorit

; 223  :   {
; 224  :     if ( debug ) fprintf ( debugFile, "Target %d is an empty, non-AI vehicle, ignoring\n", Commands->Get_ID(target));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN13@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0DB@ELEJHPAH@Target?5?$CFd?5is?5an?5empty?0?5non?9AI?5ve@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN13@getPriorit:

; 225  :     return 0.0;

	fldz
	jmp	$LN21@getPriorit
$LN14@getPriorit:

; 226  :   }
; 227  : 
; 228  :   if ( !m_bCanDetectStealth && target->As_SmartGameObj() && target->As_SmartGameObj()->Is_Stealthed() && getDistance(obj, target) > target->As_SmartGameObj()->Get_Stealth_Fade_Distance() )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+133]
	test	ecx, ecx
	jne	$LN12@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	test	eax, eax
	je	$LN12@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, eax
	call	?Is_Stealthed@SmartGameObj@@QBE_NXZ	; SmartGameObj::Is_Stealthed
	movzx	ecx, al
	test	ecx, ecx
	je	$LN12@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	DWORD PTR tv224[ebp], eax
	mov	ecx, DWORD PTR tv224[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv224[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv490[ebp]
	movss	xmm0, DWORD PTR tv490[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	movss	DWORD PTR tv628[ebp], xmm0
	call	?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ; dp88_customAI::getDistance
	add	esp, 8
	fstp	DWORD PTR tv496[ebp]
	movss	xmm0, DWORD PTR tv496[ebp]
	movss	xmm1, DWORD PTR tv628[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN12@getPriorit

; 229  :   {
; 230  :     if ( debug ) fprintf ( debugFile, "Target %d is currently stealthed and stealth detection is disabled\n", Commands->Get_ID(target));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN11@getPriorit
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0EE@JFOGFIIM@Target?5?$CFd?5is?5currently?5stealthed@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN11@getPriorit:

; 231  :     return 0.0;

	fldz
	jmp	$LN21@getPriorit
$LN12@getPriorit:

; 232  :   }
; 233  : 
; 234  :   // Assign base priority (note: negative base priorities are used to indicate movement preferences
; 235  :   // in mobile AI types, we don't care about the sign here so we use fabs() to make it positive)
; 236  :   float priority = fabs(getBasePriority(target));

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _priority$[ebp]

; 237  : 
; 238  :   // Return if our base priority for this target type is 0
; 239  :   if ( priority == 0.0f )

	movss	xmm0, DWORD PTR _priority$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN10@getPriorit

; 240  :   {
; 241  :     if ( debug ) fprintf ( debugFile, "\tInvalid target type, priority is 0.0\n" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN9@getPriorit
	push	OFFSET ??_C@_0CH@MLCAJKAC@?7Invalid?5target?5type?0?5priority?5i@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN9@getPriorit:

; 242  :     return 0.0f;

	fldz
	jmp	$LN21@getPriorit
$LN10@getPriorit:

; 243  :   }
; 244  : 
; 245  :   if ( debug ) fprintf ( debugFile, "\tBase priority for this unit type is %.2f\n", priority );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN8@getPriorit
	cvtss2sd xmm0, DWORD PTR _priority$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0CL@KFFNFBIH@?7Base?5priority?5for?5this?5unit?5typ@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
$LN8@getPriorit:

; 246  : 
; 247  : 
; 248  :   // Apply target value modifier (add X priority for every 10 credits the target
; 249  :   // cost to purchase - not applicable to buildings)
; 250  :   if ( !target->As_BuildingGameObj() )

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	test	eax, eax
	jne	$LN6@getPriorit

; 251  :   {
; 252  :     int cost = Get_Team_Cost( Commands->Get_Preset_ID ( target ), Commands->Get_Player_Type ( target ) );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+112]
	call	edx
	add	esp, 4
	push	eax
	call	?Get_Team_Cost@@YAIHI@Z			; Get_Team_Cost
	add	esp, 8
	mov	DWORD PTR _cost$3[ebp], eax

; 253  :     priority += ((float)cost/10.0f) * modifier_target_value;

	cvtsi2ss xmm0, DWORD PTR _cost$3[ebp]
	divss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+76]
	addss	xmm0, DWORD PTR _priority$[ebp]
	movss	DWORD PTR _priority$[ebp], xmm0

; 254  : 
; 255  :     if ( debug ) fprintf ( debugFile, "\tTarget Value Modifier: Adding %.4f priority ((Value %d /10) * modifier %.2f)\n", ((float)cost/10.0f)*modifier_target_value, cost, modifier_target_value );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN6@getPriorit
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+76]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cost$3[ebp]
	push	ecx
	cvtsi2ss xmm0, DWORD PTR _cost$3[ebp]
	divss	xmm0, DWORD PTR __real@41200000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+76]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0EP@MPEMHLEK@?7Target?5Value?5Modifier?3?5Adding?5?$CF@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 28					; 0000001cH
$LN6@getPriorit:

; 256  :   }
; 257  : 
; 258  : 
; 259  :   // Apply target damage modifier (add X priority for 10 points of damage the
; 260  :   // target has already taken from their maximum health/armour)
; 261  :   float totalHitPts = Commands->Get_Health ( target ) + Commands->Get_Shield_Strength ( target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv553[ebp]
	movss	xmm0, DWORD PTR tv553[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	movss	DWORD PTR tv630[ebp], xmm0
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv560[ebp]
	movss	xmm0, DWORD PTR tv630[ebp]
	addss	xmm0, DWORD PTR tv560[ebp]
	movss	DWORD PTR _totalHitPts$[ebp], xmm0

; 262  :   float maxHitPts = Commands->Get_Max_Health ( target ) + Commands->Get_Max_Shield_Strength ( target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+224]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv567[ebp]
	movss	xmm0, DWORD PTR tv567[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+236]
	movss	DWORD PTR tv632[ebp], xmm0
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv574[ebp]
	movss	xmm0, DWORD PTR tv632[ebp]
	addss	xmm0, DWORD PTR tv574[ebp]
	movss	DWORD PTR _maxHitPts$[ebp], xmm0

; 263  :   priority += ((maxHitPts-totalHitPts)/10) * modifier_target_damage;

	movss	xmm0, DWORD PTR _maxHitPts$[ebp]
	subss	xmm0, DWORD PTR _totalHitPts$[ebp]
	divss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+72]
	addss	xmm0, DWORD PTR _priority$[ebp]
	movss	DWORD PTR _priority$[ebp], xmm0

; 264  : 
; 265  :   if ( debug ) fprintf ( debugFile, "\tTarget Damage Modifier: Adding %.4f priority ((Target Damage Taken %.2f) /10) * modifier %.2f)\n", ((maxHitPts-totalHitPts)/10)*modifier_target_damage, maxHitPts-totalHitPts, modifier_target_damage );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN5@getPriorit
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+72]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _maxHitPts$[ebp]
	subss	xmm0, DWORD PTR _totalHitPts$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _maxHitPts$[ebp]
	subss	xmm0, DWORD PTR _totalHitPts$[ebp]
	divss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+72]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0GB@JBNDDAJJ@?7Target?5Damage?5Modifier?3?5Adding?5@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 32					; 00000020H
$LN5@getPriorit:

; 266  : 
; 267  : 
; 268  :   // Apply target distance modifier (subtract X distance for every 10 units of
; 269  :   //  distancebetween this object and the target)
; 270  :   float distance = Commands->Get_Distance ( Commands->Get_Position ( obj ), Commands->Get_Position ( target ) );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 8
	fstp	DWORD PTR _distance$[ebp]

; 271  :   priority -= (distance/10) * modifier_distance;

	movss	xmm0, DWORD PTR _distance$[ebp]
	divss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+68]
	movss	xmm1, DWORD PTR _priority$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _priority$[ebp], xmm1

; 272  : 
; 273  :   if ( debug ) fprintf ( debugFile, "\tDistance Modifier: Subtracting %.4f priority ((Distance to target %.2f) /10) * modifier %.2f)\n", (distance/10)*modifier_distance, distance, modifier_distance );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN4@getPriorit
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+68]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _distance$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _distance$[ebp]
	divss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+68]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0GA@GAACONDP@?7Distance?5Modifier?3?5Subtracting?5@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 32					; 00000020H
$LN4@getPriorit:

; 274  : 
; 275  : 
; 276  :   // Ensure priority is above 0
; 277  :   if ( debug ) fprintf ( debugFile, "\tFinal Priority: %.4f\n", priority );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN3@getPriorit
	cvtss2sd xmm0, DWORD PTR _priority$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BH@DODFLDLH@?7Final?5Priority?3?5?$CF?44f?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
$LN3@getPriorit:

; 278  :   if ( priority <= 0.0 )

	cvtss2sd xmm0, DWORD PTR _priority$[ebp]
	movsd	xmm1, QWORD PTR __real@0000000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN1@getPriorit

; 279  :   {
; 280  :     priority = 0.0001f;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR _priority$[ebp], xmm0

; 281  :     if ( debug ) fprintf ( debugFile, "\tAdjusting final priority to 0.0001 (must be >0)\n" );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN1@getPriorit
	push	OFFSET ??_C@_0DC@IMIMFLLN@?7Adjusting?5final?5priority?5to?50?40@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN1@getPriorit:

; 282  :   }
; 283  : 
; 284  : 
; 285  :   // Return result
; 286  :   return priority;

	fld	DWORD PTR _priority$[ebp]
$LN21@getPriorit:

; 287  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?getPriority@dp88_customAI@@UAEMPAVScriptableGameObj@@0@Z ENDP ; dp88_customAI::getPriority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
_target$ = 8						; size = 4
?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z PROC ; dp88_customAI::getBasePriority, COMDAT
; _this$ = ecx

; 188  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 189  :   switch (GetTargetType(target))

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	?GetTargetType@dp88_customAI@@SA?AW4TargetType@1@PAVScriptableGameObj@@@Z ; dp88_customAI::GetTargetType
	add	esp, 4
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 4
	ja	SHORT $LN6@getBasePri
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN10@getBasePri[ecx*4]
$LN5@getBasePri:

; 190  :   {
; 191  :     case SOLDIER:
; 192  :       return priority_infantry;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]
	jmp	SHORT $LN8@getBasePri
$LN4@getBasePri:

; 193  :     case LIGHT_VEHICLE:
; 194  :       return priority_lightVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	jmp	SHORT $LN8@getBasePri
$LN3@getBasePri:

; 195  :     case HEAVY_VEHICLE:
; 196  :       return priority_heavyVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	jmp	SHORT $LN8@getBasePri
$LN2@getBasePri:

; 197  :     case FLYING:
; 198  :       return priority_VTOL;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	jmp	SHORT $LN8@getBasePri
$LN1@getBasePri:

; 199  :     case BUILDING:
; 200  :       return priority_building;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	jmp	SHORT $LN8@getBasePri
$LN6@getBasePri:

; 201  :   }
; 202  :   return 0;

	fldz
$LN8@getBasePri:

; 203  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN10@getBasePri:
	DD	$LN5@getBasePri
	DD	$LN4@getBasePri
	DD	$LN3@getBasePri
	DD	$LN2@getBasePri
	DD	$LN1@getBasePri
?getBasePriority@dp88_customAI@@UAEMPAVScriptableGameObj@@@Z ENDP ; dp88_customAI::getBasePriority
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
$T1 = -88						; size = 12
$T2 = -76						; size = 12
_obj1$ = 8						; size = 4
_obj2$ = 12						; size = 4
?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z PROC ; dp88_customAI::getDistance, COMDAT

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 181  :   // Gets distance between two objects
; 182  :   return Commands->Get_Distance ( Commands->Get_Position ( obj1 ), Commands->Get_Position ( obj2 ) );

	mov	eax, DWORD PTR _obj2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _obj1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 8

; 183  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getDistance@dp88_customAI@@SAMPAVScriptableGameObj@@0@Z ENDP ; dp88_customAI::getDistance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_customAI::ResetAllActions, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 86   :   Commands->Action_Reset(obj, 101.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42ca0000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8

; 87   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ResetAllActions@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_customAI::ResetAllActions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_bEnabled$ = 12						; size = 1
?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z PROC ; dp88_customAI::AIStateChanged, COMDAT
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 74   :   if (bEnabled)

	movzx	eax, BYTE PTR _bEnabled$[ebp]
	test	eax, eax
	je	SHORT $LN2@AIStateCha

; 75   :     Commands->Innate_Enable(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+440]
	call	edx
	add	esp, 4

; 76   :   else

	jmp	SHORT $LN1@AIStateCha
$LN2@AIStateCha:

; 77   :     Commands->Innate_Disable(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+436]
	call	edx
	add	esp, 4
$LN1@AIStateCha:

; 78   : 
; 79   :   Commands->Enable_Enemy_Seen(pObj, bEnabled);

	movzx	eax, BYTE PTR _bEnabled$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+300]
	call	eax
	add	esp, 8

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?AIStateChanged@dp88_customAI@@UAEXPAVScriptableGameObj@@_N@Z ENDP ; dp88_customAI::AIStateChanged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z
_TEXT	SEGMENT
tv288 = -76						; size = 4
tv277 = -76						; size = 4
tv267 = -76						; size = 4
tv256 = -76						; size = 4
tv138 = -76						; size = 4
tv229 = -74						; size = 1
tv214 = -74						; size = 1
tv201 = -74						; size = 1
tv188 = -74						; size = 1
tv175 = -74						; size = 1
tv228 = -73						; size = 1
tv211 = -73						; size = 1
tv198 = -73						; size = 1
tv185 = -73						; size = 1
tv172 = -73						; size = 1
_filename$1 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_loadSecondaryFireSettings$ = 12			; size = 1
_loadBuildingTargetSettings$ = 16			; size = 1
?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z PROC ; dp88_customAI::loadSettings, COMDAT
; _this$ = ecx

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 136  :   // Load base target type priorities
; 137  :   priority_infantry       = Get_Float_Parameter("Priority_Infantry");

	push	OFFSET ??_C@_0BC@NBNMMJKM@Priority_Infantry?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+28]

; 138  :   priority_lightVehicle   = Get_Float_Parameter("Priority_Light_Vehicle");

	push	OFFSET ??_C@_0BH@FGCBALMH@Priority_Light_Vehicle?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+36]

; 139  :   priority_heavyVehicle   = Get_Float_Parameter("Priority_Heavy_Vehicle");

	push	OFFSET ??_C@_0BH@DDHEPMLK@Priority_Heavy_Vehicle?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+44]

; 140  :   priority_VTOL           = Get_Float_Parameter("Priority_VTOL");

	push	OFFSET ??_C@_0O@NPEIAKIN@Priority_VTOL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+52]

; 141  :   priority_building       = ( loadBuildingTargetSettings ) ? Get_Float_Parameter("Priority_Building") : 0;

	movzx	eax, BYTE PTR _loadBuildingTargetSettings$[ebp]
	test	eax, eax
	je	SHORT $LN4@loadSettin
	push	OFFSET ??_C@_0BC@BBDAOLBD@Priority_Building?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv138[ebp]
	jmp	SHORT $LN5@loadSettin
$LN4@loadSettin:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv138[ebp], xmm0
$LN5@loadSettin:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	movss	DWORD PTR [ecx+60], xmm0

; 142  : 
; 143  : 
; 144  :   // Load priority modifiers
; 145  :   modifier_distance       = Get_Float_Parameter("Modifier_Distance");

	push	OFFSET ??_C@_0BC@DCBJBJAE@Modifier_Distance?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+68]

; 146  :   modifier_target_damage  = Get_Float_Parameter("Modifier_Target_Damage");

	push	OFFSET ??_C@_0BH@EJDJNCFC@Modifier_Target_Damage?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+72]

; 147  :   modifier_target_value   = Get_Float_Parameter("Modifier_Target_Value");

	push	OFFSET ??_C@_0BG@LCPGCHOK@Modifier_Target_Value?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+76]

; 148  : 
; 149  : 
; 150  :   // Load primary / secondary fire states for target types
; 151  :   primary_infantry        = ( loadSecondaryFireSettings ) ? (( Get_Int_Parameter ( "Weapon_Infantry" ) == 2 )     ? false : true ) : true;

	movzx	eax, BYTE PTR _loadSecondaryFireSettings$[ebp]
	test	eax, eax
	je	SHORT $LN8@loadSettin
	push	OFFSET ??_C@_0BA@BLEJNMBJ@Weapon_Infantry?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 2
	jne	SHORT $LN6@loadSettin
	mov	BYTE PTR tv172[ebp], 0
	jmp	SHORT $LN7@loadSettin
$LN6@loadSettin:
	mov	BYTE PTR tv172[ebp], 1
$LN7@loadSettin:
	mov	cl, BYTE PTR tv172[ebp]
	mov	BYTE PTR tv175[ebp], cl
	jmp	SHORT $LN9@loadSettin
$LN8@loadSettin:
	mov	BYTE PTR tv175[ebp], 1
$LN9@loadSettin:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv175[ebp]
	mov	BYTE PTR [edx+32], al

; 152  :   primary_lightVehicle    = ( loadSecondaryFireSettings ) ? (( Get_Int_Parameter("Weapon_Light_Vehicle") == 2)    ? false : true ) : true;

	movzx	eax, BYTE PTR _loadSecondaryFireSettings$[ebp]
	test	eax, eax
	je	SHORT $LN12@loadSettin
	push	OFFSET ??_C@_0BF@CDAMGONB@Weapon_Light_Vehicle?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 2
	jne	SHORT $LN10@loadSettin
	mov	BYTE PTR tv185[ebp], 0
	jmp	SHORT $LN11@loadSettin
$LN10@loadSettin:
	mov	BYTE PTR tv185[ebp], 1
$LN11@loadSettin:
	mov	cl, BYTE PTR tv185[ebp]
	mov	BYTE PTR tv188[ebp], cl
	jmp	SHORT $LN13@loadSettin
$LN12@loadSettin:
	mov	BYTE PTR tv188[ebp], 1
$LN13@loadSettin:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv188[ebp]
	mov	BYTE PTR [edx+40], al

; 153  :   primary_heavyVehicle    = ( loadSecondaryFireSettings ) ? (( Get_Int_Parameter("Weapon_Heavy_Vehicle") == 2)    ? false : true ) : true;

	movzx	eax, BYTE PTR _loadSecondaryFireSettings$[ebp]
	test	eax, eax
	je	SHORT $LN16@loadSettin
	push	OFFSET ??_C@_0BF@EGFJJJKM@Weapon_Heavy_Vehicle?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 2
	jne	SHORT $LN14@loadSettin
	mov	BYTE PTR tv198[ebp], 0
	jmp	SHORT $LN15@loadSettin
$LN14@loadSettin:
	mov	BYTE PTR tv198[ebp], 1
$LN15@loadSettin:
	mov	cl, BYTE PTR tv198[ebp]
	mov	BYTE PTR tv201[ebp], cl
	jmp	SHORT $LN17@loadSettin
$LN16@loadSettin:
	mov	BYTE PTR tv201[ebp], 1
$LN17@loadSettin:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv201[ebp]
	mov	BYTE PTR [edx+48], al

; 154  :   primary_VTOL            = ( loadSecondaryFireSettings ) ? (( Get_Int_Parameter ( "Weapon_VTOL" ) == 2 )         ? false : true ) : true;

	movzx	eax, BYTE PTR _loadSecondaryFireSettings$[ebp]
	test	eax, eax
	je	SHORT $LN20@loadSettin
	push	OFFSET ??_C@_0M@NIGAELBF@Weapon_VTOL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 2
	jne	SHORT $LN18@loadSettin
	mov	BYTE PTR tv211[ebp], 0
	jmp	SHORT $LN19@loadSettin
$LN18@loadSettin:
	mov	BYTE PTR tv211[ebp], 1
$LN19@loadSettin:
	mov	cl, BYTE PTR tv211[ebp]
	mov	BYTE PTR tv214[ebp], cl
	jmp	SHORT $LN21@loadSettin
$LN20@loadSettin:
	mov	BYTE PTR tv214[ebp], 1
$LN21@loadSettin:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv214[ebp]
	mov	BYTE PTR [edx+56], al

; 155  :   primary_building        = ( loadSecondaryFireSettings && loadBuildingTargetSettings ) ? (( Get_Int_Parameter ( "Weapon_Building" ) == 2 ) ? false : true) : true;

	movzx	eax, BYTE PTR _loadSecondaryFireSettings$[ebp]
	test	eax, eax
	je	SHORT $LN22@loadSettin
	movzx	ecx, BYTE PTR _loadBuildingTargetSettings$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@loadSettin
	push	OFFSET ??_C@_0BA@NLKFPOKG@Weapon_Building?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 2
	jne	SHORT $LN23@loadSettin
	mov	BYTE PTR tv228[ebp], 0
	jmp	SHORT $LN24@loadSettin
$LN23@loadSettin:
	mov	BYTE PTR tv228[ebp], 1
$LN24@loadSettin:
	mov	dl, BYTE PTR tv228[ebp]
	mov	BYTE PTR tv229[ebp], dl
	jmp	SHORT $LN25@loadSettin
$LN22@loadSettin:
	mov	BYTE PTR tv229[ebp], 1
$LN25@loadSettin:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv229[ebp]
	mov	BYTE PTR [eax+64], cl

; 156  : 
; 157  : 
; 158  :   // Get min and max ranges
; 159  :   primary_minRange        = Get_Int_Parameter ( "Min_Attack_Range" );

	push	OFFSET ??_C@_0BB@CCIEHIDO@Min_Attack_Range?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 160  :   primary_maxRange        = Get_Int_Parameter ( "Max_Attack_Range" );

	push	OFFSET ??_C@_0BB@DHAPKMMM@Max_Attack_Range?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 161  :   secondary_minRange      = ( loadSecondaryFireSettings ) ? Get_Int_Parameter ( "Min_Attack_Range_Secondary" ) : 0;

	movzx	eax, BYTE PTR _loadSecondaryFireSettings$[ebp]
	test	eax, eax
	je	SHORT $LN26@loadSettin
	push	OFFSET ??_C@_0BL@EKEHGKIF@Min_Attack_Range_Secondary?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv256[ebp], eax
	jmp	SHORT $LN27@loadSettin
$LN26@loadSettin:
	mov	DWORD PTR tv256[ebp], 0
$LN27@loadSettin:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv256[ebp]
	mov	DWORD PTR [ecx+88], edx

; 162  :   secondary_maxRange      = ( loadSecondaryFireSettings ) ? Get_Int_Parameter ( "Max_Attack_Range_Secondary" ) : 0;

	movzx	eax, BYTE PTR _loadSecondaryFireSettings$[ebp]
	test	eax, eax
	je	SHORT $LN28@loadSettin
	push	OFFSET ??_C@_0BL@CMKCAMPB@Max_Attack_Range_Secondary?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv267[ebp], eax
	jmp	SHORT $LN29@loadSettin
$LN28@loadSettin:
	mov	DWORD PTR tv267[ebp], 0
$LN29@loadSettin:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv267[ebp]
	mov	DWORD PTR [ecx+92], edx

; 163  : 
; 164  :   // Load other settings
; 165  :   m_bCanDetectStealth     = (Get_Int_Parameter("Detects_Stealth")>0);

	push	OFFSET ??_C@_0BA@GJMGCGII@Detects_Stealth?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jle	SHORT $LN30@loadSettin
	mov	DWORD PTR tv277[ebp], 1
	jmp	SHORT $LN31@loadSettin
$LN30@loadSettin:
	mov	DWORD PTR tv277[ebp], 0
$LN31@loadSettin:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv277[ebp]
	mov	BYTE PTR [eax+133], cl

; 166  : 
; 167  :   // If debugging is enabled open the debug file
; 168  :   debug = ( Get_Int_Parameter("Debug") == 1 );

	push	OFFSET ??_C@_05GCIPIGEI@Debug?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jne	SHORT $LN32@loadSettin
	mov	DWORD PTR tv288[ebp], 1
	jmp	SHORT $LN33@loadSettin
$LN32@loadSettin:
	mov	DWORD PTR tv288[ebp], 0
$LN33@loadSettin:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv288[ebp]
	mov	BYTE PTR [eax+134], cl

; 169  :   if ( debug )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+134]
	test	ecx, ecx
	je	SHORT $LN1@loadSettin

; 170  :   {
; 171  :     StringClass filename(true);

	push	1
	lea	ecx, DWORD PTR _filename$1[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 172  :     filename.Format ( "%s_%d_%d.log", Commands->Get_Preset_Name(obj), Commands->Get_ID(obj), (int)time(NULL) );

	push	0
	call	_time
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0N@KKGDDBPP@?$CFs_?$CFd_?$CFd?4log?$AA@
	lea	eax, DWORD PTR _filename$1[ebp]
	push	eax
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 173  :     debugFile = fopen(filename.Peek_Buffer(),"w");

	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	lea	ecx, DWORD PTR _filename$1[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 174  :   }

	lea	ecx, DWORD PTR _filename$1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@loadSettin:

; 175  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?loadSettings@dp88_customAI@@UAEXPAVScriptableGameObj@@_N1@Z ENDP ; dp88_customAI::loadSettings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z PROC	; dp88_customAI::Init, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 106  :   if (!obj->As_SmartGameObj())

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	test	eax, eax
	jne	SHORT $LN1@Init

; 107  :   {
; 108  :     Console_Output("[%d:%s:%s] Critical Error: Only object of type SmartGameObj can use the dp88_AI_* series of scripts. Destroying script...\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0HL@GDCLDGM@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Only?5@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 109  :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 110  :     return;

	jmp	$LN2@Init
$LN1@Init:

; 111  :   }
; 112  : 
; 113  :   // Set default values
; 114  :   m_bAiEnabled    = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+132], 1

; 115  :   m_target        = nullptr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 116  :   hasTarget       = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 117  :   targetLastSeen  = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+116], 0

; 118  :   targetPriority  = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 119  :   m_bTargetPrimaryFire  = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+124], 1

; 120  :   thinkTime       = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+128], xmm0

; 121  : 
; 122  :   // Set state
; 123  :   Commands->Enable_Hibernation(obj, false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+568]
	call	edx
	add	esp, 8

; 124  :   Commands->Innate_Enable(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+440]
	call	edx
	add	esp, 4

; 125  :   Commands->Enable_Enemy_Seen(obj, true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+300]
	call	edx
	add	esp, 8

; 126  :   Commands->Enable_Vehicle_Transitions(obj, false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8

; 127  : 
; 128  :   // Start timer which runs for the lifetime of this object
; 129  :   Commands->Start_Timer ( obj, this, 1.0, TIMER_AI_THINK );

	push	-620363775				; db060001H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@Init:

; 130  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ENDP	; dp88_customAI::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_complete_reason$ = 16					; size = 4
?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; dp88_customAI::Action_Complete, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   :   if ( action_id == 2 )

	cmp	DWORD PTR _action_id$[ebp], 2
	jne	SHORT $LN1@Action_Com

; 94   :   {
; 95   :     m_target = nullptr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 96   : 	hasTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 97   :     targetPriority = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 98   :     Commands->Action_Reset( obj, 100 );

	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
$LN1@Action_Com:

; 99   :   }
; 100  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@dp88_customAI@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; dp88_customAI::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_message$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_customAI::Custom, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 44   :   if ( message == CUSTOM_AI_DISABLEAI && m_bAiEnabled )

	cmp	DWORD PTR _message$[ebp], -637140989	; da060003H
	jne	SHORT $LN5@Custom
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+132]
	test	ecx, ecx
	je	SHORT $LN5@Custom

; 45   :   {
; 46   :     m_bAiEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+132], 0

; 47   :     AIStateChanged(pObj, false);

	push	0
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 48   : 	m_target = nullptr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 49   : 	hasTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 50   : 	targetPriority = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 51   : 	targetLastSeen = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+116], 0
	jmp	SHORT $LN1@Custom
$LN5@Custom:

; 52   :   }
; 53   : 
; 54   :   else if ( message == CUSTOM_AI_ENABLEAI && !m_bAiEnabled )

	cmp	DWORD PTR _message$[ebp], -637140988	; da060004H
	jne	SHORT $LN3@Custom
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+132]
	test	ecx, ecx
	jne	SHORT $LN3@Custom

; 55   :   {
; 56   :     m_bAiEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+132], 1

; 57   : 	m_target = nullptr;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 58   : 	hasTarget = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 59   : 	targetPriority = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 60   : 	targetLastSeen = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+116], 0

; 61   :     AIStateChanged(pObj, true);

	push	1
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	jmp	SHORT $LN1@Custom
$LN3@Custom:

; 62   :   }
; 63   : 
; 64   :   else if (message == CUSTOM_AI_RESET_ACTIONS)

	cmp	DWORD PTR _message$[ebp], -637140987	; da060005H
	jne	SHORT $LN1@Custom

; 65   :   {
; 66   :     ResetAllActions(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
$LN1@Custom:

; 67   :   }
; 68   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_customAI@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_customAI::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_customAI::Timer_Expired, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 36   :   if (TIMER_AI_THINK == number)

	cmp	DWORD PTR _number$[ebp], -620363775	; db060001H
	jne	SHORT $LN1@Timer_Expi

; 37   :     Commands->Start_Timer(obj, this, thinkTime, TIMER_AI_THINK);

	push	-620363775				; db060001H
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+128]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	add	esp, 16					; 00000010H
$LN1@Timer_Expi:

; 38   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_customAI@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_customAI::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.cpp
;	COMDAT ?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_customAI::Created, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 26   :   // Note: Init is done in a seperate function because derived classes might want to pass different
; 27   :   // parameters to loadSettings, thus we cannot assume they will call this function
; 28   :   loadSettings(obj, true, false);

	push	0
	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax

; 29   :   Init(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax

; 30   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_customAI@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_customAI::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.h
;	COMDAT ??1dp88_customAI@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_customAI@@UAE@XZ PROC				; dp88_customAI::~dp88_customAI, COMDAT
; _this$ = ecx

; 67   :   ~dp88_customAI() { if ( debugFile != NULL ) { fclose(debugFile); } };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_customAI@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	SHORT $LN2@dp88_custo
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__fclose
	add	esp, 4
$LN2@dp88_custo:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_customAI@@UAE@XZ ENDP				; dp88_customAI::~dp88_customAI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_customai.h
;	COMDAT ??0dp88_customAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_customAI@@QAE@XZ PROC				; dp88_customAI::dp88_customAI, COMDAT
; _this$ = ecx

; 66   :   dp88_customAI() { debugFile = NULL; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_customAI@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0ReferencerClass@@QAE@XZ		; ReferencerClass::ReferencerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_customAI@@QAE@XZ ENDP				; dp88_customAI::dp88_customAI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GObserverImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObserverImpClass@@UAEPAXI@Z PROC			; ObserverImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObserverImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObserverImpClass@@UAEPAXI@Z ENDP			; ObserverImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1ObserverImpClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ObserverImpClass@@UAE@XZ PROC			; ObserverImpClass::~ObserverImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1ObserverImpClass@@UAE@XZ ENDP			; ObserverImpClass::~ObserverImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Exited@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_pExiter$ = 12						; size = 4
?Exited@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z PROC ; ObserverImpClass::Exited, COMDAT
; _this$ = ecx

; 46   :   virtual void Exited(GameObject* obj, GameObject* pExiter) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ENDP ; ObserverImpClass::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Entered@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_pEnterer$ = 12						; size = 4
?Entered@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z PROC ; ObserverImpClass::Entered, COMDAT
; _this$ = ecx

; 45   :   virtual void Entered(GameObject* obj, GameObject* pEnterer) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ENDP ; ObserverImpClass::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Poked@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_pPoker$ = 12						; size = 4
?Poked@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z PROC ; ObserverImpClass::Poked, COMDAT
; _this$ = ecx

; 44   :   virtual void Poked(GameObject* obj,GameObject* pPoker) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ENDP ; ObserverImpClass::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Timer_Expired@ObserverImpClass@@MAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@ObserverImpClass@@MAEXPAVScriptableGameObj@@H@Z PROC ; ObserverImpClass::Timer_Expired, COMDAT
; _this$ = ecx

; 43   :   virtual void Timer_Expired(GameObject* obj,int number) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@ObserverImpClass@@MAEXPAVScriptableGameObj@@H@Z ENDP ; ObserverImpClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Action_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_complete_reason$ = 16					; size = 4
?Action_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; ObserverImpClass::Action_Complete, COMDAT
; _this$ = ecx

; 42   :   virtual void Action_Complete(GameObject* obj,int action_id,ActionCompleteReason complete_reason) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; ObserverImpClass::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Enemy_Seen@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_pEnemy$ = 12						; size = 4
?Enemy_Seen@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z PROC ; ObserverImpClass::Enemy_Seen, COMDAT
; _this$ = ecx

; 41   :   virtual void Enemy_Seen(GameObject* obj,GameObject* pEnemy) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ENDP ; ObserverImpClass::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Sound_Heard@ObserverImpClass@@MAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_sound$ = 12						; size = 4
?Sound_Heard@ObserverImpClass@@MAEXPAVScriptableGameObj@@ABUCombatSound@@@Z PROC ; ObserverImpClass::Sound_Heard, COMDAT
; _this$ = ecx

; 40   :   virtual void Sound_Heard(GameObject* obj,const CombatSound & sound) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Sound_Heard@ObserverImpClass@@MAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ENDP ; ObserverImpClass::Sound_Heard
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Custom@ObserverImpClass@@MAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@ObserverImpClass@@MAEXPAVScriptableGameObj@@HH0@Z PROC ; ObserverImpClass::Custom, COMDAT
; _this$ = ecx

; 39   :   virtual void Custom(GameObject* obj,int type,int param,GameObject* pSender) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@ObserverImpClass@@MAEXPAVScriptableGameObj@@HH0@Z ENDP ; ObserverImpClass::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Damaged@ObserverImpClass@@MAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_pDamager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@ObserverImpClass@@MAEXPAVScriptableGameObj@@0M@Z PROC ; ObserverImpClass::Damaged, COMDAT
; _this$ = ecx

; 38   :   virtual void Damaged(GameObject* obj,GameObject* pDamager,float amount) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@ObserverImpClass@@MAEXPAVScriptableGameObj@@0M@Z ENDP ; ObserverImpClass::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Killed@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_pKiller$ = 12						; size = 4
?Killed@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z PROC ; ObserverImpClass::Killed, COMDAT
; _this$ = ecx

; 37   :   virtual void Killed(GameObject* obj,GameObject* pKiller) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@ObserverImpClass@@MAEXPAVScriptableGameObj@@0@Z ENDP ; ObserverImpClass::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Destroyed@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z PROC ; ObserverImpClass::Destroyed, COMDAT
; _this$ = ecx

; 36   :   virtual void Destroyed(GameObject* obj) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z ENDP ; ObserverImpClass::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Created@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z PROC ; ObserverImpClass::Created, COMDAT
; _this$ = ecx

; 35   :   virtual void Created(GameObject* obj) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z ENDP ; ObserverImpClass::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Animation_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@PBD@Z PROC ; ObserverImpClass::Animation_Complete, COMDAT
; _this$ = ecx

; 34   :   virtual void Animation_Complete(GameObject *obj, const char *animation_name) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@ObserverImpClass@@MAEXPAVScriptableGameObj@@PBD@Z ENDP ; ObserverImpClass::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Detach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Detach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z PROC ; ObserverImpClass::Detach, COMDAT
; _this$ = ecx

; 33   :   virtual void Detach(GameObject* obj) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z ENDP ; ObserverImpClass::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Attach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Attach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z PROC ; ObserverImpClass::Attach, COMDAT
; _this$ = ecx

; 32   :   virtual void Attach(GameObject* obj) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@ObserverImpClass@@MAEXPAVScriptableGameObj@@@Z ENDP ; ObserverImpClass::Attach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ?Get_Name@ObserverImpClass@@UAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ObserverImpClass@@UAEPBDXZ PROC		; ObserverImpClass::Get_Name, COMDAT
; _this$ = ecx

; 27   :   virtual const char* Get_Name() { return m_name.Peek_Buffer(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ObserverImpClass@@UAEPBDXZ ENDP		; ObserverImpClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\observerimpclass.h
;	COMDAT ??0ObserverImpClass@@QAE@VStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
??0ObserverImpClass@@QAE@VStringClass@@@Z PROC		; ObserverImpClass::ObserverImpClass, COMDAT
; _this$ = ecx

; 26   :   ObserverImpClass(StringClass name) { m_name = name; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@XZ		; GameObjObserverClass::GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ObserverImpClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ObserverImpClass@@QAE@VStringClass@@@Z ENDP		; ObserverImpClass::ObserverImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z PROC	; JFW_Object_Created_Hook_Base::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1JFW_Object_Created_Hook_Base@@UAE@XZ ; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z ENDP	; JFW_Object_Created_Hook_Base::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z PROC	; JFW_Object_Created_Hook_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z ENDP	; JFW_Object_Created_Hook_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z PROC	; JFW_Object_Created_Hook_Base::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z ENDP	; JFW_Object_Created_Hook_Base::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z PROC	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Object_Created_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z ENDP	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_tt.h
;	COMDAT ??0JFW_Object_Created_Hook_Base@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0JFW_Object_Created_Hook_Base@@QAE@XZ PROC		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base, COMDAT
; _this$ = ecx

; 556  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Object_Created_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 557  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0JFW_Object_Created_Hook_Base@@QAE@XZ ENDP		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z PROC		; MultiKeyHookScriptImpClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z ENDP		; MultiKeyHookScriptImpClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z PROC		; MultiKeyHookScriptImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z ENDP		; MultiKeyHookScriptImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z PROC	; MultiKeyHookScriptImpClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z ENDP	; MultiKeyHookScriptImpClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z PROC		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MultiKeyHookScriptImpClass@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z ENDP		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1MultiKeyHookScriptImpClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MultiKeyHookScriptImpClass@@UAE@XZ PROC		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1MultiKeyHookScriptImpClass@@UAE@XZ ENDP		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0MultiKeyHookScriptImpClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MultiKeyHookScriptImpClass@@QAE@XZ PROC		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MultiKeyHookScriptImpClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0MultiKeyHookScriptImpClass@@QAE@XZ ENDP		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ
_TEXT	SEGMENT
_node$1 = -12						; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count, COMDAT
; _this$ = ecx

; 302  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		uint32 count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 304  : 
; 305  : 		for (SLNode<T>* node = HeadNode; node; node = node->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _node$1[ebp], ecx
	jmp	SHORT $LN3@Get_Count
$LN2@Get_Count:
	mov	ecx, DWORD PTR _node$1[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _node$1[ebp], eax
$LN3@Get_Count:
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN1@Get_Count

; 306  : 			++count;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN2@Get_Count
$LN1@Get_Count:

; 307  : 
; 308  : 		return count;

	mov	eax, DWORD PTR _count$[ebp]

; 309  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty, COMDAT
; _this$ = ecx

; 296  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return !HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv66[ebp]

; 298  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
_TEXT	SEGMENT
tv140 = -88						; size = 4
tv142 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN8@Insert_Aft

; 269  : 		{
; 270  : 			return false;

	xor	al, al
	jmp	$LN9@Insert_Aft
$LN8@Insert_Aft:

; 271  : 		}
; 272  : 		if (oldnode == NULL || HeadNode == NULL)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN6@Insert_Aft
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@Insert_Aft
$LN6@Insert_Aft:

; 273  : 		{
; 274  : 			return(Add_Head(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN9@Insert_Aft
$LN7@Insert_Aft:

; 275  : 		}
; 276  : 		SLNode<T> *cur;
; 277  : 		for (cur = HeadNode; cur && cur->Data() != oldnode; cur = cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Insert_Aft
$LN4@Insert_Aft:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Insert_Aft:
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN3@Insert_Aft

; 278  : 		{
; 279  : 		}

	jmp	SHORT $LN4@Insert_Aft
$LN3@Insert_Aft:

; 280  : 		if (cur != NULL  && cur->Data() == oldnode)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN2@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN2@Insert_Aft

; 281  : 		{
; 282  : 			if (cur == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Insert_Aft

; 283  : 			{
; 284  : 				return(Add_Tail(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	$LN9@Insert_Aft
$LN1@Insert_Aft:

; 285  : 			}
; 286  : 			SLNode<T> *temp = new SLNode<T>(newnode);

	push	OFFSET ??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@
	push	286					; 0000011eH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Insert_Aft
	xor	ecx, ecx
	jne	SHORT $LN11@Insert_Aft
	push	286					; 0000011eH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@Insert_Aft:
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN15@Insert_Aft
$LN14@Insert_Aft:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN12@Insert_Aft
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN13@Insert_Aft
$LN12@Insert_Aft:
	mov	DWORD PTR tv140[ebp], 0
$LN13@Insert_Aft:
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv142[ebp], ecx
$LN15@Insert_Aft:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 287  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 288  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 289  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Insert_Aft
$LN2@Insert_Aft:

; 290  : 		}
; 291  : 		return false;

	xor	al, al
$LN9@Insert_Aft:

; 292  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
_TEXT	SEGMENT
tv145 = -88						; size = 4
tv147 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN7@Insert_Bef

; 245  : 		{
; 246  : 			return false;

	xor	al, al
	jmp	$LN8@Insert_Bef
$LN7@Insert_Bef:

; 247  : 		}
; 248  : 		if (oldnode == NULL || HeadNode == NULL || HeadNode->Data() == oldnode)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	SHORT $LN6@Insert_Bef
$LN5@Insert_Bef:

; 249  : 		{
; 250  : 			return Add_Head(newnode);

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN8@Insert_Bef
$LN6@Insert_Bef:

; 251  : 		}
; 252  : 		SLNode<T> *cur;
; 253  : 		for (cur=HeadNode; cur->Next() && cur->Next()->Data() != oldnode; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN4@Insert_Bef
$LN3@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN4@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	SHORT $LN2@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN2@Insert_Bef

; 254  : 		{
; 255  : 		}

	jmp	SHORT $LN3@Insert_Bef
$LN2@Insert_Bef:

; 256  : 		if (cur->Next() != NULL && cur->Next()->Data() == oldnode)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	$LN1@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN1@Insert_Bef

; 257  : 		{
; 258  : 			SLNode<T> *temp	= new SLNode<T> (newnode);

	push	OFFSET ??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	258					; 00000102H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@Insert_Bef
	xor	ecx, ecx
	jne	SHORT $LN10@Insert_Bef
	push	258					; 00000102H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Insert_Bef:
	mov	DWORD PTR tv147[ebp], 0
	jmp	SHORT $LN14@Insert_Bef
$LN13@Insert_Bef:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@Insert_Bef
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN12@Insert_Bef
$LN11@Insert_Bef:
	mov	DWORD PTR tv145[ebp], 0
$LN12@Insert_Bef:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv147[ebp], ecx
$LN14@Insert_Bef:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 259  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 260  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 261  : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@Insert_Bef
$LN1@Insert_Bef:

; 262  : 		}
; 263  : 		return false;

	xor	al, al
$LN8@Insert_Bef:

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_cur$2 = -12						; size = 4
_next$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All, COMDAT
; _this$ = ecx

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 		SLNode<T> *next;
; 233  : 		for (SLNode<T> *cur = HeadNode; cur; cur = next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$2[ebp], ecx
	jmp	SHORT $LN3@Remove_All
$LN2@Remove_All:
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$2[ebp], eax
$LN3@Remove_All:
	cmp	DWORD PTR _cur$2[ebp], 0
	je	SHORT $LN1@Remove_All

; 234  : 		{
; 235  : 			next = cur->Next();

	mov	ecx, DWORD PTR _cur$2[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _next$[ebp], eax

; 236  : 			delete cur;

	push	OFFSET ??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@
	push	236					; 000000ecH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Remove_All
	xor	ecx, ecx
	jne	SHORT $LN6@Remove_All
	push	236					; 000000ecH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Remove_All:
	jmp	SHORT $LN8@Remove_All
$LN7@Remove_All:
	mov	eax, DWORD PTR _cur$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN8@Remove_All:

; 237  : 		}

	jmp	SHORT $LN2@Remove_All
$LN1@Remove_All:

; 238  : 		HeadNode = TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 239  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv76 = -81						; size = 1
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_element$ = 8						; size = 4
?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove, COMDAT
; _this$ = ecx

; 202  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		if (element == NULL || HeadNode == NULL)

	cmp	DWORD PTR _element$[ebp], 0
	je	SHORT $LN7@Remove
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@Remove
$LN7@Remove:

; 204  : 		{
; 205  : 			return false;

	xor	al, al
	jmp	$LN9@Remove
$LN8@Remove:

; 206  : 		}
; 207  : 		if (HeadNode->Data() == element)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN6@Remove

; 208  : 		{
; 209  : 			return Remove_Head() != NULL ? true : false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	test	eax, eax
	je	SHORT $LN11@Remove
	mov	BYTE PTR tv76[ebp], 1
	jmp	SHORT $LN12@Remove
$LN11@Remove:
	mov	BYTE PTR tv76[ebp], 0
$LN12@Remove:
	mov	al, BYTE PTR tv76[ebp]
	jmp	$LN9@Remove
$LN6@Remove:

; 210  : 		}
; 211  : 		SLNode<T> *cur;
; 212  : 		for (cur = HeadNode; cur->Next() && cur->Next()->Data() != element; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Remove
$LN4@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	SHORT $LN3@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	je	SHORT $LN3@Remove

; 213  : 		{
; 214  : 		}

	jmp	SHORT $LN4@Remove
$LN3@Remove:

; 215  : 		if (cur->Next() != NULL && cur->Next()->Data() == element)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	$LN2@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN2@Remove

; 216  : 		{
; 217  : 			SLNode<T> *temp	= cur->Next();

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _temp$2[ebp], eax

; 218  : 			cur->Set_Next(temp->Next());

	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 219  : 			if (temp == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Remove

; 220  : 			{
; 221  : 				TailNode = cur;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Remove:

; 222  : 			}
; 223  : 			delete temp;

	push	OFFSET ??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	223					; 000000dfH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Remove
	xor	ecx, ecx
	jne	SHORT $LN13@Remove
	push	223					; 000000dfH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Remove:
	jmp	SHORT $LN15@Remove
$LN14@Remove:
	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN15@Remove:

; 224  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Remove
$LN2@Remove:

; 225  : 		}
; 226  : 		return false;

	xor	al, al
$LN9@Remove:

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
_data$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Tai

; 193  : 		{
; 194  : 			return ((T *)NULL);

	xor	eax, eax
	jmp	SHORT $LN2@Remove_Tai
$LN1@Remove_Tai:

; 195  : 		}
; 196  : 		T* data = TailNode->Data();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	mov	DWORD PTR _data$[ebp], eax

; 197  : 		return (Remove(data) ? data : (T*)NULL);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Remove_Tai
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN5@Remove_Tai
$LN4@Remove_Tai:
	mov	DWORD PTR tv76[ebp], 0
$LN5@Remove_Tai:
	mov	eax, DWORD PTR tv76[ebp]
$LN2@Remove_Tai:

; 198  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_data$ = -12						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Remove_Hea

; 175  : 		{
; 176  : 			return ((T* )NULL);

	xor	eax, eax
	jmp	$LN3@Remove_Hea
$LN2@Remove_Hea:

; 177  : 		}
; 178  : 		SLNode<T> *temp = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 179  : 		HeadNode = HeadNode->Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 180  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Hea

; 181  : 		{
; 182  : 			TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@Remove_Hea:

; 183  : 		}
; 184  : 		T *data = temp->Data();

	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	mov	DWORD PTR _data$[ebp], eax

; 185  : 		delete temp;

	push	OFFSET ??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	185					; 000000b9H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Remove_Hea
	xor	ecx, ecx
	jne	SHORT $LN5@Remove_Hea
	push	185					; 000000b9H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Remove_Hea:
	jmp	SHORT $LN7@Remove_Hea
$LN6@Remove_Hea:
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN7@Remove_Hea:

; 186  : 		return data;

	mov	eax, DWORD PTR _data$[ebp]
$LN3@Remove_Hea:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
_cur$1 = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail, COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@Add_Tail

; 161  : 		{
; 162  : 			return false;

	xor	al, al
	jmp	SHORT $LN5@Add_Tail
$LN4@Add_Tail:

; 163  : 		}
; 164  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next()) 

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$1[ebp], ecx
	jmp	SHORT $LN3@Add_Tail
$LN2@Add_Tail:
	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$1[ebp], eax
$LN3@Add_Tail:
	cmp	DWORD PTR _cur$1[ebp], 0
	je	SHORT $LN1@Add_Tail

; 165  : 		{
; 166  : 			Add_Tail(cur->Data());

	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 167  : 		}

	jmp	SHORT $LN2@Add_Tail
$LN1@Add_Tail:

; 168  : 		return true;

	mov	al, 1
$LN5@Add_Tail:

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		if (data == NULL)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN3@Add_Tail

; 141  : 		{
; 142  : 			return false;

	xor	al, al
	jmp	$LN4@Add_Tail
$LN3@Add_Tail:

; 143  : 		}
; 144  : 		SLNode<T> *temp = new SLNode<T> (data);

	push	OFFSET ??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@
	push	144					; 00000090H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@Add_Tail
	xor	ecx, ecx
	jne	SHORT $LN6@Add_Tail
	push	144					; 00000090H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Add_Tail:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN10@Add_Tail
$LN9@Add_Tail:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@Add_Tail
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN8@Add_Tail
$LN7@Add_Tail:
	mov	DWORD PTR tv82[ebp], 0
$LN8@Add_Tail:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN10@Add_Tail:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 145  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Add_Tail

; 146  : 		{
; 147  : 			HeadNode = TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx+4], eax

; 148  : 		}
; 149  : 		else

	jmp	SHORT $LN1@Add_Tail
$LN2@Add_Tail:

; 150  : 		{
; 151  : 			TailNode->Set_Next(temp);

	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 152  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Tail:

; 153  : 		}
; 154  : 		return true;

	mov	al, 1
$LN4@Add_Tail:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
tv90 = -92						; size = 4
tv92 = -88						; size = 4
$T1 = -84						; size = 4
_temp$2 = -16						; size = 4
_cur$3 = -12						; size = 4
_addpoint$ = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@Add_Head

; 115  : 		{
; 116  : 			return false;

	xor	al, al
	jmp	$LN7@Add_Head
$LN6@Add_Head:

; 117  : 		}
; 118  : 		SLNode<T> *addpoint = NULL;

	mov	DWORD PTR _addpoint$[ebp], 0

; 119  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next())

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$3[ebp], ecx
	jmp	SHORT $LN5@Add_Head
$LN4@Add_Head:
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$3[ebp], eax
$LN5@Add_Head:
	cmp	DWORD PTR _cur$3[ebp], 0
	je	$LN3@Add_Head

; 120  : 		{
; 121  : 			if (addpoint)

	cmp	DWORD PTR _addpoint$[ebp], 0
	je	$LN2@Add_Head

; 122  : 			{
; 123  : 				SLNode<T> *temp = new SLNode<T>(cur->Data());

	push	OFFSET ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
	push	123					; 0000007bH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN12@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN9@Add_Head
	push	123					; 0000007bH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Add_Head:
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN13@Add_Head
$LN12@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN10@Add_Head
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN11@Add_Head
$LN10@Add_Head:
	mov	DWORD PTR tv90[ebp], 0
$LN11@Add_Head:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv92[ebp], eax
$LN13@Add_Head:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _temp$2[ebp], ecx

; 124  : 				temp->Set_Next(addpoint->Next());

	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 125  : 				addpoint->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 126  : 				addpoint = temp;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR _addpoint$[ebp], eax

; 127  : 			}
; 128  : 			else

	jmp	SHORT $LN1@Add_Head
$LN2@Add_Head:

; 129  : 			{
; 130  : 				Add_Head(cur->Data());

	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 131  : 				addpoint = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _addpoint$[ebp], ecx
$LN1@Add_Head:

; 132  : 			}
; 133  : 		}

	jmp	$LN4@Add_Head
$LN3@Add_Head:

; 134  : 		return true;

	mov	al, 1
$LN7@Add_Head:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head, COMDAT
; _this$ = ecx

; 96   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		if (!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN2@Add_Head

; 98   : 		{
; 99   : 			return false;

	xor	al, al
	jmp	$LN3@Add_Head
$LN2@Add_Head:

; 100  : 		}
; 101  : 		SLNode<T> *temp	= new SLNode<T>(data);

	push	OFFSET ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
	push	101					; 00000065H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN5@Add_Head
	push	101					; 00000065H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Add_Head:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN9@Add_Head
$LN8@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Add_Head
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN7@Add_Head
$LN6@Add_Head:
	mov	DWORD PTR tv82[ebp], 0
$LN7@Add_Head:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN9@Add_Head:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 102  : 		temp->Set_Next(HeadNode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 103  : 		HeadNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 104  : 		if (!TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@Add_Head

; 105  : 		{
; 106  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Head:

; 107  : 		}
; 108  : 		return true;

	mov	al, 1
$LN3@Add_Head:

; 109  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 90   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@

; 91   : 		Remove_All();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 86   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 87   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EJFW_Key_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EJFW_Key_Hook_Base@@UAEPAXI@Z PROC			; JFW_Key_Hook_Base::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1JFW_Key_Hook_Base@@UAE@XZ	; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EJFW_Key_Hook_Base@@UAEPAXI@Z ENDP			; JFW_Key_Hook_Base::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GJFW_Key_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJFW_Key_Hook_Base@@UAEPAXI@Z PROC			; JFW_Key_Hook_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJFW_Key_Hook_Base@@UAEPAXI@Z ENDP			; JFW_Key_Hook_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z PROC		; JFW_Key_Hook_Base::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z ENDP		; JFW_Key_Hook_Base::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0JFW_Key_Hook_Base@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0JFW_Key_Hook_Base@@QAE@ABV0@@Z PROC			; JFW_Key_Hook_Base::JFW_Key_Hook_Base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Key_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0JFW_Key_Hook_Base@@QAE@ABV0@@Z ENDP			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_tt.h
;	COMDAT ??0JFW_Key_Hook_Base@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0JFW_Key_Hook_Base@@QAE@XZ PROC			; JFW_Key_Hook_Base::JFW_Key_Hook_Base, COMDAT
; _this$ = ecx

; 491  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Key_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 492  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0JFW_Key_Hook_Base@@QAE@XZ ENDP			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0GenericSLNode@@IAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0GenericSLNode@@IAE@PAX@Z PROC			; GenericSLNode::GenericSLNode, COMDAT
; _this$ = ecx

; 37   : 	GenericSLNode(void *obj)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 		NodeData = obj;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 40   : 		NodeNext = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 41   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0GenericSLNode@@IAE@PAX@Z ENDP			; GenericSLNode::GenericSLNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z PROC ; AutoPoolClass<GenericSLNode,256>::operator delete, COMDAT

; 1485 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1486 : 		if (object)

	cmp	DWORD PTR _object$[ebp], 0
	je	SHORT $LN2@operator

; 1487 : 			objectPoolClass(T, nAlign).Free_Object_Memory(*(T*)object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
	mov	ecx, eax
	call	?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
$LN2@operator:

; 1488 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ENDP ; AutoPoolClass<GenericSLNode,256>::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_file$ = 12						; size = 4
_line$ = 16						; size = 4
_function$ = 20						; size = 4
??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z PROC ; AutoPoolClass<GenericSLNode,256>::operator new, COMDAT

; 1479 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN3@operator:

; 1480 : 		TT_ASSERT(size == sizeof(T));

	xor	eax, eax
	jne	SHORT $LN3@operator
	cmp	DWORD PTR _size$[ebp], 8
	je	SHORT $LN1@operator
	int	3
$LN1@operator:

; 1481 : 		return (void*)objectPoolClass(T, nAlign).Allocate_Object_Memory();

	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
	mov	ecx, eax
	call	?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory

; 1482 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ENDP ; AutoPoolClass<GenericSLNode,256>::operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\smartgameobj.h
;	COMDAT ?Is_Enemy_Seen_Enabled@SmartGameObj@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Enemy_Seen_Enabled@SmartGameObj@@QAE_NXZ PROC	; SmartGameObj::Is_Enemy_Seen_Enabled, COMDAT
; _this$ = ecx

; 82   : 	bool	Is_Enemy_Seen_Enabled( void )				{ return IsEnemySeenEnabled; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+2404]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Enemy_Seen_Enabled@SmartGameObj@@QAE_NXZ ENDP	; SmartGameObj::Is_Enemy_Seen_Enabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\smartgameobj.h
;	COMDAT ?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ PROC	; SmartGameObj::Get_Action, COMDAT
; _this$ = ecx

; 70   : 	ActionClass			*Get_Action( void )						{ return &Action; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2124				; 0000084cH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ ENDP	; SmartGameObj::Get_Action
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
_Return$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ PROC	; PhysicalGameObj::Get_Position, COMDAT
; _this$ = ecx

; 47   : 	SCRIPTS_API Vector3 Get_Position() { Vector3 Return; Peek_Physical_Object()->Get_Position(&Return); return Return; }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR _Return$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	lea	eax, DWORD PTR _Return$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Get_Position@PhysClass@@QBEXPAVVector3@@@Z ; PhysClass::Get_Position
	lea	eax, DWORD PTR _Return$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ ENDP	; PhysicalGameObj::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ PROC ; PhysicalGameObj::Peek_Physical_Object, COMDAT
; _this$ = ecx

; 40   : 	inline PhysClass *	Peek_Physical_Object( void ) const { return PhysObj; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1908]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ENDP ; PhysicalGameObj::Peek_Physical_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physclass.h
;	COMDAT ?Get_Position@PhysClass@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_pos$ = 8						; size = 4
?Get_Position@PhysClass@@QBEXPAVVector3@@@Z PROC	; PhysClass::Get_Position, COMDAT
; _this$ = ecx

; 73   : 	void								Get_Position(Vector3 * set_pos) const	{ Get_Transform().Get_Translation(set_pos); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _set_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	ecx, eax
	call	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ; Matrix3D::Get_Translation
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Position@PhysClass@@QBEXPAVVector3@@@Z ENDP	; PhysClass::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4LineSegClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4LineSegClass@@QAEAAV0@ABV0@@Z PROC			; LineSegClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4LineSegClass@@QAEAAV0@ABV0@@Z ENDP			; LineSegClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0LineSegClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0LineSegClass@@QAE@ABV0@@Z PROC			; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LineSegClass@@QAE@ABV0@@Z ENDP			; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?recalculate@LineSegClass@@IAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
?recalculate@LineSegClass@@IAEXXZ PROC			; LineSegClass::recalculate, COMDAT
; _this$ = ecx

; 81   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 		DP = P1 - P0;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??G@YA?AVVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 83   : 		Dir = DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 84   : 		Dir.Normalize();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Normalize@Vector3@@QAEXXZ		; Vector3::Normalize

; 85   : 		Length = DP.Length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Length@Vector3@@QBEMXZ			; Vector3::Length
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+48]

; 86   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?recalculate@LineSegClass@@IAEXXZ ENDP			; LineSegClass::recalculate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_set$ = 12						; size = 4
?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z PROC	; LineSegClass::Compute_Point, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		Vector3::Add(P0,t*DP,set);

	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 76   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z ENDP	; LineSegClass::Compute_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_Length@LineSegClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Length@LineSegClass@@QBEMXZ PROC			; LineSegClass::Get_Length, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return Length;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@LineSegClass@@QBEMXZ ENDP			; LineSegClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_Dir@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Dir@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_Dir, COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return Dir;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Dir@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_Dir
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_DP@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_DP@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_DP, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		return DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H

; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_DP@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_DP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_P1@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_P1@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_P1, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		return P1;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 60   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_P1@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_P1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_P0@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_P0@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_P0, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return P0;

	mov	eax, DWORD PTR _this$[ebp]

; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_P0@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_P0
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Set@LineSegClass@@QAEXABVVector3@@0M@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_dir$ = 12						; size = 4
_l$ = 16						; size = 4
?Set@LineSegClass@@QAEXABVVector3@@0M@Z PROC		; LineSegClass::Set, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		DP = dir * l;

	push	ecx
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 46   : 		P0 = p0;

	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 47   : 		P1 = p0 + DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _p0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??H@YA?AVVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 48   : 		Dir = dir;

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 49   : 		Length = l;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@LineSegClass@@QAEXABVVector3@@0M@Z ENDP		; LineSegClass::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Set@LineSegClass@@QAEXABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
?Set@LineSegClass@@QAEXABVVector3@@0@Z PROC		; LineSegClass::Set, COMDAT
; _this$ = ecx

; 38   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		P0 = p0;

	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 		P1 = p1;

	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 41   : 		recalculate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?recalculate@LineSegClass@@IAEXXZ	; LineSegClass::recalculate

; 42   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@LineSegClass@@QAEXABVVector3@@0@Z ENDP		; LineSegClass::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
_tm$ = 12						; size = 4
??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 33   : 	LineSegClass(const LineSegClass & that,const Matrix3D & tm)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 34   : 	{
; 35   : 		Set(that,tm);

	mov	eax, DWORD PTR _tm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _that$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@LineSegClass@@QAEXABV1@ABVMatrix3D@@@Z ; LineSegClass::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABVVector3@@0M@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_dir$ = 12						; size = 4
_l$ = 16						; size = 4
??0LineSegClass@@QAE@ABVVector3@@0M@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 29   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 30   : 		DP = Dir * Length;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??D@YA?AVVector3@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 31   : 		P1 = P0 + DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??H@YA?AVVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0LineSegClass@@QAE@ABVVector3@@0M@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
??0LineSegClass@@QAE@ABVVector3@@0@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 25   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 26   : 		recalculate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?recalculate@LineSegClass@@IAEXXZ	; LineSegClass::recalculate

; 27   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0LineSegClass@@QAE@ABVVector3@@0@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LineSegClass@@QAE@XZ PROC				; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 21   : 	LineSegClass(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 22   : 	{
; 23   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0LineSegClass@@QAE@XZ ENDP				; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\basegameobj.h
;	COMDAT ?Get_ID@BaseGameObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@BaseGameObj@@QBEHXZ PROC			; BaseGameObj::Get_ID, COMDAT
; _this$ = ecx

; 51   :     int                         Get_ID() const { return Get_Network_ID(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Get_Network_ID@NetworkObjectClass@@QBEHXZ ; NetworkObjectClass::Get_Network_ID
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@BaseGameObj@@QBEHXZ ENDP			; BaseGameObj::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referenceableclass.h
;	COMDAT ?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ PROC ; ReferenceableClass<ScriptableGameObj>::Get_Data, COMDAT
; _this$ = ecx

; 30   : 	T * Get_Data( void ) const	{ return ReferenceData; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ENDP ; ReferenceableClass<ScriptableGameObj>::Get_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EReferencerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EReferencerClass@@UAEPAXI@Z PROC			; ReferencerClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ReferencerClass@@UAE@XZ	; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EReferencerClass@@UAEPAXI@Z ENDP			; ReferencerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GReferencerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GReferencerClass@@UAEPAXI@Z PROC			; ReferencerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GReferencerClass@@UAEPAXI@Z ENDP			; ReferencerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ReferencerClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ReferencerClass@@QAE@ABV0@@Z PROC			; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ReferencerClass@@QAE@ABV0@@Z ENDP			; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z PROC ; ReferencerClass::Set_Ptr, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		*this = object;

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z ENDP ; ReferencerClass::Set_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ PROC ; ReferencerClass::Get_Ptr, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return ReferenceTarget ? ReferenceTarget->Get_Data() : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Get_Ptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ; ReferenceableClass<ScriptableGameObj>::Get_Data
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@Get_Ptr
$LN3@Get_Ptr:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Get_Ptr:
	mov	eax, DWORD PTR tv69[ebp]

; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ENDP ; ReferencerClass::Get_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z PROC	; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 49   : 		*this = object;

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 50   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z ENDP	; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??0ReferencerClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ReferencerClass@@QAE@XZ PROC				; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ReferencerClass@@QAE@XZ ENDP				; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??CReferencerClass@@QAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??CReferencerClass@@QAEPAVScriptableGameObj@@XZ PROC	; ReferencerClass::operator->, COMDAT
; _this$ = ecx

; 37   : 	inline ScriptableGameObj* operator ->() { return Get_Ptr(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ENDP	; ReferencerClass::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1PostLoadableClass@@UAE@XZ	; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4PostLoadableClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z PROC		; PostLoadableClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z ENDP		; PostLoadableClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0PostLoadableClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0PostLoadableClass@@QAE@ABV0@@Z PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0PostLoadableClass@@QAE@ABV0@@Z ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_onoff$ = 8						; size = 1
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z PROC ; PostLoadableClass::Set_Post_Load_Registered, COMDAT
; _this$ = ecx

; 22   : 	void									Set_Post_Load_Registered(bool onoff)	{ IsPostLoadRegistered = onoff; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _onoff$[ebp]
	mov	BYTE PTR [eax+4], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ENDP ; PostLoadableClass::Set_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ PROC ; PostLoadableClass::Is_Post_Load_Registered, COMDAT
; _this$ = ecx

; 21   : 	bool									Is_Post_Load_Registered(void) const				{ return IsPostLoadRegistered; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ENDP ; PostLoadableClass::Is_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?On_Post_Load@PostLoadableClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?On_Post_Load@PostLoadableClass@@UAEXXZ PROC		; PostLoadableClass::On_Post_Load, COMDAT
; _this$ = ecx

; 20   : 	virtual void						On_Post_Load (void)							{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?On_Post_Load@PostLoadableClass@@UAEXXZ ENDP		; PostLoadableClass::On_Post_Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??1PostLoadableClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PostLoadableClass@@UAE@XZ PROC			; PostLoadableClass::~PostLoadableClass, COMDAT
; _this$ = ecx

; 19   : 	virtual ~PostLoadableClass(void)													{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1PostLoadableClass@@UAE@XZ ENDP			; PostLoadableClass::~PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??0PostLoadableClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PostLoadableClass@@QAE@XZ PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx

; 18   : 	PostLoadableClass(void) : IsPostLoadRegistered(false)						{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PostLoadableClass@@QAE@XZ ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4SysTimeClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SysTimeClass@@QAEAAV0@ABV0@@Z PROC			; SysTimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4SysTimeClass@@QAEAAV0@ABV0@@Z ENDP			; SysTimeClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Inverse@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
tv222 = -188						; size = 4
tv272 = -184						; size = 4
tv212 = -180						; size = 4
$T1 = -176						; size = 12
$T2 = -164						; size = 12
_i1$ = -88						; size = 4
_j$ = -84						; size = 4
_i$ = -80						; size = 4
_b$ = -76						; size = 36
_a$ = -40						; size = 36
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Inverse, COMDAT
; _this$ = ecx

; 309  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 310  : 		Matrix3 a(*this);				// As a evolves from original mat into identity

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3

; 311  : 		Matrix3 b(true);				// b evolves from identity into inverse(a)

	push	1
	lea	ecx, DWORD PTR _b$[ebp]
	call	??0Matrix3@@QAE@_N@Z			; Matrix3::Matrix3

; 312  : 		int i, j, i1;
; 313  : 
; 314  : 		// Loop over cols of a from left to right, eliminating above and below diagonal
; 315  : 		for (j=0; j<3; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@Inverse
$LN11@Inverse:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@Inverse:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN10@Inverse

; 316  : 
; 317  : 			// Find largest pivot in column j among rows j..3
; 318  : 			i1 = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i1$[ebp], eax

; 319  : 			for (i=j+1; i<3; i++) {

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@Inverse
$LN8@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN7@Inverse

; 320  : 				if (WWMath::Fabs(a[i][j]) > WWMath::Fabs(a[i1][j])) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv212[ebp]
	movss	xmm0, DWORD PTR tv212[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv222[ebp]
	movss	xmm0, DWORD PTR tv272[ebp]
	comiss	xmm0, DWORD PTR tv222[ebp]
	jbe	SHORT $LN6@Inverse

; 321  : 					i1 = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i1$[ebp], eax
$LN6@Inverse:

; 322  : 				}
; 323  : 			}

	jmp	$LN8@Inverse
$LN7@Inverse:

; 324  : 
; 325  : 			// Swap rows i1 and j in a and b to put pivot on diagonal
; 326  : 			Swap(a.Row[i1], a.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _a$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 327  : 			Swap(b.Row[i1], b.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _b$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 328  : 
; 329  : 			// Scale row j to have a unit diagonal
; 330  : 			if (a[j][j]==0.) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]

; 331  : 				//Matrix3::inverse: singular matrix; can't invert
; 332  : 			}
; 333  : 			b.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 334  : 			a.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 335  : 
; 336  : 			// Eliminate off-diagonal elems in col j of a, doing identical ops to b
; 337  : 			for (i=0; i<3; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Inverse
$LN3@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN2@Inverse

; 338  : 				if (i != j) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	je	$LN1@Inverse

; 339  : 					b.Row[i] -= a[i][j] * b.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 340  : 					a.Row[i] -= a[i][j] * a.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
$LN1@Inverse:

; 341  : 				}
; 342  : 			}

	jmp	$LN3@Inverse
$LN2@Inverse:

; 343  : 		}

	jmp	$LN11@Inverse
$LN10@Inverse:

; 344  : 		return b;

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 345  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
tv86 = -80						; size = 4
_j$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_extent$ = 8						; size = 4
_new_extent$ = 12					; size = 4
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_AABox_Extent, COMDAT
; _this$ = ecx

; 298  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 		for (int i=0; i<3; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@Rotate_AAB
$LN5@Rotate_AAB:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@Rotate_AAB:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	$LN4@Rotate_AAB

; 300  : 		{
; 301  : 			(*new_extent)[i] = 0.0f;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 302  : 			for (int j=0; j<3; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN3@Rotate_AAB
$LN2@Rotate_AAB:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN3@Rotate_AAB:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	SHORT $LN1@Rotate_AAB

; 303  : 			{
; 304  : 				(*new_extent)[i] += WWMath::Fabs(Row[i][j] * extent[j]);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _j$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _extent$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR tv137[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 305  : 			}

	jmp	SHORT $LN2@Rotate_AAB
$LN1@Rotate_AAB:

; 306  : 		}

	jmp	$LN5@Rotate_AAB
$LN4@Rotate_AAB:

; 307  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_AABox_Extent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Transpose_Rotate_Vector, COMDAT

; 283  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 284  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 285  : 		Vector3 * v;
; 286  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transpose_

; 287  : 		{
; 288  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 289  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 290  : 		} else {

	jmp	SHORT $LN1@Transpose_
$LN2@Transpose_:

; 291  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transpose_:

; 292  : 		}
; 293  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 294  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 295  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 296  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Transpose_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_Vector, COMDAT

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 267  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 268  : 		Vector3 * v;
; 269  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 270  : 		{
; 271  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 272  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 273  : 		}
; 274  : 		else

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 275  : 		{
; 276  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 277  : 		}
; 278  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 279  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 280  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Subtract@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z PROC		; Matrix3::Subtract, COMDAT

; 257  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 258  : 		Vector3::Subtract(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 259  : 		Vector3::Subtract(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 260  : 		Vector3::Subtract(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 261  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z ENDP		; Matrix3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Add@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Add@Matrix3@@SAXABV1@0PAV1@@Z PROC			; Matrix3::Add, COMDAT

; 251  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 252  : 		Vector3::Add(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 253  : 		Vector3::Add(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 254  : 		Vector3::Add(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 255  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Matrix3@@SAXABV1@0PAV1@@Z ENDP			; Matrix3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z
_TEXT	SEGMENT
tv246 = -88						; size = 4
tv244 = -84						; size = 4
tv242 = -80						; size = 4
tv240 = -76						; size = 4
tv238 = -72						; size = 4
tv236 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z PROC		; operator*, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 399  : 	return Vector3(
; 400  : 		a[0][0] * v[0] + a[0][1] * v[1] + a[0][2] * v[2],
; 401  : 		a[1][0] * v[0] + a[1][1] * v[1] + a[1][2] * v[2],
; 402  : 		a[2][0] * v[0] + a[2][1] * v[1] + a[2][2] * v[2] 
; 403  : 	);

	push	0
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv236[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv236[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv238[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv238[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv240[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv242[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv242[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv244[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv246[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv246[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 404  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z ENDP		; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 234  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		set_z->Set(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 236  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 		set_y->Set(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 232  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 226  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 		set_x->Set(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 228  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 222  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 		return Vector3(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 		return Vector3(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 220  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 214  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 		return Vector3(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Z_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Z_Rotation, COMDAT
; _this$ = ecx

; 209  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		Vector3 v = (*this) * Vector3(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 211  : 		return atan2(v[1],v[0]);

	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 212  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Z_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Y_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Y_Rotation, COMDAT
; _this$ = ecx

; 204  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 		Vector3 v = (*this) * Vector3(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 206  : 		return atan2(v[0],v[2]);

	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 207  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Y_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_X_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_X_Rotation, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		Vector3 v = (*this) * Vector3(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 201  : 		return atan2(v[2], v[1]);

	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 202  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_X_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		float tmp1,tmp2;
; 188  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 189  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 190  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 191  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 192  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 193  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 194  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 195  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 196  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		Rotate_Z(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Z@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Z

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 169  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		float tmp1,tmp2;
; 171  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 172  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 173  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 174  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 175  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 176  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 177  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 178  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 180  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		Rotate_Y(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Y@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Y

; 167  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		float tmp1,tmp2;
; 154  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 155  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 156  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 157  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 158  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 159  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 160  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 161  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 162  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 163  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		Rotate_X(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_X@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_X

; 150  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Make_Identity@Matrix3@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3@@QAEXXZ PROC			; Matrix3::Make_Identity, COMDAT
; _this$ = ecx

; 142  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		Row[0].Set(1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 144  : 		Row[1].Set(0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 145  : 		Row[2].Set(0.0f,0.0f,1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 146  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3@@QAEXXZ ENDP			; Matrix3::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??_0Matrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator/=, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		Row[0] /= d; Row[1] /= d; Row[2] /= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 139  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??XMatrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator*=, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=

; 134  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??ZMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator-=, COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 129  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 130  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??YMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator+=, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 124  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??4Matrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator=, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 117  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 118  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Determinant@Matrix3@@QBEMXZ
_TEXT	SEGMENT
tv243 = -92						; size = 4
tv255 = -88						; size = 4
tv253 = -84						; size = 4
tv251 = -80						; size = 4
tv249 = -76						; size = 4
tv247 = -72						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix3@@QBEMXZ PROC			; Matrix3::Determinant, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return   Row[0][0] * (Row[1][1] * Row[2][2] - Row[1][2] * Row[2][1])
; 111  : 				- Row[0][1] * (Row[1][0] * Row[2][2] - Row[1][2] * Row[2][0])
; 112  : 				- Row[0][2] * (Row[1][0] * Row[2][1] - Row[1][1] * Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv247[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm1
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv251[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv249[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv255[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv253[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR tv243[ebp], xmm0
	fld	DWORD PTR tv243[ebp]

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix3@@QBEMXZ ENDP			; Matrix3::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -104						; size = 12
$T2 = -92						; size = 12
$T3 = -80						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Transpose, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 		return Matrix3(
; 103  : 				Vector3(Row[0][0], Row[1][0], Row[2][0]),
; 104  : 				Vector3(Row[0][1], Row[1][1], Row[2][1]),
; 105  : 				Vector3(Row[0][2], Row[1][2], Row[2][2])
; 106  : 		);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABVVector3@@00@Z	; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QBEABVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QBEABVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 99   : 	TT_INLINE const Vector3 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QBEABVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QAEAAVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QAEAAVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 98   : 	TT_INLINE Vector3 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QAEAAVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv359 = -80						; size = 4
tv353 = -80						; size = 4
tv347 = -80						; size = 4
tv357 = -76						; size = 4
tv351 = -76						; size = 4
tv345 = -76						; size = 4
tv355 = -72						; size = 4
tv349 = -72						; size = 4
tv343 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@MM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Row[0].Set(
; 82   : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 83   : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 84   : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s)
; 85   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv343[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv343[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv345[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv345[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv347[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv347[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 86   : 		Row[1].Set(
; 87   : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 88   : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 89   : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s)
; 90   : 		);

	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv349[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv349[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv351[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv351[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv353[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv353[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 91   : 	Row[2].Set(
; 92   : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 93   : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 94   : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2]))
; 95   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv355[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv355[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv357[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv357[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv359[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv359[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@MM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3@@QAEXABVVector3@@M@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Set(axis,sinf(angle),cosf(angle));

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3@@QAEXABVVector3@@M@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
?Set@Matrix3@@QAEXMMMMMMMMM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 72   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 73   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 74   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Set@Matrix3@@QAEXMMMMMMMMM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@00@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 64   : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 66   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 67   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@00@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVQuaternion@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
??0Matrix3@@QAE@ABVQuaternion@@@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE Matrix3(const Quaternion & q)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		this->Set(q);

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVQuaternion@@@Z	; Matrix3::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABVQuaternion@@@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s_angle$ = 12						; size = 4
_c_angle$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@MM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float s_angle,float c_angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{ 
; 55   : 		Set(axis,s_angle,c_angle); 

	push	ecx
	movss	xmm0, DWORD PTR _c_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3@@QAE@ABVVector3@@M@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{ 
; 51   : 		Set(axis,angle); 

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@M@Z	; Matrix3::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3@@QAE@ABVVector3@@M@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
??0Matrix3@@QAE@MMMMMMMMM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 43   : 	TT_INLINE explicit Matrix3(float m11,float m12,float m13,float m21,float m22,float m23,float m31,float m32,float m33)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 44   : 	{
; 45   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 46   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 47   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0Matrix3@@QAE@MMMMMMMMM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@00@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE explicit Matrix3(const Vector3 & v0, const Vector3 & v1, const Vector3 & v2)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 36   : 	{ 
; 37   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 38   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 39   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@00@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix3@@QAE@_N@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE explicit Matrix3(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 27   : 	{
; 28   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	$LN1@Matrix3

; 29   : 		{
; 30   : 			Row[0].Set(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 31   : 			Row[1].Set(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 32   : 			Row[2].Set(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
$LN1@Matrix3:

; 33   : 		}
; 34   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@_N@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3@@QAE@ABV0@@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix3(const Matrix3 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 25   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABV0@@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix3@@QAE@XZ PROC					; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 21   : 	TT_INLINE Matrix3(void) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix3@@QAE@XZ ENDP					; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z
_TEXT	SEGMENT
tv342 = -96						; size = 4
tv336 = -96						; size = 4
tv330 = -96						; size = 4
tv324 = -96						; size = 4
tv340 = -92						; size = 4
tv334 = -92						; size = 4
tv328 = -92						; size = 4
tv322 = -92						; size = 4
tv338 = -88						; size = 4
tv332 = -88						; size = 4
tv326 = -88						; size = 4
tv320 = -88						; size = 4
_v$ = -20						; size = 4
_tmp$ = -16						; size = 16
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 227  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 228  : 		Vector4 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector4@@QAE@XZ			; Vector4::Vector4

; 229  : 		Vector4 * v;
; 230  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 231  : 		{
; 232  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 233  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 234  : 		}
; 235  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 236  : 		{
; 237  : 			v = (Vector4 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 238  : 		}
; 239  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3] * v->W);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv320[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv320[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv322[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv322[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv324[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv324[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax], xmm1

; 240  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3] * v->W);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv326[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv326[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv328[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv328[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv330[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv330[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 241  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3] * v->W);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv332[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv332[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv334[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv334[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv336[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv336[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 242  : 		out->W = (A[3][0] * v->X + A[3][1] * v->Y + A[3][2] * v->Z + A[3][3] * v->W);

	push	0
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv338[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv338[ebp]
	addss	xmm1, xmm0
	push	2
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv340[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv340[ebp]
	addss	xmm1, xmm0
	push	3
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv342[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv342[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 243  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z
_TEXT	SEGMENT
tv265 = -76						; size = 4
tv259 = -76						; size = 4
tv253 = -76						; size = 4
tv263 = -72						; size = 4
tv257 = -72						; size = 4
tv251 = -72						; size = 4
tv261 = -68						; size = 4
tv255 = -68						; size = 4
tv249 = -68						; size = 4
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 220  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 221  : 		out->X = (A[0][0] * in.X + A[0][1] * in.Y + A[0][2] * in.Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv249[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv251[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv251[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv253[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 222  : 		out->Y = (A[1][0] * in.X + A[1][1] * in.Y + A[1][2] * in.Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv255[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv257[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv257[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv259[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv259[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 223  : 		out->Z = (A[2][0] * in.X + A[2][1] * in.Y + A[2][2] * in.Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv261[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv261[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv263[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv263[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv265[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv265[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 224  : 		out->W = 1.0f;

	mov	eax, DWORD PTR _out$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 225  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 204  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 205  : 		Vector3 *v;
; 206  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 207  : 		{
; 208  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 209  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 210  : 		}
; 211  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 212  : 		{
; 213  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 214  : 		}
; 215  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 216  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 217  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 218  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??_0Matrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_ood$ = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator/=, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 		float ood = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _ood$[ebp], xmm0

; 179  : 		Row[0] *= ood; Row[1] *= ood; Row[2] *= ood; Row[3] *= ood;

	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 180  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 181  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??XMatrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator*=, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; Row[3] *= d;

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 174  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 175  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??ZMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator-=, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; Row[3] -= m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 169  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??YMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator+=, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; Row[3] += m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=

; 164  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 165  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??4Matrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 159  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Inverse@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
_t$ = -72						; size = 64
_s$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Inverse, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		float s = Determinant();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Determinant@Matrix4@@QBEMXZ		; Matrix4::Determinant
	fstp	DWORD PTR _s$[ebp]

; 135  : 		if (s == 0.0) return Matrix4();

	cvtss2sd xmm0, DWORD PTR _s$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Inverse
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN2@Inverse
$LN1@Inverse:

; 136  : 		s = 1/s;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _s$[ebp], xmm0

; 137  : 		Matrix4 t;

	lea	ecx, DWORD PTR _t$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4

; 138  : 		t.Row[0].X = s*(Row[1].Y*(Row[2].Z*Row[3].W - Row[2].W*Row[3].Z) + Row[1].Z*(Row[2].W*Row[3].Y - Row[2].Y*Row[3].W) + Row[1].W*(Row[2].Y*Row[3].Z - Row[2].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 139  : 		t.Row[0].Y = s*(Row[2].Y*(Row[0].Z*Row[3].W - Row[0].W*Row[3].Z) + Row[2].Z*(Row[0].W*Row[3].Y - Row[0].Y*Row[3].W) + Row[2].W*(Row[0].Y*Row[3].Z - Row[0].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 140  : 		t.Row[0].Z = s*(Row[3].Y*(Row[0].Z*Row[1].W - Row[0].W*Row[1].Z) + Row[3].Z*(Row[0].W*Row[1].Y - Row[0].Y*Row[1].W) + Row[3].W*(Row[0].Y*Row[1].Z - Row[0].Z*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 141  : 		t.Row[0].W = s*(Row[0].Y*(Row[1].W*Row[2].Z - Row[1].Z*Row[2].W) + Row[0].Z*(Row[1].Y*Row[2].W - Row[1].W*Row[2].Y) + Row[0].W*(Row[1].Z*Row[2].Y - Row[1].Y*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 142  : 		t.Row[1].X = s*(Row[1].Z*(Row[2].X*Row[3].W - Row[2].W*Row[3].X) + Row[1].W*(Row[2].Z*Row[3].X - Row[2].X*Row[3].Z) + Row[1].X*(Row[2].W*Row[3].Z - Row[2].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 143  : 		t.Row[1].Y = s*(Row[2].Z*(Row[0].X*Row[3].W - Row[0].W*Row[3].X) + Row[2].W*(Row[0].Z*Row[3].X - Row[0].X*Row[3].Z) + Row[2].X*(Row[0].W*Row[3].Z - Row[0].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 144  : 		t.Row[1].Z = s*(Row[3].Z*(Row[0].X*Row[1].W - Row[0].W*Row[1].X) + Row[3].W*(Row[0].Z*Row[1].X - Row[0].X*Row[1].Z) + Row[3].X*(Row[0].W*Row[1].Z - Row[0].Z*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 145  : 		t.Row[1].W = s*(Row[0].Z*(Row[1].W*Row[2].X - Row[1].X*Row[2].W) + Row[0].W*(Row[1].X*Row[2].Z - Row[1].Z*Row[2].X) + Row[0].X*(Row[1].Z*Row[2].W - Row[1].W*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 146  : 		t.Row[2].X = s*(Row[1].W*(Row[2].X*Row[3].Y - Row[2].Y*Row[3].X) + Row[1].X*(Row[2].Y*Row[3].W - Row[2].W*Row[3].Y) + Row[1].Y*(Row[2].W*Row[3].X - Row[2].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 147  : 		t.Row[2].Y = s*(Row[2].W*(Row[0].X*Row[3].Y - Row[0].Y*Row[3].X) + Row[2].X*(Row[0].Y*Row[3].W - Row[0].W*Row[3].Y) + Row[2].Y*(Row[0].W*Row[3].X - Row[0].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 148  : 		t.Row[2].Z = s*(Row[3].W*(Row[0].X*Row[1].Y - Row[0].Y*Row[1].X) + Row[3].X*(Row[0].Y*Row[1].W - Row[0].W*Row[1].Y) + Row[3].Y*(Row[0].W*Row[1].X - Row[0].X*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 149  : 		t.Row[2].W = s*(Row[0].W*(Row[1].Y*Row[2].X - Row[1].X*Row[2].Y) + Row[0].X*(Row[1].W*Row[2].Y - Row[1].Y*Row[2].W) + Row[0].Y*(Row[1].X*Row[2].W - Row[1].W*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 150  : 		t.Row[3].X = s*(Row[1].X*(Row[2].Z*Row[3].Y - Row[2].Y*Row[3].Z) + Row[1].Y*(Row[2].X*Row[3].Z - Row[2].Z*Row[3].X) + Row[1].Z*(Row[2].Y*Row[3].X - Row[2].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 151  : 		t.Row[3].Y = s*(Row[2].X*(Row[0].Z*Row[3].Y - Row[0].Y*Row[3].Z) + Row[2].Y*(Row[0].X*Row[3].Z - Row[0].Z*Row[3].X) + Row[2].Z*(Row[0].Y*Row[3].X - Row[0].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 152  : 		t.Row[3].Z = s*(Row[3].X*(Row[0].Z*Row[1].Y - Row[0].Y*Row[1].Z) + Row[3].Y*(Row[0].X*Row[1].Z - Row[0].Z*Row[1].X) + Row[3].Z*(Row[0].Y*Row[1].X - Row[0].X*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 153  : 		t.Row[3].W = s*(Row[0].X*(Row[1].Y*Row[2].Z - Row[1].Z*Row[2].Y) + Row[0].Y*(Row[1].Z*Row[2].X - Row[1].X*Row[2].Z) + Row[0].Z*(Row[1].X*Row[2].Y - Row[1].Y*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 154  : 		return t;

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABV0@@Z			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@Inverse:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Determinant@Matrix4@@QBEMXZ
_TEXT	SEGMENT
_det$ = -8						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix4@@QBEMXZ PROC			; Matrix4::Determinant, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		float det;
; 124  : 		det =	(Row[0].X * Row[1].Y - Row[0].Y * Row[1].X) * (Row[2].Z * Row[3].W - Row[2].W * Row[3].Z);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+8]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR _det$[ebp], xmm0

; 125  : 		det -=	(Row[0].X * Row[1].Z - Row[0].Z * Row[1].X) * (Row[2].Y * Row[3].W - Row[2].W * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 126  : 		det +=	(Row[0].X * Row[1].W - Row[0].W * Row[1].X) * (Row[2].Y * Row[3].Z - Row[2].Z * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 127  : 		det +=	(Row[0].Y * Row[1].Z - Row[0].Z * Row[1].Y) * (Row[2].X * Row[3].W - Row[2].W * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 128  : 		det -=	(Row[0].Y * Row[1].W - Row[0].W * Row[1].Y) * (Row[2].X * Row[3].Z - Row[2].Z * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 129  : 		det +=	(Row[0].Z * Row[1].W - Row[0].W * Row[1].Z) * (Row[2].X * Row[3].Y - Row[2].Y * Row[3].X);		

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+8]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+4]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 130  : 		return det;	

	fld	DWORD PTR _det$[ebp]

; 131  : 	};	

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix4@@QBEMXZ ENDP			; Matrix4::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transpose@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -132						; size = 16
$T2 = -116						; size = 16
$T3 = -100						; size = 16
$T4 = -84						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Transpose, COMDAT
; _this$ = ecx

; 118  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 		return Matrix4(Vector4(Row[0][0], Row[1][0], Row[2][0], Row[3][0]),Vector4(Row[0][1], Row[1][1], Row[2][1], Row[3][1]),Vector4(Row[0][2], Row[1][2], Row[2][2], Row[3][2]),Vector4(Row[0][3], Row[1][3], Row[2][3], Row[3][3]));

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABVVector4@@000@Z	; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QBEABVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 116  : 	TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QBEABVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QAEAAVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 115  : 	TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QAEAAVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv218 = -72						; size = 4
tv216 = -72						; size = 4
tv214 = -72						; size = 4
tv212 = -72						; size = 4
tv210 = -72						; size = 4
tv208 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Perspective, COMDAT
; _this$ = ecx

; 103  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 105  : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv208[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv208[ebp]
	movss	DWORD PTR [eax], xmm0

; 106  : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv210[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv210[ebp]
	movss	DWORD PTR [eax], xmm0

; 107  : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv212[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv212[ebp]
	movss	DWORD PTR [eax], xmm0

; 108  : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv214[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv214[ebp]
	movss	DWORD PTR [eax], xmm0

; 109  : 		Row[2][2] = zfar / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv216[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv216[ebp]
	movss	DWORD PTR [eax], xmm0

; 110  : 		Row[2][3] = (znear * zfar) / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	mulss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	subss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv218[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR [eax], xmm0

; 111  : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 112  : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Perspective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv190 = -72						; size = 4
tv188 = -72						; size = 4
tv186 = -72						; size = 4
tv184 = -72						; size = 4
tv182 = -72						; size = 4
tv180 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z PROC			; Matrix4::Init_Ortho, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 94   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv180[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv180[ebp]
	movss	DWORD PTR [eax], xmm0

; 95   : 		Row[0][3] = (left + right) / (left - right);

	movss	xmm0, DWORD PTR _left$[ebp]
	addss	xmm0, DWORD PTR _right$[ebp]
	movss	xmm1, DWORD PTR _left$[ebp]
	subss	xmm1, DWORD PTR _right$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv182[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv182[ebp]
	movss	DWORD PTR [eax], xmm0

; 96   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv184[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv184[ebp]
	movss	DWORD PTR [eax], xmm0

; 97   : 		Row[1][3] = (top + bottom) / (bottom - top);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _bottom$[ebp]
	subss	xmm1, DWORD PTR _top$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR [eax], xmm0

; 98   : 		Row[2][2] = 1.0f / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv188[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv188[ebp]
	movss	DWORD PTR [eax], xmm0

; 99   : 		Row[2][3] = znear / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv190[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR [eax], xmm0

; 100  : 
; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z ENDP			; Matrix4::Init_Ortho
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv227 = -72						; size = 4
tv225 = -72						; size = 4
tv223 = -72						; size = 4
tv221 = -72						; size = 4
tv219 = -72						; size = 4
tv217 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z PROC	; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 82   : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv217[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv217[ebp]
	movss	DWORD PTR [eax], xmm0

; 83   : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv219[ebp]
	movss	DWORD PTR [eax], xmm0

; 84   : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv221[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv221[ebp]
	movss	DWORD PTR [eax], xmm0

; 85   : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv223[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv223[ebp]
	movss	DWORD PTR [eax], xmm0

; 86   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv225[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv225[ebp]
	movss	DWORD PTR [eax], xmm0

; 87   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv227[ebp]
	movss	DWORD PTR [eax], xmm0

; 88   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 89   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z ENDP	; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z
_TEXT	SEGMENT
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_hfov$ = 8						; size = 4
_vfov$ = 12						; size = 4
_znear$ = 16						; size = 4
_zfar$ = 20						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z PROC		; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 72   : 		Row[0][0] = static_cast<float>(1.0 / tan(hfov*0.5));

	cvtss2sd xmm0, DWORD PTR _hfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 73   : 		Row[1][1] = static_cast<float>(1.0 / tan(vfov*0.5));

	cvtss2sd xmm0, DWORD PTR _vfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 74   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 75   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 76   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 77   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z ENDP		; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv195 = -72						; size = 4
tv193 = -72						; size = 4
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Ortho_OGL, COMDAT
; _this$ = ecx

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 61   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 62   : 		Row[0][3] = -(right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 63   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 64   : 		Row[1][3] = -(top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 65   : 		Row[2][2] = -2.0f / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	subss	xmm0, DWORD PTR _znear$[ebp]
	movss	xmm1, DWORD PTR __real@c0000000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv193[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR [eax], xmm0

; 66   : 		Row[2][3] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv195[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv195[ebp]
	movss	DWORD PTR [eax], xmm0

; 67   : 
; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Ortho_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
?Init@Matrix4@@QAEXABVVector4@@000@Z PROC		; Matrix4::Init, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		Row[0] = v0; Row[1] = v1; Row[2] = v2; Row[3] = v3;

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init@Matrix4@@QAEXABVVector4@@000@Z ENDP		; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVMatrix3D@@@Z
_TEXT	SEGMENT
$T1 = -84						; size = 16
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z PROC			; Matrix4::Init, COMDAT
; _this$ = ecx

; 51   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 		Row[0] = m[0]; Row[1] = m[1]; Row[2] = m[2]; Row[3] = Vector4(0.0,0.0,0.0,1.0); 

	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 53   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z ENDP			; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Make_Identity@Matrix4@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix4@@QAEXXZ PROC			; Matrix4::Make_Identity, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		Row[0].Set(1.0,0.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 46   : 		Row[1].Set(0.0,1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 47   : 		Row[2].Set(0.0,0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 48   : 		Row[3].Set(0.0,0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 49   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix4@@QAEXXZ ENDP			; Matrix4::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0Matrix4@@QAE@ABVVector4@@000@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 40   : 	TT_INLINE explicit Matrix4(const Vector4 & v0, const Vector4 & v1, const Vector4 & v2, const Vector4 & v3)	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 41   : 		Init(v0,v1,v2,v3);

	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVVector4@@000@Z	; Matrix4::Init

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix4@@QAE@ABVVector4@@000@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABVMatrix3D@@@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 36   : 	TT_INLINE explicit Matrix4(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 37   : 	{
; 38   : 		Init(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVMatrix3D@@@Z	; Matrix4::Init

; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABVMatrix3D@@@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix4@@QAE@_N@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 29   : 	TT_INLINE explicit Matrix4(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 30   : 	{
; 31   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix4

; 32   : 		{
; 33   : 			Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity
$LN2@Matrix4:

; 34   : 		}
; 35   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@_N@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABV0@@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 25   : 	TT_INLINE Matrix4(const Matrix4 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 26   : 	{
; 27   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 28   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABV0@@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix4@@QAE@XZ PROC					; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix4(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix4@@QAE@XZ ENDP					; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\networkobjectclass.h
;	COMDAT ?Get_Network_ID@NetworkObjectClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Network_ID@NetworkObjectClass@@QBEHXZ PROC		; NetworkObjectClass::Get_Network_ID, COMDAT
; _this$ = ecx

; 51   : 	int					Get_Network_ID (void) const								{ return NetworkID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Network_ID@NetworkObjectClass@@QBEHXZ ENDP		; NetworkObjectClass::Get_Network_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Rotate_Vector, COMDAT

; 564  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 565  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 566  : 		Vector3 * v;
; 567  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Ro

; 568  : 		{
; 569  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 570  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 571  : 		}
; 572  : 		else

	jmp	SHORT $LN1@Inverse_Ro
$LN2@Inverse_Ro:

; 573  : 		{
; 574  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Ro:

; 575  : 		}
; 576  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 577  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 578  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 579  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
_diff$ = -28						; size = 12
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Transform_Vector, COMDAT

; 548  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 549  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 550  : 		Vector3 * v;
; 551  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Tr

; 552  : 		{
; 553  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 554  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 555  : 		}
; 556  : 		else

	jmp	SHORT $LN1@Inverse_Tr
$LN2@Inverse_Tr:

; 557  : 		{
; 558  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Tr:

; 559  : 		}
; 560  : 		Vector3 diff(v->X - A[0][3], v->Y - A[1][3], v->Z - A[2][3]);

	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _diff$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 561  : 		Matrix3D::Inverse_Rotate_Vector(A, diff, out);

	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	call	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
	add	esp, 12					; 0000000cH

; 562  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Rotate_Vector, COMDAT

; 531  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 532  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 533  : 		Vector3 * v;
; 534  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 535  : 		{
; 536  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 537  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 538  : 		}
; 539  : 		else 

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 540  : 		{
; 541  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 542  : 		}
; 543  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 544  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 545  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 546  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 524  : 	TT_INLINE void Get_Z_Vector(Vector3 * set_z) const { set_z->Set(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 523  : 	TT_INLINE void Get_Y_Vector(Vector3 * set_y) const { set_y->Set(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 522  : 	TT_INLINE void Get_X_Vector(Vector3 * set_x) const { set_x->Set(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 521  : 	TT_INLINE Vector3 Get_Z_Vector() const { return Vector3(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 520  : 	TT_INLINE Vector3 Get_Y_Vector() const { return Vector3(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 519  : 	TT_INLINE Vector3 Get_X_Vector() const { return Vector3(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Transform_Vector, COMDAT

; 503  :    {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 504  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 505  : 		Vector3 * v;
; 506  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 507  : 		{
; 508  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 509  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 510  : 		}
; 511  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 512  : 		{
; 513  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 514  : 		}
; 515  : 		out->X = (A.Row[0][0] * v->X + A.Row[0][1] * v->Y + A.Row[0][2] * v->Z + A.Row[0][3]);

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 516  : 		out->Y = (A.Row[1][0] * v->X + A.Row[1][1] * v->Y + A.Row[1][2] * v->Z + A.Row[1][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 517  : 		out->Z = (A.Row[2][0] * v->X + A.Row[2][1] * v->Y + A.Row[2][2] * v->Z + A.Row[2][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 518  :    }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 486  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 487  : 		float tmp1,tmp2;
; 488  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 489  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 490  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 491  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 492  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 493  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 494  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 495  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 496  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 497  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 473  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 474  : 		float tmp1,tmp2;
; 475  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 476  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 477  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 478  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 479  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 480  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 481  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 482  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 483  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 460  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		float tmp1,tmp2;
; 462  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 463  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 464  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 465  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 466  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 467  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 468  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 469  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 470  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 471  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		float tmp1,tmp2;
; 446  : 		float c,s;
; 447  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 448  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 449  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 450  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 451  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 452  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 453  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 454  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 455  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 456  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 457  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 458  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 428  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 429  : 		float tmp1,tmp2;
; 430  : 		float c,s;
; 431  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 432  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 433  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 434  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 435  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 436  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 437  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 438  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 439  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 440  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 441  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 442  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 412  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 		float tmp1,tmp2;
; 414  : 		float c,s;
; 415  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 416  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 417  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 418  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 419  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 420  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 421  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 422  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 423  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 424  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 425  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 426  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 396  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 		float tmp1,tmp2;
; 398  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 399  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 400  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 401  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 402  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 403  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 404  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 405  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 406  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 407  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 408  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 409  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 410  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv299 = -80						; size = 4
tv297 = -80						; size = 4
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 380  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		float tmp1,tmp2;
; 382  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 383  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 384  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 385  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 386  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 387  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 388  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 389  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 390  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 391  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 392  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 393  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 394  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 364  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 365  : 		float tmp1,tmp2;
; 366  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 367  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 368  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 369  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 370  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 371  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 372  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 373  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 374  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 375  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 376  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 377  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 378  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 		float tmp1,tmp2;
; 347  : 		float c,s;
; 348  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 349  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 350  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 351  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 352  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 353  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 354  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 355  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 356  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 357  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 358  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 359  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 360  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 361  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 362  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv311 = -88						; size = 4
tv309 = -88						; size = 4
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 326  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 327  : 		float tmp1,tmp2;
; 328  : 		float c,s;
; 329  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 330  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 331  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 332  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 333  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 334  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 335  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 336  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 337  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 338  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 339  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 340  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 341  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv309[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv309[ebp]
	movss	DWORD PTR [eax], xmm0

; 342  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv311[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv311[ebp]
	movss	DWORD PTR [eax], xmm0

; 343  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 307  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 		float tmp1,tmp2;
; 309  : 		float c,s;
; 310  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 311  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 312  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 313  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 314  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 315  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 316  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 317  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 318  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 319  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 320  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 321  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 322  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 323  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 324  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXAAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z PROC		; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 		Scale(scale.X, scale.Y, scale.Z);

	mov	eax, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@Matrix3D@@QAEXMMM@Z		; Matrix3D::Scale

; 305  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z ENDP		; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Scale@Matrix3D@@QAEXMMM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 291  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		Row[0][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 293  : 		Row[1][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 294  : 		Row[2][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 295  : 		Row[0][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 296  : 		Row[1][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 297  : 		Row[2][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 298  : 		Row[0][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 299  : 		Row[1][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 300  : 		Row[2][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 301  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Scale@Matrix3D@@QAEXMMM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 279  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 		Row[0][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 281  : 		Row[1][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 282  : 		Row[2][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 283  : 		Row[0][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 284  : 		Row[1][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 285  : 		Row[2][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 286  : 		Row[0][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 287  : 		Row[1][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 288  : 		Row[2][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 289  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 		float tmp1,tmp2;
; 268  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 269  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 270  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 271  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 272  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 273  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 274  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 275  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 276  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 277  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 253  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 254  : 		float tmp1,tmp2;
; 255  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 256  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 257  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 258  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 259  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 260  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 261  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 262  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 263  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 240  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 		float tmp1,tmp2;
; 242  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 243  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 244  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 245  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 246  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 247  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 248  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 249  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 250  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 251  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 224  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 225  : 		float tmp1,tmp2;
; 226  : 		float c,s;
; 227  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 228  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 229  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 230  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 231  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 232  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 233  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 234  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 235  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 236  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 237  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 238  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 208  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 209  : 		float tmp1,tmp2;
; 210  : 		float s,c;
; 211  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 212  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 213  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 214  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 215  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 216  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 217  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 218  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 219  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 220  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 221  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 		float tmp1,tmp2;
; 194  : 		float s,c;
; 195  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 196  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 197  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 198  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 199  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 200  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 201  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 202  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 203  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 204  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 205  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 206  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Translate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		Row[0][3]  += (float)(Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 188  : 		Row[1][3]  += (float)(Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 189  : 		Row[2][3]  += (float)(Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Translate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Y, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		Row[0][3]  += (float)(Row[0][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 182  : 		Row[1][3]  += (float)(Row[1][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 183  : 		Row[2][3]  += (float)(Row[2][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Translate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_X, COMDAT
; _this$ = ecx

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		Row[0][3]  += (float)(Row[0][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 176  : 		Row[1][3]  += (float)(Row[1][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 177  : 		Row[2][3]  += (float)(Row[2][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv278 = -80						; size = 4
tv274 = -80						; size = 4
tv270 = -80						; size = 4
tv276 = -76						; size = 4
tv272 = -76						; size = 4
tv268 = -76						; size = 4
tv214 = -72						; size = 4
tv174 = -72						; size = 4
tv134 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Translate@Matrix3D@@QAEXABVVector3@@@Z PROC		; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		Row[0][3]  += Row[0][0]*t[0] + Row[0][1]*t[1] + Row[0][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv268[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv270[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv134[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm1

; 170  : 		Row[1][3]  += Row[1][0]*t[0] + Row[1][1]*t[1] + Row[1][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv174[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv272[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv274[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv274[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv174[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv174[ebp]
	movss	DWORD PTR [ecx], xmm1

; 171  : 		Row[2][3]  += Row[2][0]*t[0] + Row[2][1]*t[1] + Row[2][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv214[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv276[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv276[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv278[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv278[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv214[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv214[ebp]
	movss	DWORD PTR [ecx], xmm1

; 172  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@Matrix3D@@QAEXABVVector3@@@Z ENDP		; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv241 = -80						; size = 4
tv237 = -80						; size = 4
tv243 = -76						; size = 4
tv239 = -76						; size = 4
tv235 = -76						; size = 4
tv190 = -72						; size = 4
tv158 = -72						; size = 4
tv94 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Translate@Matrix3D@@QAEXMMM@Z PROC			; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0][3]  += (float)(Row[0][0]*x + Row[0][1]*y + Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm1

; 164  : 		Row[1][3]  += (float)(Row[1][0]*x + Row[1][1]*y + Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv239[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv241[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv158[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm1

; 165  : 		Row[2][3]  += (float)(Row[2][0]*x + Row[2][1]*y + Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv190[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv243[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv245[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv190[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv190[ebp]
	movss	DWORD PTR [ecx], xmm1

; 166  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Translate@Matrix3D@@QAEXMMM@Z ENDP			; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Make_Identity@Matrix3D@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3D@@QAEXXZ PROC			; Matrix3D::Make_Identity, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		Row[0].Set(1.0f,0.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 158  : 		Row[1].Set(0.0f,1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 159  : 		Row[2].Set(0.0f,0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3D@@QAEXXZ ENDP			; Matrix3D::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Z_Translation, COMDAT
; _this$ = ecx

; 154  : 	TT_INLINE void Adjust_Z_Translation(float z) { Row[2][3] += z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Y_Translation, COMDAT
; _this$ = ecx

; 153  : 	TT_INLINE void Adjust_Y_Translation(float y) { Row[1][3] += y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_X_Translation, COMDAT
; _this$ = ecx

; 152  : 	TT_INLINE void Adjust_X_Translation(float x) { Row[0][3] += x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv95 = -72						; size = 4
tv84 = -72						; size = 4
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Adjust_Translation, COMDAT
; _this$ = ecx

; 151  : 	TT_INLINE void Adjust_Translation(const Vector3 & t) { Row[0][3] += t[0]; Row[1][3] += t[1]; Row[2][3] += t[2]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv73[ebp], eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv73[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv84[ebp], eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv84[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv84[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv95[ebp], eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv95[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv95[ebp]
	movss	DWORD PTR [edx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Adjust_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Set_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Z_Translation, COMDAT
; _this$ = ecx

; 150  : 	TT_INLINE void Set_Z_Translation(float z) { Row[2][3] = z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Set_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Y_Translation, COMDAT
; _this$ = ecx

; 149  : 	TT_INLINE void Set_Y_Translation(float y) { Row[1][3] = y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Set_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_X_Translation, COMDAT
; _this$ = ecx

; 148  : 	TT_INLINE void Set_X_Translation(float x) { Row[0][3] = x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Z_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Z_Translation, COMDAT
; _this$ = ecx

; 147  : 	TT_INLINE float Get_Z_Translation(void) const { return Row[2][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Y_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Y_Translation, COMDAT
; _this$ = ecx

; 146  : 	TT_INLINE float Get_Y_Translation(void) const { return Row[1][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_X_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_X_Translation, COMDAT
; _this$ = ecx

; 145  : 	TT_INLINE float Get_X_Translation(void) const { return Row[0][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Set_Translation, COMDAT
; _this$ = ecx

; 143  : 	TT_INLINE void Set_Translation(const Vector3 & t)  { Row[0][3] = t[0]; Row[1][3] = t[1];Row[2][3] = t[2]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Set_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set$ = 8						; size = 4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 142  : 	TT_INLINE void Get_Translation(Vector3 * set) const { set->X = Row[0][3]; set->Y = Row[1][3]; set->Z = Row[2][3]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 141  : 	TT_INLINE Vector3 Get_Translation(void) const { return Vector3(Row[0][3],Row[1][3],Row[2][3]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		Row[0].Set(1.0f,0.0f,0.0f,position[0]);

	push	0
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 135  : 		Row[1].Set(0.0f,1.0f,0.0f,position[1]);

	push	1
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 136  : 		Row[2].Set(0.0f,0.0f,1.0f,position[2]);

	push	2
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 137  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXABVVector3@@@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv368 = -80						; size = 4
tv362 = -80						; size = 4
tv356 = -80						; size = 4
tv366 = -76						; size = 4
tv360 = -76						; size = 4
tv354 = -76						; size = 4
tv364 = -72						; size = 4
tv358 = -72						; size = 4
tv352 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@MM@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 112  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 		Row[0].Set(
; 114  : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 115  : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 116  : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s),
; 117  : 			0.0f
; 118  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv352[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv352[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv354[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv354[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv356[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv356[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 119  : 		Row[1].Set(
; 120  : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 121  : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 122  : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s),
; 123  : 			0.0f
; 124  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv358[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv358[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv360[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv362[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv362[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 125  : 		Row[2].Set(
; 126  : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 127  : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 128  : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2])),
; 129  : 			0.0f
; 130  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv364[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv364[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv366[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv366[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv368[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv368[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 131  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3D@@QAEXABVVector3@@MM@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_s$ = -12						; size = 4
_c$ = -8						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@M@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 106  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 		float c = cosf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 108  : 		float s = sinf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 109  : 		Set(axis,s,c);

	push	ecx
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 110  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3D@@QAEXABVVector3@@M@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@000@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 100  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 		Row[0].Set(x[0],y[0],z[0],pos[0]);

	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 102  : 		Row[1].Set(x[1],y[1],z[1],pos[1]);

	push	1
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 103  : 		Row[2].Set(x[2],y[2],z[2],pos[2]);

	push	2
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Matrix3D@@QAEXABVVector3@@000@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m14$ = 20						; size = 4
_m21$ = 24						; size = 4
_m22$ = 28						; size = 4
_m23$ = 32						; size = 4
_m24$ = 36						; size = 4
_m31$ = 40						; size = 4
_m32$ = 44						; size = 4
_m33$ = 48						; size = 4
_m34$ = 52						; size = 4
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		Row[0].Set(m11,m12,m13,m14);

	push	ecx
	movss	xmm0, DWORD PTR _m14$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 96   : 		Row[1].Set(m21,m22,m23,m24);

	push	ecx
	movss	xmm0, DWORD PTR _m24$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 97   : 		Row[2].Set(m31,m32,m33,m34);

	push	ecx
	movss	xmm0, DWORD PTR _m34$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXQAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Set@Matrix3D@@QAEXQAM@Z PROC				; Matrix3D::Set, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 90   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 91   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXQAM@Z ENDP				; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??4Matrix3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3D@@QAEAAV0@ABV0@@Z PROC			; Matrix3D::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 70   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 71   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 72   : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3D@@QAEAAV0@ABV0@@Z ENDP			; Matrix3D::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@ABV0@@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 61   : 	TT_INLINE Matrix3D(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 62   : 	{
; 63   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 64   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 65   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABV0@@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
??0Matrix3D@@QAE@ABVVector3@@@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE explicit Matrix3D(const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		Set(position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABVVector3@@@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3D(const Quaternion & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{
; 55   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z ; Matrix3D::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3D(const Matrix3 & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{
; 51   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z ; Matrix3D::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_sine$ = 12						; size = 4
_cosine$ = 16						; size = 4
??0Matrix3D@@QAE@ABVVector3@@MM@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 45   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float sine,float cosine)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 46   : 	{
; 47   : 		Set(axis,sine,cosine);

	push	ecx
	movss	xmm0, DWORD PTR _cosine$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sine$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3D@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3D@@QAE@ABVVector3@@M@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 41   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 42   : 	{
; 43   : 		Set(axis,angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@M@Z	; Matrix3D::Set

; 44   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVVector3@@M@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
??0Matrix3D@@QAE@ABVVector3@@000@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 37   : 	TT_INLINE explicit Matrix3D(const Vector3	&x,const Vector3	&y,const Vector3	&z,const Vector3	&pos)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 38   : 	{
; 39   : 		Set(x,y,z,pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@000@Z	; Matrix3D::Set

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix3D@@QAE@ABVVector3@@000@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@QAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@QAM@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 31   : 	TT_INLINE explicit Matrix3D(float m[12])

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 32   : 	{
; 33   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 34   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 35   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@QAM@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_init$ = 8						; size = 1
??0Matrix3D@@QAE@_N@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 30   : 	TT_INLINE explicit Matrix3D(bool init) { if (init) Make_Identity(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	movzx	eax, BYTE PTR _init$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix3D
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity
$LN2@Matrix3D:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@_N@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QBEABVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 28   :    TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QBEABVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QAEAAVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 27   :    TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QAEAAVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??XVector4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
??XVector4@@QAEAAV0@M@Z PROC				; Vector4::operator*=, COMDAT
; _this$ = ecx

; 64   : 	TT_INLINE Vector4& operator*=(float f) { X *= f; Y *= f; Z *= f; W *= f; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector4@@QAEAAV0@M@Z ENDP				; Vector4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??ZVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator-=, COMDAT
; _this$ = ecx

; 63   : 	TT_INLINE Vector4& operator-=(const Vector4& v) { X -= v.X; Y -= v.Y; Z -= v.Z; W -= v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??YVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator+=, COMDAT
; _this$ = ecx

; 62   : 	TT_INLINE Vector4& operator+=(const Vector4& v) { X += v.X; Y += v.Y; Z += v.Z; W += v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QBEABMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 39   : 	TT_INLINE const float& operator[](int i) const { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QBEABMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QAEAAMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 38   : 	TT_INLINE float& operator[](int i) { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QAEAAMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ?Set@Vector4@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
?Set@Vector4@@QAEXMMMM@Z PROC				; Vector4::Set, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE void Set(float x, float y, float z, float w) { X = x; Y = y; Z = z; W = w; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Vector4@@QAEXMMMM@Z ENDP				; Vector4::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??4Vector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator=, COMDAT
; _this$ = ecx

; 34   : 	TT_INLINE Vector4& operator=(const Vector4& v) { X = v.X; Y = v.Y; Z = v.Z; W = v.W; return *this; };	

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
??0Vector4@@QAE@MMMM@Z PROC				; Vector4::Vector4, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE Vector4(float x, float y, float z, float w) {	X = x; Y = y; Z = z; W = w;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@@QAE@MMMM@Z ENDP				; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector4@@QAE@XZ PROC					; Vector4::Vector4, COMDAT
; _this$ = ecx

; 24   : 	TT_INLINE Vector4() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector4@@QAE@XZ ENDP					; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4file_auto_ptr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z PROC			; file_auto_ptr::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z ENDP			; file_auto_ptr::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?get@file_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@file_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::get, COMDAT
; _this$ = ecx

; 202  : 	FileClass* get() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get@file_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Dfile_auto_ptr@@QAEAAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ PROC		; file_auto_ptr::operator*, COMDAT
; _this$ = ecx

; 201  : 	FileClass& operator*() { return *_Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ ENDP		; file_auto_ptr::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Bfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator FileClass *, COMDAT
; _this$ = ecx

; 200  : 	operator FileClass *() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator FileClass *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Cfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator->, COMDAT
; _this$ = ecx

; 199  : 	FileClass* operator ->() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EINIClass@@UAEPAXI@Z PROC				; INIClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1INIClass@@UAE@XZ		; INIClass::~INIClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EINIClass@@UAEPAXI@Z ENDP				; INIClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINIClass@@UAEPAXI@Z PROC				; INIClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINIClass@@UAEPAXI@Z ENDP				; INIClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4INIClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4INIClass@@QAEAAV0@ABV0@@Z PROC			; INIClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4INIClass@@QAEAAV0@ABV0@@Z ENDP			; INIClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0INIClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0INIClass@@QAE@ABV0@@Z PROC				; INIClass::INIClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INIClass@@QAE@ABV0@@Z ENDP				; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Name@INIClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Name@INIClass@@QAEPBDXZ PROC			; INIClass::Get_File_Name, COMDAT
; _this$ = ecx

; 183  : 	const char *Get_File_Name() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 		return Filename;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Name@INIClass@@QAEPBDXZ ENDP			; INIClass::Get_File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ PROC ; INIClass::Get_Section_Index, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		return *SectionIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 182  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ENDP ; INIClass::Get_Section_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ PROC ; INIClass::Get_Section_List, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return *SectionList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ENDP ; INIClass::Get_Section_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Section_Present@INIClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Section_Present@INIClass@@QBE_NPBD@Z PROC		; INIClass::Section_Present, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN3@Section_Pr
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Section_Pr
$LN3@Section_Pr:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Section_Pr:
	mov	al, BYTE PTR tv68[ebp]

; 174  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Section_Present@INIClass@@QBE_NPBD@Z ENDP		; INIClass::Section_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Is_Present@INIClass@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Is_Present@INIClass@@QBE_NPBD0@Z PROC			; INIClass::Is_Present, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@Is_Present

; 163  : 		{
; 164  : 			return Find_Entry(section,entry) != 0;

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	test	eax, eax
	je	SHORT $LN5@Is_Present
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@Is_Present
$LN5@Is_Present:
	mov	DWORD PTR tv70[ebp], 0
$LN6@Is_Present:
	mov	al, BYTE PTR tv70[ebp]
	jmp	SHORT $LN3@Is_Present

; 165  : 		}
; 166  : 		else

	jmp	SHORT $LN3@Is_Present
$LN2@Is_Present:

; 167  : 		{
; 168  : 			return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN7@Is_Present
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN8@Is_Present
$LN7@Is_Present:
	mov	DWORD PTR tv76[ebp], 0
$LN8@Is_Present:
	mov	al, BYTE PTR tv76[ebp]
$LN3@Is_Present:

; 169  : 		}
; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Is_Present@INIClass@@QBE_NPBD0@Z ENDP			; INIClass::Is_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkSaveClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z PROC			; ChunkSaveClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkSaveClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ PROC	; ChunkSaveClass::Set_Contains_Chunks, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		HeaderStack[StackIndex-1].ChunkSize |= 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*8+1028], eax

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ ENDP	; ChunkSaveClass::Set_Contains_Chunks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkLoadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z PROC			; ChunkLoadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkLoadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EWideStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EWideStringClass@@QAEPAXI@Z PROC			; WideStringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1WideStringClass@@QAE@XZ	; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EWideStringClass@@QAEPAXI@Z ENDP			; WideStringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1WideStringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WideStringClass@@QAE@XZ PROC				; WideStringClass::~WideStringClass, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@WideStringClass@@AAEXXZ

; 780  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1WideStringClass@@QAE@XZ ENDP				; WideStringClass::~WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EStringClass@@QAEPAXI@Z PROC				; StringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1StringClass@@QAE@XZ		; StringClass::~StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EStringClass@@QAEPAXI@Z ENDP				; StringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@StringClass@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@StringClass@@QAEPADXZ PROC			; StringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 477  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@StringClass@@QAEPADXZ ENDP			; StringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv74 = -92						; size = 4
tv91 = -85						; size = 1
tv88 = -84						; size = 4
tv85 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv85[ebp]
	add	edx, 1
	mov	DWORD PTR tv88[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv85[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv91[ebp], cl
	add	DWORD PTR tv85[ebp], 1
	cmp	BYTE PTR tv91[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv85[ebp]
	sub	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv74[ebp], edx
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@ABV0@@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 279  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	int len = string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _len$[ebp], eax

; 281  : 	Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 282  : 	Store_Length(len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 283  : 	memcpy (m_Buffer, string.m_Buffer, (len+1) * sizeof (char));		

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 284  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@ABV0@@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1StringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringClass@@QAE@XZ PROC				; StringClass::~StringClass, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@StringClass@@AAEXXZ

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StringClass@@QAE@XZ ENDP				; StringClass::~StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@PBD_N@Z
_TEXT	SEGMENT
tv70 = -92						; size = 4
tv68 = -88						; size = 4
tv90 = -81						; size = 1
tv87 = -80						; size = 4
tv84 = -76						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@PBD_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 347  : 	int len=string ? (int)strlen(string) : 0;

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN5@StringClas
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	add	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
$LL7@StringClas:
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv90[ebp], al
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL7@StringClas
	mov	ecx, DWORD PTR tv84[ebp]
	sub	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@StringClas
$LN5@StringClas:
	mov	DWORD PTR tv70[ebp], 0
$LN6@StringClas:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 348  : 	if (hint_temporary || len>0)

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 349  : 	{
; 350  : 		Get_String (len+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z
$LN2@StringClas:

; 351  : 	}
; 352  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 353  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@PBD_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@H_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 326  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 327  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 328  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@H_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hint_temporary$ = 8					; size = 1
??0StringClass@@QAE@_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 319  : 	Get_String (MAX_TEMP_LEN, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	push	248					; 000000f8H
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 320  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 321  : 	return ;
; 322  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0StringClass@@QAE@_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FastCriticalSectionClass@@QAE@XZ PROC		; FastCriticalSectionClass::FastCriticalSectionClass, COMDAT
; _this$ = ecx

; 110  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 111  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FastCriticalSectionClass@@QAE@XZ ENDP		; FastCriticalSectionClass::FastCriticalSectionClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??1LockClass@FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LockClass@FastCriticalSectionClass@@QAE@XZ PROC	; FastCriticalSectionClass::LockClass::~LockClass, COMDAT
; _this$ = ecx

; 102  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 			criticalSection.Leave();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Leave

; 104  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1LockClass@FastCriticalSectionClass@@QAE@XZ ENDP	; FastCriticalSectionClass::LockClass::~LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__criticalSection$ = 8					; size = 4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z PROC	; FastCriticalSectionClass::LockClass::LockClass, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __criticalSection$[ebp]
	mov	DWORD PTR [eax], ecx

; 98   : 			criticalSection.Enter();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Enter@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Enter

; 99   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ENDP	; FastCriticalSectionClass::LockClass::LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Leave@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Leave, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Flag = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Leave
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Enter@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Enter, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Enter:

; 66   : 		TT_ASSERT((size_t)&Flag % 4 == 0); // aligned to 4 bytes please

	xor	eax, eax
	jne	SHORT $LN6@Enter
	mov	eax, DWORD PTR _this$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	je	SHORT $LN3@Enter
	int	3
$LN3@Enter:

; 67   : 		for (;;)
; 68   : 		{
; 69   : 			if (_interlockedbittestandset(&Flag, 0) == 0) return;

	mov	eax, DWORD PTR _this$[ebp]
	lock	 bts	 DWORD PTR [eax], 0
	setb	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN1@Enter
	jmp	SHORT $LN8@Enter
$LN1@Enter:

; 70   : 			_mm_pause();

	pause

; 71   : 		};

	jmp	SHORT $LN3@Enter
$LN8@Enter:

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Enter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptRegistrar@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptRegistrar@@QAEAAV0@ABV0@@Z PROC		; ScriptRegistrar::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptRegistrar@@QAEAAV0@ABV0@@Z ENDP		; ScriptRegistrar::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptFactory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptFactory@@UAEPAXI@Z PROC			; ScriptFactory::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptFactory@@UAEPAXI@Z ENDP			; ScriptFactory::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptFactory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptFactory@@UAEPAXI@Z PROC			; ScriptFactory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptFactory@@UAEPAXI@Z ENDP			; ScriptFactory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptFactory@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptFactory@@QAEAAV0@ABV0@@Z PROC			; ScriptFactory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptFactory@@QAEAAV0@ABV0@@Z ENDP			; ScriptFactory::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptFactory@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptFactory@@QAE@ABV0@@Z PROC			; ScriptFactory::ScriptFactory, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptFactory@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptFactory@@QAE@ABV0@@Z ENDP			; ScriptFactory::ScriptFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_Attack@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
_range$ = 12						; size = 4
_error$ = 16						; size = 4
_primary_fire$ = 20					; size = 1
?Set_Attack@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z PROC ; ActionParamsStruct::Set_Attack, COMDAT
; _this$ = ecx

; 329  : 	void Set_Attack( GameObject * object, float range, float error, bool primary_fire ) { AttackObject = object; AttackRange = range; AttackError = error; AttackPrimaryFire = primary_fire; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR [eax+76], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR [eax+80], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _primary_fire$[ebp]
	mov	BYTE PTR [eax+92], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set_Attack@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z ENDP ; ActionParamsStruct::Set_Attack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_Attack@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_location$ = 8						; size = 4
_range$ = 12						; size = 4
_error$ = 16						; size = 4
_primary_fire$ = 20					; size = 1
?Set_Attack@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z PROC ; ActionParamsStruct::Set_Attack, COMDAT
; _this$ = ecx

; 328  : 	void Set_Attack( const Vector3 & location, float range, float error, bool primary_fire ) { AttackLocation = location; AttackRange = range; AttackError = error; AttackPrimaryFire = primary_fire; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _location$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR [eax+76], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR [eax+80], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _primary_fire$[ebp]
	mov	BYTE PTR [eax+92], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set_Attack@ActionParamsStruct@@QAEXABVVector3@@MM_N@Z ENDP ; ActionParamsStruct::Set_Attack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_Movement@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
_speed$ = 12						; size = 4
_arrived_distance$ = 16					; size = 4
_crouched$ = 20						; size = 1
?Set_Movement@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z PROC ; ActionParamsStruct::Set_Movement, COMDAT
; _this$ = ecx

; 327  : 	void Set_Movement( GameObject *	object, float speed, float arrived_distance, bool crouched = false ) { MoveObject = object; MoveSpeed = speed; MoveArrivedDistance = arrived_distance; MoveCrouched = crouched; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [eax+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _arrived_distance$[ebp]
	movss	DWORD PTR [eax+64], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _crouched$[ebp]
	mov	BYTE PTR [eax+70], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set_Movement@ActionParamsStruct@@QAEXPAVScriptableGameObj@@MM_N@Z ENDP ; ActionParamsStruct::Set_Movement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_script$ = 8						; size = 4
_priority$ = 12						; size = 4
_action_id$ = 16					; size = 4
_ai_state$ = 20						; size = 4
?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z PROC ; ActionParamsStruct::Set_Basic, COMDAT
; _this$ = ecx

; 321  : 	void Set_Basic( GameObjObserverClass * script, float priority, int action_id, SoldierAIState ai_state = NO_AI_STATE_CHANGE ) { ObserverID = script->Get_ID(); Priority = (int)priority; ActionID = action_id; AIState = ai_state; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _script$[ebp]
	call	?Get_ID@GameObjObserverClass@@QAEHXZ	; GameObjObserverClass::Get_ID
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	cvttss2si eax, DWORD PTR _priority$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _action_id$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ai_state$[ebp]
	mov	DWORD PTR [eax+168], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set_Basic@ActionParamsStruct@@QAEXPAVGameObjObserverClass@@MHW4SoldierAIState@@@Z ENDP ; ActionParamsStruct::Set_Basic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0ActionParamsStruct@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ActionParamsStruct@@QAE@XZ PROC			; ActionParamsStruct::ActionParamsStruct, COMDAT
; _this$ = ecx

; 432  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _DONT_MOVE_ARRIVED_DIST
	movss	DWORD PTR [eax+64], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+69], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+70], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+71], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [eax+76], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+80], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+92], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+93], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+108], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+109], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+110], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+111], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+113], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+128], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+132], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+168], -1
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 433  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ActionParamsStruct@@QAE@XZ ENDP			; ActionParamsStruct::ActionParamsStruct
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptImpClass@@UAEPAXI@Z PROC			; ScriptImpClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptImpClass@@UAE@XZ	; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptImpClass@@UAEPAXI@Z ENDP			; ScriptImpClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptImpClass@@UAEPAXI@Z PROC			; ScriptImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptImpClass@@UAEPAXI@Z ENDP			; ScriptImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptImpClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptImpClass@@QAEAAV0@ABV0@@Z PROC			; ScriptImpClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptImpClass@@QAEAAV0@ABV0@@Z ENDP			; ScriptImpClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptImpClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptImpClass@@QAE@ABV0@@Z PROC			; ScriptImpClass::ScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptImpClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptImpClass@@QAE@ABV0@@Z ENDP			; ScriptImpClass::ScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z PROC	; ScriptImpClass::Get_Bool_Parameter, COMDAT
; _this$ = ecx

; 290  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 291  :         return Get_Int_Parameter(index) != 0;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN3@Get_Bool_P
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Get_Bool_P
$LN3@Get_Bool_P:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_Bool_P:
	mov	al, BYTE PTR tv68[ebp]

; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z ENDP	; ScriptImpClass::Get_Bool_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z PROC	; ScriptImpClass::Get_Bool_Parameter, COMDAT
; _this$ = ecx

; 286  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 287  :         return Get_Int_Parameter(name) != 0;

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN3@Get_Bool_P
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Get_Bool_P
$LN3@Get_Bool_P:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_Bool_P:
	mov	al, BYTE PTR tv68[ebp]

; 288  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z ENDP	; ScriptImpClass::Get_Bool_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z PROC	; ScriptImpClass::Get_Float_Parameter, COMDAT
; _this$ = ecx

; 282  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 		return (float)atof(Get_Parameter(index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 284  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z ENDP	; ScriptImpClass::Get_Float_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z PROC		; ScriptImpClass::Get_Int_Parameter, COMDAT
; _this$ = ecx

; 278  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 		return atoi(Get_Parameter(index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4

; 280  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z ENDP		; ScriptImpClass::Get_Int_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Parameter_Count@ScriptImpClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Parameter_Count@ScriptImpClass@@QAEHXZ PROC	; ScriptImpClass::Get_Parameter_Count, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 		return mArgC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 276  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Parameter_Count@ScriptImpClass@@QAEHXZ ENDP	; ScriptImpClass::Get_Parameter_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ PROC ; ScriptImpClass::Register_Auto_Save_Variables, COMDAT
; _this$ = ecx

; 265  : 	virtual	void Register_Auto_Save_Variables()	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ ENDP ; ScriptImpClass::Register_Auto_Save_Variables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loader$ = 8						; size = 4
?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z PROC	; ScriptImpClass::Load_Data, COMDAT
; _this$ = ecx

; 264  : 	virtual void Load_Data(ScriptLoader& loader) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z ENDP	; ScriptImpClass::Load_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_saver$ = 8						; size = 4
?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z PROC	; ScriptImpClass::Save_Data, COMDAT
; _this$ = ecx

; 263  : 	virtual void Save_Data(ScriptSaver& saver) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z ENDP	; ScriptImpClass::Save_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ PROC ; ScriptImpClass::Get_Owner_Ptr, COMDAT
; _this$ = ecx

; 258  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 259  : 		return &mOwner;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 260  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ ENDP ; ScriptImpClass::Get_Owner_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ PROC	; ScriptImpClass::Owner, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		return mOwner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 256  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ ENDP	; ScriptImpClass::Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_exiter$ = 12						; size = 4
?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Exited, COMDAT
; _this$ = ecx

; 251  :   void Exited(GameObject *obj,GameObject *exiter) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enterer$ = 12						; size = 4
?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Entered, COMDAT
; _this$ = ecx

; 244  :   void Entered(GameObject *obj,GameObject *enterer) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_poker$ = 12						; size = 4
?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Poked, COMDAT
; _this$ = ecx

; 237  :   void Poked(GameObject *obj,GameObject *poker) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; ScriptImpClass::Animation_Complete, COMDAT
; _this$ = ecx

; 229  :   void Animation_Complete(GameObject *obj,const char *animation_name) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; ScriptImpClass::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z PROC ; ScriptImpClass::Timer_Expired, COMDAT
; _this$ = ecx

; 221  :   void Timer_Expired(GameObject *obj,int number) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z ENDP ; ScriptImpClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_complete_reason$ = 16					; size = 4
?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; ScriptImpClass::Action_Complete, COMDAT
; _this$ = ecx

; 212  :   void Action_Complete(GameObject *obj,int action_id,ActionCompleteReason complete_reason) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; ScriptImpClass::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enemy$ = 12						; size = 4
?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Enemy_Seen, COMDAT
; _this$ = ecx

; 201  :   void Enemy_Seen(GameObject *obj,GameObject *enemy) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_sound$ = 12						; size = 4
?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z PROC ; ScriptImpClass::Sound_Heard, COMDAT
; _this$ = ecx

; 193  :   void Sound_Heard(GameObject *obj,const CombatSound & sound) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ENDP ; ScriptImpClass::Sound_Heard
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; ScriptImpClass::Custom, COMDAT
; _this$ = ecx

; 184  :   void Custom(GameObject *obj,int type,int param,GameObject *sender) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; ScriptImpClass::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z PROC ; ScriptImpClass::Damaged, COMDAT
; _this$ = ecx

; 174  :   void Damaged(GameObject *obj,GameObject *damager,float amount) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z ENDP ; ScriptImpClass::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Killed, COMDAT
; _this$ = ecx

; 164  :   void Killed(GameObject *obj,GameObject *killer) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z PROC ; ScriptImpClass::Destroyed, COMDAT
; _this$ = ecx

; 155  :   void Destroyed(GameObject *obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; ScriptImpClass::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z PROC ; ScriptImpClass::Created, COMDAT
; _this$ = ecx

; 149  :   void Created(GameObject *obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; ScriptImpClass::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_factory$ = 8						; size = 4
?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z PROC ; ScriptImpClass::SetFactory, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		mFactory = factory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 138  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ENDP ; ScriptImpClass::SetFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptClass@@UAEPAXI@Z PROC				; ScriptClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptClass@@UAE@XZ		; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptClass@@UAE@XZ			; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptClass@@UAEPAXI@Z ENDP				; ScriptClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptClass@@UAEPAXI@Z PROC				; ScriptClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptClass@@UAE@XZ			; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptClass@@UAEPAXI@Z ENDP				; ScriptClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptClass@@QAEAAV0@ABV0@@Z PROC			; ScriptClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptClass@@QAEAAV0@ABV0@@Z ENDP			; ScriptClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptClass@@QAE@ABV0@@Z PROC			; ScriptClass::ScriptClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptClass@@QAE@ABV0@@Z ENDP			; ScriptClass::ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ScriptClass@@QAE@XZ PROC				; ScriptClass::ScriptClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@XZ		; GameObjObserverClass::GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ScriptClass@@QAE@XZ ENDP				; ScriptClass::ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??1ScriptClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ScriptClass@@UAE@XZ PROC				; ScriptClass::~ScriptClass, COMDAT
; _this$ = ecx

; 124  : 	virtual ~ScriptClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1ScriptClass@@UAE@XZ ENDP				; ScriptClass::~ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EGameObjObserverClass@@UAEPAXI@Z PROC		; GameObjObserverClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1GameObjObserverClass@@UAE@XZ	; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EGameObjObserverClass@@UAEPAXI@Z ENDP		; GameObjObserverClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGameObjObserverClass@@UAEPAXI@Z PROC		; GameObjObserverClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGameObjObserverClass@@UAEPAXI@Z ENDP		; GameObjObserverClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4GameObjObserverClass@@QAEAAV0@ABV0@@Z PROC		; GameObjObserverClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4GameObjObserverClass@@QAEAAV0@ABV0@@Z ENDP		; GameObjObserverClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0GameObjObserverClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0GameObjObserverClass@@QAE@ABV0@@Z PROC		; GameObjObserverClass::GameObjObserverClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0GameObjObserverClass@@QAE@ABV0@@Z ENDP		; GameObjObserverClass::GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ PROC ; GameObjObserverClass::Owner, COMDAT
; _this$ = ecx

; 117  : 	virtual GameObject* Owner() {return 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ ENDP ; GameObjObserverClass::Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_ID@GameObjObserverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@GameObjObserverClass@@QAEHXZ PROC		; GameObjObserverClass::Get_ID, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@GameObjObserverClass@@QAEHXZ ENDP		; GameObjObserverClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_ID@GameObjObserverClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Set_ID@GameObjObserverClass@@QAEXH@Z PROC		; GameObjObserverClass::Set_ID, COMDAT
; _this$ = ecx

; 95   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		ID = id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 97   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_ID@GameObjObserverClass@@QAEXH@Z ENDP		; GameObjObserverClass::Set_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??1GameObjObserverClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GameObjObserverClass@@UAE@XZ PROC			; GameObjObserverClass::~GameObjObserverClass, COMDAT
; _this$ = ecx

; 92   : 	virtual	~GameObjObserverClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1GameObjObserverClass@@UAE@XZ ENDP			; GameObjObserverClass::~GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0GameObjObserverClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GameObjObserverClass@@QAE@XZ PROC			; GameObjObserverClass::GameObjObserverClass, COMDAT
; _this$ = ecx

; 91   : 	GameObjObserverClass() : ID( 0 ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0GameObjObserverClass@@QAE@XZ ENDP			; GameObjObserverClass::GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Swap@@YAXAAVVector3@@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Swap@@YAXAAVVector3@@0@Z PROC				; Swap, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 399  : 	Vector3 tmp(a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 400  : 	a = b;

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 401  : 	b = tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Swap@@YAXAAVVector3@@0@Z ENDP				; Swap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Distance_Squared@Vector3@@SAMABV1@0@Z
_TEXT	SEGMENT
$T1 = -76						; size = 12
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?Distance_Squared@Vector3@@SAMABV1@0@Z PROC		; Vector3::Distance_Squared, COMDAT

; 333  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 334  : 		return (p1 - p2).Length2();

	mov	eax, DWORD PTR _p2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??G@YA?AVVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Distance_Squared@Vector3@@SAMABV1@0@Z ENDP		; Vector3::Distance_Squared
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Subtract@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Subtract@Vector3@@SAXABV1@0PAV1@@Z PROC		; Vector3::Subtract, COMDAT

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 219  : 		set_result->X = a.X - b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 220  : 		set_result->Y = a.Y - b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 221  : 		set_result->Z = a.Z - b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Vector3@@SAXABV1@0PAV1@@Z ENDP		; Vector3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Add@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Add@Vector3@@SAXABV1@0PAV1@@Z PROC			; Vector3::Add, COMDAT

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 213  : 		set_result->X = a.X + b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 214  : 		set_result->Y = a.Y + b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 215  : 		set_result->Z = a.Z + b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Vector3@@SAXABV1@0PAV1@@Z ENDP			; Vector3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??G@YA?AVVector3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??G@YA?AVVector3@@ABV0@0@Z PROC				; operator-, COMDAT

; 377  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 378  : 	return Vector3(a.X - b.X,a.Y - b.Y,a.Z - b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 379  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVVector3@@ABV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??H@YA?AVVector3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??H@YA?AVVector3@@ABV0@0@Z PROC				; operator+, COMDAT

; 373  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 374  : 	return Vector3(a.X + b.X,a.Y + b.Y,a.Z + b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 375  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVVector3@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
_a$ = 16						; size = 4
??D@YA?AVVector3@@MABV0@@Z PROC				; operator*, COMDAT

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 366  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 367  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@ABV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_k$ = 16						; size = 4
??D@YA?AVVector3@@ABV0@M@Z PROC				; operator*, COMDAT

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 362  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 363  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??_0Vector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??_0Vector3@@QAEAAV0@M@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		X = X * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 166  : 		Y = Y * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 167  : 		Z = Z * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 168  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@@QAEAAV0@M@Z ENDP				; Vector3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??XVector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??XVector3@@QAEAAV0@M@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		X = X * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 159  : 		Y = Y * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 160  : 		Z = Z * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 161  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 162  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@@QAEAAV0@M@Z ENDP				; Vector3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??ZVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator-=, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		X -= v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 152  : 		Y -= v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 153  : 		Z -= v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 154  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??YVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator+=, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		X += v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 145  : 		Y += v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 146  : 		Z += v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 147  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 148  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length2@Vector3@@QBEMXZ
_TEXT	SEGMENT
tv85 = -72						; size = 4
_this$ = -4						; size = 4
?Length2@Vector3@@QBEMXZ PROC				; Vector3::Length2, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		return X * X + Y * Y + Z * Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]

; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length2@Vector3@@QBEMXZ ENDP				; Vector3::Length2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length@Vector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@Vector3@@QBEMXZ PROC				; Vector3::Length, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		return WWMath::Sqrt(Length2());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@WWMath@@SAMM@Z			; WWMath::Sqrt
	add	esp, 4

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector3@@QBEMXZ ENDP				; Vector3::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Normalize@Vector3@@QAEXXZ
_TEXT	SEGMENT
tv81 = -80						; size = 4
_oolen$ = -12						; size = 4
_len2$ = -8						; size = 4
_this$ = -4						; size = 4
?Normalize@Vector3@@QAEXXZ PROC				; Vector3::Normalize, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		float len2 = WWMATH_FLOAT_TINY + Length2();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	fstp	DWORD PTR tv81[ebp]
	movss	xmm0, DWORD PTR tv81[ebp]
	addss	xmm0, DWORD PTR __real@02081cea
	movss	DWORD PTR _len2$[ebp], xmm0

; 76   : 		float oolen = WWMath::Inv_Sqrt(len2);

	push	ecx
	movss	xmm0, DWORD PTR _len2$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Inv_Sqrt@WWMath@@SIMM@Z		; WWMath::Inv_Sqrt
	fstp	DWORD PTR _oolen$[ebp]

; 77   : 		X *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 78   : 		Y *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 79   : 		Z *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@Vector3@@QAEXXZ ENDP				; Vector3::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QBEABMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QBEABMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QAEAAMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QAEAAMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Set@Vector3@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Set@Vector3@@QAEXMMM@Z PROC				; Vector3::Set, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 56   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 57   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Vector3@@QAEXMMM@Z ENDP				; Vector3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??4Vector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator=, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 49   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 50   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 51   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0Vector3@@QAE@MMM@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 33   : 	TT_INLINE Vector3(float x, float y, float z)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	{
; 35   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 36   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 37   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 38   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@@QAE@MMM@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@@QAE@ABV0@@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 27   : 	TT_INLINE Vector3(const Vector3 &v)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	{
; 29   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 30   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 31   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@@QAE@ABV0@@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 23   : 	TT_INLINE Vector3()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	{
; 25   : 		X = Y = Z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 26   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ PROC		; RefArrayHelper<float,1024>::operator float *, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 163  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ ENDP		; RefArrayHelper<float,1024>::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4WWMath@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WWMath@@QAEAAV0@ABV0@@Z PROC				; WWMath::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WWMath@@QAEAAV0@ABV0@@Z ENDP				; WWMath::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Double@WWMath@@SA_NN@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 8
?Is_Valid_Double@WWMath@@SA_NN@Z PROC			; WWMath::Is_Valid_Double, COMDAT

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 208  : 	unsigned long * plong = (unsigned long *)(&x) + 1;

	lea	eax, DWORD PTR _x$[ebp+4]
	mov	DWORD PTR _plong$[ebp], eax

; 209  : 	unsigned long exponent = ((*plong) & 0x7FF00000) >> (32-12);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2146435072				; 7ff00000H
	shr	ecx, 20					; 00000014H
	mov	DWORD PTR _exponent$[ebp], ecx

; 210  : 	if (exponent == 0x7FF) {

	cmp	DWORD PTR _exponent$[ebp], 2047		; 000007ffH
	jne	SHORT $LN1@Is_Valid_D

; 211  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_D
$LN1@Is_Valid_D:

; 212  : 	}
; 213  : 	return true;

	mov	al, 1
$LN2@Is_Valid_D:

; 214  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Double@WWMath@@SA_NN@Z ENDP			; WWMath::Is_Valid_Double
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Float@WWMath@@SA_NM@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 4
?Is_Valid_Float@WWMath@@SA_NM@Z PROC			; WWMath::Is_Valid_Float, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 198  : 	unsigned long * plong = (unsigned long *)(&x);

	lea	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _plong$[ebp], eax

; 199  : 	unsigned long exponent = ((*plong) & 0x7F800000) >> (32-9);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2139095040				; 7f800000H
	shr	ecx, 23					; 00000017H
	mov	DWORD PTR _exponent$[ebp], ecx

; 200  : 	if (exponent == 0xFF) {

	cmp	DWORD PTR _exponent$[ebp], 255		; 000000ffH
	jne	SHORT $LN1@Is_Valid_F

; 201  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_F
$LN1@Is_Valid_F:

; 202  : 	}
; 203  : 	return true;

	mov	al, 1
$LN2@Is_Valid_F:

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Float@WWMath@@SA_NM@Z ENDP			; WWMath::Is_Valid_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Byte_To_Unit_Float@WWMath@@SAME@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
_byte$ = 8						; size = 1
?Byte_To_Unit_Float@WWMath@@SAME@Z PROC			; WWMath::Byte_To_Unit_Float, COMDAT

; 97   : 	static float Byte_To_Unit_Float(unsigned char byte) { return ((float)byte) / 255.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	movzx	eax, BYTE PTR _byte$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Byte_To_Unit_Float@WWMath@@SAME@Z ENDP			; WWMath::Byte_To_Unit_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Unit_Float_To_Byte@WWMath@@SAEM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?Unit_Float_To_Byte@WWMath@@SAEM@Z PROC			; WWMath::Unit_Float_To_Byte, COMDAT

; 96   : 	static unsigned char Unit_Float_To_Byte(float f) { return (unsigned char)(f*255.0f); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	movss	xmm0, DWORD PTR _f$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Unit_Float_To_Byte@WWMath@@SAEM@Z ENDP			; WWMath::Unit_Float_To_Byte
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJN@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 8
?Float_To_Long@WWMath@@SAJN@Z PROC			; WWMath::Float_To_Long, COMDAT

; 222  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 223  :     return _mm_cvttsd_si32(_mm_load_pd(&f));

	movupd	xmm0, XMMWORD PTR _f$[ebx]
	movapd	XMMWORD PTR $T1[ebp], xmm0
	movapd	xmm0, XMMWORD PTR $T1[ebp]
	cvttsd2si eax, xmm0

; 224  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJN@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAHHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAHHHM@Z PROC				; WWMath::Lerp, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 193  : 	return (a + (int)((b - a)*lerp));

	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	cvttss2si eax, xmm0
	add	eax, DWORD PTR _a$[ebp]

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAHHHM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SANNNM@Z
_TEXT	SEGMENT
tv73 = -72						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_lerp$ = 24						; size = 4
?Lerp@WWMath@@SANNNM@Z PROC				; WWMath::Lerp, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 188  : 	return (a + (b - a)*lerp);

	movsd	xmm0, QWORD PTR _b$[ebp]
	subsd	xmm0, QWORD PTR _a$[ebp]
	cvtss2sd xmm1, DWORD PTR _lerp$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _a$[ebp]
	movsd	QWORD PTR tv73[ebp], xmm0
	fld	QWORD PTR tv73[ebp]

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SANNNM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAMMMM@Z PROC				; WWMath::Lerp, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 183  : 	return (a + (b - a)*lerp);

	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	addss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAMMMM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Max@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Max@WWMath@@SAMMM@Z PROC				; WWMath::Max, COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 177  : 	if (a>b) return a;

	movss	xmm0, DWORD PTR _a$[ebp]
	comiss	xmm0, DWORD PTR _b$[ebp]
	jbe	SHORT $LN1@Max
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Max
$LN1@Max:

; 178  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Max:

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Max@WWMath@@SAMMM@Z ENDP				; WWMath::Max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Min@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Min@WWMath@@SAMMM@Z PROC				; WWMath::Min, COMDAT

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 171  : 	if (a<b) return a;

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _a$[ebp]
	jbe	SHORT $LN1@Min
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Min
$LN1@Min:

; 172  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Min:

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Min@WWMath@@SAMMM@Z ENDP				; WWMath::Min
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Wrap@WWMath@@SANNNN@Z PROC				; WWMath::Wrap, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 158  : 	if ( val >= max )	val -= (max-min);

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	movsd	xmm1, QWORD PTR _val$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 159  : 	if ( val < min )	val += (max-min);

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	addsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 160  : 	if ( val < min ) {

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 161  : 		val = min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 162  : 	}
; 163  : 	if ( val > max ) {

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 164  : 		val = max;

	movsd	xmm0, QWORD PTR _max$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 165  : 	}
; 166  : 	return val;

	fld	QWORD PTR _val$[ebp]

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SANNNN@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Wrap@WWMath@@SAMMMM@Z PROC				; WWMath::Wrap, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 145  : 	if ( val >= max )	val -= (max-min);

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 146  : 	if ( val < min )	val += (max-min);

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	addss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 147  : 	if ( val < min ) {

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 148  : 		val = min;

	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 149  : 	}
; 150  : 	if ( val > max ) {

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 151  : 		val = max;

	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 152  : 	}
; 153  : 	return val;

	fld	DWORD PTR _val$[ebp]

; 154  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SAMMMM@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp_Int@WWMath@@SAHHHH@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min_val$ = 12						; size = 4
_max_val$ = 16						; size = 4
?Clamp_Int@WWMath@@SAHHHH@Z PROC			; WWMath::Clamp_Int, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 138  : 	if(val < min_val) return min_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _min_val$[ebp]
	jge	SHORT $LN2@Clamp_Int
	mov	eax, DWORD PTR _min_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN2@Clamp_Int:

; 139  : 	if(val > max_val) return max_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _max_val$[ebp]
	jle	SHORT $LN1@Clamp_Int
	mov	eax, DWORD PTR _max_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN1@Clamp_Int:

; 140  : 	return val;

	mov	eax, DWORD PTR _val$[ebp]
$LN3@Clamp_Int:

; 141  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp_Int@WWMath@@SAHHHH@Z ENDP			; WWMath::Clamp_Int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Clamp@WWMath@@SANNNN@Z PROC				; WWMath::Clamp, COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 131  : 	if(val < min) return min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	QWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 132  : 	if(val > max) return max;

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	QWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 133  : 	return val;

	fld	QWORD PTR _val$[ebp]
$LN3@Clamp:

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SANNNN@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Clamp@WWMath@@SAMMMM@Z PROC				; WWMath::Clamp, COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 124  : 	if(val < min) return min;

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	DWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 125  : 	if(val > max) return max;

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	DWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 126  : 	return val;

	fld	DWORD PTR _val$[ebp]
$LN3@Clamp:

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SAMMMM@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Random_Float@WWMath@@SAMMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_min$ = 8						; size = 4
_max$ = 12						; size = 4
?Random_Float@WWMath@@SAMMM@Z PROC			; WWMath::Random_Float, COMDAT

; 118  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 119  : 	return Random_Float() * (max-min) + min; 

	call	?Random_Float@WWMath@@SAMXZ		; WWMath::Random_Float
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	xmm1, DWORD PTR _max$[ebp]
	subss	xmm1, DWORD PTR _min$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Random_Float@WWMath@@SAMMM@Z ENDP			; WWMath::Random_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z PROC		; WWMath::Fast_Is_Float_Positive, COMDAT

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 114  : 	return !((*(int *)(&val)) & 0x80000000);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2147483648			; 80000000H
	jne	SHORT $LN3@Fast_Is_Fl
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Fast_Is_Fl
$LN3@Fast_Is_Fl:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Fast_Is_Fl:
	mov	al, BYTE PTR tv66[ebp]

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z ENDP		; WWMath::Fast_Is_Float_Positive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Floor@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Floor@WWMath@@SAMM@Z PROC				; WWMath::Floor, COMDAT

; 81   : 	static float Floor(float val) { return floorf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Floor@WWMath@@SAMM@Z ENDP				; WWMath::Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Ceil@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Ceil@WWMath@@SAMM@Z PROC				; WWMath::Ceil, COMDAT

; 80   : 	static float Ceil(float val) { return ceilf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_ceilf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Ceil@WWMath@@SAMM@Z ENDP				; WWMath::Ceil
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sign@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sign@WWMath@@SAMM@Z PROC				; WWMath::Sign, COMDAT

; 102  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 103  : 	if (val > 0.0f) { 

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@Sign

; 104  : 		return +1.0f; 

	fld1
	jmp	SHORT $LN3@Sign
$LN2@Sign:

; 105  : 	} 
; 106  : 	if (val < 0.0f) { 

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN1@Sign

; 107  : 		return -1.0f; 

	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN3@Sign
$LN1@Sign:

; 108  : 	} 
; 109  : 	return 0.0f; 

	fldz
$LN3@Sign:

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sign@WWMath@@SAMM@Z ENDP				; WWMath::Sign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan2@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
_x$ = 12						; size = 4
?Atan2@WWMath@@SAMMM@Z PROC				; WWMath::Atan2, COMDAT

; 78   : 	static float Atan2(float y,float x) { return static_cast<float>(atan2(y,x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan2@WWMath@@SAMMM@Z ENDP				; WWMath::Atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan@WWMath@@SAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Atan@WWMath@@SAMM@Z PROC				; WWMath::Atan, COMDAT

; 77   : 	static float Atan(float x) { return static_cast<float>(atan(x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan@WWMath@@SAMM@Z ENDP				; WWMath::Atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Asin@WWMath@@SAMM@Z PROC				; WWMath::Asin, COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 307  : 	return (float)asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Asin@WWMath@@SAMM@Z ENDP				; WWMath::Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Acos@WWMath@@SAMM@Z PROC				; WWMath::Acos, COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 287  : 	return (float)acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4

; 288  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Acos@WWMath@@SAMM@Z ENDP				; WWMath::Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Asin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Asin, COMDAT

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 292  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Asin

; 293  : 		return WWMath::Asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Asin@WWMath@@SAMM@Z			; WWMath::Asin
	add	esp, 4
	jmp	$LN12@Fast_Asin
$LN11@Fast_Asin:

; 294  : 	}
; 295  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 296  : 	int idx0=Float_To_Int_Floor(val); 

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 297  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 298  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 299  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 300  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Asin:

; 301  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Asin
$LN6@Fast_Asin:
	int	3
$LN7@Fast_Asin:

; 302  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Asin
$LN1@Fast_Asin:
	int	3
$LN2@Fast_Asin:

; 303  : 	return (1.0f - frac) * _FastAsinTable[idx0] + frac * _FastAsinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Asin:

; 304  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Asin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Acos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Acos, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 271  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Acos

; 272  : 		return WWMath::Acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Acos@WWMath@@SAMM@Z			; WWMath::Acos
	add	esp, 4
	jmp	$LN12@Fast_Acos
$LN11@Fast_Acos:

; 273  : 	}
; 274  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 275  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 276  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 277  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 278  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 279  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Acos:

; 280  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Acos
$LN6@Fast_Acos:
	int	3
$LN7@Fast_Acos:

; 281  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Acos
$LN1@Fast_Acos:
	int	3
$LN2@Fast_Acos:

; 282  : 	return (1.0f - frac) * _FastAcosTable[idx0] + frac * _FastAcosTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Acos:

; 283  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Acos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Cos@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Cos, COMDAT

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 266  : 	return 1.0f / WWMath::Fast_Cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Cos@WWMath@@SAMM@Z		; WWMath::Fast_Cos
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Cos@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv135 = -88						; size = 4
tv140 = -84						; size = 4
tv138 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Cos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Cos, COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 254  : 	val+=(WWMATH_PI * 0.5f);

	movss	xmm0, DWORD PTR _val$[ebp]
	addss	xmm0, DWORD PTR __real@3fc90fdb
	movss	DWORD PTR _val$[ebp], xmm0

; 255  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 256  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 257  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 258  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 259  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 260  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 261  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv140[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv140[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv135[ebp], xmm1
	fld	DWORD PTR tv135[ebp]

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Cos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Sin@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Sin, COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 249  : 	return 1.0f / WWMath::Fast_Sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Sin@WWMath@@SAMM@Z		; WWMath::Fast_Sin
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 250  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Sin@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv133 = -88						; size = 4
tv138 = -84						; size = 4
tv136 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Sin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Sin, COMDAT

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 238  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 239  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 240  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 241  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 242  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 243  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 244  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv136[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv136[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv138[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv133[ebp], xmm1
	fld	DWORD PTR tv133[ebp]

; 245  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Sin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJM@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 4
?Float_To_Long@WWMath@@SAJM@Z PROC			; WWMath::Float_To_Long, COMDAT

; 217  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 218  :     return _mm_cvtt_ss2si(_mm_load_ss(&f));

	movss	xmm0, DWORD PTR _f$[ebx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	cvttss2si eax, xmm0

; 219  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJM@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Inv_Sqrt@WWMath@@SIMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_number$ = 8						; size = 4
?Inv_Sqrt@WWMath@@SIMM@Z PROC				; WWMath::Inv_Sqrt, COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 342  : 	return 1.f / sqrt(number);

	push	ecx
	movss	xmm0, DWORD PTR _number$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 343  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inv_Sqrt@WWMath@@SIMM@Z ENDP				; WWMath::Inv_Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sqrt@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sqrt@WWMath@@SAMM@Z PROC				; WWMath::Sqrt, COMDAT

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 312  :     return ::sqrtf(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4

; 313  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sqrt@WWMath@@SAMM@Z ENDP				; WWMath::Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sin@WWMath@@SAMM@Z PROC				; WWMath::Sin, COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 233  :     return ::sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sin@WWMath@@SAMM@Z ENDP				; WWMath::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Cos@WWMath@@SAMM@Z PROC				; WWMath::Cos, COMDAT

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 228  :     return ::cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cos@WWMath@@SAMM@Z ENDP				; WWMath::Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Floor@WWMath@@SAHABM@Z
_TEXT	SEGMENT
tv83 = -96						; size = 4
_r$ = -28						; size = 4
_mantissa$ = -24					; size = 4
_imask$ = -20						; size = 4
_expsign$ = -16						; size = 4
_exponent$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Floor@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Floor, COMDAT

; 326  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 327  : 	int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 328  : 	int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 329  : 	a&=0x7fffffff;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _a$[ebp], eax

; 330  : 	int exponent = (a>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 331  : 	int expsign	= ~(exponent>>31);

	mov	eax, DWORD PTR _exponent$[ebp]
	sar	eax, 31					; 0000001fH
	not	eax
	mov	DWORD PTR _expsign$[ebp], eax

; 332  : 	int imask = ( (1<<(31-(exponent))))-1;

	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _imask$[ebp], eax

; 333  : 	int mantissa = (a&((1<<23)-1));

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	mov	DWORD PTR _mantissa$[ebp], eax

; 334  : 	int r = ((unsigned int)(mantissa|(1<<23))<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	or	eax, 8388608				; 00800000H
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 335  : #pragma warning(suppress: 6290) //warning C6290: Bitwise operation on logical result: ! has higher precedence than &. Use && or (!(x & y)) instead
; 336  : 	r = ((r & expsign) ^ (sign)) + ((!((mantissa<<8)&imask)&(expsign^((a-1)>>31)))&sign);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	and	eax, DWORD PTR _imask$[ebp]
	jne	SHORT $LN3@Float_To_I
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@Float_To_I
$LN3@Float_To_I:
	mov	DWORD PTR tv83[ebp], 0
$LN4@Float_To_I:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR _expsign$[ebp]
	xor	ecx, DWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	sub	edx, 1
	sar	edx, 31					; 0000001fH
	xor	edx, DWORD PTR _expsign$[ebp]
	and	edx, DWORD PTR tv83[ebp]
	and	edx, DWORD PTR _sign$[ebp]
	add	ecx, edx
	mov	DWORD PTR _r$[ebp], ecx

; 337  : 	return r;

	mov	eax, DWORD PTR _r$[ebp]

; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Floor@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Chop@WWMath@@SAHABM@Z
_TEXT	SEGMENT
_r$ = -20						; size = 4
_exponent$ = -16					; size = 4
_mantissa$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Chop@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Chop, COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 317  :     int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 318  :     int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 319  :     int mantissa = (a&((1<<23)-1))|(1<<23);

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	or	eax, 8388608				; 00800000H
	mov	DWORD PTR _mantissa$[ebp], eax

; 320  :     int exponent = ((a&0x7fffffff)>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 321  :     int r = ((unsigned int)(mantissa)<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 322  :     return ((r ^ (sign)) - sign ) &~ (exponent>>31);

	mov	eax, DWORD PTR _r$[ebp]
	xor	eax, DWORD PTR _sign$[ebp]
	sub	eax, DWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	sar	ecx, 31					; 0000001fH
	not	ecx
	and	eax, ecx

; 323  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Chop@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Chop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fabs@WWMath@@SAMM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_val$ = 8						; size = 4
?Fabs@WWMath@@SAMM@Z PROC				; WWMath::Fabs, COMDAT

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 58   : 		int value=*(int*)&val;

	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 59   : 		value&=0x7fffffff;

	mov	eax, DWORD PTR _value$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _value$[ebp], eax

; 60   : 		return *(float*)&value;

	fld	DWORD PTR _value$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fabs@WWMath@@SAMM@Z ENDP				; WWMath::Fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 133  :     return _time64(_Time);

	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??_U@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??_U@YAPAXIPAX@Z PROC					; operator new[], COMDAT

; 71   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 72   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_U@YAPAXIPAX@Z ENDP					; operator new[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 541  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 507  :         {return (atan2f(_Y, _X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv78 = -80						; size = 8
tv72 = -72						; size = 8
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv72[ebp], xmm0
	fld	QWORD PTR tv72[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv78[ebp]
	movsd	xmm0, QWORD PTR tv78[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv80[ebp], xmm0
	fld	DWORD PTR tv80[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_cos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _ceilf
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv74 = -72						; size = 8
__X$ = 8						; size = 4
_ceilf	PROC						; COMDAT

; 408  :         {return ((float)ceil((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__ceil
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ceilf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv85 = -92						; size = 4
tv83 = -88						; size = 8
tv77 = -80						; size = 8
tv75 = -72						; size = 8
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
	fld	QWORD PTR tv75[ebp]
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
	fld	QWORD PTR tv77[ebp]
	call	__CIatan2
	fstp	QWORD PTR tv83[ebp]
	movsd	xmm0, QWORD PTR tv83[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_atan_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_asin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_acos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
