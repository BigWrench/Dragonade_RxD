; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\dp88_misc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?MODE_DEFAULT@dp88_conquestController@@1EB	; dp88_conquestController::MODE_DEFAULT
PUBLIC	?MODE_DEDUCTION@dp88_conquestController@@1EB	; dp88_conquestController::MODE_DEDUCTION
PUBLIC	?MODE_HEALTH@dp88_RegenerateHitpoints@@1HB	; dp88_RegenerateHitpoints::MODE_HEALTH
PUBLIC	?MODE_ARMOUR@dp88_RegenerateHitpoints@@1HB	; dp88_RegenerateHitpoints::MODE_ARMOUR
PUBLIC	?MODE_PILOTED_HEALTH@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_PILOTED_HEALTH
PUBLIC	?MODE_PILOTED_ARMOUR@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_PILOTED_ARMOUR
PUBLIC	?MODE_OCCUPIED_HEALTH@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_OCCUPIED_HEALTH
PUBLIC	?MODE_OCCUPIED_ARMOUR@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_OCCUPIED_ARMOUR
PUBLIC	?MODE_DRIVER_HEALTH@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_DRIVER_HEALTH
PUBLIC	?MODE_DRIVER_ARMOUR@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_DRIVER_ARMOUR
PUBLIC	?MODE_PASSENGERS_HEALTH@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_PASSENGERS_HEALTH
PUBLIC	?MODE_PASSENGERS_ARMOUR@dp88_RegenerateHitpoints@@1HB ; dp88_RegenerateHitpoints::MODE_PASSENGERS_ARMOUR
;	COMDAT ?MODE_PASSENGERS_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_PASSENGERS_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 0200H ; dp88_RegenerateHitpoints::MODE_PASSENGERS_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_PASSENGERS_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_PASSENGERS_HEALTH@dp88_RegenerateHitpoints@@1HB DD 0100H ; dp88_RegenerateHitpoints::MODE_PASSENGERS_HEALTH
CONST	ENDS
;	COMDAT ?MODE_DRIVER_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_DRIVER_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 080H ; dp88_RegenerateHitpoints::MODE_DRIVER_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_DRIVER_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_DRIVER_HEALTH@dp88_RegenerateHitpoints@@1HB DD 040H ; dp88_RegenerateHitpoints::MODE_DRIVER_HEALTH
CONST	ENDS
;	COMDAT ?MODE_OCCUPIED_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_OCCUPIED_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 020H ; dp88_RegenerateHitpoints::MODE_OCCUPIED_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_OCCUPIED_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_OCCUPIED_HEALTH@dp88_RegenerateHitpoints@@1HB DD 010H ; dp88_RegenerateHitpoints::MODE_OCCUPIED_HEALTH
CONST	ENDS
;	COMDAT ?MODE_PILOTED_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_PILOTED_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 08H ; dp88_RegenerateHitpoints::MODE_PILOTED_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_PILOTED_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_PILOTED_HEALTH@dp88_RegenerateHitpoints@@1HB DD 04H ; dp88_RegenerateHitpoints::MODE_PILOTED_HEALTH
CONST	ENDS
;	COMDAT ?MODE_ARMOUR@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_ARMOUR@dp88_RegenerateHitpoints@@1HB DD 02H	; dp88_RegenerateHitpoints::MODE_ARMOUR
CONST	ENDS
;	COMDAT ?MODE_HEALTH@dp88_RegenerateHitpoints@@1HB
CONST	SEGMENT
?MODE_HEALTH@dp88_RegenerateHitpoints@@1HB DD 01H	; dp88_RegenerateHitpoints::MODE_HEALTH
CONST	ENDS
CONST	SEGMENT
_DONT_MOVE_ARRIVED_DIST DD 0447a0000r		; 1000
CONST	ENDS
;	COMDAT ?MODE_DEDUCTION@dp88_conquestController@@1EB
CONST	SEGMENT
?MODE_DEDUCTION@dp88_conquestController@@1EB DB 01H	; dp88_conquestController::MODE_DEDUCTION
CONST	ENDS
;	COMDAT ?MODE_DEFAULT@dp88_conquestController@@1EB
CONST	SEGMENT
?MODE_DEFAULT@dp88_conquestController@@1EB DB 00H	; dp88_conquestController::MODE_DEFAULT
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_atanf
PUBLIC	_atan2f
PUBLIC	_ceilf
PUBLIC	_cosf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?abs@@YAMM@Z					; abs
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?Fabs@WWMath@@SAMM@Z				; WWMath::Fabs
PUBLIC	?Float_To_Int_Chop@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Chop
PUBLIC	?Float_To_Int_Floor@WWMath@@SAHABM@Z		; WWMath::Float_To_Int_Floor
PUBLIC	?Cos@WWMath@@SAMM@Z				; WWMath::Cos
PUBLIC	?Sin@WWMath@@SAMM@Z				; WWMath::Sin
PUBLIC	?Sqrt@WWMath@@SAMM@Z				; WWMath::Sqrt
PUBLIC	?Inv_Sqrt@WWMath@@SIMM@Z			; WWMath::Inv_Sqrt
PUBLIC	?Float_To_Long@WWMath@@SAJM@Z			; WWMath::Float_To_Long
PUBLIC	?Fast_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Sin
PUBLIC	?Fast_Inv_Sin@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Sin
PUBLIC	?Fast_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Cos
PUBLIC	?Fast_Inv_Cos@WWMath@@SAMM@Z			; WWMath::Fast_Inv_Cos
PUBLIC	?Fast_Acos@WWMath@@SAMM@Z			; WWMath::Fast_Acos
PUBLIC	?Fast_Asin@WWMath@@SAMM@Z			; WWMath::Fast_Asin
PUBLIC	?Acos@WWMath@@SAMM@Z				; WWMath::Acos
PUBLIC	?Asin@WWMath@@SAMM@Z				; WWMath::Asin
PUBLIC	?Atan@WWMath@@SAMM@Z				; WWMath::Atan
PUBLIC	?Atan2@WWMath@@SAMMM@Z				; WWMath::Atan2
PUBLIC	?Sign@WWMath@@SAMM@Z				; WWMath::Sign
PUBLIC	?Ceil@WWMath@@SAMM@Z				; WWMath::Ceil
PUBLIC	?Floor@WWMath@@SAMM@Z				; WWMath::Floor
PUBLIC	?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z	; WWMath::Fast_Is_Float_Positive
PUBLIC	?Random_Float@WWMath@@SAMMM@Z			; WWMath::Random_Float
PUBLIC	?Clamp@WWMath@@SAMMMM@Z				; WWMath::Clamp
PUBLIC	?Clamp@WWMath@@SANNNN@Z				; WWMath::Clamp
PUBLIC	?Clamp_Int@WWMath@@SAHHHH@Z			; WWMath::Clamp_Int
PUBLIC	?Wrap@WWMath@@SAMMMM@Z				; WWMath::Wrap
PUBLIC	?Wrap@WWMath@@SANNNN@Z				; WWMath::Wrap
PUBLIC	?Min@WWMath@@SAMMM@Z				; WWMath::Min
PUBLIC	?Max@WWMath@@SAMMM@Z				; WWMath::Max
PUBLIC	?Lerp@WWMath@@SAMMMM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SANNNM@Z				; WWMath::Lerp
PUBLIC	?Lerp@WWMath@@SAHHHM@Z				; WWMath::Lerp
PUBLIC	?Float_To_Long@WWMath@@SAJN@Z			; WWMath::Float_To_Long
PUBLIC	?Unit_Float_To_Byte@WWMath@@SAEM@Z		; WWMath::Unit_Float_To_Byte
PUBLIC	?Byte_To_Unit_Float@WWMath@@SAME@Z		; WWMath::Byte_To_Unit_Float
PUBLIC	?Is_Valid_Float@WWMath@@SA_NM@Z			; WWMath::Is_Valid_Float
PUBLIC	?Is_Valid_Double@WWMath@@SA_NN@Z		; WWMath::Is_Valid_Double
PUBLIC	??4WWMath@@QAEAAV0@ABV0@@Z			; WWMath::operator=
PUBLIC	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ		; RefArrayHelper<float,1024>::operator float *
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@ABV0@@Z				; Vector3::Vector3
PUBLIC	??0Vector3@@QAE@MMM@Z				; Vector3::Vector3
PUBLIC	??4Vector3@@QAEAAV0@ABV0@@Z			; Vector3::operator=
PUBLIC	?Set@Vector3@@QAEXMMM@Z				; Vector3::Set
PUBLIC	??AVector3@@QAEAAMH@Z				; Vector3::operator[]
PUBLIC	??AVector3@@QBEABMH@Z				; Vector3::operator[]
PUBLIC	?Normalize@Vector3@@QAEXXZ			; Vector3::Normalize
PUBLIC	?Length@Vector3@@QBEMXZ				; Vector3::Length
PUBLIC	?Length2@Vector3@@QBEMXZ			; Vector3::Length2
PUBLIC	??YVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator+=
PUBLIC	??ZVector3@@QAEAAV0@ABV0@@Z			; Vector3::operator-=
PUBLIC	??XVector3@@QAEAAV0@M@Z				; Vector3::operator*=
PUBLIC	??_0Vector3@@QAEAAV0@M@Z			; Vector3::operator/=
PUBLIC	??D@YA?AVVector3@@ABV0@M@Z			; operator*
PUBLIC	??D@YA?AVVector3@@MABV0@@Z			; operator*
PUBLIC	??H@YA?AVVector3@@ABV0@0@Z			; operator+
PUBLIC	??G@YA?AVVector3@@ABV0@0@Z			; operator-
PUBLIC	?Add@Vector3@@SAXABV1@0PAV1@@Z			; Vector3::Add
PUBLIC	?Subtract@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Subtract
PUBLIC	?Swap@@YAXAAVVector3@@0@Z			; Swap
PUBLIC	??0GameObjObserverClass@@QAE@XZ			; GameObjObserverClass::GameObjObserverClass
PUBLIC	??1GameObjObserverClass@@UAE@XZ			; GameObjObserverClass::~GameObjObserverClass
PUBLIC	?Set_ID@GameObjObserverClass@@QAEXH@Z		; GameObjObserverClass::Set_ID
PUBLIC	?Get_ID@GameObjObserverClass@@QAEHXZ		; GameObjObserverClass::Get_ID
PUBLIC	?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ ; GameObjObserverClass::Owner
PUBLIC	??0GameObjObserverClass@@QAE@ABV0@@Z		; GameObjObserverClass::GameObjObserverClass
PUBLIC	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z	; GameObjObserverClass::operator=
PUBLIC	??_GGameObjObserverClass@@UAEPAXI@Z		; GameObjObserverClass::`scalar deleting destructor'
PUBLIC	??_EGameObjObserverClass@@UAEPAXI@Z		; GameObjObserverClass::`vector deleting destructor'
PUBLIC	??1ScriptClass@@UAE@XZ				; ScriptClass::~ScriptClass
PUBLIC	??0ScriptClass@@QAE@XZ				; ScriptClass::ScriptClass
PUBLIC	??0ScriptClass@@QAE@ABV0@@Z			; ScriptClass::ScriptClass
PUBLIC	??4ScriptClass@@QAEAAV0@ABV0@@Z			; ScriptClass::operator=
PUBLIC	??_GScriptClass@@UAEPAXI@Z			; ScriptClass::`scalar deleting destructor'
PUBLIC	??_EScriptClass@@UAEPAXI@Z			; ScriptClass::`vector deleting destructor'
PUBLIC	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory
PUBLIC	?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Created
PUBLIC	?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Destroyed
PUBLIC	?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Killed
PUBLIC	?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z ; ScriptImpClass::Damaged
PUBLIC	?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z ; ScriptImpClass::Custom
PUBLIC	?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ; ScriptImpClass::Sound_Heard
PUBLIC	?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Enemy_Seen
PUBLIC	?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ; ScriptImpClass::Action_Complete
PUBLIC	?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z ; ScriptImpClass::Timer_Expired
PUBLIC	?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ; ScriptImpClass::Animation_Complete
PUBLIC	?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Poked
PUBLIC	?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Entered
PUBLIC	?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ; ScriptImpClass::Exited
PUBLIC	?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ ; ScriptImpClass::Owner
PUBLIC	?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ ; ScriptImpClass::Get_Owner_Ptr
PUBLIC	?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z ; ScriptImpClass::Save_Data
PUBLIC	?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z ; ScriptImpClass::Load_Data
PUBLIC	?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ ; ScriptImpClass::Register_Auto_Save_Variables
PUBLIC	?Get_Parameter_Count@ScriptImpClass@@QAEHXZ	; ScriptImpClass::Get_Parameter_Count
PUBLIC	?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z	; ScriptImpClass::Get_Int_Parameter
PUBLIC	?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z	; ScriptImpClass::Get_Float_Parameter
PUBLIC	?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z	; ScriptImpClass::Get_Bool_Parameter
PUBLIC	?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z	; ScriptImpClass::Get_Bool_Parameter
PUBLIC	??0ScriptImpClass@@QAE@ABV0@@Z			; ScriptImpClass::ScriptImpClass
PUBLIC	??4ScriptImpClass@@QAEAAV0@ABV0@@Z		; ScriptImpClass::operator=
PUBLIC	??_GScriptImpClass@@UAEPAXI@Z			; ScriptImpClass::`scalar deleting destructor'
PUBLIC	??_EScriptImpClass@@UAEPAXI@Z			; ScriptImpClass::`vector deleting destructor'
PUBLIC	??0ActionParamsStruct@@QAE@XZ			; ActionParamsStruct::ActionParamsStruct
PUBLIC	?Set_Basic@ActionParamsStruct@@QAEXJMHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic
PUBLIC	??0ScriptFactory@@QAE@ABV0@@Z			; ScriptFactory::ScriptFactory
PUBLIC	??4ScriptFactory@@QAEAAV0@ABV0@@Z		; ScriptFactory::operator=
PUBLIC	??_GScriptFactory@@UAEPAXI@Z			; ScriptFactory::`scalar deleting destructor'
PUBLIC	??_EScriptFactory@@UAEPAXI@Z			; ScriptFactory::`vector deleting destructor'
PUBLIC	??4ScriptRegistrar@@QAEAAV0@ABV0@@Z		; ScriptRegistrar::operator=
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	?Enter@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Enter
PUBLIC	?Leave@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Leave
PUBLIC	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass
PUBLIC	??1LockClass@FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::LockClass::~LockClass
PUBLIC	??0FastCriticalSectionClass@@QAE@XZ		; FastCriticalSectionClass::FastCriticalSectionClass
PUBLIC	??0StringClass@@QAE@_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@H_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@ABV0@_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@PBD_N@Z			; StringClass::StringClass
PUBLIC	??1StringClass@@QAE@XZ				; StringClass::~StringClass
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	??4StringClass@@QAEABV0@ABV0@@Z			; StringClass::operator=
PUBLIC	??BStringClass@@QBEPBDXZ			; StringClass::operator char const *
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Peek_Buffer@StringClass@@QAEPADXZ		; StringClass::Peek_Buffer
PUBLIC	?getFormattedString@StringClass@@SA?AV1@PBDZZ	; StringClass::getFormattedString
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??_EStringClass@@QAEPAXI@Z			; StringClass::`vector deleting destructor'
PUBLIC	??1WideStringClass@@QAE@XZ			; WideStringClass::~WideStringClass
PUBLIC	??_EWideStringClass@@QAEPAXI@Z			; WideStringClass::`vector deleting destructor'
PUBLIC	??4ChunkLoadClass@@QAEAAV0@ABV0@@Z		; ChunkLoadClass::operator=
PUBLIC	?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ	; ChunkSaveClass::Set_Contains_Chunks
PUBLIC	??4ChunkSaveClass@@QAEAAV0@ABV0@@Z		; ChunkSaveClass::operator=
PUBLIC	?Is_Present@INIClass@@QBE_NPBD0@Z		; INIClass::Is_Present
PUBLIC	?Section_Present@INIClass@@QBE_NPBD@Z		; INIClass::Section_Present
PUBLIC	?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ; INIClass::Get_Section_List
PUBLIC	?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ; INIClass::Get_Section_Index
PUBLIC	?Get_File_Name@INIClass@@QAEPBDXZ		; INIClass::Get_File_Name
PUBLIC	??0INIClass@@QAE@ABV0@@Z			; INIClass::INIClass
PUBLIC	??4INIClass@@QAEAAV0@ABV0@@Z			; INIClass::operator=
PUBLIC	??_GINIClass@@UAEPAXI@Z				; INIClass::`scalar deleting destructor'
PUBLIC	??_EINIClass@@UAEPAXI@Z				; INIClass::`vector deleting destructor'
PUBLIC	??Cfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator->
PUBLIC	??Bfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator FileClass *
PUBLIC	??Dfile_auto_ptr@@QAEAAVFileClass@@XZ		; file_auto_ptr::operator*
PUBLIC	?get@file_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::get
PUBLIC	??4file_auto_ptr@@QAEAAV0@ABV0@@Z		; file_auto_ptr::operator=
PUBLIC	??0Vector4@@QAE@XZ				; Vector4::Vector4
PUBLIC	??0Vector4@@QAE@MMMM@Z				; Vector4::Vector4
PUBLIC	??4Vector4@@QAEAAV0@ABV0@@Z			; Vector4::operator=
PUBLIC	?Set@Vector4@@QAEXMMMM@Z			; Vector4::Set
PUBLIC	??AVector4@@QAEAAMH@Z				; Vector4::operator[]
PUBLIC	??AVector4@@QBEABMH@Z				; Vector4::operator[]
PUBLIC	??YVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator+=
PUBLIC	??ZVector4@@QAEAAV0@ABV0@@Z			; Vector4::operator-=
PUBLIC	??XVector4@@QAEAAV0@M@Z				; Vector4::operator*=
PUBLIC	??AMatrix3D@@QAEAAVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??AMatrix3D@@QBEABVVector4@@H@Z			; Matrix3D::operator[]
PUBLIC	??0Matrix3D@@QAE@_N@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@QAM@Z				; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@000@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@M@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@MM@Z		; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z	; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABVVector3@@@Z			; Matrix3D::Matrix3D
PUBLIC	??0Matrix3D@@QAE@ABV0@@Z			; Matrix3D::Matrix3D
PUBLIC	??4Matrix3D@@QAEAAV0@ABV0@@Z			; Matrix3D::operator=
PUBLIC	?Set@Matrix3D@@QAEXQAM@Z			; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@000@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@M@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@MM@Z		; Matrix3D::Set
PUBLIC	?Set@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Set
PUBLIC	?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Translation
PUBLIC	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Translation
PUBLIC	?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set_Translation
PUBLIC	?Get_X_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_X_Translation
PUBLIC	?Get_Y_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Y_Translation
PUBLIC	?Get_Z_Translation@Matrix3D@@QBEMXZ		; Matrix3D::Get_Z_Translation
PUBLIC	?Set_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_X_Translation
PUBLIC	?Set_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Y_Translation
PUBLIC	?Set_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Set_Z_Translation
PUBLIC	?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ; Matrix3D::Adjust_Translation
PUBLIC	?Adjust_X_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_X_Translation
PUBLIC	?Adjust_Y_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Y_Translation
PUBLIC	?Adjust_Z_Translation@Matrix3D@@QAEXM@Z		; Matrix3D::Adjust_Z_Translation
PUBLIC	?Make_Identity@Matrix3D@@QAEXXZ			; Matrix3D::Make_Identity
PUBLIC	?Translate@Matrix3D@@QAEXMMM@Z			; Matrix3D::Translate
PUBLIC	?Translate@Matrix3D@@QAEXABVVector3@@@Z		; Matrix3D::Translate
PUBLIC	?Translate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_X
PUBLIC	?Translate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Y
PUBLIC	?Translate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Translate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Rotate_X@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_X
PUBLIC	?Rotate_Y@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3D@@QAEXMM@Z			; Matrix3D::Rotate_Z
PUBLIC	?Scale@Matrix3D@@QAEXM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXMMM@Z			; Matrix3D::Scale
PUBLIC	?Scale@Matrix3D@@QAEXAAVVector3@@@Z		; Matrix3D::Scale
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXM@Z			; Matrix3D::Pre_Rotate_Z
PUBLIC	?Pre_Rotate_X@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_X
PUBLIC	?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Y
PUBLIC	?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z		; Matrix3D::Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_X
PUBLIC	?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Y
PUBLIC	?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z	; Matrix3D::In_Place_Pre_Rotate_Z
PUBLIC	?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Transform_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ	; Matrix3D::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z	; Matrix3D::Get_Z_Vector
PUBLIC	?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Rotate_Vector
PUBLIC	?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Transform_Vector
PUBLIC	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
PUBLIC	?Get_Network_ID@NetworkObjectClass@@QBEHXZ	; NetworkObjectClass::Get_Network_ID
PUBLIC	??0Matrix4@@QAE@XZ				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABV0@@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@_N@Z				; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVMatrix3D@@@Z			; Matrix4::Matrix4
PUBLIC	??0Matrix4@@QAE@ABVVector4@@000@Z		; Matrix4::Matrix4
PUBLIC	?Make_Identity@Matrix4@@QAEXXZ			; Matrix4::Make_Identity
PUBLIC	?Init@Matrix4@@QAEXABVMatrix3D@@@Z		; Matrix4::Init
PUBLIC	?Init@Matrix4@@QAEXABVVector4@@000@Z		; Matrix4::Init
PUBLIC	?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z	; Matrix4::Init_Perspective_OGL
PUBLIC	?Init_Ortho@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Ortho
PUBLIC	?Init_Perspective@Matrix4@@QAEXMMMMMM@Z		; Matrix4::Init_Perspective
PUBLIC	??AMatrix4@@QAEAAVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	??AMatrix4@@QBEABVVector4@@H@Z			; Matrix4::operator[]
PUBLIC	?Transpose@Matrix4@@QBE?AV1@XZ			; Matrix4::Transpose
PUBLIC	?Determinant@Matrix4@@QBEMXZ			; Matrix4::Determinant
PUBLIC	?Inverse@Matrix4@@QBE?AV1@XZ			; Matrix4::Inverse
PUBLIC	??4Matrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator=
PUBLIC	??YMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator+=
PUBLIC	??ZMatrix4@@QAEAAV0@ABV0@@Z			; Matrix4::operator-=
PUBLIC	??XMatrix4@@QAEAAV0@M@Z				; Matrix4::operator*=
PUBLIC	??_0Matrix4@@QAEAAV0@M@Z			; Matrix4::operator/=
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ; Matrix4::Transform_Vector
PUBLIC	?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ; Matrix4::Transform_Vector
PUBLIC	??0Matrix3@@QAE@XZ				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABV0@@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@_N@Z				; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@00@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@MMMMMMMMM@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@M@Z			; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVVector3@@MM@Z		; Matrix3::Matrix3
PUBLIC	??0Matrix3@@QAE@ABVQuaternion@@@Z		; Matrix3::Matrix3
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@00@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXMMMMMMMMM@Z			; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@M@Z		; Matrix3::Set
PUBLIC	?Set@Matrix3@@QAEXABVVector3@@MM@Z		; Matrix3::Set
PUBLIC	??AMatrix3@@QAEAAVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	??AMatrix3@@QBEABVVector3@@H@Z			; Matrix3::operator[]
PUBLIC	?Transpose@Matrix3@@QBE?AV1@XZ			; Matrix3::Transpose
PUBLIC	?Determinant@Matrix3@@QBEMXZ			; Matrix3::Determinant
PUBLIC	??4Matrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator=
PUBLIC	??YMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator+=
PUBLIC	??ZMatrix3@@QAEAAV0@ABV0@@Z			; Matrix3::operator-=
PUBLIC	??XMatrix3@@QAEAAV0@M@Z				; Matrix3::operator*=
PUBLIC	??_0Matrix3@@QAEAAV0@M@Z			; Matrix3::operator/=
PUBLIC	?Make_Identity@Matrix3@@QAEXXZ			; Matrix3::Make_Identity
PUBLIC	?Rotate_X@Matrix3@@QAEXM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_X@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_X
PUBLIC	?Rotate_Y@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Y@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Y
PUBLIC	?Rotate_Z@Matrix3@@QAEXM@Z			; Matrix3::Rotate_Z
PUBLIC	?Rotate_Z@Matrix3@@QAEXMM@Z			; Matrix3::Rotate_Z
PUBLIC	?Get_X_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_X_Rotation
PUBLIC	?Get_Y_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Y_Rotation
PUBLIC	?Get_Z_Rotation@Matrix3@@QBEMXZ			; Matrix3::Get_Z_Rotation
PUBLIC	?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ	; Matrix3::Get_Z_Vector
PUBLIC	?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_X_Vector
PUBLIC	?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Y_Vector
PUBLIC	?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z	; Matrix3::Get_Z_Vector
PUBLIC	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z		; operator*
PUBLIC	?Add@Matrix3@@SAXABV1@0PAV1@@Z			; Matrix3::Add
PUBLIC	?Subtract@Matrix3@@SAXABV1@0PAV1@@Z		; Matrix3::Subtract
PUBLIC	?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Rotate_Vector
PUBLIC	?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3::Transpose_Rotate_Vector
PUBLIC	?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ; Matrix3::Rotate_AABox_Extent
PUBLIC	?Inverse@Matrix3@@QBE?AV1@XZ			; Matrix3::Inverse
PUBLIC	??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z	; OBBoxClass::OBBoxClass
PUBLIC	??4SysTimeClass@@QAEAAV0@ABV0@@Z		; SysTimeClass::operator=
PUBLIC	?Is_Valid@DataSafeHandleClass@@QBE_NXZ		; DataSafeHandleClass::Is_Valid
PUBLIC	??BDataSafeHandleClass@@QAEHXZ			; DataSafeHandleClass::operator int
PUBLIC	?Security_Check@GenericDataSafeClass@@KAXXZ	; GenericDataSafeClass::Security_Check
PUBLIC	?Security_Fault@GenericDataSafeClass@@KAXXZ	; GenericDataSafeClass::Security_Fault
PUBLIC	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
PUBLIC	?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ; DataSafeClass<int>::Get
PUBLIC	??0PostLoadableClass@@QAE@XZ			; PostLoadableClass::PostLoadableClass
PUBLIC	??1PostLoadableClass@@UAE@XZ			; PostLoadableClass::~PostLoadableClass
PUBLIC	?On_Post_Load@PostLoadableClass@@UAEXXZ		; PostLoadableClass::On_Post_Load
PUBLIC	?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ; PostLoadableClass::Is_Post_Load_Registered
PUBLIC	?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ; PostLoadableClass::Set_Post_Load_Registered
PUBLIC	??0PostLoadableClass@@QAE@ABV0@@Z		; PostLoadableClass::PostLoadableClass
PUBLIC	??4PostLoadableClass@@QAEAAV0@ABV0@@Z		; PostLoadableClass::operator=
PUBLIC	??_GPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`scalar deleting destructor'
PUBLIC	??_EPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`vector deleting destructor'
PUBLIC	??CReferencerClass@@QAEPAVScriptableGameObj@@XZ	; ReferencerClass::operator->
PUBLIC	??0ReferencerClass@@QAE@XZ			; ReferencerClass::ReferencerClass
PUBLIC	??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z ; ReferencerClass::ReferencerClass
PUBLIC	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr
PUBLIC	?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z ; ReferencerClass::Set_Ptr
PUBLIC	??0ReferencerClass@@QAE@ABV0@@Z			; ReferencerClass::ReferencerClass
PUBLIC	??_GReferencerClass@@UAEPAXI@Z			; ReferencerClass::`scalar deleting destructor'
PUBLIC	??_EReferencerClass@@UAEPAXI@Z			; ReferencerClass::`vector deleting destructor'
PUBLIC	?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ; ReferenceableClass<ScriptableGameObj>::Get_Data
PUBLIC	?Get_ID@BaseGameObj@@QBEHXZ			; BaseGameObj::Get_ID
PUBLIC	??R?$SafeDataClass@M@@QBEAAMXZ			; SafeDataClass<float>::operator()
PUBLIC	??B?$SafeDataClass@M@@QBEMXZ			; SafeDataClass<float>::operator float
PUBLIC	??0LineSegClass@@QAE@XZ				; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABVVector3@@0@Z		; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABVVector3@@0M@Z		; LineSegClass::LineSegClass
PUBLIC	??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z	; LineSegClass::LineSegClass
PUBLIC	?Set@LineSegClass@@QAEXABVVector3@@0@Z		; LineSegClass::Set
PUBLIC	?Set@LineSegClass@@QAEXABVVector3@@0M@Z		; LineSegClass::Set
PUBLIC	?Get_P0@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_P0
PUBLIC	?Get_P1@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_P1
PUBLIC	?Get_DP@LineSegClass@@QBEABVVector3@@XZ		; LineSegClass::Get_DP
PUBLIC	?Get_Dir@LineSegClass@@QBEABVVector3@@XZ	; LineSegClass::Get_Dir
PUBLIC	?Get_Length@LineSegClass@@QBEMXZ		; LineSegClass::Get_Length
PUBLIC	?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z ; LineSegClass::Compute_Point
PUBLIC	?recalculate@LineSegClass@@IAEXXZ		; LineSegClass::recalculate
PUBLIC	??0LineSegClass@@QAE@ABV0@@Z			; LineSegClass::LineSegClass
PUBLIC	??4LineSegClass@@QAEAAV0@ABV0@@Z		; LineSegClass::operator=
PUBLIC	?Get_Transform@RenderObjClass@@QBEABVMatrix3D@@XZ ; RenderObjClass::Get_Transform
PUBLIC	?Get_Position@PhysClass@@QBEXPAVVector3@@@Z	; PhysClass::Get_Position
PUBLIC	?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ	; PhysClass::Peek_Model
PUBLIC	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
PUBLIC	?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ ; PhysicalGameObj::Get_Position
PUBLIC	?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ ; PhysicalGameObj::Peek_Model
PUBLIC	?Get_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEHXZ ; PhysicalGameObj::Get_Radar_Blip_Shape_Type
PUBLIC	?Set_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEXH@Z ; PhysicalGameObj::Set_Radar_Blip_Shape_Type
PUBLIC	?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ	; SmartGameObj::Get_Action
PUBLIC	?Get_Score@PlayerDataClass@@QBEMXZ		; PlayerDataClass::Get_Score
PUBLIC	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
PUBLIC	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
PUBLIC	??0GenericSLNode@@IAE@PAX@Z			; GenericSLNode::GenericSLNode
PUBLIC	??0JFW_Key_Hook_Base@@QAE@XZ			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
PUBLIC	??0JFW_Key_Hook_Base@@QAE@ABV0@@Z		; JFW_Key_Hook_Base::JFW_Key_Hook_Base
PUBLIC	??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z		; JFW_Key_Hook_Base::operator=
PUBLIC	??_GJFW_Key_Hook_Base@@UAEPAXI@Z		; JFW_Key_Hook_Base::`scalar deleting destructor'
PUBLIC	??_EJFW_Key_Hook_Base@@UAEPAXI@Z		; JFW_Key_Hook_Base::`vector deleting destructor'
PUBLIC	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
PUBLIC	?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
PUBLIC	?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
PUBLIC	?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
PUBLIC	?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head
PUBLIC	?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail
PUBLIC	?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove
PUBLIC	?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All
PUBLIC	?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before
PUBLIC	?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After
PUBLIC	?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty
PUBLIC	?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count
PUBLIC	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=
PUBLIC	??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor'
PUBLIC	??0MultiKeyHookScriptImpClass@@QAE@XZ		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
PUBLIC	??1MultiKeyHookScriptImpClass@@UAE@XZ		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass
PUBLIC	??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z	; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
PUBLIC	??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z	; MultiKeyHookScriptImpClass::operator=
PUBLIC	??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z	; MultiKeyHookScriptImpClass::`scalar deleting destructor'
PUBLIC	??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z	; MultiKeyHookScriptImpClass::`vector deleting destructor'
PUBLIC	??0JFW_Object_Created_Hook_Base@@QAE@XZ		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
PUBLIC	??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
PUBLIC	??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z ; JFW_Object_Created_Hook_Base::operator=
PUBLIC	??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z	; JFW_Object_Created_Hook_Base::`scalar deleting destructor'
PUBLIC	??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z	; JFW_Object_Created_Hook_Base::`vector deleting destructor'
PUBLIC	?Created@dp88_randomWeather@@EAEXPAVScriptableGameObj@@@Z ; dp88_randomWeather::Created
PUBLIC	?Timer_Expired@dp88_randomWeather@@EAEXPAVScriptableGameObj@@H@Z ; dp88_randomWeather::Timer_Expired
PUBLIC	??0dp88_randomWeather@@QAE@XZ			; dp88_randomWeather::dp88_randomWeather
PUBLIC	??1dp88_randomWeather@@UAE@XZ			; dp88_randomWeather::~dp88_randomWeather
PUBLIC	??_Gdp88_randomWeather@@UAEPAXI@Z		; dp88_randomWeather::`scalar deleting destructor'
PUBLIC	?Created@dp88_unitSounds@@EAEXPAVScriptableGameObj@@@Z ; dp88_unitSounds::Created
PUBLIC	?Damaged@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_unitSounds::Damaged
PUBLIC	?Killed@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0@Z ; dp88_unitSounds::Killed
PUBLIC	?Timer_Expired@dp88_unitSounds@@EAEXPAVScriptableGameObj@@H@Z ; dp88_unitSounds::Timer_Expired
PUBLIC	?Custom@dp88_unitSounds@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_unitSounds::Custom
PUBLIC	??0dp88_unitSounds@@QAE@XZ			; dp88_unitSounds::dp88_unitSounds
PUBLIC	??1dp88_unitSounds@@UAE@XZ			; dp88_unitSounds::~dp88_unitSounds
PUBLIC	??_Gdp88_unitSounds@@UAEPAXI@Z			; dp88_unitSounds::`scalar deleting destructor'
PUBLIC	?Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z ; dp88_uniqueInfantry_controller::Created
PUBLIC	?ObjectCreateHook@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z ; dp88_uniqueInfantry_controller::ObjectCreateHook
PUBLIC	?Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z ; dp88_uniqueInfantry_controller::Destroyed
PUBLIC	??0dp88_uniqueInfantry_controller@@QAE@XZ	; dp88_uniqueInfantry_controller::dp88_uniqueInfantry_controller
PUBLIC	??1dp88_uniqueInfantry_controller@@UAE@XZ	; dp88_uniqueInfantry_controller::~dp88_uniqueInfantry_controller
PUBLIC	??_Gdp88_uniqueInfantry_controller@@UAEPAXI@Z	; dp88_uniqueInfantry_controller::`scalar deleting destructor'
PUBLIC	?Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z ; dp88_damageAnimation::Created
PUBLIC	?Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z ; dp88_damageAnimation::Detach
PUBLIC	?Damaged@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_damageAnimation::Damaged
PUBLIC	?Timer_Expired@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@H@Z ; dp88_damageAnimation::Timer_Expired
PUBLIC	?SetDamageAnimation@dp88_damageAnimation@@AAEXPAVScriptableGameObj@@@Z ; dp88_damageAnimation::SetDamageAnimation
PUBLIC	??0dp88_damageAnimation@@QAE@XZ			; dp88_damageAnimation::dp88_damageAnimation
PUBLIC	??1dp88_damageAnimation@@UAE@XZ			; dp88_damageAnimation::~dp88_damageAnimation
PUBLIC	??_Gdp88_damageAnimation@@UAEPAXI@Z		; dp88_damageAnimation::`scalar deleting destructor'
PUBLIC	?Created@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@@Z ; dp88_objectAnnouncements::Created
PUBLIC	?Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z ; dp88_objectAnnouncements::Damaged
PUBLIC	?Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z ; dp88_objectAnnouncements::Killed
PUBLIC	??0dp88_objectAnnouncements@@QAE@XZ		; dp88_objectAnnouncements::dp88_objectAnnouncements
PUBLIC	??1dp88_objectAnnouncements@@UAE@XZ		; dp88_objectAnnouncements::~dp88_objectAnnouncements
PUBLIC	??_Gdp88_objectAnnouncements@@UAEPAXI@Z		; dp88_objectAnnouncements::`scalar deleting destructor'
PUBLIC	?Created@dp88_chronoTank@@EAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Created
PUBLIC	?Killed@dp88_chronoTank@@EAEXPAVScriptableGameObj@@0@Z ; dp88_chronoTank::Killed
PUBLIC	?Custom@dp88_chronoTank@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_chronoTank::Custom
PUBLIC	?Timer_Expired@dp88_chronoTank@@EAEXPAVScriptableGameObj@@H@Z ; dp88_chronoTank::Timer_Expired
PUBLIC	?KeyHook@dp88_chronoTank@@EAEXXZ		; dp88_chronoTank::KeyHook
PUBLIC	?Shift_Out_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_Out_Begin
PUBLIC	?Shift_Out_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_Out_Complete
PUBLIC	?Shift_Out_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_Out_Cleanup
PUBLIC	?Shift_In_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_In_Begin
PUBLIC	?Shift_In_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_In_Complete
PUBLIC	?Shift_In_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_In_Cleanup
PUBLIC	??0dp88_chronoTank@@QAE@XZ			; dp88_chronoTank::dp88_chronoTank
PUBLIC	??1dp88_chronoTank@@UAE@XZ			; dp88_chronoTank::~dp88_chronoTank
PUBLIC	??_Gdp88_chronoTank@@UAEPAXI@Z			; dp88_chronoTank::`scalar deleting destructor'
PUBLIC	?Created@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z ; dp88_spawnVehiclePart::Created
PUBLIC	?Timer_Expired@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@H@Z ; dp88_spawnVehiclePart::Timer_Expired
PUBLIC	?Killed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@0@Z ; dp88_spawnVehiclePart::Killed
PUBLIC	?Destroyed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z ; dp88_spawnVehiclePart::Destroyed
PUBLIC	??0dp88_spawnVehiclePart@@QAE@XZ		; dp88_spawnVehiclePart::dp88_spawnVehiclePart
PUBLIC	??1dp88_spawnVehiclePart@@UAE@XZ		; dp88_spawnVehiclePart::~dp88_spawnVehiclePart
PUBLIC	??_Gdp88_spawnVehiclePart@@UAEPAXI@Z		; dp88_spawnVehiclePart::`scalar deleting destructor'
PUBLIC	?Created@dp88_customPoints@@MAEXPAVScriptableGameObj@@@Z ; dp88_customPoints::Created
PUBLIC	?Damaged@dp88_customPoints@@MAEXPAVScriptableGameObj@@0M@Z ; dp88_customPoints::Damaged
PUBLIC	?Killed@dp88_customPoints@@MAEXPAVScriptableGameObj@@0@Z ; dp88_customPoints::Killed
PUBLIC	?GivePointsAndMoney@dp88_customPoints@@IAEXPAVScriptableGameObj@@MM@Z ; dp88_customPoints::GivePointsAndMoney
PUBLIC	??0dp88_customPoints@@QAE@XZ			; dp88_customPoints::dp88_customPoints
PUBLIC	??1dp88_customPoints@@UAE@XZ			; dp88_customPoints::~dp88_customPoints
PUBLIC	??_Gdp88_customPoints@@UAEPAXI@Z		; dp88_customPoints::`scalar deleting destructor'
PUBLIC	?Created@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@@Z ; dp88_customPointsPercentage::Created
PUBLIC	?Damaged@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0M@Z ; dp88_customPointsPercentage::Damaged
PUBLIC	?Killed@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0@Z ; dp88_customPointsPercentage::Killed
PUBLIC	?GivePointsAndMoney@dp88_customPointsPercentage@@IAEXPAVScriptableGameObj@@MM@Z ; dp88_customPointsPercentage::GivePointsAndMoney
PUBLIC	??0dp88_customPointsPercentage@@QAE@XZ		; dp88_customPointsPercentage::dp88_customPointsPercentage
PUBLIC	??1dp88_customPointsPercentage@@UAE@XZ		; dp88_customPointsPercentage::~dp88_customPointsPercentage
PUBLIC	??_Gdp88_customPointsPercentage@@UAEPAXI@Z	; dp88_customPointsPercentage::`scalar deleting destructor'
PUBLIC	?Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z ; dp88_conquestController::Created
PUBLIC	?Destroyed@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z ; dp88_conquestController::Destroyed
PUBLIC	?Timer_Expired@dp88_conquestController@@EAEXPAVScriptableGameObj@@H@Z ; dp88_conquestController::Timer_Expired
PUBLIC	?Custom@dp88_conquestController@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_conquestController::Custom
PUBLIC	?GetWinningTeamID@dp88_conquestController@@AAEHXZ ; dp88_conquestController::GetWinningTeamID
PUBLIC	?GetLosingTeamID@dp88_conquestController@@AAEHXZ ; dp88_conquestController::GetLosingTeamID
PUBLIC	?DisplayMessage@dp88_conquestController@@AAEXVStringClass@@@Z ; dp88_conquestController::DisplayMessage
PUBLIC	??0dp88_conquestController@@QAE@XZ		; dp88_conquestController::dp88_conquestController
PUBLIC	??1dp88_conquestController@@UAE@XZ		; dp88_conquestController::~dp88_conquestController
PUBLIC	??_Gdp88_conquestController@@UAEPAXI@Z		; dp88_conquestController::`scalar deleting destructor'
PUBLIC	?Created@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@@Z ; dp88_conquestControlZone::Created
PUBLIC	?Timer_Expired@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@H@Z ; dp88_conquestControlZone::Timer_Expired
PUBLIC	?IncrementCaptureProgress@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@HH@Z ; dp88_conquestControlZone::IncrementCaptureProgress
PUBLIC	?UpdateAnimationFrame@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@@Z ; dp88_conquestControlZone::UpdateAnimationFrame
PUBLIC	?ChangeOwner@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@H@Z ; dp88_conquestControlZone::ChangeOwner
PUBLIC	?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z ; dp88_conquestControlZone::DisplayMessage
PUBLIC	??0dp88_conquestControlZone@@QAE@XZ		; dp88_conquestControlZone::dp88_conquestControlZone
PUBLIC	??1dp88_conquestControlZone@@UAE@XZ		; dp88_conquestControlZone::~dp88_conquestControlZone
PUBLIC	??_Gdp88_conquestControlZone@@UAEPAXI@Z		; dp88_conquestControlZone::`scalar deleting destructor'
PUBLIC	?Created@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@@Z ; dp88_conquestControlObject::Created
PUBLIC	?Timer_Expired@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@H@Z ; dp88_conquestControlObject::Timer_Expired
PUBLIC	??0dp88_conquestControlObject@@QAE@XZ		; dp88_conquestControlObject::dp88_conquestControlObject
PUBLIC	??1dp88_conquestControlObject@@UAE@XZ		; dp88_conquestControlObject::~dp88_conquestControlObject
PUBLIC	??_Gdp88_conquestControlObject@@UAEPAXI@Z	; dp88_conquestControlObject::`scalar deleting destructor'
PUBLIC	??0dp88_radarInvisibility@@QAE@XZ		; dp88_radarInvisibility::dp88_radarInvisibility
PUBLIC	?Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z ; dp88_radarInvisibility::Created
PUBLIC	?Custom@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@HH0@Z ; dp88_radarInvisibility::Custom
PUBLIC	?Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z ; dp88_radarInvisibility::Detach
PUBLIC	?HidePassengerBlip@dp88_radarInvisibility@@IAEXPAVVehicleGameObj@@PAVSoldierGameObj@@@Z ; dp88_radarInvisibility::HidePassengerBlip
PUBLIC	?RestorePassengerBlip@dp88_radarInvisibility@@IAEXPAVSoldierGameObj@@@Z ; dp88_radarInvisibility::RestorePassengerBlip
PUBLIC	??1dp88_radarInvisibility@@UAE@XZ		; dp88_radarInvisibility::~dp88_radarInvisibility
PUBLIC	??_Gdp88_radarInvisibility@@UAEPAXI@Z		; dp88_radarInvisibility::`scalar deleting destructor'
PUBLIC	?Created@dp88_turretSound@@MAEXPAVScriptableGameObj@@@Z ; dp88_turretSound::Created
PUBLIC	?Timer_Expired@dp88_turretSound@@MAEXPAVScriptableGameObj@@H@Z ; dp88_turretSound::Timer_Expired
PUBLIC	?Custom@dp88_turretSound@@MAEXPAVScriptableGameObj@@HH0@Z ; dp88_turretSound::Custom
PUBLIC	?Get_Turret_Facing@dp88_turretSound@@IAEMPAVRenderObjClass@@@Z ; dp88_turretSound::Get_Turret_Facing
PUBLIC	?Play_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z ; dp88_turretSound::Play_Sound
PUBLIC	?Stop_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z ; dp88_turretSound::Stop_Sound
PUBLIC	??0dp88_turretSound@@QAE@XZ			; dp88_turretSound::dp88_turretSound
PUBLIC	??1dp88_turretSound@@UAE@XZ			; dp88_turretSound::~dp88_turretSound
PUBLIC	??_Gdp88_turretSound@@UAEPAXI@Z			; dp88_turretSound::`scalar deleting destructor'
PUBLIC	?Created@dp88_teleport@@MAEXPAVScriptableGameObj@@@Z ; dp88_teleport::Created
PUBLIC	?Entered@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z ; dp88_teleport::Entered
PUBLIC	?Custom@dp88_teleport@@MAEXPAVScriptableGameObj@@HH0@Z ; dp88_teleport::Custom
PUBLIC	?Poked@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z ; dp88_teleport::Poked
PUBLIC	??0dp88_teleport@@QAE@XZ			; dp88_teleport::dp88_teleport
PUBLIC	??1dp88_teleport@@UAE@XZ			; dp88_teleport::~dp88_teleport
PUBLIC	??_Gdp88_teleport@@UAEPAXI@Z			; dp88_teleport::`scalar deleting destructor'
PUBLIC	?Created@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@@Z ; dp88_Ammo_Animation::Created
PUBLIC	?Timer_Expired@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@H@Z ; dp88_Ammo_Animation::Timer_Expired
PUBLIC	?UpdateAnimationFrame@dp88_Ammo_Animation@@IAEXPAVScriptableGameObj@@@Z ; dp88_Ammo_Animation::UpdateAnimationFrame
PUBLIC	??0dp88_Ammo_Animation@@QAE@XZ			; dp88_Ammo_Animation::dp88_Ammo_Animation
PUBLIC	??1dp88_Ammo_Animation@@UAE@XZ			; dp88_Ammo_Animation::~dp88_Ammo_Animation
PUBLIC	??_Gdp88_Ammo_Animation@@UAEPAXI@Z		; dp88_Ammo_Animation::`scalar deleting destructor'
PUBLIC	?Created@dp88_Camo_Controller@@UAEXPAVScriptableGameObj@@@Z ; dp88_Camo_Controller::Created
PUBLIC	?GetCamoVariant@dp88_Camo_Controller@@QBEPBDXZ	; dp88_Camo_Controller::GetCamoVariant
PUBLIC	??0dp88_Camo_Controller@@QAE@XZ			; dp88_Camo_Controller::dp88_Camo_Controller
PUBLIC	??1dp88_Camo_Controller@@UAE@XZ			; dp88_Camo_Controller::~dp88_Camo_Controller
PUBLIC	??_Gdp88_Camo_Controller@@UAEPAXI@Z		; dp88_Camo_Controller::`scalar deleting destructor'
PUBLIC	?Created@dp88_Camo_Object@@UAEXPAVScriptableGameObj@@@Z ; dp88_Camo_Object::Created
PUBLIC	??0dp88_Camo_Object@@QAE@XZ			; dp88_Camo_Object::dp88_Camo_Object
PUBLIC	??1dp88_Camo_Object@@UAE@XZ			; dp88_Camo_Object::~dp88_Camo_Object
PUBLIC	??_Gdp88_Camo_Object@@UAEPAXI@Z			; dp88_Camo_Object::`scalar deleting destructor'
PUBLIC	?Created@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@@Z ; dp88_Create_Object_Cinematic::Created
PUBLIC	?Custom@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_Create_Object_Cinematic::Custom
PUBLIC	?Create_Object@dp88_Create_Object_Cinematic@@IAEXPAVScriptableGameObj@@0@Z ; dp88_Create_Object_Cinematic::Create_Object
PUBLIC	??0dp88_Create_Object_Cinematic@@QAE@XZ		; dp88_Create_Object_Cinematic::dp88_Create_Object_Cinematic
PUBLIC	??1dp88_Create_Object_Cinematic@@UAE@XZ		; dp88_Create_Object_Cinematic::~dp88_Create_Object_Cinematic
PUBLIC	??_Gdp88_Create_Object_Cinematic@@UAEPAXI@Z	; dp88_Create_Object_Cinematic::`scalar deleting destructor'
PUBLIC	?Custom@dp88_Set_Team_On_Custom@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_Set_Team_On_Custom::Custom
PUBLIC	??0dp88_Set_Team_On_Custom@@QAE@XZ		; dp88_Set_Team_On_Custom::dp88_Set_Team_On_Custom
PUBLIC	??1dp88_Set_Team_On_Custom@@UAE@XZ		; dp88_Set_Team_On_Custom::~dp88_Set_Team_On_Custom
PUBLIC	??_Gdp88_Set_Team_On_Custom@@UAEPAXI@Z		; dp88_Set_Team_On_Custom::`scalar deleting destructor'
PUBLIC	?Created@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@@Z ; dp88_RegenerateHitpoints::Created
PUBLIC	?Timer_Expired@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@H@Z ; dp88_RegenerateHitpoints::Timer_Expired
PUBLIC	?Damaged@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@0M@Z ; dp88_RegenerateHitpoints::Damaged
PUBLIC	?Custom@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@HH0@Z ; dp88_RegenerateHitpoints::Custom
PUBLIC	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
PUBLIC	?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z ; dp88_RegenerateHitpoints::RegenObject
PUBLIC	?ApplyNonWarheadRepairs@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@M_N1@Z ; dp88_RegenerateHitpoints::ApplyNonWarheadRepairs
PUBLIC	??0dp88_RegenerateHitpoints@@QAE@XZ		; dp88_RegenerateHitpoints::dp88_RegenerateHitpoints
PUBLIC	??1dp88_RegenerateHitpoints@@UAE@XZ		; dp88_RegenerateHitpoints::~dp88_RegenerateHitpoints
PUBLIC	??_Gdp88_RegenerateHitpoints@@UAEPAXI@Z		; dp88_RegenerateHitpoints::`scalar deleting destructor'
PUBLIC	?Created@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@@Z ; dp88_CreateAttachedObject::Created
PUBLIC	?Killed@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@0@Z ; dp88_CreateAttachedObject::Killed
PUBLIC	?Custom@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@HH0@Z ; dp88_CreateAttachedObject::Custom
PUBLIC	??0dp88_CreateAttachedObject@@QAE@XZ		; dp88_CreateAttachedObject::dp88_CreateAttachedObject
PUBLIC	??1dp88_CreateAttachedObject@@UAE@XZ		; dp88_CreateAttachedObject::~dp88_CreateAttachedObject
PUBLIC	??_Gdp88_CreateAttachedObject@@UAEPAXI@Z	; dp88_CreateAttachedObject::`scalar deleting destructor'
PUBLIC	?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ	; VehicleGameObjDef::Get_Seat_Count
PUBLIC	??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z		; ArmorWarheadManager::operator=
PUBLIC	?Get_Occupant@VehicleGameObj@@QAEPAVSoldierGameObj@@H@Z ; VehicleGameObj::Get_Occupant
PUBLIC	?Damage_Meshes_Update@VehicleGameObj@@QAEXXZ	; VehicleGameObj::Damage_Meshes_Update
PUBLIC	??A?$VectorClass@PAVSoldierGameObj@@@@QAEAAPAVSoldierGameObj@@H@Z ; VectorClass<SoldierGameObj *>::operator[]
PUBLIC	?Head@?$SList@VBaseGameObj@@@@QBEPAV?$SLNode@VBaseGameObj@@@@XZ ; SList<BaseGameObj>::Head
PUBLIC	??0?$ScriptRegistrant@Vdp88_randomWeather@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_randomWeather>::ScriptRegistrant<dp88_randomWeather>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_randomWeather>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_randomWeather@@@@UAE@XZ ; ScriptRegistrant<dp88_randomWeather>::~ScriptRegistrant<dp88_randomWeather>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_randomWeather>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_unitSounds@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_unitSounds>::ScriptRegistrant<dp88_unitSounds>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_unitSounds>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_unitSounds@@@@UAE@XZ ; ScriptRegistrant<dp88_unitSounds>::~ScriptRegistrant<dp88_unitSounds>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_unitSounds>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_uniqueInfantry_controller>::ScriptRegistrant<dp88_uniqueInfantry_controller>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_uniqueInfantry_controller>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAE@XZ ; ScriptRegistrant<dp88_uniqueInfantry_controller>::~ScriptRegistrant<dp88_uniqueInfantry_controller>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_damageAnimation@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_damageAnimation>::ScriptRegistrant<dp88_damageAnimation>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_damageAnimation>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAE@XZ ; ScriptRegistrant<dp88_damageAnimation>::~ScriptRegistrant<dp88_damageAnimation>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_damageAnimation>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_objectAnnouncements>::ScriptRegistrant<dp88_objectAnnouncements>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_objectAnnouncements>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAE@XZ ; ScriptRegistrant<dp88_objectAnnouncements>::~ScriptRegistrant<dp88_objectAnnouncements>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_objectAnnouncements>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_chronoTank@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_chronoTank>::ScriptRegistrant<dp88_chronoTank>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_chronoTank>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_chronoTank@@@@UAE@XZ ; ScriptRegistrant<dp88_chronoTank>::~ScriptRegistrant<dp88_chronoTank>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_chronoTank>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_spawnVehiclePart>::ScriptRegistrant<dp88_spawnVehiclePart>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_spawnVehiclePart>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAE@XZ ; ScriptRegistrant<dp88_spawnVehiclePart>::~ScriptRegistrant<dp88_spawnVehiclePart>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_spawnVehiclePart>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_customPoints@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_customPoints>::ScriptRegistrant<dp88_customPoints>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_customPoints>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_customPoints@@@@UAE@XZ ; ScriptRegistrant<dp88_customPoints>::~ScriptRegistrant<dp88_customPoints>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_customPoints>::`scalar deleting destructor'
PUBLIC	?dp88_conquestController_ObjectCreateHook@@YAXPAXPAVScriptableGameObj@@@Z ; dp88_conquestController_ObjectCreateHook
PUBLIC	?Next@?$SLNode@VBaseGameObj@@@@QBEPAV1@XZ	; SLNode<BaseGameObj>::Next
PUBLIC	?Data@?$SLNode@VBaseGameObj@@@@QBEPAVBaseGameObj@@XZ ; SLNode<BaseGameObj>::Data
PUBLIC	??0?$ScriptRegistrant@Vdp88_conquestController@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_conquestController>::ScriptRegistrant<dp88_conquestController>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_conquestController>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_conquestController@@@@UAE@XZ ; ScriptRegistrant<dp88_conquestController>::~ScriptRegistrant<dp88_conquestController>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_conquestController>::`scalar deleting destructor'
PUBLIC	?Head@?$SList@VSmartGameObj@@@@QBEPAV?$SLNode@VSmartGameObj@@@@XZ ; SList<SmartGameObj>::Head
PUBLIC	?Next@?$SLNode@VSmartGameObj@@@@QBEPAV1@XZ	; SLNode<SmartGameObj>::Next
PUBLIC	?Data@?$SLNode@VSmartGameObj@@@@QBEPAVSmartGameObj@@XZ ; SLNode<SmartGameObj>::Data
PUBLIC	??0?$ScriptRegistrant@Vdp88_conquestControlZone@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_conquestControlZone>::ScriptRegistrant<dp88_conquestControlZone>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_conquestControlZone>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAE@XZ ; ScriptRegistrant<dp88_conquestControlZone>::~ScriptRegistrant<dp88_conquestControlZone>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_conquestControlZone>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_conquestControlObject@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_conquestControlObject>::ScriptRegistrant<dp88_conquestControlObject>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_conquestControlObject>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAE@XZ ; ScriptRegistrant<dp88_conquestControlObject>::~ScriptRegistrant<dp88_conquestControlObject>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_conquestControlObject>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_radarInvisibility@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_radarInvisibility>::ScriptRegistrant<dp88_radarInvisibility>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_radarInvisibility>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAE@XZ ; ScriptRegistrant<dp88_radarInvisibility>::~ScriptRegistrant<dp88_radarInvisibility>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_radarInvisibility>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_turretSound@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_turretSound>::ScriptRegistrant<dp88_turretSound>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_turretSound>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_turretSound@@@@UAE@XZ ; ScriptRegistrant<dp88_turretSound>::~ScriptRegistrant<dp88_turretSound>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_turretSound>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_teleport@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_teleport>::ScriptRegistrant<dp88_teleport>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_teleport>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_teleport@@@@UAE@XZ	; ScriptRegistrant<dp88_teleport>::~ScriptRegistrant<dp88_teleport>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_teleport>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ammo_Animation>::ScriptRegistrant<dp88_Ammo_Animation>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Ammo_Animation>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAE@XZ ; ScriptRegistrant<dp88_Ammo_Animation>::~ScriptRegistrant<dp88_Ammo_Animation>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Ammo_Animation>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Camo_Controller@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Camo_Controller>::ScriptRegistrant<dp88_Camo_Controller>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Camo_Controller>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAE@XZ ; ScriptRegistrant<dp88_Camo_Controller>::~ScriptRegistrant<dp88_Camo_Controller>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Camo_Controller>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Camo_Object@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Camo_Object>::ScriptRegistrant<dp88_Camo_Object>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Camo_Object>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAE@XZ ; ScriptRegistrant<dp88_Camo_Object>::~ScriptRegistrant<dp88_Camo_Object>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Camo_Object>::`scalar deleting destructor'
PUBLIC	??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ		; sprintf_s<128>
PUBLIC	??0?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Create_Object_Cinematic>::ScriptRegistrant<dp88_Create_Object_Cinematic>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Create_Object_Cinematic>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAE@XZ ; ScriptRegistrant<dp88_Create_Object_Cinematic>::~ScriptRegistrant<dp88_Create_Object_Cinematic>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Set_Team_On_Custom>::ScriptRegistrant<dp88_Set_Team_On_Custom>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_Set_Team_On_Custom>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAE@XZ ; ScriptRegistrant<dp88_Set_Team_On_Custom>::~ScriptRegistrant<dp88_Set_Team_On_Custom>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_RegenerateHitpoints>::ScriptRegistrant<dp88_RegenerateHitpoints>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_RegenerateHitpoints>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAE@XZ ; ScriptRegistrant<dp88_RegenerateHitpoints>::~ScriptRegistrant<dp88_RegenerateHitpoints>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_RegenerateHitpoints>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_CreateAttachedObject>::ScriptRegistrant<dp88_CreateAttachedObject>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_CreateAttachedObject>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAE@XZ ; ScriptRegistrant<dp88_CreateAttachedObject>::~ScriptRegistrant<dp88_CreateAttachedObject>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_CreateAttachedObject>::`scalar deleting destructor'
PUBLIC	??0?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_customPointsPercentage>::ScriptRegistrant<dp88_customPointsPercentage>
PUBLIC	?Create@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAVScriptImpClass@@XZ ; ScriptRegistrant<dp88_customPointsPercentage>::Create
PUBLIC	??1?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAE@XZ ; ScriptRegistrant<dp88_customPointsPercentage>::~ScriptRegistrant<dp88_customPointsPercentage>
PUBLIC	??_G?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAXI@Z ; ScriptRegistrant<dp88_customPointsPercentage>::`scalar deleting destructor'
PUBLIC	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next
PUBLIC	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
PUBLIC	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
PUBLIC	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
PUBLIC	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
PUBLIC	??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
PUBLIC	??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
PUBLIC	?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory
PUBLIC	?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
PUBLIC	?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern
PUBLIC	??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
PUBLIC	??B?$RefArray@D$03@@QAEPADXZ			; RefArray<char,4>::operator char *
PUBLIC	??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
PUBLIC	?Get@?$DataSafeClass@M@@SA_NVDataSafeHandleClass@@AAPAM@Z ; DataSafeClass<float>::Get
PUBLIC	??_7GameObjObserverClass@@6B@			; GameObjObserverClass::`vftable'
PUBLIC	??_7ScriptClass@@6B@				; ScriptClass::`vftable'
PUBLIC	??_7ScriptImpClass@@6B@				; ScriptImpClass::`vftable'
PUBLIC	??_7ScriptFactory@@6B@				; ScriptFactory::`vftable'
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_7INIClass@@6B@				; INIClass::`vftable'
PUBLIC	?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA ; `GenericDataSafeClass::Security_Check'::`2'::_checking
PUBLIC	?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA ; `GenericDataSafeClass::Security_Check'::`2'::_calls
PUBLIC	??_7PostLoadableClass@@6B@			; PostLoadableClass::`vftable'
PUBLIC	??_7ReferencerClass@@6B@			; ReferencerClass::`vftable'
PUBLIC	??_7JFW_Key_Hook_Base@@6B@			; JFW_Key_Hook_Base::`vftable'
PUBLIC	??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vftable'
PUBLIC	??_7MultiKeyHookScriptImpClass@@6B@		; MultiKeyHookScriptImpClass::`vftable'
PUBLIC	??_7JFW_Object_Created_Hook_Base@@6B@		; JFW_Object_Created_Hook_Base::`vftable'
PUBLIC	??_7dp88_randomWeather@@6B@			; dp88_randomWeather::`vftable'
PUBLIC	??_7dp88_unitSounds@@6B@			; dp88_unitSounds::`vftable'
PUBLIC	??_7dp88_uniqueInfantry_controller@@6B@		; dp88_uniqueInfantry_controller::`vftable'
PUBLIC	??_7dp88_damageAnimation@@6B@			; dp88_damageAnimation::`vftable'
PUBLIC	??_7dp88_objectAnnouncements@@6B@		; dp88_objectAnnouncements::`vftable'
PUBLIC	??_7dp88_chronoTank@@6B@			; dp88_chronoTank::`vftable'
PUBLIC	??_7dp88_spawnVehiclePart@@6B@			; dp88_spawnVehiclePart::`vftable'
PUBLIC	??_7dp88_customPoints@@6B@			; dp88_customPoints::`vftable'
PUBLIC	??_7dp88_customPointsPercentage@@6B@		; dp88_customPointsPercentage::`vftable'
PUBLIC	??_7dp88_conquestController@@6B@		; dp88_conquestController::`vftable'
PUBLIC	??_7dp88_conquestControlZone@@6B@		; dp88_conquestControlZone::`vftable'
PUBLIC	??_7dp88_conquestControlObject@@6B@		; dp88_conquestControlObject::`vftable'
PUBLIC	??_7dp88_radarInvisibility@@6B@			; dp88_radarInvisibility::`vftable'
PUBLIC	??_7dp88_turretSound@@6B@			; dp88_turretSound::`vftable'
PUBLIC	??_7dp88_teleport@@6B@				; dp88_teleport::`vftable'
PUBLIC	??_7dp88_Ammo_Animation@@6B@			; dp88_Ammo_Animation::`vftable'
PUBLIC	??_7dp88_Camo_Controller@@6B@			; dp88_Camo_Controller::`vftable'
PUBLIC	??_7dp88_Camo_Object@@6B@			; dp88_Camo_Object::`vftable'
PUBLIC	??_7dp88_Create_Object_Cinematic@@6B@		; dp88_Create_Object_Cinematic::`vftable'
PUBLIC	??_7dp88_Set_Team_On_Custom@@6B@		; dp88_Set_Team_On_Custom::`vftable'
PUBLIC	??_7dp88_RegenerateHitpoints@@6B@		; dp88_RegenerateHitpoints::`vftable'
PUBLIC	??_7dp88_CreateAttachedObject@@6B@		; dp88_CreateAttachedObject::`vftable'
PUBLIC	??_C@_0BE@HFKMOJBJ@update_interval_max?$AA@	; `string'
PUBLIC	??_C@_0BE@GHCHANHG@update_interval_min?$AA@	; `string'
PUBLIC	??_C@_0BD@NIDGNOJM@probability_change?$AA@	; `string'
PUBLIC	??_C@_0BH@EAMNBDJP@fog_start_distance_max?$AA@	; `string'
PUBLIC	??_C@_0BH@FCEGPHPA@fog_start_distance_min?$AA@	; `string'
PUBLIC	??_C@_0BF@EOPDOMBG@fog_end_distance_max?$AA@	; `string'
PUBLIC	??_C@_0BF@FMHIAIHJ@fog_end_distance_min?$AA@	; `string'
PUBLIC	??_C@_0BK@BPCGMILK@precipitation_density_max?$AA@ ; `string'
PUBLIC	??_C@_0BK@NKNCMNF@precipitation_density_min?$AA@ ; `string'
PUBLIC	??_C@_0BP@MFKHFMGM@precipitation_probability_snow?$AA@ ; `string'
PUBLIC	??_C@_0BP@DPCJLACA@precipitation_probability_rain?$AA@ ; `string'
PUBLIC	??_C@_0CH@KLINGEFD@precipitation_probability_volcan@ ; `string'
PUBLIC	??_C@_0BH@IMDLENDJ@lighting_intensity_max?$AA@	; `string'
PUBLIC	??_C@_0BH@JOLAKJFG@lighting_intensity_min?$AA@	; `string'
PUBLIC	??_C@_0BM@ELGKDIPJ@lighting_start_distance_max?$AA@ ; `string'
PUBLIC	??_C@_0BM@FJOBNMJG@lighting_start_distance_min?$AA@ ; `string'
PUBLIC	??_C@_0BK@GGFLJENI@lighting_end_distance_max?$AA@ ; `string'
PUBLIC	??_C@_0BK@HENAHALH@lighting_end_distance_min?$AA@ ; `string'
PUBLIC	??_C@_0BF@JLDPMMAB@lighting_heading_max?$AA@	; `string'
PUBLIC	??_C@_0BF@IJLECIGO@lighting_heading_min?$AA@	; `string'
PUBLIC	??_C@_0BK@JEJGOJCM@lighting_distribution_max?$AA@ ; `string'
PUBLIC	??_C@_0BK@IGBNANED@lighting_distribution_min?$AA@ ; `string'
PUBLIC	??_C@_0BM@DAJAJHBL@lighting_probability_normal?$AA@ ; `string'
PUBLIC	??_C@_0BP@LEGLJNCE@lighting_probability_war_blitz?$AA@ ; `string'
PUBLIC	??_C@_0BB@GOJNIJEO@wind_heading_max?$AA@	; `string'
PUBLIC	??_C@_0BB@HMBGGNCB@wind_heading_min?$AA@	; `string'
PUBLIC	??_C@_0P@EBDMKJAO@wind_speed_max?$AA@		; `string'
PUBLIC	??_C@_0P@FDLHENGB@wind_speed_min?$AA@		; `string'
PUBLIC	??_C@_0BF@EIIDAABA@wind_variability_max?$AA@	; `string'
PUBLIC	??_C@_0BF@FKAIOEHP@wind_variability_min?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_randomWeather@@@@6B@ ; ScriptRegistrant<dp88_randomWeather>::`vftable'
PUBLIC	?dp88_randomWeather_Registrant@@3V?$ScriptRegistrant@Vdp88_randomWeather@@@@A ; dp88_randomWeather_Registrant
PUBLIC	??_C@_0DME@NDLEMFCK@update_interval_min?$DN20?3int?0updat@ ; `string'
PUBLIC	??_C@_0BD@HJFJPFLD@dp88_randomWeather?$AA@	; `string'
PUBLIC	??_C@_04MLLLIHIP@null?$AA@			; `string'
PUBLIC	??_C@_0N@FAJJJDKA@createdSound?$AA@		; `string'
PUBLIC	??_C@_06NHCMNMEH@origin?$AA@			; `string'
PUBLIC	??_C@_0N@HJOCDFAF@damagedSound?$AA@		; `string'
PUBLIC	??_C@_0BE@EBDFLGEH@heavilyDamagedSound?$AA@	; `string'
PUBLIC	??_C@_0M@GGDGEACJ@healedSound?$AA@		; `string'
PUBLIC	??_C@_0BD@ODPFHLGP@fallingDamageSound?$AA@	; `string'
PUBLIC	??_C@_0CD@LHBDKIJI@heavilyDamagedSoundMinDamageAmou@ ; `string'
PUBLIC	??_C@_0BP@KNDMHEJA@heavilyDamagedSoundProbability?$AA@ ; `string'
PUBLIC	??_C@_0BP@NCEDOML@heavilyDamagedSoundMinInterval?$AA@ ; `string'
PUBLIC	??_C@_0BI@IGEACIE@damagedSoundProbability?$AA@	; `string'
PUBLIC	??_C@_0BI@KIHMEINP@damagedSoundMinInterval?$AA@	; `string'
PUBLIC	??_C@_0BF@BDLJAEAI@healedSoundCheckTime?$AA@	; `string'
PUBLIC	??_C@_0BJ@CJHOHEKB@healedSoundMinHealAmount?$AA@ ; `string'
PUBLIC	??_C@_0BH@NIOKCIKB@healedSoundMinInterval?$AA@	; `string'
PUBLIC	??_C@_0M@OOEMILKO@killedSound?$AA@		; `string'
PUBLIC	??_C@_0BO@OMJFDGPB@fallingDamageSoundMinInterval?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_unitSounds@@@@6B@	; ScriptRegistrant<dp88_unitSounds>::`vftable'
PUBLIC	?dp88_unitSounds_Registrant@@3V?$ScriptRegistrant@Vdp88_unitSounds@@@@A ; dp88_unitSounds_Registrant
PUBLIC	??_C@_0BNB@EDNAANJI@createdSound?$DNnull?3string?0damaged@ ; `string'
PUBLIC	??_C@_0BA@KBGLIELP@dp88_unitSounds?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_uniqueInfantry_controller::Created'::`2'::__LINE__Var
PUBLIC	??_C@_0CI@ENMLKBOD@dp88_uniqueInfantry_controller?3?3@ ; `string'
PUBLIC	??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0BA@NFPOMMJA@infantry_preset?$AA@		; `string'
PUBLIC	??_C@_07BMLKPCEF@team_id?$AA@			; `string'
PUBLIC	??_C@_09BJKFAJML@max_count?$AA@			; `string'
PUBLIC	??_C@_0P@BPMHCCNE@percent_chance?$AA@		; `string'
PUBLIC	??_C@_0FJ@MJNBDJBP@dp88_uniqueInfantry_controller?3?5@ ; `string'
PUBLIC	?__LINE__Var@?1??Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_uniqueInfantry_controller::Destroyed'::`2'::__LINE__Var
PUBLIC	??_C@_0CK@NKBCAI@dp88_uniqueInfantry_controller?3?3@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@6B@ ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`vftable'
PUBLIC	?dp88_uniqueInfantry_controller_Registrant@@3V?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@A ; dp88_uniqueInfantry_controller_Registrant
PUBLIC	??_C@_0EJ@FJLHJHCB@infantry_preset?3string?0team_id?3i@ ; `string'
PUBLIC	??_C@_0BP@ENKDJGDA@dp88_uniqueInfantry_controller?$AA@ ; `string'
PUBLIC	??_C@_0O@PEDGHOIN@loopAnimation?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_damageAnimation::Created'::`2'::__LINE__Var
PUBLIC	??_C@_0BO@IMJLNFNM@dp88_damageAnimation?3?3Created?$AA@ ; `string'
PUBLIC	??_C@_0BD@MKMFKMFG@healthy_startFrame?$AA@	; `string'
PUBLIC	??_C@_0BB@JBDGIKG@healthy_endFrame?$AA@		; `string'
PUBLIC	??_C@_0BM@LCKBNGPH@healthy_startFrame_lowPower?$AA@ ; `string'
PUBLIC	??_C@_0BK@IFNEAGMF@healthy_endFrame_lowPower?$AA@ ; `string'
PUBLIC	??_C@_0BA@NNCKLGJK@damageBoundary1?$AA@		; `string'
PUBLIC	??_C@_0BL@NIFMBHCI@damageBoundary1_startFrame?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OPDALANL@damageBoundary1_endFrame?$AA@ ; `string'
PUBLIC	??_C@_0CE@DFBCJEDO@damageBoundary1_startFrame_lowPo@ ; `string'
PUBLIC	??_C@_0CC@GPIIJEHA@damageBoundary1_endFrame_lowPowe@ ; `string'
PUBLIC	??_C@_0BA@PGAHOFFJ@damageBoundary2?$AA@		; `string'
PUBLIC	??_C@_0BL@GFJGHLOG@damageBoundary2_startFrame?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HGNCNGNK@damageBoundary2_endFrame?$AA@ ; `string'
PUBLIC	??_C@_0CE@MGKDJHO@damageBoundary2_startFrame_lowPo@ ; `string'
PUBLIC	??_C@_0CC@MACBNJLK@damageBoundary2_endFrame_lowPowe@ ; `string'
PUBLIC	??_C@_0BA@OPBMNEBI@damageBoundary3?$AA@		; `string'
PUBLIC	??_C@_0BL@LIAAKCGD@damageBoundary3_startFrame?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LHFMAJBK@damageBoundary3_endFrame?$AA@ ; `string'
PUBLIC	??_C@_0CE@BLECFNLO@damageBoundary3_startFrame_lowPo@ ; `string'
PUBLIC	??_C@_0CC@KFEGOCPM@damageBoundary3_endFrame_lowPowe@ ; `string'
PUBLIC	??_C@_0BA@KAFNECNP@damageBoundary4?$AA@		; `string'
PUBLIC	??_C@_0BL@MFHDKEDL@damageBoundary4_startFrame?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JOGHBMJJ@damageBoundary4_endFrame?$AA@ ; `string'
PUBLIC	??_C@_0CE@HOJLGDPO@damageBoundary4_startFrame_lowPo@ ; `string'
PUBLIC	??_C@_0CC@EEACEEGP@damageBoundary4_endFrame_lowPowe@ ; `string'
PUBLIC	??_C@_0BA@LJEGHDJO@damageBoundary5?$AA@		; `string'
PUBLIC	??_C@_0BL@BIOFHNLO@damageBoundary5_startFrame?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FPOJMDFJ@damageBoundary5_endFrame?$AA@ ; `string'
PUBLIC	??_C@_0CE@GJLDAHDO@damageBoundary5_startFrame_lowPo@ ; `string'
PUBLIC	??_C@_0CC@CBGFHPCJ@damageBoundary5_endFrame_lowPowe@ ; `string'
PUBLIC	??_C@_0BB@GLBLILDK@useDestroyedMode?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_damageAnimation::Detach'::`2'::__LINE__Var
PUBLIC	??_C@_0BN@CIEFPDDI@dp88_damageAnimation?3?3Detach?$AA@ ; `string'
PUBLIC	??_C@_0M@BAABMIKH@wakeObjects?$AA@		; `string'
PUBLIC	??_C@_07OKHHAEAF@WAKEBOX?$AA@			; `string'
PUBLIC	??_C@_0O@MKCKBGNB@animationName?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_damageAnimation@@@@6B@ ; ScriptRegistrant<dp88_damageAnimation>::`vftable'
PUBLIC	?dp88_damageAnimation_Registrant@@3V?$ScriptRegistrant@Vdp88_damageAnimation@@@@A ; dp88_damageAnimation_Registrant
PUBLIC	??_C@_0ECL@PMDJFDMP@animationName?$DNobject?4object?3stri@ ; `string'
PUBLIC	??_C@_0BF@KGCMIMDC@dp88_damageAnimation?$AA@	; `string'
PUBLIC	??_C@_0BI@CNNOOAEH@minimumAnnounceInterval?$AA@	; `string'
PUBLIC	??_C@_0BK@JBPONDKJ@team0_underAttackStringId?$AA@ ; `string'
PUBLIC	??_C@_0BK@IGNGLHGJ@team1_underAttackStringId?$AA@ ; `string'
PUBLIC	??_C@_0BI@MNBPCFLE@team0_destroyedStringId?$AA@	; `string'
PUBLIC	??_C@_0BI@KIHIBOPC@team1_destroyedStringId?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z@4JA ; `dp88_objectAnnouncements::Damaged'::`2'::__LINE__Var
PUBLIC	??_C@_0CC@GNCMCEPH@dp88_objectAnnouncements?3?3Damage@ ; `string'
PUBLIC	?__LINE__Var@?1??Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z@4JA ; `dp88_objectAnnouncements::Killed'::`2'::__LINE__Var
PUBLIC	??_C@_0CB@HEJBFPJC@dp88_objectAnnouncements?3?3Killed@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@6B@ ; ScriptRegistrant<dp88_objectAnnouncements>::`vftable'
PUBLIC	?dp88_objectAnnouncements_Registrant@@3V?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@A ; dp88_objectAnnouncements_Registrant
PUBLIC	??_C@_0JM@LCNDKFBB@minimumAnnounceInterval?$DN20?3int?0t@ ; `string'
PUBLIC	??_C@_0BJ@MLJJJNEI@dp88_objectAnnouncements?$AA@ ; `string'
PUBLIC	??_C@_0FL@ONKPLGMB@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ ; `string'
PUBLIC	??_C@_0BH@HCMDAMPC@shifted_vehicle_preset?$AA@	; `string'
PUBLIC	??_C@_0GE@IPOHJCAG@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5A?5veh@ ; `string'
PUBLIC	??_C@_0O@MEMONODM@shift_keyhook?$AA@		; `string'
PUBLIC	??_C@_0DO@KFEKCDFK@The?5chronoshift?5device?5is?5now?5fu@ ; `string'
PUBLIC	??_C@_0CG@ENOFPKMC@shift_heading_fluctuation_degree@ ; `string'
PUBLIC	??_C@_0BC@JGDIALCG@Heading?5was?5?$CF?42f?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@JIFFHMAJ@Heading?5is?5now?5?$CF?42f?6?$AA@ ; `string'
PUBLIC	??_C@_0CH@KNMEOMAC@shift_velocity_fluctuation_perce@ ; `string'
PUBLIC	??_C@_0BP@HHHAJNBH@Velocity?5was?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?6?$AA@ ; `string'
PUBLIC	??_C@_0DB@PKNMJPCB@Subtracting?5?$CF?42f?$CF?$CF?5velocity?5?$CI?$CF?42@ ; `string'
PUBLIC	??_C@_0CK@NOGNEHEF@Adding?5?$CF?42f?$CF?$CF?5velocity?5?$CI?$CF?42f?$CJ?5to@ ; `string'
PUBLIC	??_C@_0CC@LLOHKBM@Velocity?5is?5now?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f@ ; `string'
PUBLIC	??_C@_0DH@HPAIJMOM@The?5chronoshift?5device?5has?5not?5f@ ; `string'
PUBLIC	??_C@_0P@FIAIJOLE@shift_out_time?$AA@		; `string'
PUBLIC	??_C@_0BI@MNODKNNJ@shift_out_effect_preset?$AA@	; `string'
PUBLIC	??_C@_0BG@JIFIAOPL@shift_out_effect_time?$AA@	; `string'
PUBLIC	??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@	; `string'
PUBLIC	??_C@_0P@GHINFOCL@shift_duration?$AA@		; `string'
PUBLIC	??_C@_0O@EIGFLHCP@shift_in_time?$AA@		; `string'
PUBLIC	??_C@_0BH@IKKNCHPJ@shift_in_effect_preset?$AA@	; `string'
PUBLIC	??_C@_0BF@GEIPJMKA@shift_in_effect_time?$AA@	; `string'
PUBLIC	??_C@_0O@IPLDJMNA@recharge_time?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_chronoTank@@@@6B@	; ScriptRegistrant<dp88_chronoTank>::`vftable'
PUBLIC	?dp88_chronoTank_Registrant@@3V?$ScriptRegistrant@Vdp88_chronoTank@@@@A ; dp88_chronoTank_Registrant
PUBLIC	??_C@_0BFC@DMEBIJAI@shift_keyhook?3string?0shift_durat@ ; `string'
PUBLIC	??_C@_0BA@HIIMEFO@dp88_chronoTank?$AA@		; `string'
PUBLIC	??_C@_0O@NCIMNAFE@Spawn_At_Bone?$AA@		; `string'
PUBLIC	??_C@_0BE@BBMCLEAG@Vehicle_Part_Preset?$AA@	; `string'
PUBLIC	??_C@_0N@BOOILDGO@IsDecorative?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@		; `string'
PUBLIC	??_C@_0BD@DMPJMKMH@dp88_linkVetPoints?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@6B@ ; ScriptRegistrant<dp88_spawnVehiclePart>::`vftable'
PUBLIC	?dp88_spawnVehiclePart_Registrant@@3V?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@A ; dp88_spawnVehiclePart_Registrant
PUBLIC	??_C@_0ED@OFDFACF@Vehicle_Part_Preset?3string?0Spawn@ ; `string'
PUBLIC	??_C@_0BG@BNFHGCOL@dp88_spawnVehiclePart?$AA@	; `string'
PUBLIC	??_C@_0L@DFCKJMBM@killPoints?$AA@		; `string'
PUBLIC	??_C@_0N@EKBMPEJM@damagePoints?$AA@		; `string'
PUBLIC	??_C@_0N@IGCGNMII@repairPoints?$AA@		; `string'
PUBLIC	??_C@_09MNFMHOPO@killMoney?$AA@			; `string'
PUBLIC	??_C@_0M@JBDJEFLC@damageMoney?$AA@		; `string'
PUBLIC	??_C@_0M@KHGGMEAG@repairMoney?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_customPoints@@@@6B@ ; ScriptRegistrant<dp88_customPoints>::`vftable'
PUBLIC	?dp88_customPoints_Registrant@@3V?$ScriptRegistrant@Vdp88_customPoints@@@@A ; dp88_customPoints_Registrant
PUBLIC	??_C@_0GL@IHDKNLBJ@killPoints?3float?0damagePoints?3fl@ ; `string'
PUBLIC	??_C@_0BC@HNEJKIPA@dp88_customPoints?$AA@	; `string'
PUBLIC	??_C@_0M@GNOOMBIC@ScoringMode?$AA@		; `string'
PUBLIC	??_C@_0BB@FOMPKHLG@TargetScoreTeam0?$AA@	; `string'
PUBLIC	??_C@_0BB@EHNEJGPH@TargetScoreTeam1?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_conquestController::Created'::`2'::__LINE__Var
PUBLIC	??_C@_0CB@OLMIABAP@dp88_conquestController?3?3Created@ ; `string'
PUBLIC	??_C@_0M@CMDJNJPI@IntroString?$AA@		; `string'
PUBLIC	??_C@_0O@LHAEKNMG@ScoreInterval?$AA@		; `string'
PUBLIC	??_C@_0BB@GHHDEPOO@ScoreStringTeam0?$AA@	; `string'
PUBLIC	??_C@_0BB@HOGIHOKP@ScoreStringTeam1?$AA@	; `string'
PUBLIC	??_C@_0M@EPAMPHLF@ScoreString?$AA@		; `string'
PUBLIC	??_C@_0ED@IJJHPHLA@Scores?5are?5currently?3?5?$CFTEAM0?$CF?3?5?$CF@ ; `string'
PUBLIC	??_C@_0GD@CMNJPAFK@Scores?5are?5currently?3?5?$CFTEAM0?$CF?3?5?$CI@ ; `string'
PUBLIC	??_C@_07GDDBNOLB@?$CFTEAM0?$CF?$AA@		; `string'
PUBLIC	??_C@_07GCPDLEIG@?$CFTEAM1?$CF?$AA@		; `string'
PUBLIC	??_C@_07PBGKEGMF@Neither?$AA@			; `string'
PUBLIC	??_C@_0O@MBGCGLLP@?$CFWINNINGTEAM?$CF?$AA@	; `string'
PUBLIC	??_C@_0N@HLPCJAI@?$CFLOSINGTEAM?$CF?$AA@	; `string'
PUBLIC	??_C@_0O@ODMKNHLH@?$CFTEAM0TARGET?$CF?$AA@	; `string'
PUBLIC	??_C@_0O@PELBMDPE@?$CFTEAM1TARGET?$CF?$AA@	; `string'
PUBLIC	??_C@_0N@KDCEFCGD@?$CFTEAM0SCORE?$CF?$AA@	; `string'
PUBLIC	??_C@_0N@GPIOFCPN@?$CFTEAM1SCORE?$CF?$AA@	; `string'
PUBLIC	??_C@_0BD@GCCDOEJO@?$CFTEAM0SCORENEEDED?$CF?$AA@ ; `string'
PUBLIC	??_C@_0BD@PPCMAFOI@?$CFTEAM1SCORENEEDED?$CF?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_conquestController@@@@6B@ ; ScriptRegistrant<dp88_conquestController>::`vftable'
PUBLIC	?dp88_conquestController_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestController@@@@A ; dp88_conquestController_Registrant
PUBLIC	??_C@_0KP@CPJIKONJ@ScoringMode?$DN0?3int?0TargetScoreTea@ ; `string'
PUBLIC	??_C@_0BI@ILMCAMOM@dp88_conquestController?$AA@	; `string'
PUBLIC	??_C@_0FH@LKMMDFJH@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Conqu@ ; `string'
PUBLIC	??_C@_0L@GKAHGHKM@ZonePreset?$AA@		; `string'
PUBLIC	??_C@_0GI@HOLDHJCM@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5A?5scr@ ; `string'
PUBLIC	??_C@_0L@CEHGLBNG@ZoneOffset?$AA@		; `string'
PUBLIC	??_C@_08MIAEEAJ@ZoneSize?$AA@			; `string'
PUBLIC	??_C@_0M@BNMNNECF@CaptureTime?$AA@		; `string'
PUBLIC	??_C@_0BF@ICEKEAJO@AllowMajorityCapture?$AA@	; `string'
PUBLIC	??_C@_0BA@IHOAPCPH@MultiCaptureCap?$AA@		; `string'
PUBLIC	??_C@_0BH@ODPBOFAO@MultiCaptureMultiplier?$AA@	; `string'
PUBLIC	??_C@_0BM@HEKJOKPH@CaptureAnimTransitionFrames?$AA@ ; `string'
PUBLIC	??_C@_0EM@LFGHOGAG@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Invai@ ; `string'
PUBLIC	??_C@_0BN@FCFHKJKI@AIObjective_Priority_Soldier?$AA@ ; `string'
PUBLIC	??_C@_0CD@JHHNOAJF@AIObjective_Priority_Light_Vehic@ ; `string'
PUBLIC	??_C@_0CD@PCCIBHOI@AIObjective_Priority_Heavy_Vehic@ ; `string'
PUBLIC	??_C@_0BO@HOMMEOLC@AIObjective_Priority_Aircraft?$AA@ ; `string'
PUBLIC	??_C@_0N@NGCHBJOK@TickInterval?$AA@		; `string'
PUBLIC	??_C@_0L@FLMEOFAO@TickPoints?$AA@		; `string'
PUBLIC	??_C@_0P@GPBLCIGD@CapturedString?$AA@		; `string'
PUBLIC	??_C@_0DC@GHEBELKI@A?5conquest?5zone?5has?5been?5capture@ ; `string'
PUBLIC	??_C@_0O@FEAPEDLG@NeutralString?$AA@		; `string'
PUBLIC	??_C@_0CD@IPEDPOEA@A?5conquest?5zone?5has?5become?5neutr@ ; `string'
PUBLIC	??_C@_0BA@CJIIKAJH@CapturingString?$AA@		; `string'
PUBLIC	??_C@_0M@OHMKNGLK@CaptureAnim?$AA@		; `string'
PUBLIC	??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@	; `string'
PUBLIC	??_C@_0BE@BHCHLMDB@?$CFd?02?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BE@EELNOHLF@?$CFd?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BD@BHDEOPID@0?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BD@MANGGPNL@1?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0N@LGEENECO@?$CFOWNINGTEAM?$CF?$AA@	; `string'
PUBLIC	??_C@_0M@PFJPKHJP@?$CFOTHERTEAM?$CF?$AA@	; `string'
PUBLIC	??_C@_0O@DODANHJB@CapturePoints?$AA@		; `string'
PUBLIC	??_C@_0BA@IFHPLBDK@?$CFCAPTUREPOINTS?$CF?$AA@	; `string'
PUBLIC	??_C@_0N@PHPLFNK@?$CFTICKPOINTS?$CF?$AA@	; `string'
PUBLIC	??_C@_0P@NCCLADPC@?$CFTICKINTERVAL?$CF?$AA@	; `string'
PUBLIC	??_C@_0L@EBJHDIBJ@?$CFZONENAME?$CF?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_conquestControlZone@@@@6B@ ; ScriptRegistrant<dp88_conquestControlZone>::`vftable'
PUBLIC	?dp88_conquestControlZone_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestControlZone@@@@A ; dp88_conquestControlZone_Registrant
PUBLIC	??_C@_0CBD@GFGPKKJA@ZoneSize?3vector3?0ZoneOffset?3vect@ ; `string'
PUBLIC	??_C@_0BJ@OFFNAEOL@dp88_conquestControlZone?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_conquestControlObject@@@@6B@ ; ScriptRegistrant<dp88_conquestControlObject>::`vftable'
PUBLIC	?dp88_conquestControlObject_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestControlObject@@@@A ; dp88_conquestControlObject_Registrant
PUBLIC	??_C@_0CE@OPGAFHJK@TickPoints?$DN1?3int?0TickInterval?$DN3?3@ ; `string'
PUBLIC	??_C@_0BL@MHNNMEJP@dp88_conquestControlObject?$AA@ ; `string'
PUBLIC	??_C@_0GM@CLAHJDDJ@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ ; `string'
PUBLIC	?__LINE__Var@?1??Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_radarInvisibility::Created'::`2'::__LINE__Var
PUBLIC	??_C@_0CA@DGBMODGB@dp88_radarInvisibility?3?3Created?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA ; `dp88_radarInvisibility::Detach'::`2'::__LINE__Var
PUBLIC	??_C@_0BP@HPEFELMM@dp88_radarInvisibility?3?3Detach?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_radarInvisibility@@@@6B@ ; ScriptRegistrant<dp88_radarInvisibility>::`vftable'
PUBLIC	?dp88_radarInvisibility_Registrant@@3V?$ScriptRegistrant@Vdp88_radarInvisibility@@@@A ; dp88_radarInvisibility_Registrant
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BH@IFAEHJOF@dp88_radarInvisibility?$AA@	; `string'
PUBLIC	??_C@_0BF@OAKDDNEI@Min_Differential_Rad?$AA@	; `string'
PUBLIC	??_C@_0GL@NDCAHHMO@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ ; `string'
PUBLIC	??_C@_06GGDACGEK@turret?$AA@			; `string'
PUBLIC	??_C@_0N@JLPHONAA@Sound_Preset?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_turretSound@@@@6B@	; ScriptRegistrant<dp88_turretSound>::`vftable'
PUBLIC	?dp88_turretSound_Registrant@@3V?$ScriptRegistrant@Vdp88_turretSound@@@@A ; dp88_turretSound_Registrant
PUBLIC	??_C@_0DE@FOBBIMPM@Sound_Preset?3string?0Min_Differen@ ; `string'
PUBLIC	??_C@_0BB@NGHNDKMD@dp88_turretSound?$AA@	; `string'
PUBLIC	??_C@_08CMHNALBL@ObjectID?$AA@			; `string'
PUBLIC	??_C@_04CCGIJNFG@Bone?$AA@			; `string'
PUBLIC	??_C@_06GEMKPBPA@Offset?$AA@			; `string'
PUBLIC	??_C@_0BC@JFMDKIAL@Teleport_Infantry?$AA@	; `string'
PUBLIC	??_C@_0BC@IJAHCGHD@Teleport_Vehicles?$AA@	; `string'
PUBLIC	??_C@_04ODKJLCFC@bone?$AA@			; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_teleport@@@@6B@	; ScriptRegistrant<dp88_teleport>::`vftable'
PUBLIC	?dp88_teleport_Registrant@@3V?$ScriptRegistrant@Vdp88_teleport@@@@A ; dp88_teleport_Registrant
PUBLIC	??_C@_0FK@IEIAONDC@ObjectID?$DN0?3int?0Bone?3string?0Offse@ ; `string'
PUBLIC	??_C@_0O@GOIIEOMA@dp88_teleport?$AA@		; `string'
PUBLIC	??_C@_09ONEINPNJ@Animation?$AA@			; `string'
PUBLIC	??_C@_0BB@FLICDNDP@Animation_Frames?$AA@	; `string'
PUBLIC	??_C@_0P@LIPBLCCH@Use_Total_Ammo?$AA@		; `string'
PUBLIC	??_C@_0FC@EBNFPOLC@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5No?5an@ ; `string'
PUBLIC	??_C@_0HB@PNCMMMJI@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ ; `string'
PUBLIC	??_C@_0BA@IPCHLLAK@Animation_Model?$AA@		; `string'
PUBLIC	??_C@_0BB@NHJNEILC@Invisible_Object?$AA@	; `string'
PUBLIC	??_C@_0BF@OHLHCKEN@Animation_Model_Bone?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@6B@ ; ScriptRegistrant<dp88_Ammo_Animation>::`vftable'
PUBLIC	?dp88_Ammo_Animation_Registrant@@3V?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@A ; dp88_Ammo_Animation_Registrant
PUBLIC	??_C@_0GM@LOJAFJIG@Animation?3string?0Animation_Frame@ ; `string'
PUBLIC	??_C@_0BE@FFKNKIGP@dp88_Ammo_Animation?$AA@	; `string'
PUBLIC	??_C@_0L@KLKHNBPB@Camouflage?$AA@		; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Camo_Controller@@@@6B@ ; ScriptRegistrant<dp88_Camo_Controller>::`vftable'
PUBLIC	?dp88_Camo_Controller_Registrant@@3V?$ScriptRegistrant@Vdp88_Camo_Controller@@@@A ; dp88_Camo_Controller_Registrant
PUBLIC	??_C@_0BC@LHPBPJNN@Camouflage?3string?$AA@	; `string'
PUBLIC	??_C@_0BF@FLBIGINA@dp88_Camo_Controller?$AA@	; `string'
PUBLIC	??_C@_05NFIJOKEG@Model?$AA@			; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Camo_Object@@@@6B@	; ScriptRegistrant<dp88_Camo_Object>::`vftable'
PUBLIC	?dp88_Camo_Object_Registrant@@3V?$ScriptRegistrant@Vdp88_Camo_Object@@@@A ; dp88_Camo_Object_Registrant
PUBLIC	??_C@_0BP@MNBKOHKO@Camouflage?3string?0Model?3string?$AA@ ; `string'
PUBLIC	??_C@_0BB@IIGFBOLK@dp88_Camo_Object?$AA@	; `string'
PUBLIC	??_C@_0P@JONNOJD@Trigger_Custom?$AA@		; `string'
PUBLIC	??_C@_09HIGEHAGH@Cinematic?$AA@			; `string'
PUBLIC	??_C@_04LOHMBPNC@?$CFs?01?$AA@			; `string'
PUBLIC	??_C@_0O@GHBGJIKL@JFW_Cinematic?$AA@		; `string'
PUBLIC	??_C@_06CKLLCHIK@Preset?$AA@			; `string'
PUBLIC	??_C@_0CE@PHAAGGEC@SH_CinematicVehicleDeliveryCallb@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@6B@ ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`vftable'
PUBLIC	?dp88_Create_Object_Cinematic_Registrant@@3V?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@A ; dp88_Create_Object_Cinematic_Registrant
PUBLIC	??_C@_0EB@CJLOGCJ@Preset?3string?0Cinematic?3string?0T@ ; `string'
PUBLIC	??_C@_0BN@NHEJAFFL@dp88_Create_Object_Cinematic?$AA@ ; `string'
PUBLIC	??_C@_07BEIHKDLJ@Message?$AA@			; `string'
PUBLIC	??_C@_0CA@DMKHPCHF@dp88_buildingScripts_controller?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@6B@ ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`vftable'
PUBLIC	?dp88_Set_Team_On_Custom_Registrant@@3V?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@A ; dp88_Set_Team_On_Custom_Registrant
PUBLIC	??_C@_0M@HBPJHKKO@Message?3int?$AA@		; `string'
PUBLIC	??_C@_0BI@JOLBDOKJ@dp88_Set_Team_On_Custom?$AA@	; `string'
PUBLIC	??_C@_04KNKPIPFB@Mode?$AA@			; `string'
PUBLIC	??_C@_09EEDJGKFJ@Hitpoints?$AA@			; `string'
PUBLIC	??_C@_0M@OCPLOBIH@Max_Percent?$AA@		; `string'
PUBLIC	??_C@_08KDKDEPAG@Interval?$AA@			; `string'
PUBLIC	??_C@_0P@DAENDFJJ@Damage_Timeout?$AA@		; `string'
PUBLIC	??_C@_07EDCLAFNL@Warhead?$AA@			; `string'
PUBLIC	??_C@_0BA@NJCFNLMO@Hitpoints_Elite?$AA@		; `string'
PUBLIC	??_C@_0BC@LOLJHMMN@Hitpoints_Veteran?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@6B@ ; ScriptRegistrant<dp88_RegenerateHitpoints>::`vftable'
PUBLIC	?dp88_RegenerateHitpoints_Registrant@@3V?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@A ; dp88_RegenerateHitpoints_Registrant
PUBLIC	??_C@_0JA@NKIDBMGD@Hitpoints?3float?0Interval?$DN1?3int?0W@ ; `string'
PUBLIC	??_C@_0BJ@MDPGIMG@dp88_RegenerateHitpoints?$AA@	; `string'
PUBLIC	??_C@_0GA@ICJIHHN@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Faile@ ; `string'
PUBLIC	??_C@_0BB@EAABGGCB@EnableHealthLink?$AA@	; `string'
PUBLIC	??_C@_0BE@GODCMMCE@EnableVeterancyLink?$AA@	; `string'
PUBLIC	??_C@_0M@OJJPOFPO@VisibleToAI?$AA@		; `string'
PUBLIC	??_C@_0BC@MBLJKBGD@DriverEnterCustom?$AA@	; `string'
PUBLIC	??_C@_0BB@MAHEBJLL@DriverExitCustom?$AA@	; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@6B@ ; ScriptRegistrant<dp88_CreateAttachedObject>::`vftable'
PUBLIC	?dp88_CreateAttachedObject_Registrant@@3V?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@A ; dp88_CreateAttachedObject_Registrant
PUBLIC	??_C@_0IM@PIPDNFDL@Preset?3string?0Bone?3string?0Enable@ ; `string'
PUBLIC	??_C@_0BK@CHAELLIF@dp88_CreateAttachedObject?$AA@ ; `string'
PUBLIC	??_7?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@6B@ ; ScriptRegistrant<dp88_customPointsPercentage>::`vftable'
PUBLIC	?dp88_customPointsPercentage_Registrant@@3V?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@A ; dp88_customPointsPercentage_Registrant
PUBLIC	??_C@_0BM@KLGADBN@dp88_customPointsPercentage?$AA@ ; `string'
PUBLIC	??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@ ; `string'
PUBLIC	??_C@_0DD@MDLKPMAN@ScriptRegistrant?$DMclass?5dp88_rand@ ; `string'
PUBLIC	??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0DA@FDLCHKBK@ScriptRegistrant?$DMclass?5dp88_unit@ ; `string'
PUBLIC	??_C@_0DP@DDMDLHOJ@ScriptRegistrant?$DMclass?5dp88_uniq@ ; `string'
PUBLIC	??_C@_0DF@LHLNAIGF@ScriptRegistrant?$DMclass?5dp88_dama@ ; `string'
PUBLIC	??_C@_0DJ@NLMOEDBC@ScriptRegistrant?$DMclass?5dp88_obje@ ; `string'
PUBLIC	??_C@_0DA@KKGPGDCG@ScriptRegistrant?$DMclass?5dp88_chro@ ; `string'
PUBLIC	??_C@_0DG@GPDLOHJG@ScriptRegistrant?$DMclass?5dp88_spaw@ ; `string'
PUBLIC	??_C@_0DC@DKDBALLO@ScriptRegistrant?$DMclass?5dp88_cust@ ; `string'
PUBLIC	??_C@_0DI@LFFHDACI@ScriptRegistrant?$DMclass?5dp88_conq@ ; `string'
PUBLIC	??_C@_0DJ@DDNMINDP@ScriptRegistrant?$DMclass?5dp88_conq@ ; `string'
PUBLIC	??_C@_0DL@ILMNJHNN@ScriptRegistrant?$DMclass?5dp88_conq@ ; `string'
PUBLIC	??_C@_0DH@MDPEDLFC@ScriptRegistrant?$DMclass?5dp88_rada@ ; `string'
PUBLIC	??_C@_0DB@EOLBBBPH@ScriptRegistrant?$DMclass?5dp88_turr@ ; `string'
PUBLIC	??_C@_0CO@IGPMMMMA@ScriptRegistrant?$DMclass?5dp88_tele@ ; `string'
PUBLIC	??_C@_0DE@DDAABFML@ScriptRegistrant?$DMclass?5dp88_Ammo@ ; `string'
PUBLIC	??_C@_0DF@FBMHABBF@ScriptRegistrant?$DMclass?5dp88_Camo@ ; `string'
PUBLIC	??_C@_0DB@NDILDPL@ScriptRegistrant?$DMclass?5dp88_Camo@ ; `string'
PUBLIC	??_C@_0DN@LKNDEIDF@ScriptRegistrant?$DMclass?5dp88_Crea@ ; `string'
PUBLIC	??_C@_0DI@GICBHLPO@ScriptRegistrant?$DMclass?5dp88_Set_@ ; `string'
PUBLIC	??_C@_0DJ@OKEEEKLJ@ScriptRegistrant?$DMclass?5dp88_Rege@ ; `string'
PUBLIC	??_C@_0DK@LFLOCGCH@ScriptRegistrant?$DMclass?5dp88_Crea@ ; `string'
PUBLIC	??_C@_0DM@MPPIFKPJ@ScriptRegistrant?$DMclass?5dp88_cust@ ; `string'
PUBLIC	?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
PUBLIC	??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51 ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`local static guard'
PUBLIC	??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@ ; `string'
PUBLIC	??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ ; `string'
PUBLIC	??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@ ; `string'
PUBLIC	?oh_dear@?7???R?$SafeDataClass@M@@QBEAAMXZ@4MA	; `SafeDataClass<float>::operator()'::`8'::oh_dear
PUBLIC	??_R4ScriptFactory@@6B@				; ScriptFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptFactory@@@8			; ScriptFactory `RTTI Type Descriptor'
PUBLIC	??_R3ScriptFactory@@8				; ScriptFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptFactory@@8				; ScriptFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptFactory@@8			; ScriptFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ScriptClass@@6B@				; ScriptClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptClass@@@8				; ScriptClass `RTTI Type Descriptor'
PUBLIC	??_R3ScriptClass@@8				; ScriptClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptClass@@8				; ScriptClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptClass@@8			; ScriptClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@GameObjObserverClass@@8		; GameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGameObjObserverClass@@@8		; GameObjObserverClass `RTTI Type Descriptor'
PUBLIC	??_R3GameObjObserverClass@@8			; GameObjObserverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GameObjObserverClass@@8			; GameObjObserverClass::`RTTI Base Class Array'
PUBLIC	??_R4GameObjObserverClass@@6B@			; GameObjObserverClass::`RTTI Complete Object Locator'
PUBLIC	??_R4ScriptImpClass@@6B@			; ScriptImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScriptImpClass@@@8			; ScriptImpClass `RTTI Type Descriptor'
PUBLIC	??_R3ScriptImpClass@@8				; ScriptImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScriptImpClass@@8				; ScriptImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScriptImpClass@@8			; ScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INIClass@@6B@				; INIClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVINIClass@@@8				; INIClass `RTTI Type Descriptor'
PUBLIC	??_R3INIClass@@8				; INIClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INIClass@@8				; INIClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INIClass@@8			; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@PostLoadableClass@@8		; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPostLoadableClass@@@8			; PostLoadableClass `RTTI Type Descriptor'
PUBLIC	??_R3PostLoadableClass@@8			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PostLoadableClass@@8			; PostLoadableClass::`RTTI Base Class Array'
PUBLIC	??_R4PostLoadableClass@@6B@			; PostLoadableClass::`RTTI Complete Object Locator'
PUBLIC	??_R4ReferencerClass@@6B@			; ReferencerClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReferencerClass@@@8			; ReferencerClass `RTTI Type Descriptor'
PUBLIC	??_R3ReferencerClass@@8				; ReferencerClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ReferencerClass@@8				; ReferencerClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ReferencerClass@@8		; ReferencerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4JFW_Key_Hook_Base@@6B@			; JFW_Key_Hook_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVJFW_Key_Hook_Base@@@8			; JFW_Key_Hook_Base `RTTI Type Descriptor'
PUBLIC	??_R3JFW_Key_Hook_Base@@8			; JFW_Key_Hook_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2JFW_Key_Hook_Base@@8			; JFW_Key_Hook_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@JFW_Key_Hook_Base@@8		; JFW_Key_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MultiKeyHookScriptImpClass@@6B@		; MultiKeyHookScriptImpClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMultiKeyHookScriptImpClass@@@8		; MultiKeyHookScriptImpClass `RTTI Type Descriptor'
PUBLIC	??_R3MultiKeyHookScriptImpClass@@8		; MultiKeyHookScriptImpClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MultiKeyHookScriptImpClass@@8		; MultiKeyHookScriptImpClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8	; MultiKeyHookScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct> `RTTI Type Descriptor'
PUBLIC	??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4JFW_Object_Created_Hook_Base@@6B@		; JFW_Object_Created_Hook_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVJFW_Object_Created_Hook_Base@@@8	; JFW_Object_Created_Hook_Base `RTTI Type Descriptor'
PUBLIC	??_R3JFW_Object_Created_Hook_Base@@8		; JFW_Object_Created_Hook_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2JFW_Object_Created_Hook_Base@@8		; JFW_Object_Created_Hook_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8	; JFW_Object_Created_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_randomWeather@@6B@			; dp88_randomWeather::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_randomWeather@@@8			; dp88_randomWeather `RTTI Type Descriptor'
PUBLIC	??_R3dp88_randomWeather@@8			; dp88_randomWeather::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_randomWeather@@8			; dp88_randomWeather::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_randomWeather@@8		; dp88_randomWeather::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_unitSounds@@6B@			; dp88_unitSounds::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_unitSounds@@@8			; dp88_unitSounds `RTTI Type Descriptor'
PUBLIC	??_R3dp88_unitSounds@@8				; dp88_unitSounds::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_unitSounds@@8				; dp88_unitSounds::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_unitSounds@@8		; dp88_unitSounds::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_uniqueInfantry_controller@@6B@	; dp88_uniqueInfantry_controller::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_uniqueInfantry_controller@@@8	; dp88_uniqueInfantry_controller `RTTI Type Descriptor'
PUBLIC	??_R3dp88_uniqueInfantry_controller@@8		; dp88_uniqueInfantry_controller::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_uniqueInfantry_controller@@8		; dp88_uniqueInfantry_controller::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_uniqueInfantry_controller@@8	; dp88_uniqueInfantry_controller::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_damageAnimation@@6B@			; dp88_damageAnimation::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_damageAnimation@@@8		; dp88_damageAnimation `RTTI Type Descriptor'
PUBLIC	??_R3dp88_damageAnimation@@8			; dp88_damageAnimation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_damageAnimation@@8			; dp88_damageAnimation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_damageAnimation@@8		; dp88_damageAnimation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_objectAnnouncements@@6B@		; dp88_objectAnnouncements::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_objectAnnouncements@@@8		; dp88_objectAnnouncements `RTTI Type Descriptor'
PUBLIC	??_R3dp88_objectAnnouncements@@8		; dp88_objectAnnouncements::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_objectAnnouncements@@8		; dp88_objectAnnouncements::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_objectAnnouncements@@8	; dp88_objectAnnouncements::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_chronoTank@@6B@			; dp88_chronoTank::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_chronoTank@@@8			; dp88_chronoTank `RTTI Type Descriptor'
PUBLIC	??_R3dp88_chronoTank@@8				; dp88_chronoTank::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_chronoTank@@8				; dp88_chronoTank::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_chronoTank@@8		; dp88_chronoTank::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_spawnVehiclePart@@6B@			; dp88_spawnVehiclePart::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_spawnVehiclePart@@@8		; dp88_spawnVehiclePart `RTTI Type Descriptor'
PUBLIC	??_R3dp88_spawnVehiclePart@@8			; dp88_spawnVehiclePart::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_spawnVehiclePart@@8			; dp88_spawnVehiclePart::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_spawnVehiclePart@@8		; dp88_spawnVehiclePart::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_customPoints@@6B@			; dp88_customPoints::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_customPoints@@@8			; dp88_customPoints `RTTI Type Descriptor'
PUBLIC	??_R3dp88_customPoints@@8			; dp88_customPoints::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_customPoints@@8			; dp88_customPoints::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_customPoints@@8		; dp88_customPoints::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_customPointsPercentage@@6B@		; dp88_customPointsPercentage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_customPointsPercentage@@@8		; dp88_customPointsPercentage `RTTI Type Descriptor'
PUBLIC	??_R3dp88_customPointsPercentage@@8		; dp88_customPointsPercentage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_customPointsPercentage@@8		; dp88_customPointsPercentage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_customPointsPercentage@@8	; dp88_customPointsPercentage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_conquestController@@6B@		; dp88_conquestController::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_conquestController@@@8		; dp88_conquestController `RTTI Type Descriptor'
PUBLIC	??_R3dp88_conquestController@@8			; dp88_conquestController::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_conquestController@@8			; dp88_conquestController::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_conquestController@@8	; dp88_conquestController::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_conquestControlZone@@6B@		; dp88_conquestControlZone::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_conquestControlZone@@@8		; dp88_conquestControlZone `RTTI Type Descriptor'
PUBLIC	??_R3dp88_conquestControlZone@@8		; dp88_conquestControlZone::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_conquestControlZone@@8		; dp88_conquestControlZone::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_conquestControlZone@@8	; dp88_conquestControlZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_conquestControlObject@@6B@		; dp88_conquestControlObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_conquestControlObject@@@8		; dp88_conquestControlObject `RTTI Type Descriptor'
PUBLIC	??_R3dp88_conquestControlObject@@8		; dp88_conquestControlObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_conquestControlObject@@8		; dp88_conquestControlObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_conquestControlObject@@8	; dp88_conquestControlObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_radarInvisibility@@6B@		; dp88_radarInvisibility::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_radarInvisibility@@@8		; dp88_radarInvisibility `RTTI Type Descriptor'
PUBLIC	??_R3dp88_radarInvisibility@@8			; dp88_radarInvisibility::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_radarInvisibility@@8			; dp88_radarInvisibility::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_radarInvisibility@@8		; dp88_radarInvisibility::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_turretSound@@6B@			; dp88_turretSound::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_turretSound@@@8			; dp88_turretSound `RTTI Type Descriptor'
PUBLIC	??_R3dp88_turretSound@@8			; dp88_turretSound::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_turretSound@@8			; dp88_turretSound::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_turretSound@@8		; dp88_turretSound::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_teleport@@6B@				; dp88_teleport::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_teleport@@@8			; dp88_teleport `RTTI Type Descriptor'
PUBLIC	??_R3dp88_teleport@@8				; dp88_teleport::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_teleport@@8				; dp88_teleport::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_teleport@@8			; dp88_teleport::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Ammo_Animation@@6B@			; dp88_Ammo_Animation::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Ammo_Animation@@@8			; dp88_Ammo_Animation `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Ammo_Animation@@8			; dp88_Ammo_Animation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Ammo_Animation@@8			; dp88_Ammo_Animation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Ammo_Animation@@8		; dp88_Ammo_Animation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Camo_Controller@@6B@			; dp88_Camo_Controller::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Camo_Controller@@@8		; dp88_Camo_Controller `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Camo_Controller@@8			; dp88_Camo_Controller::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Camo_Controller@@8			; dp88_Camo_Controller::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Camo_Controller@@8		; dp88_Camo_Controller::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Camo_Object@@6B@			; dp88_Camo_Object::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Camo_Object@@@8			; dp88_Camo_Object `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Camo_Object@@8			; dp88_Camo_Object::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Camo_Object@@8			; dp88_Camo_Object::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Camo_Object@@8		; dp88_Camo_Object::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Create_Object_Cinematic@@6B@		; dp88_Create_Object_Cinematic::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Create_Object_Cinematic@@@8	; dp88_Create_Object_Cinematic `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Create_Object_Cinematic@@8		; dp88_Create_Object_Cinematic::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Create_Object_Cinematic@@8		; dp88_Create_Object_Cinematic::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Create_Object_Cinematic@@8	; dp88_Create_Object_Cinematic::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_Set_Team_On_Custom@@6B@		; dp88_Set_Team_On_Custom::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_Set_Team_On_Custom@@@8		; dp88_Set_Team_On_Custom `RTTI Type Descriptor'
PUBLIC	??_R3dp88_Set_Team_On_Custom@@8			; dp88_Set_Team_On_Custom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_Set_Team_On_Custom@@8			; dp88_Set_Team_On_Custom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_Set_Team_On_Custom@@8	; dp88_Set_Team_On_Custom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_RegenerateHitpoints@@6B@		; dp88_RegenerateHitpoints::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_RegenerateHitpoints@@@8		; dp88_RegenerateHitpoints `RTTI Type Descriptor'
PUBLIC	??_R3dp88_RegenerateHitpoints@@8		; dp88_RegenerateHitpoints::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_RegenerateHitpoints@@8		; dp88_RegenerateHitpoints::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_RegenerateHitpoints@@8	; dp88_RegenerateHitpoints::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4dp88_CreateAttachedObject@@6B@		; dp88_CreateAttachedObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVdp88_CreateAttachedObject@@@8		; dp88_CreateAttachedObject `RTTI Type Descriptor'
PUBLIC	??_R3dp88_CreateAttachedObject@@8		; dp88_CreateAttachedObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2dp88_CreateAttachedObject@@8		; dp88_CreateAttachedObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@dp88_CreateAttachedObject@@8	; dp88_CreateAttachedObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_randomWeather@@@@6B@ ; ScriptRegistrant<dp88_randomWeather>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_randomWeather@@@@@8 ; ScriptRegistrant<dp88_randomWeather> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_randomWeather@@@@8 ; ScriptRegistrant<dp88_randomWeather>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_randomWeather@@@@8 ; ScriptRegistrant<dp88_randomWeather>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_randomWeather@@@@8 ; ScriptRegistrant<dp88_randomWeather>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_unitSounds@@@@6B@	; ScriptRegistrant<dp88_unitSounds>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_unitSounds@@@@@8 ; ScriptRegistrant<dp88_unitSounds> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_unitSounds@@@@8	; ScriptRegistrant<dp88_unitSounds>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_unitSounds@@@@8	; ScriptRegistrant<dp88_unitSounds>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_unitSounds@@@@8 ; ScriptRegistrant<dp88_unitSounds>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@6B@ ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@@8 ; ScriptRegistrant<dp88_uniqueInfantry_controller> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8 ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8 ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8 ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_damageAnimation@@@@6B@ ; ScriptRegistrant<dp88_damageAnimation>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_damageAnimation@@@@@8 ; ScriptRegistrant<dp88_damageAnimation> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_damageAnimation@@@@8 ; ScriptRegistrant<dp88_damageAnimation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_damageAnimation@@@@8 ; ScriptRegistrant<dp88_damageAnimation>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_damageAnimation@@@@8 ; ScriptRegistrant<dp88_damageAnimation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@6B@ ; ScriptRegistrant<dp88_objectAnnouncements>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@@8 ; ScriptRegistrant<dp88_objectAnnouncements> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8 ; ScriptRegistrant<dp88_objectAnnouncements>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8 ; ScriptRegistrant<dp88_objectAnnouncements>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8 ; ScriptRegistrant<dp88_objectAnnouncements>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_chronoTank@@@@6B@	; ScriptRegistrant<dp88_chronoTank>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_chronoTank@@@@@8 ; ScriptRegistrant<dp88_chronoTank> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_chronoTank@@@@8	; ScriptRegistrant<dp88_chronoTank>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_chronoTank@@@@8	; ScriptRegistrant<dp88_chronoTank>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_chronoTank@@@@8 ; ScriptRegistrant<dp88_chronoTank>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@6B@ ; ScriptRegistrant<dp88_spawnVehiclePart>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@@8 ; ScriptRegistrant<dp88_spawnVehiclePart> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8 ; ScriptRegistrant<dp88_spawnVehiclePart>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8 ; ScriptRegistrant<dp88_spawnVehiclePart>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8 ; ScriptRegistrant<dp88_spawnVehiclePart>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_customPoints@@@@6B@ ; ScriptRegistrant<dp88_customPoints>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_customPoints@@@@@8 ; ScriptRegistrant<dp88_customPoints> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_customPoints@@@@8	; ScriptRegistrant<dp88_customPoints>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_customPoints@@@@8	; ScriptRegistrant<dp88_customPoints>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_customPoints@@@@8 ; ScriptRegistrant<dp88_customPoints>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_conquestController@@@@6B@ ; ScriptRegistrant<dp88_conquestController>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_conquestController@@@@@8 ; ScriptRegistrant<dp88_conquestController> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_conquestController@@@@8 ; ScriptRegistrant<dp88_conquestController>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_conquestController@@@@8 ; ScriptRegistrant<dp88_conquestController>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestController@@@@8 ; ScriptRegistrant<dp88_conquestController>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_conquestControlZone@@@@6B@ ; ScriptRegistrant<dp88_conquestControlZone>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlZone@@@@@8 ; ScriptRegistrant<dp88_conquestControlZone> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8 ; ScriptRegistrant<dp88_conquestControlZone>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8 ; ScriptRegistrant<dp88_conquestControlZone>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8 ; ScriptRegistrant<dp88_conquestControlZone>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_conquestControlObject@@@@6B@ ; ScriptRegistrant<dp88_conquestControlObject>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlObject@@@@@8 ; ScriptRegistrant<dp88_conquestControlObject> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8 ; ScriptRegistrant<dp88_conquestControlObject>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8 ; ScriptRegistrant<dp88_conquestControlObject>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8 ; ScriptRegistrant<dp88_conquestControlObject>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_radarInvisibility@@@@6B@ ; ScriptRegistrant<dp88_radarInvisibility>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_radarInvisibility@@@@@8 ; ScriptRegistrant<dp88_radarInvisibility> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8 ; ScriptRegistrant<dp88_radarInvisibility>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8 ; ScriptRegistrant<dp88_radarInvisibility>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8 ; ScriptRegistrant<dp88_radarInvisibility>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_turretSound@@@@6B@ ; ScriptRegistrant<dp88_turretSound>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_turretSound@@@@@8 ; ScriptRegistrant<dp88_turretSound> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_turretSound@@@@8	; ScriptRegistrant<dp88_turretSound>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_turretSound@@@@8	; ScriptRegistrant<dp88_turretSound>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_turretSound@@@@8 ; ScriptRegistrant<dp88_turretSound>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_teleport@@@@6B@	; ScriptRegistrant<dp88_teleport>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_teleport@@@@@8	; ScriptRegistrant<dp88_teleport> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_teleport@@@@8	; ScriptRegistrant<dp88_teleport>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_teleport@@@@8	; ScriptRegistrant<dp88_teleport>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_teleport@@@@8 ; ScriptRegistrant<dp88_teleport>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@6B@ ; ScriptRegistrant<dp88_Ammo_Animation>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@@8 ; ScriptRegistrant<dp88_Ammo_Animation> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8 ; ScriptRegistrant<dp88_Ammo_Animation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8 ; ScriptRegistrant<dp88_Ammo_Animation>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8 ; ScriptRegistrant<dp88_Ammo_Animation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Camo_Controller@@@@6B@ ; ScriptRegistrant<dp88_Camo_Controller>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Controller@@@@@8 ; ScriptRegistrant<dp88_Camo_Controller> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8 ; ScriptRegistrant<dp88_Camo_Controller>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8 ; ScriptRegistrant<dp88_Camo_Controller>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8 ; ScriptRegistrant<dp88_Camo_Controller>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Camo_Object@@@@6B@ ; ScriptRegistrant<dp88_Camo_Object>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Object@@@@@8 ; ScriptRegistrant<dp88_Camo_Object> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Camo_Object@@@@8	; ScriptRegistrant<dp88_Camo_Object>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Camo_Object@@@@8	; ScriptRegistrant<dp88_Camo_Object>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Camo_Object@@@@8 ; ScriptRegistrant<dp88_Camo_Object>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@6B@ ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@@8 ; ScriptRegistrant<dp88_Create_Object_Cinematic> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8 ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8 ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8 ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@6B@ ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@@8 ; ScriptRegistrant<dp88_Set_Team_On_Custom> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8 ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8 ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8 ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@6B@ ; ScriptRegistrant<dp88_RegenerateHitpoints>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@@8 ; ScriptRegistrant<dp88_RegenerateHitpoints> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8 ; ScriptRegistrant<dp88_RegenerateHitpoints>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8 ; ScriptRegistrant<dp88_RegenerateHitpoints>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8 ; ScriptRegistrant<dp88_RegenerateHitpoints>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@6B@ ; ScriptRegistrant<dp88_CreateAttachedObject>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@@8 ; ScriptRegistrant<dp88_CreateAttachedObject> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8 ; ScriptRegistrant<dp88_CreateAttachedObject>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8 ; ScriptRegistrant<dp88_CreateAttachedObject>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8 ; ScriptRegistrant<dp88_CreateAttachedObject>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@6B@ ; ScriptRegistrant<dp88_customPointsPercentage>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@@8 ; ScriptRegistrant<dp88_customPointsPercentage> `RTTI Type Descriptor'
PUBLIC	??_R3?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8 ; ScriptRegistrant<dp88_customPointsPercentage>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8 ; ScriptRegistrant<dp88_customPointsPercentage>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8 ; ScriptRegistrant<dp88_customPointsPercentage>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@02081cea
PUBLIC	__real@3c23d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f400000
PUBLIC	__real@3f733333
PUBLIC	__real@3f79999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40a051ec
PUBLIC	__real@40a66666
PUBLIC	__real@40accccd
PUBLIC	__real@40c90fdb
PUBLIC	__real@41a00000
PUBLIC	__real@41f00000
PUBLIC	__real@42c80000
PUBLIC	__real@43340000
PUBLIC	__real@437f0000
PUBLIC	__real@43b40000
PUBLIC	__real@43fa0000
PUBLIC	__real@44000000
PUBLIC	__real@44800000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___wassert:PROC
EXTRN	__imp__atof:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__atoi:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__vsprintf_s:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp___time64:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	?Random_Float@WWMath@@SAMXZ:PROC		; WWMath::Random_Float
EXTRN	??0ScriptImpClass@@QAE@XZ:PROC			; ScriptImpClass::ScriptImpClass
EXTRN	??1ScriptImpClass@@UAE@XZ:PROC			; ScriptImpClass::~ScriptImpClass
EXTRN	?Get_Name@ScriptImpClass@@UAEPBDXZ:PROC		; ScriptImpClass::Get_Name
EXTRN	?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z:PROC ; ScriptImpClass::Set_Parameters_String
EXTRN	?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z:PROC ; ScriptImpClass::Get_Parameters_String
EXTRN	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z:PROC	; ScriptImpClass::Get_Parameter
EXTRN	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z:PROC	; ScriptImpClass::Get_Parameter
EXTRN	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z:PROC ; ScriptImpClass::Get_Int_Parameter
EXTRN	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z:PROC ; ScriptImpClass::Get_Float_Parameter
EXTRN	?Get_Vector3_Parameter@ScriptImpClass@@QAE?AVVector3@@PBD@Z:PROC ; ScriptImpClass::Get_Vector3_Parameter
EXTRN	?Get_Parameter_Index@ScriptImpClass@@QAEHPBD@Z:PROC ; ScriptImpClass::Get_Parameter_Index
EXTRN	?Destroy_Script@ScriptImpClass@@QAEXXZ:PROC	; ScriptImpClass::Destroy_Script
EXTRN	?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z:PROC ; ScriptImpClass::Attach
EXTRN	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z:PROC ; ScriptImpClass::Detach
EXTRN	?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z:PROC ; ScriptImpClass::Save
EXTRN	?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z:PROC ; ScriptImpClass::Load
EXTRN	??1ScriptFactory@@UAE@XZ:PROC			; ScriptFactory::~ScriptFactory
EXTRN	??0ScriptFactory@@IAE@PBD0@Z:PROC		; ScriptFactory::ScriptFactory
EXTRN	?Console_Output@@YAXPBDZZ:PROC			; Console_Output
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	__imp_?Format@StringClass@@QAAHPBDZZ:PROC
EXTRN	__imp_?Format_Args@StringClass@@QAAHPBDABQAD@Z:PROC
EXTRN	__imp_?Replace@StringClass@@QAEHPBD0_NH@Z:PROC
EXTRN	__imp_?Get_String@StringClass@@AAEXH_N@Z:PROC
EXTRN	__imp_?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC
EXTRN	__imp_?Free_String@StringClass@@AAEXXZ:PROC
EXTRN	__imp_?Free_String@WideStringClass@@AAEXXZ:PROC
EXTRN	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z:PROC ; INIClass::Find_Entry
EXTRN	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z:PROC ; INIClass::Find_Section
EXTRN	??1INIClass@@UAE@XZ:PROC			; INIClass::~INIClass
EXTRN	?Get_Definition_Name@@YAPBDK@Z:PROC		; Get_Definition_Name
EXTRN	?Find_Definition@@YAPAVDefinitionClass@@K@Z:PROC ; Find_Definition
EXTRN	?Is_Valid_Preset_ID@@YA_NK@Z:PROC		; Is_Valid_Preset_ID
EXTRN	?Is_Valid_Preset@@YA_NPBD@Z:PROC		; Is_Valid_Preset
EXTRN	?Get_Z_Rotation@Matrix3D@@QBEMXZ:PROC		; Matrix3D::Get_Z_Rotation
EXTRN	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z:PROC ; Matrix3D::Set
EXTRN	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z:PROC ; Matrix3D::Set
EXTRN	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Object_Type
EXTRN	?Set_Object_Type@@YAXPAVScriptableGameObj@@H@Z:PROC ; Set_Object_Type
EXTRN	?Get_Object_Count@@YAHHPBD@Z:PROC		; Get_Object_Count
EXTRN	?Get_Velocity@@YA?AVVector3@@PAVScriptableGameObj@@@Z:PROC ; Get_Velocity
EXTRN	?Set_Velocity@@YAXPAVScriptableGameObj@@VVector3@@@Z:PROC ; Set_Velocity
EXTRN	?Get_Transform@@YA?AVMatrix3D@@PAVScriptableGameObj@@@Z:PROC ; Get_Transform
EXTRN	?Set_Transform@@YAXPAVScriptableGameObj@@VMatrix3D@@@Z:PROC ; Set_Transform
EXTRN	?Get_Player_ID@@YAJPAVScriptableGameObj@@@Z:PROC ; Get_Player_ID
EXTRN	?Get_Team_Score@@YAMH@Z:PROC			; Get_Team_Score
EXTRN	?Find_Player@@YAPAVcPlayer@@H@Z:PROC		; Find_Player
EXTRN	?Set_Team_Score@@YAXHM@Z:PROC			; Set_Team_Score
EXTRN	?Get_Current_Bullets@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Current_Bullets
EXTRN	?Get_Current_Max_Bullets@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Current_Max_Bullets
EXTRN	?Get_Current_Clip_Max_Bullets@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Current_Clip_Max_Bullets
EXTRN	?Get_Current_Total_Bullets@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Current_Total_Bullets
EXTRN	?Get_Current_Total_Max_Bullets@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Current_Total_Max_Bullets
EXTRN	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z:PROC ; Get_Vehicle
EXTRN	?Change_Character@@YA_NPAVScriptableGameObj@@PBD@Z:PROC ; Change_Character
EXTRN	?Get_Vehicle_Occupant@@YAPAVScriptableGameObj@@PAV1@H@Z:PROC ; Get_Vehicle_Occupant
EXTRN	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z:PROC ; Get_Vehicle_Driver
EXTRN	?Get_Vehicle_Seat_Count@@YAHPAVScriptableGameObj@@@Z:PROC ; Get_Vehicle_Seat_Count
EXTRN	?Soldier_Transition_Vehicle@@YAXPAVScriptableGameObj@@@Z:PROC ; Soldier_Transition_Vehicle
EXTRN	?Create_Zone@@YAPAVScriptableGameObj@@PBDAAVOBBoxClass@@@Z:PROC ; Create_Zone
EXTRN	?Is_Spy@@YA_NPAVScriptableGameObj@@@Z:PROC	; Is_Spy
EXTRN	?Set@Matrix3@@QAEXABVQuaternion@@@Z:PROC	; Matrix3::Set
EXTRN	?Find_Base@BaseControllerClass@@SAPAV1@H@Z:PROC	; BaseControllerClass::Find_Base
EXTRN	?Set_Base_Destroyed@BaseControllerClass@@QAEX_N@Z:PROC ; BaseControllerClass::Set_Base_Destroyed
EXTRN	?Get@SysTimeClass@@QAEIXZ:PROC			; SysTimeClass::Get
EXTRN	?Get_Entry@GenericDataSafeClass@@SAPAVDataSafeEntryClass@@VDataSafeHandleClass@@@Z:PROC ; GenericDataSafeClass::Get_Entry
EXTRN	?Shuffle@GenericDataSafeClass@@KAX_N@Z:PROC	; GenericDataSafeClass::Shuffle
EXTRN	?Mem_Copy_Decrypt@GenericDataSafeClass@@KAXPAX0H_N@Z:PROC ; GenericDataSafeClass::Mem_Copy_Decrypt
EXTRN	?Say_Security_Fault@GenericDataSafeClass@@KAXXZ:PROC ; GenericDataSafeClass::Say_Security_Fault
EXTRN	??1ReferencerClass@@UAE@XZ:PROC			; ReferencerClass::~ReferencerClass
EXTRN	?On_Post_Load@ReferencerClass@@UAEXXZ:PROC	; ReferencerClass::On_Post_Load
EXTRN	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z:PROC ; ReferencerClass::operator=
EXTRN	?Is_Teammate@DamageableGameObj@@QAE_NPAV1@@Z:PROC ; DamageableGameObj::Is_Teammate
EXTRN	?Is_Enemy@DamageableGameObj@@QAE_NPAV1@@Z:PROC	; DamageableGameObj::Is_Enemy
EXTRN	?Set@LineSegClass@@QAEXABV1@ABVMatrix3D@@@Z:PROC ; LineSegClass::Set
EXTRN	?Is_Acting@ActionClass@@QAE_NXZ:PROC		; ActionClass::Is_Acting
EXTRN	?Is_Base_Powered@@YA_NH@Z:PROC			; Is_Base_Powered
EXTRN	?Get_Translated_String@@YAPBDK@Z:PROC		; Get_Translated_String
EXTRN	?Get_Translated_Preset_Name@@YAPBDPAVScriptableGameObj@@@Z:PROC ; Get_Translated_Preset_Name
EXTRN	?Get_Team_Name@@YAPBDH@Z:PROC			; Get_Team_Name
EXTRN	?Is_Valid_String_ID@@YA_NK@Z:PROC		; Is_Valid_String_ID
EXTRN	?Get_String_ID_By_Desc@@YAKPBD@Z:PROC		; Get_String_ID_By_Desc
EXTRN	?Get_String_Sound_ID@@YAKK@Z:PROC		; Get_String_Sound_ID
EXTRN	?Set_Damage_Points@@YAXPAVScriptableGameObj@@M@Z:PROC ; Set_Damage_Points
EXTRN	?Set_Death_Points@@YAXPAVScriptableGameObj@@M@Z:PROC ; Set_Death_Points
EXTRN	?Get_Max_Hitpoints@@YAMPAVScriptableGameObj@@@Z:PROC ; Get_Max_Hitpoints
EXTRN	?Get_Hitpoints@@YAMPAVScriptableGameObj@@@Z:PROC ; Get_Hitpoints
EXTRN	?Is_Valid_Warhead_Type@@YA_NPBD@Z:PROC		; Is_Valid_Warhead_Type
EXTRN	?Wake_Up_Objects_In_Box@@YAXPAVScriptableGameObj@@PBD@Z:PROC ; Wake_Up_Objects_In_Box
EXTRN	?Remove_Script@@YAXPAVScriptableGameObj@@PBD@Z:PROC ; Remove_Script
EXTRN	?Find_Object_With_Script@@YAPAVScriptableGameObj@@PBD@Z:PROC ; Find_Object_With_Script
EXTRN	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z:PROC ; Find_Script_On_Object
EXTRN	?Attach_Script_V@@YAXPAVScriptableGameObj@@PBD1ZZ:PROC ; Attach_Script_V
EXTRN	?Attach_Script_Once_V@@YAXPAVScriptableGameObj@@PBD1ZZ:PROC ; Attach_Script_Once_V
EXTRN	?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::Detach
EXTRN	?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::Destroyed
EXTRN	?InstallHook@JFW_Key_Hook_Base@@QAEXPBDPAVScriptableGameObj@@@Z:PROC ; JFW_Key_Hook_Base::InstallHook
EXTRN	?RemoveHook@JFW_Key_Hook_Base@@QAEXXZ:PROC	; JFW_Key_Hook_Base::RemoveHook
EXTRN	??1JFW_Key_Hook_Base@@UAE@XZ:PROC		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
EXTRN	?Detach@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z:PROC ; MultiKeyHookScriptImpClass::Detach
EXTRN	?Destroyed@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z:PROC ; MultiKeyHookScriptImpClass::Destroyed
EXTRN	??_E?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z:PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vector deleting destructor'
EXTRN	?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Object_Created_Hook_Base::Detach
EXTRN	?Created@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z:PROC ; JFW_Object_Created_Hook_Base::Created
EXTRN	?InstallHook@JFW_Object_Created_Hook_Base@@QAEXXZ:PROC ; JFW_Object_Created_Hook_Base::InstallHook
EXTRN	??1JFW_Object_Created_Hook_Base@@UAE@XZ:PROC	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
EXTRN	?Send_Message_Team@@YAXHIIIPBD@Z:PROC		; Send_Message_Team
EXTRN	??0LoopedAnimationController@@QAE@PAVScriptableGameObj@@@Z:PROC ; LoopedAnimationController::LoopedAnimationController
EXTRN	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z:PROC ; LoopedAnimationController::PlayAnimation
EXTRN	??_Edp88_randomWeather@@UAEPAXI@Z:PROC		; dp88_randomWeather::`vector deleting destructor'
EXTRN	??_Edp88_unitSounds@@UAEPAXI@Z:PROC		; dp88_unitSounds::`vector deleting destructor'
EXTRN	??_Edp88_uniqueInfantry_controller@@UAEPAXI@Z:PROC ; dp88_uniqueInfantry_controller::`vector deleting destructor'
EXTRN	??_Edp88_damageAnimation@@UAEPAXI@Z:PROC	; dp88_damageAnimation::`vector deleting destructor'
EXTRN	??_Edp88_objectAnnouncements@@UAEPAXI@Z:PROC	; dp88_objectAnnouncements::`vector deleting destructor'
EXTRN	??_Edp88_chronoTank@@UAEPAXI@Z:PROC		; dp88_chronoTank::`vector deleting destructor'
EXTRN	??_Edp88_spawnVehiclePart@@UAEPAXI@Z:PROC	; dp88_spawnVehiclePart::`vector deleting destructor'
EXTRN	??_Edp88_customPoints@@UAEPAXI@Z:PROC		; dp88_customPoints::`vector deleting destructor'
EXTRN	??_Edp88_customPointsPercentage@@UAEPAXI@Z:PROC	; dp88_customPointsPercentage::`vector deleting destructor'
EXTRN	??_Edp88_conquestController@@UAEPAXI@Z:PROC	; dp88_conquestController::`vector deleting destructor'
EXTRN	??_Edp88_conquestControlZone@@UAEPAXI@Z:PROC	; dp88_conquestControlZone::`vector deleting destructor'
EXTRN	??_Edp88_conquestControlObject@@UAEPAXI@Z:PROC	; dp88_conquestControlObject::`vector deleting destructor'
EXTRN	??_Edp88_radarInvisibility@@UAEPAXI@Z:PROC	; dp88_radarInvisibility::`vector deleting destructor'
EXTRN	??_Edp88_turretSound@@UAEPAXI@Z:PROC		; dp88_turretSound::`vector deleting destructor'
EXTRN	??_Edp88_teleport@@UAEPAXI@Z:PROC		; dp88_teleport::`vector deleting destructor'
EXTRN	??_Edp88_Ammo_Animation@@UAEPAXI@Z:PROC		; dp88_Ammo_Animation::`vector deleting destructor'
EXTRN	??_Edp88_Camo_Controller@@UAEPAXI@Z:PROC	; dp88_Camo_Controller::`vector deleting destructor'
EXTRN	??_Edp88_Camo_Object@@UAEPAXI@Z:PROC		; dp88_Camo_Object::`vector deleting destructor'
EXTRN	??_Edp88_Create_Object_Cinematic@@UAEPAXI@Z:PROC ; dp88_Create_Object_Cinematic::`vector deleting destructor'
EXTRN	??_Edp88_Set_Team_On_Custom@@UAEPAXI@Z:PROC	; dp88_Set_Team_On_Custom::`vector deleting destructor'
EXTRN	??_Edp88_RegenerateHitpoints@@UAEPAXI@Z:PROC	; dp88_RegenerateHitpoints::`vector deleting destructor'
EXTRN	??_Edp88_CreateAttachedObject@@UAEPAXI@Z:PROC	; dp88_CreateAttachedObject::`vector deleting destructor'
EXTRN	?Get_Warhead_Type@ArmorWarheadManager@@SAIPBD@Z:PROC ; ArmorWarheadManager::Get_Warhead_Type
EXTRN	?Get_Warhead_Name@ArmorWarheadManager@@SAPBDI@Z:PROC ; ArmorWarheadManager::Get_Warhead_Name
EXTRN	?Get_Definition@VehicleGameObj@@QBEABVVehicleGameObjDef@@XZ:PROC ; VehicleGameObj::Get_Definition
EXTRN	?Set_Immovable@VehicleGameObj@@QAEX_N@Z:PROC	; VehicleGameObj::Set_Immovable
EXTRN	?Inside_Me@ScriptZoneGameObj@@QAE_NPAVPhysicalGameObj@@@Z:PROC ; ScriptZoneGameObj::Inside_Me
EXTRN	??_E?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_randomWeather>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_unitSounds>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_damageAnimation>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_objectAnnouncements>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_chronoTank>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_spawnVehiclePart>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_customPoints>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_conquestController>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_conquestControlZone>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_conquestControlObject>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_radarInvisibility>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_turretSound>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_teleport>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Ammo_Animation>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Camo_Controller>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Camo_Object>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_RegenerateHitpoints>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_CreateAttachedObject>::`vector deleting destructor'
EXTRN	??_E?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAXI@Z:PROC ; ScriptRegistrant<dp88_customPointsPercentage>::`vector deleting destructor'
EXTRN	__CIatan2:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_asin_precise:PROC
EXTRN	__libm_sse2_atan_precise:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__libm_sse2_tan_precise:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?Exe@@3HA:DWORD					; Exe
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAcosTable
EXTRN	?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastAsinTable
EXTRN	?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A:DWORD ; _FastSinTable
EXTRN	?Commands@@3PAUScriptCommands@@A:DWORD		; Commands
EXTRN	__imp_?m_EmptyString@StringClass@@0AAPADA:DWORD
EXTRN	__imp_?m_NullChar@StringClass@@0AADA:DWORD
EXTRN	?SystemTime@SysTimeClass@@2AAV1@A:DWORD		; SysTimeClass::SystemTime
EXTRN	?SimpleKey@GenericDataSafeClass@@1AAKA:DWORD	; GenericDataSafeClass::SimpleKey
EXTRN	?HandleKey@GenericDataSafeClass@@1AAKA:DWORD	; GenericDataSafeClass::HandleKey
EXTRN	?NumLists@GenericDataSafeClass@@1AAHA:DWORD	; GenericDataSafeClass::NumLists
EXTRN	?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A:DWORD ; GenericDataSafeClass::Safe
EXTRN	?Checksum@GenericDataSafeClass@@1AAKA:DWORD	; GenericDataSafeClass::Checksum
EXTRN	?SecurityCheckDelay@GenericDataSafeClass@@1AAKA:DWORD ; GenericDataSafeClass::SecurityCheckDelay
EXTRN	?SentinelOne@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A:DWORD ; GenericDataSafeClass::SentinelOne
EXTRN	?SentinelTwo@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A:DWORD ; GenericDataSafeClass::SentinelTwo
EXTRN	?CRCErrors@GenericDataSafeClass@@1AAHA:DWORD	; GenericDataSafeClass::CRCErrors
EXTRN	?ReturnList@?$DataSafeClass@H@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A:DWORD ; DataSafeClass<int>::ReturnList
EXTRN	?ReturnIndex@?$DataSafeClass@H@@0AAHA:DWORD	; DataSafeClass<int>::ReturnIndex
EXTRN	?AddObjectCreateHook@@3P6AHPAUObjectCreateHookStruct@@@ZA:DWORD ; AddObjectCreateHook
EXTRN	?RemoveObjectCreateHook@@3P6AXH@ZA:DWORD	; RemoveObjectCreateHook
EXTRN	?Send_Message@@3P6AXIIIPBD@ZA:DWORD		; Send_Message
EXTRN	?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA:DWORD ; Send_Message_Player
EXTRN	?Update_Network_Object@@3P6AXPAVNetworkObjectClass@@@ZA:DWORD ; Update_Network_Object
EXTRN	?Create_2D_Sound_Team@@3P6AHPBDH@ZA:DWORD	; Create_2D_Sound_Team
EXTRN	?GameObjList@GameObjManager@@2AAV?$SList@VBaseGameObj@@@@A:DWORD ; GameObjManager::GameObjList
EXTRN	?SmartGameObjList@GameObjManager@@2AAV?$SList@VSmartGameObj@@@@A:DWORD ; GameObjManager::SmartGameObjList
EXTRN	?ReturnList@?$DataSafeClass@M@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A:DWORD ; DataSafeClass<float>::ReturnList
EXTRN	?ReturnIndex@?$DataSafeClass@M@@0AAHA:DWORD	; DataSafeClass<float>::ReturnIndex
EXTRN	__fltused:DWORD
;	COMDAT ?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA
_BSS	SEGMENT
?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA DB 01H DUP (?) ; `GenericDataSafeClass::Security_Check'::`2'::_checking
_BSS	ENDS
;	COMDAT ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA
_BSS	SEGMENT
?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA DD 01H DUP (?) ; `GenericDataSafeClass::Security_Check'::`2'::_calls
_BSS	ENDS
_BSS	SEGMENT
?dp88_randomWeather_Registrant@@3V?$ScriptRegistrant@Vdp88_randomWeather@@@@A DB 010H DUP (?) ; dp88_randomWeather_Registrant
?dp88_unitSounds_Registrant@@3V?$ScriptRegistrant@Vdp88_unitSounds@@@@A DB 010H DUP (?) ; dp88_unitSounds_Registrant
?dp88_uniqueInfantry_controller_Registrant@@3V?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@A DB 010H DUP (?) ; dp88_uniqueInfantry_controller_Registrant
?dp88_damageAnimation_Registrant@@3V?$ScriptRegistrant@Vdp88_damageAnimation@@@@A DB 010H DUP (?) ; dp88_damageAnimation_Registrant
?dp88_objectAnnouncements_Registrant@@3V?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@A DB 010H DUP (?) ; dp88_objectAnnouncements_Registrant
?dp88_chronoTank_Registrant@@3V?$ScriptRegistrant@Vdp88_chronoTank@@@@A DB 010H DUP (?) ; dp88_chronoTank_Registrant
?dp88_spawnVehiclePart_Registrant@@3V?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@A DB 010H DUP (?) ; dp88_spawnVehiclePart_Registrant
?dp88_customPoints_Registrant@@3V?$ScriptRegistrant@Vdp88_customPoints@@@@A DB 010H DUP (?) ; dp88_customPoints_Registrant
?dp88_conquestController_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestController@@@@A DB 010H DUP (?) ; dp88_conquestController_Registrant
?dp88_conquestControlZone_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestControlZone@@@@A DB 010H DUP (?) ; dp88_conquestControlZone_Registrant
?dp88_conquestControlObject_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestControlObject@@@@A DB 010H DUP (?) ; dp88_conquestControlObject_Registrant
?dp88_radarInvisibility_Registrant@@3V?$ScriptRegistrant@Vdp88_radarInvisibility@@@@A DB 010H DUP (?) ; dp88_radarInvisibility_Registrant
?dp88_turretSound_Registrant@@3V?$ScriptRegistrant@Vdp88_turretSound@@@@A DB 010H DUP (?) ; dp88_turretSound_Registrant
?dp88_teleport_Registrant@@3V?$ScriptRegistrant@Vdp88_teleport@@@@A DB 010H DUP (?) ; dp88_teleport_Registrant
?dp88_Ammo_Animation_Registrant@@3V?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@A DB 010H DUP (?) ; dp88_Ammo_Animation_Registrant
?dp88_Camo_Controller_Registrant@@3V?$ScriptRegistrant@Vdp88_Camo_Controller@@@@A DB 010H DUP (?) ; dp88_Camo_Controller_Registrant
?dp88_Camo_Object_Registrant@@3V?$ScriptRegistrant@Vdp88_Camo_Object@@@@A DB 010H DUP (?) ; dp88_Camo_Object_Registrant
?dp88_Create_Object_Cinematic_Registrant@@3V?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@A DB 010H DUP (?) ; dp88_Create_Object_Cinematic_Registrant
?dp88_Set_Team_On_Custom_Registrant@@3V?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@A DB 010H DUP (?) ; dp88_Set_Team_On_Custom_Registrant
?dp88_RegenerateHitpoints_Registrant@@3V?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@A DB 010H DUP (?) ; dp88_RegenerateHitpoints_Registrant
?dp88_CreateAttachedObject_Registrant@@3V?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@A DB 010H DUP (?) ; dp88_CreateAttachedObject_Registrant
?dp88_customPointsPercentage_Registrant@@3V?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@A DB 010H DUP (?) ; dp88_customPointsPercentage_Registrant
_BSS	ENDS
;	COMDAT ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A
_BSS	SEGMENT
?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A DB 014H DUP (?) ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
_BSS	ENDS
;	COMDAT ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
_BSS	SEGMENT
??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51 DD 01H DUP (?) ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`local static guard'
_BSS	ENDS
;	COMDAT ?oh_dear@?7???R?$SafeDataClass@M@@QBEAAMXZ@4MA
_BSS	SEGMENT
?oh_dear@?7???R?$SafeDataClass@M@@QBEAAMXZ@4MA DD 01H DUP (?) ; `SafeDataClass<float>::operator()'::`8'::oh_dear
_BSS	ENDS
CRT$XCU	SEGMENT
_dp88_randomWeather_Registrant$initializer$ DD FLAT:??__Edp88_randomWeather_Registrant@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40accccd
CONST	SEGMENT
__real@40accccd DD 040accccdr			; 5.4
CONST	ENDS
;	COMDAT __real@40a66666
CONST	SEGMENT
__real@40a66666 DD 040a66666r			; 5.2
CONST	ENDS
;	COMDAT __real@40a051ec
CONST	SEGMENT
__real@40a051ec DD 040a051ecr			; 5.01
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f79999a
CONST	SEGMENT
__real@3f79999a DD 03f79999ar			; 0.975
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@02081cea
CONST	SEGMENT
__real@02081cea DD 002081cear			; 1e-037
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@@8 ; ScriptRegistrant<dp88_customPointsPercentage>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8 ; ScriptRegistrant<dp88_customPointsPercentage>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8 DD 00H ; ScriptRegistrant<dp88_customPointsPercentage>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_customPointsPercentage> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@6B@ DD 00H ; ScriptRegistrant<dp88_customPointsPercentage>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@@8 ; ScriptRegistrant<dp88_CreateAttachedObject>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8 ; ScriptRegistrant<dp88_CreateAttachedObject>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8 DD 00H ; ScriptRegistrant<dp88_CreateAttachedObject>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_CreateAttachedObject> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@6B@ DD 00H ; ScriptRegistrant<dp88_CreateAttachedObject>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@@8 ; ScriptRegistrant<dp88_RegenerateHitpoints>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8 ; ScriptRegistrant<dp88_RegenerateHitpoints>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8 DD 00H ; ScriptRegistrant<dp88_RegenerateHitpoints>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_RegenerateHitpoints> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@6B@ DD 00H ; ScriptRegistrant<dp88_RegenerateHitpoints>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@@8 ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8 ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8 DD 00H ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Set_Team_On_Custom> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@6B@ DD 00H ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@@8 ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8 ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8 DD 00H ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Create_Object_Cinematic> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@'
	DB	00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@6B@ DD 00H ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Camo_Object@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Camo_Object@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Object@@@@@8 ; ScriptRegistrant<dp88_Camo_Object>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Camo_Object@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Camo_Object@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Camo_Object@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Camo_Object@@@@8 ; ScriptRegistrant<dp88_Camo_Object>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Camo_Object@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Camo_Object@@@@8 DD 00H	; ScriptRegistrant<dp88_Camo_Object>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Camo_Object@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Object@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Object@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Camo_Object> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Camo_Object@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Camo_Object@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Camo_Object@@@@6B@ DD 00H	; ScriptRegistrant<dp88_Camo_Object>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Object@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Camo_Object@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Controller@@@@@8 ; ScriptRegistrant<dp88_Camo_Controller>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8 ; ScriptRegistrant<dp88_Camo_Controller>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8 DD 00H ; ScriptRegistrant<dp88_Camo_Controller>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Controller@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Controller@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Camo_Controller> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Camo_Controller@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Camo_Controller@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Camo_Controller@@@@6B@ DD 00H ; ScriptRegistrant<dp88_Camo_Controller>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Camo_Controller@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Camo_Controller@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@@8 ; ScriptRegistrant<dp88_Ammo_Animation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8 ; ScriptRegistrant<dp88_Ammo_Animation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8 DD 00H ; ScriptRegistrant<dp88_Ammo_Animation>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_Ammo_Animation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@6B@ DD 00H ; ScriptRegistrant<dp88_Ammo_Animation>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_teleport@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_teleport@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_teleport@@@@@8 ; ScriptRegistrant<dp88_teleport>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_teleport@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_teleport@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_teleport@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_teleport@@@@8 ; ScriptRegistrant<dp88_teleport>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_teleport@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_teleport@@@@8 DD 00H	; ScriptRegistrant<dp88_teleport>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_teleport@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_teleport@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_teleport@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_teleport> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_teleport@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_teleport@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_teleport@@@@6B@ DD 00H	; ScriptRegistrant<dp88_teleport>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_teleport@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_teleport@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_turretSound@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_turretSound@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_turretSound@@@@@8 ; ScriptRegistrant<dp88_turretSound>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_turretSound@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_turretSound@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_turretSound@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_turretSound@@@@8 ; ScriptRegistrant<dp88_turretSound>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_turretSound@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_turretSound@@@@8 DD 00H	; ScriptRegistrant<dp88_turretSound>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_turretSound@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_turretSound@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_turretSound@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_turretSound> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_turretSound@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_turretSound@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_turretSound@@@@6B@ DD 00H	; ScriptRegistrant<dp88_turretSound>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_turretSound@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_turretSound@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_radarInvisibility@@@@@8 ; ScriptRegistrant<dp88_radarInvisibility>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8 ; ScriptRegistrant<dp88_radarInvisibility>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8 DD 00H ; ScriptRegistrant<dp88_radarInvisibility>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_radarInvisibility@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_radarInvisibility@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_radarInvisibility> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_radarInvisibility@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_radarInvisibility@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_radarInvisibility@@@@6B@ DD 00H ; ScriptRegistrant<dp88_radarInvisibility>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_radarInvisibility@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_radarInvisibility@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlObject@@@@@8 ; ScriptRegistrant<dp88_conquestControlObject>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8 ; ScriptRegistrant<dp88_conquestControlObject>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8 DD 00H ; ScriptRegistrant<dp88_conquestControlObject>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlObject@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlObject@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_conquestControlObject> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_conquestControlObject@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_conquestControlObject@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_conquestControlObject@@@@6B@ DD 00H ; ScriptRegistrant<dp88_conquestControlObject>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlObject@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_conquestControlObject@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlZone@@@@@8 ; ScriptRegistrant<dp88_conquestControlZone>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8 ; ScriptRegistrant<dp88_conquestControlZone>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8 DD 00H ; ScriptRegistrant<dp88_conquestControlZone>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlZone@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlZone@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_conquestControlZone> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_conquestControlZone@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_conquestControlZone@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_conquestControlZone@@@@6B@ DD 00H ; ScriptRegistrant<dp88_conquestControlZone>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_conquestControlZone@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_conquestControlZone@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestController@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestController@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_conquestController@@@@@8 ; ScriptRegistrant<dp88_conquestController>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_conquestController@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_conquestController@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_conquestController@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_conquestController@@@@8 ; ScriptRegistrant<dp88_conquestController>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_conquestController@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_conquestController@@@@8 DD 00H ; ScriptRegistrant<dp88_conquestController>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_conquestController@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_conquestController@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_conquestController@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_conquestController> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_conquestController@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_conquestController@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_conquestController@@@@6B@ DD 00H ; ScriptRegistrant<dp88_conquestController>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_conquestController@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_conquestController@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_customPoints@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_customPoints@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_customPoints@@@@@8 ; ScriptRegistrant<dp88_customPoints>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_customPoints@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_customPoints@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_customPoints@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_customPoints@@@@8 ; ScriptRegistrant<dp88_customPoints>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_customPoints@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_customPoints@@@@8 DD 00H	; ScriptRegistrant<dp88_customPoints>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_customPoints@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_customPoints@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_customPoints@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_customPoints> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_customPoints@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_customPoints@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_customPoints@@@@6B@ DD 00H ; ScriptRegistrant<dp88_customPoints>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_customPoints@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_customPoints@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@@8 ; ScriptRegistrant<dp88_spawnVehiclePart>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8 ; ScriptRegistrant<dp88_spawnVehiclePart>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8 DD 00H ; ScriptRegistrant<dp88_spawnVehiclePart>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_spawnVehiclePart> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@6B@ DD 00H ; ScriptRegistrant<dp88_spawnVehiclePart>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_chronoTank@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_chronoTank@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_chronoTank@@@@@8 ; ScriptRegistrant<dp88_chronoTank>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_chronoTank@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_chronoTank@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_chronoTank@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_chronoTank@@@@8 ; ScriptRegistrant<dp88_chronoTank>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_chronoTank@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_chronoTank@@@@8 DD 00H	; ScriptRegistrant<dp88_chronoTank>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_chronoTank@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_chronoTank@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_chronoTank@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_chronoTank> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_chronoTank@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_chronoTank@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_chronoTank@@@@6B@ DD 00H	; ScriptRegistrant<dp88_chronoTank>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_chronoTank@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_chronoTank@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@@8 ; ScriptRegistrant<dp88_objectAnnouncements>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8 ; ScriptRegistrant<dp88_objectAnnouncements>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8 DD 00H ; ScriptRegistrant<dp88_objectAnnouncements>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_objectAnnouncements> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@6B@ DD 00H ; ScriptRegistrant<dp88_objectAnnouncements>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_damageAnimation@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_damageAnimation@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_damageAnimation@@@@@8 ; ScriptRegistrant<dp88_damageAnimation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_damageAnimation@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_damageAnimation@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_damageAnimation@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_damageAnimation@@@@8 ; ScriptRegistrant<dp88_damageAnimation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_damageAnimation@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_damageAnimation@@@@8 DD 00H ; ScriptRegistrant<dp88_damageAnimation>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_damageAnimation@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_damageAnimation@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_damageAnimation@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_damageAnimation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_damageAnimation@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_damageAnimation@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_damageAnimation@@@@6B@ DD 00H ; ScriptRegistrant<dp88_damageAnimation>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_damageAnimation@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_damageAnimation@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@@8 ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8 ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8 DD 00H ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_uniqueInfantry_controller> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@'
	DB	'@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@6B@ DD 00H ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_unitSounds@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_unitSounds@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_unitSounds@@@@@8 ; ScriptRegistrant<dp88_unitSounds>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_unitSounds@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_unitSounds@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_unitSounds@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_unitSounds@@@@8 ; ScriptRegistrant<dp88_unitSounds>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_unitSounds@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_unitSounds@@@@8 DD 00H	; ScriptRegistrant<dp88_unitSounds>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_unitSounds@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_unitSounds@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_unitSounds@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_unitSounds> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_unitSounds@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_unitSounds@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_unitSounds@@@@6B@ DD 00H	; ScriptRegistrant<dp88_unitSounds>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_unitSounds@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_unitSounds@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_randomWeather@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_randomWeather@@@@8 DD FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_randomWeather@@@@@8 ; ScriptRegistrant<dp88_randomWeather>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_randomWeather@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ScriptRegistrant@Vdp88_randomWeather@@@@8
rdata$r	SEGMENT
??_R2?$ScriptRegistrant@Vdp88_randomWeather@@@@8 DD FLAT:??_R1A@?0A@EA@?$ScriptRegistrant@Vdp88_randomWeather@@@@8 ; ScriptRegistrant<dp88_randomWeather>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ScriptRegistrant@Vdp88_randomWeather@@@@8
rdata$r	SEGMENT
??_R3?$ScriptRegistrant@Vdp88_randomWeather@@@@8 DD 00H	; ScriptRegistrant<dp88_randomWeather>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ScriptRegistrant@Vdp88_randomWeather@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ScriptRegistrant@Vdp88_randomWeather@@@@@8
_DATA	SEGMENT
??_R0?AV?$ScriptRegistrant@Vdp88_randomWeather@@@@@8 DD FLAT:??_7type_info@@6B@ ; ScriptRegistrant<dp88_randomWeather> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ScriptRegistrant@Vdp88_randomWeather@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ScriptRegistrant@Vdp88_randomWeather@@@@6B@
rdata$r	SEGMENT
??_R4?$ScriptRegistrant@Vdp88_randomWeather@@@@6B@ DD 00H ; ScriptRegistrant<dp88_randomWeather>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ScriptRegistrant@Vdp88_randomWeather@@@@@8
	DD	FLAT:??_R3?$ScriptRegistrant@Vdp88_randomWeather@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_CreateAttachedObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_CreateAttachedObject@@8 DD FLAT:??_R0?AVdp88_CreateAttachedObject@@@8 ; dp88_CreateAttachedObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_CreateAttachedObject@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_CreateAttachedObject@@8
rdata$r	SEGMENT
??_R2dp88_CreateAttachedObject@@8 DD FLAT:??_R1A@?0A@EA@dp88_CreateAttachedObject@@8 ; dp88_CreateAttachedObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_CreateAttachedObject@@8
rdata$r	SEGMENT
??_R3dp88_CreateAttachedObject@@8 DD 00H		; dp88_CreateAttachedObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_CreateAttachedObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_CreateAttachedObject@@@8
_DATA	SEGMENT
??_R0?AVdp88_CreateAttachedObject@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_CreateAttachedObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_CreateAttachedObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_CreateAttachedObject@@6B@
rdata$r	SEGMENT
??_R4dp88_CreateAttachedObject@@6B@ DD 00H		; dp88_CreateAttachedObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_CreateAttachedObject@@@8
	DD	FLAT:??_R3dp88_CreateAttachedObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_RegenerateHitpoints@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_RegenerateHitpoints@@8 DD FLAT:??_R0?AVdp88_RegenerateHitpoints@@@8 ; dp88_RegenerateHitpoints::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_RegenerateHitpoints@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_RegenerateHitpoints@@8
rdata$r	SEGMENT
??_R2dp88_RegenerateHitpoints@@8 DD FLAT:??_R1A@?0A@EA@dp88_RegenerateHitpoints@@8 ; dp88_RegenerateHitpoints::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_RegenerateHitpoints@@8
rdata$r	SEGMENT
??_R3dp88_RegenerateHitpoints@@8 DD 00H			; dp88_RegenerateHitpoints::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_RegenerateHitpoints@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_RegenerateHitpoints@@@8
_DATA	SEGMENT
??_R0?AVdp88_RegenerateHitpoints@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_RegenerateHitpoints `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_RegenerateHitpoints@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_RegenerateHitpoints@@6B@
rdata$r	SEGMENT
??_R4dp88_RegenerateHitpoints@@6B@ DD 00H		; dp88_RegenerateHitpoints::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_RegenerateHitpoints@@@8
	DD	FLAT:??_R3dp88_RegenerateHitpoints@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Set_Team_On_Custom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Set_Team_On_Custom@@8 DD FLAT:??_R0?AVdp88_Set_Team_On_Custom@@@8 ; dp88_Set_Team_On_Custom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Set_Team_On_Custom@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Set_Team_On_Custom@@8
rdata$r	SEGMENT
??_R2dp88_Set_Team_On_Custom@@8 DD FLAT:??_R1A@?0A@EA@dp88_Set_Team_On_Custom@@8 ; dp88_Set_Team_On_Custom::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Set_Team_On_Custom@@8
rdata$r	SEGMENT
??_R3dp88_Set_Team_On_Custom@@8 DD 00H			; dp88_Set_Team_On_Custom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Set_Team_On_Custom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Set_Team_On_Custom@@@8
_DATA	SEGMENT
??_R0?AVdp88_Set_Team_On_Custom@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Set_Team_On_Custom `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Set_Team_On_Custom@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Set_Team_On_Custom@@6B@
rdata$r	SEGMENT
??_R4dp88_Set_Team_On_Custom@@6B@ DD 00H		; dp88_Set_Team_On_Custom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Set_Team_On_Custom@@@8
	DD	FLAT:??_R3dp88_Set_Team_On_Custom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Create_Object_Cinematic@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Create_Object_Cinematic@@8 DD FLAT:??_R0?AVdp88_Create_Object_Cinematic@@@8 ; dp88_Create_Object_Cinematic::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Create_Object_Cinematic@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Create_Object_Cinematic@@8
rdata$r	SEGMENT
??_R2dp88_Create_Object_Cinematic@@8 DD FLAT:??_R1A@?0A@EA@dp88_Create_Object_Cinematic@@8 ; dp88_Create_Object_Cinematic::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Create_Object_Cinematic@@8
rdata$r	SEGMENT
??_R3dp88_Create_Object_Cinematic@@8 DD 00H		; dp88_Create_Object_Cinematic::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Create_Object_Cinematic@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Create_Object_Cinematic@@@8
_DATA	SEGMENT
??_R0?AVdp88_Create_Object_Cinematic@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Create_Object_Cinematic `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Create_Object_Cinematic@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Create_Object_Cinematic@@6B@
rdata$r	SEGMENT
??_R4dp88_Create_Object_Cinematic@@6B@ DD 00H		; dp88_Create_Object_Cinematic::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Create_Object_Cinematic@@@8
	DD	FLAT:??_R3dp88_Create_Object_Cinematic@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Camo_Object@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Camo_Object@@8 DD FLAT:??_R0?AVdp88_Camo_Object@@@8 ; dp88_Camo_Object::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Camo_Object@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Camo_Object@@8
rdata$r	SEGMENT
??_R2dp88_Camo_Object@@8 DD FLAT:??_R1A@?0A@EA@dp88_Camo_Object@@8 ; dp88_Camo_Object::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Camo_Object@@8
rdata$r	SEGMENT
??_R3dp88_Camo_Object@@8 DD 00H				; dp88_Camo_Object::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Camo_Object@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Camo_Object@@@8
_DATA	SEGMENT
??_R0?AVdp88_Camo_Object@@@8 DD FLAT:??_7type_info@@6B@	; dp88_Camo_Object `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Camo_Object@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Camo_Object@@6B@
rdata$r	SEGMENT
??_R4dp88_Camo_Object@@6B@ DD 00H			; dp88_Camo_Object::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Camo_Object@@@8
	DD	FLAT:??_R3dp88_Camo_Object@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Camo_Controller@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Camo_Controller@@8 DD FLAT:??_R0?AVdp88_Camo_Controller@@@8 ; dp88_Camo_Controller::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Camo_Controller@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Camo_Controller@@8
rdata$r	SEGMENT
??_R2dp88_Camo_Controller@@8 DD FLAT:??_R1A@?0A@EA@dp88_Camo_Controller@@8 ; dp88_Camo_Controller::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Camo_Controller@@8
rdata$r	SEGMENT
??_R3dp88_Camo_Controller@@8 DD 00H			; dp88_Camo_Controller::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Camo_Controller@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Camo_Controller@@@8
_DATA	SEGMENT
??_R0?AVdp88_Camo_Controller@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Camo_Controller `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Camo_Controller@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Camo_Controller@@6B@
rdata$r	SEGMENT
??_R4dp88_Camo_Controller@@6B@ DD 00H			; dp88_Camo_Controller::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Camo_Controller@@@8
	DD	FLAT:??_R3dp88_Camo_Controller@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_Ammo_Animation@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_Ammo_Animation@@8 DD FLAT:??_R0?AVdp88_Ammo_Animation@@@8 ; dp88_Ammo_Animation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_Ammo_Animation@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_Ammo_Animation@@8
rdata$r	SEGMENT
??_R2dp88_Ammo_Animation@@8 DD FLAT:??_R1A@?0A@EA@dp88_Ammo_Animation@@8 ; dp88_Ammo_Animation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_Ammo_Animation@@8
rdata$r	SEGMENT
??_R3dp88_Ammo_Animation@@8 DD 00H			; dp88_Ammo_Animation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_Ammo_Animation@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_Ammo_Animation@@@8
_DATA	SEGMENT
??_R0?AVdp88_Ammo_Animation@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_Ammo_Animation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_Ammo_Animation@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_Ammo_Animation@@6B@
rdata$r	SEGMENT
??_R4dp88_Ammo_Animation@@6B@ DD 00H			; dp88_Ammo_Animation::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_Ammo_Animation@@@8
	DD	FLAT:??_R3dp88_Ammo_Animation@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_teleport@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_teleport@@8 DD FLAT:??_R0?AVdp88_teleport@@@8 ; dp88_teleport::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_teleport@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_teleport@@8
rdata$r	SEGMENT
??_R2dp88_teleport@@8 DD FLAT:??_R1A@?0A@EA@dp88_teleport@@8 ; dp88_teleport::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_teleport@@8
rdata$r	SEGMENT
??_R3dp88_teleport@@8 DD 00H				; dp88_teleport::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_teleport@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_teleport@@@8
_DATA	SEGMENT
??_R0?AVdp88_teleport@@@8 DD FLAT:??_7type_info@@6B@	; dp88_teleport `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_teleport@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_teleport@@6B@
rdata$r	SEGMENT
??_R4dp88_teleport@@6B@ DD 00H				; dp88_teleport::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_teleport@@@8
	DD	FLAT:??_R3dp88_teleport@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_turretSound@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_turretSound@@8 DD FLAT:??_R0?AVdp88_turretSound@@@8 ; dp88_turretSound::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_turretSound@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_turretSound@@8
rdata$r	SEGMENT
??_R2dp88_turretSound@@8 DD FLAT:??_R1A@?0A@EA@dp88_turretSound@@8 ; dp88_turretSound::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_turretSound@@8
rdata$r	SEGMENT
??_R3dp88_turretSound@@8 DD 00H				; dp88_turretSound::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_turretSound@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_turretSound@@@8
_DATA	SEGMENT
??_R0?AVdp88_turretSound@@@8 DD FLAT:??_7type_info@@6B@	; dp88_turretSound `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_turretSound@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_turretSound@@6B@
rdata$r	SEGMENT
??_R4dp88_turretSound@@6B@ DD 00H			; dp88_turretSound::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_turretSound@@@8
	DD	FLAT:??_R3dp88_turretSound@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_radarInvisibility@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_radarInvisibility@@8 DD FLAT:??_R0?AVdp88_radarInvisibility@@@8 ; dp88_radarInvisibility::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_radarInvisibility@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_radarInvisibility@@8
rdata$r	SEGMENT
??_R2dp88_radarInvisibility@@8 DD FLAT:??_R1A@?0A@EA@dp88_radarInvisibility@@8 ; dp88_radarInvisibility::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_radarInvisibility@@8
rdata$r	SEGMENT
??_R3dp88_radarInvisibility@@8 DD 00H			; dp88_radarInvisibility::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_radarInvisibility@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_radarInvisibility@@@8
_DATA	SEGMENT
??_R0?AVdp88_radarInvisibility@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_radarInvisibility `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_radarInvisibility@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_radarInvisibility@@6B@
rdata$r	SEGMENT
??_R4dp88_radarInvisibility@@6B@ DD 00H			; dp88_radarInvisibility::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_radarInvisibility@@@8
	DD	FLAT:??_R3dp88_radarInvisibility@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_conquestControlObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_conquestControlObject@@8 DD FLAT:??_R0?AVdp88_conquestControlObject@@@8 ; dp88_conquestControlObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_conquestControlObject@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_conquestControlObject@@8
rdata$r	SEGMENT
??_R2dp88_conquestControlObject@@8 DD FLAT:??_R1A@?0A@EA@dp88_conquestControlObject@@8 ; dp88_conquestControlObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_conquestControlObject@@8
rdata$r	SEGMENT
??_R3dp88_conquestControlObject@@8 DD 00H		; dp88_conquestControlObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_conquestControlObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_conquestControlObject@@@8
_DATA	SEGMENT
??_R0?AVdp88_conquestControlObject@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_conquestControlObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_conquestControlObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_conquestControlObject@@6B@
rdata$r	SEGMENT
??_R4dp88_conquestControlObject@@6B@ DD 00H		; dp88_conquestControlObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_conquestControlObject@@@8
	DD	FLAT:??_R3dp88_conquestControlObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_conquestControlZone@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_conquestControlZone@@8 DD FLAT:??_R0?AVdp88_conquestControlZone@@@8 ; dp88_conquestControlZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_conquestControlZone@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_conquestControlZone@@8
rdata$r	SEGMENT
??_R2dp88_conquestControlZone@@8 DD FLAT:??_R1A@?0A@EA@dp88_conquestControlZone@@8 ; dp88_conquestControlZone::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_conquestControlZone@@8
rdata$r	SEGMENT
??_R3dp88_conquestControlZone@@8 DD 00H			; dp88_conquestControlZone::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_conquestControlZone@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_conquestControlZone@@@8
_DATA	SEGMENT
??_R0?AVdp88_conquestControlZone@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_conquestControlZone `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_conquestControlZone@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_conquestControlZone@@6B@
rdata$r	SEGMENT
??_R4dp88_conquestControlZone@@6B@ DD 00H		; dp88_conquestControlZone::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_conquestControlZone@@@8
	DD	FLAT:??_R3dp88_conquestControlZone@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_conquestController@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_conquestController@@8 DD FLAT:??_R0?AVdp88_conquestController@@@8 ; dp88_conquestController::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_conquestController@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_conquestController@@8
rdata$r	SEGMENT
??_R2dp88_conquestController@@8 DD FLAT:??_R1A@?0A@EA@dp88_conquestController@@8 ; dp88_conquestController::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_conquestController@@8
rdata$r	SEGMENT
??_R3dp88_conquestController@@8 DD 00H			; dp88_conquestController::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_conquestController@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_conquestController@@@8
_DATA	SEGMENT
??_R0?AVdp88_conquestController@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_conquestController `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_conquestController@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_conquestController@@6B@
rdata$r	SEGMENT
??_R4dp88_conquestController@@6B@ DD 00H		; dp88_conquestController::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_conquestController@@@8
	DD	FLAT:??_R3dp88_conquestController@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_customPointsPercentage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_customPointsPercentage@@8 DD FLAT:??_R0?AVdp88_customPointsPercentage@@@8 ; dp88_customPointsPercentage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_customPointsPercentage@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_customPointsPercentage@@8
rdata$r	SEGMENT
??_R2dp88_customPointsPercentage@@8 DD FLAT:??_R1A@?0A@EA@dp88_customPointsPercentage@@8 ; dp88_customPointsPercentage::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_customPointsPercentage@@8
rdata$r	SEGMENT
??_R3dp88_customPointsPercentage@@8 DD 00H		; dp88_customPointsPercentage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_customPointsPercentage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_customPointsPercentage@@@8
_DATA	SEGMENT
??_R0?AVdp88_customPointsPercentage@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_customPointsPercentage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_customPointsPercentage@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_customPointsPercentage@@6B@
rdata$r	SEGMENT
??_R4dp88_customPointsPercentage@@6B@ DD 00H		; dp88_customPointsPercentage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_customPointsPercentage@@@8
	DD	FLAT:??_R3dp88_customPointsPercentage@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_customPoints@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_customPoints@@8 DD FLAT:??_R0?AVdp88_customPoints@@@8 ; dp88_customPoints::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_customPoints@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_customPoints@@8
rdata$r	SEGMENT
??_R2dp88_customPoints@@8 DD FLAT:??_R1A@?0A@EA@dp88_customPoints@@8 ; dp88_customPoints::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_customPoints@@8
rdata$r	SEGMENT
??_R3dp88_customPoints@@8 DD 00H			; dp88_customPoints::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_customPoints@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_customPoints@@@8
_DATA	SEGMENT
??_R0?AVdp88_customPoints@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_customPoints `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_customPoints@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_customPoints@@6B@
rdata$r	SEGMENT
??_R4dp88_customPoints@@6B@ DD 00H			; dp88_customPoints::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_customPoints@@@8
	DD	FLAT:??_R3dp88_customPoints@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_spawnVehiclePart@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_spawnVehiclePart@@8 DD FLAT:??_R0?AVdp88_spawnVehiclePart@@@8 ; dp88_spawnVehiclePart::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_spawnVehiclePart@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_spawnVehiclePart@@8
rdata$r	SEGMENT
??_R2dp88_spawnVehiclePart@@8 DD FLAT:??_R1A@?0A@EA@dp88_spawnVehiclePart@@8 ; dp88_spawnVehiclePart::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_spawnVehiclePart@@8
rdata$r	SEGMENT
??_R3dp88_spawnVehiclePart@@8 DD 00H			; dp88_spawnVehiclePart::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_spawnVehiclePart@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_spawnVehiclePart@@@8
_DATA	SEGMENT
??_R0?AVdp88_spawnVehiclePart@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_spawnVehiclePart `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_spawnVehiclePart@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_spawnVehiclePart@@6B@
rdata$r	SEGMENT
??_R4dp88_spawnVehiclePart@@6B@ DD 00H			; dp88_spawnVehiclePart::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_spawnVehiclePart@@@8
	DD	FLAT:??_R3dp88_spawnVehiclePart@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_chronoTank@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_chronoTank@@8 DD FLAT:??_R0?AVdp88_chronoTank@@@8 ; dp88_chronoTank::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_chronoTank@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_chronoTank@@8
rdata$r	SEGMENT
??_R2dp88_chronoTank@@8 DD FLAT:??_R1A@?0A@EA@dp88_chronoTank@@8 ; dp88_chronoTank::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@JFW_Key_Hook_Base@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_chronoTank@@8
rdata$r	SEGMENT
??_R3dp88_chronoTank@@8 DD 00H				; dp88_chronoTank::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2dp88_chronoTank@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_chronoTank@@@8
_DATA	SEGMENT
??_R0?AVdp88_chronoTank@@@8 DD FLAT:??_7type_info@@6B@	; dp88_chronoTank `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_chronoTank@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_chronoTank@@6B@
rdata$r	SEGMENT
??_R4dp88_chronoTank@@6B@ DD 00H			; dp88_chronoTank::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_chronoTank@@@8
	DD	FLAT:??_R3dp88_chronoTank@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_objectAnnouncements@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_objectAnnouncements@@8 DD FLAT:??_R0?AVdp88_objectAnnouncements@@@8 ; dp88_objectAnnouncements::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_objectAnnouncements@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_objectAnnouncements@@8
rdata$r	SEGMENT
??_R2dp88_objectAnnouncements@@8 DD FLAT:??_R1A@?0A@EA@dp88_objectAnnouncements@@8 ; dp88_objectAnnouncements::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_objectAnnouncements@@8
rdata$r	SEGMENT
??_R3dp88_objectAnnouncements@@8 DD 00H			; dp88_objectAnnouncements::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_objectAnnouncements@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_objectAnnouncements@@@8
_DATA	SEGMENT
??_R0?AVdp88_objectAnnouncements@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_objectAnnouncements `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_objectAnnouncements@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_objectAnnouncements@@6B@
rdata$r	SEGMENT
??_R4dp88_objectAnnouncements@@6B@ DD 00H		; dp88_objectAnnouncements::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_objectAnnouncements@@@8
	DD	FLAT:??_R3dp88_objectAnnouncements@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_damageAnimation@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_damageAnimation@@8 DD FLAT:??_R0?AVdp88_damageAnimation@@@8 ; dp88_damageAnimation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_damageAnimation@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_damageAnimation@@8
rdata$r	SEGMENT
??_R2dp88_damageAnimation@@8 DD FLAT:??_R1A@?0A@EA@dp88_damageAnimation@@8 ; dp88_damageAnimation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_damageAnimation@@8
rdata$r	SEGMENT
??_R3dp88_damageAnimation@@8 DD 00H			; dp88_damageAnimation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_damageAnimation@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_damageAnimation@@@8
_DATA	SEGMENT
??_R0?AVdp88_damageAnimation@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_damageAnimation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_damageAnimation@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_damageAnimation@@6B@
rdata$r	SEGMENT
??_R4dp88_damageAnimation@@6B@ DD 00H			; dp88_damageAnimation::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_damageAnimation@@@8
	DD	FLAT:??_R3dp88_damageAnimation@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_uniqueInfantry_controller@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_uniqueInfantry_controller@@8 DD FLAT:??_R0?AVdp88_uniqueInfantry_controller@@@8 ; dp88_uniqueInfantry_controller::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_uniqueInfantry_controller@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_uniqueInfantry_controller@@8
rdata$r	SEGMENT
??_R2dp88_uniqueInfantry_controller@@8 DD FLAT:??_R1A@?0A@EA@dp88_uniqueInfantry_controller@@8 ; dp88_uniqueInfantry_controller::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_uniqueInfantry_controller@@8
rdata$r	SEGMENT
??_R3dp88_uniqueInfantry_controller@@8 DD 00H		; dp88_uniqueInfantry_controller::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2dp88_uniqueInfantry_controller@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_uniqueInfantry_controller@@@8
_DATA	SEGMENT
??_R0?AVdp88_uniqueInfantry_controller@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_uniqueInfantry_controller `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_uniqueInfantry_controller@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_uniqueInfantry_controller@@6B@
rdata$r	SEGMENT
??_R4dp88_uniqueInfantry_controller@@6B@ DD 00H		; dp88_uniqueInfantry_controller::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_uniqueInfantry_controller@@@8
	DD	FLAT:??_R3dp88_uniqueInfantry_controller@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_unitSounds@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_unitSounds@@8 DD FLAT:??_R0?AVdp88_unitSounds@@@8 ; dp88_unitSounds::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_unitSounds@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_unitSounds@@8
rdata$r	SEGMENT
??_R2dp88_unitSounds@@8 DD FLAT:??_R1A@?0A@EA@dp88_unitSounds@@8 ; dp88_unitSounds::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_unitSounds@@8
rdata$r	SEGMENT
??_R3dp88_unitSounds@@8 DD 00H				; dp88_unitSounds::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_unitSounds@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_unitSounds@@@8
_DATA	SEGMENT
??_R0?AVdp88_unitSounds@@@8 DD FLAT:??_7type_info@@6B@	; dp88_unitSounds `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_unitSounds@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_unitSounds@@6B@
rdata$r	SEGMENT
??_R4dp88_unitSounds@@6B@ DD 00H			; dp88_unitSounds::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_unitSounds@@@8
	DD	FLAT:??_R3dp88_unitSounds@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@dp88_randomWeather@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@dp88_randomWeather@@8 DD FLAT:??_R0?AVdp88_randomWeather@@@8 ; dp88_randomWeather::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3dp88_randomWeather@@8
rdata$r	ENDS
;	COMDAT ??_R2dp88_randomWeather@@8
rdata$r	SEGMENT
??_R2dp88_randomWeather@@8 DD FLAT:??_R1A@?0A@EA@dp88_randomWeather@@8 ; dp88_randomWeather::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3dp88_randomWeather@@8
rdata$r	SEGMENT
??_R3dp88_randomWeather@@8 DD 00H			; dp88_randomWeather::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2dp88_randomWeather@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdp88_randomWeather@@@8
_DATA	SEGMENT
??_R0?AVdp88_randomWeather@@@8 DD FLAT:??_7type_info@@6B@ ; dp88_randomWeather `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVdp88_randomWeather@@', 00H
_DATA	ENDS
;	COMDAT ??_R4dp88_randomWeather@@6B@
rdata$r	SEGMENT
??_R4dp88_randomWeather@@6B@ DD 00H			; dp88_randomWeather::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVdp88_randomWeather@@@8
	DD	FLAT:??_R3dp88_randomWeather@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8 DD FLAT:??_R0?AVJFW_Object_Created_Hook_Base@@@8 ; JFW_Object_Created_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R2JFW_Object_Created_Hook_Base@@8 DD FLAT:??_R1A@?0A@EA@JFW_Object_Created_Hook_Base@@8 ; JFW_Object_Created_Hook_Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	SEGMENT
??_R3JFW_Object_Created_Hook_Base@@8 DD 00H		; JFW_Object_Created_Hook_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVJFW_Object_Created_Hook_Base@@@8
_DATA	SEGMENT
??_R0?AVJFW_Object_Created_Hook_Base@@@8 DD FLAT:??_7type_info@@6B@ ; JFW_Object_Created_Hook_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVJFW_Object_Created_Hook_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4JFW_Object_Created_Hook_Base@@6B@
rdata$r	SEGMENT
??_R4JFW_Object_Created_Hook_Base@@6B@ DD 00H		; JFW_Object_Created_Hook_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVJFW_Object_Created_Hook_Base@@@8
	DD	FLAT:??_R3JFW_Object_Created_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD FLAT:??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	SEGMENT
??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8 DD 00H ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpC'
	DB	'lass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
rdata$r	SEGMENT
??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ DD 00H ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@@8
	DD	FLAT:??_R3?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8 DD FLAT:??_R0?AVMultiKeyHookScriptImpClass@@@8 ; MultiKeyHookScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R2MultiKeyHookScriptImpClass@@8 DD FLAT:??_R1A@?0A@EA@MultiKeyHookScriptImpClass@@8 ; MultiKeyHookScriptImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MultiKeyHookScriptImpClass@@8
rdata$r	SEGMENT
??_R3MultiKeyHookScriptImpClass@@8 DD 00H		; MultiKeyHookScriptImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMultiKeyHookScriptImpClass@@@8
_DATA	SEGMENT
??_R0?AVMultiKeyHookScriptImpClass@@@8 DD FLAT:??_7type_info@@6B@ ; MultiKeyHookScriptImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMultiKeyHookScriptImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MultiKeyHookScriptImpClass@@6B@
rdata$r	SEGMENT
??_R4MultiKeyHookScriptImpClass@@6B@ DD 00H		; MultiKeyHookScriptImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMultiKeyHookScriptImpClass@@@8
	DD	FLAT:??_R3MultiKeyHookScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@JFW_Key_Hook_Base@@8 DD FLAT:??_R0?AVJFW_Key_Hook_Base@@@8 ; JFW_Key_Hook_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R2JFW_Key_Hook_Base@@8 DD FLAT:??_R1A@?0A@EA@JFW_Key_Hook_Base@@8 ; JFW_Key_Hook_Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptImpClass@@8
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3JFW_Key_Hook_Base@@8
rdata$r	SEGMENT
??_R3JFW_Key_Hook_Base@@8 DD 00H			; JFW_Key_Hook_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVJFW_Key_Hook_Base@@@8
_DATA	SEGMENT
??_R0?AVJFW_Key_Hook_Base@@@8 DD FLAT:??_7type_info@@6B@ ; JFW_Key_Hook_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVJFW_Key_Hook_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4JFW_Key_Hook_Base@@6B@
rdata$r	SEGMENT
??_R4JFW_Key_Hook_Base@@6B@ DD 00H			; JFW_Key_Hook_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVJFW_Key_Hook_Base@@@8
	DD	FLAT:??_R3JFW_Key_Hook_Base@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ReferencerClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ReferencerClass@@8 DD FLAT:??_R0?AVReferencerClass@@@8 ; ReferencerClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ReferencerClass@@8
rdata$r	SEGMENT
??_R2ReferencerClass@@8 DD FLAT:??_R1A@?0A@EA@ReferencerClass@@8 ; ReferencerClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ReferencerClass@@8
rdata$r	SEGMENT
??_R3ReferencerClass@@8 DD 00H				; ReferencerClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReferencerClass@@@8
_DATA	SEGMENT
??_R0?AVReferencerClass@@@8 DD FLAT:??_7type_info@@6B@	; ReferencerClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReferencerClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ReferencerClass@@6B@
rdata$r	SEGMENT
??_R4ReferencerClass@@6B@ DD 00H			; ReferencerClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReferencerClass@@@8
	DD	FLAT:??_R3ReferencerClass@@8
rdata$r	ENDS
;	COMDAT ??_R4PostLoadableClass@@6B@
rdata$r	SEGMENT
??_R4PostLoadableClass@@6B@ DD 00H			; PostLoadableClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPostLoadableClass@@@8
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PostLoadableClass@@8
rdata$r	SEGMENT
??_R2PostLoadableClass@@8 DD FLAT:??_R1A@?0A@EA@PostLoadableClass@@8 ; PostLoadableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PostLoadableClass@@8
rdata$r	SEGMENT
??_R3PostLoadableClass@@8 DD 00H			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPostLoadableClass@@@8
_DATA	SEGMENT
??_R0?AVPostLoadableClass@@@8 DD FLAT:??_7type_info@@6B@ ; PostLoadableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPostLoadableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PostLoadableClass@@8 DD FLAT:??_R0?AVPostLoadableClass@@@8 ; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INIClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INIClass@@8 DD FLAT:??_R0?AVINIClass@@@8	; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R2INIClass@@8
rdata$r	SEGMENT
??_R2INIClass@@8 DD FLAT:??_R1A@?0A@EA@INIClass@@8	; INIClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INIClass@@8
rdata$r	SEGMENT
??_R3INIClass@@8 DD 00H					; INIClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVINIClass@@@8
_DATA	SEGMENT
??_R0?AVINIClass@@@8 DD FLAT:??_7type_info@@6B@		; INIClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVINIClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INIClass@@6B@
rdata$r	SEGMENT
??_R4INIClass@@6B@ DD 00H				; INIClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVINIClass@@@8
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptImpClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptImpClass@@8 DD FLAT:??_R0?AVScriptImpClass@@@8 ; ScriptImpClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptImpClass@@8
rdata$r	SEGMENT
??_R2ScriptImpClass@@8 DD FLAT:??_R1A@?0A@EA@ScriptImpClass@@8 ; ScriptImpClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ScriptClass@@8
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ScriptImpClass@@8
rdata$r	SEGMENT
??_R3ScriptImpClass@@8 DD 00H				; ScriptImpClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptImpClass@@@8
_DATA	SEGMENT
??_R0?AVScriptImpClass@@@8 DD FLAT:??_7type_info@@6B@	; ScriptImpClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptImpClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptImpClass@@6B@
rdata$r	SEGMENT
??_R4ScriptImpClass@@6B@ DD 00H				; ScriptImpClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptImpClass@@@8
	DD	FLAT:??_R3ScriptImpClass@@8
rdata$r	ENDS
;	COMDAT ??_R4GameObjObserverClass@@6B@
rdata$r	SEGMENT
??_R4GameObjObserverClass@@6B@ DD 00H			; GameObjObserverClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGameObjObserverClass@@@8
	DD	FLAT:??_R3GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R2GameObjObserverClass@@8
rdata$r	SEGMENT
??_R2GameObjObserverClass@@8 DD FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8 ; GameObjObserverClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GameObjObserverClass@@8
rdata$r	SEGMENT
??_R3GameObjObserverClass@@8 DD 00H			; GameObjObserverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGameObjObserverClass@@@8
_DATA	SEGMENT
??_R0?AVGameObjObserverClass@@@8 DD FLAT:??_7type_info@@6B@ ; GameObjObserverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGameObjObserverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GameObjObserverClass@@8 DD FLAT:??_R0?AVGameObjObserverClass@@@8 ; GameObjObserverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptClass@@8 DD FLAT:??_R0?AVScriptClass@@@8 ; ScriptClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptClass@@8
rdata$r	SEGMENT
??_R2ScriptClass@@8 DD FLAT:??_R1A@?0A@EA@ScriptClass@@8 ; ScriptClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameObjObserverClass@@8
rdata$r	ENDS
;	COMDAT ??_R3ScriptClass@@8
rdata$r	SEGMENT
??_R3ScriptClass@@8 DD 00H				; ScriptClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptClass@@@8
_DATA	SEGMENT
??_R0?AVScriptClass@@@8 DD FLAT:??_7type_info@@6B@	; ScriptClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptClass@@6B@
rdata$r	SEGMENT
??_R4ScriptClass@@6B@ DD 00H				; ScriptClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptClass@@@8
	DD	FLAT:??_R3ScriptClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScriptFactory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScriptFactory@@8 DD FLAT:??_R0?AVScriptFactory@@@8 ; ScriptFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R2ScriptFactory@@8
rdata$r	SEGMENT
??_R2ScriptFactory@@8 DD FLAT:??_R1A@?0A@EA@ScriptFactory@@8 ; ScriptFactory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ScriptFactory@@8
rdata$r	SEGMENT
??_R3ScriptFactory@@8 DD 00H				; ScriptFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScriptFactory@@@8
_DATA	SEGMENT
??_R0?AVScriptFactory@@@8 DD FLAT:??_7type_info@@6B@	; ScriptFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScriptFactory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ScriptFactory@@6B@
rdata$r	SEGMENT
??_R4ScriptFactory@@6B@ DD 00H				; ScriptFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScriptFactory@@@8
	DD	FLAT:??_R3ScriptFactory@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@
CONST	SEGMENT
??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@ DB 'ObjectPoolCl'
	DB	'ass<class GenericSLNode,256>::~ObjectPoolClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
CONST	SEGMENT
??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ DB '%d memor'
	DB	'y leaks found in ObjectPoolClass<class GenericSLNode,256>::~O'
	DB	'bjectPoolClass', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@
CONST	SEGMENT
??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@ DB 'ObjectPoolCl'
	DB	'ass<class GenericSLNode,256>::Allocate_Object_Memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@MPPIFKPJ@ScriptRegistrant?$DMclass?5dp88_cust@
CONST	SEGMENT
??_C@_0DM@MPPIFKPJ@ScriptRegistrant?$DMclass?5dp88_cust@ DB 'ScriptRegist'
	DB	'rant<class dp88_customPointsPercentage>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@LFLOCGCH@ScriptRegistrant?$DMclass?5dp88_Crea@
CONST	SEGMENT
??_C@_0DK@LFLOCGCH@ScriptRegistrant?$DMclass?5dp88_Crea@ DB 'ScriptRegist'
	DB	'rant<class dp88_CreateAttachedObject>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OKEEEKLJ@ScriptRegistrant?$DMclass?5dp88_Rege@
CONST	SEGMENT
??_C@_0DJ@OKEEEKLJ@ScriptRegistrant?$DMclass?5dp88_Rege@ DB 'ScriptRegist'
	DB	'rant<class dp88_RegenerateHitpoints>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@GICBHLPO@ScriptRegistrant?$DMclass?5dp88_Set_@
CONST	SEGMENT
??_C@_0DI@GICBHLPO@ScriptRegistrant?$DMclass?5dp88_Set_@ DB 'ScriptRegist'
	DB	'rant<class dp88_Set_Team_On_Custom>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LKNDEIDF@ScriptRegistrant?$DMclass?5dp88_Crea@
CONST	SEGMENT
??_C@_0DN@LKNDEIDF@ScriptRegistrant?$DMclass?5dp88_Crea@ DB 'ScriptRegist'
	DB	'rant<class dp88_Create_Object_Cinematic>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NDILDPL@ScriptRegistrant?$DMclass?5dp88_Camo@
CONST	SEGMENT
??_C@_0DB@NDILDPL@ScriptRegistrant?$DMclass?5dp88_Camo@ DB 'ScriptRegistr'
	DB	'ant<class dp88_Camo_Object>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FBMHABBF@ScriptRegistrant?$DMclass?5dp88_Camo@
CONST	SEGMENT
??_C@_0DF@FBMHABBF@ScriptRegistrant?$DMclass?5dp88_Camo@ DB 'ScriptRegist'
	DB	'rant<class dp88_Camo_Controller>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DDAABFML@ScriptRegistrant?$DMclass?5dp88_Ammo@
CONST	SEGMENT
??_C@_0DE@DDAABFML@ScriptRegistrant?$DMclass?5dp88_Ammo@ DB 'ScriptRegist'
	DB	'rant<class dp88_Ammo_Animation>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IGPMMMMA@ScriptRegistrant?$DMclass?5dp88_tele@
CONST	SEGMENT
??_C@_0CO@IGPMMMMA@ScriptRegistrant?$DMclass?5dp88_tele@ DB 'ScriptRegist'
	DB	'rant<class dp88_teleport>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@EOLBBBPH@ScriptRegistrant?$DMclass?5dp88_turr@
CONST	SEGMENT
??_C@_0DB@EOLBBBPH@ScriptRegistrant?$DMclass?5dp88_turr@ DB 'ScriptRegist'
	DB	'rant<class dp88_turretSound>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@MDPEDLFC@ScriptRegistrant?$DMclass?5dp88_rada@
CONST	SEGMENT
??_C@_0DH@MDPEDLFC@ScriptRegistrant?$DMclass?5dp88_rada@ DB 'ScriptRegist'
	DB	'rant<class dp88_radarInvisibility>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@ILMNJHNN@ScriptRegistrant?$DMclass?5dp88_conq@
CONST	SEGMENT
??_C@_0DL@ILMNJHNN@ScriptRegistrant?$DMclass?5dp88_conq@ DB 'ScriptRegist'
	DB	'rant<class dp88_conquestControlObject>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DDNMINDP@ScriptRegistrant?$DMclass?5dp88_conq@
CONST	SEGMENT
??_C@_0DJ@DDNMINDP@ScriptRegistrant?$DMclass?5dp88_conq@ DB 'ScriptRegist'
	DB	'rant<class dp88_conquestControlZone>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LFFHDACI@ScriptRegistrant?$DMclass?5dp88_conq@
CONST	SEGMENT
??_C@_0DI@LFFHDACI@ScriptRegistrant?$DMclass?5dp88_conq@ DB 'ScriptRegist'
	DB	'rant<class dp88_conquestController>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DKDBALLO@ScriptRegistrant?$DMclass?5dp88_cust@
CONST	SEGMENT
??_C@_0DC@DKDBALLO@ScriptRegistrant?$DMclass?5dp88_cust@ DB 'ScriptRegist'
	DB	'rant<class dp88_customPoints>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GPDLOHJG@ScriptRegistrant?$DMclass?5dp88_spaw@
CONST	SEGMENT
??_C@_0DG@GPDLOHJG@ScriptRegistrant?$DMclass?5dp88_spaw@ DB 'ScriptRegist'
	DB	'rant<class dp88_spawnVehiclePart>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KKGPGDCG@ScriptRegistrant?$DMclass?5dp88_chro@
CONST	SEGMENT
??_C@_0DA@KKGPGDCG@ScriptRegistrant?$DMclass?5dp88_chro@ DB 'ScriptRegist'
	DB	'rant<class dp88_chronoTank>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NLMOEDBC@ScriptRegistrant?$DMclass?5dp88_obje@
CONST	SEGMENT
??_C@_0DJ@NLMOEDBC@ScriptRegistrant?$DMclass?5dp88_obje@ DB 'ScriptRegist'
	DB	'rant<class dp88_objectAnnouncements>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LHLNAIGF@ScriptRegistrant?$DMclass?5dp88_dama@
CONST	SEGMENT
??_C@_0DF@LHLNAIGF@ScriptRegistrant?$DMclass?5dp88_dama@ DB 'ScriptRegist'
	DB	'rant<class dp88_damageAnimation>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@DDMDLHOJ@ScriptRegistrant?$DMclass?5dp88_uniq@
CONST	SEGMENT
??_C@_0DP@DDMDLHOJ@ScriptRegistrant?$DMclass?5dp88_uniq@ DB 'ScriptRegist'
	DB	'rant<class dp88_uniqueInfantry_controller>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FDLCHKBK@ScriptRegistrant?$DMclass?5dp88_unit@
CONST	SEGMENT
??_C@_0DA@FDLCHKBK@ScriptRegistrant?$DMclass?5dp88_unit@ DB 'ScriptRegist'
	DB	'rant<class dp88_unitSounds>::Create', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H
	DB	't', 00H, 's', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\scripts.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MDLKPMAN@ScriptRegistrant?$DMclass?5dp88_rand@
CONST	SEGMENT
??_C@_0DD@MDLKPMAN@ScriptRegistrant?$DMclass?5dp88_rand@ DB 'ScriptRegist'
	DB	'rant<class dp88_randomWeather>::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct '
	DB	'MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Aft'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Be'
	DB	'fore', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Al'
	DB	'l', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_He'
	DB	'ad', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct'
	DB	' MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\slist.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
CONST	SEGMENT
??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@ DB 'SList<struct '
	DB	'MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KLGADBN@dp88_customPointsPercentage?$AA@
CONST	SEGMENT
??_C@_0BM@KLGADBN@dp88_customPointsPercentage?$AA@ DB 'dp88_customPointsP'
	DB	'ercentage', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@6B@ ; ScriptRegistrant<dp88_customPointsPercentage>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BK@CHAELLIF@dp88_CreateAttachedObject?$AA@
CONST	SEGMENT
??_C@_0BK@CHAELLIF@dp88_CreateAttachedObject?$AA@ DB 'dp88_CreateAttached'
	DB	'Object', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0IM@PIPDNFDL@Preset?3string?0Bone?3string?0Enable@
CONST	SEGMENT
??_C@_0IM@PIPDNFDL@Preset?3string?0Bone?3string?0Enable@ DB 'Preset:strin'
	DB	'g,Bone:string,EnableHealthLink=1:int,EnableVeterancyLink=0:in'
	DB	't,VisibleToAI=0:int,DriverEnterCustom=0:int,DriverExitCustom='
	DB	'0:int', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@6B@ ; ScriptRegistrant<dp88_CreateAttachedObject>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BB@MAHEBJLL@DriverExitCustom?$AA@
CONST	SEGMENT
??_C@_0BB@MAHEBJLL@DriverExitCustom?$AA@ DB 'DriverExitCustom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MBLJKBGD@DriverEnterCustom?$AA@
CONST	SEGMENT
??_C@_0BC@MBLJKBGD@DriverEnterCustom?$AA@ DB 'DriverEnterCustom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OJJPOFPO@VisibleToAI?$AA@
CONST	SEGMENT
??_C@_0M@OJJPOFPO@VisibleToAI?$AA@ DB 'VisibleToAI', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GODCMMCE@EnableVeterancyLink?$AA@
CONST	SEGMENT
??_C@_0BE@GODCMMCE@EnableVeterancyLink?$AA@ DB 'EnableVeterancyLink', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EAABGGCB@EnableHealthLink?$AA@
CONST	SEGMENT
??_C@_0BB@EAABGGCB@EnableHealthLink?$AA@ DB 'EnableHealthLink', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@ICJIHHN@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Faile@
CONST	SEGMENT
??_C@_0GA@ICJIHHN@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Faile@ DB '['
	DB	'%d:%s:%s] Critical Error: Failed to create an instance of the'
	DB	' preset %s. Destroying script...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MDPGIMG@dp88_RegenerateHitpoints?$AA@
CONST	SEGMENT
??_C@_0BJ@MDPGIMG@dp88_RegenerateHitpoints?$AA@ DB 'dp88_RegenerateHitpoi'
	DB	'nts', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0JA@NKIDBMGD@Hitpoints?3float?0Interval?$DN1?3int?0W@
CONST	SEGMENT
??_C@_0JA@NKIDBMGD@Hitpoints?3float?0Interval?$DN1?3int?0W@ DB 'Hitpoints'
	DB	':float,Interval=1:int,Warhead:string,Max_Percent=100:int,Dama'
	DB	'ge_Timeout=0:int,Hitpoints_Veteran:float,Hitpoints_Elite:floa'
	DB	't,Mode=3:int', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@6B@ ; ScriptRegistrant<dp88_RegenerateHitpoints>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BC@LOLJHMMN@Hitpoints_Veteran?$AA@
CONST	SEGMENT
??_C@_0BC@LOLJHMMN@Hitpoints_Veteran?$AA@ DB 'Hitpoints_Veteran', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NJCFNLMO@Hitpoints_Elite?$AA@
CONST	SEGMENT
??_C@_0BA@NJCFNLMO@Hitpoints_Elite?$AA@ DB 'Hitpoints_Elite', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDCLAFNL@Warhead?$AA@
CONST	SEGMENT
??_C@_07EDCLAFNL@Warhead?$AA@ DB 'Warhead', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAENDFJJ@Damage_Timeout?$AA@
CONST	SEGMENT
??_C@_0P@DAENDFJJ@Damage_Timeout?$AA@ DB 'Damage_Timeout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KDKDEPAG@Interval?$AA@
CONST	SEGMENT
??_C@_08KDKDEPAG@Interval?$AA@ DB 'Interval', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OCPLOBIH@Max_Percent?$AA@
CONST	SEGMENT
??_C@_0M@OCPLOBIH@Max_Percent?$AA@ DB 'Max_Percent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEDJGKFJ@Hitpoints?$AA@
CONST	SEGMENT
??_C@_09EEDJGKFJ@Hitpoints?$AA@ DB 'Hitpoints', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KNKPIPFB@Mode?$AA@
CONST	SEGMENT
??_C@_04KNKPIPFB@Mode?$AA@ DB 'Mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JOLBDOKJ@dp88_Set_Team_On_Custom?$AA@
CONST	SEGMENT
??_C@_0BI@JOLBDOKJ@dp88_Set_Team_On_Custom?$AA@ DB 'dp88_Set_Team_On_Cust'
	DB	'om', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HBPJHKKO@Message?3int?$AA@
CONST	SEGMENT
??_C@_0M@HBPJHKKO@Message?3int?$AA@ DB 'Message:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@6B@ ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0CA@DMKHPCHF@dp88_buildingScripts_controller?$AA@
CONST	SEGMENT
??_C@_0CA@DMKHPCHF@dp88_buildingScripts_controller?$AA@ DB 'dp88_building'
	DB	'Scripts_controller', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BEIHKDLJ@Message?$AA@
CONST	SEGMENT
??_C@_07BEIHKDLJ@Message?$AA@ DB 'Message', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NHEJAFFL@dp88_Create_Object_Cinematic?$AA@
CONST	SEGMENT
??_C@_0BN@NHEJAFFL@dp88_Create_Object_Cinematic?$AA@ DB 'dp88_Create_Obje'
	DB	'ct_Cinematic', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@CJLOGCJ@Preset?3string?0Cinematic?3string?0T@
CONST	SEGMENT
??_C@_0EB@CJLOGCJ@Preset?3string?0Cinematic?3string?0T@ DB 'Preset:string'
	DB	',Cinematic:string,Trigger_Custom:int,Offset:vector3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@6B@ ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0CE@PHAAGGEC@SH_CinematicVehicleDeliveryCallb@
CONST	SEGMENT
??_C@_0CE@PHAAGGEC@SH_CinematicVehicleDeliveryCallb@ DB 'SH_CinematicVehi'
	DB	'cleDeliveryCallback', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKLLCHIK@Preset?$AA@
CONST	SEGMENT
??_C@_06CKLLCHIK@Preset?$AA@ DB 'Preset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GHBGJIKL@JFW_Cinematic?$AA@
CONST	SEGMENT
??_C@_0O@GHBGJIKL@JFW_Cinematic?$AA@ DB 'JFW_Cinematic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOHMBPNC@?$CFs?01?$AA@
CONST	SEGMENT
??_C@_04LOHMBPNC@?$CFs?01?$AA@ DB '%s,1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIGEHAGH@Cinematic?$AA@
CONST	SEGMENT
??_C@_09HIGEHAGH@Cinematic?$AA@ DB 'Cinematic', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JONNOJD@Trigger_Custom?$AA@
CONST	SEGMENT
??_C@_0P@JONNOJD@Trigger_Custom?$AA@ DB 'Trigger_Custom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IIGFBOLK@dp88_Camo_Object?$AA@
CONST	SEGMENT
??_C@_0BB@IIGFBOLK@dp88_Camo_Object?$AA@ DB 'dp88_Camo_Object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MNBKOHKO@Camouflage?3string?0Model?3string?$AA@
CONST	SEGMENT
??_C@_0BP@MNBKOHKO@Camouflage?3string?0Model?3string?$AA@ DB 'Camouflage:'
	DB	'string,Model:string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Camo_Object@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Camo_Object@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Camo_Object@@@@6B@ ; ScriptRegistrant<dp88_Camo_Object>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_05NFIJOKEG@Model?$AA@
CONST	SEGMENT
??_C@_05NFIJOKEG@Model?$AA@ DB 'Model', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FLBIGINA@dp88_Camo_Controller?$AA@
CONST	SEGMENT
??_C@_0BF@FLBIGINA@dp88_Camo_Controller?$AA@ DB 'dp88_Camo_Controller', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LHPBPJNN@Camouflage?3string?$AA@
CONST	SEGMENT
??_C@_0BC@LHPBPJNN@Camouflage?3string?$AA@ DB 'Camouflage:string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Camo_Controller@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Camo_Controller@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Camo_Controller@@@@6B@ ; ScriptRegistrant<dp88_Camo_Controller>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0L@KLKHNBPB@Camouflage?$AA@
CONST	SEGMENT
??_C@_0L@KLKHNBPB@Camouflage?$AA@ DB 'Camouflage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FFKNKIGP@dp88_Ammo_Animation?$AA@
CONST	SEGMENT
??_C@_0BE@FFKNKIGP@dp88_Ammo_Animation?$AA@ DB 'dp88_Ammo_Animation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@LOJAFJIG@Animation?3string?0Animation_Frame@
CONST	SEGMENT
??_C@_0GM@LOJAFJIG@Animation?3string?0Animation_Frame@ DB 'Animation:stri'
	DB	'ng,Animation_Frames:int,Use_Total_Ammo:int,Animation_Model:st'
	DB	'ring,Animation_Model_Bone:string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@6B@ ; ScriptRegistrant<dp88_Ammo_Animation>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BF@OHLHCKEN@Animation_Model_Bone?$AA@
CONST	SEGMENT
??_C@_0BF@OHLHCKEN@Animation_Model_Bone?$AA@ DB 'Animation_Model_Bone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NHJNEILC@Invisible_Object?$AA@
CONST	SEGMENT
??_C@_0BB@NHJNEILC@Invisible_Object?$AA@ DB 'Invisible_Object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IPCHLLAK@Animation_Model?$AA@
CONST	SEGMENT
??_C@_0BA@IPCHLLAK@Animation_Model?$AA@ DB 'Animation_Model', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@PNCMMMJI@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
CONST	SEGMENT
??_C@_0HB@PNCMMMJI@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ DB '['
	DB	'%d:%s:%s] Critical Error: This script cannot be used on a wea'
	DB	'pon with infinite animation! Destroying script...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@EBNFPOLC@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5No?5an@
CONST	SEGMENT
??_C@_0FC@EBNFPOLC@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5No?5an@ DB '['
	DB	'%d:%s:%s] Critical Error: No animation has been specified! De'
	DB	'stroying script...', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LIPBLCCH@Use_Total_Ammo?$AA@
CONST	SEGMENT
??_C@_0P@LIPBLCCH@Use_Total_Ammo?$AA@ DB 'Use_Total_Ammo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FLICDNDP@Animation_Frames?$AA@
CONST	SEGMENT
??_C@_0BB@FLICDNDP@Animation_Frames?$AA@ DB 'Animation_Frames', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ONEINPNJ@Animation?$AA@
CONST	SEGMENT
??_C@_09ONEINPNJ@Animation?$AA@ DB 'Animation', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GOIIEOMA@dp88_teleport?$AA@
CONST	SEGMENT
??_C@_0O@GOIIEOMA@dp88_teleport?$AA@ DB 'dp88_teleport', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@IEIAONDC@ObjectID?$DN0?3int?0Bone?3string?0Offse@
CONST	SEGMENT
??_C@_0FK@IEIAONDC@ObjectID?$DN0?3int?0Bone?3string?0Offse@ DB 'ObjectID='
	DB	'0:int,Bone:string,Offset:vector3,Teleport_Infantry=1:int,Tele'
	DB	'port_Vehicles=1:int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_teleport@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_teleport@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_teleport@@@@6B@ ; ScriptRegistrant<dp88_teleport>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_04ODKJLCFC@bone?$AA@
CONST	SEGMENT
??_C@_04ODKJLCFC@bone?$AA@ DB 'bone', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IJAHCGHD@Teleport_Vehicles?$AA@
CONST	SEGMENT
??_C@_0BC@IJAHCGHD@Teleport_Vehicles?$AA@ DB 'Teleport_Vehicles', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JFMDKIAL@Teleport_Infantry?$AA@
CONST	SEGMENT
??_C@_0BC@JFMDKIAL@Teleport_Infantry?$AA@ DB 'Teleport_Infantry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEMKPBPA@Offset?$AA@
CONST	SEGMENT
??_C@_06GEMKPBPA@Offset?$AA@ DB 'Offset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CCGIJNFG@Bone?$AA@
CONST	SEGMENT
??_C@_04CCGIJNFG@Bone?$AA@ DB 'Bone', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMHNALBL@ObjectID?$AA@
CONST	SEGMENT
??_C@_08CMHNALBL@ObjectID?$AA@ DB 'ObjectID', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NGHNDKMD@dp88_turretSound?$AA@
CONST	SEGMENT
??_C@_0BB@NGHNDKMD@dp88_turretSound?$AA@ DB 'dp88_turretSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FOBBIMPM@Sound_Preset?3string?0Min_Differen@
CONST	SEGMENT
??_C@_0DE@FOBBIMPM@Sound_Preset?3string?0Min_Differen@ DB 'Sound_Preset:s'
	DB	'tring,Min_Differential_Rad=0.25:float', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_turretSound@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_turretSound@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_turretSound@@@@6B@ ; ScriptRegistrant<dp88_turretSound>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0N@JLPHONAA@Sound_Preset?$AA@
CONST	SEGMENT
??_C@_0N@JLPHONAA@Sound_Preset?$AA@ DB 'Sound_Preset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGDACGEK@turret?$AA@
CONST	SEGMENT
??_C@_06GGDACGEK@turret?$AA@ DB 'turret', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@NDCAHHMO@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
CONST	SEGMENT
??_C@_0GL@NDCAHHMO@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ DB '['
	DB	'%d:%s:%s] Critical Error: This script is only compatible with'
	DB	' vehicle game objects. Destroying script...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OAKDDNEI@Min_Differential_Rad?$AA@
CONST	SEGMENT
??_C@_0BF@OAKDDNEI@Min_Differential_Rad?$AA@ DB 'Min_Differential_Rad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IFAEHJOF@dp88_radarInvisibility?$AA@
CONST	SEGMENT
??_C@_0BH@IFAEHJOF@dp88_radarInvisibility?$AA@ DB 'dp88_radarInvisibility'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_radarInvisibility@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_radarInvisibility@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_radarInvisibility@@@@6B@ ; ScriptRegistrant<dp88_radarInvisibility>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BP@HPEFELMM@dp88_radarInvisibility?3?3Detach?$AA@
CONST	SEGMENT
??_C@_0BP@HPEFELMM@dp88_radarInvisibility?3?3Detach?$AA@ DB 'dp88_radarIn'
	DB	'visibility::Detach', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA DD 07d7H ; `dp88_radarInvisibility::Detach'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@DGBMODGB@dp88_radarInvisibility?3?3Created?$AA@
CONST	SEGMENT
??_C@_0CA@DGBMODGB@dp88_radarInvisibility?3?3Created?$AA@ DB 'dp88_radarI'
	DB	'nvisibility::Created', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA DD 0788H ; `dp88_radarInvisibility::Created'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GM@CLAHJDDJ@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
CONST	SEGMENT
??_C@_0GM@CLAHJDDJ@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ DB '['
	DB	'%d:%s:%s] Critical Error: This script is only compatible with'
	DB	' physical game objects. Destroying script...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MHNNMEJP@dp88_conquestControlObject?$AA@
CONST	SEGMENT
??_C@_0BL@MHNNMEJP@dp88_conquestControlObject?$AA@ DB 'dp88_conquestContr'
	DB	'olObject', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OPGAFHJK@TickPoints?$DN1?3int?0TickInterval?$DN3?3@
CONST	SEGMENT
??_C@_0CE@OPGAFHJK@TickPoints?$DN1?3int?0TickInterval?$DN3?3@ DB 'TickPoi'
	DB	'nts=1:int,TickInterval=3:int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_conquestControlObject@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_conquestControlObject@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_conquestControlObject@@@@6B@ ; ScriptRegistrant<dp88_conquestControlObject>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BJ@OFFNAEOL@dp88_conquestControlZone?$AA@
CONST	SEGMENT
??_C@_0BJ@OFFNAEOL@dp88_conquestControlZone?$AA@ DB 'dp88_conquestControl'
	DB	'Zone', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CBD@GFGPKKJA@ZoneSize?3vector3?0ZoneOffset?3vect@
CONST	SEGMENT
??_C@_0CBD@GFGPKKJA@ZoneSize?3vector3?0ZoneOffset?3vect@ DB 'ZoneSize:vec'
	DB	'tor3,ZoneOffset:vector3,ZonePreset=Script_Zone_All:string,Cap'
	DB	'turePoints=5:int,CapturePointsFirstTeamOnly=1:int,TickPoints='
	DB	'1:int,TickInterval=3:int,CaptureTime=20:int,MultiCaptureCap=3'
	DB	':int,MultiCaptureMultiplier=0.5:float,AllowMajorityCapture=1:'
	DB	'int,CaptureAnim:string,CaptureAnimTransitionFrames=0:intCaptu'
	DB	'ringString:string,NeutralString:string,CapturedString:string,'
	DB	'AIObjective_Priority_Soldier=0:int,AIObjective_Priority_Light'
	DB	'_Vehicle=0:int,AIObjective_Priority_Heavy_Vehicle=0:int,AIObj'
	DB	'ective_Priority_Aircraft=0:int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_conquestControlZone@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_conquestControlZone@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_conquestControlZone@@@@6B@ ; ScriptRegistrant<dp88_conquestControlZone>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0L@EBJHDIBJ@?$CFZONENAME?$CF?$AA@
CONST	SEGMENT
??_C@_0L@EBJHDIBJ@?$CFZONENAME?$CF?$AA@ DB '%ZONENAME%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NCCLADPC@?$CFTICKINTERVAL?$CF?$AA@
CONST	SEGMENT
??_C@_0P@NCCLADPC@?$CFTICKINTERVAL?$CF?$AA@ DB '%TICKINTERVAL%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PHPLFNK@?$CFTICKPOINTS?$CF?$AA@
CONST	SEGMENT
??_C@_0N@PHPLFNK@?$CFTICKPOINTS?$CF?$AA@ DB '%TICKPOINTS%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IFHPLBDK@?$CFCAPTUREPOINTS?$CF?$AA@
CONST	SEGMENT
??_C@_0BA@IFHPLBDK@?$CFCAPTUREPOINTS?$CF?$AA@ DB '%CAPTUREPOINTS%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DODANHJB@CapturePoints?$AA@
CONST	SEGMENT
??_C@_0O@DODANHJB@CapturePoints?$AA@ DB 'CapturePoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFJPKHJP@?$CFOTHERTEAM?$CF?$AA@
CONST	SEGMENT
??_C@_0M@PFJPKHJP@?$CFOTHERTEAM?$CF?$AA@ DB '%OTHERTEAM%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LGEENECO@?$CFOWNINGTEAM?$CF?$AA@
CONST	SEGMENT
??_C@_0N@LGEENECO@?$CFOWNINGTEAM?$CF?$AA@ DB '%OWNINGTEAM%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MANGGPNL@1?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@MANGGPNL@1?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@ DB '1,1,%'
	DB	'd,%d,%d,%d,%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BHDEOPID@0?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@BHDEOPID@0?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@ DB '0,1,%'
	DB	'd,%d,%d,%d,%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EELNOHLF@?$CFd?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@EELNOHLF@?$CFd?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@ DB '%'
	DB	'd,1,%d,%d,%d,%d,%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHCHLMDB@?$CFd?02?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@BHCHLMDB@?$CFd?02?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@ DB '%'
	DB	'd,2,%d,%d,%d,%d,%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@
CONST	SEGMENT
??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@ DB 'dp88_AI_Objective', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHMKNGLK@CaptureAnim?$AA@
CONST	SEGMENT
??_C@_0M@OHMKNGLK@CaptureAnim?$AA@ DB 'CaptureAnim', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CJIIKAJH@CapturingString?$AA@
CONST	SEGMENT
??_C@_0BA@CJIIKAJH@CapturingString?$AA@ DB 'CapturingString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IPEDPOEA@A?5conquest?5zone?5has?5become?5neutr@
CONST	SEGMENT
??_C@_0CD@IPEDPOEA@A?5conquest?5zone?5has?5become?5neutr@ DB 'A conquest '
	DB	'zone has become neutral', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FEAPEDLG@NeutralString?$AA@
CONST	SEGMENT
??_C@_0O@FEAPEDLG@NeutralString?$AA@ DB 'NeutralString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GHEBELKI@A?5conquest?5zone?5has?5been?5capture@
CONST	SEGMENT
??_C@_0DC@GHEBELKI@A?5conquest?5zone?5has?5been?5capture@ DB 'A conquest '
	DB	'zone has been captured by %OWNINGTEAM%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GPBLCIGD@CapturedString?$AA@
CONST	SEGMENT
??_C@_0P@GPBLCIGD@CapturedString?$AA@ DB 'CapturedString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FLMEOFAO@TickPoints?$AA@
CONST	SEGMENT
??_C@_0L@FLMEOFAO@TickPoints?$AA@ DB 'TickPoints', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NGCHBJOK@TickInterval?$AA@
CONST	SEGMENT
??_C@_0N@NGCHBJOK@TickInterval?$AA@ DB 'TickInterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HOMMEOLC@AIObjective_Priority_Aircraft?$AA@
CONST	SEGMENT
??_C@_0BO@HOMMEOLC@AIObjective_Priority_Aircraft?$AA@ DB 'AIObjective_Pri'
	DB	'ority_Aircraft', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PCCIBHOI@AIObjective_Priority_Heavy_Vehic@
CONST	SEGMENT
??_C@_0CD@PCCIBHOI@AIObjective_Priority_Heavy_Vehic@ DB 'AIObjective_Prio'
	DB	'rity_Heavy_Vehicle', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JHHNOAJF@AIObjective_Priority_Light_Vehic@
CONST	SEGMENT
??_C@_0CD@JHHNOAJF@AIObjective_Priority_Light_Vehic@ DB 'AIObjective_Prio'
	DB	'rity_Light_Vehicle', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FCFHKJKI@AIObjective_Priority_Soldier?$AA@
CONST	SEGMENT
??_C@_0BN@FCFHKJKI@AIObjective_Priority_Soldier?$AA@ DB 'AIObjective_Prio'
	DB	'rity_Soldier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@LFGHOGAG@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Invai@
CONST	SEGMENT
??_C@_0EM@LFGHOGAG@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Invai@ DB '['
	DB	'%d:%s:%s] Critical Error: Invaild script parameters. Destroyi'
	DB	'ng script...', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HEKJOKPH@CaptureAnimTransitionFrames?$AA@
CONST	SEGMENT
??_C@_0BM@HEKJOKPH@CaptureAnimTransitionFrames?$AA@ DB 'CaptureAnimTransi'
	DB	'tionFrames', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ODPBOFAO@MultiCaptureMultiplier?$AA@
CONST	SEGMENT
??_C@_0BH@ODPBOFAO@MultiCaptureMultiplier?$AA@ DB 'MultiCaptureMultiplier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IHOAPCPH@MultiCaptureCap?$AA@
CONST	SEGMENT
??_C@_0BA@IHOAPCPH@MultiCaptureCap?$AA@ DB 'MultiCaptureCap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ICEKEAJO@AllowMajorityCapture?$AA@
CONST	SEGMENT
??_C@_0BF@ICEKEAJO@AllowMajorityCapture?$AA@ DB 'AllowMajorityCapture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BNMNNECF@CaptureTime?$AA@
CONST	SEGMENT
??_C@_0M@BNMNNECF@CaptureTime?$AA@ DB 'CaptureTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MIAEEAJ@ZoneSize?$AA@
CONST	SEGMENT
??_C@_08MIAEEAJ@ZoneSize?$AA@ DB 'ZoneSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CEHGLBNG@ZoneOffset?$AA@
CONST	SEGMENT
??_C@_0L@CEHGLBNG@ZoneOffset?$AA@ DB 'ZoneOffset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@HOLDHJCM@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5A?5scr@
CONST	SEGMENT
??_C@_0GI@HOLDHJCM@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5A?5scr@ DB '['
	DB	'%d:%s:%s] Critical Error: A script zone preset with the name '
	DB	'''%s'' was not found. Destroying script...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GKAHGHKM@ZonePreset?$AA@
CONST	SEGMENT
??_C@_0L@GKAHGHKM@ZonePreset?$AA@ DB 'ZonePreset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@LKMMDFJH@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Conqu@
CONST	SEGMENT
??_C@_0FH@LKMMDFJH@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Conqu@ DB '['
	DB	'%d:%s:%s] Critical Error: Conquest controller object not foun'
	DB	'd. Destroying script...', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ILMCAMOM@dp88_conquestController?$AA@
CONST	SEGMENT
??_C@_0BI@ILMCAMOM@dp88_conquestController?$AA@ DB 'dp88_conquestControll'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0KP@CPJIKONJ@ScoringMode?$DN0?3int?0TargetScoreTea@
CONST	SEGMENT
??_C@_0KP@CPJIKONJ@ScoringMode?$DN0?3int?0TargetScoreTea@ DB 'ScoringMode'
	DB	'=0:int,TargetScoreTeam0=100:int,TargetScoreTeam1=100:int,Intr'
	DB	'oString:string,ScoreInterval=60:int,ScoreString:string,ScoreS'
	DB	'tringTeam0:string,ScoreStringTeam1:string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_conquestController@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_conquestController@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_conquestController@@@@6B@ ; ScriptRegistrant<dp88_conquestController>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BD@PPCMAFOI@?$CFTEAM1SCORENEEDED?$CF?$AA@
CONST	SEGMENT
??_C@_0BD@PPCMAFOI@?$CFTEAM1SCORENEEDED?$CF?$AA@ DB '%TEAM1SCORENEEDED%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GCCDOEJO@?$CFTEAM0SCORENEEDED?$CF?$AA@
CONST	SEGMENT
??_C@_0BD@GCCDOEJO@?$CFTEAM0SCORENEEDED?$CF?$AA@ DB '%TEAM0SCORENEEDED%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GPIOFCPN@?$CFTEAM1SCORE?$CF?$AA@
CONST	SEGMENT
??_C@_0N@GPIOFCPN@?$CFTEAM1SCORE?$CF?$AA@ DB '%TEAM1SCORE%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDCEFCGD@?$CFTEAM0SCORE?$CF?$AA@
CONST	SEGMENT
??_C@_0N@KDCEFCGD@?$CFTEAM0SCORE?$CF?$AA@ DB '%TEAM0SCORE%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PELBMDPE@?$CFTEAM1TARGET?$CF?$AA@
CONST	SEGMENT
??_C@_0O@PELBMDPE@?$CFTEAM1TARGET?$CF?$AA@ DB '%TEAM1TARGET%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ODMKNHLH@?$CFTEAM0TARGET?$CF?$AA@
CONST	SEGMENT
??_C@_0O@ODMKNHLH@?$CFTEAM0TARGET?$CF?$AA@ DB '%TEAM0TARGET%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HLPCJAI@?$CFLOSINGTEAM?$CF?$AA@
CONST	SEGMENT
??_C@_0N@HLPCJAI@?$CFLOSINGTEAM?$CF?$AA@ DB '%LOSINGTEAM%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MBGCGLLP@?$CFWINNINGTEAM?$CF?$AA@
CONST	SEGMENT
??_C@_0O@MBGCGLLP@?$CFWINNINGTEAM?$CF?$AA@ DB '%WINNINGTEAM%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBGKEGMF@Neither?$AA@
CONST	SEGMENT
??_C@_07PBGKEGMF@Neither?$AA@ DB 'Neither', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GCPDLEIG@?$CFTEAM1?$CF?$AA@
CONST	SEGMENT
??_C@_07GCPDLEIG@?$CFTEAM1?$CF?$AA@ DB '%TEAM1%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GDDBNOLB@?$CFTEAM0?$CF?$AA@
CONST	SEGMENT
??_C@_07GDDBNOLB@?$CFTEAM0?$CF?$AA@ DB '%TEAM0%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@CMNJPAFK@Scores?5are?5currently?3?5?$CFTEAM0?$CF?3?5?$CI@
CONST	SEGMENT
??_C@_0GD@CMNJPAFK@Scores?5are?5currently?3?5?$CFTEAM0?$CF?3?5?$CI@ DB 'S'
	DB	'cores are currently: %TEAM0%: (%TEAM0SCORE%/%TEAM0TARGET%), %'
	DB	'TEAM1%: (%TEAM1SCORE%/%TEAM1TARGET%)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@IJJHPHLA@Scores?5are?5currently?3?5?$CFTEAM0?$CF?3?5?$CF@
CONST	SEGMENT
??_C@_0ED@IJJHPHLA@Scores?5are?5currently?3?5?$CFTEAM0?$CF?3?5?$CF@ DB 'S'
	DB	'cores are currently: %TEAM0%: %TEAM0SCORE%, %TEAM1%: %TEAM1SC'
	DB	'ORE%', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EPAMPHLF@ScoreString?$AA@
CONST	SEGMENT
??_C@_0M@EPAMPHLF@ScoreString?$AA@ DB 'ScoreString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HOGIHOKP@ScoreStringTeam1?$AA@
CONST	SEGMENT
??_C@_0BB@HOGIHOKP@ScoreStringTeam1?$AA@ DB 'ScoreStringTeam1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GHHDEPOO@ScoreStringTeam0?$AA@
CONST	SEGMENT
??_C@_0BB@GHHDEPOO@ScoreStringTeam0?$AA@ DB 'ScoreStringTeam0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LHAEKNMG@ScoreInterval?$AA@
CONST	SEGMENT
??_C@_0O@LHAEKNMG@ScoreInterval?$AA@ DB 'ScoreInterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CMDJNJPI@IntroString?$AA@
CONST	SEGMENT
??_C@_0M@CMDJNJPI@IntroString?$AA@ DB 'IntroString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OLMIABAP@dp88_conquestController?3?3Created@
CONST	SEGMENT
??_C@_0CB@OLMIABAP@dp88_conquestController?3?3Created@ DB 'dp88_conquestC'
	DB	'ontroller::Created', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z@4JA DD 050bH ; `dp88_conquestController::Created'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@EHNEJGPH@TargetScoreTeam1?$AA@
CONST	SEGMENT
??_C@_0BB@EHNEJGPH@TargetScoreTeam1?$AA@ DB 'TargetScoreTeam1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FOMPKHLG@TargetScoreTeam0?$AA@
CONST	SEGMENT
??_C@_0BB@FOMPKHLG@TargetScoreTeam0?$AA@ DB 'TargetScoreTeam0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNOOMBIC@ScoringMode?$AA@
CONST	SEGMENT
??_C@_0M@GNOOMBIC@ScoringMode?$AA@ DB 'ScoringMode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HNEJKIPA@dp88_customPoints?$AA@
CONST	SEGMENT
??_C@_0BC@HNEJKIPA@dp88_customPoints?$AA@ DB 'dp88_customPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@IHDKNLBJ@killPoints?3float?0damagePoints?3fl@
CONST	SEGMENT
??_C@_0GL@IHDKNLBJ@killPoints?3float?0damagePoints?3fl@ DB 'killPoints:fl'
	DB	'oat,damagePoints:float,repairPoints:float,killMoney:float,dam'
	DB	'ageMoney:float,repairMoney:float', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_customPoints@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_customPoints@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_customPoints@@@@6B@ ; ScriptRegistrant<dp88_customPoints>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0M@KHGGMEAG@repairMoney?$AA@
CONST	SEGMENT
??_C@_0M@KHGGMEAG@repairMoney?$AA@ DB 'repairMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JBDJEFLC@damageMoney?$AA@
CONST	SEGMENT
??_C@_0M@JBDJEFLC@damageMoney?$AA@ DB 'damageMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MNFMHOPO@killMoney?$AA@
CONST	SEGMENT
??_C@_09MNFMHOPO@killMoney?$AA@ DB 'killMoney', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IGCGNMII@repairPoints?$AA@
CONST	SEGMENT
??_C@_0N@IGCGNMII@repairPoints?$AA@ DB 'repairPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EKBMPEJM@damagePoints?$AA@
CONST	SEGMENT
??_C@_0N@EKBMPEJM@damagePoints?$AA@ DB 'damagePoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DFCKJMBM@killPoints?$AA@
CONST	SEGMENT
??_C@_0L@DFCKJMBM@killPoints?$AA@ DB 'killPoints', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BNFHGCOL@dp88_spawnVehiclePart?$AA@
CONST	SEGMENT
??_C@_0BG@BNFHGCOL@dp88_spawnVehiclePart?$AA@ DB 'dp88_spawnVehiclePart', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@OFDFACF@Vehicle_Part_Preset?3string?0Spawn@
CONST	SEGMENT
??_C@_0ED@OFDFACF@Vehicle_Part_Preset?3string?0Spawn@ DB 'Vehicle_Part_Pr'
	DB	'eset:string,Spawn_At_Bone:string,IsDecorative=0:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@6B@ ; ScriptRegistrant<dp88_spawnVehiclePart>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BD@DMPJMKMH@dp88_linkVetPoints?$AA@
CONST	SEGMENT
??_C@_0BD@DMPJMKMH@dp88_linkVetPoints?$AA@ DB 'dp88_linkVetPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@
CONST	SEGMENT
??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@ DB 'dp88_linkHealth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BOOILDGO@IsDecorative?$AA@
CONST	SEGMENT
??_C@_0N@BOOILDGO@IsDecorative?$AA@ DB 'IsDecorative', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BBMCLEAG@Vehicle_Part_Preset?$AA@
CONST	SEGMENT
??_C@_0BE@BBMCLEAG@Vehicle_Part_Preset?$AA@ DB 'Vehicle_Part_Preset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NCIMNAFE@Spawn_At_Bone?$AA@
CONST	SEGMENT
??_C@_0O@NCIMNAFE@Spawn_At_Bone?$AA@ DB 'Spawn_At_Bone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HIIMEFO@dp88_chronoTank?$AA@
CONST	SEGMENT
??_C@_0BA@HIIMEFO@dp88_chronoTank?$AA@ DB 'dp88_chronoTank', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFC@DMEBIJAI@shift_keyhook?3string?0shift_durat@
CONST	SEGMENT
??_C@_0BFC@DMEBIJAI@shift_keyhook?3string?0shift_durat@ DB 'shift_keyhook'
	DB	':string,shift_duration:int,recharge_time:int,shifted_vehicle_'
	DB	'preset:string,shift_out_time:float,shift_out_effect_preset:st'
	DB	'ring,shift_out_effect_time:float,shift_in_time:float,shift_in'
	DB	'_effect_preset:string,shift_in_effect_time:float,shift_headin'
	DB	'g_fluctuation_degrees_max=10:int,shift_velocity_fluctuation_p'
	DB	'ercent_max=10:float', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_chronoTank@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_chronoTank@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_chronoTank@@@@6B@ ; ScriptRegistrant<dp88_chronoTank>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0O@IPLDJMNA@recharge_time?$AA@
CONST	SEGMENT
??_C@_0O@IPLDJMNA@recharge_time?$AA@ DB 'recharge_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GEIPJMKA@shift_in_effect_time?$AA@
CONST	SEGMENT
??_C@_0BF@GEIPJMKA@shift_in_effect_time?$AA@ DB 'shift_in_effect_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IKKNCHPJ@shift_in_effect_preset?$AA@
CONST	SEGMENT
??_C@_0BH@IKKNCHPJ@shift_in_effect_preset?$AA@ DB 'shift_in_effect_preset'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EIGFLHCP@shift_in_time?$AA@
CONST	SEGMENT
??_C@_0O@EIGFLHCP@shift_in_time?$AA@ DB 'shift_in_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GHINFOCL@shift_duration?$AA@
CONST	SEGMENT
??_C@_0P@GHINFOCL@shift_duration?$AA@ DB 'shift_duration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@
CONST	SEGMENT
??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@ DB 'JFW_Destroy_Self_Timer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@
CONST	SEGMENT
??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@ DB '%.2f,%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JIFIAOPL@shift_out_effect_time?$AA@
CONST	SEGMENT
??_C@_0BG@JIFIAOPL@shift_out_effect_time?$AA@ DB 'shift_out_effect_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MNODKNNJ@shift_out_effect_preset?$AA@
CONST	SEGMENT
??_C@_0BI@MNODKNNJ@shift_out_effect_preset?$AA@ DB 'shift_out_effect_pres'
	DB	'et', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIAIJOLE@shift_out_time?$AA@
CONST	SEGMENT
??_C@_0P@FIAIJOLE@shift_out_time?$AA@ DB 'shift_out_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HPAIJMOM@The?5chronoshift?5device?5has?5not?5f@
CONST	SEGMENT
??_C@_0DH@HPAIJMOM@The?5chronoshift?5device?5has?5not?5f@ DB 'The chronos'
	DB	'hift device has not finished recharging yet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LLOHKBM@Velocity?5is?5now?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f@
CONST	SEGMENT
??_C@_0CC@LLOHKBM@Velocity?5is?5now?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f@ DB 'V'
	DB	'elocity is now %.2f, %.2f, %.2f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NOGNEHEF@Adding?5?$CF?42f?$CF?$CF?5velocity?5?$CI?$CF?42f?$CJ?5to@
CONST	SEGMENT
??_C@_0CK@NOGNEHEF@Adding?5?$CF?42f?$CF?$CF?5velocity?5?$CI?$CF?42f?$CJ?5to@ DB 'A'
	DB	'dding %.2f%% velocity (%.2f) to axis %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@PKNMJPCB@Subtracting?5?$CF?42f?$CF?$CF?5velocity?5?$CI?$CF?42@
CONST	SEGMENT
??_C@_0DB@PKNMJPCB@Subtracting?5?$CF?42f?$CF?$CF?5velocity?5?$CI?$CF?42@ DB 'S'
	DB	'ubtracting %.2f%% velocity (%.2f) from axis %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HHHAJNBH@Velocity?5was?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?6?$AA@
CONST	SEGMENT
??_C@_0BP@HHHAJNBH@Velocity?5was?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?6?$AA@ DB 'V'
	DB	'elocity was %.2f, %.2f, %.2f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KNMEOMAC@shift_velocity_fluctuation_perce@
CONST	SEGMENT
??_C@_0CH@KNMEOMAC@shift_velocity_fluctuation_perce@ DB 'shift_velocity_f'
	DB	'luctuation_percent_max', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JIFFHMAJ@Heading?5is?5now?5?$CF?42f?6?$AA@
CONST	SEGMENT
??_C@_0BF@JIFFHMAJ@Heading?5is?5now?5?$CF?42f?6?$AA@ DB 'Heading is now %'
	DB	'.2f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JGDIALCG@Heading?5was?5?$CF?42f?6?$AA@
CONST	SEGMENT
??_C@_0BC@JGDIALCG@Heading?5was?5?$CF?42f?6?$AA@ DB 'Heading was %.2f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ENOFPKMC@shift_heading_fluctuation_degree@
CONST	SEGMENT
??_C@_0CG@ENOFPKMC@shift_heading_fluctuation_degree@ DB 'shift_heading_fl'
	DB	'uctuation_degrees_max', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@KFEKCDFK@The?5chronoshift?5device?5is?5now?5fu@
CONST	SEGMENT
??_C@_0DO@KFEKCDFK@The?5chronoshift?5device?5is?5now?5fu@ DB 'The chronos'
	DB	'hift device is now fully charged and ready for use', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEMONODM@shift_keyhook?$AA@
CONST	SEGMENT
??_C@_0O@MEMONODM@shift_keyhook?$AA@ DB 'shift_keyhook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@IPOHJCAG@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5A?5veh@
CONST	SEGMENT
??_C@_0GE@IPOHJCAG@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5A?5veh@ DB '['
	DB	'%d:%s:%s] Critical Error: A vehicle preset with the name ''%s'
	DB	''' was not found. Destroying script...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HCMDAMPC@shifted_vehicle_preset?$AA@
CONST	SEGMENT
??_C@_0BH@HCMDAMPC@shifted_vehicle_preset?$AA@ DB 'shifted_vehicle_preset'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@ONKPLGMB@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
CONST	SEGMENT
??_C@_0FL@ONKPLGMB@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@ DB '['
	DB	'%d:%s:%s] Critical Error: This script can only be used on veh'
	DB	'icles! Destroying script...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MLJJJNEI@dp88_objectAnnouncements?$AA@
CONST	SEGMENT
??_C@_0BJ@MLJJJNEI@dp88_objectAnnouncements?$AA@ DB 'dp88_objectAnnouncem'
	DB	'ents', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0JM@LCNDKFBB@minimumAnnounceInterval?$DN20?3int?0t@
CONST	SEGMENT
??_C@_0JM@LCNDKFBB@minimumAnnounceInterval?$DN20?3int?0t@ DB 'minimumAnno'
	DB	'unceInterval=20:int,team0_underAttackStringId=0:int,team1_und'
	DB	'erAttackStringId=0:int,team0_destroyedStringId=0:int,team1_de'
	DB	'stroyedStringId=0:int,', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@6B@ ; ScriptRegistrant<dp88_objectAnnouncements>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0CB@HEJBFPJC@dp88_objectAnnouncements?3?3Killed@
CONST	SEGMENT
??_C@_0CB@HEJBFPJC@dp88_objectAnnouncements?3?3Killed@ DB 'dp88_objectAnn'
	DB	'ouncements::Killed', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z@4JA DD 02a6H ; `dp88_objectAnnouncements::Killed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@GNCMCEPH@dp88_objectAnnouncements?3?3Damage@
CONST	SEGMENT
??_C@_0CC@GNCMCEPH@dp88_objectAnnouncements?3?3Damage@ DB 'dp88_objectAnn'
	DB	'ouncements::Damaged', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z@4JA DD 0283H ; `dp88_objectAnnouncements::Damaged'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@KIHIBOPC@team1_destroyedStringId?$AA@
CONST	SEGMENT
??_C@_0BI@KIHIBOPC@team1_destroyedStringId?$AA@ DB 'team1_destroyedString'
	DB	'Id', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MNBPCFLE@team0_destroyedStringId?$AA@
CONST	SEGMENT
??_C@_0BI@MNBPCFLE@team0_destroyedStringId?$AA@ DB 'team0_destroyedString'
	DB	'Id', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IGNGLHGJ@team1_underAttackStringId?$AA@
CONST	SEGMENT
??_C@_0BK@IGNGLHGJ@team1_underAttackStringId?$AA@ DB 'team1_underAttackSt'
	DB	'ringId', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JBPONDKJ@team0_underAttackStringId?$AA@
CONST	SEGMENT
??_C@_0BK@JBPONDKJ@team0_underAttackStringId?$AA@ DB 'team0_underAttackSt'
	DB	'ringId', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CNNOOAEH@minimumAnnounceInterval?$AA@
CONST	SEGMENT
??_C@_0BI@CNNOOAEH@minimumAnnounceInterval?$AA@ DB 'minimumAnnounceInterv'
	DB	'al', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KGCMIMDC@dp88_damageAnimation?$AA@
CONST	SEGMENT
??_C@_0BF@KGCMIMDC@dp88_damageAnimation?$AA@ DB 'dp88_damageAnimation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ECL@PMDJFDMP@animationName?$DNobject?4object?3stri@
CONST	SEGMENT
??_C@_0ECL@PMDJFDMP@animationName?$DNobject?4object?3stri@ DB 'animationN'
	DB	'ame=object.object:string,loopAnimation=1:int,healthy_startFra'
	DB	'me=0:int,healthy_endFrame=0:int,healthy_startFrame_lowPower=-'
	DB	'1:int,healthy_endFrame_lowPower=-1:int,damageBoundary1=-1:int'
	DB	',damageBoundary1_startFrame=0:int,damageBoundary1_endFrame=0:'
	DB	'int,damageBoundary1_startFrame_lowPower=-1:int,damageBoundary'
	DB	'1_endFrame_lowPower=-1:int,damageBoundary2=-1:int,damageBound'
	DB	'ary2_startFrame=0:int,damageBoundary2_endFrame=0:int,damageBo'
	DB	'undary2_startFrame_lowPower=-1:int,damageBoundary2_endFrame_l'
	DB	'owPower=-1:int,damageBoundary3=-1:int,damageBoundary3_startFr'
	DB	'ame=0:int,damageBoundary3_endFrame=0:int,damageBoundary3_star'
	DB	'tFrame_lowPower=-1:int,damageBoundary3_endFrame_lowPower=-1:i'
	DB	'nt,damageBoundary4=-1:int,damageBoundary4_startFrame=0:int,da'
	DB	'mageBoundary4_endFrame=0:int,damageBoundary4_startFrame_lowPo'
	DB	'wer=-1:int,damageBoundary4_endFrame_lowPower=-1:int,damageBou'
	DB	'ndary5=-1:int,damageBoundary5_startFrame=0:int,damageBoundary'
	DB	'5_endFrame=0:int,damageBoundary5_startFrame_lowPower=-1:int,d'
	DB	'amageBoundary5_endFrame_lowPower=-1:int,wakeObjects=0:int,use'
	DB	'DestroyedMode=0:int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_damageAnimation@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_damageAnimation@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_damageAnimation@@@@6B@ ; ScriptRegistrant<dp88_damageAnimation>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0O@MKCKBGNB@animationName?$AA@
CONST	SEGMENT
??_C@_0O@MKCKBGNB@animationName?$AA@ DB 'animationName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OKHHAEAF@WAKEBOX?$AA@
CONST	SEGMENT
??_C@_07OKHHAEAF@WAKEBOX?$AA@ DB 'WAKEBOX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAABMIKH@wakeObjects?$AA@
CONST	SEGMENT
??_C@_0M@BAABMIKH@wakeObjects?$AA@ DB 'wakeObjects', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CIEFPDDI@dp88_damageAnimation?3?3Detach?$AA@
CONST	SEGMENT
??_C@_0BN@CIEFPDDI@dp88_damageAnimation?3?3Detach?$AA@ DB 'dp88_damageAni'
	DB	'mation::Detach', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA DD 01e4H ; `dp88_damageAnimation::Detach'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@GLBLILDK@useDestroyedMode?$AA@
CONST	SEGMENT
??_C@_0BB@GLBLILDK@useDestroyedMode?$AA@ DB 'useDestroyedMode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CBGFHPCJ@damageBoundary5_endFrame_lowPowe@
CONST	SEGMENT
??_C@_0CC@CBGFHPCJ@damageBoundary5_endFrame_lowPowe@ DB 'damageBoundary5_'
	DB	'endFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GJLDAHDO@damageBoundary5_startFrame_lowPo@
CONST	SEGMENT
??_C@_0CE@GJLDAHDO@damageBoundary5_startFrame_lowPo@ DB 'damageBoundary5_'
	DB	'startFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FPOJMDFJ@damageBoundary5_endFrame?$AA@
CONST	SEGMENT
??_C@_0BJ@FPOJMDFJ@damageBoundary5_endFrame?$AA@ DB 'damageBoundary5_endF'
	DB	'rame', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BIOFHNLO@damageBoundary5_startFrame?$AA@
CONST	SEGMENT
??_C@_0BL@BIOFHNLO@damageBoundary5_startFrame?$AA@ DB 'damageBoundary5_st'
	DB	'artFrame', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LJEGHDJO@damageBoundary5?$AA@
CONST	SEGMENT
??_C@_0BA@LJEGHDJO@damageBoundary5?$AA@ DB 'damageBoundary5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EEACEEGP@damageBoundary4_endFrame_lowPowe@
CONST	SEGMENT
??_C@_0CC@EEACEEGP@damageBoundary4_endFrame_lowPowe@ DB 'damageBoundary4_'
	DB	'endFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HOJLGDPO@damageBoundary4_startFrame_lowPo@
CONST	SEGMENT
??_C@_0CE@HOJLGDPO@damageBoundary4_startFrame_lowPo@ DB 'damageBoundary4_'
	DB	'startFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JOGHBMJJ@damageBoundary4_endFrame?$AA@
CONST	SEGMENT
??_C@_0BJ@JOGHBMJJ@damageBoundary4_endFrame?$AA@ DB 'damageBoundary4_endF'
	DB	'rame', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MFHDKEDL@damageBoundary4_startFrame?$AA@
CONST	SEGMENT
??_C@_0BL@MFHDKEDL@damageBoundary4_startFrame?$AA@ DB 'damageBoundary4_st'
	DB	'artFrame', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KAFNECNP@damageBoundary4?$AA@
CONST	SEGMENT
??_C@_0BA@KAFNECNP@damageBoundary4?$AA@ DB 'damageBoundary4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KFEGOCPM@damageBoundary3_endFrame_lowPowe@
CONST	SEGMENT
??_C@_0CC@KFEGOCPM@damageBoundary3_endFrame_lowPowe@ DB 'damageBoundary3_'
	DB	'endFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BLECFNLO@damageBoundary3_startFrame_lowPo@
CONST	SEGMENT
??_C@_0CE@BLECFNLO@damageBoundary3_startFrame_lowPo@ DB 'damageBoundary3_'
	DB	'startFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LHFMAJBK@damageBoundary3_endFrame?$AA@
CONST	SEGMENT
??_C@_0BJ@LHFMAJBK@damageBoundary3_endFrame?$AA@ DB 'damageBoundary3_endF'
	DB	'rame', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LIAAKCGD@damageBoundary3_startFrame?$AA@
CONST	SEGMENT
??_C@_0BL@LIAAKCGD@damageBoundary3_startFrame?$AA@ DB 'damageBoundary3_st'
	DB	'artFrame', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OPBMNEBI@damageBoundary3?$AA@
CONST	SEGMENT
??_C@_0BA@OPBMNEBI@damageBoundary3?$AA@ DB 'damageBoundary3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MACBNJLK@damageBoundary2_endFrame_lowPowe@
CONST	SEGMENT
??_C@_0CC@MACBNJLK@damageBoundary2_endFrame_lowPowe@ DB 'damageBoundary2_'
	DB	'endFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MGKDJHO@damageBoundary2_startFrame_lowPo@
CONST	SEGMENT
??_C@_0CE@MGKDJHO@damageBoundary2_startFrame_lowPo@ DB 'damageBoundary2_s'
	DB	'tartFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HGNCNGNK@damageBoundary2_endFrame?$AA@
CONST	SEGMENT
??_C@_0BJ@HGNCNGNK@damageBoundary2_endFrame?$AA@ DB 'damageBoundary2_endF'
	DB	'rame', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GFJGHLOG@damageBoundary2_startFrame?$AA@
CONST	SEGMENT
??_C@_0BL@GFJGHLOG@damageBoundary2_startFrame?$AA@ DB 'damageBoundary2_st'
	DB	'artFrame', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PGAHOFFJ@damageBoundary2?$AA@
CONST	SEGMENT
??_C@_0BA@PGAHOFFJ@damageBoundary2?$AA@ DB 'damageBoundary2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GPIIJEHA@damageBoundary1_endFrame_lowPowe@
CONST	SEGMENT
??_C@_0CC@GPIIJEHA@damageBoundary1_endFrame_lowPowe@ DB 'damageBoundary1_'
	DB	'endFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DFBCJEDO@damageBoundary1_startFrame_lowPo@
CONST	SEGMENT
??_C@_0CE@DFBCJEDO@damageBoundary1_startFrame_lowPo@ DB 'damageBoundary1_'
	DB	'startFrame_lowPower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OPDALANL@damageBoundary1_endFrame?$AA@
CONST	SEGMENT
??_C@_0BJ@OPDALANL@damageBoundary1_endFrame?$AA@ DB 'damageBoundary1_endF'
	DB	'rame', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NIFMBHCI@damageBoundary1_startFrame?$AA@
CONST	SEGMENT
??_C@_0BL@NIFMBHCI@damageBoundary1_startFrame?$AA@ DB 'damageBoundary1_st'
	DB	'artFrame', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NNCKLGJK@damageBoundary1?$AA@
CONST	SEGMENT
??_C@_0BA@NNCKLGJK@damageBoundary1?$AA@ DB 'damageBoundary1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IFNEAGMF@healthy_endFrame_lowPower?$AA@
CONST	SEGMENT
??_C@_0BK@IFNEAGMF@healthy_endFrame_lowPower?$AA@ DB 'healthy_endFrame_lo'
	DB	'wPower', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LCKBNGPH@healthy_startFrame_lowPower?$AA@
CONST	SEGMENT
??_C@_0BM@LCKBNGPH@healthy_startFrame_lowPower?$AA@ DB 'healthy_startFram'
	DB	'e_lowPower', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JBDGIKG@healthy_endFrame?$AA@
CONST	SEGMENT
??_C@_0BB@JBDGIKG@healthy_endFrame?$AA@ DB 'healthy_endFrame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MKMFKMFG@healthy_startFrame?$AA@
CONST	SEGMENT
??_C@_0BD@MKMFKMFG@healthy_startFrame?$AA@ DB 'healthy_startFrame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IMJLNFNM@dp88_damageAnimation?3?3Created?$AA@
CONST	SEGMENT
??_C@_0BO@IMJLNFNM@dp88_damageAnimation?3?3Created?$AA@ DB 'dp88_damageAn'
	DB	'imation::Created', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA DD 01a1H ; `dp88_damageAnimation::Created'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0O@PEDGHOIN@loopAnimation?$AA@
CONST	SEGMENT
??_C@_0O@PEDGHOIN@loopAnimation?$AA@ DB 'loopAnimation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ENKDJGDA@dp88_uniqueInfantry_controller?$AA@
CONST	SEGMENT
??_C@_0BP@ENKDJGDA@dp88_uniqueInfantry_controller?$AA@ DB 'dp88_uniqueInf'
	DB	'antry_controller', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@FJLHJHCB@infantry_preset?3string?0team_id?3i@
CONST	SEGMENT
??_C@_0EJ@FJLHJHCB@infantry_preset?3string?0team_id?3i@ DB 'infantry_pres'
	DB	'et:string,team_id:int,max_count=1:int,percent_chance=20:int', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@6B@ ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0CK@NKBCAI@dp88_uniqueInfantry_controller?3?3@
CONST	SEGMENT
??_C@_0CK@NKBCAI@dp88_uniqueInfantry_controller?3?3@ DB 'dp88_uniqueInfan'
	DB	'try_controller::Destroyed', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA DD 017aH ; `dp88_uniqueInfantry_controller::Destroyed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FJ@MJNBDJBP@dp88_uniqueInfantry_controller?3?5@
CONST	SEGMENT
??_C@_0FJ@MJNBDJBP@dp88_uniqueInfantry_controller?3?5@ DB 'dp88_uniqueInf'
	DB	'antry_controller: %s is not a valid infantry preset! Destroyi'
	DB	'ng script...', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPMHCCNE@percent_chance?$AA@
CONST	SEGMENT
??_C@_0P@BPMHCCNE@percent_chance?$AA@ DB 'percent_chance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BJKFAJML@max_count?$AA@
CONST	SEGMENT
??_C@_09BJKFAJML@max_count?$AA@ DB 'max_count', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BMLKPCEF@team_id?$AA@
CONST	SEGMENT
??_C@_07BMLKPCEF@team_id?$AA@ DB 'team_id', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFPOMMJA@infantry_preset?$AA@
CONST	SEGMENT
??_C@_0BA@NFPOMMJA@infantry_preset?$AA@ DB 'infantry_preset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'p', 00H, '8', 00H, '8', 00H, '_', 00H
	DB	'm', 00H, 'i', 00H, 's', 00H, 'c', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\dp88_misc.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@ENMLKBOD@dp88_uniqueInfantry_controller?3?3@
CONST	SEGMENT
??_C@_0CI@ENMLKBOD@dp88_uniqueInfantry_controller?3?3@ DB 'dp88_uniqueInf'
	DB	'antry_controller::Created', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA DD 0165H ; `dp88_uniqueInfantry_controller::Created'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@KBGLIELP@dp88_unitSounds?$AA@
CONST	SEGMENT
??_C@_0BA@KBGLIELP@dp88_unitSounds?$AA@ DB 'dp88_unitSounds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BNB@EDNAANJI@createdSound?$DNnull?3string?0damaged@
CONST	SEGMENT
??_C@_0BNB@EDNAANJI@createdSound?$DNnull?3string?0damaged@ DB 'createdSou'
	DB	'nd=null:string,damagedSound=null:string,damagedSoundProbabili'
	DB	'ty=15:int,damagedSoundMinInterval=5:int,heavilyDamagedSound=n'
	DB	'ull:string,heavilyDamagedSoundMinDamageAmount=40:int,heavilyD'
	DB	'amagedSoundProbability=15:int,heavilyDamagedSoundMinInterval='
	DB	'5:int,healedSound=null:string,healedSoundMinHealAmount=45:int'
	DB	',healedSoundCheckTime=15:int,healedSoundMinInterval=30:int,fa'
	DB	'llingDamageSound=null:string,fallingDamageSoundMinInterval=5:'
	DB	'int,killedSound=null:string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_unitSounds@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_unitSounds@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_unitSounds@@@@6B@ ; ScriptRegistrant<dp88_unitSounds>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BO@OMJFDGPB@fallingDamageSoundMinInterval?$AA@
CONST	SEGMENT
??_C@_0BO@OMJFDGPB@fallingDamageSoundMinInterval?$AA@ DB 'fallingDamageSo'
	DB	'undMinInterval', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OOEMILKO@killedSound?$AA@
CONST	SEGMENT
??_C@_0M@OOEMILKO@killedSound?$AA@ DB 'killedSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NIOKCIKB@healedSoundMinInterval?$AA@
CONST	SEGMENT
??_C@_0BH@NIOKCIKB@healedSoundMinInterval?$AA@ DB 'healedSoundMinInterval'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CJHOHEKB@healedSoundMinHealAmount?$AA@
CONST	SEGMENT
??_C@_0BJ@CJHOHEKB@healedSoundMinHealAmount?$AA@ DB 'healedSoundMinHealAm'
	DB	'ount', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDLJAEAI@healedSoundCheckTime?$AA@
CONST	SEGMENT
??_C@_0BF@BDLJAEAI@healedSoundCheckTime?$AA@ DB 'healedSoundCheckTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KIHMEINP@damagedSoundMinInterval?$AA@
CONST	SEGMENT
??_C@_0BI@KIHMEINP@damagedSoundMinInterval?$AA@ DB 'damagedSoundMinInterv'
	DB	'al', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IGEACIE@damagedSoundProbability?$AA@
CONST	SEGMENT
??_C@_0BI@IGEACIE@damagedSoundProbability?$AA@ DB 'damagedSoundProbabilit'
	DB	'y', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NCEDOML@heavilyDamagedSoundMinInterval?$AA@
CONST	SEGMENT
??_C@_0BP@NCEDOML@heavilyDamagedSoundMinInterval?$AA@ DB 'heavilyDamagedS'
	DB	'oundMinInterval', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KNDMHEJA@heavilyDamagedSoundProbability?$AA@
CONST	SEGMENT
??_C@_0BP@KNDMHEJA@heavilyDamagedSoundProbability?$AA@ DB 'heavilyDamaged'
	DB	'SoundProbability', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LHBDKIJI@heavilyDamagedSoundMinDamageAmou@
CONST	SEGMENT
??_C@_0CD@LHBDKIJI@heavilyDamagedSoundMinDamageAmou@ DB 'heavilyDamagedSo'
	DB	'undMinDamageAmount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ODPFHLGP@fallingDamageSound?$AA@
CONST	SEGMENT
??_C@_0BD@ODPFHLGP@fallingDamageSound?$AA@ DB 'fallingDamageSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GGDGEACJ@healedSound?$AA@
CONST	SEGMENT
??_C@_0M@GGDGEACJ@healedSound?$AA@ DB 'healedSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EBDFLGEH@heavilyDamagedSound?$AA@
CONST	SEGMENT
??_C@_0BE@EBDFLGEH@heavilyDamagedSound?$AA@ DB 'heavilyDamagedSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HJOCDFAF@damagedSound?$AA@
CONST	SEGMENT
??_C@_0N@HJOCDFAF@damagedSound?$AA@ DB 'damagedSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHCMNMEH@origin?$AA@
CONST	SEGMENT
??_C@_06NHCMNMEH@origin?$AA@ DB 'origin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FAJJJDKA@createdSound?$AA@
CONST	SEGMENT
??_C@_0N@FAJJJDKA@createdSound?$AA@ DB 'createdSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null?$AA@
CONST	SEGMENT
??_C@_04MLLLIHIP@null?$AA@ DB 'null', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HJFJPFLD@dp88_randomWeather?$AA@
CONST	SEGMENT
??_C@_0BD@HJFJPFLD@dp88_randomWeather?$AA@ DB 'dp88_randomWeather', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DME@NDLEMFCK@update_interval_min?$DN20?3int?0updat@
CONST	SEGMENT
??_C@_0DME@NDLEMFCK@update_interval_min?$DN20?3int?0updat@ DB 'update_int'
	DB	'erval_min=20:int,update_interval_max=50:int,probability_chang'
	DB	'e=20:int,fog_start_distance_min=20:int,fog_start_distance_max'
	DB	'=40:int,fog_end_distance_min=80:int,fog_end_distance_max=100:'
	DB	'int,precipitation_probability_snow=0:int,precipitation_probab'
	DB	'ility_rain=70:int,precipitation_probability_volcanic_ash=0:in'
	DB	't,precipitation_density_min=0.0:float,precipitation_density_m'
	DB	'ax=20.0:float,lighting_probability_normal=20:int,lighting_pro'
	DB	'bability_war_blitz=5:int,lighting_intensity_min=0.2:float,lig'
	DB	'hting_intensity_max=0.8:float,lighting_start_distance_min=0.2'
	DB	':float,lighting_start_distance_max=0.8:float,lighting_end_dis'
	DB	'tance_min=0.4:float,lighting_end_distance_max=1.0:float,light'
	DB	'ing_heading_min=0:int,lighting_heading_max=359:int,lighting_d'
	DB	'istribution_min=0.1:float,lighting_distribution_max=1.0:float'
	DB	',wind_heading_min=0:int,wind_heading_max=359:int,wind_speed_m'
	DB	'in=0.0:float,wind_speed_max=8.0:float,wind_variability_min=0.'
	DB	'0:float,wind_variability_max=1.0:float', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ScriptRegistrant@Vdp88_randomWeather@@@@6B@
CONST	SEGMENT
??_7?$ScriptRegistrant@Vdp88_randomWeather@@@@6B@ DD FLAT:??_R4?$ScriptRegistrant@Vdp88_randomWeather@@@@6B@ ; ScriptRegistrant<dp88_randomWeather>::`vftable'
	DD	FLAT:??_E?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAXI@Z
	DD	FLAT:?Create@?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAVScriptImpClass@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BF@FKAIOEHP@wind_variability_min?$AA@
CONST	SEGMENT
??_C@_0BF@FKAIOEHP@wind_variability_min?$AA@ DB 'wind_variability_min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EIIDAABA@wind_variability_max?$AA@
CONST	SEGMENT
??_C@_0BF@EIIDAABA@wind_variability_max?$AA@ DB 'wind_variability_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FDLHENGB@wind_speed_min?$AA@
CONST	SEGMENT
??_C@_0P@FDLHENGB@wind_speed_min?$AA@ DB 'wind_speed_min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBDMKJAO@wind_speed_max?$AA@
CONST	SEGMENT
??_C@_0P@EBDMKJAO@wind_speed_max?$AA@ DB 'wind_speed_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HMBGGNCB@wind_heading_min?$AA@
CONST	SEGMENT
??_C@_0BB@HMBGGNCB@wind_heading_min?$AA@ DB 'wind_heading_min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOJNIJEO@wind_heading_max?$AA@
CONST	SEGMENT
??_C@_0BB@GOJNIJEO@wind_heading_max?$AA@ DB 'wind_heading_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LEGLJNCE@lighting_probability_war_blitz?$AA@
CONST	SEGMENT
??_C@_0BP@LEGLJNCE@lighting_probability_war_blitz?$AA@ DB 'lighting_proba'
	DB	'bility_war_blitz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DAJAJHBL@lighting_probability_normal?$AA@
CONST	SEGMENT
??_C@_0BM@DAJAJHBL@lighting_probability_normal?$AA@ DB 'lighting_probabil'
	DB	'ity_normal', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IGBNANED@lighting_distribution_min?$AA@
CONST	SEGMENT
??_C@_0BK@IGBNANED@lighting_distribution_min?$AA@ DB 'lighting_distributi'
	DB	'on_min', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JEJGOJCM@lighting_distribution_max?$AA@
CONST	SEGMENT
??_C@_0BK@JEJGOJCM@lighting_distribution_max?$AA@ DB 'lighting_distributi'
	DB	'on_max', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IJLECIGO@lighting_heading_min?$AA@
CONST	SEGMENT
??_C@_0BF@IJLECIGO@lighting_heading_min?$AA@ DB 'lighting_heading_min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JLDPMMAB@lighting_heading_max?$AA@
CONST	SEGMENT
??_C@_0BF@JLDPMMAB@lighting_heading_max?$AA@ DB 'lighting_heading_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HENAHALH@lighting_end_distance_min?$AA@
CONST	SEGMENT
??_C@_0BK@HENAHALH@lighting_end_distance_min?$AA@ DB 'lighting_end_distan'
	DB	'ce_min', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GGFLJENI@lighting_end_distance_max?$AA@
CONST	SEGMENT
??_C@_0BK@GGFLJENI@lighting_end_distance_max?$AA@ DB 'lighting_end_distan'
	DB	'ce_max', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FJOBNMJG@lighting_start_distance_min?$AA@
CONST	SEGMENT
??_C@_0BM@FJOBNMJG@lighting_start_distance_min?$AA@ DB 'lighting_start_di'
	DB	'stance_min', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ELGKDIPJ@lighting_start_distance_max?$AA@
CONST	SEGMENT
??_C@_0BM@ELGKDIPJ@lighting_start_distance_max?$AA@ DB 'lighting_start_di'
	DB	'stance_max', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JOLAKJFG@lighting_intensity_min?$AA@
CONST	SEGMENT
??_C@_0BH@JOLAKJFG@lighting_intensity_min?$AA@ DB 'lighting_intensity_min'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IMDLENDJ@lighting_intensity_max?$AA@
CONST	SEGMENT
??_C@_0BH@IMDLENDJ@lighting_intensity_max?$AA@ DB 'lighting_intensity_max'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KLINGEFD@precipitation_probability_volcan@
CONST	SEGMENT
??_C@_0CH@KLINGEFD@precipitation_probability_volcan@ DB 'precipitation_pr'
	DB	'obability_volcanic_ash', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DPCJLACA@precipitation_probability_rain?$AA@
CONST	SEGMENT
??_C@_0BP@DPCJLACA@precipitation_probability_rain?$AA@ DB 'precipitation_'
	DB	'probability_rain', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MFKHFMGM@precipitation_probability_snow?$AA@
CONST	SEGMENT
??_C@_0BP@MFKHFMGM@precipitation_probability_snow?$AA@ DB 'precipitation_'
	DB	'probability_snow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NKNCMNF@precipitation_density_min?$AA@
CONST	SEGMENT
??_C@_0BK@NKNCMNF@precipitation_density_min?$AA@ DB 'precipitation_densit'
	DB	'y_min', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BPCGMILK@precipitation_density_max?$AA@
CONST	SEGMENT
??_C@_0BK@BPCGMILK@precipitation_density_max?$AA@ DB 'precipitation_densi'
	DB	'ty_max', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FMHIAIHJ@fog_end_distance_min?$AA@
CONST	SEGMENT
??_C@_0BF@FMHIAIHJ@fog_end_distance_min?$AA@ DB 'fog_end_distance_min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOPDOMBG@fog_end_distance_max?$AA@
CONST	SEGMENT
??_C@_0BF@EOPDOMBG@fog_end_distance_max?$AA@ DB 'fog_end_distance_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FCEGPHPA@fog_start_distance_min?$AA@
CONST	SEGMENT
??_C@_0BH@FCEGPHPA@fog_start_distance_min?$AA@ DB 'fog_start_distance_min'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAMNBDJP@fog_start_distance_max?$AA@
CONST	SEGMENT
??_C@_0BH@EAMNBDJP@fog_start_distance_max?$AA@ DB 'fog_start_distance_max'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NIDGNOJM@probability_change?$AA@
CONST	SEGMENT
??_C@_0BD@NIDGNOJM@probability_change?$AA@ DB 'probability_change', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GHCHANHG@update_interval_min?$AA@
CONST	SEGMENT
??_C@_0BE@GHCHANHG@update_interval_min?$AA@ DB 'update_interval_min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HFKMOJBJ@update_interval_max?$AA@
CONST	SEGMENT
??_C@_0BE@HFKMOJBJ@update_interval_max?$AA@ DB 'update_interval_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7dp88_CreateAttachedObject@@6B@
CONST	SEGMENT
??_7dp88_CreateAttachedObject@@6B@ DD FLAT:??_R4dp88_CreateAttachedObject@@6B@ ; dp88_CreateAttachedObject::`vftable'
	DD	FLAT:??_Edp88_CreateAttachedObject@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_RegenerateHitpoints@@6B@
CONST	SEGMENT
??_7dp88_RegenerateHitpoints@@6B@ DD FLAT:??_R4dp88_RegenerateHitpoints@@6B@ ; dp88_RegenerateHitpoints::`vftable'
	DD	FLAT:??_Edp88_RegenerateHitpoints@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Set_Team_On_Custom@@6B@
CONST	SEGMENT
??_7dp88_Set_Team_On_Custom@@6B@ DD FLAT:??_R4dp88_Set_Team_On_Custom@@6B@ ; dp88_Set_Team_On_Custom::`vftable'
	DD	FLAT:??_Edp88_Set_Team_On_Custom@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_Set_Team_On_Custom@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Create_Object_Cinematic@@6B@
CONST	SEGMENT
??_7dp88_Create_Object_Cinematic@@6B@ DD FLAT:??_R4dp88_Create_Object_Cinematic@@6B@ ; dp88_Create_Object_Cinematic::`vftable'
	DD	FLAT:??_Edp88_Create_Object_Cinematic@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Camo_Object@@6B@
CONST	SEGMENT
??_7dp88_Camo_Object@@6B@ DD FLAT:??_R4dp88_Camo_Object@@6B@ ; dp88_Camo_Object::`vftable'
	DD	FLAT:??_Edp88_Camo_Object@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Camo_Object@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Camo_Controller@@6B@
CONST	SEGMENT
??_7dp88_Camo_Controller@@6B@ DD FLAT:??_R4dp88_Camo_Controller@@6B@ ; dp88_Camo_Controller::`vftable'
	DD	FLAT:??_Edp88_Camo_Controller@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Camo_Controller@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_Ammo_Animation@@6B@
CONST	SEGMENT
??_7dp88_Ammo_Animation@@6B@ DD FLAT:??_R4dp88_Ammo_Animation@@6B@ ; dp88_Ammo_Animation::`vftable'
	DD	FLAT:??_Edp88_Ammo_Animation@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_teleport@@6B@
CONST	SEGMENT
??_7dp88_teleport@@6B@ DD FLAT:??_R4dp88_teleport@@6B@	; dp88_teleport::`vftable'
	DD	FLAT:??_Edp88_teleport@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_teleport@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_teleport@@MAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_turretSound@@6B@
CONST	SEGMENT
??_7dp88_turretSound@@6B@ DD FLAT:??_R4dp88_turretSound@@6B@ ; dp88_turretSound::`vftable'
	DD	FLAT:??_Edp88_turretSound@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_turretSound@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_turretSound@@MAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_turretSound@@MAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_radarInvisibility@@6B@
CONST	SEGMENT
??_7dp88_radarInvisibility@@6B@ DD FLAT:??_R4dp88_radarInvisibility@@6B@ ; dp88_radarInvisibility::`vftable'
	DD	FLAT:??_Edp88_radarInvisibility@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_conquestControlObject@@6B@
CONST	SEGMENT
??_7dp88_conquestControlObject@@6B@ DD FLAT:??_R4dp88_conquestControlObject@@6B@ ; dp88_conquestControlObject::`vftable'
	DD	FLAT:??_Edp88_conquestControlObject@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_conquestControlZone@@6B@
CONST	SEGMENT
??_7dp88_conquestControlZone@@6B@ DD FLAT:??_R4dp88_conquestControlZone@@6B@ ; dp88_conquestControlZone::`vftable'
	DD	FLAT:??_Edp88_conquestControlZone@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_conquestController@@6B@
CONST	SEGMENT
??_7dp88_conquestController@@6B@ DD FLAT:??_R4dp88_conquestController@@6B@ ; dp88_conquestController::`vftable'
	DD	FLAT:??_Edp88_conquestController@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_conquestController@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_conquestController@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_customPointsPercentage@@6B@
CONST	SEGMENT
??_7dp88_customPointsPercentage@@6B@ DD FLAT:??_R4dp88_customPointsPercentage@@6B@ ; dp88_customPointsPercentage::`vftable'
	DD	FLAT:??_Edp88_customPointsPercentage@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_customPoints@@6B@
CONST	SEGMENT
??_7dp88_customPoints@@6B@ DD FLAT:??_R4dp88_customPoints@@6B@ ; dp88_customPoints::`vftable'
	DD	FLAT:??_Edp88_customPoints@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_customPoints@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_customPoints@@MAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_customPoints@@MAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_spawnVehiclePart@@6B@
CONST	SEGMENT
??_7dp88_spawnVehiclePart@@6B@ DD FLAT:??_R4dp88_spawnVehiclePart@@6B@ ; dp88_spawnVehiclePart::`vftable'
	DD	FLAT:??_Edp88_spawnVehiclePart@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_chronoTank@@6B@
CONST	SEGMENT
??_7dp88_chronoTank@@6B@ DD FLAT:??_R4dp88_chronoTank@@6B@ ; dp88_chronoTank::`vftable'
	DD	FLAT:??_Edp88_chronoTank@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_chronoTank@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_chronoTank@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_chronoTank@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_chronoTank@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?KeyHook@dp88_chronoTank@@EAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_objectAnnouncements@@6B@
CONST	SEGMENT
??_7dp88_objectAnnouncements@@6B@ DD FLAT:??_R4dp88_objectAnnouncements@@6B@ ; dp88_objectAnnouncements::`vftable'
	DD	FLAT:??_Edp88_objectAnnouncements@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_damageAnimation@@6B@
CONST	SEGMENT
??_7dp88_damageAnimation@@6B@ DD FLAT:??_R4dp88_damageAnimation@@6B@ ; dp88_damageAnimation::`vftable'
	DD	FLAT:??_Edp88_damageAnimation@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_uniqueInfantry_controller@@6B@
CONST	SEGMENT
??_7dp88_uniqueInfantry_controller@@6B@ DD FLAT:??_R4dp88_uniqueInfantry_controller@@6B@ ; dp88_uniqueInfantry_controller::`vftable'
	DD	FLAT:??_Edp88_uniqueInfantry_controller@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:?ObjectCreateHook@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z
CONST	ENDS
;	COMDAT ??_7dp88_unitSounds@@6B@
CONST	SEGMENT
??_7dp88_unitSounds@@6B@ DD FLAT:??_R4dp88_unitSounds@@6B@ ; dp88_unitSounds::`vftable'
	DD	FLAT:??_Edp88_unitSounds@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_unitSounds@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@dp88_unitSounds@@EAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_unitSounds@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7dp88_randomWeather@@6B@
CONST	SEGMENT
??_7dp88_randomWeather@@6B@ DD FLAT:??_R4dp88_randomWeather@@6B@ ; dp88_randomWeather::`vftable'
	DD	FLAT:??_Edp88_randomWeather@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@dp88_randomWeather@@EAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@dp88_randomWeather@@EAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7JFW_Object_Created_Hook_Base@@6B@
CONST	SEGMENT
??_7JFW_Object_Created_Hook_Base@@6B@ DD FLAT:??_R4JFW_Object_Created_Hook_Base@@6B@ ; JFW_Object_Created_Hook_Base::`vftable'
	DD	FLAT:??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@JFW_Object_Created_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7MultiKeyHookScriptImpClass@@6B@
CONST	SEGMENT
??_7MultiKeyHookScriptImpClass@@6B@ DD FLAT:??_R4MultiKeyHookScriptImpClass@@6B@ ; MultiKeyHookScriptImpClass::`vftable'
	DD	FLAT:??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@MultiKeyHookScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
CONST	SEGMENT
??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ DD FLAT:??_R4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`vftable'
	DD	FLAT:??_E?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z
	DD	FLAT:?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
	DD	FLAT:?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
	DD	FLAT:?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
	DD	FLAT:?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
	DD	FLAT:?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ
	DD	FLAT:?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
	DD	FLAT:?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
	DD	FLAT:?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ
	DD	FLAT:?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ
CONST	ENDS
;	COMDAT ??_7JFW_Key_Hook_Base@@6B@
CONST	SEGMENT
??_7JFW_Key_Hook_Base@@6B@ DD FLAT:??_R4JFW_Key_Hook_Base@@6B@ ; JFW_Key_Hook_Base::`vftable'
	DD	FLAT:??_EJFW_Key_Hook_Base@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@JFW_Key_Hook_Base@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ReferencerClass@@6B@
CONST	SEGMENT
??_7ReferencerClass@@6B@ DD FLAT:??_R4ReferencerClass@@6B@ ; ReferencerClass::`vftable'
	DD	FLAT:??_EReferencerClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@ReferencerClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7PostLoadableClass@@6B@
CONST	SEGMENT
??_7PostLoadableClass@@6B@ DD FLAT:??_R4PostLoadableClass@@6B@ ; PostLoadableClass::`vftable'
	DD	FLAT:??_EPostLoadableClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7INIClass@@6B@
CONST	SEGMENT
??_7INIClass@@6B@ DD FLAT:??_R4INIClass@@6B@		; INIClass::`vftable'
	DD	FLAT:??_EINIClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_vector.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ScriptFactory@@6B@
CONST	SEGMENT
??_7ScriptFactory@@6B@ DD FLAT:??_R4ScriptFactory@@6B@	; ScriptFactory::`vftable'
	DD	FLAT:??_EScriptFactory@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ScriptImpClass@@6B@
CONST	SEGMENT
??_7ScriptImpClass@@6B@ DD FLAT:??_R4ScriptImpClass@@6B@ ; ScriptImpClass::`vftable'
	DD	FLAT:??_EScriptImpClass@@UAEPAXI@Z
	DD	FLAT:?Get_Name@ScriptImpClass@@UAEPBDXZ
	DD	FLAT:?Attach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
	DD	FLAT:?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
	DD	FLAT:?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
	DD	FLAT:?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
	DD	FLAT:?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
	DD	FLAT:?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
	DD	FLAT:?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
	DD	FLAT:?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
	DD	FLAT:?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
	DD	FLAT:?Set_Parameters_String@ScriptImpClass@@UAEXPBD@Z
	DD	FLAT:?Get_Parameters_String@ScriptImpClass@@UAEXPADI@Z
	DD	FLAT:?Save@ScriptImpClass@@MAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load@ScriptImpClass@@MAEXAAVScriptLoader@@@Z
	DD	FLAT:?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
	DD	FLAT:?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
	DD	FLAT:?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7ScriptClass@@6B@
CONST	SEGMENT
??_7ScriptClass@@6B@ DD FLAT:??_R4ScriptClass@@6B@	; ScriptClass::`vftable'
	DD	FLAT:??_EScriptClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7GameObjObserverClass@@6B@
CONST	SEGMENT
??_7GameObjObserverClass@@6B@ DD FLAT:??_R4GameObjObserverClass@@6B@ ; GameObjObserverClass::`vftable'
	DD	FLAT:??_EGameObjObserverClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
CONST	ENDS
CRT$XCU	SEGMENT
_dp88_unitSounds_Registrant$initializer$ DD FLAT:??__Edp88_unitSounds_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_uniqueInfantry_controller_Registrant$initializer$ DD FLAT:??__Edp88_uniqueInfantry_controller_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_damageAnimation_Registrant$initializer$ DD FLAT:??__Edp88_damageAnimation_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_objectAnnouncements_Registrant$initializer$ DD FLAT:??__Edp88_objectAnnouncements_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_chronoTank_Registrant$initializer$ DD FLAT:??__Edp88_chronoTank_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_spawnVehiclePart_Registrant$initializer$ DD FLAT:??__Edp88_spawnVehiclePart_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_customPoints_Registrant$initializer$ DD FLAT:??__Edp88_customPoints_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_conquestController_Registrant$initializer$ DD FLAT:??__Edp88_conquestController_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_conquestControlZone_Registrant$initializer$ DD FLAT:??__Edp88_conquestControlZone_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_conquestControlObject_Registrant$initializer$ DD FLAT:??__Edp88_conquestControlObject_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_radarInvisibility_Registrant$initializer$ DD FLAT:??__Edp88_radarInvisibility_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_turretSound_Registrant$initializer$ DD FLAT:??__Edp88_turretSound_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_teleport_Registrant$initializer$ DD FLAT:??__Edp88_teleport_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Ammo_Animation_Registrant$initializer$ DD FLAT:??__Edp88_Ammo_Animation_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Camo_Controller_Registrant$initializer$ DD FLAT:??__Edp88_Camo_Controller_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Camo_Object_Registrant$initializer$ DD FLAT:??__Edp88_Camo_Object_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Create_Object_Cinematic_Registrant$initializer$ DD FLAT:??__Edp88_Create_Object_Cinematic_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_Set_Team_On_Custom_Registrant$initializer$ DD FLAT:??__Edp88_Set_Team_On_Custom_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_RegenerateHitpoints_Registrant$initializer$ DD FLAT:??__Edp88_RegenerateHitpoints_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_CreateAttachedObject_Registrant$initializer$ DD FLAT:??__Edp88_CreateAttachedObject_Registrant@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_dp88_customPointsPercentage_Registrant$initializer$ DD FLAT:??__Edp88_customPointsPercentage_Registrant@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Get@?$DataSafeClass@M@@SA_NVDataSafeHandleClass@@AAPAM@Z
_TEXT	SEGMENT
_data_entry_ptr$ = -8					; size = 4
_entry_ptr$ = -4					; size = 4
_handle$ = 8						; size = 4
_item$ = 12						; size = 4
?Get@?$DataSafeClass@M@@SA_NVDataSafeHandleClass@@AAPAM@Z PROC ; DataSafeClass<float>::Get, COMDAT

; 561  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 562  : 	DataSafeEntryClass *entry_ptr = Get_Entry(handle);

	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	?Get_Entry@GenericDataSafeClass@@SAPAVDataSafeEntryClass@@VDataSafeHandleClass@@@Z ; GenericDataSafeClass::Get_Entry
	add	esp, 4
	mov	DWORD PTR _entry_ptr$[ebp], eax

; 563  : 	if (entry_ptr == NULL)

	cmp	DWORD PTR _entry_ptr$[ebp], 0
	jne	SHORT $LN2@Get

; 564  : 	{
; 565  : 		return(false);

	xor	al, al
	jmp	$LN3@Get
$LN2@Get:

; 566  : 	}
; 567  : 	DataSafeEntryDataClass<T> *data_entry_ptr = (DataSafeEntryDataClass<T>*) entry_ptr;

	mov	eax, DWORD PTR _entry_ptr$[ebp]
	mov	DWORD PTR _data_entry_ptr$[ebp], eax

; 568  : 	Mem_Copy_Decrypt(&(ReturnList[ReturnIndex][0]), &data_entry_ptr->Data, sizeof(T), false);

	push	0
	push	4
	mov	eax, DWORD PTR _data_entry_ptr$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR ?ReturnList@?$DataSafeClass@M@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A ; DataSafeClass<float>::ReturnList
	call	??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
	mov	ecx, DWORD PTR ?ReturnIndex@?$DataSafeClass@M@@0AAHA ; DataSafeClass<float>::ReturnIndex
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	call	??B?$RefArray@D$03@@QAEPADXZ		; RefArray<char,4>::operator char *
	mov	ecx, 1
	imul	ecx, 0
	add	eax, ecx
	push	eax
	call	?Mem_Copy_Decrypt@GenericDataSafeClass@@KAXPAX0H_N@Z ; GenericDataSafeClass::Mem_Copy_Decrypt
	add	esp, 16					; 00000010H

; 569  : 	item = (T*)(&(ReturnList[ReturnIndex][0]));

	mov	ecx, DWORD PTR ?ReturnList@?$DataSafeClass@M@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A ; DataSafeClass<float>::ReturnList
	call	??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
	mov	ecx, DWORD PTR ?ReturnIndex@?$DataSafeClass@M@@0AAHA ; DataSafeClass<float>::ReturnIndex
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	call	??B?$RefArray@D$03@@QAEPADXZ		; RefArray<char,4>::operator char *
	mov	ecx, 1
	imul	ecx, 0
	add	eax, ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx], eax

; 570  : 	ReturnIndex++;

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@M@@0AAHA ; DataSafeClass<float>::ReturnIndex
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR ?ReturnIndex@?$DataSafeClass@M@@0AAHA ; DataSafeClass<float>::ReturnIndex
	mov	DWORD PTR [edx], ecx

; 571  : 	if (ReturnIndex >= MAX_OBJECT_COPIES)

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@M@@0AAHA ; DataSafeClass<float>::ReturnIndex
	cmp	DWORD PTR [eax], 8
	jl	SHORT $LN1@Get

; 572  : 	{
; 573  : 		ReturnIndex = 0;

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@M@@0AAHA ; DataSafeClass<float>::ReturnIndex
	mov	DWORD PTR [eax], 0
$LN1@Get:

; 574  : 	}
; 575  : 	Shuffle();

	push	0
	call	?Shuffle@GenericDataSafeClass@@KAX_N@Z	; GenericDataSafeClass::Shuffle
	add	esp, 4

; 576  : 	Security_Check();

	call	?Security_Check@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Check

; 577  : 	return(true);

	mov	al, 1
$LN3@Get:

; 578  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get@?$DataSafeClass@M@@SA_NVDataSafeHandleClass@@AAPAM@Z ENDP ; DataSafeClass<float>::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ PROC ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 46   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ENDP ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??B?$RefArray@D$03@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArray@D$03@@QAEPADXZ PROC			; RefArray<char,4>::operator char *, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 46   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArray@D$03@@QAEPADXZ ENDP			; RefArray<char,4>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ
text$yd	SEGMENT
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ PROC ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
	call	??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ENDP ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z
_TEXT	SEGMENT
_endDword$ = -12					; size = 4
_dword$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
_pattern$ = 12						; size = 4
?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z PROC ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern, COMDAT
; _this$ = ecx

; 1445 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1446 : #ifdef DEBUG
; 1447 : 		static_assert(sizeof(T) % 4 == 0, "Expected type size to be a multiple of 4.");
; 1448 : 		DWORD* dword = (DWORD*)&object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _dword$[ebp], eax

; 1449 : 		DWORD* endDword = (DWORD*)(&object+1);

	mov	eax, DWORD PTR _object$[ebp]
	add	eax, 8
	mov	DWORD PTR _endDword$[ebp], eax

; 1450 : 		for (; dword < endDword; ++dword)

	jmp	SHORT $LN3@writeDummy
$LN2@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	add	eax, 4
	mov	DWORD PTR _dword$[ebp], eax
$LN3@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	cmp	eax, DWORD PTR _endDword$[ebp]
	jae	SHORT $LN4@writeDummy

; 1451 : 			*dword = pattern;

	mov	eax, DWORD PTR _dword$[ebp]
	mov	ecx, DWORD PTR _pattern$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN2@writeDummy
$LN4@writeDummy:

; 1452 : #endif
; 1453 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ENDP ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z
_TEXT	SEGMENT
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z PROC ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory, COMDAT
; _this$ = ecx

; 1436 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1437 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1438 : 		writeDummyPattern(object, 0xEDE7E10D);

	push	-303570675				; ede7e10dH
	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeDummyPattern@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@K@Z ; ObjectPoolClass<GenericSLNode,256>::writeDummyPattern

; 1439 : 		(T*&)object = FreeListHead;

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1440 : 		FreeListHead = &object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx

; 1441 : 		FreeObjectCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1442 : 	}

	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ENDP ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ
_TEXT	SEGMENT
tv82 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
_object$ = -20						; size = 4
_i$3 = -16						; size = 4
_newBlockListHead$4 = -12				; size = 4
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory, COMDAT
; _this$ = ecx

; 1413 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1415 :  		if (!FreeListHead)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN4@Allocate_O

; 1416 : 		{
; 1417 : 			void* newBlockListHead = (void*)((void*)new char[sizeof(void*) + sizeof(T[BLOCK_SIZE])]);

	push	OFFSET ??_C@_0EB@IOGKEECK@ObjectPoolClass?$DMclass?5GenericSLN@
	push	1417					; 00000589H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Allocate_O
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_O
	push	1417					; 00000589H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN7@Allocate_O:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN9@Allocate_O
$LN8@Allocate_O:
	push	2052					; 00000804H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN9@Allocate_O:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _newBlockListHead$4[ebp], ecx

; 1418 : 			*(void**)newBlockListHead = BlockListHead;

	mov	eax, DWORD PTR _newBlockListHead$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1419 : 			BlockListHead = newBlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newBlockListHead$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1420 : 			FreeListHead = (T*)((intptr_t)BlockListHead + sizeof(void*));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1421 : 			for (int i = 0; i < BLOCK_SIZE; i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@Allocate_O
$LN2@Allocate_O:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@Allocate_O:
	cmp	DWORD PTR _i$3[ebp], 256		; 00000100H
	jge	SHORT $LN1@Allocate_O

; 1422 : 				(T*&)FreeListHead[i] = &FreeListHead[i+1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
	jmp	SHORT $LN2@Allocate_O
$LN1@Allocate_O:

; 1423 : 			
; 1424 : 			(T*&)FreeListHead[BLOCK_SIZE-1] = NULL;

	mov	eax, 8
	imul	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], 0

; 1425 : 			FreeObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1426 : 			TotalObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN4@Allocate_O:

; 1427 : 		}
; 1428 : 
; 1429 : 		T* object = FreeListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _object$[ebp], ecx

; 1430 : 		FreeListHead = *(T**)(FreeListHead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1431 : 		FreeObjectCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1432 : 		return object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	mov	eax, DWORD PTR $T2[ebp]

; 1433 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
$T1 = -336						; size = 4
_nextBlock$2 = -268					; size = 4
_block$ = -264						; size = 4
_buffer$3 = -260					; size = 256
_this$ = -4						; size = 4
??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>, COMDAT
; _this$ = ecx

; 1393 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1394 : 		// If you hit the following assert, one or more objects were not freed.
; 1395 : 		if (FreeObjectCount != TotalObjectCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN3@ObjectPool

; 1396 : 		{
; 1397 : 			char buffer[256];
; 1398 : 			sprintf(buffer, "%d memory leaks found in " __FUNCTION__ "\n", TotalObjectCount - FreeObjectCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0FF@NOANHENP@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 1399 : 			OutputDebugStringA(buffer);

	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN3@ObjectPool:

; 1400 : 			// TODO: There are quite a few mem leaks of this kind. Fix them.
; 1401 : 		}
; 1402 : 
; 1403 : 		void* block = BlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _block$[ebp], ecx
$LN2@ObjectPool:

; 1404 :  		while (block)

	cmp	DWORD PTR _block$[ebp], 0
	je	SHORT $LN4@ObjectPool

; 1405 : 		{
; 1406 : 			void* nextBlock = *(void**)block;

	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nextBlock$2[ebp], ecx

; 1407 : 			delete[] block;

	push	OFFSET ??_C@_0DL@BOENBDGI@ObjectPoolClass?$DMclass?5GenericSLN@
	push	1407					; 0000057fH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@ObjectPool
	xor	ecx, ecx
	jne	SHORT $LN6@ObjectPool
	push	1407					; 0000057fH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@ObjectPool:
	jmp	SHORT $LN8@ObjectPool
$LN7@ObjectPool:
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@ObjectPool:

; 1408 : 			block = nextBlock;

	mov	eax, DWORD PTR _nextBlock$2[ebp]
	mov	DWORD PTR _block$[ebp], eax

; 1409 : 		}

	jmp	SHORT $LN2@ObjectPool
$LN4@ObjectPool:

; 1410 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::~ObjectPoolClass<GenericSLNode,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>, COMDAT
; _this$ = ecx

; 1384 : 	ObjectPoolClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::FastCriticalSectionClass
	mov	eax, DWORD PTR [eax]

; 1385 : 	{
; 1386 : 		FreeListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1387 : 		BlockListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1388 : 		FreeObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1389 : 		TotalObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1390 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\singleton.h
;	COMDAT ?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ
_TEXT	SEGMENT
?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ PROC ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 		static T instancex;

	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getInstanc
	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51
	or	eax, 1
	mov	DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@51, eax
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex
	call	??0?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAE@XZ ; ObjectPoolClass<GenericSLNode,256>::ObjectPoolClass<GenericSLNode,256>
	push	OFFSET ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
	call	_atexit
	add	esp, 4
$LN1@getInstanc:

; 61   : 		return instancex;

	mov	eax, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance'::`2'::instancex

; 62   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ENDP ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 69   : 	SLNode(T *obj) : GenericSLNode(obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericSLNode@@IAE@PAX@Z		; GenericSLNode::GenericSLNode
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (T*)NodeData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		return (SLNode<T>*)NodeNext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z PROC ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next, COMDAT
; _this$ = ecx

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 		NodeNext = n;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx

; 59   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ENDP ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_customPointsPercentage_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_customPointsPercentage_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_customPointsPercentage_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_customPointsPercentage_Registrant@@3V?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@A ; dp88_customPointsPercentage_Registrant
	call	??1?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_customPointsPercentage_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_customPointsPercentage_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_customPointsPercentage_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_customPointsPercentage_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_customPointsPercentage_Registrant'', COMDAT

; 2878 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0GL@IHDKNLBJ@killPoints?3float?0damagePoints?3fl@
	push	OFFSET ??_C@_0BM@KLGADBN@dp88_customPointsPercentage?$AA@
	mov	ecx, OFFSET ?dp88_customPointsPercentage_Registrant@@3V?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@A ; dp88_customPointsPercentage_Registrant
	call	??0?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_customPointsPercentage>::ScriptRegistrant<dp88_customPointsPercentage>
	push	OFFSET ??__Fdp88_customPointsPercentage_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_customPointsPercentage_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_customPointsPercentage_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_customPointsPercentage_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_customPointsPercentage>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_customPointsPercentage>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_customPointsPercentage>::~ScriptRegistrant<dp88_customPointsPercentage>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_customPointsPercentage>::~ScriptRegistrant<dp88_customPointsPercentage>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_customPointsPercentage>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DM@MPPIFKPJ@ScriptRegistrant?$DMclass?5dp88_cust@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_customPointsPercentage@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_customPointsPercentage>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_customPointsPercentage>::ScriptRegistrant<dp88_customPointsPercentage>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_customPointsPercentage@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_customPointsPercentage>::ScriptRegistrant<dp88_customPointsPercentage>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_CreateAttachedObject_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_CreateAttachedObject_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_CreateAttachedObject_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_CreateAttachedObject_Registrant@@3V?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@A ; dp88_CreateAttachedObject_Registrant
	call	??1?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_CreateAttachedObject_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_CreateAttachedObject_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_CreateAttachedObject_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_CreateAttachedObject_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_CreateAttachedObject_Registrant'', COMDAT

; 2785 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0IM@PIPDNFDL@Preset?3string?0Bone?3string?0Enable@
	push	OFFSET ??_C@_0BK@CHAELLIF@dp88_CreateAttachedObject?$AA@
	mov	ecx, OFFSET ?dp88_CreateAttachedObject_Registrant@@3V?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@A ; dp88_CreateAttachedObject_Registrant
	call	??0?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_CreateAttachedObject>::ScriptRegistrant<dp88_CreateAttachedObject>
	push	OFFSET ??__Fdp88_CreateAttachedObject_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_CreateAttachedObject_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_CreateAttachedObject_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_CreateAttachedObject_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_CreateAttachedObject>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_CreateAttachedObject>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_CreateAttachedObject>::~ScriptRegistrant<dp88_CreateAttachedObject>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_CreateAttachedObject>::~ScriptRegistrant<dp88_CreateAttachedObject>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_CreateAttachedObject>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DK@LFLOCGCH@ScriptRegistrant?$DMclass?5dp88_Crea@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_CreateAttachedObject@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_CreateAttachedObject>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_CreateAttachedObject>::ScriptRegistrant<dp88_CreateAttachedObject>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_CreateAttachedObject@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_CreateAttachedObject>::ScriptRegistrant<dp88_CreateAttachedObject>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_RegenerateHitpoints_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_RegenerateHitpoints_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_RegenerateHitpoints_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_RegenerateHitpoints_Registrant@@3V?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@A ; dp88_RegenerateHitpoints_Registrant
	call	??1?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_RegenerateHitpoints_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_RegenerateHitpoints_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_RegenerateHitpoints_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_RegenerateHitpoints_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_RegenerateHitpoints_Registrant'', COMDAT

; 2670 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0JA@NKIDBMGD@Hitpoints?3float?0Interval?$DN1?3int?0W@
	push	OFFSET ??_C@_0BJ@MDPGIMG@dp88_RegenerateHitpoints?$AA@
	mov	ecx, OFFSET ?dp88_RegenerateHitpoints_Registrant@@3V?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@A ; dp88_RegenerateHitpoints_Registrant
	call	??0?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_RegenerateHitpoints>::ScriptRegistrant<dp88_RegenerateHitpoints>
	push	OFFSET ??__Fdp88_RegenerateHitpoints_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_RegenerateHitpoints_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_RegenerateHitpoints_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_RegenerateHitpoints_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_RegenerateHitpoints>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_RegenerateHitpoints>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_RegenerateHitpoints>::~ScriptRegistrant<dp88_RegenerateHitpoints>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_RegenerateHitpoints>::~ScriptRegistrant<dp88_RegenerateHitpoints>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_RegenerateHitpoints>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DJ@OKEEEKLJ@ScriptRegistrant?$DMclass?5dp88_Rege@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_RegenerateHitpoints@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_RegenerateHitpoints>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_RegenerateHitpoints>::ScriptRegistrant<dp88_RegenerateHitpoints>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_RegenerateHitpoints@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_RegenerateHitpoints>::ScriptRegistrant<dp88_RegenerateHitpoints>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Set_Team_On_Custom_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Set_Team_On_Custom_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_Set_Team_On_Custom_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Set_Team_On_Custom_Registrant@@3V?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@A ; dp88_Set_Team_On_Custom_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Set_Team_On_Custom_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_Set_Team_On_Custom_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_Set_Team_On_Custom_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Set_Team_On_Custom_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_Set_Team_On_Custom_Registrant'', COMDAT

; 2481 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0M@HBPJHKKO@Message?3int?$AA@
	push	OFFSET ??_C@_0BI@JOLBDOKJ@dp88_Set_Team_On_Custom?$AA@
	mov	ecx, OFFSET ?dp88_Set_Team_On_Custom_Registrant@@3V?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@A ; dp88_Set_Team_On_Custom_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Set_Team_On_Custom>::ScriptRegistrant<dp88_Set_Team_On_Custom>
	push	OFFSET ??__Fdp88_Set_Team_On_Custom_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Set_Team_On_Custom_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Set_Team_On_Custom_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_Set_Team_On_Custom_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Set_Team_On_Custom>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_Set_Team_On_Custom>::~ScriptRegistrant<dp88_Set_Team_On_Custom>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_Set_Team_On_Custom>::~ScriptRegistrant<dp88_Set_Team_On_Custom>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Set_Team_On_Custom>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DI@GICBHLPO@ScriptRegistrant?$DMclass?5dp88_Set_@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Set_Team_On_Custom@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Set_Team_On_Custom>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Set_Team_On_Custom>::ScriptRegistrant<dp88_Set_Team_On_Custom>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Set_Team_On_Custom@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Set_Team_On_Custom>::ScriptRegistrant<dp88_Set_Team_On_Custom>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Create_Object_Cinematic_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Create_Object_Cinematic_Registrant@@YAXXZ PROC ; `dynamic atexit destructor for 'dp88_Create_Object_Cinematic_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Create_Object_Cinematic_Registrant@@3V?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@A ; dp88_Create_Object_Cinematic_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Create_Object_Cinematic_Registrant@@YAXXZ ENDP ; `dynamic atexit destructor for 'dp88_Create_Object_Cinematic_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_Create_Object_Cinematic_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Create_Object_Cinematic_Registrant@@YAXXZ PROC ; `dynamic initializer for 'dp88_Create_Object_Cinematic_Registrant'', COMDAT

; 2443 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0EB@CJLOGCJ@Preset?3string?0Cinematic?3string?0T@
	push	OFFSET ??_C@_0BN@NHEJAFFL@dp88_Create_Object_Cinematic?$AA@
	mov	ecx, OFFSET ?dp88_Create_Object_Cinematic_Registrant@@3V?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@A ; dp88_Create_Object_Cinematic_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Create_Object_Cinematic>::ScriptRegistrant<dp88_Create_Object_Cinematic>
	push	OFFSET ??__Fdp88_Create_Object_Cinematic_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Create_Object_Cinematic_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Create_Object_Cinematic_Registrant@@YAXXZ ENDP ; `dynamic initializer for 'dp88_Create_Object_Cinematic_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Create_Object_Cinematic>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_Create_Object_Cinematic>::~ScriptRegistrant<dp88_Create_Object_Cinematic>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_Create_Object_Cinematic>::~ScriptRegistrant<dp88_Create_Object_Cinematic>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Create_Object_Cinematic>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DN@LKNDEIDF@ScriptRegistrant?$DMclass?5dp88_Crea@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Create_Object_Cinematic@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Create_Object_Cinematic>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Create_Object_Cinematic>::ScriptRegistrant<dp88_Create_Object_Cinematic>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Create_Object_Cinematic@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Create_Object_Cinematic>::ScriptRegistrant<dp88_Create_Object_Cinematic>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdio.h
;	COMDAT ??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ PROC		; sprintf_s<128>, COMDAT

; 309  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(int, sprintf_s, vsprintf_s, _Post_z_ char, _Dest, _In_z_ _Printf_format_string_ const char *, _Format)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	push	128					; 00000080H
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__vsprintf_s
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ ENDP		; sprintf_s<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Camo_Object_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Camo_Object_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_Camo_Object_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Camo_Object_Registrant@@3V?$ScriptRegistrant@Vdp88_Camo_Object@@@@A ; dp88_Camo_Object_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Camo_Object_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_Camo_Object_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_Camo_Object_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Camo_Object_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_Camo_Object_Registrant'', COMDAT

; 2360 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BP@MNBKOHKO@Camouflage?3string?0Model?3string?$AA@
	push	OFFSET ??_C@_0BB@IIGFBOLK@dp88_Camo_Object?$AA@
	mov	ecx, OFFSET ?dp88_Camo_Object_Registrant@@3V?$ScriptRegistrant@Vdp88_Camo_Object@@@@A ; dp88_Camo_Object_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Camo_Object@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Camo_Object>::ScriptRegistrant<dp88_Camo_Object>
	push	OFFSET ??__Fdp88_Camo_Object_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Camo_Object_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Camo_Object_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_Camo_Object_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Camo_Object>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Camo_Object>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_Camo_Object>::~ScriptRegistrant<dp88_Camo_Object>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_Camo_Object>::~ScriptRegistrant<dp88_Camo_Object>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Camo_Object>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DB@NDILDPL@ScriptRegistrant?$DMclass?5dp88_Camo@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Camo_Object@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Camo_Object@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Camo_Object>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Camo_Object@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Camo_Object@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Camo_Object>::ScriptRegistrant<dp88_Camo_Object>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Camo_Object@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Camo_Object@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Camo_Object>::ScriptRegistrant<dp88_Camo_Object>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Camo_Controller_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Camo_Controller_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_Camo_Controller_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Camo_Controller_Registrant@@3V?$ScriptRegistrant@Vdp88_Camo_Controller@@@@A ; dp88_Camo_Controller_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Camo_Controller_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_Camo_Controller_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_Camo_Controller_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Camo_Controller_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_Camo_Controller_Registrant'', COMDAT

; 2325 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BC@LHPBPJNN@Camouflage?3string?$AA@
	push	OFFSET ??_C@_0BF@FLBIGINA@dp88_Camo_Controller?$AA@
	mov	ecx, OFFSET ?dp88_Camo_Controller_Registrant@@3V?$ScriptRegistrant@Vdp88_Camo_Controller@@@@A ; dp88_Camo_Controller_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Camo_Controller@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Camo_Controller>::ScriptRegistrant<dp88_Camo_Controller>
	push	OFFSET ??__Fdp88_Camo_Controller_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Camo_Controller_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Camo_Controller_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_Camo_Controller_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Camo_Controller>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Camo_Controller>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_Camo_Controller>::~ScriptRegistrant<dp88_Camo_Controller>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_Camo_Controller>::~ScriptRegistrant<dp88_Camo_Controller>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Camo_Controller>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DF@FBMHABBF@ScriptRegistrant?$DMclass?5dp88_Camo@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Camo_Controller@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Camo_Controller@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Camo_Controller>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Camo_Controller@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Camo_Controller@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Camo_Controller>::ScriptRegistrant<dp88_Camo_Controller>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Camo_Controller@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Camo_Controller@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Camo_Controller>::ScriptRegistrant<dp88_Camo_Controller>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_Ammo_Animation_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_Ammo_Animation_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_Ammo_Animation_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_Ammo_Animation_Registrant@@3V?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@A ; dp88_Ammo_Animation_Registrant
	call	??1?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_Ammo_Animation_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_Ammo_Animation_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_Ammo_Animation_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_Ammo_Animation_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_Ammo_Animation_Registrant'', COMDAT

; 2300 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0GM@LOJAFJIG@Animation?3string?0Animation_Frame@
	push	OFFSET ??_C@_0BE@FFKNKIGP@dp88_Ammo_Animation?$AA@
	mov	ecx, OFFSET ?dp88_Ammo_Animation_Registrant@@3V?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@A ; dp88_Ammo_Animation_Registrant
	call	??0?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_Ammo_Animation>::ScriptRegistrant<dp88_Ammo_Animation>
	push	OFFSET ??__Fdp88_Ammo_Animation_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_Ammo_Animation_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_Ammo_Animation_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_Ammo_Animation_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_Ammo_Animation>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_Ammo_Animation>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_Ammo_Animation>::~ScriptRegistrant<dp88_Ammo_Animation>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_Ammo_Animation>::~ScriptRegistrant<dp88_Ammo_Animation>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_Ammo_Animation>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DE@DDAABFML@ScriptRegistrant?$DMclass?5dp88_Ammo@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_Ammo_Animation@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_Ammo_Animation>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_Ammo_Animation>::ScriptRegistrant<dp88_Ammo_Animation>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_Ammo_Animation@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_Ammo_Animation>::ScriptRegistrant<dp88_Ammo_Animation>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_teleport_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_teleport_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_teleport_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_teleport_Registrant@@3V?$ScriptRegistrant@Vdp88_teleport@@@@A ; dp88_teleport_Registrant
	call	??1?$ScriptRegistrant@Vdp88_teleport@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_teleport_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_teleport_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_teleport_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_teleport_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_teleport_Registrant'', COMDAT

; 2213 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0FK@IEIAONDC@ObjectID?$DN0?3int?0Bone?3string?0Offse@
	push	OFFSET ??_C@_0O@GOIIEOMA@dp88_teleport?$AA@
	mov	ecx, OFFSET ?dp88_teleport_Registrant@@3V?$ScriptRegistrant@Vdp88_teleport@@@@A ; dp88_teleport_Registrant
	call	??0?$ScriptRegistrant@Vdp88_teleport@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_teleport>::ScriptRegistrant<dp88_teleport>
	push	OFFSET ??__Fdp88_teleport_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_teleport_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_teleport_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_teleport_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAXI@Z PROC	; ScriptRegistrant<dp88_teleport>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_teleport@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAXI@Z ENDP	; ScriptRegistrant<dp88_teleport>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_teleport@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_teleport@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_teleport>::~ScriptRegistrant<dp88_teleport>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_teleport@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_teleport>::~ScriptRegistrant<dp88_teleport>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_teleport>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0CO@IGPMMMMA@ScriptRegistrant?$DMclass?5dp88_tele@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_teleport@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_teleport@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_teleport>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_teleport@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_teleport@@@@QAE@PBD0@Z PROC	; ScriptRegistrant<dp88_teleport>::ScriptRegistrant<dp88_teleport>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_teleport@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_teleport@@@@QAE@PBD0@Z ENDP	; ScriptRegistrant<dp88_teleport>::ScriptRegistrant<dp88_teleport>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_turretSound_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_turretSound_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_turretSound_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_turretSound_Registrant@@3V?$ScriptRegistrant@Vdp88_turretSound@@@@A ; dp88_turretSound_Registrant
	call	??1?$ScriptRegistrant@Vdp88_turretSound@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_turretSound_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_turretSound_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_turretSound_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_turretSound_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_turretSound_Registrant'', COMDAT

; 2140 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0DE@FOBBIMPM@Sound_Preset?3string?0Min_Differen@
	push	OFFSET ??_C@_0BB@NGHNDKMD@dp88_turretSound?$AA@
	mov	ecx, OFFSET ?dp88_turretSound_Registrant@@3V?$ScriptRegistrant@Vdp88_turretSound@@@@A ; dp88_turretSound_Registrant
	call	??0?$ScriptRegistrant@Vdp88_turretSound@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_turretSound>::ScriptRegistrant<dp88_turretSound>
	push	OFFSET ??__Fdp88_turretSound_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_turretSound_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_turretSound_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_turretSound_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_turretSound>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_turretSound@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_turretSound>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_turretSound@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_turretSound@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_turretSound>::~ScriptRegistrant<dp88_turretSound>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_turretSound@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_turretSound>::~ScriptRegistrant<dp88_turretSound>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_turretSound>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DB@EOLBBBPH@ScriptRegistrant?$DMclass?5dp88_turr@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_turretSound@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_turretSound@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_turretSound>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_turretSound@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_turretSound@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_turretSound>::ScriptRegistrant<dp88_turretSound>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_turretSound@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_turretSound@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_turretSound>::ScriptRegistrant<dp88_turretSound>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_radarInvisibility_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_radarInvisibility_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_radarInvisibility_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_radarInvisibility_Registrant@@3V?$ScriptRegistrant@Vdp88_radarInvisibility@@@@A ; dp88_radarInvisibility_Registrant
	call	??1?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_radarInvisibility_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_radarInvisibility_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_radarInvisibility_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_radarInvisibility_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_radarInvisibility_Registrant'', COMDAT

; 2039 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0BH@IFAEHJOF@dp88_radarInvisibility?$AA@
	mov	ecx, OFFSET ?dp88_radarInvisibility_Registrant@@3V?$ScriptRegistrant@Vdp88_radarInvisibility@@@@A ; dp88_radarInvisibility_Registrant
	call	??0?$ScriptRegistrant@Vdp88_radarInvisibility@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_radarInvisibility>::ScriptRegistrant<dp88_radarInvisibility>
	push	OFFSET ??__Fdp88_radarInvisibility_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_radarInvisibility_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_radarInvisibility_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_radarInvisibility_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_radarInvisibility>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_radarInvisibility>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_radarInvisibility>::~ScriptRegistrant<dp88_radarInvisibility>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_radarInvisibility>::~ScriptRegistrant<dp88_radarInvisibility>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_radarInvisibility>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DH@MDPEDLFC@ScriptRegistrant?$DMclass?5dp88_rada@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_radarInvisibility@@QAE@XZ	; dp88_radarInvisibility::dp88_radarInvisibility
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_radarInvisibility@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_radarInvisibility>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_radarInvisibility@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_radarInvisibility@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_radarInvisibility>::ScriptRegistrant<dp88_radarInvisibility>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_radarInvisibility@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_radarInvisibility@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_radarInvisibility>::ScriptRegistrant<dp88_radarInvisibility>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_conquestControlObject_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_conquestControlObject_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_conquestControlObject_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_conquestControlObject_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestControlObject@@@@A ; dp88_conquestControlObject_Registrant
	call	??1?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_conquestControlObject_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_conquestControlObject_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_conquestControlObject_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_conquestControlObject_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_conquestControlObject_Registrant'', COMDAT

; 1912 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0CE@OPGAFHJK@TickPoints?$DN1?3int?0TickInterval?$DN3?3@
	push	OFFSET ??_C@_0BL@MHNNMEJP@dp88_conquestControlObject?$AA@
	mov	ecx, OFFSET ?dp88_conquestControlObject_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestControlObject@@@@A ; dp88_conquestControlObject_Registrant
	call	??0?$ScriptRegistrant@Vdp88_conquestControlObject@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_conquestControlObject>::ScriptRegistrant<dp88_conquestControlObject>
	push	OFFSET ??__Fdp88_conquestControlObject_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_conquestControlObject_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_conquestControlObject_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_conquestControlObject_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_conquestControlObject>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_conquestControlObject>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_conquestControlObject>::~ScriptRegistrant<dp88_conquestControlObject>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_conquestControlObject>::~ScriptRegistrant<dp88_conquestControlObject>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_conquestControlObject>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DL@ILMNJHNN@ScriptRegistrant?$DMclass?5dp88_conq@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_conquestControlObject@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_conquestControlObject@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_conquestControlObject>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_conquestControlObject@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_conquestControlObject@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_conquestControlObject>::ScriptRegistrant<dp88_conquestControlObject>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_conquestControlObject@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_conquestControlObject@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_conquestControlObject>::ScriptRegistrant<dp88_conquestControlObject>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_conquestControlZone_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_conquestControlZone_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_conquestControlZone_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_conquestControlZone_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestControlZone@@@@A ; dp88_conquestControlZone_Registrant
	call	??1?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_conquestControlZone_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_conquestControlZone_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_conquestControlZone_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_conquestControlZone_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_conquestControlZone_Registrant'', COMDAT

; 1852 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0CBD@GFGPKKJA@ZoneSize?3vector3?0ZoneOffset?3vect@
	push	OFFSET ??_C@_0BJ@OFFNAEOL@dp88_conquestControlZone?$AA@
	mov	ecx, OFFSET ?dp88_conquestControlZone_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestControlZone@@@@A ; dp88_conquestControlZone_Registrant
	call	??0?$ScriptRegistrant@Vdp88_conquestControlZone@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_conquestControlZone>::ScriptRegistrant<dp88_conquestControlZone>
	push	OFFSET ??__Fdp88_conquestControlZone_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_conquestControlZone_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_conquestControlZone_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_conquestControlZone_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_conquestControlZone>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_conquestControlZone>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_conquestControlZone>::~ScriptRegistrant<dp88_conquestControlZone>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_conquestControlZone>::~ScriptRegistrant<dp88_conquestControlZone>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_conquestControlZone>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DJ@DDNMINDP@ScriptRegistrant?$DMclass?5dp88_conq@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_conquestControlZone@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_conquestControlZone@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_conquestControlZone>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_conquestControlZone@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_conquestControlZone@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_conquestControlZone>::ScriptRegistrant<dp88_conquestControlZone>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_conquestControlZone@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_conquestControlZone@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_conquestControlZone>::ScriptRegistrant<dp88_conquestControlZone>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Data@?$SLNode@VSmartGameObj@@@@QBEPAVSmartGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Data@?$SLNode@VSmartGameObj@@@@QBEPAVSmartGameObj@@XZ PROC ; SLNode<SmartGameObj>::Data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (T*)NodeData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Data@?$SLNode@VSmartGameObj@@@@QBEPAVSmartGameObj@@XZ ENDP ; SLNode<SmartGameObj>::Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Next@?$SLNode@VSmartGameObj@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$SLNode@VSmartGameObj@@@@QBEPAV1@XZ PROC		; SLNode<SmartGameObj>::Next, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		return (SLNode<T>*)NodeNext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$SLNode@VSmartGameObj@@@@QBEPAV1@XZ ENDP		; SLNode<SmartGameObj>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Head@?$SList@VSmartGameObj@@@@QBEPAV?$SLNode@VSmartGameObj@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Head@?$SList@VSmartGameObj@@@@QBEPAV?$SLNode@VSmartGameObj@@@@XZ PROC ; SList<SmartGameObj>::Head, COMDAT
; _this$ = ecx

; 313  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 		return HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Head@?$SList@VSmartGameObj@@@@QBEPAV?$SLNode@VSmartGameObj@@@@XZ ENDP ; SList<SmartGameObj>::Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_conquestController_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_conquestController_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_conquestController_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_conquestController_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestController@@@@A ; dp88_conquestController_Registrant
	call	??1?$ScriptRegistrant@Vdp88_conquestController@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_conquestController_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_conquestController_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_conquestController_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_conquestController_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_conquestController_Registrant'', COMDAT

; 1491 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0KP@CPJIKONJ@ScoringMode?$DN0?3int?0TargetScoreTea@
	push	OFFSET ??_C@_0BI@ILMCAMOM@dp88_conquestController?$AA@
	mov	ecx, OFFSET ?dp88_conquestController_Registrant@@3V?$ScriptRegistrant@Vdp88_conquestController@@@@A ; dp88_conquestController_Registrant
	call	??0?$ScriptRegistrant@Vdp88_conquestController@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_conquestController>::ScriptRegistrant<dp88_conquestController>
	push	OFFSET ??__Fdp88_conquestController_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_conquestController_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_conquestController_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_conquestController_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_conquestController>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_conquestController@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_conquestController>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_conquestController@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_conquestController@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_conquestController>::~ScriptRegistrant<dp88_conquestController>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_conquestController@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_conquestController>::~ScriptRegistrant<dp88_conquestController>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_conquestController>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DI@LFFHDACI@ScriptRegistrant?$DMclass?5dp88_conq@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_conquestController@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_conquestController@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_conquestController>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_conquestController@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_conquestController@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_conquestController>::ScriptRegistrant<dp88_conquestController>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_conquestController@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_conquestController@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_conquestController>::ScriptRegistrant<dp88_conquestController>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Data@?$SLNode@VBaseGameObj@@@@QBEPAVBaseGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Data@?$SLNode@VBaseGameObj@@@@QBEPAVBaseGameObj@@XZ PROC ; SLNode<BaseGameObj>::Data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (T*)NodeData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Data@?$SLNode@VBaseGameObj@@@@QBEPAVBaseGameObj@@XZ ENDP ; SLNode<BaseGameObj>::Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Next@?$SLNode@VBaseGameObj@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$SLNode@VBaseGameObj@@@@QBEPAV1@XZ PROC		; SLNode<BaseGameObj>::Next, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		return (SLNode<T>*)NodeNext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$SLNode@VBaseGameObj@@@@QBEPAV1@XZ ENDP		; SLNode<BaseGameObj>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?dp88_conquestController_ObjectCreateHook@@YAXPAXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_obj$ = 12						; size = 4
?dp88_conquestController_ObjectCreateHook@@YAXPAXPAVScriptableGameObj@@@Z PROC ; dp88_conquestController_ObjectCreateHook, COMDAT

; 1283 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1284 :   Set_Death_Points(obj, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Set_Death_Points@@YAXPAVScriptableGameObj@@M@Z ; Set_Death_Points
	add	esp, 8

; 1285 :   Set_Damage_Points(obj, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Set_Damage_Points@@YAXPAVScriptableGameObj@@M@Z ; Set_Damage_Points
	add	esp, 8

; 1286 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?dp88_conquestController_ObjectCreateHook@@YAXPAXPAVScriptableGameObj@@@Z ENDP ; dp88_conquestController_ObjectCreateHook
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_customPoints_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_customPoints_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_customPoints_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_customPoints_Registrant@@3V?$ScriptRegistrant@Vdp88_customPoints@@@@A ; dp88_customPoints_Registrant
	call	??1?$ScriptRegistrant@Vdp88_customPoints@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_customPoints_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_customPoints_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_customPoints_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_customPoints_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_customPoints_Registrant'', COMDAT

; 1269 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0GL@IHDKNLBJ@killPoints?3float?0damagePoints?3fl@
	push	OFFSET ??_C@_0BC@HNEJKIPA@dp88_customPoints?$AA@
	mov	ecx, OFFSET ?dp88_customPoints_Registrant@@3V?$ScriptRegistrant@Vdp88_customPoints@@@@A ; dp88_customPoints_Registrant
	call	??0?$ScriptRegistrant@Vdp88_customPoints@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_customPoints>::ScriptRegistrant<dp88_customPoints>
	push	OFFSET ??__Fdp88_customPoints_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_customPoints_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_customPoints_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_customPoints_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_customPoints>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_customPoints@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_customPoints>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_customPoints@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_customPoints@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_customPoints>::~ScriptRegistrant<dp88_customPoints>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_customPoints@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_customPoints>::~ScriptRegistrant<dp88_customPoints>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_customPoints>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DC@DKDBALLO@ScriptRegistrant?$DMclass?5dp88_cust@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_customPoints@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_customPoints@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_customPoints>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_customPoints@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_customPoints@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_customPoints>::ScriptRegistrant<dp88_customPoints>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_customPoints@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_customPoints@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_customPoints>::ScriptRegistrant<dp88_customPoints>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_spawnVehiclePart_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_spawnVehiclePart_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_spawnVehiclePart_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_spawnVehiclePart_Registrant@@3V?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@A ; dp88_spawnVehiclePart_Registrant
	call	??1?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_spawnVehiclePart_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_spawnVehiclePart_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_spawnVehiclePart_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_spawnVehiclePart_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_spawnVehiclePart_Registrant'', COMDAT

; 1163 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0ED@OFDFACF@Vehicle_Part_Preset?3string?0Spawn@
	push	OFFSET ??_C@_0BG@BNFHGCOL@dp88_spawnVehiclePart?$AA@
	mov	ecx, OFFSET ?dp88_spawnVehiclePart_Registrant@@3V?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@A ; dp88_spawnVehiclePart_Registrant
	call	??0?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_spawnVehiclePart>::ScriptRegistrant<dp88_spawnVehiclePart>
	push	OFFSET ??__Fdp88_spawnVehiclePart_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_spawnVehiclePart_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_spawnVehiclePart_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_spawnVehiclePart_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_spawnVehiclePart>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_spawnVehiclePart>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_spawnVehiclePart>::~ScriptRegistrant<dp88_spawnVehiclePart>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_spawnVehiclePart>::~ScriptRegistrant<dp88_spawnVehiclePart>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_spawnVehiclePart>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DG@GPDLOHJG@ScriptRegistrant?$DMclass?5dp88_spaw@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_spawnVehiclePart@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_spawnVehiclePart>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_spawnVehiclePart>::ScriptRegistrant<dp88_spawnVehiclePart>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_spawnVehiclePart@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_spawnVehiclePart>::ScriptRegistrant<dp88_spawnVehiclePart>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_chronoTank_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_chronoTank_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_chronoTank_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_chronoTank_Registrant@@3V?$ScriptRegistrant@Vdp88_chronoTank@@@@A ; dp88_chronoTank_Registrant
	call	??1?$ScriptRegistrant@Vdp88_chronoTank@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_chronoTank_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_chronoTank_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_chronoTank_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_chronoTank_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_chronoTank_Registrant'', COMDAT

; 1087 : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BFC@DMEBIJAI@shift_keyhook?3string?0shift_durat@
	push	OFFSET ??_C@_0BA@HIIMEFO@dp88_chronoTank?$AA@
	mov	ecx, OFFSET ?dp88_chronoTank_Registrant@@3V?$ScriptRegistrant@Vdp88_chronoTank@@@@A ; dp88_chronoTank_Registrant
	call	??0?$ScriptRegistrant@Vdp88_chronoTank@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_chronoTank>::ScriptRegistrant<dp88_chronoTank>
	push	OFFSET ??__Fdp88_chronoTank_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_chronoTank_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_chronoTank_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_chronoTank_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_chronoTank>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_chronoTank@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_chronoTank>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_chronoTank@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_chronoTank@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_chronoTank>::~ScriptRegistrant<dp88_chronoTank>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_chronoTank@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_chronoTank>::~ScriptRegistrant<dp88_chronoTank>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_chronoTank>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DA@KKGPGDCG@ScriptRegistrant?$DMclass?5dp88_chro@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_chronoTank@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_chronoTank@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_chronoTank>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_chronoTank@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_chronoTank@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_chronoTank>::ScriptRegistrant<dp88_chronoTank>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_chronoTank@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_chronoTank@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_chronoTank>::ScriptRegistrant<dp88_chronoTank>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_objectAnnouncements_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_objectAnnouncements_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_objectAnnouncements_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_objectAnnouncements_Registrant@@3V?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@A ; dp88_objectAnnouncements_Registrant
	call	??1?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_objectAnnouncements_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_objectAnnouncements_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_objectAnnouncements_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_objectAnnouncements_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_objectAnnouncements_Registrant'', COMDAT

; 707  : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0JM@LCNDKFBB@minimumAnnounceInterval?$DN20?3int?0t@
	push	OFFSET ??_C@_0BJ@MLJJJNEI@dp88_objectAnnouncements?$AA@
	mov	ecx, OFFSET ?dp88_objectAnnouncements_Registrant@@3V?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@A ; dp88_objectAnnouncements_Registrant
	call	??0?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_objectAnnouncements>::ScriptRegistrant<dp88_objectAnnouncements>
	push	OFFSET ??__Fdp88_objectAnnouncements_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_objectAnnouncements_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_objectAnnouncements_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_objectAnnouncements_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_objectAnnouncements>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_objectAnnouncements>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_objectAnnouncements>::~ScriptRegistrant<dp88_objectAnnouncements>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_objectAnnouncements>::~ScriptRegistrant<dp88_objectAnnouncements>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_objectAnnouncements>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DJ@NLMOEDBC@ScriptRegistrant?$DMclass?5dp88_obje@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_objectAnnouncements@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_objectAnnouncements>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_objectAnnouncements>::ScriptRegistrant<dp88_objectAnnouncements>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_objectAnnouncements@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_objectAnnouncements>::ScriptRegistrant<dp88_objectAnnouncements>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_damageAnimation_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_damageAnimation_Registrant@@YAXXZ PROC	; `dynamic atexit destructor for 'dp88_damageAnimation_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_damageAnimation_Registrant@@3V?$ScriptRegistrant@Vdp88_damageAnimation@@@@A ; dp88_damageAnimation_Registrant
	call	??1?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_damageAnimation_Registrant@@YAXXZ ENDP	; `dynamic atexit destructor for 'dp88_damageAnimation_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_damageAnimation_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_damageAnimation_Registrant@@YAXXZ PROC	; `dynamic initializer for 'dp88_damageAnimation_Registrant'', COMDAT

; 593  : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0ECL@PMDJFDMP@animationName?$DNobject?4object?3stri@
	push	OFFSET ??_C@_0BF@KGCMIMDC@dp88_damageAnimation?$AA@
	mov	ecx, OFFSET ?dp88_damageAnimation_Registrant@@3V?$ScriptRegistrant@Vdp88_damageAnimation@@@@A ; dp88_damageAnimation_Registrant
	call	??0?$ScriptRegistrant@Vdp88_damageAnimation@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_damageAnimation>::ScriptRegistrant<dp88_damageAnimation>
	push	OFFSET ??__Fdp88_damageAnimation_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_damageAnimation_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_damageAnimation_Registrant@@YAXXZ ENDP	; `dynamic initializer for 'dp88_damageAnimation_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_damageAnimation>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_damageAnimation>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_damageAnimation>::~ScriptRegistrant<dp88_damageAnimation>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_damageAnimation>::~ScriptRegistrant<dp88_damageAnimation>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_damageAnimation>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DF@LHLNAIGF@ScriptRegistrant?$DMclass?5dp88_dama@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	164					; 000000a4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_damageAnimation@@QAE@XZ		; dp88_damageAnimation::dp88_damageAnimation
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_damageAnimation@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_damageAnimation>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_damageAnimation@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_damageAnimation@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_damageAnimation>::ScriptRegistrant<dp88_damageAnimation>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_damageAnimation@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_damageAnimation@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_damageAnimation>::ScriptRegistrant<dp88_damageAnimation>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_uniqueInfantry_controller_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_uniqueInfantry_controller_Registrant@@YAXXZ PROC ; `dynamic atexit destructor for 'dp88_uniqueInfantry_controller_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_uniqueInfantry_controller_Registrant@@3V?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@A ; dp88_uniqueInfantry_controller_Registrant
	call	??1?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_uniqueInfantry_controller_Registrant@@YAXXZ ENDP ; `dynamic atexit destructor for 'dp88_uniqueInfantry_controller_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_uniqueInfantry_controller_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_uniqueInfantry_controller_Registrant@@YAXXZ PROC ; `dynamic initializer for 'dp88_uniqueInfantry_controller_Registrant'', COMDAT

; 401  : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0EJ@FJLHJHCB@infantry_preset?3string?0team_id?3i@
	push	OFFSET ??_C@_0BP@ENKDJGDA@dp88_uniqueInfantry_controller?$AA@
	mov	ecx, OFFSET ?dp88_uniqueInfantry_controller_Registrant@@3V?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@A ; dp88_uniqueInfantry_controller_Registrant
	call	??0?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_uniqueInfantry_controller>::ScriptRegistrant<dp88_uniqueInfantry_controller>
	push	OFFSET ??__Fdp88_uniqueInfantry_controller_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_uniqueInfantry_controller_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_uniqueInfantry_controller_Registrant@@YAXXZ ENDP ; `dynamic initializer for 'dp88_uniqueInfantry_controller_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_uniqueInfantry_controller>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_uniqueInfantry_controller>::~ScriptRegistrant<dp88_uniqueInfantry_controller>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_uniqueInfantry_controller>::~ScriptRegistrant<dp88_uniqueInfantry_controller>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_uniqueInfantry_controller>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DP@DDMDLHOJ@ScriptRegistrant?$DMclass?5dp88_uniq@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_uniqueInfantry_controller@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_uniqueInfantry_controller>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_uniqueInfantry_controller>::ScriptRegistrant<dp88_uniqueInfantry_controller>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_uniqueInfantry_controller@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_uniqueInfantry_controller>::ScriptRegistrant<dp88_uniqueInfantry_controller>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_unitSounds_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_unitSounds_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_unitSounds_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_unitSounds_Registrant@@3V?$ScriptRegistrant@Vdp88_unitSounds@@@@A ; dp88_unitSounds_Registrant
	call	??1?$ScriptRegistrant@Vdp88_unitSounds@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_unitSounds_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_unitSounds_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_unitSounds_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_unitSounds_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_unitSounds_Registrant'', COMDAT

; 341  : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0BNB@EDNAANJI@createdSound?$DNnull?3string?0damaged@
	push	OFFSET ??_C@_0BA@KBGLIELP@dp88_unitSounds?$AA@
	mov	ecx, OFFSET ?dp88_unitSounds_Registrant@@3V?$ScriptRegistrant@Vdp88_unitSounds@@@@A ; dp88_unitSounds_Registrant
	call	??0?$ScriptRegistrant@Vdp88_unitSounds@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_unitSounds>::ScriptRegistrant<dp88_unitSounds>
	push	OFFSET ??__Fdp88_unitSounds_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_unitSounds_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_unitSounds_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_unitSounds_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_unitSounds>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_unitSounds@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_unitSounds>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_unitSounds@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_unitSounds@@@@UAE@XZ PROC	; ScriptRegistrant<dp88_unitSounds>::~ScriptRegistrant<dp88_unitSounds>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_unitSounds@@@@UAE@XZ ENDP	; ScriptRegistrant<dp88_unitSounds>::~ScriptRegistrant<dp88_unitSounds>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_unitSounds>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DA@FDLCHKBK@ScriptRegistrant?$DMclass?5dp88_unit@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_unitSounds@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_unitSounds@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_unitSounds>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_unitSounds@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_unitSounds@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_unitSounds>::ScriptRegistrant<dp88_unitSounds>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_unitSounds@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_unitSounds@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_unitSounds>::ScriptRegistrant<dp88_unitSounds>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fdp88_randomWeather_Registrant@@YAXXZ
text$yd	SEGMENT
??__Fdp88_randomWeather_Registrant@@YAXXZ PROC		; `dynamic atexit destructor for 'dp88_randomWeather_Registrant'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?dp88_randomWeather_Registrant@@3V?$ScriptRegistrant@Vdp88_randomWeather@@@@A ; dp88_randomWeather_Registrant
	call	??1?$ScriptRegistrant@Vdp88_randomWeather@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fdp88_randomWeather_Registrant@@YAXXZ ENDP		; `dynamic atexit destructor for 'dp88_randomWeather_Registrant''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ??__Edp88_randomWeather_Registrant@@YAXXZ
text$yc	SEGMENT
??__Edp88_randomWeather_Registrant@@YAXXZ PROC		; `dynamic initializer for 'dp88_randomWeather_Registrant'', COMDAT

; 201  : );

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??_C@_0DME@NDLEMFCK@update_interval_min?$DN20?3int?0updat@
	push	OFFSET ??_C@_0BD@HJFJPFLD@dp88_randomWeather?$AA@
	mov	ecx, OFFSET ?dp88_randomWeather_Registrant@@3V?$ScriptRegistrant@Vdp88_randomWeather@@@@A ; dp88_randomWeather_Registrant
	call	??0?$ScriptRegistrant@Vdp88_randomWeather@@@@QAE@PBD0@Z ; ScriptRegistrant<dp88_randomWeather>::ScriptRegistrant<dp88_randomWeather>
	push	OFFSET ??__Fdp88_randomWeather_Registrant@@YAXXZ ; `dynamic atexit destructor for 'dp88_randomWeather_Registrant''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Edp88_randomWeather_Registrant@@YAXXZ ENDP		; `dynamic initializer for 'dp88_randomWeather_Registrant''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAXI@Z PROC ; ScriptRegistrant<dp88_randomWeather>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ScriptRegistrant@Vdp88_randomWeather@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAXI@Z ENDP ; ScriptRegistrant<dp88_randomWeather>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$ScriptRegistrant@Vdp88_randomWeather@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ScriptRegistrant@Vdp88_randomWeather@@@@UAE@XZ PROC ; ScriptRegistrant<dp88_randomWeather>::~ScriptRegistrant<dp88_randomWeather>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ScriptRegistrant@Vdp88_randomWeather@@@@UAE@XZ ENDP ; ScriptRegistrant<dp88_randomWeather>::~ScriptRegistrant<dp88_randomWeather>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Create@?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAVScriptImpClass@@XZ
_TEXT	SEGMENT
tv77 = -84						; size = 4
tv79 = -80						; size = 4
$T1 = -76						; size = 4
_script$ = -8						; size = 4
_this$ = -4						; size = 4
?Create@?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAVScriptImpClass@@XZ PROC ; ScriptRegistrant<dp88_randomWeather>::Create, COMDAT
; _this$ = ecx

; 552  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		T* script = new T;

	push	OFFSET ??_C@_0DD@MDLKPMAN@ScriptRegistrant?$DMclass?5dp88_rand@
	push	553					; 00000229H
	push	OFFSET ??_C@_0DD@KMKBFFOF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Create
	xor	ecx, ecx
	jne	SHORT $LN3@Create
	push	553					; 00000229H
	push	OFFSET ??_C@_1GG@OGNLNBPD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Create:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Create
$LN6@Create:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Create
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0dp88_randomWeather@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Create
$LN4@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Create:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Create:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _script$[ebp], ecx

; 554  : 		script->SetFactory(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _script$[ebp]
	call	?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ; ScriptImpClass::SetFactory

; 555  : 		script->Register_Auto_Save_Variables();

	mov	eax, DWORD PTR _script$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 556  : 		return script;

	mov	eax, DWORD PTR _script$[ebp]

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@?$ScriptRegistrant@Vdp88_randomWeather@@@@UAEPAVScriptImpClass@@XZ ENDP ; ScriptRegistrant<dp88_randomWeather>::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0?$ScriptRegistrant@Vdp88_randomWeather@@@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_param$ = 12						; size = 4
??0?$ScriptRegistrant@Vdp88_randomWeather@@@@QAE@PBD0@Z PROC ; ScriptRegistrant<dp88_randomWeather>::ScriptRegistrant<dp88_randomWeather>, COMDAT
; _this$ = ecx

; 549  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptFactory@@IAE@PBD0@Z		; ScriptFactory::ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ScriptRegistrant@Vdp88_randomWeather@@@@6B@

; 550  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$ScriptRegistrant@Vdp88_randomWeather@@@@QAE@PBD0@Z ENDP ; ScriptRegistrant<dp88_randomWeather>::ScriptRegistrant<dp88_randomWeather>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Head@?$SList@VBaseGameObj@@@@QBEPAV?$SLNode@VBaseGameObj@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Head@?$SList@VBaseGameObj@@@@QBEPAV?$SLNode@VBaseGameObj@@@@XZ PROC ; SList<BaseGameObj>::Head, COMDAT
; _this$ = ecx

; 313  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 		return HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Head@?$SList@VBaseGameObj@@@@QBEPAV?$SLNode@VBaseGameObj@@@@XZ ENDP ; SList<BaseGameObj>::Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVSoldierGameObj@@@@QAEAAPAVSoldierGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVSoldierGameObj@@@@QAEAAPAVSoldierGameObj@@H@Z PROC ; VectorClass<SoldierGameObj *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVSoldierGameObj@@@@QAEAAPAVSoldierGameObj@@H@Z ENDP ; VectorClass<SoldierGameObj *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vehiclegameobj.h
;	COMDAT ?Damage_Meshes_Update@VehicleGameObj@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Damage_Meshes_Update@VehicleGameObj@@QAEXXZ PROC	; VehicleGameObj::Damage_Meshes_Update, COMDAT
; _this$ = ecx

; 131  : 	void Damage_Meshes_Update() { DamageMeshesUpdate = true; DamageMeshesNetworkUpdate = true; Set_Object_Dirty_Bit(NetworkObjectClass::BIT_FREQUENT, true); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2455], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2566], 1
	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Damage_Meshes_Update@VehicleGameObj@@QAEXXZ ENDP	; VehicleGameObj::Damage_Meshes_Update
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vehiclegameobj.h
;	COMDAT ?Get_Occupant@VehicleGameObj@@QAEPAVSoldierGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_seat$ = 8						; size = 4
?Get_Occupant@VehicleGameObj@@QAEPAVSoldierGameObj@@H@Z PROC ; VehicleGameObj::Get_Occupant, COMDAT
; _this$ = ecx

; 123  : 	SoldierGameObj *Get_Occupant(int seat) {return SeatOccupants[seat];}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _seat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2476				; 000009acH
	call	??A?$VectorClass@PAVSoldierGameObj@@@@QAEAAPAVSoldierGameObj@@H@Z ; VectorClass<SoldierGameObj *>::operator[]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Occupant@VehicleGameObj@@QAEPAVSoldierGameObj@@H@Z ENDP ; VehicleGameObj::Get_Occupant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z PROC		; ArmorWarheadManager::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ArmorWarheadManager@@QAEAAV0@ABV0@@Z ENDP		; ArmorWarheadManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vehiclegameobjdef.h
;	COMDAT ?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ PROC		; VehicleGameObjDef::Get_Seat_Count, COMDAT
; _this$ = ecx

; 58   : 	int Get_Seat_Count() const {return NumSeats;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ ENDP		; VehicleGameObjDef::Get_Seat_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_CreateAttachedObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_CreateAttachedObject@@UAEPAXI@Z PROC		; dp88_CreateAttachedObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_CreateAttachedObject@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_CreateAttachedObject@@UAEPAXI@Z ENDP		; dp88_CreateAttachedObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_CreateAttachedObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_CreateAttachedObject@@UAE@XZ PROC		; dp88_CreateAttachedObject::~dp88_CreateAttachedObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_CreateAttachedObject@@UAE@XZ ENDP		; dp88_CreateAttachedObject::~dp88_CreateAttachedObject
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_CreateAttachedObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_CreateAttachedObject@@QAE@XZ PROC		; dp88_CreateAttachedObject::dp88_CreateAttachedObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_CreateAttachedObject@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_CreateAttachedObject@@QAE@XZ ENDP		; dp88_CreateAttachedObject::dp88_CreateAttachedObject
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
tv136 = -84						; size = 4
tv80 = -84						; size = 4
_driverCustom$1 = -16					; size = 4
_hasDriver$2 = -9					; size = 1
_spawnedObject$3 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_CreateAttachedObject::Custom, COMDAT
; _this$ = ecx

; 2747 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2748 :   if (type == CUSTOM_EVENT_VEHICLE_ENTERED || type == CUSTOM_EVENT_VEHICLE_EXITED)

	cmp	DWORD PTR _type$[ebp], 1000000028	; 3b9aca1cH
	je	SHORT $LN4@Custom
	cmp	DWORD PTR _type$[ebp], 1000000029	; 3b9aca1dH
	jne	$LN1@Custom
$LN4@Custom:

; 2749 :   {
; 2750 :     GameObject* spawnedObject = Commands->Find_Object(m_spawnedObjectId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _spawnedObject$3[ebp], eax

; 2751 :     if (NULL == spawnedObject)

	cmp	DWORD PTR _spawnedObject$3[ebp], 0
	jne	SHORT $LN3@Custom

; 2752 :     {
; 2753 :       return;

	jmp	$LN6@Custom
$LN3@Custom:

; 2754 :     }
; 2755 : 
; 2756 :     // Always sync the spawned objects team with our own
; 2757 :     Commands->Set_Player_Type(spawnedObject, Commands->Get_Player_Type(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _spawnedObject$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	add	esp, 8

; 2758 : 
; 2759 :     // Decide which custom, if any, to send
; 2760 :     bool hasDriver = NULL != Get_Vehicle_Driver(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Custom
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN9@Custom
$LN8@Custom:
	mov	DWORD PTR tv80[ebp], 0
$LN9@Custom:
	mov	cl, BYTE PTR tv80[ebp]
	mov	BYTE PTR _hasDriver$2[ebp], cl

; 2761 :     if (hasDriver != m_hasDriver)

	movzx	eax, BYTE PTR _hasDriver$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	cmp	eax, edx
	je	SHORT $LN1@Custom

; 2762 :     {
; 2763 :       m_hasDriver = hasDriver;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _hasDriver$2[ebp]
	mov	BYTE PTR [eax+32], cl

; 2764 : 
; 2765 :       int driverCustom = (m_hasDriver) ? Get_Int_Parameter("DriverEnterCustom") : Get_Int_Parameter("DriverExitCustom");

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN10@Custom
	push	OFFSET ??_C@_0BC@MBLJKBGD@DriverEnterCustom?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN11@Custom
$LN10@Custom:
	push	OFFSET ??_C@_0BB@MAHEBJLL@DriverExitCustom?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv136[ebp], eax
$LN11@Custom:
	mov	edx, DWORD PTR tv136[ebp]
	mov	DWORD PTR _driverCustom$1[ebp], edx

; 2766 :       if (0 != driverCustom)

	cmp	DWORD PTR _driverCustom$1[ebp], 0
	je	SHORT $LN1@Custom

; 2767 :       {
; 2768 :         Commands->Send_Custom_Event(obj, spawnedObject, driverCustom, 0, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _driverCustom$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _spawnedObject$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 20					; 00000014H
$LN1@Custom:
$LN6@Custom:

; 2769 :       }
; 2770 :     }
; 2771 :   }
; 2772 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_CreateAttachedObject::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Killed@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_spawnedObject$1 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_CreateAttachedObject::Killed, COMDAT
; _this$ = ecx

; 2731 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2732 :   if (NULL != m_spawnedObjectId)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@Killed

; 2733 :   {
; 2734 :     GameObject* spawnedObject = Commands->Find_Object(m_spawnedObjectId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _spawnedObject$1[ebp], eax

; 2735 :     if (NULL != spawnedObject)

	cmp	DWORD PTR _spawnedObject$1[ebp], 0
	je	SHORT $LN2@Killed

; 2736 :     {
; 2737 :       Commands->Destroy_Object(spawnedObject);

	mov	eax, DWORD PTR _spawnedObject$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN2@Killed:

; 2738 :     }
; 2739 :   }
; 2740 : 
; 2741 :   m_spawnedObjectId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2742 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_CreateAttachedObject::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv227 = -80						; size = 4
tv69 = -80						; size = 4
_driverCustom$ = -12					; size = 4
_spawnedObject$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_CreateAttachedObject::Created, COMDAT
; _this$ = ecx

; 2687 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2688 :   m_spawnedObjectId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2689 :   m_hasDriver = NULL != Get_Vehicle_Driver(obj);  // In theory, might not be attached at vehicle creation :) 

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Created
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN9@Created
$LN8@Created:
	mov	DWORD PTR tv69[ebp], 0
$LN9@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv69[ebp]
	mov	BYTE PTR [ecx+32], dl

; 2690 : 
; 2691 :   // Spawn the new object
; 2692 :   GameObject* spawnedObject = Commands->Create_Object_At_Bone(obj, Get_Parameter("Preset"), Get_Parameter("Bone"));

	push	OFFSET ??_C@_04CCGIJNFG@Bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	push	OFFSET ??_C@_06CKLLCHIK@Preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _spawnedObject$[ebp], eax

; 2693 :   if (NULL == spawnedObject)

	cmp	DWORD PTR _spawnedObject$[ebp], 0
	jne	SHORT $LN5@Created

; 2694 :   {
; 2695 :     Console_Output("[%d:%s:%s] Critical Error: Failed to create an instance of the preset %s. Destroying script...\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name(), Get_Parameter("Preset"));

	push	OFFSET ??_C@_06CKLLCHIK@Preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0GA@ICJIHHN@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Faile@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 20					; 00000014H

; 2696 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 2697 :     return;

	jmp	$LN6@Created
$LN5@Created:

; 2698 :   }
; 2699 : 
; 2700 :   // Attach it to the parent
; 2701 :   Commands->Attach_To_Object_Bone(spawnedObject, obj, Get_Parameter("Bone"));

	push	OFFSET ??_C@_04CCGIJNFG@Bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _spawnedObject$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+572]
	call	eax
	add	esp, 12					; 0000000cH

; 2702 :   m_spawnedObjectId = Commands->Get_ID(spawnedObject);

	mov	eax, DWORD PTR _spawnedObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 2703 : 
; 2704 :   // Configure linking features (health & veterancy)
; 2705 :   if (1 == Get_Int_Parameter("EnableHealthLink"))

	push	OFFSET ??_C@_0BB@EAABGGCB@EnableHealthLink?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jne	SHORT $LN4@Created

; 2706 :   {
; 2707 :     Attach_Script_Once_V(spawnedObject, "dp88_linkHealth", "%d", Commands->Get_ID(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET ??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@
	mov	eax, DWORD PTR _spawnedObject$[ebp]
	push	eax
	call	?Attach_Script_Once_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_Once_V
	add	esp, 16					; 00000010H
$LN4@Created:

; 2708 :   }
; 2709 :   if (1 == Get_Int_Parameter("EnableVeterancyLink"))

	push	OFFSET ??_C@_0BE@GODCMMCE@EnableVeterancyLink?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jne	SHORT $LN3@Created

; 2710 :   {
; 2711 :     Attach_Script_Once_V(spawnedObject, "dp88_linkVetPoints", "%d", Commands->Get_ID(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET ??_C@_0BD@DMPJMKMH@dp88_linkVetPoints?$AA@
	mov	eax, DWORD PTR _spawnedObject$[ebp]
	push	eax
	call	?Attach_Script_Once_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_Once_V
	add	esp, 16					; 00000010H
$LN3@Created:

; 2712 :   }
; 2713 : 
; 2714 :   // Configure AI visibility
; 2715 :   if (0 == Get_Int_Parameter("VisibleToAI"))

	push	OFFSET ??_C@_0M@OJJPOFPO@VisibleToAI?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN2@Created

; 2716 :   {
; 2717 :     Commands->Set_Is_Visible(spawnedObject, false);

	push	0
	mov	eax, DWORD PTR _spawnedObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+624]
	call	edx
	add	esp, 8
$LN2@Created:

; 2718 :   }
; 2719 :     
; 2720 :   // If driver customrs are enabled, send the appropriate custom based on whether we have a driver
; 2721 :   int driverCustom = (m_hasDriver) ? Get_Int_Parameter("DriverEnterCustom") : Get_Int_Parameter("DriverExitCustom");

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN10@Created
	push	OFFSET ??_C@_0BC@MBLJKBGD@DriverEnterCustom?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv227[ebp], eax
	jmp	SHORT $LN11@Created
$LN10@Created:
	push	OFFSET ??_C@_0BB@MAHEBJLL@DriverExitCustom?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv227[ebp], eax
$LN11@Created:
	mov	edx, DWORD PTR tv227[ebp]
	mov	DWORD PTR _driverCustom$[ebp], edx

; 2722 :   if (0 != driverCustom)

	cmp	DWORD PTR _driverCustom$[ebp], 0
	je	SHORT $LN1@Created

; 2723 :   {
; 2724 :     Commands->Send_Custom_Event(obj, spawnedObject, driverCustom, 0, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _driverCustom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _spawnedObject$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 20					; 00000014H
$LN1@Created:
$LN6@Created:

; 2725 :   }
; 2726 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_CreateAttachedObject@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_CreateAttachedObject::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_RegenerateHitpoints@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_RegenerateHitpoints@@UAEPAXI@Z PROC		; dp88_RegenerateHitpoints::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_RegenerateHitpoints@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_RegenerateHitpoints@@UAEPAXI@Z ENDP		; dp88_RegenerateHitpoints::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_RegenerateHitpoints@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_RegenerateHitpoints@@UAE@XZ PROC		; dp88_RegenerateHitpoints::~dp88_RegenerateHitpoints, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_RegenerateHitpoints@@UAE@XZ ENDP		; dp88_RegenerateHitpoints::~dp88_RegenerateHitpoints
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_RegenerateHitpoints@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_RegenerateHitpoints@@QAE@XZ PROC		; dp88_RegenerateHitpoints::dp88_RegenerateHitpoints, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_RegenerateHitpoints@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_RegenerateHitpoints@@QAE@XZ ENDP		; dp88_RegenerateHitpoints::dp88_RegenerateHitpoints
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?ApplyNonWarheadRepairs@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@M_N1@Z
_TEXT	SEGMENT
tv190 = -96						; size = 4
tv163 = -96						; size = 4
tv134 = -92						; size = 4
tv80 = -92						; size = 4
tv182 = -88						; size = 4
tv155 = -88						; size = 4
_arepair$1 = -20					; size = 4
_armour$2 = -16						; size = 4
_hrepair$3 = -12					; size = 4
_health$4 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_amount$ = 12						; size = 4
_bHealth$ = 16						; size = 1
_bArmour$ = 20						; size = 1
?ApplyNonWarheadRepairs@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@M_N1@Z PROC ; dp88_RegenerateHitpoints::ApplyNonWarheadRepairs, COMDAT
; _this$ = ecx

; 2618 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2619 :   if (bHealth)

	movzx	eax, BYTE PTR _bHealth$[ebp]
	test	eax, eax
	je	$LN2@ApplyNonWa

; 2620 :   {
; 2621 :     float health = Commands->Get_Health(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _health$4[ebp]

; 2622 :     float hrepair = min(amount, Commands->Get_Max_Health(obj) - health);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+224]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv155[ebp]
	movss	xmm0, DWORD PTR tv155[ebp]
	subss	xmm0, DWORD PTR _health$4[ebp]
	comiss	xmm0, DWORD PTR _amount$[ebp]
	jbe	SHORT $LN5@ApplyNonWa
	movss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR tv80[ebp], xmm0
	jmp	SHORT $LN6@ApplyNonWa
$LN5@ApplyNonWa:
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+224]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	subss	xmm0, DWORD PTR _health$4[ebp]
	movss	DWORD PTR tv80[ebp], xmm0
$LN6@ApplyNonWa:
	movss	xmm0, DWORD PTR tv80[ebp]
	movss	DWORD PTR _hrepair$3[ebp], xmm0

; 2623 :     Commands->Set_Health(obj, health + hrepair);

	movss	xmm0, DWORD PTR _health$4[ebp]
	addss	xmm0, DWORD PTR _hrepair$3[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	add	esp, 8

; 2624 :     amount -= hrepair;

	movss	xmm0, DWORD PTR _amount$[ebp]
	subss	xmm0, DWORD PTR _hrepair$3[ebp]
	movss	DWORD PTR _amount$[ebp], xmm0
$LN2@ApplyNonWa:

; 2625 :   }
; 2626 : 
; 2627 :   if (bArmour)

	movzx	eax, BYTE PTR _bArmour$[ebp]
	test	eax, eax
	je	$LN1@ApplyNonWa

; 2628 :   {
; 2629 :     float armour = Commands->Get_Shield_Strength(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _armour$2[ebp]

; 2630 :     float arepair = min(amount, Commands->Get_Max_Shield_Strength(obj) - armour);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+236]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv182[ebp]
	movss	xmm0, DWORD PTR tv182[ebp]
	subss	xmm0, DWORD PTR _armour$2[ebp]
	comiss	xmm0, DWORD PTR _amount$[ebp]
	jbe	SHORT $LN7@ApplyNonWa
	movss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR tv134[ebp], xmm0
	jmp	SHORT $LN8@ApplyNonWa
$LN7@ApplyNonWa:
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+236]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv190[ebp]
	movss	xmm0, DWORD PTR tv190[ebp]
	subss	xmm0, DWORD PTR _armour$2[ebp]
	movss	DWORD PTR tv134[ebp], xmm0
$LN8@ApplyNonWa:
	movss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR _arepair$1[ebp], xmm0

; 2631 :     Commands->Set_Shield_Strength(obj, armour + arepair);

	movss	xmm0, DWORD PTR _armour$2[ebp]
	addss	xmm0, DWORD PTR _arepair$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	add	esp, 8
$LN1@ApplyNonWa:

; 2632 :   }
; 2633 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ApplyNonWarheadRepairs@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@M_N1@Z ENDP ; dp88_RegenerateHitpoints::ApplyNonWarheadRepairs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z
_TEXT	SEGMENT
tv93 = -92						; size = 4
tv80 = -92						; size = 4
tv136 = -88						; size = 4
tv87 = -88						; size = 4
tv74 = -88						; size = 4
_amount$1 = -20						; size = 4
_regenCap$2 = -16					; size = 4
_maxHitpoints$ = -12					; size = 4
_hitpoints$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_bHealth$ = 12						; size = 1
_bArmour$ = 16						; size = 1
?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z PROC ; dp88_RegenerateHitpoints::RegenObject, COMDAT
; _this$ = ecx

; 2583 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2584 :   if (NULL == obj || !bHealth && !bArmour)

	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN6@RegenObjec
	movzx	eax, BYTE PTR _bHealth$[ebp]
	test	eax, eax
	jne	SHORT $LN7@RegenObjec
	movzx	eax, BYTE PTR _bArmour$[ebp]
	test	eax, eax
	jne	SHORT $LN7@RegenObjec
$LN6@RegenObjec:

; 2585 :     return;

	jmp	$LN8@RegenObjec
$LN7@RegenObjec:

; 2586 : 
; 2587 :   float hitpoints = (bHealth ? Commands->Get_Health(obj) : 0.0f) + (bArmour ? Commands->Get_Shield_Strength(obj) : 0.0f);

	movzx	eax, BYTE PTR _bHealth$[ebp]
	test	eax, eax
	je	SHORT $LN10@RegenObjec
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+220]
	call	eax
	add	esp, 4
	fstp	DWORD PTR tv74[ebp]
	jmp	SHORT $LN11@RegenObjec
$LN10@RegenObjec:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv74[ebp], xmm0
$LN11@RegenObjec:
	movzx	ecx, BYTE PTR _bArmour$[ebp]
	test	ecx, ecx
	je	SHORT $LN12@RegenObjec
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+232]
	call	ecx
	add	esp, 4
	fstp	DWORD PTR tv80[ebp]
	jmp	SHORT $LN13@RegenObjec
$LN12@RegenObjec:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv80[ebp], xmm0
$LN13@RegenObjec:
	movss	xmm0, DWORD PTR tv74[ebp]
	addss	xmm0, DWORD PTR tv80[ebp]
	movss	DWORD PTR _hitpoints$[ebp], xmm0

; 2588 :   float maxHitpoints = (bHealth ? Commands->Get_Max_Health(obj) : 0.0f) + (bArmour ? Commands->Get_Max_Shield_Strength(obj) : 0.0f);

	movzx	eax, BYTE PTR _bHealth$[ebp]
	test	eax, eax
	je	SHORT $LN14@RegenObjec
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+224]
	call	eax
	add	esp, 4
	fstp	DWORD PTR tv87[ebp]
	jmp	SHORT $LN15@RegenObjec
$LN14@RegenObjec:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv87[ebp], xmm0
$LN15@RegenObjec:
	movzx	ecx, BYTE PTR _bArmour$[ebp]
	test	ecx, ecx
	je	SHORT $LN16@RegenObjec
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+236]
	call	ecx
	add	esp, 4
	fstp	DWORD PTR tv93[ebp]
	jmp	SHORT $LN17@RegenObjec
$LN16@RegenObjec:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv93[ebp], xmm0
$LN17@RegenObjec:
	movss	xmm0, DWORD PTR tv87[ebp]
	addss	xmm0, DWORD PTR tv93[ebp]
	movss	DWORD PTR _maxHitpoints$[ebp], xmm0

; 2589 : 
; 2590 :   if (hitpoints < maxHitpoints)

	movss	xmm0, DWORD PTR _maxHitpoints$[ebp]
	comiss	xmm0, DWORD PTR _hitpoints$[ebp]
	jbe	$LN1@RegenObjec

; 2591 :   {
; 2592 :     float regenCap = (maxHitpoints*m_maxPercent);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxHitpoints$[ebp]
	mulss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _regenCap$2[ebp], xmm0

; 2593 :     float amount = min(m_amount, regenCap);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _regenCap$2[ebp]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN18@RegenObjec
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR tv136[ebp], xmm0
	jmp	SHORT $LN19@RegenObjec
$LN18@RegenObjec:
	movss	xmm0, DWORD PTR _regenCap$2[ebp]
	movss	DWORD PTR tv136[ebp], xmm0
$LN19@RegenObjec:
	movss	xmm0, DWORD PTR tv136[ebp]
	movss	DWORD PTR _amount$1[ebp], xmm0

; 2594 : 
; 2595 :     if (hitpoints < regenCap)

	movss	xmm0, DWORD PTR _regenCap$2[ebp]
	comiss	xmm0, DWORD PTR _hitpoints$[ebp]
	jbe	$LN1@RegenObjec

; 2596 :     {
; 2597 :       if (m_warheadId != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], -1
	je	SHORT $LN3@RegenObjec

; 2598 :       {
; 2599 :         Commands->Apply_Damage(obj, amount, ArmorWarheadManager::Get_Warhead_Name(m_warheadId), NULL);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?Get_Warhead_Name@ArmorWarheadManager@@SAPBDI@Z ; ArmorWarheadManager::Get_Warhead_Name
	add	esp, 4
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _amount$1[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+616]
	call	ecx
	add	esp, 16					; 00000010H

; 2600 :       }
; 2601 :       else

	jmp	SHORT $LN2@RegenObjec
$LN3@RegenObjec:

; 2602 :       {
; 2603 :         ApplyNonWarheadRepairs(obj, amount, bHealth, bArmour);

	movzx	eax, BYTE PTR _bArmour$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bHealth$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _amount$1[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyNonWarheadRepairs@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@M_N1@Z ; dp88_RegenerateHitpoints::ApplyNonWarheadRepairs
$LN2@RegenObjec:

; 2604 :       }
; 2605 : 
; 2606 :       // Trigger update for built-in engine damage bones
; 2607 :       if (obj->As_VehicleGameObj())

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN1@RegenObjec

; 2608 :       {
; 2609 :         obj->As_VehicleGameObj()->Damage_Meshes_Update();

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	ecx, eax
	call	?Damage_Meshes_Update@VehicleGameObj@@QAEXXZ ; VehicleGameObj::Damage_Meshes_Update
$LN1@RegenObjec:
$LN8@RegenObjec:

; 2610 :       }
; 2611 :     }
; 2612 :   }
; 2613 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z ENDP ; dp88_RegenerateHitpoints::RegenObject
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z PROC	; dp88_RegenerateHitpoints::IsModeEnabled, COMDAT
; _this$ = ecx

; 2518 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2519 :   return (m_mode & mode) == mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, DWORD PTR _mode$[ebp]
	cmp	ecx, DWORD PTR _mode$[ebp]
	jne	SHORT $LN3@IsModeEnab
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsModeEnab
$LN3@IsModeEnab:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsModeEnab:
	mov	al, BYTE PTR tv67[ebp]

; 2520 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ENDP	; dp88_RegenerateHitpoints::IsModeEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_RegenerateHitpoints::Custom, COMDAT
; _this$ = ecx

; 2646 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2647 :   if ( type == CUSTOM_VETERANCY_PROMOTED )

	cmp	DWORD PTR _type$[ebp], -637468671	; da010001H
	jne	SHORT $LN1@Custom

; 2648 :   {
; 2649 :     if (2==param)

	cmp	DWORD PTR _param$[ebp], 2
	jne	SHORT $LN4@Custom

; 2650 :       m_amount = Get_Float_Parameter("Hitpoints_Elite");

	push	OFFSET ??_C@_0BA@NJCFNLMO@Hitpoints_Elite?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+44]
	jmp	SHORT $LN1@Custom
$LN4@Custom:

; 2651 :     else if (1==param)

	cmp	DWORD PTR _param$[ebp], 1
	jne	SHORT $LN2@Custom

; 2652 :       m_amount = Get_Float_Parameter("Hitpoints_Veteran");

	push	OFFSET ??_C@_0BC@LOLJHMMN@Hitpoints_Veteran?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+44]

; 2653 :     else

	jmp	SHORT $LN1@Custom
$LN2@Custom:

; 2654 :       m_amount = Get_Float_Parameter("Hitpoints");

	push	OFFSET ??_C@_09EEDJGKFJ@Hitpoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+44]
$LN1@Custom:

; 2655 :   }
; 2656 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_RegenerateHitpoints::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Damaged@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_RegenerateHitpoints::Damaged, COMDAT
; _this$ = ecx

; 2638 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2639 :   if (amount > 0.0f)

	movss	xmm0, DWORD PTR _amount$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@Damaged

; 2640 :     m_lastDamage = time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
$LN1@Damaged:

; 2641 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_RegenerateHitpoints::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv251 = -104						; size = 8
tv248 = -96						; size = 8
tv227 = -92						; size = 4
tv143 = -92						; size = 4
_i$1 = -24						; size = 4
_seats$2 = -20						; size = 4
_bPassengersArmour$3 = -15				; size = 1
_bPassengersHealth$4 = -14				; size = 1
_bIsPilot$5 = -13					; size = 1
_driver$6 = -12						; size = 4
_vehicle$7 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_RegenerateHitpoints::Timer_Expired, COMDAT
; _this$ = ecx

; 2525 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2526 :   // Only process this if we are not dead and are not inside the combat timeout
; 2527 :   if (Commands->Get_Health(obj) > 0.0f && m_amount > 0 && m_lastDamageTimeout <= time(NULL)-m_lastDamage )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv227[ebp]
	movss	xmm0, DWORD PTR tv227[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN1@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN1@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	cdq
	mov	esi, eax
	mov	edi, edx
	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+32]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv248[ebp], esi
	mov	DWORD PTR tv248[ebp+4], edi
	mov	DWORD PTR tv251[ebp], eax
	mov	DWORD PTR tv251[ebp+4], edx
	mov	edx, DWORD PTR tv248[ebp+4]
	cmp	edx, DWORD PTR tv251[ebp+4]
	jg	$LN1@Timer_Expi
	jl	SHORT $LN16@Timer_Expi
	mov	eax, DWORD PTR tv248[ebp]
	cmp	eax, DWORD PTR tv251[ebp]
	ja	$LN1@Timer_Expi
$LN16@Timer_Expi:

; 2528 :   {
; 2529 :     // Repair self
; 2530 :     RegenObject(obj, IsModeEnabled(MODE_HEALTH), IsModeEnabled(MODE_ARMOUR));

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	movzx	eax, al
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z ; dp88_RegenerateHitpoints::RegenObject

; 2531 : 
; 2532 :     // Handle soldier-specific modes (piloted / occupied vehicle)
; 2533 :     if (obj->As_SoldierGameObj())

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	je	$LN7@Timer_Expi

; 2534 :     {
; 2535 :       GameObject* vehicle = Get_Vehicle(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle
	add	esp, 4
	mov	DWORD PTR _vehicle$7[ebp], eax

; 2536 : 
; 2537 :       if (NULL != vehicle)

	cmp	DWORD PTR _vehicle$7[ebp], 0
	je	$LN7@Timer_Expi

; 2538 :       {
; 2539 :         GameObject* driver = Get_Vehicle_Driver(vehicle);

	mov	eax, DWORD PTR _vehicle$7[ebp]
	push	eax
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	mov	DWORD PTR _driver$6[ebp], eax

; 2540 :         bool bIsPilot = NULL != driver && driver->Get_ID() == obj->Get_ID();

	cmp	DWORD PTR _driver$6[ebp], 0
	je	SHORT $LN14@Timer_Expi
	mov	ecx, DWORD PTR _driver$6[ebp]
	call	?Get_ID@BaseGameObj@@QBEHXZ		; BaseGameObj::Get_ID
	mov	esi, eax
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_ID@BaseGameObj@@QBEHXZ		; BaseGameObj::Get_ID
	cmp	esi, eax
	jne	SHORT $LN14@Timer_Expi
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN15@Timer_Expi
$LN14@Timer_Expi:
	mov	DWORD PTR tv143[ebp], 0
$LN15@Timer_Expi:
	mov	al, BYTE PTR tv143[ebp]
	mov	BYTE PTR _bIsPilot$5[ebp], al

; 2541 : 
; 2542 :         // Repair piloted vehicle
; 2543 :         if (bIsPilot)

	movzx	eax, BYTE PTR _bIsPilot$5[ebp]
	test	eax, eax
	je	SHORT $LN8@Timer_Expi

; 2544 :         {
; 2545 :           RegenObject(vehicle, IsModeEnabled(MODE_PILOTED_HEALTH), IsModeEnabled(MODE_PILOTED_ARMOUR));

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	movzx	eax, al
	push	eax
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _vehicle$7[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z ; dp88_RegenerateHitpoints::RegenObject

; 2546 :         }
; 2547 : 
; 2548 :         // Repair occupied vehicle
; 2549 :         else

	jmp	SHORT $LN7@Timer_Expi
$LN8@Timer_Expi:

; 2550 :         {
; 2551 :           RegenObject(vehicle, IsModeEnabled(MODE_OCCUPIED_HEALTH), IsModeEnabled(MODE_OCCUPIED_ARMOUR));

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	movzx	eax, al
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _vehicle$7[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z ; dp88_RegenerateHitpoints::RegenObject
$LN7@Timer_Expi:

; 2552 :         }
; 2553 :       }
; 2554 :     }
; 2555 : 
; 2556 :     // Handle vehicle-specific modes (driver / passengers)
; 2557 :     if (obj->As_VehicleGameObj())

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	$LN1@Timer_Expi

; 2558 :     {
; 2559 :       // Repair driver
; 2560 :       RegenObject(Get_Vehicle_Driver(obj), IsModeEnabled(MODE_DRIVER_HEALTH), IsModeEnabled(MODE_DRIVER_ARMOUR));

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	movzx	eax, al
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?Get_Vehicle_Driver@@YAPAVScriptableGameObj@@PAV1@@Z ; Get_Vehicle_Driver
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z ; dp88_RegenerateHitpoints::RegenObject

; 2561 :       
; 2562 :       // Repair passengers
; 2563 :       bool bPassengersHealth = IsModeEnabled(MODE_PASSENGERS_HEALTH);

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	mov	BYTE PTR _bPassengersHealth$4[ebp], al

; 2564 :       bool bPassengersArmour = IsModeEnabled(MODE_PASSENGERS_ARMOUR);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsModeEnabled@dp88_RegenerateHitpoints@@IAE_NH@Z ; dp88_RegenerateHitpoints::IsModeEnabled
	mov	BYTE PTR _bPassengersArmour$3[ebp], al

; 2565 : 
; 2566 :       if (bPassengersHealth || bPassengersArmour)

	movzx	eax, BYTE PTR _bPassengersHealth$4[ebp]
	test	eax, eax
	jne	SHORT $LN4@Timer_Expi
	movzx	eax, BYTE PTR _bPassengersArmour$3[ebp]
	test	eax, eax
	je	SHORT $LN1@Timer_Expi
$LN4@Timer_Expi:

; 2567 :       {
; 2568 :         int seats = Get_Vehicle_Seat_Count(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Seat_Count@@YAHPAVScriptableGameObj@@@Z ; Get_Vehicle_Seat_Count
	add	esp, 4
	mov	DWORD PTR _seats$2[ebp], eax

; 2569 :         for (int i = 1; i < seats; ++i)

	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN3@Timer_Expi
$LN2@Timer_Expi:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Timer_Expi:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _seats$2[ebp]
	jge	SHORT $LN1@Timer_Expi

; 2570 :         {
; 2571 :           RegenObject(Get_Vehicle_Occupant(obj, i), bPassengersHealth, bPassengersArmour);

	movzx	eax, BYTE PTR _bPassengersArmour$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bPassengersHealth$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Vehicle_Occupant@@YAPAVScriptableGameObj@@PAV1@H@Z ; Get_Vehicle_Occupant
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegenObject@dp88_RegenerateHitpoints@@IAEXPAVScriptableGameObj@@_N1@Z ; dp88_RegenerateHitpoints::RegenObject

; 2572 :         }

	jmp	SHORT $LN2@Timer_Expi
$LN1@Timer_Expi:

; 2573 :       }
; 2574 :     }
; 2575 :   }
; 2576 : 
; 2577 :   Commands->Start_Timer(obj, this, m_interval, TIMER_MISC_TICK);

	push	-620756991				; db000001H
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	add	esp, 16					; 00000010H

; 2578 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_RegenerateHitpoints::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv79 = -76						; size = 4
_warhead$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_RegenerateHitpoints::Created, COMDAT
; _this$ = ecx

; 2497 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2498 :   m_mode = (Get_Parameter_Count() >= 8) ? Get_Int_Parameter("Mode") : MODE_HEALTH + MODE_ARMOUR;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter_Count@ScriptImpClass@@QAEHXZ ; ScriptImpClass::Get_Parameter_Count
	cmp	eax, 8
	jl	SHORT $LN4@Created
	push	OFFSET ??_C@_04KNKPIPFB@Mode?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN5@Created
$LN4@Created:
	mov	DWORD PTR tv79[ebp], 3
$LN5@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [eax+40], ecx

; 2499 :   m_amount = Get_Float_Parameter("Hitpoints");

	push	OFFSET ??_C@_09EEDJGKFJ@Hitpoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+44]

; 2500 :   m_maxPercent = Get_Int_Parameter("Max_Percent")/100.0f;

	push	OFFSET ??_C@_0M@OCPLOBIH@Max_Percent?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+52], xmm0

; 2501 :   m_interval = (float)Get_Int_Parameter("Interval");

	push	OFFSET ??_C@_08KDKDEPAG@Interval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 2502 : 
; 2503 :   m_lastDamage = time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx

; 2504 :   m_lastDamageTimeout = Get_Int_Parameter("Damage_Timeout");

	push	OFFSET ??_C@_0P@DAENDFJJ@Damage_Timeout?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 2505 : 
; 2506 :   m_warheadId = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], -1

; 2507 : 
; 2508 :   const char* warhead = Get_Parameter("Warhead");

	push	OFFSET ??_C@_07EDCLAFNL@Warhead?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR _warhead$[ebp], eax

; 2509 :   if (Is_Valid_Warhead_Type(warhead))

	mov	eax, DWORD PTR _warhead$[ebp]
	push	eax
	call	?Is_Valid_Warhead_Type@@YA_NPBD@Z	; Is_Valid_Warhead_Type
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Created

; 2510 :     m_warheadId = ArmorWarheadManager::Get_Warhead_Type(warhead);

	mov	eax, DWORD PTR _warhead$[ebp]
	push	eax
	call	?Get_Warhead_Type@ArmorWarheadManager@@SAIPBD@Z ; ArmorWarheadManager::Get_Warhead_Type
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN1@Created:

; 2511 : 
; 2512 :   Commands->Start_Timer(obj, this, m_interval, TIMER_MISC_TICK);

	push	-620756991				; db000001H
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	add	esp, 16					; 00000010H

; 2513 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_RegenerateHitpoints@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_RegenerateHitpoints::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Set_Team_On_Custom@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Set_Team_On_Custom@@UAEPAXI@Z PROC		; dp88_Set_Team_On_Custom::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Set_Team_On_Custom@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Set_Team_On_Custom@@UAEPAXI@Z ENDP		; dp88_Set_Team_On_Custom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Set_Team_On_Custom@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Set_Team_On_Custom@@UAE@XZ PROC			; dp88_Set_Team_On_Custom::~dp88_Set_Team_On_Custom, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Set_Team_On_Custom@@UAE@XZ ENDP			; dp88_Set_Team_On_Custom::~dp88_Set_Team_On_Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Set_Team_On_Custom@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Set_Team_On_Custom@@QAE@XZ PROC			; dp88_Set_Team_On_Custom::dp88_Set_Team_On_Custom, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Set_Team_On_Custom@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Set_Team_On_Custom@@QAE@XZ ENDP			; dp88_Set_Team_On_Custom::dp88_Set_Team_On_Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_Set_Team_On_Custom@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_Set_Team_On_Custom@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_Set_Team_On_Custom::Custom, COMDAT
; _this$ = ecx

; 2459 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2460 :   if ( type == Get_Int_Parameter("Message") )

	push	OFFSET ??_C@_07BEIHKDLJ@Message?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	DWORD PTR _type$[ebp], eax
	jne	SHORT $LN1@Custom

; 2461 :   {
; 2462 :     if ( param >= 0 && param <= 2 && param != Get_Object_Type(pObj) )

	cmp	DWORD PTR _param$[ebp], 0
	jl	SHORT $LN1@Custom
	cmp	DWORD PTR _param$[ebp], 2
	jg	SHORT $LN1@Custom
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	DWORD PTR _param$[ebp], eax
	je	SHORT $LN1@Custom

; 2463 :     {
; 2464 :       if ( Find_Script_On_Object(pObj, "dp88_buildingScripts_controller") != NULL )

	push	OFFSET ??_C@_0CA@DMKHPCHF@dp88_buildingScripts_controller?$AA@
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@Custom

; 2465 :       {
; 2466 :         Commands->Send_Custom_Event(pObj, pObj, CUSTOM_BUILDINGSCRIPTS_BUILDINGCAPTURED, param, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	push	-637403128				; da020008H
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 20					; 00000014H

; 2467 :       }
; 2468 :       else

	jmp	SHORT $LN1@Custom
$LN2@Custom:

; 2469 :       {
; 2470 :         Set_Object_Type(pObj, param);

	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	?Set_Object_Type@@YAXPAVScriptableGameObj@@H@Z ; Set_Object_Type
	add	esp, 8
$LN1@Custom:

; 2471 :       }
; 2472 :     }
; 2473 :   }
; 2474 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_Set_Team_On_Custom@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_Set_Team_On_Custom::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Create_Object_Cinematic@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Create_Object_Cinematic@@UAEPAXI@Z PROC	; dp88_Create_Object_Cinematic::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Create_Object_Cinematic@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Create_Object_Cinematic@@UAEPAXI@Z ENDP	; dp88_Create_Object_Cinematic::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Create_Object_Cinematic@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Create_Object_Cinematic@@UAE@XZ PROC		; dp88_Create_Object_Cinematic::~dp88_Create_Object_Cinematic, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Create_Object_Cinematic@@UAE@XZ ENDP		; dp88_Create_Object_Cinematic::~dp88_Create_Object_Cinematic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Create_Object_Cinematic@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Create_Object_Cinematic@@QAE@XZ PROC		; dp88_Create_Object_Cinematic::dp88_Create_Object_Cinematic, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Create_Object_Cinematic@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Create_Object_Cinematic@@QAE@XZ ENDP		; dp88_Create_Object_Cinematic::dp88_Create_Object_Cinematic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Create_Object@dp88_Create_Object_Cinematic@@IAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
$T1 = -244						; size = 12
$T2 = -232						; size = 12
_vehicle$ = -156					; size = 4
_cinematic$ = -152					; size = 4
_cinematic_params$ = -148				; size = 128
_facing$ = -20						; size = 4
_position$ = -16					; size = 12
_this$ = -4						; size = 4
_pobj$ = 8						; size = 4
_pOwner$ = 12						; size = 4
?Create_Object@dp88_Create_Object_Cinematic@@IAEXPAVScriptableGameObj@@0@Z PROC ; dp88_Create_Object_Cinematic::Create_Object, COMDAT
; _this$ = ecx

; 2410 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2411 :   // Mostly cloned from SH_CinematicVehicleFactoryBypass::PurchaseMonitor()
; 2412 :   Vector3 position = Commands->Get_Position(pOwner);

	mov	eax, DWORD PTR _pOwner$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _position$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 2413 :   position += Get_Vector3_Parameter("Offset");

	push	OFFSET ??_C@_06GEMKPBPA@Offset?$AA@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Vector3_Parameter@ScriptImpClass@@QAE?AVVector3@@PBD@Z ; ScriptImpClass::Get_Vector3_Parameter
	push	eax
	lea	ecx, DWORD PTR _position$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 2414 :   float facing = Commands->Get_Facing(pOwner);

	mov	eax, DWORD PTR _pOwner$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _facing$[ebp]

; 2415 : 
; 2416 :   // create cinematic
; 2417 :   char cinematic_params[128];
; 2418 :   sprintf_s(cinematic_params, "%s,1", Get_Parameter("Cinematic"));

	push	OFFSET ??_C@_09HIGEHAGH@Cinematic?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	push	OFFSET ??_C@_04LOHMBPNC@?$CFs?01?$AA@
	lea	eax, DWORD PTR _cinematic_params$[ebp]
	push	eax
	call	??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ	; sprintf_s<128>
	add	esp, 12					; 0000000cH

; 2419 : 
; 2420 :   auto cinematic = Commands->Create_Object("Invisible_Object", position);

	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@NHJNEILC@Invisible_Object?$AA@
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _cinematic$[ebp], eax

; 2421 :   Commands->Set_Facing(cinematic, facing);

	push	ecx
	movss	xmm0, DWORD PTR _facing$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _cinematic$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8

; 2422 :   Commands->Attach_Script(cinematic, "JFW_Cinematic", cinematic_params);

	lea	eax, DWORD PTR _cinematic_params$[ebp]
	push	eax
	push	OFFSET ??_C@_0O@GHBGJIKL@JFW_Cinematic?$AA@
	mov	ecx, DWORD PTR _cinematic$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+120]
	call	eax
	add	esp, 12					; 0000000cH

; 2423 : 
; 2424 :   // create vehicle at delivery site
; 2425 :   GameObject* vehicle = Commands->Create_Object(Get_Parameter("Preset"), position);

	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	push	OFFSET ??_C@_06CKLLCHIK@Preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _vehicle$[ebp], eax

; 2426 :   Commands->Set_Facing(vehicle, facing);

	push	ecx
	movss	xmm0, DWORD PTR _facing$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _vehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8

; 2427 :   Commands->Attach_Script(vehicle, "SH_CinematicVehicleDeliveryCallback", "");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0CE@PHAAGGEC@SH_CinematicVehicleDeliveryCallb@
	mov	eax, DWORD PTR _vehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 12					; 0000000cH

; 2428 : 
; 2429 :   // load vehicle and purchaser into cinematic, start it
; 2430 :   Commands->Send_Custom_Event(pOwner, cinematic, CINEMATIC_SET_SLOT + 0, Commands->Get_ID(vehicle), 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _vehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	10000					; 00002710H
	mov	eax, DWORD PTR _cinematic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 2431 :   Commands->Send_Custom_Event(pOwner, cinematic, CINEMATIC_SET_SLOT + 1, Commands->Get_ID(pOwner), 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pOwner$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	10001					; 00002711H
	mov	eax, DWORD PTR _cinematic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 2432 :   Commands->Send_Custom_Event(pOwner, cinematic, CINEMATIC_START, 0, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	99000					; 000182b8H
	mov	eax, DWORD PTR _cinematic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+140]
	call	eax
	add	esp, 20					; 00000014H

; 2433 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Create_Object@dp88_Create_Object_Cinematic@@IAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_Create_Object_Cinematic::Create_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
_pOwner$1 = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_Create_Object_Cinematic::Custom, COMDAT
; _this$ = ecx

; 2396 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2397 :   if ( type == Get_Int_Parameter("Trigger_Custom") )

	push	OFFSET ??_C@_0P@JONNOJD@Trigger_Custom?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	DWORD PTR _type$[ebp], eax
	jne	SHORT $LN3@Custom

; 2398 :   {
; 2399 :     GameObject* pOwner = (param >0 ) ? Commands->Find_Object(param) : NULL;

	cmp	DWORD PTR _param$[ebp], 0
	jle	SHORT $LN5@Custom
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@Custom
$LN5@Custom:
	mov	DWORD PTR tv76[ebp], 0
$LN6@Custom:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR _pOwner$1[ebp], eax

; 2400 :     if ( NULL == pOwner )

	cmp	DWORD PTR _pOwner$1[ebp], 0
	jne	SHORT $LN1@Custom

; 2401 :       pOwner = pSender;

	mov	eax, DWORD PTR _pSender$[ebp]
	mov	DWORD PTR _pOwner$1[ebp], eax
$LN1@Custom:

; 2402 : 
; 2403 :     Create_Object(pObj, pOwner);

	mov	eax, DWORD PTR _pOwner$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create_Object@dp88_Create_Object_Cinematic@@IAEXPAVScriptableGameObj@@0@Z ; dp88_Create_Object_Cinematic::Create_Object
$LN3@Custom:

; 2404 :   }
; 2405 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_Create_Object_Cinematic::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_Create_Object_Cinematic::Created, COMDAT
; _this$ = ecx

; 2385 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2386 :   if ( 0 == Get_Int_Parameter("Trigger_Custom") )

	push	OFFSET ??_C@_0P@JONNOJD@Trigger_Custom?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN2@Created

; 2387 :   {
; 2388 :     Create_Object(pObj, pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create_Object@dp88_Create_Object_Cinematic@@IAEXPAVScriptableGameObj@@0@Z ; dp88_Create_Object_Cinematic::Create_Object

; 2389 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script
$LN2@Created:

; 2390 :   }
; 2391 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Create_Object_Cinematic@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Create_Object_Cinematic::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Camo_Object@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Camo_Object@@UAEPAXI@Z PROC			; dp88_Camo_Object::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Camo_Object@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Camo_Object@@UAEPAXI@Z ENDP			; dp88_Camo_Object::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Camo_Object@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Camo_Object@@UAE@XZ PROC			; dp88_Camo_Object::~dp88_Camo_Object, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Camo_Object@@UAE@XZ ENDP			; dp88_Camo_Object::~dp88_Camo_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Camo_Object@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Camo_Object@@QAE@XZ PROC			; dp88_Camo_Object::dp88_Camo_Object, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Camo_Object@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Camo_Object@@QAE@XZ ENDP			; dp88_Camo_Object::dp88_Camo_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_Camo_Object@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv87 = -96						; size = 4
tv157 = -92						; size = 4
tv152 = -86						; size = 1
tv145 = -85						; size = 1
tv141 = -84						; size = 4
tv142 = -80						; size = 4
_pControllerScript$1 = -12				; size = 4
_pController$2 = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_Camo_Object@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_Camo_Object::Created, COMDAT
; _this$ = ecx

; 2341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2342 :   if ( GameObject* pController = Find_Object_With_Script("dp88_Camo_Controller") )

	push	OFFSET ??_C@_0BF@FLBIGINA@dp88_Camo_Controller?$AA@
	call	?Find_Object_With_Script@@YAPAVScriptableGameObj@@PBD@Z ; Find_Object_With_Script
	add	esp, 4
	mov	DWORD PTR _pController$2[ebp], eax
	cmp	DWORD PTR _pController$2[ebp], 0
	je	$LN3@Created

; 2343 :   {
; 2344 :     if ( dp88_Camo_Controller* pControllerScript = (dp88_Camo_Controller*)Find_Script_On_Object(pController, "dp88_Camo_Controller") )

	push	OFFSET ??_C@_0BF@FLBIGINA@dp88_Camo_Controller?$AA@
	mov	eax, DWORD PTR _pController$2[ebp]
	push	eax
	call	?Find_Script_On_Object@@YAPAVScriptImpClass@@PAVScriptableGameObj@@PBD@Z ; Find_Script_On_Object
	add	esp, 8
	mov	DWORD PTR _pControllerScript$1[ebp], eax
	cmp	DWORD PTR _pControllerScript$1[ebp], 0
	je	$LN3@Created

; 2345 :     {
; 2346 :       if ( strcmp(Get_Parameter("Camouflage"),pControllerScript->GetCamoVariant()) == 0 )

	mov	ecx, DWORD PTR _pControllerScript$1[ebp]
	call	?GetCamoVariant@dp88_Camo_Controller@@QBEPBDXZ ; dp88_Camo_Controller::GetCamoVariant
	mov	DWORD PTR tv142[ebp], eax
	push	OFFSET ??_C@_0L@KLKHNBPB@Camouflage?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv141[ebp], eax
$LL6@Created:
	mov	eax, DWORD PTR tv141[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv145[ebp], cl
	mov	edx, DWORD PTR tv142[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN7@Created
	cmp	BYTE PTR tv145[ebp], 0
	je	SHORT $LN8@Created
	mov	eax, DWORD PTR tv141[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv152[ebp], cl
	mov	edx, DWORD PTR tv142[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN7@Created
	add	DWORD PTR tv141[ebp], 2
	add	DWORD PTR tv142[ebp], 2
	cmp	BYTE PTR tv152[ebp], 0
	jne	SHORT $LL6@Created
$LN8@Created:
	mov	DWORD PTR tv157[ebp], 0
	jmp	SHORT $LN9@Created
$LN7@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv157[ebp], eax
$LN9@Created:
	mov	ecx, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv87[ebp], ecx
	cmp	DWORD PTR tv87[ebp], 0
	jne	SHORT $LN3@Created

; 2347 :         Commands->Set_Model(pObj, Get_Parameter("Model"));

	push	OFFSET ??_C@_05NFIJOKEG@Model?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+160]
	call	edx
	add	esp, 8
$LN3@Created:

; 2348 :     }
; 2349 :   }
; 2350 : 
; 2351 :   Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 2352 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Camo_Object@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Camo_Object::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Camo_Controller@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Camo_Controller@@UAEPAXI@Z PROC		; dp88_Camo_Controller::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Camo_Controller@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Camo_Controller@@UAEPAXI@Z ENDP		; dp88_Camo_Controller::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Camo_Controller@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Camo_Controller@@UAE@XZ PROC			; dp88_Camo_Controller::~dp88_Camo_Controller, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Camo_Controller@@UAE@XZ ENDP			; dp88_Camo_Controller::~dp88_Camo_Controller
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Camo_Controller@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Camo_Controller@@QAE@XZ PROC			; dp88_Camo_Controller::dp88_Camo_Controller, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Camo_Controller@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Camo_Controller@@QAE@XZ ENDP			; dp88_Camo_Controller::dp88_Camo_Controller
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.h
;	COMDAT ?GetCamoVariant@dp88_Camo_Controller@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCamoVariant@dp88_Camo_Controller@@QBEPBDXZ PROC	; dp88_Camo_Controller::GetCamoVariant, COMDAT
; _this$ = ecx

; 931  :   const char* GetCamoVariant() const { return m_camoVariant; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCamoVariant@dp88_Camo_Controller@@QBEPBDXZ ENDP	; dp88_Camo_Controller::GetCamoVariant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_Camo_Controller@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_Camo_Controller@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_Camo_Controller::Created, COMDAT
; _this$ = ecx

; 2316 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2317 :   m_camoVariant = Get_Parameter("Camouflage");

	push	OFFSET ??_C@_0L@KLKHNBPB@Camouflage?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 2318 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Camo_Controller@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Camo_Controller::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_Ammo_Animation@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_Ammo_Animation@@UAEPAXI@Z PROC			; dp88_Ammo_Animation::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_Ammo_Animation@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_Ammo_Animation@@UAEPAXI@Z ENDP			; dp88_Ammo_Animation::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_Ammo_Animation@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_Ammo_Animation@@UAE@XZ PROC			; dp88_Ammo_Animation::~dp88_Ammo_Animation, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_Ammo_Animation@@UAE@XZ ENDP			; dp88_Ammo_Animation::~dp88_Ammo_Animation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_Ammo_Animation@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_Ammo_Animation@@QAE@XZ PROC			; dp88_Ammo_Animation::dp88_Ammo_Animation, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_Ammo_Animation@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_Ammo_Animation@@QAE@XZ ENDP			; dp88_Ammo_Animation::dp88_Ammo_Animation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?UpdateAnimationFrame@dp88_Ammo_Animation@@IAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv134 = -84						; size = 4
tv78 = -84						; size = 4
tv70 = -84						; size = 4
_frame$ = -16						; size = 4
_maxBullets$ = -12					; size = 4
_pAnimObj$ = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?UpdateAnimationFrame@dp88_Ammo_Animation@@IAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ammo_Animation::UpdateAnimationFrame, COMDAT
; _this$ = ecx

; 2283 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2284 :   GameObject* pAnimObj = ( m_ammoAnimObjId != NULL ) ? Commands->Find_Object(m_ammoAnimObjId) : pObj;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@UpdateAnim
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@UpdateAnim
$LN3@UpdateAnim:
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR tv70[ebp], edx
$LN4@UpdateAnim:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _pAnimObj$[ebp], eax

; 2285 :   int maxBullets = (m_bUseTotal) ? Get_Current_Total_Max_Bullets(pObj) : Get_Current_Max_Bullets(pObj);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	je	SHORT $LN5@UpdateAnim
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	call	?Get_Current_Total_Max_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Total_Max_Bullets
	add	esp, 4
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN6@UpdateAnim
$LN5@UpdateAnim:
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Current_Max_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Max_Bullets
	add	esp, 4
	mov	DWORD PTR tv78[ebp], eax
$LN6@UpdateAnim:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _maxBullets$[ebp], ecx

; 2286 :   int frame = (int)floor(((m_nFrames-1)*(1.0f-(float)m_nBullets/maxBullets)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+28]
	cvtsi2ss xmm2, DWORD PTR _maxBullets$[ebp]
	divss	xmm1, xmm2
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	mulss	xmm0, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _frame$[ebp], eax

; 2287 :   Commands->Set_Animation_Frame(pAnimObj, m_strAnimation, frame);

	mov	eax, DWORD PTR _frame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _pAnimObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 12					; 0000000cH

; 2288 :   Update_Network_Object(pObj);

	cmp	DWORD PTR _pObj$[ebp], 0
	je	SHORT $LN7@UpdateAnim
	mov	eax, DWORD PTR _pObj$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN8@UpdateAnim
$LN7@UpdateAnim:
	mov	DWORD PTR tv134[ebp], 0
$LN8@UpdateAnim:
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	call	DWORD PTR ?Update_Network_Object@@3P6AXPAVNetworkObjectClass@@@ZA ; Update_Network_Object
	add	esp, 4

; 2289 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateAnimationFrame@dp88_Ammo_Animation@@IAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ammo_Animation::UpdateAnimationFrame
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv72 = -76						; size = 4
_nBullets$1 = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_Ammo_Animation::Timer_Expired, COMDAT
; _this$ = ecx

; 2266 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2267 :   if ( number == TIMER_AMMO_ANIMATION )

	cmp	DWORD PTR _number$[ebp], -620756984	; db000008H
	jne	SHORT $LN2@Timer_Expi

; 2268 :   {
; 2269 :     int nBullets = (m_bUseTotal) ? Get_Current_Total_Bullets(pObj) : Get_Current_Bullets(pObj);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	je	SHORT $LN5@Timer_Expi
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	call	?Get_Current_Total_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Total_Bullets
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN6@Timer_Expi
$LN5@Timer_Expi:
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Current_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Bullets
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
$LN6@Timer_Expi:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _nBullets$1[ebp], ecx

; 2270 :     if ( nBullets != m_nBullets )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nBullets$1[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	je	SHORT $LN1@Timer_Expi

; 2271 :     {
; 2272 :       m_nBullets = nBullets;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nBullets$1[ebp]
	mov	DWORD PTR [eax+28], ecx

; 2273 :       UpdateAnimationFrame(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimationFrame@dp88_Ammo_Animation@@IAEXPAVScriptableGameObj@@@Z ; dp88_Ammo_Animation::UpdateAnimationFrame
$LN1@Timer_Expi:

; 2274 :     }
; 2275 : 
; 2276 :     Commands->Start_Timer(pObj, this, 0.1f, TIMER_AMMO_ANIMATION);

	push	-620756984				; db000008H
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@Timer_Expi:

; 2277 :   }
; 2278 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_Ammo_Animation::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv194 = -100						; size = 4
tv128 = -100						; size = 4
tv297 = -93						; size = 1
tv258 = -93						; size = 1
tv294 = -92						; size = 4
tv255 = -92						; size = 4
tv291 = -88						; size = 4
tv252 = -88						; size = 4
tv89 = -88						; size = 4
$T1 = -84						; size = 12
_pAmmoAnimObj$2 = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_Ammo_Animation::Created, COMDAT
; _this$ = ecx

; 2229 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2230 :   m_strAnimation = Get_Parameter("Animation");

	push	OFFSET ??_C@_09ONEINPNJ@Animation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 2231 :   m_nFrames = Get_Int_Parameter("Animation_Frames");

	push	OFFSET ??_C@_0BB@FLICDNDP@Animation_Frames?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 2232 :   m_bUseTotal = (Get_Int_Parameter("Use_Total_Ammo")!=0);

	push	OFFSET ??_C@_0P@LIPBLCCH@Use_Total_Ammo?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN9@Created
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN10@Created
$LN9@Created:
	mov	DWORD PTR tv89[ebp], 0
$LN10@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv89[ebp]
	mov	BYTE PTR [eax+44], cl

; 2233 : 
; 2234 :   if ( m_strAnimation == NULL || strlen(m_strAnimation) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@Created
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv252[ebp], ecx
	mov	edx, DWORD PTR tv252[ebp]
	add	edx, 1
	mov	DWORD PTR tv255[ebp], edx
$LL11@Created:
	mov	eax, DWORD PTR tv252[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv258[ebp], cl
	add	DWORD PTR tv252[ebp], 1
	cmp	BYTE PTR tv258[ebp], 0
	jne	SHORT $LL11@Created
	mov	edx, DWORD PTR tv252[ebp]
	sub	edx, DWORD PTR tv255[ebp]
	mov	DWORD PTR tv128[ebp], edx
	jne	SHORT $LN6@Created
$LN5@Created:

; 2235 :   {
; 2236 :     Console_Output ( "[%d:%s:%s] Critical Error: No animation has been specified! Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FC@EBNFPOLC@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5No?5an@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 2237 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 2238 :     return;

	jmp	$LN7@Created
$LN6@Created:

; 2239 :   }
; 2240 : 
; 2241 :   if ( Get_Current_Max_Bullets(pObj) <= 0 || (m_bUseTotal && Get_Current_Clip_Max_Bullets(pObj) <= 0) )

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Current_Max_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Max_Bullets
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN3@Created
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	je	SHORT $LN4@Created
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Current_Clip_Max_Bullets@@YAHPAVScriptableGameObj@@@Z ; Get_Current_Clip_Max_Bullets
	add	esp, 4
	test	eax, eax
	jg	SHORT $LN4@Created
$LN3@Created:

; 2242 :   {
; 2243 :     Console_Output ( "[%d:%s:%s] Critical Error: This script cannot be used on a weapon with infinite animation! Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0HB@PNCMMMJI@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 2244 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 2245 :     return;

	jmp	$LN7@Created
$LN4@Created:

; 2246 :   }
; 2247 : 
; 2248 :   // If an animation model is specified then create it now...
; 2249 :   if ( strlen ( Get_Parameter("Animation_Model") ) > 0 )

	push	OFFSET ??_C@_0BA@IPCHLLAK@Animation_Model?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv291[ebp], eax
	mov	eax, DWORD PTR tv291[ebp]
	add	eax, 1
	mov	DWORD PTR tv294[ebp], eax
$LL12@Created:
	mov	ecx, DWORD PTR tv291[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv297[ebp], dl
	add	DWORD PTR tv291[ebp], 1
	cmp	BYTE PTR tv297[ebp], 0
	jne	SHORT $LL12@Created
	mov	eax, DWORD PTR tv291[ebp]
	sub	eax, DWORD PTR tv294[ebp]
	mov	DWORD PTR tv194[ebp], eax
	je	$LN1@Created

; 2250 :   {
; 2251 :     if ( GameObject* pAmmoAnimObj = Commands->Create_Object ( "Invisible_Object", Commands->Get_Position(pObj) ) )

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BB@NHJNEILC@Invisible_Object?$AA@
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _pAmmoAnimObj$2[ebp], eax
	cmp	DWORD PTR _pAmmoAnimObj$2[ebp], 0
	je	SHORT $LN1@Created

; 2252 :     {
; 2253 :       m_ammoAnimObjId = Commands->Get_ID(pAmmoAnimObj);

	mov	eax, DWORD PTR _pAmmoAnimObj$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 2254 :       Commands->Set_Model ( pAmmoAnimObj, Get_Parameter("Animation_Model") );

	push	OFFSET ??_C@_0BA@IPCHLLAK@Animation_Model?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pAmmoAnimObj$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+160]
	call	edx
	add	esp, 8

; 2255 :       Commands->Attach_To_Object_Bone ( pAmmoAnimObj, pObj, Get_Parameter("Animation_Model_Bone") );

	push	OFFSET ??_C@_0BF@OHLHCKEN@Animation_Model_Bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAmmoAnimObj$2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+572]
	call	eax
	add	esp, 12					; 0000000cH
$LN1@Created:

; 2256 :     }
; 2257 :   }
; 2258 : 
; 2259 :   m_nBullets = -1;    // Animation frame update on first timer tick (unless infinite ammo)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], -1

; 2260 :   Commands->Start_Timer(pObj, this, 0.1f, TIMER_AMMO_ANIMATION);

	push	-620756984				; db000008H
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN7@Created:

; 2261 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_Ammo_Animation@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_Ammo_Animation::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_teleport@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_teleport@@UAEPAXI@Z PROC			; dp88_teleport::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_teleport@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_teleport@@UAEPAXI@Z ENDP			; dp88_teleport::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_teleport@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_teleport@@UAE@XZ PROC				; dp88_teleport::~dp88_teleport, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_teleport@@UAE@XZ ENDP				; dp88_teleport::~dp88_teleport
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_teleport@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_teleport@@QAE@XZ PROC				; dp88_teleport::dp88_teleport, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_teleport@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_teleport@@QAE@XZ ENDP				; dp88_teleport::dp88_teleport
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Poked@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pPoker$ = 12						; size = 4
?Poked@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_teleport::Poked, COMDAT
; _this$ = ecx

; 2200 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2201 :   Entered ( pObj, pPoker );

	mov	eax, DWORD PTR _pPoker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx

; 2202 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_teleport::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_teleport@@MAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_teleport@@MAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_teleport::Custom, COMDAT
; _this$ = ecx

; 2192 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2193 :   if ( type == CUSTOM_EVENT_POWERUP_GRANTED )

	cmp	DWORD PTR _type$[ebp], 1000000025	; 3b9aca19H
	jne	SHORT $LN2@Custom

; 2194 :     Entered ( pObj, pSender );

	mov	eax, DWORD PTR _pSender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
$LN2@Custom:

; 2195 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_teleport@@MAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_teleport::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Entered@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv153 = -140						; size = 4
$T1 = -136						; size = 4
$T2 = -132						; size = 12
$T3 = -120						; size = 12
$T4 = -108						; size = 12
$T5 = -96						; size = 12
_pTarget$6 = -20					; size = 4
_location$7 = -16					; size = 12
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_pEnterer$ = 12						; size = 4
?Entered@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_teleport::Entered, COMDAT
; _this$ = ecx

; 2168 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2169 :   if ( (m_bTeleportInfantry && pEnterer->As_SoldierGameObj()) || (m_bTeleportVehicles && pEnterer->As_VehicleGameObj()) )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	test	ecx, ecx
	je	SHORT $LN3@Entered
	mov	eax, DWORD PTR _pEnterer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pEnterer$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	test	eax, eax
	jne	SHORT $LN4@Entered
$LN3@Entered:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+49]
	test	ecx, ecx
	je	$LN5@Entered
	mov	eax, DWORD PTR _pEnterer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pEnterer$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	$LN5@Entered
$LN4@Entered:

; 2170 :   {
; 2171 :     Vector3 location = m_offset;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	lea	ecx, DWORD PTR _location$7[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 2172 : 
; 2173 :     if ( m_nObjectID != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	$LN2@Entered

; 2174 :     {
; 2175 :       GameObject* pTarget = Commands->Find_Object(m_nObjectID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pTarget$6[ebp], eax

; 2176 :       if ( !pTarget )

	cmp	DWORD PTR _pTarget$6[ebp], 0
	jne	SHORT $LN1@Entered

; 2177 :         return;

	jmp	$LN6@Entered
$LN1@Entered:

; 2178 : 
; 2179 :       location = ( m_bUseBone ) ? Commands->Get_Bone_Position(pTarget,Get_Parameter("bone")) : Commands->Get_Position(pTarget);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN8@Entered
	push	OFFSET ??_C@_04ODKJLCFC@bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	edx, DWORD PTR _pTarget$6[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN9@Entered
$LN8@Entered:
	mov	eax, DWORD PTR _pTarget$6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	DWORD PTR tv153[ebp], eax
$LN9@Entered:
	mov	ecx, DWORD PTR tv153[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	lea	ecx, DWORD PTR _location$7[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 2180 :       location.X += m_offset.X;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _location$7[ebp]
	addss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR _location$7[ebp], xmm0

; 2181 :       location.Y += m_offset.Y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _location$7[ebp+4]
	addss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR _location$7[ebp+4], xmm0

; 2182 :       location.Z += m_offset.Z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _location$7[ebp+8]
	addss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR _location$7[ebp+8], xmm0
$LN2@Entered:

; 2183 :     }
; 2184 : 
; 2185 :     Commands->Set_Position(pEnterer, location);

	lea	eax, DWORD PTR _location$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEnterer$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8
$LN5@Entered:
$LN6@Entered:

; 2186 :   }
; 2187 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@dp88_teleport@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_teleport::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_teleport@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv84 = -100						; size = 4
tv82 = -96						; size = 4
tv161 = -89						; size = 1
tv158 = -88						; size = 4
tv155 = -84						; size = 4
tv149 = -84						; size = 4
tv138 = -84						; size = 4
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_teleport@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_teleport::Created, COMDAT
; _this$ = ecx

; 2156 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2157 :   m_nObjectID = Get_Int_Parameter("ObjectID");    // Don't check object ID right now, it might be created later

	push	OFFSET ??_C@_08CMHNALBL@ObjectID?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 2158 :   m_bUseBone = strlen(Get_Parameter("Bone")) > 0;

	push	OFFSET ??_C@_04CCGIJNFG@Bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv155[ebp], eax
	mov	eax, DWORD PTR tv155[ebp]
	add	eax, 1
	mov	DWORD PTR tv158[ebp], eax
$LL9@Created:
	mov	ecx, DWORD PTR tv155[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv161[ebp], dl
	add	DWORD PTR tv155[ebp], 1
	cmp	BYTE PTR tv161[ebp], 0
	jne	SHORT $LL9@Created
	mov	eax, DWORD PTR tv155[ebp]
	sub	eax, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv82[ebp], eax
	je	SHORT $LN3@Created
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN4@Created
$LN3@Created:
	mov	DWORD PTR tv84[ebp], 0
$LN4@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv84[ebp]
	mov	BYTE PTR [ecx+32], dl

; 2159 :   m_offset = Get_Vector3_Parameter("Offset");

	push	OFFSET ??_C@_06GEMKPBPA@Offset?$AA@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Vector3_Parameter@ScriptImpClass@@QAE?AVVector3@@PBD@Z ; ScriptImpClass::Get_Vector3_Parameter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 2160 : 
; 2161 :   m_bTeleportInfantry = (Get_Int_Parameter("Teleport_Infantry") == 1);

	push	OFFSET ??_C@_0BC@JFMDKIAL@Teleport_Infantry?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jne	SHORT $LN5@Created
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN6@Created
$LN5@Created:
	mov	DWORD PTR tv138[ebp], 0
$LN6@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv138[ebp]
	mov	BYTE PTR [eax+48], cl

; 2162 :   m_bTeleportVehicles = (Get_Int_Parameter("Teleport_Vehicles") == 1);

	push	OFFSET ??_C@_0BC@IJAHCGHD@Teleport_Vehicles?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jne	SHORT $LN7@Created
	mov	DWORD PTR tv149[ebp], 1
	jmp	SHORT $LN8@Created
$LN7@Created:
	mov	DWORD PTR tv149[ebp], 0
$LN8@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR [eax+49], cl

; 2163 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_teleport@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_teleport::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_turretSound@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_turretSound@@UAEPAXI@Z PROC			; dp88_turretSound::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_turretSound@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_turretSound@@UAEPAXI@Z ENDP			; dp88_turretSound::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_turretSound@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_turretSound@@UAE@XZ PROC			; dp88_turretSound::~dp88_turretSound, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_turretSound@@UAE@XZ ENDP			; dp88_turretSound::~dp88_turretSound
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_turretSound@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_turretSound@@QAE@XZ PROC			; dp88_turretSound::dp88_turretSound, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_turretSound@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_turretSound@@QAE@XZ ENDP			; dp88_turretSound::dp88_turretSound
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Stop_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Stop_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z PROC ; dp88_turretSound::Stop_Sound, COMDAT
; _this$ = ecx

; 2129 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2130 :   Commands->Stop_Sound(m_nSoundId,true);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+200]
	call	eax
	add	esp, 8

; 2131 :   m_nSoundId = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], -1

; 2132 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Stop_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z ENDP ; dp88_turretSound::Stop_Sound
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Play_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Play_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z PROC ; dp88_turretSound::Play_Sound, COMDAT
; _this$ = ecx

; 2121 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2122 :   m_nSoundId = Commands->Create_3D_Sound_At_Bone(Get_Parameter("Sound_Preset"), pObj, "turret");

	push	OFFSET ??_C@_06GGDACGEK@turret?$AA@
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@JLPHONAA@Sound_Preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+188]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 2123 :   Commands->Monitor_Sound(pObj, m_nSoundId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+204]
	call	ecx
	add	esp, 8

; 2124 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Play_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z ENDP ; dp88_turretSound::Play_Sound
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Get_Turret_Facing@dp88_turretSound@@IAEMPAVRenderObjClass@@@Z
_TEXT	SEGMENT
tv128 = -176						; size = 4
tv136 = -172						; size = 4
tv92 = -168						; size = 4
_transform$1 = -100					; size = 48
_vehicleTransform$2 = -52				; size = 48
_this$ = -4						; size = 4
_pRenderObj$ = 8					; size = 4
?Get_Turret_Facing@dp88_turretSound@@IAEMPAVRenderObjClass@@@Z PROC ; dp88_turretSound::Get_Turret_Facing, COMDAT
; _this$ = ecx

; 2107 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2108 :   if ( pRenderObj )

	cmp	DWORD PTR _pRenderObj$[ebp], 0
	je	SHORT $LN1@Get_Turret

; 2109 :   {
; 2110 :     Matrix3D vehicleTransform = pRenderObj->Get_Transform();

	mov	ecx, DWORD PTR _pRenderObj$[ebp]
	call	?Get_Transform@RenderObjClass@@QBEABVMatrix3D@@XZ ; RenderObjClass::Get_Transform
	push	eax
	lea	ecx, DWORD PTR _vehicleTransform$2[ebp]
	call	??0Matrix3D@@QAE@ABV0@@Z		; Matrix3D::Matrix3D

; 2111 :     Matrix3D transform = pRenderObj->Get_Bone_Transform("turret");

	push	OFFSET ??_C@_06GGDACGEK@turret?$AA@
	mov	eax, DWORD PTR _pRenderObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRenderObj$[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
	push	eax
	lea	ecx, DWORD PTR _transform$1[ebp]
	call	??0Matrix3D@@QAE@ABV0@@Z		; Matrix3D::Matrix3D

; 2112 :     return abs(vehicleTransform.Get_Z_Rotation()-transform.Get_Z_Rotation());

	lea	ecx, DWORD PTR _vehicleTransform$2[ebp]
	call	?Get_Z_Rotation@Matrix3D@@QBEMXZ	; Matrix3D::Get_Z_Rotation
	fstp	DWORD PTR tv92[ebp]
	movss	xmm0, DWORD PTR tv92[ebp]
	lea	ecx, DWORD PTR _transform$1[ebp]
	movss	DWORD PTR tv136[ebp], xmm0
	call	?Get_Z_Rotation@Matrix3D@@QBEMXZ	; Matrix3D::Get_Z_Rotation
	fstp	DWORD PTR tv128[ebp]
	movss	xmm0, DWORD PTR tv136[ebp]
	subss	xmm0, DWORD PTR tv128[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	jmp	SHORT $LN2@Get_Turret
$LN1@Get_Turret:

; 2113 :   }
; 2114 : 
; 2115 :   return 0.0f;

	fldz
$LN2@Get_Turret:

; 2116 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Turret_Facing@dp88_turretSound@@IAEMPAVRenderObjClass@@@Z ENDP ; dp88_turretSound::Get_Turret_Facing
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_turretSound@@MAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_turretSound@@MAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_turretSound::Custom, COMDAT
; _this$ = ecx

; 2094 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2095 :   if (type == CUSTOM_EVENT_SOUND_ENDED && param == m_nSoundId)

	cmp	DWORD PTR _type$[ebp], 1000000001	; 3b9aca01H
	jne	SHORT $LN2@Custom
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _param$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jne	SHORT $LN2@Custom

; 2096 :   {
; 2097 :     // We will allow the timer to stop the sound if necessary, since this might trigger
; 2098 :     // on the same engine tick, thus checking our facing against the previous timer
; 2099 :     // facing could produce a false-positive for "stopped rotating"
; 2100 :     Play_Sound(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Play_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z ; dp88_turretSound::Play_Sound
$LN2@Custom:

; 2101 :   }
; 2102 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_turretSound@@MAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_turretSound::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_turretSound@@MAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv89 = -88						; size = 4
tv158 = -84						; size = 4
_bRotating$1 = -13					; size = 1
_newFacing$2 = -12					; size = 4
_vObj$3 = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_turretSound@@MAEXPAVScriptableGameObj@@H@Z PROC ; dp88_turretSound::Timer_Expired, COMDAT
; _this$ = ecx

; 2067 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2068 :   if ( number == TIMER_TURRETSOUND )

	cmp	DWORD PTR _number$[ebp], -620756987	; db000005H
	jne	$LN5@Timer_Expi

; 2069 :   {
; 2070 :     if ( VehicleGameObj* vObj = pObj->As_VehicleGameObj() )

	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _vObj$3[ebp], eax
	cmp	DWORD PTR _vObj$3[ebp], 0
	je	$LN4@Timer_Expi

; 2071 :     {
; 2072 :       float newFacing = Get_Turret_Facing(vObj->Peek_Model());

	mov	ecx, DWORD PTR _vObj$3[ebp]
	call	?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ ; PhysicalGameObj::Peek_Model
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Turret_Facing@dp88_turretSound@@IAEMPAVRenderObjClass@@@Z ; dp88_turretSound::Get_Turret_Facing
	fstp	DWORD PTR _newFacing$2[ebp]

; 2073 : 
; 2074 :       // Check if we are rotating - ignore tiny rotation amounts
; 2075 :       bool bRotating = ( abs(newFacing-m_lastFacing) > m_nMinDifferential );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newFacing$2[ebp]
	subss	xmm0, DWORD PTR [eax+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR tv158[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+36]
	jbe	SHORT $LN8@Timer_Expi
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN9@Timer_Expi
$LN8@Timer_Expi:
	mov	DWORD PTR tv89[ebp], 0
$LN9@Timer_Expi:
	mov	dl, BYTE PTR tv89[ebp]
	mov	BYTE PTR _bRotating$1[ebp], dl

; 2076 : 
; 2077 :       if ( m_nSoundId == -1 && bRotating)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], -1
	jne	SHORT $LN3@Timer_Expi
	movzx	eax, BYTE PTR _bRotating$1[ebp]
	test	eax, eax
	je	SHORT $LN3@Timer_Expi

; 2078 :         Play_Sound(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Play_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z ; dp88_turretSound::Play_Sound
	jmp	SHORT $LN1@Timer_Expi
$LN3@Timer_Expi:

; 2079 : 
; 2080 :       else if ( m_nSoundId != -1 && !bRotating )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], -1
	je	SHORT $LN1@Timer_Expi
	movzx	eax, BYTE PTR _bRotating$1[ebp]
	test	eax, eax
	jne	SHORT $LN1@Timer_Expi

; 2081 :         Stop_Sound(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop_Sound@dp88_turretSound@@IAEXPAVScriptableGameObj@@@Z ; dp88_turretSound::Stop_Sound
$LN1@Timer_Expi:

; 2082 : 
; 2083 :       m_lastFacing = newFacing;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newFacing$2[ebp]
	movss	DWORD PTR [eax+28], xmm0
$LN4@Timer_Expi:

; 2084 :     }
; 2085 : 
; 2086 :     // Restart timer to check for rotation
; 2087 :     Commands->Start_Timer(pObj, this, 0.5f, TIMER_TURRETSOUND );

	push	-620756987				; db000005H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN5@Timer_Expi:

; 2088 :   }
; 2089 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_turretSound@@MAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_turretSound::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_turretSound@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_vObj$1 = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_turretSound@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_turretSound::Created, COMDAT
; _this$ = ecx

; 2049 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2050 :   if ( VehicleGameObj* vObj = pObj->As_VehicleGameObj() )

	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _vObj$1[ebp], eax
	cmp	DWORD PTR _vObj$1[ebp], 0
	je	SHORT $LN2@Created

; 2051 :   {
; 2052 :     m_nMinDifferential = Get_Float_Parameter("Min_Differential_Rad");

	push	OFFSET ??_C@_0BF@OAKDDNEI@Min_Differential_Rad?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+36]

; 2053 :     m_lastFacing = Get_Turret_Facing(vObj->Peek_Model());

	mov	ecx, DWORD PTR _vObj$1[ebp]
	call	?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ ; PhysicalGameObj::Peek_Model
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Turret_Facing@dp88_turretSound@@IAEMPAVRenderObjClass@@@Z ; dp88_turretSound::Get_Turret_Facing
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+28]

; 2054 :     m_nSoundId = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], -1

; 2055 :     Commands->Start_Timer(pObj, this, 0.5f, TIMER_TURRETSOUND );

	push	-620756987				; db000005H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 2056 :   }
; 2057 :   else

	jmp	SHORT $LN1@Created
$LN2@Created:

; 2058 :   {
; 2059 :     Console_Output ( "[%d:%s:%s] Critical Error: This script is only compatible with vehicle game objects. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0GL@NDCAHHMO@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 2060 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script
$LN1@Created:

; 2061 :   }
; 2062 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_turretSound@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_turretSound::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_radarInvisibility@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_radarInvisibility@@UAEPAXI@Z PROC		; dp88_radarInvisibility::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_radarInvisibility@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_radarInvisibility@@UAEPAXI@Z ENDP		; dp88_radarInvisibility::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_radarInvisibility@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_radarInvisibility@@UAE@XZ PROC			; dp88_radarInvisibility::~dp88_radarInvisibility, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_radarInvisibility@@UAE@XZ ENDP			; dp88_radarInvisibility::~dp88_radarInvisibility
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?RestorePassengerBlip@dp88_radarInvisibility@@IAEXPAVSoldierGameObj@@@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_soldierId$ = -8					; size = 4
_this$ = -4						; size = 4
_pSoldier$ = 8						; size = 4
?RestorePassengerBlip@dp88_radarInvisibility@@IAEXPAVSoldierGameObj@@@Z PROC ; dp88_radarInvisibility::RestorePassengerBlip, COMDAT
; _this$ = ecx

; 1988 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1989 :   if ( !pSoldier || !m_pPassengerIds || !pSoldier->As_PhysicalGameObj() )

	cmp	DWORD PTR _pSoldier$[ebp], 0
	je	SHORT $LN5@RestorePas
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN5@RestorePas
	mov	eax, DWORD PTR _pSoldier$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pSoldier$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	test	eax, eax
	jne	SHORT $LN6@RestorePas
$LN5@RestorePas:

; 1990 :     return;

	jmp	SHORT $LN7@RestorePas
$LN6@RestorePas:

; 1991 : 
; 1992 :   int soldierId = Commands->Get_ID(pSoldier);

	mov	eax, DWORD PTR _pSoldier$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	DWORD PTR _soldierId$[ebp], eax

; 1993 : 
; 1994 :   for ( int i = 0; i < m_nSeats; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@RestorePas
$LN3@RestorePas:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@RestorePas:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jge	SHORT $LN7@RestorePas

; 1995 :   {
; 1996 :     if ( m_pPassengerIds[i] == soldierId )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _soldierId$[ebp]
	jne	SHORT $LN1@RestorePas

; 1997 :     {
; 1998 :       pSoldier->As_PhysicalGameObj()->Set_Radar_Blip_Shape_Type(m_pPassengerRadarModes[i]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _pSoldier$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pSoldier$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, eax
	call	?Set_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEXH@Z ; PhysicalGameObj::Set_Radar_Blip_Shape_Type

; 1999 :       m_pPassengerIds[i] = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
$LN1@RestorePas:

; 2000 :     }
; 2001 :   }

	jmp	SHORT $LN3@RestorePas
$LN7@RestorePas:

; 2002 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?RestorePassengerBlip@dp88_radarInvisibility@@IAEXPAVSoldierGameObj@@@Z ENDP ; dp88_radarInvisibility::RestorePassengerBlip
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?HidePassengerBlip@dp88_radarInvisibility@@IAEXPAVVehicleGameObj@@PAVSoldierGameObj@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_pVehicle$ = 8						; size = 4
_pSoldier$ = 12						; size = 4
?HidePassengerBlip@dp88_radarInvisibility@@IAEXPAVVehicleGameObj@@PAVSoldierGameObj@@@Z PROC ; dp88_radarInvisibility::HidePassengerBlip, COMDAT
; _this$ = ecx

; 1970 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1971 :   if ( !pVehicle || !pSoldier || !m_pPassengerIds || !pSoldier->As_PhysicalGameObj() )

	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	SHORT $LN5@HidePassen
	cmp	DWORD PTR _pSoldier$[ebp], 0
	je	SHORT $LN5@HidePassen
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN5@HidePassen
	mov	eax, DWORD PTR _pSoldier$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pSoldier$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	test	eax, eax
	jne	SHORT $LN6@HidePassen
$LN5@HidePassen:

; 1972 :     return;

	jmp	$LN7@HidePassen
$LN6@HidePassen:

; 1973 : 
; 1974 :   for ( int i = 0; i < m_nSeats; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@HidePassen
$LN3@HidePassen:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@HidePassen:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jge	SHORT $LN7@HidePassen

; 1975 :   {
; 1976 :     if ( pVehicle->Get_Occupant(i) == pSoldier )

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?Get_Occupant@VehicleGameObj@@QAEPAVSoldierGameObj@@H@Z ; VehicleGameObj::Get_Occupant
	cmp	eax, DWORD PTR _pSoldier$[ebp]
	jne	SHORT $LN1@HidePassen

; 1977 :     {
; 1978 :       m_pPassengerIds[i] = Commands->Get_ID(pSoldier);

	mov	eax, DWORD PTR _pSoldier$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 1979 :       m_pPassengerRadarModes[i] = pSoldier->As_PhysicalGameObj()->Get_Radar_Blip_Shape_Type();

	mov	eax, DWORD PTR _pSoldier$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pSoldier$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, eax
	call	?Get_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEHXZ ; PhysicalGameObj::Get_Radar_Blip_Shape_Type
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 1980 :       pSoldier->As_PhysicalGameObj()->Set_Radar_Blip_Shape_Type(RADAR_BLIP_SHAPE_NONE);

	push	0
	mov	eax, DWORD PTR _pSoldier$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pSoldier$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, eax
	call	?Set_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEXH@Z ; PhysicalGameObj::Set_Radar_Blip_Shape_Type
$LN1@HidePassen:

; 1981 :     }
; 1982 :   }

	jmp	SHORT $LN3@HidePassen
$LN7@HidePassen:

; 1983 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?HidePassengerBlip@dp88_radarInvisibility@@IAEXPAVVehicleGameObj@@PAVSoldierGameObj@@@Z ENDP ; dp88_radarInvisibility::HidePassengerBlip
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -88						; size = 4
$T2 = -84						; size = 4
_pSoldier$3 = -16					; size = 4
_i$4 = -12						; size = 4
_phys$5 = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_radarInvisibility::Detach, COMDAT
; _this$ = ecx

; 2007 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2008 :   if ( Exe != EXE_LEVELEDIT )   // Don't trigger this code in LevelEdit

	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	je	$LN7@Detach

; 2009 :   {
; 2010 :     if ( PhysicalGameObj* phys = pObj->As_PhysicalGameObj() )

	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	DWORD PTR _phys$5[ebp], eax
	cmp	DWORD PTR _phys$5[ebp], 0
	je	SHORT $LN6@Detach

; 2011 :       phys->Set_Radar_Blip_Shape_Type(m_originalRadarMode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _phys$5[ebp]
	call	?Set_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEXH@Z ; PhysicalGameObj::Set_Radar_Blip_Shape_Type
$LN6@Detach:

; 2012 : 
; 2013 :     for ( int i = 0; i < m_nSeats; ++i )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN5@Detach
$LN4@Detach:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN5@Detach:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jge	SHORT $LN7@Detach

; 2014 :     {
; 2015 :       if ( m_pPassengerIds[i] != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN2@Detach

; 2016 :       {
; 2017 :         if ( GameObject* pSoldier = Commands->Find_Object(m_pPassengerIds[i]) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	mov	DWORD PTR _pSoldier$3[ebp], eax
	cmp	DWORD PTR _pSoldier$3[ebp], 0
	je	SHORT $LN2@Detach

; 2018 :           RestorePassengerBlip( pSoldier->As_SoldierGameObj() );

	mov	eax, DWORD PTR _pSoldier$3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pSoldier$3[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestorePassengerBlip@dp88_radarInvisibility@@IAEXPAVSoldierGameObj@@@Z ; dp88_radarInvisibility::RestorePassengerBlip
$LN2@Detach:

; 2019 :       }
; 2020 :     }

	jmp	SHORT $LN4@Detach
$LN7@Detach:

; 2021 :   }
; 2022 : 
; 2023 :   delete [] m_pPassengerIds;

	push	OFFSET ??_C@_0BP@HPEFELMM@dp88_radarInvisibility?3?3Detach?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN11@Detach
	xor	edx, edx
	jne	SHORT $LN10@Detach
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Detach:
	jmp	SHORT $LN12@Detach
$LN11@Detach:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN12@Detach:

; 2024 :   delete [] m_pPassengerRadarModes;

	push	OFFSET ??_C@_0BP@HPEFELMM@dp88_radarInvisibility?3?3Detach?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN14@Detach
	xor	edx, edx
	jne	SHORT $LN13@Detach
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Detach:
	jmp	SHORT $LN15@Detach
$LN14@Detach:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN15@Detach:

; 2025 :   
; 2026 :   // Prevent a crash if Detach is somehow called twice (can apparently happen?!?)
; 2027 :   m_pPassengerIds = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2028 :   m_pPassengerRadarModes = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 2029 :   m_nSeats = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 2030 : 
; 2031 :   ScriptImpClass::Detach(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Detach

; 2032 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_radarInvisibility::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_radarInvisibility::Custom, COMDAT
; _this$ = ecx

; 1955 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1956 :   if ( type == CUSTOM_EVENT_VEHICLE_ENTERED )

	cmp	DWORD PTR _type$[ebp], 1000000028	; 3b9aca1cH
	jne	SHORT $LN3@Custom

; 1957 :   {
; 1958 :     HidePassengerBlip(pObj->As_VehicleGameObj(), pSender->As_SoldierGameObj());

	mov	eax, DWORD PTR _pSender$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pSender$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HidePassengerBlip@dp88_radarInvisibility@@IAEXPAVVehicleGameObj@@PAVSoldierGameObj@@@Z ; dp88_radarInvisibility::HidePassengerBlip
	jmp	SHORT $LN4@Custom
$LN3@Custom:

; 1959 :   }
; 1960 : 
; 1961 :   else if ( type == CUSTOM_EVENT_VEHICLE_EXITED )

	cmp	DWORD PTR _type$[ebp], 1000000029	; 3b9aca1dH
	jne	SHORT $LN4@Custom

; 1962 :   {
; 1963 :     RestorePassengerBlip(pSender->As_SoldierGameObj());

	mov	eax, DWORD PTR _pSender$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pSender$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestorePassengerBlip@dp88_radarInvisibility@@IAEXPAVSoldierGameObj@@@Z ; dp88_radarInvisibility::RestorePassengerBlip
$LN4@Custom:

; 1964 :   }
; 1965 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_radarInvisibility::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv188 = -92						; size = 4
tv167 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
_i$3 = -16						; size = 4
_pVehicle$4 = -12					; size = 4
_phys$ = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_radarInvisibility::Created, COMDAT
; _this$ = ecx

; 1928 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1929 :   PhysicalGameObj* phys = pObj->As_PhysicalGameObj();

	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	DWORD PTR _phys$[ebp], eax

; 1930 :   if ( !phys )

	cmp	DWORD PTR _phys$[ebp], 0
	jne	SHORT $LN5@Created

; 1931 :   {
; 1932 :     Console_Output ( "[%d:%s:%s] Critical Error: This script is only compatible with physical game objects. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0GM@CLAHJDDJ@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 1933 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 1934 :     return;

	jmp	$LN6@Created
$LN5@Created:

; 1935 :   }
; 1936 : 
; 1937 :   // Disable the radar blip for this object
; 1938 :   m_originalRadarMode = phys->Get_Radar_Blip_Shape_Type();

	mov	ecx, DWORD PTR _phys$[ebp]
	call	?Get_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEHXZ ; PhysicalGameObj::Get_Radar_Blip_Shape_Type
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1939 :   phys->Set_Radar_Blip_Shape_Type(RADAR_BLIP_SHAPE_NONE);

	push	0
	mov	ecx, DWORD PTR _phys$[ebp]
	call	?Set_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEXH@Z ; PhysicalGameObj::Set_Radar_Blip_Shape_Type

; 1940 : 
; 1941 :   // If this is a vehicle then setup the passenger data structures
; 1942 :   if ( VehicleGameObj* pVehicle = pObj->As_VehicleGameObj() )

	mov	eax, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _pVehicle$4[ebp], eax
	cmp	DWORD PTR _pVehicle$4[ebp], 0
	je	$LN6@Created

; 1943 :   {
; 1944 :     m_nSeats = pVehicle->Get_Definition().Get_Seat_Count();

	mov	ecx, DWORD PTR _pVehicle$4[ebp]
	call	?Get_Definition@VehicleGameObj@@QBEABVVehicleGameObjDef@@XZ ; VehicleGameObj::Get_Definition
	mov	ecx, eax
	call	?Get_Seat_Count@VehicleGameObjDef@@QBEHXZ ; VehicleGameObjDef::Get_Seat_Count
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1945 :     m_pPassengerIds = new int[m_nSeats];

	push	OFFSET ??_C@_0CA@DGBMODGB@dp88_radarInvisibility?3?3Created?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN9@Created
	xor	edx, edx
	jne	SHORT $LN8@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN8@Created:
	mov	DWORD PTR tv167[ebp], 0
	jmp	SHORT $LN10@Created
$LN9@Created:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv167[ebp], eax
$LN10@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR [ecx+32], edx

; 1946 :     m_pPassengerRadarModes = new int[m_nSeats];

	push	OFFSET ??_C@_0CA@DGBMODGB@dp88_radarInvisibility?3?3Created?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 18					; 00000012H
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN12@Created
	xor	edx, edx
	jne	SHORT $LN11@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 18					; 00000012H
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@Created:
	mov	DWORD PTR tv188[ebp], 0
	jmp	SHORT $LN13@Created
$LN12@Created:
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv188[ebp], eax
$LN13@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv188[ebp]
	mov	DWORD PTR [ecx+36], edx

; 1947 :     for ( int i = 0; i < m_nSeats; ++i )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@Created
$LN2@Created:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jge	SHORT $LN6@Created

; 1948 :       m_pPassengerIds[i] = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
	jmp	SHORT $LN2@Created
$LN6@Created:

; 1949 :   }
; 1950 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_radarInvisibility@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_radarInvisibility::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.h
;	COMDAT ??0dp88_radarInvisibility@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_radarInvisibility@@QAE@XZ PROC			; dp88_radarInvisibility::dp88_radarInvisibility, COMDAT
; _this$ = ecx

; 752  :   dp88_radarInvisibility() : m_pPassengerIds(0), m_pPassengerRadarModes(0), m_nSeats(0) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_radarInvisibility@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_radarInvisibility@@QAE@XZ ENDP			; dp88_radarInvisibility::dp88_radarInvisibility
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_conquestControlObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_conquestControlObject@@UAEPAXI@Z PROC		; dp88_conquestControlObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_conquestControlObject@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_conquestControlObject@@UAEPAXI@Z ENDP		; dp88_conquestControlObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_conquestControlObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_conquestControlObject@@UAE@XZ PROC		; dp88_conquestControlObject::~dp88_conquestControlObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_conquestControlObject@@UAE@XZ ENDP		; dp88_conquestControlObject::~dp88_conquestControlObject
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_conquestControlObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_conquestControlObject@@QAE@XZ PROC		; dp88_conquestControlObject::dp88_conquestControlObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_conquestControlObject@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_conquestControlObject@@QAE@XZ ENDP		; dp88_conquestControlObject::dp88_conquestControlObject
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv75 = -84						; size = 4
_custom$1 = -16						; size = 4
_pController$2 = -12					; size = 4
_team$3 = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_conquestControlObject::Timer_Expired, COMDAT
; _this$ = ecx

; 1886 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1887 :   if ( number == TIMER_CONQUEST_TICK )

	cmp	DWORD PTR _number$[ebp], -620560381	; db030003H
	jne	$LN4@Timer_Expi

; 1888 :   {
; 1889 :     int team = Get_Object_Type(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	DWORD PTR _team$3[ebp], eax

; 1890 :     if ( team == 0 || team == 1 )

	cmp	DWORD PTR _team$3[ebp], 0
	je	SHORT $LN2@Timer_Expi
	cmp	DWORD PTR _team$3[ebp], 1
	jne	SHORT $LN3@Timer_Expi
$LN2@Timer_Expi:

; 1891 :     {
; 1892 :       GameObject* pController = Commands->Find_Object(m_controllerID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pController$2[ebp], eax

; 1893 :       if ( !pController )

	cmp	DWORD PTR _pController$2[ebp], 0
	jne	SHORT $LN1@Timer_Expi

; 1894 :         return;

	jmp	$LN5@Timer_Expi
$LN1@Timer_Expi:

; 1895 : 
; 1896 :       // Grant points to owning team
; 1897 :       int custom = (team==0) ? CUSTOM_CONQUEST_GIVEPOINTS_T0 : CUSTOM_CONQUEST_GIVEPOINTS_T1;

	cmp	DWORD PTR _team$3[ebp], 0
	jne	SHORT $LN7@Timer_Expi
	mov	DWORD PTR tv75[ebp], -637337599		; da030001H
	jmp	SHORT $LN8@Timer_Expi
$LN7@Timer_Expi:
	mov	DWORD PTR tv75[ebp], -637337598		; da030002H
$LN8@Timer_Expi:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR _custom$1[ebp], eax

; 1898 :       Commands->Send_Custom_Event ( pObj, pController, custom, Get_Int_Parameter("TickPoints"), 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0L@FLMEOFAO@TickPoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR _custom$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pController$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 20					; 00000014H
$LN3@Timer_Expi:

; 1899 :     }
; 1900 : 
; 1901 :     // Always run the tick timer since we don't track the ownership state in a think timer
; 1902 :     Commands->Start_Timer( pObj, this, (float)Get_Int_Parameter("TickInterval"), TIMER_CONQUEST_TICK );

	push	-620560381				; db030003H
	push	OFFSET ??_C@_0N@NGCHBJOK@TickInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN4@Timer_Expi:
$LN5@Timer_Expi:

; 1903 :   }
; 1904 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_conquestControlObject::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_pController$ = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_conquestControlObject::Created, COMDAT
; _this$ = ecx

; 1868 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1869 :   // Find the controller
; 1870 :   GameObject* pController = Find_Object_With_Script("dp88_conquestController");

	push	OFFSET ??_C@_0BI@ILMCAMOM@dp88_conquestController?$AA@
	call	?Find_Object_With_Script@@YAPAVScriptableGameObj@@PBD@Z ; Find_Object_With_Script
	add	esp, 4
	mov	DWORD PTR _pController$[ebp], eax

; 1871 :   if ( !pController )

	cmp	DWORD PTR _pController$[ebp], 0
	jne	SHORT $LN1@Created

; 1872 :   {
; 1873 :     Console_Output ( "[%d:%s:%s] Critical Error: Conquest controller object not found. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FH@LKMMDFJH@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Conqu@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 1874 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 1875 :     return;

	jmp	SHORT $LN2@Created
$LN1@Created:

; 1876 :   }
; 1877 :   m_controllerID = Commands->Get_ID(pController);

	mov	eax, DWORD PTR _pController$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1878 : 
; 1879 :   // Always run the tick timer since we don't track the ownership state in a think timer
; 1880 :   Commands->Start_Timer( pObj, this, (float)Get_Int_Parameter("TickInterval"), TIMER_CONQUEST_TICK );

	push	-620560381				; db030003H
	push	OFFSET ??_C@_0N@NGCHBJOK@TickInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@Created:

; 1881 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_conquestControlObject@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_conquestControlObject::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_conquestControlZone@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_conquestControlZone@@UAEPAXI@Z PROC		; dp88_conquestControlZone::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_conquestControlZone@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_conquestControlZone@@UAEPAXI@Z ENDP		; dp88_conquestControlZone::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_conquestControlZone@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_conquestControlZone@@UAE@XZ PROC		; dp88_conquestControlZone::~dp88_conquestControlZone, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_conquestControlZone@@UAE@XZ ENDP		; dp88_conquestControlZone::~dp88_conquestControlZone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_conquestControlZone@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_conquestControlZone@@QAE@XZ PROC		; dp88_conquestControlZone::dp88_conquestControlZone, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_conquestControlZone@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_conquestControlZone@@QAE@XZ ENDP		; dp88_conquestControlZone::dp88_conquestControlZone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z
_TEXT	SEGMENT
tv83 = -92						; size = 4
tv85 = -88						; size = 4
tv74 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
$T3 = -76						; size = 4
_team$ = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_message$ = 12						; size = 4
_sendtoteam$ = 16					; size = 4
?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z PROC ; dp88_conquestControlZone::DisplayMessage, COMDAT
; _this$ = ecx

; 1811 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1812 :   int team = Get_Object_Type(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	DWORD PTR _team$[ebp], eax

; 1813 :   message.Replace("%OWNINGTEAM%", ((team==2)?"Neither":Get_Team_Name(team)), false);

	cmp	DWORD PTR _team$[ebp], 2
	jne	SHORT $LN5@DisplayMes
	mov	DWORD PTR tv74[ebp], OFFSET ??_C@_07PBGKEGMF@Neither?$AA@
	jmp	SHORT $LN6@DisplayMes
$LN5@DisplayMes:
	mov	eax, DWORD PTR _team$[ebp]
	push	eax
	call	?Get_Team_Name@@YAPBDH@Z		; Get_Team_Name
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
$LN6@DisplayMes:
	push	-1
	push	0
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	push	OFFSET ??_C@_0N@LGEENECO@?$CFOWNINGTEAM?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z

; 1814 :   message.Replace("%OTHERTEAM%", ((team==2)?"Neither":Get_Team_Name((team==0)?1:0)), false);

	cmp	DWORD PTR _team$[ebp], 2
	jne	SHORT $LN9@DisplayMes
	mov	DWORD PTR tv85[ebp], OFFSET ??_C@_07PBGKEGMF@Neither?$AA@
	jmp	SHORT $LN10@DisplayMes
$LN9@DisplayMes:
	cmp	DWORD PTR _team$[ebp], 0
	jne	SHORT $LN7@DisplayMes
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN8@DisplayMes
$LN7@DisplayMes:
	mov	DWORD PTR tv83[ebp], 0
$LN8@DisplayMes:
	mov	eax, DWORD PTR tv83[ebp]
	push	eax
	call	?Get_Team_Name@@YAPBDH@Z		; Get_Team_Name
	add	esp, 4
	mov	DWORD PTR tv85[ebp], eax
$LN10@DisplayMes:
	push	-1
	push	0
	mov	ecx, DWORD PTR tv85[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@PFJPKHJP@?$CFOTHERTEAM?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z

; 1815 : 
; 1816 :   message.Replace("%CAPTUREPOINTS%", StringClass::getFormattedString("%d",Get_Int_Parameter("CapturePoints")), false);

	push	-1
	push	0
	push	OFFSET ??_C@_0O@DODANHJB@CapturePoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0BA@IFHPLBDK@?$CFCAPTUREPOINTS?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1817 :   message.Replace("%TICKPOINTS%", StringClass::getFormattedString("%d",Get_Int_Parameter("TickPoints")), false);

	push	-1
	push	0
	push	OFFSET ??_C@_0L@FLMEOFAO@TickPoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0N@PHPLFNK@?$CFTICKPOINTS?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1818 :   message.Replace("%TICKINTERVAL%", StringClass::getFormattedString("%d",Get_Int_Parameter("TickInterval")), false);

	push	-1
	push	0
	push	OFFSET ??_C@_0N@NGCHBJOK@TickInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0P@NCCLADPC@?$CFTICKINTERVAL?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1819 : 
; 1820 :   message.Replace("%ZONENAME%", Get_Translated_Preset_Name(pObj), false);

	push	-1
	push	0
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Translated_Preset_Name@@YAPBDPAVScriptableGameObj@@@Z ; Get_Translated_Preset_Name
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0L@EBJHDIBJ@?$CFZONENAME?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z

; 1821 : 
; 1822 :   if (2 == sendtoteam)

	cmp	DWORD PTR _sendtoteam$[ebp], 2
	jne	SHORT $LN2@DisplayMes

; 1823 :     Send_Message(50,200,50,message);

	lea	ecx, DWORD PTR _message$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	200					; 000000c8H
	push	50					; 00000032H
	call	DWORD PTR ?Send_Message@@3P6AXIIIPBD@ZA	; Send_Message
	add	esp, 16					; 00000010H

; 1824 :   else

	jmp	SHORT $LN1@DisplayMes
$LN2@DisplayMes:

; 1825 :     Send_Message_Team(team, 50,200,50,message);

	lea	ecx, DWORD PTR _message$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	200					; 000000c8H
	push	50					; 00000032H
	mov	eax, DWORD PTR _team$[ebp]
	push	eax
	call	?Send_Message_Team@@YAXHIIIPBD@Z	; Send_Message_Team
	add	esp, 20					; 00000014H
$LN1@DisplayMes:

; 1826 : }

	lea	ecx, DWORD PTR _message$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z ENDP ; dp88_conquestControlZone::DisplayMessage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?ChangeOwner@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv158 = -92						; size = 4
tv131 = -92						; size = 4
tv82 = -92						; size = 4
tv72 = -92						; size = 4
_distance$ = -24					; size = 4
_size$ = -20						; size = 12
_bAddObjectives$ = -5					; size = 1
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_team$ = 12						; size = 4
?ChangeOwner@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@H@Z PROC ; dp88_conquestControlZone::ChangeOwner, COMDAT
; _this$ = ecx

; 1769 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1770 :   // Get parameters for objectives
; 1771 :   bool bAddObjectives = (0 < m_aiPriority_soldier || 0 < m_aiPriority_lvehicle || 0 < m_aiPriority_hvehicle || 0 < m_aiPriority_aircraft);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jg	SHORT $LN9@ChangeOwne
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	jg	SHORT $LN9@ChangeOwne
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], 0
	jg	SHORT $LN9@ChangeOwne
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jg	SHORT $LN9@ChangeOwne
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN10@ChangeOwne
$LN9@ChangeOwne:
	mov	DWORD PTR tv72[ebp], 1
$LN10@ChangeOwne:
	mov	cl, BYTE PTR tv72[ebp]
	mov	BYTE PTR _bAddObjectives$[ebp], cl

; 1772 :   Vector3 size = Get_Vector3_Parameter("ZoneSize");

	push	OFFSET ??_C@_08MIAEEAJ@ZoneSize?$AA@
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Vector3_Parameter@ScriptImpClass@@QAE?AVVector3@@PBD@Z ; ScriptImpClass::Get_Vector3_Parameter

; 1773 :   int distance = (int)(min(size.X, size.Y)*0.75f);

	movss	xmm0, DWORD PTR _size$[ebp+4]
	comiss	xmm0, DWORD PTR _size$[ebp]
	jbe	SHORT $LN11@ChangeOwne
	movss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR tv82[ebp], xmm0
	jmp	SHORT $LN12@ChangeOwne
$LN11@ChangeOwne:
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR tv82[ebp], xmm0
$LN12@ChangeOwne:
	movss	xmm0, DWORD PTR tv82[ebp]
	mulss	xmm0, DWORD PTR __real@3f400000
	cvttss2si eax, xmm0
	mov	DWORD PTR _distance$[ebp], eax

; 1774 :   
; 1775 :   // Remove old objective scripts
; 1776 :   if (bAddObjectives)

	movzx	eax, BYTE PTR _bAddObjectives$[ebp]
	test	eax, eax
	je	SHORT $LN6@ChangeOwne

; 1777 :   {
; 1778 :     Remove_Script(pObj,"dp88_AI_Objective");

	push	OFFSET ??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Remove_Script@@YAXPAVScriptableGameObj@@PBD@Z ; Remove_Script
	add	esp, 8
$LN6@ChangeOwne:

; 1779 :   }
; 1780 :   
; 1781 :   if (0 == team || 1 == team)

	cmp	DWORD PTR _team$[ebp], 0
	je	SHORT $LN4@ChangeOwne
	cmp	DWORD PTR _team$[ebp], 1
	jne	$LN5@ChangeOwne
$LN4@ChangeOwne:

; 1782 :   {
; 1783 :     Set_Object_Type(pObj, team);

	mov	eax, DWORD PTR _team$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	?Set_Object_Type@@YAXPAVScriptableGameObj@@H@Z ; Set_Object_Type
	add	esp, 8

; 1784 :     m_captureState = (float)((team==0) ? (m_captureTime*-1) : m_captureTime);

	cmp	DWORD PTR _team$[ebp], 0
	jne	SHORT $LN13@ChangeOwne
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	imul	ecx, -1
	mov	DWORD PTR tv131[ebp], ecx
	jmp	SHORT $LN14@ChangeOwne
$LN13@ChangeOwne:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR tv131[ebp], eax
$LN14@ChangeOwne:
	cvtsi2ss xmm0, DWORD PTR tv131[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 1785 :     
; 1786 :     if (bAddObjectives)

	movzx	eax, BYTE PTR _bAddObjectives$[ebp]
	test	eax, eax
	je	$LN3@ChangeOwne

; 1787 :     {
; 1788 :       Attach_Script_V(pObj, "dp88_AI_Objective", "%d,2,%d,%d,%d,%d,%d", team, distance, m_aiPriority_soldier, m_aiPriority_lvehicle, m_aiPriority_hvehicle, m_aiPriority_aircraft );          // Defensive

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _distance$[ebp]
	push	edx
	mov	eax, DWORD PTR _team$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@BHCHLMDB@?$CFd?02?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@
	push	OFFSET ??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	?Attach_Script_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_V
	add	esp, 36					; 00000024H

; 1789 :       Attach_Script_V(pObj, "dp88_AI_Objective", "%d,1,%d,%d,%d,%d,%d", (team==0)?1:0, distance, m_aiPriority_soldier, m_aiPriority_lvehicle, m_aiPriority_hvehicle, m_aiPriority_aircraft ); // Offensive

	cmp	DWORD PTR _team$[ebp], 0
	jne	SHORT $LN15@ChangeOwne
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN16@ChangeOwne
$LN15@ChangeOwne:
	mov	DWORD PTR tv158[ebp], 0
$LN16@ChangeOwne:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _distance$[ebp]
	push	edx
	mov	eax, DWORD PTR tv158[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@EELNOHLF@?$CFd?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@
	push	OFFSET ??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	?Attach_Script_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_V
	add	esp, 36					; 00000024H
$LN3@ChangeOwne:

; 1790 :     }
; 1791 :   }
; 1792 :   
; 1793 :   else

	jmp	$LN1@ChangeOwne
$LN5@ChangeOwne:

; 1794 :   {
; 1795 :     Set_Object_Type(pObj, 2);

	push	2
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Set_Object_Type@@YAXPAVScriptableGameObj@@H@Z ; Set_Object_Type
	add	esp, 8

; 1796 :     m_captureState = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+36], xmm0

; 1797 :     
; 1798 :     if (bAddObjectives)

	movzx	eax, BYTE PTR _bAddObjectives$[ebp]
	test	eax, eax
	je	SHORT $LN1@ChangeOwne

; 1799 :     {
; 1800 :       Attach_Script_V(pObj, "dp88_AI_Objective", "0,1,%d,%d,%d,%d,%d", distance, m_aiPriority_soldier, m_aiPriority_lvehicle, m_aiPriority_hvehicle, m_aiPriority_aircraft );          // Defensive

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _distance$[ebp]
	push	edx
	push	OFFSET ??_C@_0BD@BHDEOPID@0?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@
	push	OFFSET ??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Attach_Script_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_V
	add	esp, 32					; 00000020H

; 1801 :       Attach_Script_V(pObj, "dp88_AI_Objective", "1,1,%d,%d,%d,%d,%d", distance, m_aiPriority_soldier, m_aiPriority_lvehicle, m_aiPriority_hvehicle, m_aiPriority_aircraft ); // Offensive

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _distance$[ebp]
	push	edx
	push	OFFSET ??_C@_0BD@MANGGPNL@1?01?0?$CFd?0?$CFd?0?$CFd?0?$CFd?0?$CFd?$AA@
	push	OFFSET ??_C@_0BC@MPHFOHOH@dp88_AI_Objective?$AA@
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Attach_Script_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_V
	add	esp, 32					; 00000020H
$LN1@ChangeOwne:

; 1802 :     }
; 1803 :   }
; 1804 : 
; 1805 :   UpdateAnimationFrame(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimationFrame@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@@Z ; dp88_conquestControlZone::UpdateAnimationFrame

; 1806 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeOwner@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_conquestControlZone::ChangeOwner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?UpdateAnimationFrame@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv138 = -84						; size = 4
tv159 = -80						; size = 4
tv83 = -80						; size = 4
_teamFrames$ = -12					; size = 4
_animFrame$ = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?UpdateAnimationFrame@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@@Z PROC ; dp88_conquestControlZone::UpdateAnimationFrame, COMDAT
; _this$ = ecx

; 1759 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1760 :   int animFrame = 1+m_nAnimTransitionFrames;  // Neutral frame

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, 1
	mov	DWORD PTR _animFrame$[ebp], ecx

; 1761 :   int teamFrames = (int)floor((1+m_nAnimTransitionFrames) * (abs(m_captureState)/m_captureTime));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, 1
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [edx+36]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv159[ebp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv138[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+44]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv159[ebp]
	mulss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR _teamFrames$[ebp], eax

; 1762 :   animFrame += (m_captureState<0) ? (teamFrames*-1) : teamFrames;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+36]
	jbe	SHORT $LN3@UpdateAnim
	mov	ecx, DWORD PTR _teamFrames$[ebp]
	imul	ecx, -1
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN4@UpdateAnim
$LN3@UpdateAnim:
	mov	edx, DWORD PTR _teamFrames$[ebp]
	mov	DWORD PTR tv83[ebp], edx
$LN4@UpdateAnim:
	mov	eax, DWORD PTR _animFrame$[ebp]
	add	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR _animFrame$[ebp], eax

; 1763 :   Commands->Set_Animation_Frame(pObj, Get_Parameter("CaptureAnim"), animFrame);

	mov	eax, DWORD PTR _animFrame$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@OHMKNGLK@CaptureAnim?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+168]
	call	eax
	add	esp, 12					; 0000000cH

; 1764 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateAnimationFrame@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@@Z ENDP ; dp88_conquestControlZone::UpdateAnimationFrame
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?IncrementCaptureProgress@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@HH@Z
_TEXT	SEGMENT
tv303 = -136						; size = 4
tv76 = -136						; size = 4
tv68 = -136						; size = 4
$T1 = -128						; size = 4
$T2 = -120						; size = 4
$T3 = -112						; size = 4
$T4 = -104						; size = 4
$T5 = -96						; size = 4
_stringId$6 = -28					; size = 4
_stringId$7 = -24					; size = 4
_stringId$8 = -20					; size = 4
_oldCaptureState$ = -16					; size = 4
_progress$ = -12					; size = 4
_targetState$ = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_team$ = 12						; size = 4
_nPlayers$ = 16						; size = 4
?IncrementCaptureProgress@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@HH@Z PROC ; dp88_conquestControlZone::IncrementCaptureProgress, COMDAT
; _this$ = ecx

; 1675 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1676 :   // If the team already fully controls the zone then don't do anything
; 1677 :   int targetState = (team==0) ? (m_captureTime*-1) : m_captureTime;

	cmp	DWORD PTR _team$[ebp], 0
	jne	SHORT $LN21@IncrementC
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	imul	ecx, -1
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN22@IncrementC
$LN21@IncrementC:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR tv68[ebp], eax
$LN22@IncrementC:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _targetState$[ebp], ecx

; 1678 :   if ( m_captureState == targetState || nPlayers == 0 )

	cvtsi2ss xmm0, DWORD PTR _targetState$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+36]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN17@IncrementC
	cmp	DWORD PTR _nPlayers$[ebp], 0
	jne	SHORT $LN18@IncrementC
$LN17@IncrementC:

; 1679 :     return;

	jmp	$LN19@IncrementC
$LN18@IncrementC:

; 1680 : 
; 1681 :   // Apply multi capture cap and work out the additional progress to be applied
; 1682 :   nPlayers = min(nPlayers,m_multiCaptureCap);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nPlayers$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jge	SHORT $LN23@IncrementC
	mov	edx, DWORD PTR _nPlayers$[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN24@IncrementC
$LN23@IncrementC:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR tv76[ebp], ecx
$LN24@IncrementC:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _nPlayers$[ebp], edx

; 1683 :   float progress = 1.0f + ((nPlayers-1)*m_multiCaptureMultiplier);

	mov	eax, DWORD PTR _nPlayers$[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+52]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _progress$[ebp], xmm0

; 1684 :   float oldCaptureState = m_captureState;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR _oldCaptureState$[ebp], xmm0

; 1685 : 
; 1686 :   // Apply progress
; 1687 :   if ( team == 0 )

	cmp	DWORD PTR _team$[ebp], 0
	jne	SHORT $LN16@IncrementC

; 1688 :   {
; 1689 :     m_captureState -= progress;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	subss	xmm0, DWORD PTR _progress$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 1690 :     if ( m_captureState < targetState )

	cvtsi2ss xmm0, DWORD PTR _targetState$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+36]
	jbe	SHORT $LN15@IncrementC

; 1691 :       m_captureState = (float)targetState;

	cvtsi2ss xmm0, DWORD PTR _targetState$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+36], xmm0
$LN15@IncrementC:

; 1692 :   }
; 1693 :   else

	jmp	SHORT $LN13@IncrementC
$LN16@IncrementC:

; 1694 :   {
; 1695 :     m_captureState += progress;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR _progress$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 1696 :     if ( m_captureState > targetState )

	cvtsi2ss xmm0, DWORD PTR _targetState$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+36]
	comiss	xmm1, xmm0
	jbe	SHORT $LN13@IncrementC

; 1697 :       m_captureState = (float)targetState;

	cvtsi2ss xmm0, DWORD PTR _targetState$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+36], xmm0
$LN13@IncrementC:

; 1698 :   }
; 1699 : 
; 1700 : 
; 1701 :   // Have we taken control of the zone?
; 1702 :   if ( m_captureState == targetState && Get_Object_Type(pObj) != team )

	cvtsi2ss xmm0, DWORD PTR _targetState$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+36]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	$LN12@IncrementC
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	eax, DWORD PTR _team$[ebp]
	je	$LN12@IncrementC

; 1703 :   {
; 1704 :     // Send control taken message
; 1705 :     ChangeOwner(pObj, team);

	mov	eax, DWORD PTR _team$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeOwner@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@H@Z ; dp88_conquestControlZone::ChangeOwner

; 1706 : 
; 1707 :     int stringId = Get_String_ID_By_Desc(Get_Parameter("CapturedString"));

	push	OFFSET ??_C@_0P@GPBLCIGD@CapturedString?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Get_String_ID_By_Desc@@YAKPBD@Z	; Get_String_ID_By_Desc
	add	esp, 4
	mov	DWORD PTR _stringId$8[ebp], eax

; 1708 :     if ( stringId != 0 )

	cmp	DWORD PTR _stringId$8[ebp], 0
	je	SHORT $LN11@IncrementC

; 1709 :     {
; 1710 :       DisplayMessage(pObj, StringClass(Get_Translated_String(stringId)));

	push	2
	push	ecx
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _stringId$8[ebp]
	push	eax
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z ; dp88_conquestControlZone::DisplayMessage
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1711 :     }
; 1712 :     else

	jmp	SHORT $LN10@IncrementC
$LN11@IncrementC:

; 1713 :     {
; 1714 :       DisplayMessage(pObj, StringClass("A conquest zone has been captured by %OWNINGTEAM%"));

	push	2
	push	ecx
	mov	esi, esp
	push	0
	push	0
	push	OFFSET ??_C@_0DC@GHEBELKI@A?5conquest?5zone?5has?5been?5capture@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z ; dp88_conquestControlZone::DisplayMessage
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN10@IncrementC:

; 1715 :     }
; 1716 : 
; 1717 :     // \todo Give capture points
; 1718 : 
; 1719 :     if ( !m_bTickRunning )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	jne	SHORT $LN9@IncrementC

; 1720 :       Commands->Start_Timer( pObj, this, (float)Get_Int_Parameter("TickInterval"), TIMER_CONQUEST_TICK );

	push	-620560381				; db030003H
	push	OFFSET ??_C@_0N@NGCHBJOK@TickInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN9@IncrementC:

; 1721 :   }
; 1722 : 
; 1723 : 
; 1724 :   // Has the zone become neutral?
; 1725 :   else if ( (m_captureState == 0.0f || (team == 0 && m_captureState < 0.0f) || (team == 1 && m_captureState > 0.0f))

	jmp	$LN3@IncrementC
$LN12@IncrementC:

; 1726 :     && Get_Object_Type(pObj) != 2 )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@IncrementC
	cmp	DWORD PTR _team$[ebp], 0
	jne	SHORT $LN5@IncrementC
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+36]
	ja	SHORT $LN6@IncrementC
$LN5@IncrementC:
	cmp	DWORD PTR _team$[ebp], 1
	jne	$LN3@IncrementC
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN3@IncrementC
$LN6@IncrementC:
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	eax, 2
	je	$LN3@IncrementC

; 1727 :   {
; 1728 :     // Send neutral message
; 1729 :     ChangeOwner(pObj, 2);

	push	2
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeOwner@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@H@Z ; dp88_conquestControlZone::ChangeOwner

; 1730 : 
; 1731 :     int stringId = Get_String_ID_By_Desc(Get_Parameter("NeutralString"));

	push	OFFSET ??_C@_0O@FEAPEDLG@NeutralString?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Get_String_ID_By_Desc@@YAKPBD@Z	; Get_String_ID_By_Desc
	add	esp, 4
	mov	DWORD PTR _stringId$7[ebp], eax

; 1732 :     if ( stringId != 0 )

	cmp	DWORD PTR _stringId$7[ebp], 0
	je	SHORT $LN4@IncrementC

; 1733 :     {
; 1734 :       DisplayMessage(pObj, StringClass(Get_Translated_String(stringId)));

	push	2
	push	ecx
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _stringId$7[ebp]
	push	eax
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z ; dp88_conquestControlZone::DisplayMessage
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1735 :     }
; 1736 :     else

	jmp	SHORT $LN3@IncrementC
$LN4@IncrementC:

; 1737 :     {
; 1738 :       DisplayMessage(pObj, StringClass("A conquest zone has become neutral"));

	push	2
	push	ecx
	mov	esi, esp
	push	0
	push	0
	push	OFFSET ??_C@_0CD@IPEDPOEA@A?5conquest?5zone?5has?5become?5neutr@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z ; dp88_conquestControlZone::DisplayMessage
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN3@IncrementC:

; 1739 :     }
; 1740 :   }
; 1741 : 
; 1742 : 
; 1743 :   // Display warning message to owning team if it has just started being captured
; 1744 :   if ( oldCaptureState == targetState*-1 )

	mov	eax, DWORD PTR _targetState$[ebp]
	imul	eax, -1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _oldCaptureState$[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IncrementC

; 1745 :   {
; 1746 :     int stringId = Get_String_ID_By_Desc(Get_Parameter("CapturingString"));

	push	OFFSET ??_C@_0BA@CJIIKAJH@CapturingString?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Get_String_ID_By_Desc@@YAKPBD@Z	; Get_String_ID_By_Desc
	add	esp, 4
	mov	DWORD PTR _stringId$6[ebp], eax

; 1747 :     if ( stringId != 0 )

	cmp	DWORD PTR _stringId$6[ebp], 0
	je	SHORT $LN1@IncrementC

; 1748 :     {
; 1749 :       DisplayMessage(pObj, StringClass(Get_Translated_String(stringId)), (team==0)?1:0);

	cmp	DWORD PTR _team$[ebp], 0
	jne	SHORT $LN25@IncrementC
	mov	DWORD PTR tv303[ebp], 1
	jmp	SHORT $LN26@IncrementC
$LN25@IncrementC:
	mov	DWORD PTR tv303[ebp], 0
$LN26@IncrementC:
	mov	eax, DWORD PTR tv303[ebp]
	push	eax
	push	ecx
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _stringId$6[ebp]
	push	ecx
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@VStringClass@@H@Z ; dp88_conquestControlZone::DisplayMessage
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@IncrementC:

; 1750 :     }
; 1751 :   }
; 1752 : 
; 1753 :   UpdateAnimationFrame(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimationFrame@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@@Z ; dp88_conquestControlZone::UpdateAnimationFrame
$LN19@IncrementC:

; 1754 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?IncrementCaptureProgress@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@HH@Z ENDP ; dp88_conquestControlZone::IncrementCaptureProgress
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv240 = -124						; size = 4
tv380 = -120						; size = 4
tv338 = -120						; size = 4
tv282 = -120						; size = 4
tv241 = -120						; size = 4
tv212 = -120						; size = 4
_custom$1 = -52						; size = 4
_pController$2 = -48					; size = 4
_team$3 = -44						; size = 4
_targetState$4 = -40					; size = 4
_team$5 = -36						; size = 4
_capturingTeam$6 = -32					; size = 4
_team$7 = -28						; size = 4
_o$8 = -24						; size = 4
_z$9 = -20						; size = 4
_nPlayers$10 = -16					; size = 8
_pZone$ = -8						; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@H@Z PROC ; dp88_conquestControlZone::Timer_Expired, COMDAT
; _this$ = ecx

; 1580 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1581 :   ScriptZoneGameObj* pZone = (ScriptZoneGameObj*)Commands->Find_Object(m_zoneID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pZone$[ebp], eax

; 1582 :   if ( !pZone || !((GameObject*)pZone)->As_ScriptZoneGameObj() )   // Sanity checking

	cmp	DWORD PTR _pZone$[ebp], 0
	je	SHORT $LN26@Timer_Expi
	mov	eax, DWORD PTR _pZone$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pZone$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	test	eax, eax
	jne	SHORT $LN27@Timer_Expi
$LN26@Timer_Expi:

; 1583 :     return;

	jmp	$LN28@Timer_Expi
$LN27@Timer_Expi:

; 1584 : 
; 1585 :   if ( number == TIMER_CONQUEST_THINK )

	cmp	DWORD PTR _number$[ebp], -620560380	; db030004H
	jne	$LN25@Timer_Expi

; 1586 :   {
; 1587 :     // Count the objects inside the zone - not we don't simply use Get_Object_Count_In_Zone because
; 1588 :     // we don't want to count vehicles *and* their drivers... but we do want to allow AI units to
; 1589 :     // contribute. Also ignore dead units...
; 1590 :     int nPlayers[2] = {0};

	mov	DWORD PTR _nPlayers$10[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _nPlayers$10[ebp+4], eax

; 1591 :     for (SLNode<SmartGameObj> *z = GameObjManager::SmartGameObjList.Head();z;z = z->Next())

	mov	ecx, DWORD PTR ?SmartGameObjList@GameObjManager@@2AAV?$SList@VSmartGameObj@@@@A ; GameObjManager::SmartGameObjList
	call	?Head@?$SList@VSmartGameObj@@@@QBEPAV?$SLNode@VSmartGameObj@@@@XZ ; SList<SmartGameObj>::Head
	mov	DWORD PTR _z$9[ebp], eax
	jmp	SHORT $LN24@Timer_Expi
$LN23@Timer_Expi:
	mov	ecx, DWORD PTR _z$9[ebp]
	call	?Next@?$SLNode@VSmartGameObj@@@@QBEPAV1@XZ ; SLNode<SmartGameObj>::Next
	mov	DWORD PTR _z$9[ebp], eax
$LN24@Timer_Expi:
	cmp	DWORD PTR _z$9[ebp], 0
	je	$LN22@Timer_Expi

; 1592 :     {
; 1593 :       SmartGameObj* o = z->Data();

	mov	ecx, DWORD PTR _z$9[ebp]
	call	?Data@?$SLNode@VSmartGameObj@@@@QBEPAVSmartGameObj@@XZ ; SLNode<SmartGameObj>::Data
	mov	DWORD PTR _o$8[ebp], eax

; 1594 :       int team = Get_Object_Type(o);

	mov	eax, DWORD PTR _o$8[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	DWORD PTR _team$7[ebp], eax

; 1595 :       if ( Commands->Get_Health(o) == 0 || team < 0 || team > 2 || !pZone->Inside_Me(o) )

	mov	eax, DWORD PTR _o$8[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv338[ebp]
	movss	xmm0, DWORD PTR tv338[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN20@Timer_Expi
	cmp	DWORD PTR _team$7[ebp], 0
	jl	SHORT $LN20@Timer_Expi
	cmp	DWORD PTR _team$7[ebp], 2
	jg	SHORT $LN20@Timer_Expi
	mov	eax, DWORD PTR _o$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _pZone$[ebp]
	call	?Inside_Me@ScriptZoneGameObj@@QAE_NPAVPhysicalGameObj@@@Z ; ScriptZoneGameObj::Inside_Me
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN21@Timer_Expi
$LN20@Timer_Expi:

; 1596 :         continue;

	jmp	SHORT $LN23@Timer_Expi
$LN21@Timer_Expi:

; 1597 : 
; 1598 :       // Only AI-enabled vehicles count
; 1599 :       if ( o->As_VehicleGameObj() && !((VehicleGameObj*)o)->Get_Action()->Is_Acting() )

	mov	eax, DWORD PTR _o$8[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _o$8[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	je	SHORT $LN19@Timer_Expi
	mov	ecx, DWORD PTR _o$8[ebp]
	call	?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ ; SmartGameObj::Get_Action
	mov	ecx, eax
	call	?Is_Acting@ActionClass@@QAE_NXZ		; ActionClass::Is_Acting
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN19@Timer_Expi

; 1600 :         continue;

	jmp	$LN23@Timer_Expi
$LN19@Timer_Expi:

; 1601 : 
; 1602 :       nPlayers[team]++;

	mov	eax, DWORD PTR _team$7[ebp]
	mov	ecx, DWORD PTR _nPlayers$10[ebp+eax*4]
	add	ecx, 1
	mov	edx, DWORD PTR _team$7[ebp]
	mov	DWORD PTR _nPlayers$10[ebp+edx*4], ecx

; 1603 :     }

	jmp	$LN23@Timer_Expi
$LN22@Timer_Expi:

; 1604 : 
; 1605 :     // Check which team currently controls the area inside the zone (and can therefore capture it)
; 1606 :     int capturingTeam = -1;

	mov	DWORD PTR _capturingTeam$6[ebp], -1

; 1607 :     if ( nPlayers[0] != nPlayers[1] )

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _nPlayers$10[ebp+eax]
	cmp	edx, DWORD PTR _nPlayers$10[ebp+ecx]
	je	SHORT $LN14@Timer_Expi

; 1608 :     {
; 1609 :       if ( nPlayers[0] > nPlayers[1] && (nPlayers[1] == 0 || m_bAllowMajorityCapture) )

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _nPlayers$10[ebp+eax]
	cmp	edx, DWORD PTR _nPlayers$10[ebp+ecx]
	jle	SHORT $LN17@Timer_Expi
	mov	eax, 4
	shl	eax, 0
	cmp	DWORD PTR _nPlayers$10[ebp+eax], 0
	je	SHORT $LN16@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN17@Timer_Expi
$LN16@Timer_Expi:

; 1610 :         capturingTeam = 0;

	mov	DWORD PTR _capturingTeam$6[ebp], 0
	jmp	SHORT $LN14@Timer_Expi
$LN17@Timer_Expi:

; 1611 :       else if ( nPlayers[1] > nPlayers[0] && (nPlayers[0] == 0 || m_bAllowMajorityCapture) )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _nPlayers$10[ebp+eax]
	cmp	edx, DWORD PTR _nPlayers$10[ebp+ecx]
	jle	SHORT $LN14@Timer_Expi
	mov	eax, 4
	imul	eax, 0
	cmp	DWORD PTR _nPlayers$10[ebp+eax], 0
	je	SHORT $LN13@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN14@Timer_Expi
$LN13@Timer_Expi:

; 1612 :         capturingTeam = 1;

	mov	DWORD PTR _capturingTeam$6[ebp], 1
$LN14@Timer_Expi:

; 1613 :     }
; 1614 : 
; 1615 :     // Increment the capture progress for the team in control of the area inside the zone
; 1616 :     if ( capturingTeam != -1 )

	cmp	DWORD PTR _capturingTeam$6[ebp], -1
	je	SHORT $LN12@Timer_Expi

; 1617 :       IncrementCaptureProgress ( pObj, capturingTeam, nPlayers[capturingTeam]-nPlayers[(capturingTeam==0)?1:0] );

	cmp	DWORD PTR _capturingTeam$6[ebp], 0
	jne	SHORT $LN30@Timer_Expi
	mov	DWORD PTR tv212[ebp], 1
	jmp	SHORT $LN31@Timer_Expi
$LN30@Timer_Expi:
	mov	DWORD PTR tv212[ebp], 0
$LN31@Timer_Expi:
	mov	eax, DWORD PTR _capturingTeam$6[ebp]
	mov	ecx, DWORD PTR tv212[ebp]
	mov	edx, DWORD PTR _nPlayers$10[ebp+eax*4]
	sub	edx, DWORD PTR _nPlayers$10[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _capturingTeam$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementCaptureProgress@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@HH@Z ; dp88_conquestControlZone::IncrementCaptureProgress
	jmp	$LN10@Timer_Expi
$LN12@Timer_Expi:

; 1618 : 
; 1619 : 
; 1620 :     // Otherwise revert to previous state if partially captured and nobody is in the zone (don't
; 1621 :     // trigger this if there are players in the zone but they don't currently qualify to capture it,
; 1622 :     // avoids losing capture progress whilst fending off enemy attackers)
; 1623 :     else if ( (nPlayers[0] == 0 && nPlayers[1] == 0) && m_captureState != 0.0f && abs(m_captureState) != m_captureTime )

	mov	eax, 4
	imul	eax, 0
	cmp	DWORD PTR _nPlayers$10[ebp+eax], 0
	jne	$LN10@Timer_Expi
	mov	eax, 4
	shl	eax, 0
	cmp	DWORD PTR _nPlayers$10[ebp+eax], 0
	jne	$LN10@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN10@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv380[ebp]
	movss	xmm0, DWORD PTR tv380[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+44]
	ucomiss	xmm0, xmm1
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN10@Timer_Expi

; 1624 :     {
; 1625 :       int team = Get_Object_Type(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	DWORD PTR _team$5[ebp], eax

; 1626 :       int targetState = (team==2) ? 0 : ((team==0) ? (m_captureTime*-1) : m_captureTime);

	cmp	DWORD PTR _team$5[ebp], 2
	jne	SHORT $LN34@Timer_Expi
	mov	DWORD PTR tv241[ebp], 0
	jmp	SHORT $LN35@Timer_Expi
$LN34@Timer_Expi:
	cmp	DWORD PTR _team$5[ebp], 0
	jne	SHORT $LN32@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	imul	ecx, -1
	mov	DWORD PTR tv240[ebp], ecx
	jmp	SHORT $LN33@Timer_Expi
$LN32@Timer_Expi:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR tv240[ebp], eax
$LN33@Timer_Expi:
	mov	ecx, DWORD PTR tv240[ebp]
	mov	DWORD PTR tv241[ebp], ecx
$LN35@Timer_Expi:
	mov	edx, DWORD PTR tv241[ebp]
	mov	DWORD PTR _targetState$4[ebp], edx

; 1627 : 
; 1628 :       if ( targetState > m_captureState )

	cvtsi2ss xmm0, DWORD PTR _targetState$4[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+36]
	jbe	SHORT $LN9@Timer_Expi

; 1629 :       {
; 1630 :         m_captureState += 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 1631 :         if ( m_captureState > targetState )

	cvtsi2ss xmm0, DWORD PTR _targetState$4[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+36]
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@Timer_Expi

; 1632 :           m_captureState = (float)targetState;

	cvtsi2ss xmm0, DWORD PTR _targetState$4[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+36], xmm0
$LN8@Timer_Expi:

; 1633 :       }
; 1634 :       else

	jmp	SHORT $LN6@Timer_Expi
$LN9@Timer_Expi:

; 1635 :       {
; 1636 :         m_captureState -= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 1637 :         if ( m_captureState < targetState )

	cvtsi2ss xmm0, DWORD PTR _targetState$4[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+36]
	jbe	SHORT $LN6@Timer_Expi

; 1638 :           m_captureState = (float)targetState;

	cvtsi2ss xmm0, DWORD PTR _targetState$4[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+36], xmm0
$LN6@Timer_Expi:

; 1639 :       }
; 1640 : 
; 1641 :       UpdateAnimationFrame(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateAnimationFrame@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@@Z ; dp88_conquestControlZone::UpdateAnimationFrame
$LN10@Timer_Expi:

; 1642 :     }
; 1643 : 
; 1644 : 
; 1645 :     // Restart timer
; 1646 :     Commands->Start_Timer( pObj, this, 1.0f, TIMER_CONQUEST_THINK );

	push	-620560380				; db030004H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
	jmp	$LN1@Timer_Expi
$LN25@Timer_Expi:

; 1647 :   }
; 1648 : 
; 1649 : 
; 1650 : 
; 1651 : 
; 1652 :   else if ( number == TIMER_CONQUEST_TICK )

	cmp	DWORD PTR _number$[ebp], -620560381	; db030003H
	jne	$LN1@Timer_Expi

; 1653 :   {
; 1654 :     int team = Get_Object_Type(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	DWORD PTR _team$3[ebp], eax

; 1655 :     if ( team != 2 )

	cmp	DWORD PTR _team$3[ebp], 2
	je	$LN3@Timer_Expi

; 1656 :     {
; 1657 :       GameObject* pController = Commands->Find_Object(m_controllerID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _pController$2[ebp], eax

; 1658 :       if ( !pController )

	cmp	DWORD PTR _pController$2[ebp], 0
	jne	SHORT $LN2@Timer_Expi

; 1659 :         return;

	jmp	$LN28@Timer_Expi
$LN2@Timer_Expi:

; 1660 : 
; 1661 :       // Grant points to owning team
; 1662 :       int custom = (team==0) ? CUSTOM_CONQUEST_GIVEPOINTS_T0 : CUSTOM_CONQUEST_GIVEPOINTS_T1;

	cmp	DWORD PTR _team$3[ebp], 0
	jne	SHORT $LN36@Timer_Expi
	mov	DWORD PTR tv282[ebp], -637337599	; da030001H
	jmp	SHORT $LN37@Timer_Expi
$LN36@Timer_Expi:
	mov	DWORD PTR tv282[ebp], -637337598	; da030002H
$LN37@Timer_Expi:
	mov	eax, DWORD PTR tv282[ebp]
	mov	DWORD PTR _custom$1[ebp], eax

; 1663 :       Commands->Send_Custom_Event ( pObj, pController, custom, Get_Int_Parameter("TickPoints"), 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0L@FLMEOFAO@TickPoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR _custom$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pController$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 20					; 00000014H

; 1664 : 
; 1665 :       Commands->Start_Timer( pObj, this, (float)Get_Int_Parameter("TickInterval"), TIMER_CONQUEST_TICK );

	push	-620560381				; db030003H
	push	OFFSET ??_C@_0N@NGCHBJOK@TickInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 1666 :     }
; 1667 :     else

	jmp	SHORT $LN1@Timer_Expi
$LN3@Timer_Expi:

; 1668 :       m_bTickRunning = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0
$LN1@Timer_Expi:
$LN28@Timer_Expi:

; 1669 :   }
; 1670 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_conquestControlZone::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv416 = -228						; size = 4
tv237 = -228						; size = 4
$T1 = -224						; size = 12
$T2 = -212						; size = 12
_team$ = -136						; size = 4
_pZone$ = -132						; size = 4
_zoneBoundingBox$ = -128				; size = 60
_rotation$ = -68					; size = 36
_size$ = -32						; size = 12
_position$ = -20					; size = 12
_pController$ = -8					; size = 4
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Created@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@@Z PROC ; dp88_conquestControlZone::Created, COMDAT
; _this$ = ecx

; 1507 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1508 :   // Find the controller
; 1509 :   GameObject* pController = Find_Object_With_Script("dp88_conquestController");

	push	OFFSET ??_C@_0BI@ILMCAMOM@dp88_conquestController?$AA@
	call	?Find_Object_With_Script@@YAPAVScriptableGameObj@@PBD@Z ; Find_Object_With_Script
	add	esp, 4
	mov	DWORD PTR _pController$[ebp], eax

; 1510 :   if ( !pController )

	cmp	DWORD PTR _pController$[ebp], 0
	jne	SHORT $LN7@Created

; 1511 :   {
; 1512 :     Console_Output ( "[%d:%s:%s] Critical Error: Conquest controller object not found. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FH@LKMMDFJH@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Conqu@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 1513 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 1514 :     return;

	jmp	$LN8@Created
$LN7@Created:

; 1515 :   }
; 1516 :   m_controllerID = Commands->Get_ID(pController);

	mov	eax, DWORD PTR _pController$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1517 : 
; 1518 :   // Validate zone preset
; 1519 :   if ( !Is_Valid_Preset(Get_Parameter("ZonePreset")) )

	push	OFFSET ??_C@_0L@GKAHGHKM@ZonePreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@Created

; 1520 :   {
; 1521 :     Console_Output ( "[%d:%s:%s] Critical Error: A script zone preset with the name '%s' was not found. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name(), Get_Parameter("ZonePreset") );

	push	OFFSET ??_C@_0L@GKAHGHKM@ZonePreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0GI@HOLDHJCM@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5A?5scr@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 20					; 00000014H

; 1522 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 1523 :     return;

	jmp	$LN8@Created
$LN6@Created:

; 1524 :   }
; 1525 : 
; 1526 :   // Determine the size and rotation for the control zone
; 1527 :   Vector3 position;

	lea	ecx, DWORD PTR _position$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 1528 :   Vector3::Add ( Commands->Get_Position(pObj), Get_Vector3_Parameter("ZoneOffset"), &position );

	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@CEHGLBNG@ZoneOffset?$AA@
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Vector3_Parameter@ScriptImpClass@@QAE?AVVector3@@PBD@Z ; ScriptImpClass::Get_Vector3_Parameter
	push	eax
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	push	eax
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 1529 :   Vector3 size = Get_Vector3_Parameter("ZoneSize");

	push	OFFSET ??_C@_08MIAEEAJ@ZoneSize?$AA@
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Vector3_Parameter@ScriptImpClass@@QAE?AVVector3@@PBD@Z ; ScriptImpClass::Get_Vector3_Parameter

; 1530 :   Matrix3 rotation(true);

	push	1
	lea	ecx, DWORD PTR _rotation$[ebp]
	call	??0Matrix3@@QAE@_N@Z			; Matrix3::Matrix3

; 1531 :   rotation.Rotate_Z(DEG2RAD(Commands->Get_Facing(pObj)));

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv416[ebp]
	movss	xmm0, DWORD PTR tv416[ebp]
	divss	xmm0, DWORD PTR __real@43340000
	mulss	xmm0, DWORD PTR __real@40490fdb
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rotation$[ebp]
	call	?Rotate_Z@Matrix3@@QAEXM@Z		; Matrix3::Rotate_Z

; 1532 : 
; 1533 :   // Define the bounding box and create the zone
; 1534 :   OBBoxClass zoneBoundingBox ( position, size, rotation );

	lea	eax, DWORD PTR _rotation$[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _position$[ebp]
	push	edx
	lea	ecx, DWORD PTR _zoneBoundingBox$[ebp]
	call	??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z ; OBBoxClass::OBBoxClass

; 1535 :   GameObject* pZone = Create_Zone(Get_Parameter("ZonePreset"), zoneBoundingBox );

	lea	eax, DWORD PTR _zoneBoundingBox$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@GKAHGHKM@ZonePreset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Create_Zone@@YAPAVScriptableGameObj@@PBDAAVOBBoxClass@@@Z ; Create_Zone
	add	esp, 8
	mov	DWORD PTR _pZone$[ebp], eax

; 1536 :   m_zoneID = Commands->Get_ID(pZone);

	mov	eax, DWORD PTR _pZone$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 1537 : 
; 1538 :   // Load settings
; 1539 :   m_captureTime             = Get_Int_Parameter("CaptureTime");

	push	OFFSET ??_C@_0M@BNMNNECF@CaptureTime?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 1540 :   m_bAllowMajorityCapture   = (Get_Int_Parameter("AllowMajorityCapture") > 0);

	push	OFFSET ??_C@_0BF@ICEKEAJO@AllowMajorityCapture?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jle	SHORT $LN10@Created
	mov	DWORD PTR tv237[ebp], 1
	jmp	SHORT $LN11@Created
$LN10@Created:
	mov	DWORD PTR tv237[ebp], 0
$LN11@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv237[ebp]
	mov	BYTE PTR [eax+56], cl

; 1541 :   m_multiCaptureCap         = Get_Int_Parameter("MultiCaptureCap");

	push	OFFSET ??_C@_0BA@IHOAPCPH@MultiCaptureCap?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 1542 :   m_multiCaptureMultiplier  = Get_Float_Parameter("MultiCaptureMultiplier");

	push	OFFSET ??_C@_0BH@ODPBOFAO@MultiCaptureMultiplier?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+52]

; 1543 :   m_nAnimTransitionFrames   = Get_Int_Parameter("CaptureAnimTransitionFrames");

	push	OFFSET ??_C@_0BM@HEKJOKPH@CaptureAnimTransitionFrames?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 1544 : 
; 1545 :   if ( m_captureTime <= 0 || m_multiCaptureCap <= 0 || m_multiCaptureMultiplier <= 0.0f || m_nAnimTransitionFrames < 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jle	SHORT $LN4@Created
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jle	SHORT $LN4@Created
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+52]
	jae	SHORT $LN4@Created
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jge	SHORT $LN5@Created
$LN4@Created:

; 1546 :   {
; 1547 :     Console_Output ( "[%d:%s:%s] Critical Error: Invaild script parameters. Destroying script...\n", Commands->Get_ID(pObj), Commands->Get_Preset_Name(pObj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0EM@LFGHOGAG@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5Invai@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 1548 :     Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 1549 :     return;

	jmp	$LN8@Created
$LN5@Created:

; 1550 :   }
; 1551 :   
; 1552 :   // Read AI objective priorities
; 1553 :   m_aiPriority_soldier      = Get_Int_Parameter("AIObjective_Priority_Soldier");

	push	OFFSET ??_C@_0BN@FCFHKJKI@AIObjective_Priority_Soldier?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 1554 :   m_aiPriority_lvehicle     = Get_Int_Parameter("AIObjective_Priority_Light_Vehicle");

	push	OFFSET ??_C@_0CD@JHHNOAJF@AIObjective_Priority_Light_Vehic@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 1555 :   m_aiPriority_hvehicle     = Get_Int_Parameter("AIObjective_Priority_Heavy_Vehicle");

	push	OFFSET ??_C@_0CD@PCCIBHOI@AIObjective_Priority_Heavy_Vehic@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 1556 :   m_aiPriority_aircraft     = Get_Int_Parameter("AIObjective_Priority_Aircraft");

	push	OFFSET ??_C@_0BO@HOMMEOLC@AIObjective_Priority_Aircraft?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 1557 : 
; 1558 :   // Determine starting team and, if not neutral, start the tick timer to grant points per tick
; 1559 :   int team = (unsigned char)Get_Object_Type(pObj);

	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	movzx	ecx, al
	mov	DWORD PTR _team$[ebp], ecx

; 1560 :   if (0 == team || 1 == team)

	cmp	DWORD PTR _team$[ebp], 0
	je	SHORT $LN2@Created
	cmp	DWORD PTR _team$[ebp], 1
	jne	SHORT $LN3@Created
$LN2@Created:

; 1561 :   {
; 1562 :     ChangeOwner(pObj, team);

	mov	eax, DWORD PTR _team$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeOwner@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@H@Z ; dp88_conquestControlZone::ChangeOwner

; 1563 :     Commands->Start_Timer( pObj, this, (float)Get_Int_Parameter("TickInterval"), TIMER_CONQUEST_TICK );

	push	-620560381				; db030003H
	push	OFFSET ??_C@_0N@NGCHBJOK@TickInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 1564 :     m_bTickRunning = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 1

; 1565 :   }
; 1566 :   else

	jmp	SHORT $LN1@Created
$LN3@Created:

; 1567 :   {
; 1568 :     // Force correct neutral team
; 1569 :     ChangeOwner(pObj, 2);

	push	2
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeOwner@dp88_conquestControlZone@@IAEXPAVScriptableGameObj@@H@Z ; dp88_conquestControlZone::ChangeOwner

; 1570 :     m_bTickRunning = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0
$LN1@Created:

; 1571 :   }
; 1572 : 
; 1573 :   // Start the think timer to track players in the zone and update ownership accordingly
; 1574 :   Commands->Start_Timer( pObj, this, 1.0f, TIMER_CONQUEST_THINK );

	push	-620560380				; db030004H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN8@Created:

; 1575 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_conquestControlZone@@UAEXPAVScriptableGameObj@@@Z ENDP ; dp88_conquestControlZone::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_conquestController@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_conquestController@@UAEPAXI@Z PROC		; dp88_conquestController::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_conquestController@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_conquestController@@UAEPAXI@Z ENDP		; dp88_conquestController::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_conquestController@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_conquestController@@UAE@XZ PROC			; dp88_conquestController::~dp88_conquestController, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_conquestController@@UAE@XZ ENDP			; dp88_conquestController::~dp88_conquestController
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_conquestController@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_conquestController@@QAE@XZ PROC			; dp88_conquestController::dp88_conquestController, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_conquestController@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_conquestController@@QAE@XZ ENDP			; dp88_conquestController::dp88_conquestController
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?DisplayMessage@dp88_conquestController@@AAEXVStringClass@@@Z
_TEXT	SEGMENT
tv131 = -108						; size = 4
tv88 = -108						; size = 4
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
$T8 = -76						; size = 4
_winningTeam$ = -8					; size = 4
_this$ = -4						; size = 4
_message$ = 8						; size = 4
?DisplayMessage@dp88_conquestController@@AAEXVStringClass@@@Z PROC ; dp88_conquestController::DisplayMessage, COMDAT
; _this$ = ecx

; 1451 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1452 :   message.Replace("%TEAM0%", Get_Team_Name(0), false);

	push	-1
	push	0
	push	0
	call	?Get_Team_Name@@YAPBDH@Z		; Get_Team_Name
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_07GDDBNOLB@?$CFTEAM0?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z

; 1453 :   message.Replace("%TEAM1%", Get_Team_Name(1), false);

	push	-1
	push	0
	push	1
	call	?Get_Team_Name@@YAPBDH@Z		; Get_Team_Name
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_07GCPDLEIG@?$CFTEAM1?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z

; 1454 : 
; 1455 :   int winningTeam = GetWinningTeamID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWinningTeamID@dp88_conquestController@@AAEHXZ ; dp88_conquestController::GetWinningTeamID
	mov	DWORD PTR _winningTeam$[ebp], eax

; 1456 :   message.Replace("%WINNINGTEAM%", ((2==winningTeam) ? "Neither" : Get_Team_Name(winningTeam)), false);

	cmp	DWORD PTR _winningTeam$[ebp], 2
	jne	SHORT $LN6@DisplayMes
	mov	DWORD PTR tv88[ebp], OFFSET ??_C@_07PBGKEGMF@Neither?$AA@
	jmp	SHORT $LN7@DisplayMes
$LN6@DisplayMes:
	mov	eax, DWORD PTR _winningTeam$[ebp]
	push	eax
	call	?Get_Team_Name@@YAPBDH@Z		; Get_Team_Name
	add	esp, 4
	mov	DWORD PTR tv88[ebp], eax
$LN7@DisplayMes:
	push	-1
	push	0
	mov	ecx, DWORD PTR tv88[ebp]
	push	ecx
	push	OFFSET ??_C@_0O@MBGCGLLP@?$CFWINNINGTEAM?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z

; 1457 :   message.Replace("%LOSINGTEAM%", ((2==winningTeam) ? "Neither" : Get_Team_Name(GetLosingTeamID())), false);

	cmp	DWORD PTR _winningTeam$[ebp], 2
	jne	SHORT $LN8@DisplayMes
	mov	DWORD PTR tv131[ebp], OFFSET ??_C@_07PBGKEGMF@Neither?$AA@
	jmp	SHORT $LN9@DisplayMes
$LN8@DisplayMes:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLosingTeamID@dp88_conquestController@@AAEHXZ ; dp88_conquestController::GetLosingTeamID
	push	eax
	call	?Get_Team_Name@@YAPBDH@Z		; Get_Team_Name
	add	esp, 4
	mov	DWORD PTR tv131[ebp], eax
$LN9@DisplayMes:
	push	-1
	push	0
	mov	eax, DWORD PTR tv131[ebp]
	push	eax
	push	OFFSET ??_C@_0N@HLPCJAI@?$CFLOSINGTEAM?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z

; 1458 : 
; 1459 :   message.Replace("%TEAM0TARGET%", StringClass::getFormattedString("%d",m_targets[0]), false);

	push	-1
	push	0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+40]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0O@ODMKNHLH@?$CFTEAM0TARGET?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1460 :   message.Replace("%TEAM1TARGET%", StringClass::getFormattedString("%d",m_targets[1]), false);

	push	-1
	push	0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+40]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0O@PELBMDPE@?$CFTEAM1TARGET?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1461 : 
; 1462 :   message.Replace("%TEAM0SCORE%", StringClass::getFormattedString("%d",m_points[0]), false);

	push	-1
	push	0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+32]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0N@KDCEFCGD@?$CFTEAM0SCORE?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1463 :   message.Replace("%TEAM1SCORE%", StringClass::getFormattedString("%d",m_points[1]), false);

	push	-1
	push	0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+32]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0N@GPIOFCPN@?$CFTEAM1SCORE?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1464 : 
; 1465 :   if ( m_scoringMode == MODE_DEFAULT )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	$LN3@DisplayMes

; 1466 :   {
; 1467 :     message.Replace("%TEAM0SCORENEEDED%", StringClass::getFormattedString("%d",m_targets[0]-m_points[0]), false);

	push	-1
	push	0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+40]
	sub	eax, DWORD PTR [esi+ecx+32]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0BD@GCCDOEJO@?$CFTEAM0SCORENEEDED?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1468 :     message.Replace("%TEAM1SCORENEEDED%", StringClass::getFormattedString("%d",m_targets[1]-m_points[1]), false);

	push	-1
	push	0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+40]
	sub	eax, DWORD PTR [esi+ecx+32]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0BD@PPCMAFOI@?$CFTEAM1SCORENEEDED?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN2@DisplayMes
$LN3@DisplayMes:

; 1469 :   }
; 1470 :   else if ( m_scoringMode == MODE_DEDUCTION )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	cmp	ecx, 1
	jne	$LN2@DisplayMes

; 1471 :   {
; 1472 :     message.Replace("%TEAM0SCORENEEDED%", StringClass::getFormattedString("%d",m_points[1]), false);

	push	-1
	push	0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+32]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0BD@GCCDOEJO@?$CFTEAM0SCORENEEDED?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1473 :     message.Replace("%TEAM1SCORENEEDED%", StringClass::getFormattedString("%d",m_points[0]), false);

	push	-1
	push	0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+32]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	call	?getFormattedString@StringClass@@SA?AV1@PBDZZ ; StringClass::getFormattedString
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	OFFSET ??_C@_0BD@PPCMAFOI@?$CFTEAM1SCORENEEDED?$CF?$AA@
	lea	ecx, DWORD PTR _message$[ebp]
	call	DWORD PTR __imp_?Replace@StringClass@@QAEHPBD0_NH@Z
	lea	ecx, DWORD PTR $T8[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN2@DisplayMes:

; 1474 :   }
; 1475 : 
; 1476 :   Send_Message(50,200,50,message);

	lea	ecx, DWORD PTR _message$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	50					; 00000032H
	push	200					; 000000c8H
	push	50					; 00000032H
	call	DWORD PTR ?Send_Message@@3P6AXIIIPBD@ZA	; Send_Message
	add	esp, 16					; 00000010H

; 1477 : }

	lea	ecx, DWORD PTR _message$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DisplayMessage@dp88_conquestController@@AAEXVStringClass@@@Z ENDP ; dp88_conquestController::DisplayMessage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?GetLosingTeamID@dp88_conquestController@@AAEHXZ
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
?GetLosingTeamID@dp88_conquestController@@AAEHXZ PROC	; dp88_conquestController::GetLosingTeamID, COMDAT
; _this$ = ecx

; 1444 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1445 :   return (GetWinningTeamID() == 0) ? 1 : 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWinningTeamID@dp88_conquestController@@AAEHXZ ; dp88_conquestController::GetWinningTeamID
	test	eax, eax
	jne	SHORT $LN3@GetLosingT
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@GetLosingT
$LN3@GetLosingT:
	mov	DWORD PTR tv67[ebp], 0
$LN4@GetLosingT:
	mov	eax, DWORD PTR tv67[ebp]

; 1446 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLosingTeamID@dp88_conquestController@@AAEHXZ ENDP	; dp88_conquestController::GetLosingTeamID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?GetWinningTeamID@dp88_conquestController@@AAEHXZ
_TEXT	SEGMENT
tv133 = -80						; size = 4
tv83 = -80						; size = 4
_team1_togo$1 = -12					; size = 4
_team0_togo$2 = -8					; size = 4
_this$ = -4						; size = 4
?GetWinningTeamID@dp88_conquestController@@AAEHXZ PROC	; dp88_conquestController::GetWinningTeamID, COMDAT
; _this$ = ecx

; 1416 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1417 :   if ( m_scoringMode == MODE_DEFAULT )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN5@GetWinning

; 1418 :   {
; 1419 :     // In default mode the "winner" is the team with the least points left to earn
; 1420 :     int team0_togo = m_targets[0]-m_points[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+40]
	sub	eax, DWORD PTR [esi+ecx+32]
	mov	DWORD PTR _team0_togo$2[ebp], eax

; 1421 :     int team1_togo = m_targets[1]-m_points[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+40]
	sub	eax, DWORD PTR [esi+ecx+32]
	mov	DWORD PTR _team1_togo$1[ebp], eax

; 1422 : 
; 1423 :     if ( team0_togo == team1_togo )

	mov	eax, DWORD PTR _team0_togo$2[ebp]
	cmp	eax, DWORD PTR _team1_togo$1[ebp]
	jne	SHORT $LN4@GetWinning

; 1424 :       return 2;

	mov	eax, 2
	jmp	$LN6@GetWinning
$LN4@GetWinning:

; 1425 : 
; 1426 :     return ( team1_togo < team0_togo ) ? 1 : 0;

	mov	eax, DWORD PTR _team1_togo$1[ebp]
	cmp	eax, DWORD PTR _team0_togo$2[ebp]
	jge	SHORT $LN8@GetWinning
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN9@GetWinning
$LN8@GetWinning:
	mov	DWORD PTR tv83[ebp], 0
$LN9@GetWinning:
	mov	eax, DWORD PTR tv83[ebp]
	jmp	SHORT $LN6@GetWinning
	jmp	SHORT $LN3@GetWinning
$LN5@GetWinning:

; 1427 :   }
; 1428 : 
; 1429 :   else if ( m_scoringMode == MODE_DEDUCTION )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	cmp	ecx, 1
	jne	SHORT $LN3@GetWinning

; 1430 :   {
; 1431 :     // In deduction mode the "winner" is the team with the most points remaining
; 1432 :     if ( m_points[0] == m_points[1] )

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+32]
	cmp	eax, DWORD PTR [esi+ecx+32]
	jne	SHORT $LN1@GetWinning

; 1433 :       return 2;

	mov	eax, 2
	jmp	SHORT $LN6@GetWinning
$LN1@GetWinning:

; 1434 : 
; 1435 :     return ( m_points[0] > m_points[1] ) ? 0 : 1;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+32]
	cmp	eax, DWORD PTR [esi+ecx+32]
	jle	SHORT $LN10@GetWinning
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN11@GetWinning
$LN10@GetWinning:
	mov	DWORD PTR tv133[ebp], 1
$LN11@GetWinning:
	mov	eax, DWORD PTR tv133[ebp]
	jmp	SHORT $LN6@GetWinning
$LN3@GetWinning:

; 1436 :   }
; 1437 : 
; 1438 :   return 2;

	mov	eax, 2
$LN6@GetWinning:

; 1439 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWinningTeamID@dp88_conquestController@@AAEHXZ ENDP	; dp88_conquestController::GetWinningTeamID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_conquestController@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
tv69 = -80						; size = 4
tv67 = -80						; size = 4
_otherteam$1 = -12					; size = 4
_team$2 = -8						; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_pSender$ = 20						; size = 4
?Custom@dp88_conquestController@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_conquestController::Custom, COMDAT
; _this$ = ecx

; 1377 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1378 :   if ( type == CUSTOM_CONQUEST_GIVEPOINTS_T0 || type == CUSTOM_CONQUEST_GIVEPOINTS_T1 )

	cmp	DWORD PTR _type$[ebp], -637337599	; da030001H
	je	SHORT $LN6@Custom
	cmp	DWORD PTR _type$[ebp], -637337598	; da030002H
	jne	$LN7@Custom
$LN6@Custom:

; 1379 :   {
; 1380 :     int team = (type==CUSTOM_CONQUEST_GIVEPOINTS_T0) ? 0 : 1;

	cmp	DWORD PTR _type$[ebp], -637337599	; da030001H
	jne	SHORT $LN10@Custom
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN11@Custom
$LN10@Custom:
	mov	DWORD PTR tv67[ebp], 1
$LN11@Custom:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _team$2[ebp], eax

; 1381 :     int otherteam = (team==0) ? 1 : 0;

	cmp	DWORD PTR _team$2[ebp], 0
	jne	SHORT $LN12@Custom
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN13@Custom
$LN12@Custom:
	mov	DWORD PTR tv69[ebp], 0
$LN13@Custom:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _otherteam$1[ebp], eax

; 1382 : 
; 1383 :     // In normal scoring mode grant <param> points to the earning team
; 1384 :     if ( m_scoringMode == MODE_DEFAULT )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN5@Custom

; 1385 :     {
; 1386 :       m_points[team] += param;

	mov	eax, DWORD PTR _team$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	add	edx, DWORD PTR _param$[ebp]
	mov	eax, DWORD PTR _team$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx

; 1387 : 
; 1388 :       // Have we won?
; 1389 :       if ( m_points[team] >= m_targets[team] )

	mov	eax, DWORD PTR _team$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _team$2[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+32]
	cmp	eax, DWORD PTR [esi+edx*4+40]
	jl	SHORT $LN4@Custom

; 1390 :       {
; 1391 :         BaseControllerClass::Find_Base(otherteam)->Set_Base_Destroyed(true);

	push	1
	mov	eax, DWORD PTR _otherteam$1[ebp]
	push	eax
	call	?Find_Base@BaseControllerClass@@SAPAV1@H@Z ; BaseControllerClass::Find_Base
	add	esp, 4
	mov	ecx, eax
	call	?Set_Base_Destroyed@BaseControllerClass@@QAEX_N@Z ; BaseControllerClass::Set_Base_Destroyed
$LN4@Custom:

; 1392 :       }
; 1393 :     }

	jmp	SHORT $LN1@Custom
$LN5@Custom:

; 1394 : 
; 1395 :     // In deduction scoring mode deduct <param> points from the opposing team
; 1396 :     else if ( m_scoringMode == MODE_DEDUCTION )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	cmp	ecx, 1
	jne	SHORT $LN1@Custom

; 1397 :     {
; 1398 :       m_points[otherteam] -= param;

	mov	eax, DWORD PTR _otherteam$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	sub	edx, DWORD PTR _param$[ebp]
	mov	eax, DWORD PTR _otherteam$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx

; 1399 : 
; 1400 :       // Have they lost?
; 1401 :       if ( m_points[otherteam] < 0 )

	mov	eax, DWORD PTR _otherteam$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+32], 0
	jge	SHORT $LN1@Custom

; 1402 :       {
; 1403 :         BaseControllerClass::Find_Base(otherteam)->Set_Base_Destroyed(true);

	push	1
	mov	eax, DWORD PTR _otherteam$1[ebp]
	push	eax
	call	?Find_Base@BaseControllerClass@@SAPAV1@H@Z ; BaseControllerClass::Find_Base
	add	esp, 4
	mov	ecx, eax
	call	?Set_Base_Destroyed@BaseControllerClass@@QAEX_N@Z ; BaseControllerClass::Set_Base_Destroyed
$LN1@Custom:

; 1404 :       }
; 1405 :     }
; 1406 : 
; 1407 :     // Update the scores
; 1408 :     Set_Team_Score(0, (float)m_points[0]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+eax+32]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	call	?Set_Team_Score@@YAXHM@Z		; Set_Team_Score
	add	esp, 8

; 1409 :     Set_Team_Score(1, (float)m_points[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+eax+32]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	call	?Set_Team_Score@@YAXHM@Z		; Set_Team_Score
	add	esp, 8
$LN7@Custom:

; 1410 :   }
; 1411 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_conquestController@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_conquestController::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_conquestController@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv159 = -120						; size = 4
$T1 = -112						; size = 4
$T2 = -104						; size = 4
$T3 = -96						; size = 4
$T4 = -88						; size = 4
_stringId$5 = -20					; size = 4
_winningTeam$6 = -16					; size = 4
_scoreInterval$7 = -12					; size = 4
_stringId$8 = -8					; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_conquestController@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_conquestController::Timer_Expired, COMDAT
; _this$ = ecx

; 1330 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1331 :   if ( number == TIMER_CONQUEST_DOINTRO )

	cmp	DWORD PTR _number$[ebp], -620560383	; db030001H
	jne	$LN11@Timer_Expi

; 1332 :   {
; 1333 :     // Show intro
; 1334 :     int stringId = Get_String_ID_By_Desc(Get_Parameter("IntroString"));

	push	OFFSET ??_C@_0M@CMDJNJPI@IntroString?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Get_String_ID_By_Desc@@YAKPBD@Z	; Get_String_ID_By_Desc
	add	esp, 4
	mov	DWORD PTR _stringId$8[ebp], eax

; 1335 :     if ( stringId != 0 )

	cmp	DWORD PTR _stringId$8[ebp], 0
	je	SHORT $LN10@Timer_Expi

; 1336 :     {
; 1337 :       DisplayMessage(StringClass(Get_Translated_String(stringId)));

	push	ecx
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _stringId$8[ebp]
	push	eax
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestController@@AAEXVStringClass@@@Z ; dp88_conquestController::DisplayMessage
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN10@Timer_Expi:

; 1338 :     }
; 1339 : 
; 1340 :     // Start scores timer if interval > 0
; 1341 :     int scoreInterval = Get_Int_Parameter("ScoreInterval");

	push	OFFSET ??_C@_0O@LHAEKNMG@ScoreInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR _scoreInterval$7[ebp], eax

; 1342 :     if ( scoreInterval > 0 )

	cmp	DWORD PTR _scoreInterval$7[ebp], 0
	jle	SHORT $LN9@Timer_Expi

; 1343 :       Commands->Start_Timer( pSelf, this, (float)scoreInterval, TIMER_CONQUEST_DOSCORES );

	push	-620560382				; db030002H
	cvtsi2ss xmm0, DWORD PTR _scoreInterval$7[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN9@Timer_Expi:

; 1344 :   }

	jmp	$LN7@Timer_Expi
$LN11@Timer_Expi:

; 1345 : 
; 1346 : 
; 1347 :   else if ( number == TIMER_CONQUEST_DOSCORES )

	cmp	DWORD PTR _number$[ebp], -620560382	; db030002H
	jne	$LN7@Timer_Expi

; 1348 :   {
; 1349 :     // Show scores
; 1350 :     int winningTeam = GetWinningTeamID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWinningTeamID@dp88_conquestController@@AAEHXZ ; dp88_conquestController::GetWinningTeamID
	mov	DWORD PTR _winningTeam$6[ebp], eax

; 1351 :     int stringId = 0;

	mov	DWORD PTR _stringId$5[ebp], 0

; 1352 :     if ( 2 != winningTeam )

	cmp	DWORD PTR _winningTeam$6[ebp], 2
	je	SHORT $LN6@Timer_Expi

; 1353 :       stringId = Get_String_ID_By_Desc(Get_Parameter(((0==winningTeam)?"ScoreStringTeam0":"ScoreStringTeam1")));

	cmp	DWORD PTR _winningTeam$6[ebp], 0
	jne	SHORT $LN14@Timer_Expi
	mov	DWORD PTR tv159[ebp], OFFSET ??_C@_0BB@GHHDEPOO@ScoreStringTeam0?$AA@
	jmp	SHORT $LN15@Timer_Expi
$LN14@Timer_Expi:
	mov	DWORD PTR tv159[ebp], OFFSET ??_C@_0BB@HOGIHOKP@ScoreStringTeam1?$AA@
$LN15@Timer_Expi:
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Get_String_ID_By_Desc@@YAKPBD@Z	; Get_String_ID_By_Desc
	add	esp, 4
	mov	DWORD PTR _stringId$5[ebp], eax
$LN6@Timer_Expi:

; 1354 : 
; 1355 :     if ( 0 == stringId )

	cmp	DWORD PTR _stringId$5[ebp], 0
	jne	SHORT $LN5@Timer_Expi

; 1356 :       stringId = Get_String_ID_By_Desc(Get_Parameter("ScoreString"));

	push	OFFSET ??_C@_0M@EPAMPHLF@ScoreString?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Get_String_ID_By_Desc@@YAKPBD@Z	; Get_String_ID_By_Desc
	add	esp, 4
	mov	DWORD PTR _stringId$5[ebp], eax
$LN5@Timer_Expi:

; 1357 :     
; 1358 :     if ( stringId != 0 )

	cmp	DWORD PTR _stringId$5[ebp], 0
	je	SHORT $LN4@Timer_Expi

; 1359 :     {
; 1360 :       DisplayMessage(StringClass(Get_Translated_String(stringId)));

	push	ecx
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _stringId$5[ebp]
	push	eax
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestController@@AAEXVStringClass@@@Z ; dp88_conquestController::DisplayMessage
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1361 :     }
; 1362 :     else

	jmp	SHORT $LN1@Timer_Expi
$LN4@Timer_Expi:

; 1363 :     {
; 1364 :       if ( m_scoringMode == MODE_DEDUCTION )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	cmp	ecx, 1
	jne	SHORT $LN2@Timer_Expi

; 1365 :         DisplayMessage(StringClass("Scores are currently: %TEAM0%: %TEAM0SCORE%, %TEAM1%: %TEAM1SCORE%"));

	push	ecx
	mov	esi, esp
	push	0
	push	0
	push	OFFSET ??_C@_0ED@IJJHPHLA@Scores?5are?5currently?3?5?$CFTEAM0?$CF?3?5?$CF@
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestController@@AAEXVStringClass@@@Z ; dp88_conquestController::DisplayMessage
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass

; 1366 :       else

	jmp	SHORT $LN1@Timer_Expi
$LN2@Timer_Expi:

; 1367 :         DisplayMessage(StringClass("Scores are currently: %TEAM0%: (%TEAM0SCORE%/%TEAM0TARGET%), %TEAM1%: (%TEAM1SCORE%/%TEAM1TARGET%)"));

	push	ecx
	mov	esi, esp
	push	0
	push	0
	push	OFFSET ??_C@_0GD@CMNJPAFK@Scores?5are?5currently?3?5?$CFTEAM0?$CF?3?5?$CI@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass
	push	eax
	mov	ecx, esi
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayMessage@dp88_conquestController@@AAEXVStringClass@@@Z ; dp88_conquestController::DisplayMessage
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@Timer_Expi:

; 1368 :     }
; 1369 : 
; 1370 :     Commands->Start_Timer( pSelf, this, (float)Get_Int_Parameter("ScoreInterval"), TIMER_CONQUEST_DOSCORES );

	push	-620560382				; db030002H
	push	OFFSET ??_C@_0O@LHAEKNMG@ScoreInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN7@Timer_Expi:

; 1371 :   }
; 1372 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_conquestController@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_conquestController::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Destroyed@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?Destroyed@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_conquestController::Destroyed, COMDAT
; _this$ = ecx

; 1323 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1324 :   RemoveObjectCreateHook(m_objectCreateHookId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	DWORD PTR ?RemoveObjectCreateHook@@3P6AXH@ZA ; RemoveObjectCreateHook
	add	esp, 4

; 1325 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_conquestController::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv183 = -96						; size = 4
tv188 = -92						; size = 4
tv160 = -92						; size = 4
tv144 = -92						; size = 4
tv134 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
_h$ = -16						; size = 4
_o$3 = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
_pSelf$ = 8						; size = 4
?Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_conquestController::Created, COMDAT
; _this$ = ecx

; 1291 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1292 :   m_scoringMode = (unsigned char)Get_Int_Parameter("ScoringMode");

	push	OFFSET ??_C@_0M@GNOOMBIC@ScoringMode?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+28], al

; 1293 : 
; 1294 :   m_targets[0] = Get_Int_Parameter("TargetScoreTeam0");

	push	OFFSET ??_C@_0BB@FOMPKHLG@TargetScoreTeam0?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+40], eax

; 1295 :   m_targets[1] = Get_Int_Parameter("TargetScoreTeam1");

	push	OFFSET ??_C@_0BB@EHNEJGPH@TargetScoreTeam1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+40], eax

; 1296 : 
; 1297 :   m_points[0] = ( m_scoringMode == MODE_DEFAULT ) ? 0 : m_targets[0];

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN5@Created
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN6@Created
$LN5@Created:
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+40]
	mov	DWORD PTR tv134[ebp], ecx
$LN6@Created:
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [eax+edx+32], ecx

; 1298 :   m_points[1] = ( m_scoringMode == MODE_DEFAULT ) ? 0 : m_targets[1];

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN7@Created
	mov	DWORD PTR tv144[ebp], 0
	jmp	SHORT $LN8@Created
$LN7@Created:
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+40]
	mov	DWORD PTR tv144[ebp], ecx
$LN8@Created:
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv144[ebp]
	mov	DWORD PTR [eax+edx+32], ecx

; 1299 : 
; 1300 :   // Do game intro after 30 seconds, giving people time to load up
; 1301 :   Commands->Start_Timer( pSelf, this, 30.0f, TIMER_CONQUEST_DOINTRO );

	push	-620560383				; db030001H
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelf$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 1302 : 
; 1303 :   // First set scores for all existing objects
; 1304 :   SLNode<BaseGameObj> *x = GameObjManager::GameObjList.Head();

	mov	ecx, DWORD PTR ?GameObjList@GameObjManager@@2AAV?$SList@VBaseGameObj@@@@A ; GameObjManager::GameObjList
	call	?Head@?$SList@VBaseGameObj@@@@QBEPAV?$SLNode@VBaseGameObj@@@@XZ ; SList<BaseGameObj>::Head
	mov	DWORD PTR _x$[ebp], eax
$LN2@Created:

; 1305 :   while (x)

	cmp	DWORD PTR _x$[ebp], 0
	je	SHORT $LN1@Created

; 1306 :   {
; 1307 :     ScriptableGameObj* o = x->Data()->As_ScriptableGameObj();

	mov	ecx, DWORD PTR _x$[ebp]
	call	?Data@?$SLNode@VBaseGameObj@@@@QBEPAVBaseGameObj@@XZ ; SLNode<BaseGameObj>::Data
	mov	DWORD PTR tv160[ebp], eax
	mov	eax, DWORD PTR tv160[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv160[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	DWORD PTR _o$3[ebp], eax

; 1308 :     Set_Death_Points(o, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _o$3[ebp]
	push	eax
	call	?Set_Death_Points@@YAXPAVScriptableGameObj@@M@Z ; Set_Death_Points
	add	esp, 8

; 1309 :     Set_Damage_Points(o, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _o$3[ebp]
	push	eax
	call	?Set_Damage_Points@@YAXPAVScriptableGameObj@@M@Z ; Set_Damage_Points
	add	esp, 8

; 1310 :     x = x->Next();

	mov	ecx, DWORD PTR _x$[ebp]
	call	?Next@?$SLNode@VBaseGameObj@@@@QBEPAV1@XZ ; SLNode<BaseGameObj>::Next
	mov	DWORD PTR _x$[ebp], eax

; 1311 :   }

	jmp	SHORT $LN2@Created
$LN1@Created:

; 1312 : 
; 1313 :   // And now hook all new objects
; 1314 :   ObjectCreateHookStruct* h = new ObjectCreateHookStruct();

	push	OFFSET ??_C@_0CB@OLMIABAP@dp88_conquestController?3?3Created@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 23					; 00000017H
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN12@Created
	xor	edx, edx
	jne	SHORT $LN9@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 23					; 00000017H
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Created:
	mov	DWORD PTR tv188[ebp], 0
	jmp	SHORT $LN13@Created
$LN12@Created:
	mov	DWORD PTR $T1[ebp], 8
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN10@Created
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv183[ebp], edx
	jmp	SHORT $LN11@Created
$LN10@Created:
	mov	DWORD PTR tv183[ebp], 0
$LN11@Created:
	mov	eax, DWORD PTR tv183[ebp]
	mov	DWORD PTR tv188[ebp], eax
$LN13@Created:
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR _h$[ebp], ecx

; 1315 :   h->data = this;

	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1316 :   h->hook = dp88_conquestController_ObjectCreateHook;

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], OFFSET ?dp88_conquestController_ObjectCreateHook@@YAXPAXPAVScriptableGameObj@@@Z ; dp88_conquestController_ObjectCreateHook

; 1317 :   m_objectCreateHookId = AddObjectCreateHook(h);

	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	DWORD PTR ?AddObjectCreateHook@@3P6AHPAUObjectCreateHookStruct@@@ZA ; AddObjectCreateHook
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 1318 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_conquestController@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_conquestController::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_customPointsPercentage@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_customPointsPercentage@@UAEPAXI@Z PROC		; dp88_customPointsPercentage::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_customPointsPercentage@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_customPointsPercentage@@UAEPAXI@Z ENDP		; dp88_customPointsPercentage::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_customPointsPercentage@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_customPointsPercentage@@UAE@XZ PROC		; dp88_customPointsPercentage::~dp88_customPointsPercentage, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_customPointsPercentage@@UAE@XZ ENDP		; dp88_customPointsPercentage::~dp88_customPointsPercentage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_customPointsPercentage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_customPointsPercentage@@QAE@XZ PROC		; dp88_customPointsPercentage::dp88_customPointsPercentage, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_customPointsPercentage@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_customPointsPercentage@@QAE@XZ ENDP		; dp88_customPointsPercentage::dp88_customPointsPercentage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?GivePointsAndMoney@dp88_customPointsPercentage@@IAEXPAVScriptableGameObj@@MM@Z
_TEXT	SEGMENT
tv240 = -92						; size = 4
tv225 = -92						; size = 4
tv142 = -92						; size = 4
tv87 = -92						; size = 4
_team$ = -24						; size = 4
_player$1 = -20						; size = 4
_playerId$ = -16					; size = 4
_smart$ = -12						; size = 4
_pointsMultiplier$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_points$ = 12						; size = 4
_money$ = 16						; size = 4
?GivePointsAndMoney@dp88_customPointsPercentage@@IAEXPAVScriptableGameObj@@MM@Z PROC ; dp88_customPointsPercentage::GivePointsAndMoney, COMDAT
; _this$ = ecx

; 2838 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2839 :   float pointsMultiplier = 1.f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pointsMultiplier$[ebp], xmm0

; 2840 :   SmartGameObj *smart = obj->As_SmartGameObj();

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	DWORD PTR _smart$[ebp], eax

; 2841 :   if (smart->Is_Teammate(Owner()->As_DamageableGameObj()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv87[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _smart$[ebp]
	call	?Is_Teammate@DamageableGameObj@@QAE_NPAV1@@Z ; DamageableGameObj::Is_Teammate
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@GivePoints

; 2842 :   {
; 2843 : 	  pointsMultiplier = -pointsMultiplier;

	movss	xmm0, DWORD PTR _pointsMultiplier$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _pointsMultiplier$[ebp], xmm0
	jmp	SHORT $LN4@GivePoints
$LN6@GivePoints:

; 2844 :   }
; 2845 :   else if (!smart->Is_Enemy(Owner()->As_DamageableGameObj()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _smart$[ebp]
	call	?Is_Enemy@DamageableGameObj@@QAE_NPAV1@@Z ; DamageableGameObj::Is_Enemy
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@GivePoints

; 2846 :   {
; 2847 : 	  pointsMultiplier = 0.f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pointsMultiplier$[ebp], xmm0
$LN4@GivePoints:

; 2848 :   }
; 2849 :   points *= pointsMultiplier;

	movss	xmm0, DWORD PTR _points$[ebp]
	mulss	xmm0, DWORD PTR _pointsMultiplier$[ebp]
	movss	DWORD PTR _points$[ebp], xmm0

; 2850 :   money *= pointsMultiplier;

	movss	xmm0, DWORD PTR _money$[ebp]
	mulss	xmm0, DWORD PTR _pointsMultiplier$[ebp]
	movss	DWORD PTR _money$[ebp], xmm0

; 2851 :   int playerId = Get_Player_ID(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Player_ID@@YAJPAVScriptableGameObj@@@Z ; Get_Player_ID
	add	esp, 4
	mov	DWORD PTR _playerId$[ebp], eax

; 2852 :   if ( playerId >= 0 )

	cmp	DWORD PTR _playerId$[ebp], 0
	jl	SHORT $LN1@GivePoints

; 2853 :   {
; 2854 :     if ( cPlayer* player = Find_Player(playerId) )

	mov	eax, DWORD PTR _playerId$[ebp]
	push	eax
	call	?Find_Player@@YAPAVcPlayer@@H@Z		; Find_Player
	add	esp, 4
	mov	DWORD PTR _player$1[ebp], eax
	cmp	DWORD PTR _player$1[ebp], 0
	je	SHORT $LN1@GivePoints

; 2855 :     {
; 2856 :       player->Set_Score(player->Get_Score()+points);

	mov	ecx, DWORD PTR _player$1[ebp]
	call	?Get_Score@PlayerDataClass@@QBEMXZ	; PlayerDataClass::Get_Score
	fstp	DWORD PTR tv225[ebp]
	movss	xmm0, DWORD PTR tv225[ebp]
	addss	xmm0, DWORD PTR _points$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _player$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _player$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 2857 :       if (money > 0)

	movss	xmm0, DWORD PTR _money$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@GivePoints

; 2858 :       {
; 2859 :         player->Increment_Money(money);

	push	ecx
	movss	xmm0, DWORD PTR _money$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _player$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _player$1[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
$LN1@GivePoints:

; 2860 :       }
; 2861 :     }
; 2862 :   }
; 2863 : 
; 2864 :   int team = Get_Object_Type(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	DWORD PTR _team$[ebp], eax

; 2865 :   Set_Team_Score(team, Get_Team_Score(team) + points);

	mov	eax, DWORD PTR _team$[ebp]
	push	eax
	call	?Get_Team_Score@@YAMH@Z			; Get_Team_Score
	add	esp, 4
	fstp	DWORD PTR tv240[ebp]
	movss	xmm0, DWORD PTR tv240[ebp]
	addss	xmm0, DWORD PTR _points$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _team$[ebp]
	push	ecx
	call	?Set_Team_Score@@YAXHM@Z		; Set_Team_Score
	add	esp, 8

; 2866 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GivePointsAndMoney@dp88_customPointsPercentage@@IAEXPAVScriptableGameObj@@MM@Z ENDP ; dp88_customPointsPercentage::GivePointsAndMoney
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Killed@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_customPointsPercentage::Killed, COMDAT
; _this$ = ecx

; 2825 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2826 :   // Abort if there is no killer, or the unit killed itself, or the killer is not
; 2827 :   // a star
; 2828 :   if ( !killer || killer == obj || !Commands->Is_A_Star(killer) )

	cmp	DWORD PTR _killer$[ebp], 0
	je	SHORT $LN1@Killed
	mov	eax, DWORD PTR _killer$[ebp]
	cmp	eax, DWORD PTR _obj$[ebp]
	je	SHORT $LN1@Killed
	mov	eax, DWORD PTR _killer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+280]
	call	edx
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Killed
$LN1@Killed:

; 2829 :     return;

	jmp	SHORT $LN3@Killed
$LN2@Killed:

; 2830 : 
; 2831 :    // Give the killer their points and money
; 2832 :    GivePointsAndMoney ( killer, m_killPoints, m_killMoney );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _killer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GivePointsAndMoney@dp88_customPointsPercentage@@IAEXPAVScriptableGameObj@@MM@Z ; dp88_customPointsPercentage::GivePointsAndMoney
$LN3@Killed:

; 2833 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_customPointsPercentage::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Damaged@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
tv84 = -84						; size = 4
tv78 = -84						; size = 4
tv72 = -84						; size = 4
_money$ = -16						; size = 4
_points$ = -12						; size = 4
_bRepair$ = -5						; size = 1
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_customPointsPercentage::Damaged, COMDAT
; _this$ = ecx

; 2806 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2807 :   // Abort if there is no damager, or the unit damaged itself, or the damager is not
; 2808 :   // a star
; 2809 :   if ( !damager || damager == obj || !Commands->Is_A_Star(damager) )

	cmp	DWORD PTR _damager$[ebp], 0
	je	SHORT $LN1@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	cmp	eax, DWORD PTR _obj$[ebp]
	je	SHORT $LN1@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+280]
	call	edx
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Damaged
$LN1@Damaged:

; 2810 :     return;

	jmp	$LN3@Damaged
$LN2@Damaged:

; 2811 : 
; 2812 :   /* Damaged or repaired? Then convert amount into it's absolute value for
; 2813 :   calculating points granted */
; 2814 :   bool bRepair = (amount < 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _amount$[ebp]
	jbe	SHORT $LN5@Damaged
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@Damaged
$LN5@Damaged:
	mov	DWORD PTR tv72[ebp], 0
$LN6@Damaged:
	mov	al, BYTE PTR tv72[ebp]
	mov	BYTE PTR _bRepair$[ebp], al

; 2815 :   float points = ((bRepair) ? m_repairPoints : m_damagePoints) * amount;

	movzx	eax, BYTE PTR _bRepair$[ebp]
	test	eax, eax
	je	SHORT $LN7@Damaged
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR tv78[ebp], xmm0
	jmp	SHORT $LN8@Damaged
$LN7@Damaged:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR tv78[ebp], xmm0
$LN8@Damaged:
	movss	xmm0, DWORD PTR tv78[ebp]
	mulss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR _points$[ebp], xmm0

; 2816 :   float money = ((bRepair) ? m_repairMoney : m_damageMoney) * amount;

	movzx	eax, BYTE PTR _bRepair$[ebp]
	test	eax, eax
	je	SHORT $LN9@Damaged
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR tv84[ebp], xmm0
	jmp	SHORT $LN10@Damaged
$LN9@Damaged:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	movss	DWORD PTR tv84[ebp], xmm0
$LN10@Damaged:
	movss	xmm0, DWORD PTR tv84[ebp]
	mulss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR _money$[ebp], xmm0

; 2817 : 
; 2818 :   // Give the damager their points and money
; 2819 :   GivePointsAndMoney ( damager, points, money );

	push	ecx
	movss	xmm0, DWORD PTR _money$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _points$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GivePointsAndMoney@dp88_customPointsPercentage@@IAEXPAVScriptableGameObj@@MM@Z ; dp88_customPointsPercentage::GivePointsAndMoney
$LN3@Damaged:

; 2820 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_customPointsPercentage::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv183 = -72						; size = 4
tv178 = -72						; size = 4
tv173 = -72						; size = 4
tv168 = -72						; size = 4
tv163 = -72						; size = 4
tv158 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_customPointsPercentage::Created, COMDAT
; _this$ = ecx

; 2792 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2793 :   // Preload values since converting strings to floats every time we take
; 2794 :   // damage is very inefficient
; 2795 :   m_killPoints		= Get_Float_Parameter("killPoints") / 100;

	push	OFFSET ??_C@_0L@DFCKJMBM@killPoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR tv158[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 2796 :   m_damagePoints	= Get_Float_Parameter("damagePoints") / 100;

	push	OFFSET ??_C@_0N@EKBMPEJM@damagePoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 2797 :   m_repairPoints	= Get_Float_Parameter("repairPoints") / 100;

	push	OFFSET ??_C@_0N@IGCGNMII@repairPoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv168[ebp]
	movss	xmm0, DWORD PTR tv168[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 2798 :   m_killMoney		= Get_Float_Parameter("killMoney") / 100;

	push	OFFSET ??_C@_09MNFMHOPO@killMoney?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv173[ebp]
	movss	xmm0, DWORD PTR tv173[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 2799 :   m_damageMoney		= Get_Float_Parameter("damageMoney") / 100;

	push	OFFSET ??_C@_0M@JBDJEFLC@damageMoney?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv178[ebp]
	movss	xmm0, DWORD PTR tv178[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+44], xmm0

; 2800 :   m_repairMoney		= Get_Float_Parameter("repairMoney") / 100;

	push	OFFSET ??_C@_0M@KHGGMEAG@repairMoney?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv183[ebp]
	movss	xmm0, DWORD PTR tv183[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 2801 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_customPointsPercentage@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_customPointsPercentage::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_customPoints@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_customPoints@@UAEPAXI@Z PROC			; dp88_customPoints::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_customPoints@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_customPoints@@UAEPAXI@Z ENDP			; dp88_customPoints::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_customPoints@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_customPoints@@UAE@XZ PROC			; dp88_customPoints::~dp88_customPoints, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_customPoints@@UAE@XZ ENDP			; dp88_customPoints::~dp88_customPoints
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_customPoints@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_customPoints@@QAE@XZ PROC			; dp88_customPoints::dp88_customPoints, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_customPoints@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_customPoints@@QAE@XZ ENDP			; dp88_customPoints::dp88_customPoints
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?GivePointsAndMoney@dp88_customPoints@@IAEXPAVScriptableGameObj@@MM@Z
_TEXT	SEGMENT
tv156 = -84						; size = 4
tv142 = -84						; size = 4
_team$ = -16						; size = 4
_player$1 = -12						; size = 4
_playerId$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_points$ = 12						; size = 4
_money$ = 16						; size = 4
?GivePointsAndMoney@dp88_customPoints@@IAEXPAVScriptableGameObj@@MM@Z PROC ; dp88_customPoints::GivePointsAndMoney, COMDAT
; _this$ = ecx

; 1244 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1245 :   int playerId = Get_Player_ID(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Player_ID@@YAJPAVScriptableGameObj@@@Z ; Get_Player_ID
	add	esp, 4
	mov	DWORD PTR _playerId$[ebp], eax

; 1246 :   if ( playerId >= 0 )

	cmp	DWORD PTR _playerId$[ebp], 0
	jl	SHORT $LN1@GivePoints

; 1247 :   {
; 1248 :     if ( cPlayer* player = Find_Player(playerId) )

	mov	eax, DWORD PTR _playerId$[ebp]
	push	eax
	call	?Find_Player@@YAPAVcPlayer@@H@Z		; Find_Player
	add	esp, 4
	mov	DWORD PTR _player$1[ebp], eax
	cmp	DWORD PTR _player$1[ebp], 0
	je	SHORT $LN1@GivePoints

; 1249 :     {
; 1250 :       player->Set_Score(player->Get_Score()+points);

	mov	ecx, DWORD PTR _player$1[ebp]
	call	?Get_Score@PlayerDataClass@@QBEMXZ	; PlayerDataClass::Get_Score
	fstp	DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR _points$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _player$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _player$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 1251 :       player->Increment_Money(money);

	push	ecx
	movss	xmm0, DWORD PTR _money$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _player$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _player$1[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
$LN1@GivePoints:

; 1252 :     }
; 1253 :   }
; 1254 : 
; 1255 :   int team = Get_Object_Type(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	DWORD PTR _team$[ebp], eax

; 1256 :   Set_Team_Score(team, Get_Team_Score(team) + points);

	mov	eax, DWORD PTR _team$[ebp]
	push	eax
	call	?Get_Team_Score@@YAMH@Z			; Get_Team_Score
	add	esp, 4
	fstp	DWORD PTR tv156[ebp]
	movss	xmm0, DWORD PTR tv156[ebp]
	addss	xmm0, DWORD PTR _points$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _team$[ebp]
	push	ecx
	call	?Set_Team_Score@@YAXHM@Z		; Set_Team_Score
	add	esp, 8

; 1257 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GivePointsAndMoney@dp88_customPoints@@IAEXPAVScriptableGameObj@@MM@Z ENDP ; dp88_customPoints::GivePointsAndMoney
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Killed@dp88_customPoints@@MAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_customPoints@@MAEXPAVScriptableGameObj@@0@Z PROC ; dp88_customPoints::Killed, COMDAT
; _this$ = ecx

; 1222 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1223 :   // Abort if there is no killer, or the unit killed itself, or the killer is not
; 1224 :   // a star
; 1225 :   if ( !killer || killer == obj || !Commands->Is_A_Star(killer) )

	cmp	DWORD PTR _killer$[ebp], 0
	je	SHORT $LN3@Killed
	mov	eax, DWORD PTR _killer$[ebp]
	cmp	eax, DWORD PTR _obj$[ebp]
	je	SHORT $LN3@Killed
	mov	eax, DWORD PTR _killer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+280]
	call	edx
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@Killed
$LN3@Killed:

; 1226 :     return;

	jmp	SHORT $LN5@Killed
$LN4@Killed:

; 1227 : 
; 1228 :   // Killed own teammate? That would be negative points and no cash for you then...
; 1229 :   if ( Get_Object_Type(obj) == Get_Object_Type(killer) )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _killer$[ebp]
	push	ecx
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN2@Killed

; 1230 :   {
; 1231 :     GivePointsAndMoney ( killer, m_killPoints*-1.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _killer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GivePointsAndMoney@dp88_customPoints@@IAEXPAVScriptableGameObj@@MM@Z ; dp88_customPoints::GivePointsAndMoney

; 1232 :   }
; 1233 : 
; 1234 :   else

	jmp	SHORT $LN1@Killed
$LN2@Killed:

; 1235 :   {
; 1236 :     // Give the killer their points and money
; 1237 :     GivePointsAndMoney ( killer, m_killPoints, m_killMoney );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _killer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GivePointsAndMoney@dp88_customPoints@@IAEXPAVScriptableGameObj@@MM@Z ; dp88_customPoints::GivePointsAndMoney
$LN1@Killed:
$LN5@Killed:

; 1238 :   }
; 1239 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_customPoints@@MAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_customPoints::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Damaged@dp88_customPoints@@MAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
tv131 = -92						; size = 4
tv128 = -88						; size = 4
tv86 = -88						; size = 4
tv80 = -88						; size = 4
tv72 = -88						; size = 4
_bSpy$ = -17						; size = 1
_money$ = -16						; size = 4
_points$ = -12						; size = 4
_bRepair$ = -5						; size = 1
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_customPoints@@MAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_customPoints::Damaged, COMDAT
; _this$ = ecx

; 1191 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1192 :   // Abort if there is no damager, or the unit damaged itself, or the damager is not
; 1193 :   // a star
; 1194 :   if ( !damager || damager == obj || !Commands->Is_A_Star(damager) )

	cmp	DWORD PTR _damager$[ebp], 0
	je	SHORT $LN2@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	cmp	eax, DWORD PTR _obj$[ebp]
	je	SHORT $LN2@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+280]
	call	edx
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Damaged
$LN2@Damaged:

; 1195 :     return;

	jmp	$LN4@Damaged
$LN3@Damaged:

; 1196 : 
; 1197 :   /* Damaged or repaired? Then convert amount into it's absolute value for
; 1198 :   calculating points granted */
; 1199 :   bool bRepair = (amount < 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _amount$[ebp]
	jbe	SHORT $LN6@Damaged
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN7@Damaged
$LN6@Damaged:
	mov	DWORD PTR tv72[ebp], 0
$LN7@Damaged:
	mov	al, BYTE PTR tv72[ebp]
	mov	BYTE PTR _bRepair$[ebp], al

; 1200 :   amount = abs(amount);

	push	ecx
	movss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR _amount$[ebp]

; 1201 :   float points = ((bRepair) ? m_repairPoints : m_damagePoints) * amount;

	movzx	eax, BYTE PTR _bRepair$[ebp]
	test	eax, eax
	je	SHORT $LN8@Damaged
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR tv80[ebp], xmm0
	jmp	SHORT $LN9@Damaged
$LN8@Damaged:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR tv80[ebp], xmm0
$LN9@Damaged:
	movss	xmm0, DWORD PTR tv80[ebp]
	mulss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR _points$[ebp], xmm0

; 1202 :   float money = ((bRepair) ? m_repairMoney : m_damageMoney) * amount;

	movzx	eax, BYTE PTR _bRepair$[ebp]
	test	eax, eax
	je	SHORT $LN10@Damaged
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN11@Damaged
$LN10@Damaged:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	movss	DWORD PTR tv86[ebp], xmm0
$LN11@Damaged:
	movss	xmm0, DWORD PTR tv86[ebp]
	mulss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR _money$[ebp], xmm0

; 1203 : 
; 1204 :   // Is this player an APB spy?
; 1205 :   bool bSpy = Is_Spy(damager);

	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	call	?Is_Spy@@YA_NPAVScriptableGameObj@@@Z	; Is_Spy
	add	esp, 4
	mov	BYTE PTR _bSpy$[ebp], al

; 1206 : 
; 1207 :   // Repaired other team or damaged own team? That would be negative points and no
; 1208 :   // money for you then... unless your spy, then the logic is inverted...
; 1209 :   if ( bSpy ^ ((Get_Object_Type(obj) == Get_Object_Type(damager)) != bRepair) )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _damager$[ebp]
	push	ecx
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN12@Damaged
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN13@Damaged
$LN12@Damaged:
	mov	DWORD PTR tv128[ebp], 0
$LN13@Damaged:
	movzx	edx, BYTE PTR _bRepair$[ebp]
	cmp	DWORD PTR tv128[ebp], edx
	je	SHORT $LN14@Damaged
	mov	DWORD PTR tv131[ebp], 1
	jmp	SHORT $LN15@Damaged
$LN14@Damaged:
	mov	DWORD PTR tv131[ebp], 0
$LN15@Damaged:
	movzx	eax, BYTE PTR _bSpy$[ebp]
	xor	eax, DWORD PTR tv131[ebp]
	je	SHORT $LN1@Damaged

; 1210 :   {
; 1211 :     points *= -1.0f;

	movss	xmm0, DWORD PTR _points$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _points$[ebp], xmm0

; 1212 :     money = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _money$[ebp], xmm0
$LN1@Damaged:

; 1213 :   }
; 1214 : 
; 1215 :   // Give the damager their points and money
; 1216 :   GivePointsAndMoney ( damager, points, money );

	push	ecx
	movss	xmm0, DWORD PTR _money$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _points$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GivePointsAndMoney@dp88_customPoints@@IAEXPAVScriptableGameObj@@MM@Z ; dp88_customPoints::GivePointsAndMoney
$LN4@Damaged:

; 1217 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_customPoints@@MAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_customPoints::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_customPoints@@MAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_customPoints@@MAEXPAVScriptableGameObj@@@Z PROC ; dp88_customPoints::Created, COMDAT
; _this$ = ecx

; 1177 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1178 :   // Preload values since converting strings to floats every time we take
; 1179 :   // damage is very inefficient
; 1180 :   m_killPoints		= Get_Float_Parameter("killPoints");

	push	OFFSET ??_C@_0L@DFCKJMBM@killPoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+28]

; 1181 :   m_damagePoints	= Get_Float_Parameter("damagePoints");

	push	OFFSET ??_C@_0N@EKBMPEJM@damagePoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+32]

; 1182 :   m_repairPoints	= Get_Float_Parameter("repairPoints");

	push	OFFSET ??_C@_0N@IGCGNMII@repairPoints?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+36]

; 1183 :   m_killMoney		= Get_Float_Parameter("killMoney");

	push	OFFSET ??_C@_09MNFMHOPO@killMoney?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+40]

; 1184 :   m_damageMoney		= Get_Float_Parameter("damageMoney");

	push	OFFSET ??_C@_0M@JBDJEFLC@damageMoney?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+44]

; 1185 :   m_repairMoney		= Get_Float_Parameter("repairMoney");

	push	OFFSET ??_C@_0M@KHGGMEAG@repairMoney?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+48]

; 1186 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_customPoints@@MAEXPAVScriptableGameObj@@@Z ENDP ; dp88_customPoints::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_spawnVehiclePart@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_spawnVehiclePart@@UAEPAXI@Z PROC		; dp88_spawnVehiclePart::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_spawnVehiclePart@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_spawnVehiclePart@@UAEPAXI@Z ENDP		; dp88_spawnVehiclePart::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_spawnVehiclePart@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_spawnVehiclePart@@UAE@XZ PROC			; dp88_spawnVehiclePart::~dp88_spawnVehiclePart, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_spawnVehiclePart@@UAE@XZ ENDP			; dp88_spawnVehiclePart::~dp88_spawnVehiclePart
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_spawnVehiclePart@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_spawnVehiclePart@@QAE@XZ PROC			; dp88_spawnVehiclePart::dp88_spawnVehiclePart, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_spawnVehiclePart@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_spawnVehiclePart@@QAE@XZ ENDP			; dp88_spawnVehiclePart::dp88_spawnVehiclePart
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Destroyed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_spawnVehiclePart::Destroyed, COMDAT
; _this$ = ecx

; 1151 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1152 : 	if ( partObjectId != NULL && Commands->Find_Object(partObjectId) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@Destroyed
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@Destroyed

; 1153 : 		Commands->Destroy_Object ( Commands->Find_Object (partObjectId) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN1@Destroyed:

; 1154 : 	partObjectId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1155 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_spawnVehiclePart::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Killed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_spawnVehiclePart::Killed, COMDAT
; _this$ = ecx

; 1143 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1144 : 	if ( partObjectId != NULL && Commands->Find_Object(partObjectId) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@Killed
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@Killed

; 1145 : 		Commands->Destroy_Object ( Commands->Find_Object (partObjectId) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
$LN1@Killed:

; 1146 : 	partObjectId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1147 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_spawnVehiclePart::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_part$1 = -12						; size = 4
_part$2 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_spawnVehiclePart::Timer_Expired, COMDAT
; _this$ = ecx

; 1113 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1114 : 	/* Part spawn timer */
; 1115 : 	if ( number == TIMER_SPAWNVEHICLEPART && partObjectId == NULL )

	cmp	DWORD PTR _number$[ebp], -620756989	; db000003H
	jne	$LN5@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN5@Timer_Expi

; 1116 : 	{
; 1117 : 		/* Spawn the vehicle part and get it's ID */
; 1118 : 		GameObject* part = Commands->Create_Object_At_Bone ( obj, Get_Parameter("Vehicle_Part_Preset"), Get_Parameter("Spawn_At_Bone") );

	push	OFFSET ??_C@_0O@NCIMNAFE@Spawn_At_Bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	push	OFFSET ??_C@_0BE@BBMCLEAG@Vehicle_Part_Preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _part$2[ebp], eax

; 1119 : 		Commands->Attach_To_Object_Bone ( part, obj, Get_Parameter ( "Spawn_At_Bone" ) );

	push	OFFSET ??_C@_0O@NCIMNAFE@Spawn_At_Bone?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _part$2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+572]
	call	eax
	add	esp, 12					; 0000000cH

; 1120 : 		partObjectId = Commands->Get_ID(part);

	mov	eax, DWORD PTR _part$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1121 : 
; 1122 : 		/* Unless this is a decorative part start the timer again to attach the health and
; 1123 : 		veterancy link scripts. We don't do this immediately as it causes a lovely crash... */
; 1124 : 		if ( Get_Int_Parameter("IsDecorative") == 0 )

	push	OFFSET ??_C@_0N@BOOILDGO@IsDecorative?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jne	SHORT $LN4@Timer_Expi

; 1125 : 		  Commands->Start_Timer ( obj, this, 0.01f, TIMER_SPAWNVEHICLEPART );

	push	-620756989				; db000003H
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN4@Timer_Expi:

; 1126 : 	}

	jmp	SHORT $LN1@Timer_Expi
$LN5@Timer_Expi:

; 1127 : 
; 1128 : 
; 1129 : 	/* Link health & veterancy script attach timer */
; 1130 : 	else if ( number == TIMER_SPAWNVEHICLEPART )

	cmp	DWORD PTR _number$[ebp], -620756989	; db000003H
	jne	SHORT $LN1@Timer_Expi

; 1131 : 	{
; 1132 : 		GameObject* part = Commands->Find_Object(partObjectId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _part$1[ebp], eax

; 1133 : 		if ( part )

	cmp	DWORD PTR _part$1[ebp], 0
	je	SHORT $LN1@Timer_Expi

; 1134 : 		{
; 1135 : 			Attach_Script_Once_V ( part, "dp88_linkHealth", "%d", Commands->Get_ID(obj) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET ??_C@_0BA@BJMNFBLH@dp88_linkHealth?$AA@
	mov	eax, DWORD PTR _part$1[ebp]
	push	eax
	call	?Attach_Script_Once_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_Once_V
	add	esp, 16					; 00000010H

; 1136 : 			Attach_Script_Once_V ( part, "dp88_linkVetPoints", "%d", Commands->Get_ID(obj) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET ??_C@_0BD@DMPJMKMH@dp88_linkVetPoints?$AA@
	mov	eax, DWORD PTR _part$1[ebp]
	push	eax
	call	?Attach_Script_Once_V@@YAXPAVScriptableGameObj@@PBD1ZZ ; Attach_Script_Once_V
	add	esp, 16					; 00000010H
$LN1@Timer_Expi:

; 1137 : 		}
; 1138 : 	}
; 1139 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_spawnVehiclePart::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_spawnVehiclePart::Created, COMDAT
; _this$ = ecx

; 1103 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1104 : 	partObjectId = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1105 : 
; 1106 : 	/* Start a timer to spawn the vehicle part. We can't do this immediatly because
; 1107 :   it seems to cause issues with double initializations of scripts... */
; 1108 : 	Commands->Start_Timer ( obj, this, 0.01f, TIMER_SPAWNVEHICLEPART );

	push	-620756989				; db000003H
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 1109 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_spawnVehiclePart@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_spawnVehiclePart::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_chronoTank@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_chronoTank@@UAEPAXI@Z PROC			; dp88_chronoTank::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_chronoTank@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_chronoTank@@UAEPAXI@Z ENDP			; dp88_chronoTank::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_chronoTank@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_chronoTank@@UAE@XZ PROC				; dp88_chronoTank::~dp88_chronoTank, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_chronoTank@@UAE@XZ ENDP				; dp88_chronoTank::~dp88_chronoTank
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_chronoTank@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_chronoTank@@QAE@XZ PROC				; dp88_chronoTank::dp88_chronoTank, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0JFW_Key_Hook_Base@@QAE@XZ		; JFW_Key_Hook_Base::JFW_Key_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_chronoTank@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_chronoTank@@QAE@XZ ENDP				; dp88_chronoTank::dp88_chronoTank
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Shift_In_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -280						; size = 12
_driver$2 = -204					; size = 4
_params$3 = -200					; size = 196
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Shift_In_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_chronoTank::Shift_In_Cleanup, COMDAT
; _this$ = ecx

; 1041 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1042 : 	// Cleanup step 1
; 1043 : 	if ( state == CT_STATE_SHIFTED_IN_PENDING_CLEANUP_1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 7
	jne	SHORT $LN3@Shift_In_C

; 1044 : 	{
; 1045 : 		// Move driver to location of this vehicle
; 1046 : 		Commands->Set_Position(Commands->Find_Object(driver_id),Commands->Get_Position(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8

; 1047 : 
; 1048 : 		// Set state and start timer to advance to next state (cleanup step 2) on next engine tick
; 1049 : 		state = CT_STATE_SHIFTED_IN_PENDING_CLEANUP_2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 8

; 1050 : 		Commands->Start_Timer(obj,this,5.4f,TIMER_CHRONOTANK_ADVANCE_STATE);

	push	-2050907295				; 85c1a361H
	push	ecx
	movss	xmm0, DWORD PTR __real@40accccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 1051 : 	}
; 1052 : 
; 1053 : 	// Cleanup step 2
; 1054 : 	else

	jmp	$LN2@Shift_In_C
$LN3@Shift_In_C:

; 1055 : 	{
; 1056 : 		// Transition the driver into this vehicle
; 1057 : 		ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$3[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 1058 : 		params.Set_Basic((long)0,100,39);

	push	-1
	push	39					; 00000027H
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	ecx, DWORD PTR _params$3[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXJMHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 1059 : 		GameObject* driver = Commands->Find_Object(driver_id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _driver$2[ebp], eax

; 1060 : 		if ( driver )

	cmp	DWORD PTR _driver$2[ebp], 0
	je	SHORT $LN1@Shift_In_C

; 1061 : 			Commands->Action_Enter_Exit(driver,params);

	lea	eax, DWORD PTR _params$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _driver$2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 8
$LN1@Shift_In_C:

; 1062 : 
; 1063 : 		// Allow this vehicle to be mobile again
; 1064 : 		obj->As_VehicleGameObj()->Set_Immovable(false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	ecx, eax
	call	?Set_Immovable@VehicleGameObj@@QAEX_N@Z	; VehicleGameObj::Set_Immovable

; 1065 : 
; 1066 : 		// Set state and start timer to advance to next stage (charged)
; 1067 : 		state = CT_STATE_CHARGING;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 1068 : 		Commands->Start_Timer(obj,this,Get_Float_Parameter("recharge_time"),TIMER_CHRONOTANK_ADVANCE_STATE);

	push	-2050907295				; 85c1a361H
	push	OFFSET ??_C@_0O@IPLDJMNA@recharge_time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@Shift_In_C:

; 1069 : 	}
; 1070 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Shift_In_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_chronoTank::Shift_In_Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Shift_In_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_shifted_vehicle$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Shift_In_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_chronoTank::Shift_In_Complete, COMDAT
; _this$ = ecx

; 1018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1019 : 	// Get shifted vehicle
; 1020 : 	GameObject* shifted_vehicle = Commands->Find_Object(shifted_vehicle_object_id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _shifted_vehicle$[ebp], eax

; 1021 : 
; 1022 : 	// Move this vehicle to the location of the shifted vehicle
; 1023 : 	Set_Transform(obj, Get_Transform(shifted_vehicle) );

	sub	esp, 48					; 00000030H
	mov	eax, esp
	mov	ecx, DWORD PTR _shifted_vehicle$[ebp]
	push	ecx
	push	eax
	call	?Get_Transform@@YA?AVMatrix3D@@PAVScriptableGameObj@@@Z ; Get_Transform
	add	esp, 8
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?Set_Transform@@YAXPAVScriptableGameObj@@VMatrix3D@@@Z ; Set_Transform
	add	esp, 52					; 00000034H

; 1024 : 
; 1025 : 	// Make this vehicle visible again
; 1026 : 	Commands->Set_Is_Rendered(obj, true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+628]
	call	edx
	add	esp, 8

; 1027 : 
; 1028 : 	// Destroy the shifted vehicle
; 1029 : 	Commands->Destroy_Object(Commands->Find_Object(shifted_vehicle_object_id));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4

; 1030 : 	shifted_vehicle_object_id = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1031 : 
; 1032 : 	// Set state
; 1033 : 	state = CT_STATE_SHIFTED_IN_PENDING_CLEANUP_1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 7

; 1034 : 
; 1035 : 	// Start timer to advance to next state (cleanup) on next engine tick
; 1036 : 	Commands->Start_Timer(obj,this,5.01f,TIMER_CHRONOTANK_ADVANCE_STATE);

	push	-2050907295				; 85c1a361H
	push	ecx
	movss	xmm0, DWORD PTR __real@40a051ec
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 1037 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Shift_In_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_chronoTank::Shift_In_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Shift_In_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
_params$2 = -16						; size = 4
_effect_object$3 = -12					; size = 4
_shifted_vehicle$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Shift_In_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_chronoTank::Shift_In_Begin, COMDAT
; _this$ = ecx

; 990  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 	// Set new state
; 992  : 	state = CT_STATE_SHIFTING_IN;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 6

; 993  : 
; 994  : 	// Get shifted vehicle
; 995  : 	GameObject* shifted_vehicle = Commands->Find_Object(shifted_vehicle_object_id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _shifted_vehicle$[ebp], eax

; 996  : 
; 997  : 	// Lock the shifted vehicle in position
; 998  : 	shifted_vehicle->As_VehicleGameObj()->Set_Immovable(true);

	push	1
	mov	eax, DWORD PTR _shifted_vehicle$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shifted_vehicle$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	ecx, eax
	call	?Set_Immovable@VehicleGameObj@@QAEX_N@Z	; VehicleGameObj::Set_Immovable

; 999  : 
; 1000 : 	// Start timer to advance to next stage (shift in complete)
; 1001 : 	Commands->Start_Timer(obj,this,Get_Float_Parameter("shift_in_time"),TIMER_CHRONOTANK_ADVANCE_STATE);

	push	-2050907295				; 85c1a361H
	push	OFFSET ??_C@_0O@EIGFLHCP@shift_in_time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 1002 : 
; 1003 : 	/* Create shift in effect if the preset provided is valid */
; 1004 : 	if ( Is_Valid_Preset(Get_Parameter("shift_in_effect_preset")) )

	push	OFFSET ??_C@_0BH@IKKNCHPJ@shift_in_effect_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	$LN1@Shift_In_B

; 1005 : 	{
; 1006 : 		// Create effect object
; 1007 : 		GameObject* effect_object = Commands->Create_Object ( Get_Parameter("shift_in_effect_preset"), Commands->Get_Position(shifted_vehicle) );

	mov	eax, DWORD PTR _shifted_vehicle$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BH@IKKNCHPJ@shift_in_effect_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _effect_object$3[ebp], eax

; 1008 : 
; 1009 : 		// Attach script to clean up effect
; 1010 : 		StringClass params(true);

	push	1
	lea	ecx, DWORD PTR _params$2[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 1011 : 		params.Format ( "%.2f,%d", Get_Float_Parameter("shift_in_effect_time"), 983142 );

	push	983142					; 000f0066H
	push	OFFSET ??_C@_0BF@GEIPJMKA@shift_in_effect_time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@
	lea	eax, DWORD PTR _params$2[ebp]
	push	eax
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 1012 : 		Commands->Attach_Script ( effect_object, "JFW_Destroy_Self_Timer", params.Peek_Buffer() );

	lea	ecx, DWORD PTR _params$2[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	push	OFFSET ??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@
	mov	eax, DWORD PTR _effect_object$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 12					; 0000000cH

; 1013 : 	}

	lea	ecx, DWORD PTR _params$2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@Shift_In_B:

; 1014 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Shift_In_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_chronoTank::Shift_In_Begin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Shift_Out_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -312						; size = 12
$T2 = -300						; size = 12
$T3 = -288						; size = 12
_driver$4 = -212					; size = 4
_params$5 = -208					; size = 196
_shifted_vehicle$6 = -12				; size = 4
_shifted_vehicle$7 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Shift_Out_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_chronoTank::Shift_Out_Cleanup, COMDAT
; _this$ = ecx

; 938  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 939  : 	// Cleanup step 1
; 940  : 	if ( state == CT_STATE_SHIFTED_OUT_PENDING_CLEANUP_1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 3
	jne	$LN3@Shift_Out_

; 941  : 	{
; 942  : 		// Get shifted vehicle
; 943  : 		GameObject* shifted_vehicle = Commands->Find_Object(shifted_vehicle_object_id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _shifted_vehicle$7[ebp], eax

; 944  : 
; 945  :     // Make the shifted vehicle invisible to base defences
; 946  :     Commands->Set_Is_Visible(shifted_vehicle,false);

	push	0
	mov	eax, DWORD PTR _shifted_vehicle$7[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+624]
	call	edx
	add	esp, 8

; 947  : 
; 948  : 		// Move the shifted vehicle to this location
; 949  : 		Set_Transform(shifted_vehicle, Get_Transform(obj) );

	sub	esp, 48					; 00000030H
	mov	eax, esp
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	push	eax
	call	?Get_Transform@@YA?AVMatrix3D@@PAVScriptableGameObj@@@Z ; Get_Transform
	add	esp, 8
	mov	edx, DWORD PTR _shifted_vehicle$7[ebp]
	push	edx
	call	?Set_Transform@@YAXPAVScriptableGameObj@@VMatrix3D@@@Z ; Set_Transform
	add	esp, 52					; 00000034H

; 950  : 
; 951  : 		// Move the driver to where the shifted vehicle is
; 952  : 		Commands->Set_Position(Commands->Find_Object(driver_id),Commands->Get_Position(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8

; 953  : 
; 954  : 		// Move this vehicle to a safe place out of harms way and make it invisible
; 955  : 		Commands->Set_Position(obj,Vector3(0.0f,0.0f,500.0f));

	push	ecx
	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+60]
	call	edx
	add	esp, 8

; 956  : 		Commands->Set_Is_Rendered ( obj, false );

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+628]
	call	edx
	add	esp, 8

; 957  : 
; 958  : 		// Set state and start timer to advance to next state (cleanup step 2) on next engine tick
; 959  : 		state = CT_STATE_SHIFTED_OUT_PENDING_CLEANUP_2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 4

; 960  : 		Commands->Start_Timer(obj,this,5.4f,TIMER_CHRONOTANK_ADVANCE_STATE);

	push	-2050907295				; 85c1a361H
	push	ecx
	movss	xmm0, DWORD PTR __real@40accccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 961  : 	}
; 962  : 
; 963  : 	// Cleanup step 2
; 964  : 	else

	jmp	$LN2@Shift_Out_
$LN3@Shift_Out_:

; 965  : 	{
; 966  : 		// Get shifted vehicle
; 967  : 		GameObject* shifted_vehicle = Commands->Find_Object(shifted_vehicle_object_id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _shifted_vehicle$6[ebp], eax

; 968  : 
; 969  : 		// Move the driver to where the shifted vehicle is (make sure they don't walk off...)
; 970  : 		Commands->Set_Position(Commands->Find_Object(driver_id),Commands->Get_Position(shifted_vehicle));

	mov	eax, DWORD PTR _shifted_vehicle$6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8

; 971  : 
; 972  : 		// Transition the driver into the shifted vehicle
; 973  : 		ActionParamsStruct params;

	lea	ecx, DWORD PTR _params$5[ebp]
	call	??0ActionParamsStruct@@QAE@XZ		; ActionParamsStruct::ActionParamsStruct

; 974  : 		params.Set_Basic((long)0,100,39);

	push	-1
	push	39					; 00000027H
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	ecx, DWORD PTR _params$5[ebp]
	call	?Set_Basic@ActionParamsStruct@@QAEXJMHW4SoldierAIState@@@Z ; ActionParamsStruct::Set_Basic

; 975  : 		GameObject* driver = Commands->Find_Object(driver_id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _driver$4[ebp], eax

; 976  : 		if ( driver )

	cmp	DWORD PTR _driver$4[ebp], 0
	je	SHORT $LN1@Shift_Out_

; 977  : 			Commands->Action_Enter_Exit(driver,params);

	lea	eax, DWORD PTR _params$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _driver$4[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 8
$LN1@Shift_Out_:

; 978  : 
; 979  : 		// Set state and start timer to advance to next stage (shift in)
; 980  : 		state = CT_STATE_SHIFTED_OUT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 5

; 981  : 		Commands->Start_Timer(obj,this,Get_Float_Parameter("shift_duration"),TIMER_CHRONOTANK_ADVANCE_STATE);

	push	-2050907295				; 85c1a361H
	push	OFFSET ??_C@_0P@GHINFOCL@shift_duration?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 982  : 
; 983  : 		// Begin timer for random interference actions
; 984  : 		Commands->Start_Timer(obj,this,1.5f,TIMER_CHRONOTANK_RANDOM_INTERFERENCE);

	push	-2050907294				; 85c1a362H
	push	ecx
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@Shift_Out_:

; 985  : 	}
; 986  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Shift_Out_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_chronoTank::Shift_Out_Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Shift_Out_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Shift_Out_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_chronoTank::Shift_Out_Complete, COMDAT
; _this$ = ecx

; 924  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 925  : 	// Enable vehicle transitions to allow the driver out
; 926  : 	Commands->Enable_Vehicle_Transitions(obj,true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8

; 927  : 
; 928  : 	// Transition the driver out of this vehicle
; 929  : 	Soldier_Transition_Vehicle(Commands->Find_Object(driver_id));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	call	?Soldier_Transition_Vehicle@@YAXPAVScriptableGameObj@@@Z ; Soldier_Transition_Vehicle
	add	esp, 4

; 930  : 
; 931  : 	// Set state and start timer to advance to next state (cleanup step 1) on next engine tick
; 932  : 	state = CT_STATE_SHIFTED_OUT_PENDING_CLEANUP_1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 3

; 933  : 	Commands->Start_Timer(obj,this,5.2f,TIMER_CHRONOTANK_ADVANCE_STATE);

	push	-2050907295				; 85c1a361H
	push	ecx
	movss	xmm0, DWORD PTR __real@40a66666
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 934  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Shift_Out_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_chronoTank::Shift_Out_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Shift_Out_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -104						; size = 12
$T2 = -92						; size = 12
_params$3 = -16						; size = 4
_effect_object$4 = -12					; size = 4
_shifted_vehicle$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Shift_Out_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_chronoTank::Shift_Out_Begin, COMDAT
; _this$ = ecx

; 891  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 892  : 	if ( state != CT_STATE_CHARGED )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 1
	je	SHORT $LN2@Shift_Out_

; 893  : 		return;

	jmp	$LN3@Shift_Out_
$LN2@Shift_Out_:

; 894  : 
; 895  : 	// Set new state
; 896  : 	state = CT_STATE_SHIFTING_OUT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 2

; 897  : 
; 898  : 	// Lock the vehicle in it's current location and prevent the driver getting out
; 899  : 	obj->As_VehicleGameObj()->Set_Immovable(true);

	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	ecx, eax
	call	?Set_Immovable@VehicleGameObj@@QAEX_N@Z	; VehicleGameObj::Set_Immovable

; 900  : 	Commands->Enable_Vehicle_Transitions(obj,false);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 8

; 901  : 
; 902  : 	// Create the shifted out vehicle in a safe location (pre-creation reduces the transition delay)
; 903  : 	GameObject* shifted_vehicle = Commands->Create_Object ( Get_Parameter("shifted_vehicle_preset"), Vector3(0.0f,0.0f,500.0f) );

	push	ecx
	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	OFFSET ??_C@_0BH@HCMDAMPC@shifted_vehicle_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 8
	mov	DWORD PTR _shifted_vehicle$[ebp], eax

; 904  : 	shifted_vehicle_object_id = Commands->Get_ID(shifted_vehicle);

	mov	eax, DWORD PTR _shifted_vehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 905  : 
; 906  : 	// Start timer to advance to next stage (shift out complete)
; 907  : 	Commands->Start_Timer(obj,this,Get_Float_Parameter("shift_out_time"),TIMER_CHRONOTANK_ADVANCE_STATE);

	push	-2050907295				; 85c1a361H
	push	OFFSET ??_C@_0P@FIAIJOLE@shift_out_time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 908  : 
; 909  : 	/* Create shift out effect if the preset provided is valid */
; 910  : 	if ( Is_Valid_Preset(Get_Parameter("shift_out_effect_preset")) )

	push	OFFSET ??_C@_0BI@MNODKNNJ@shift_out_effect_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	$LN1@Shift_Out_

; 911  : 	{
; 912  : 		// Create effect object
; 913  : 		GameObject* effect_object = Commands->Create_Object ( Get_Parameter("shift_out_effect_preset"), Commands->Get_Position(obj) );

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BI@MNODKNNJ@shift_out_effect_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 8
	mov	DWORD PTR _effect_object$4[ebp], eax

; 914  : 
; 915  : 		// Attach script to clean up effect
; 916  : 		StringClass params(true);

	push	1
	lea	ecx, DWORD PTR _params$3[ebp]
	call	??0StringClass@@QAE@_N@Z		; StringClass::StringClass

; 917  : 		params.Format ( "%.2f,%d", Get_Float_Parameter("shift_out_effect_time"), 983142 );

	push	983142					; 000f0066H
	push	OFFSET ??_C@_0BG@JIFIAOPL@shift_out_effect_time?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_07DOPKBAAA@?$CF?42f?0?$CFd?$AA@
	lea	eax, DWORD PTR _params$3[ebp]
	push	eax
	call	DWORD PTR __imp_?Format@StringClass@@QAAHPBDZZ
	add	esp, 20					; 00000014H

; 918  : 		Commands->Attach_Script ( effect_object, "JFW_Destroy_Self_Timer", params.Peek_Buffer() );

	lea	ecx, DWORD PTR _params$3[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	push	OFFSET ??_C@_0BH@IMLBMMM@JFW_Destroy_Self_Timer?$AA@
	mov	eax, DWORD PTR _effect_object$4[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 12					; 0000000cH

; 919  : 	}

	lea	ecx, DWORD PTR _params$3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@Shift_Out_:
$LN3@Shift_Out_:

; 920  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Shift_Out_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_chronoTank::Shift_Out_Begin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?KeyHook@dp88_chronoTank@@EAEXXZ
_TEXT	SEGMENT
_obj$ = -8						; size = 4
_this$ = -4						; size = 4
?KeyHook@dp88_chronoTank@@EAEXXZ PROC			; dp88_chronoTank::KeyHook, COMDAT
; _this$ = ecx

; 881  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 882  : 	GameObject* obj = Commands->Find_Object(object_id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 883  : 	if ( state == CT_STATE_CHARGED )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 1
	jne	SHORT $LN3@KeyHook

; 884  : 		Shift_Out_Begin(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shift_Out_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_Out_Begin
	jmp	SHORT $LN4@KeyHook
$LN3@KeyHook:

; 885  : 	else if ( state == CT_STATE_CHARGING )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN4@KeyHook

; 886  : 		Send_Message_Player(Commands->Find_Object(driver_id),255,255,255,"The chronoshift device has not finished recharging yet");

	push	OFFSET ??_C@_0DH@HPAIJMOM@The?5chronoshift?5device?5has?5not?5f@
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H
$LN4@KeyHook:

; 887  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyHook@dp88_chronoTank@@EAEXXZ ENDP			; dp88_chronoTank::KeyHook
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_chronoTank@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv372 = -136						; size = 4
tv422 = -132						; size = 4
tv366 = -128						; size = 4
tv420 = -124						; size = 4
tv183 = -124						; size = 4
tv360 = -120						; size = 4
tv184 = -120						; size = 4
_plusAxis$1 = -48					; size = 4
_subAxis$2 = -44					; size = 4
_velocityChange$3 = -40					; size = 4
_percentChange$4 = -36					; size = 4
_avgVelocity$5 = -32					; size = 4
_velocity$6 = -28					; size = 12
_velocity_fluctuation_percent_max$7 = -16		; size = 4
_heading$8 = -12					; size = 4
_shifted_vehicle$9 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_chronoTank@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_chronoTank::Timer_Expired, COMDAT
; _this$ = ecx

; 776  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 	// Timer to advance to the next stage of the chronoshift process
; 778  : 	if ( number == TIMER_CHRONOTANK_ADVANCE_STATE )

	cmp	DWORD PTR _number$[ebp], -2050907295	; 85c1a361H
	jne	$LN31@Timer_Expi

; 779  : 	{
; 780  : 		// Chronoshift device has recharged, set state and send message to driver
; 781  : 		if ( state == CT_STATE_CHARGING )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN30@Timer_Expi

; 782  : 		{
; 783  : 			state = CT_STATE_CHARGED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 1

; 784  : 
; 785  : 			if ( driver_id != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN29@Timer_Expi

; 786  : 				Send_Message_Player(Commands->Find_Object(driver_id),255,255,255,"The chronoshift device is now fully charged and ready for use");

	push	OFFSET ??_C@_0DO@KFEKCDFK@The?5chronoshift?5device?5is?5now?5fu@
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	call	DWORD PTR ?Send_Message_Player@@3P6AXPAVScriptableGameObj@@IIIPBD@ZA ; Send_Message_Player
	add	esp, 20					; 00000014H
$LN29@Timer_Expi:

; 787  : 		}

	jmp	$LN18@Timer_Expi
$LN30@Timer_Expi:

; 788  : 
; 789  : 
; 790  : 		// Shift out sequence has completed
; 791  : 		else if ( state == CT_STATE_SHIFTING_OUT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 2
	jne	SHORT $LN27@Timer_Expi

; 792  : 			Shift_Out_Complete(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shift_Out_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_Out_Complete
	jmp	SHORT $LN18@Timer_Expi
$LN27@Timer_Expi:

; 793  : 
; 794  : 
; 795  : 		// Shift out sequence is ready for cleanup
; 796  : 		else if ( state == CT_STATE_SHIFTED_OUT_PENDING_CLEANUP_1 || state == CT_STATE_SHIFTED_OUT_PENDING_CLEANUP_2 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 3
	je	SHORT $LN24@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 4
	jne	SHORT $LN25@Timer_Expi
$LN24@Timer_Expi:

; 797  : 			Shift_Out_Cleanup(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shift_Out_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_Out_Cleanup
	jmp	SHORT $LN18@Timer_Expi
$LN25@Timer_Expi:

; 798  : 
; 799  : 
; 800  : 		// Chronoshift time has expired
; 801  : 		else if ( state == CT_STATE_SHIFTED_OUT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 5
	jne	SHORT $LN22@Timer_Expi

; 802  : 			Shift_In_Begin(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shift_In_Begin@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_In_Begin
	jmp	SHORT $LN18@Timer_Expi
$LN22@Timer_Expi:

; 803  : 
; 804  : 
; 805  : 		// Shift in sequence has completed
; 806  : 		else if ( state == CT_STATE_SHIFTING_IN )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 6
	jne	SHORT $LN20@Timer_Expi

; 807  : 			Shift_In_Complete(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shift_In_Complete@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_In_Complete
	jmp	SHORT $LN18@Timer_Expi
$LN20@Timer_Expi:

; 808  : 
; 809  : 
; 810  : 		// Shift in sequence is ready for cleanup
; 811  : 		else if ( state == CT_STATE_SHIFTED_IN_PENDING_CLEANUP_1 || state == CT_STATE_SHIFTED_IN_PENDING_CLEANUP_2 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 7
	je	SHORT $LN17@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 8
	jne	SHORT $LN18@Timer_Expi
$LN17@Timer_Expi:

; 812  : 			Shift_In_Cleanup(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shift_In_Cleanup@dp88_chronoTank@@AAEXPAVScriptableGameObj@@@Z ; dp88_chronoTank::Shift_In_Cleanup
$LN18@Timer_Expi:

; 813  : 	}

	jmp	$LN15@Timer_Expi
$LN31@Timer_Expi:

; 814  : 
; 815  : 
; 816  : 	// Timer to apply random interference actions
; 817  : 	else if ( number == TIMER_CHRONOTANK_RANDOM_INTERFERENCE && shifted_vehicle_object_id != NULL && state == CT_STATE_SHIFTED_OUT )

	cmp	DWORD PTR _number$[ebp], -2050907294	; 85c1a362H
	jne	$LN15@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN15@Timer_Expi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 5
	jne	$LN15@Timer_Expi

; 818  : 	{
; 819  : 		// Get shifted vehicle
; 820  : 		GameObject* shifted_vehicle = Commands->Find_Object(shifted_vehicle_object_id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _shifted_vehicle$9[ebp], eax

; 821  : 
; 822  : 
; 823  : 		// Alter heading
; 824  : 		if ( Get_Int_Parameter("shift_heading_fluctuation_degrees_max") > 0 )

	push	OFFSET ??_C@_0CG@ENOFPKMC@shift_heading_fluctuation_degree@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	jle	$LN14@Timer_Expi

; 825  : 		{
; 826  : 			float heading = Commands->Get_Facing (shifted_vehicle);

	mov	eax, DWORD PTR _shifted_vehicle$9[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	fstp	DWORD PTR _heading$8[ebp]

; 827  : 			Console_Output ( "Heading was %.2f\n", heading );

	cvtss2sd xmm0, DWORD PTR _heading$8[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BC@JGDIALCG@Heading?5was?5?$CF?42f?6?$AA@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 12					; 0000000cH

; 828  : 			heading += Commands->Get_Random_Int(Get_Int_Parameter("shift_heading_fluctuation_degrees_max")*-1,Get_Int_Parameter("shift_heading_fluctuation_degrees_max"));

	push	OFFSET ??_C@_0CG@ENOFPKMC@shift_heading_fluctuation_degree@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	push	OFFSET ??_C@_0CG@ENOFPKMC@shift_heading_fluctuation_degree@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	imul	eax, -1
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _heading$8[ebp]
	movss	DWORD PTR _heading$8[ebp], xmm0

; 829  : 			heading = (heading<0) ? heading+360 : ((heading>360) ? heading-360 : heading);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _heading$8[ebp]
	jbe	SHORT $LN36@Timer_Expi
	movss	xmm0, DWORD PTR _heading$8[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR tv184[ebp], xmm0
	jmp	SHORT $LN37@Timer_Expi
$LN36@Timer_Expi:
	movss	xmm0, DWORD PTR _heading$8[ebp]
	comiss	xmm0, DWORD PTR __real@43b40000
	jbe	SHORT $LN34@Timer_Expi
	movss	xmm0, DWORD PTR _heading$8[ebp]
	subss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR tv183[ebp], xmm0
	jmp	SHORT $LN35@Timer_Expi
$LN34@Timer_Expi:
	movss	xmm0, DWORD PTR _heading$8[ebp]
	movss	DWORD PTR tv183[ebp], xmm0
$LN35@Timer_Expi:
	movss	xmm0, DWORD PTR tv183[ebp]
	movss	DWORD PTR tv184[ebp], xmm0
$LN37@Timer_Expi:
	movss	xmm0, DWORD PTR tv184[ebp]
	movss	DWORD PTR _heading$8[ebp], xmm0

; 830  : 			Console_Output ( "Heading is now %.2f\n", heading );

	cvtss2sd xmm0, DWORD PTR _heading$8[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BF@JIFFHMAJ@Heading?5is?5now?5?$CF?42f?6?$AA@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 12					; 0000000cH

; 831  : 			Commands->Set_Facing(shifted_vehicle, heading);

	push	ecx
	movss	xmm0, DWORD PTR _heading$8[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _shifted_vehicle$9[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8
$LN14@Timer_Expi:

; 832  : 		}
; 833  : 
; 834  : 
; 835  : 		// Alter velocity - move x% of velocity from a random axis to another random axis
; 836  : 		float velocity_fluctuation_percent_max = Get_Float_Parameter("shift_velocity_fluctuation_percent_max");

	push	OFFSET ??_C@_0CH@KNMEOMAC@shift_velocity_fluctuation_perce@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR _velocity_fluctuation_percent_max$7[ebp]

; 837  : 		if (velocity_fluctuation_percent_max > 0 )

	movss	xmm0, DWORD PTR _velocity_fluctuation_percent_max$7[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN13@Timer_Expi

; 838  : 		{
; 839  : 			Vector3 velocity = Get_Velocity (shifted_vehicle);

	mov	eax, DWORD PTR _shifted_vehicle$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _velocity$6[ebp]
	push	ecx
	call	?Get_Velocity@@YA?AVVector3@@PAVScriptableGameObj@@@Z ; Get_Velocity
	add	esp, 8

; 840  : 			Console_Output ( "Velocity was %.2f, %.2f, %.2f\n", velocity.X, velocity.Y, velocity.Z );

	cvtss2sd xmm0, DWORD PTR _velocity$6[ebp+8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _velocity$6[ebp+4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _velocity$6[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BP@HHHAJNBH@Velocity?5was?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?6?$AA@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 28					; 0000001cH

; 841  : 
; 842  : 			float avgVelocity = (abs(velocity.X) + abs(velocity.Y) + abs(velocity.Z))/3.0f;

	push	ecx
	movss	xmm0, DWORD PTR _velocity$6[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv360[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _velocity$6[ebp+4]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv420[ebp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv366[ebp]
	movss	xmm0, DWORD PTR tv420[ebp]
	addss	xmm0, DWORD PTR tv366[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _velocity$6[ebp+8]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv422[ebp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv372[ebp]
	movss	xmm0, DWORD PTR tv422[ebp]
	addss	xmm0, DWORD PTR tv372[ebp]
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _avgVelocity$5[ebp], xmm0

; 843  : 			float percentChange = Commands->Get_Random(0.0f,velocity_fluctuation_percent_max);

	push	ecx
	movss	xmm0, DWORD PTR _velocity_fluctuation_percent_max$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
	add	esp, 8
	fstp	DWORD PTR _percentChange$4[ebp]

; 844  : 			float velocityChange = avgVelocity * (percentChange/100.0f);

	movss	xmm0, DWORD PTR _percentChange$4[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR _avgVelocity$5[ebp]
	movss	DWORD PTR _velocityChange$3[ebp], xmm0

; 845  : 
; 846  : 			// Pick a random axis to apply the changes to
; 847  : 			int subAxis = Commands->Get_Random_Int(1,3);

	push	3
	push	1
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	DWORD PTR _subAxis$2[ebp], eax

; 848  : 			int plusAxis = Commands->Get_Random_Int(1,3);

	push	3
	push	1
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	DWORD PTR _plusAxis$1[ebp], eax
$LN12@Timer_Expi:

; 849  : 			while (plusAxis == subAxis)

	mov	eax, DWORD PTR _plusAxis$1[ebp]
	cmp	eax, DWORD PTR _subAxis$2[ebp]
	jne	SHORT $LN11@Timer_Expi

; 850  : 				plusAxis = Commands->Get_Random_Int(1,3);

	push	3
	push	1
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	DWORD PTR _plusAxis$1[ebp], eax
	jmp	SHORT $LN12@Timer_Expi
$LN11@Timer_Expi:

; 851  : 			Console_Output ( "Subtracting %.2f%% velocity (%.2f) from axis %d\n", percentChange, velocityChange*-1.0f, subAxis );

	mov	eax, DWORD PTR _subAxis$2[ebp]
	push	eax
	movss	xmm0, DWORD PTR _velocityChange$3[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _percentChange$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0DB@PKNMJPCB@Subtracting?5?$CF?42f?$CF?$CF?5velocity?5?$CI?$CF?42@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 24					; 00000018H

; 852  : 			Console_Output ( "Adding %.2f%% velocity (%.2f) to axis %d\n", percentChange, velocityChange, plusAxis );

	mov	eax, DWORD PTR _plusAxis$1[ebp]
	push	eax
	cvtss2sd xmm0, DWORD PTR _velocityChange$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _percentChange$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0CK@NOGNEHEF@Adding?5?$CF?42f?$CF?$CF?5velocity?5?$CI?$CF?42f?$CJ?5to@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 24					; 00000018H

; 853  : 
; 854  : 			// Apply the velocity changes
; 855  : 			if ( plusAxis == 1 )

	cmp	DWORD PTR _plusAxis$1[ebp], 1
	jne	SHORT $LN10@Timer_Expi

; 856  : 				velocity.X -= velocityChange;

	movss	xmm0, DWORD PTR _velocity$6[ebp]
	subss	xmm0, DWORD PTR _velocityChange$3[ebp]
	movss	DWORD PTR _velocity$6[ebp], xmm0
	jmp	SHORT $LN6@Timer_Expi
$LN10@Timer_Expi:

; 857  : 			else if ( plusAxis == 2 )

	cmp	DWORD PTR _plusAxis$1[ebp], 2
	jne	SHORT $LN8@Timer_Expi

; 858  : 				velocity.Y -= velocityChange;

	movss	xmm0, DWORD PTR _velocity$6[ebp+4]
	subss	xmm0, DWORD PTR _velocityChange$3[ebp]
	movss	DWORD PTR _velocity$6[ebp+4], xmm0
	jmp	SHORT $LN6@Timer_Expi
$LN8@Timer_Expi:

; 859  : 			else if ( plusAxis == 3 )

	cmp	DWORD PTR _plusAxis$1[ebp], 3
	jne	SHORT $LN6@Timer_Expi

; 860  : 				velocity.Z -= velocityChange;

	movss	xmm0, DWORD PTR _velocity$6[ebp+8]
	subss	xmm0, DWORD PTR _velocityChange$3[ebp]
	movss	DWORD PTR _velocity$6[ebp+8], xmm0
$LN6@Timer_Expi:

; 861  : 			
; 862  : 			if ( subAxis == 1 )

	cmp	DWORD PTR _subAxis$2[ebp], 1
	jne	SHORT $LN5@Timer_Expi

; 863  : 				velocity.X += velocityChange;

	movss	xmm0, DWORD PTR _velocity$6[ebp]
	addss	xmm0, DWORD PTR _velocityChange$3[ebp]
	movss	DWORD PTR _velocity$6[ebp], xmm0
	jmp	SHORT $LN1@Timer_Expi
$LN5@Timer_Expi:

; 864  : 			else if ( subAxis == 2 )

	cmp	DWORD PTR _subAxis$2[ebp], 2
	jne	SHORT $LN3@Timer_Expi

; 865  : 				velocity.Y += velocityChange;

	movss	xmm0, DWORD PTR _velocity$6[ebp+4]
	addss	xmm0, DWORD PTR _velocityChange$3[ebp]
	movss	DWORD PTR _velocity$6[ebp+4], xmm0
	jmp	SHORT $LN1@Timer_Expi
$LN3@Timer_Expi:

; 866  : 			else if ( subAxis == 3 )

	cmp	DWORD PTR _subAxis$2[ebp], 3
	jne	SHORT $LN1@Timer_Expi

; 867  : 				velocity.Z += velocityChange;

	movss	xmm0, DWORD PTR _velocity$6[ebp+8]
	addss	xmm0, DWORD PTR _velocityChange$3[ebp]
	movss	DWORD PTR _velocity$6[ebp+8], xmm0
$LN1@Timer_Expi:

; 868  : 
; 869  : 			// Set new velocity
; 870  : 			Console_Output ( "Velocity is now %.2f, %.2f, %.2f\n", velocity.X, velocity.Y, velocity.Z );

	cvtss2sd xmm0, DWORD PTR _velocity$6[ebp+8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _velocity$6[ebp+4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _velocity$6[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0CC@LLOHKBM@Velocity?5is?5now?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 28					; 0000001cH

; 871  : 			Set_Velocity(shifted_vehicle, velocity);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	eax, DWORD PTR _velocity$6[ebp]
	push	eax
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _shifted_vehicle$9[ebp]
	push	ecx
	call	?Set_Velocity@@YAXPAVScriptableGameObj@@VVector3@@@Z ; Set_Velocity
	add	esp, 16					; 00000010H
$LN13@Timer_Expi:

; 872  : 		}
; 873  : 
; 874  : 		// Start timer again for the next set of interference actions
; 875  : 		Commands->Start_Timer(obj,this,1.00f,TIMER_CHRONOTANK_RANDOM_INTERFERENCE);

	push	-2050907294				; 85c1a362H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN15@Timer_Expi:

; 876  : 	}
; 877  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_chronoTank@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_chronoTank::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_chronoTank@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_chronoTank@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_chronoTank::Custom, COMDAT
; _this$ = ecx

; 757  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 758  : 	// Look for vehicle entry
; 759  : 	if ( type == CUSTOM_EVENT_VEHICLE_ENTERED && driver_id == NULL )

	cmp	DWORD PTR _type$[ebp], 1000000028	; 3b9aca1cH
	jne	SHORT $LN3@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN3@Custom

; 760  : 	{
; 761  : 		driver_id = Commands->Get_ID(sender);

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 762  : 		InstallHook( Get_Parameter("shift_keyhook"), sender );

	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	push	OFFSET ??_C@_0O@MEMONODM@shift_keyhook?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InstallHook@JFW_Key_Hook_Base@@QAEXPBDPAVScriptableGameObj@@@Z ; JFW_Key_Hook_Base::InstallHook
	jmp	SHORT $LN4@Custom
$LN3@Custom:

; 763  : 	}
; 764  : 
; 765  : 
; 766  : 	// Look for vehicle exit (ignore when leaving due to chronoshift)
; 767  : 	else if ( type == CUSTOM_EVENT_VEHICLE_EXITED && Commands->Get_ID(sender) == driver_id && state != CT_STATE_SHIFTED_OUT_PENDING_CLEANUP_1 )

	cmp	DWORD PTR _type$[ebp], 1000000029	; 3b9aca1dH
	jne	SHORT $LN4@Custom
	mov	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+44]
	jne	SHORT $LN4@Custom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 3
	je	SHORT $LN4@Custom

; 768  : 	{
; 769  : 		driver_id = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 770  : 		RemoveHook();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveHook@JFW_Key_Hook_Base@@QAEXXZ	; JFW_Key_Hook_Base::RemoveHook
$LN4@Custom:

; 771  : 	}
; 772  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_chronoTank@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_chronoTank::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Killed@dp88_chronoTank@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_chronoTank@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_chronoTank::Killed, COMDAT
; _this$ = ecx

; 747  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 748  : 	if ( shifted_vehicle_object_id != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN2@Killed

; 749  : 	{
; 750  : 		Commands->Destroy_Object(Commands->Find_Object(shifted_vehicle_object_id));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4

; 751  : 		shifted_vehicle_object_id = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN2@Killed:

; 752  : 	}
; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_chronoTank@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_chronoTank::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_chronoTank@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_chronoTank@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_chronoTank::Created, COMDAT
; _this$ = ecx

; 723  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 724  : 	state = CT_STATE_CHARGED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 1

; 725  : 	object_id = Commands->Get_ID(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 726  : 	driver_id = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 727  : 	shifted_vehicle_object_id = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 728  : 
; 729  : 	// Can only be used on vehicles
; 730  : 	if ( !obj->As_VehicleGameObj() )

	mov	eax, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	test	eax, eax
	jne	SHORT $LN2@Created

; 731  : 	{
; 732  : 		Console_Output ( "[%d:%s:%s] Critical Error: This script can only be used on vehicles! Destroying script...\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0FL@ONKPLGMB@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5This?5@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 16					; 00000010H

; 733  : 		Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 734  :     return;

	jmp	SHORT $LN3@Created
$LN2@Created:

; 735  : 	}
; 736  : 
; 737  : 	// Check the shifted vehicle preset is valid
; 738  : 	if ( !Is_Valid_Preset(Get_Parameter("shifted_vehicle_preset")) )

	push	OFFSET ??_C@_0BH@HCMDAMPC@shifted_vehicle_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Created

; 739  : 	{
; 740  : 		Console_Output ( "[%d:%s:%s] Critical Error: A vehicle preset with the name '%s' was not found. Destroying script...\n", Commands->Get_ID(obj), Commands->Get_Preset_Name(obj), this->Get_Name(), Get_Parameter("shifted_vehicle_preset") );

	push	OFFSET ??_C@_0BH@HCMDAMPC@shifted_vehicle_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+108]
	call	eax
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0GE@IPOHJCAG@?$FL?$CFd?3?$CFs?3?$CFs?$FN?5Critical?5Error?3?5A?5veh@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 20					; 00000014H

; 741  : 		Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script
$LN3@Created:

; 742  : 	}
; 743  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_chronoTank@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_chronoTank::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_objectAnnouncements@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_objectAnnouncements@@UAEPAXI@Z PROC		; dp88_objectAnnouncements::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_objectAnnouncements@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_objectAnnouncements@@UAEPAXI@Z ENDP		; dp88_objectAnnouncements::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_objectAnnouncements@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_objectAnnouncements@@UAE@XZ PROC		; dp88_objectAnnouncements::~dp88_objectAnnouncements, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_objectAnnouncements@@UAE@XZ ENDP		; dp88_objectAnnouncements::~dp88_objectAnnouncements
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_objectAnnouncements@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_objectAnnouncements@@QAE@XZ PROC		; dp88_objectAnnouncements::dp88_objectAnnouncements, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_objectAnnouncements@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_objectAnnouncements@@QAE@XZ ENDP		; dp88_objectAnnouncements::dp88_objectAnnouncements
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_str$3 = -12						; size = 4
_str$4 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_objectAnnouncements::Killed, COMDAT
; _this$ = ecx

; 678  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 679  : 	/* Send messages to teams */
; 680  : 	if ( team0_destroyedStringId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	$LN4@Killed

; 681  : 	{
; 682  : 		const char *str = Get_Translated_String(team0_destroyedStringId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	mov	DWORD PTR _str$4[ebp], eax

; 683  : 		Send_Message_Team(0,255,255,255,str);

	mov	eax, DWORD PTR _str$4[ebp]
	push	eax
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	0
	call	?Send_Message_Team@@YAXHIIIPBD@Z	; Send_Message_Team
	add	esp, 20					; 00000014H

; 684  : 		delete[] str;

	push	OFFSET ??_C@_0CB@HEJBFPJC@dp88_objectAnnouncements?3?3Killed@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z@4JA
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN8@Killed
	xor	edx, edx
	jne	SHORT $LN7@Killed
	mov	eax, DWORD PTR ?__LINE__Var@?1??Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z@4JA
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN7@Killed:
	jmp	SHORT $LN9@Killed
$LN8@Killed:
	mov	edx, DWORD PTR _str$4[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN9@Killed:

; 685  : 		if ( team0_destroyedSoundId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN4@Killed

; 686  : 			Create_2D_Sound_Team(Get_Definition_Name(team0_destroyedSoundId),0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	?Get_Definition_Name@@YAPBDK@Z		; Get_Definition_Name
	add	esp, 4
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Team@@3P6AHPBDH@ZA ; Create_2D_Sound_Team
	add	esp, 8
$LN4@Killed:

; 687  : 	}
; 688  : 		
; 689  : 	if ( team1_destroyedStringId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	$LN5@Killed

; 690  : 	{
; 691  : 		const char *str = Get_Translated_String(team1_destroyedStringId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	mov	DWORD PTR _str$3[ebp], eax

; 692  : 		Send_Message_Team(1,255,255,255,str);

	mov	eax, DWORD PTR _str$3[ebp]
	push	eax
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	1
	call	?Send_Message_Team@@YAXHIIIPBD@Z	; Send_Message_Team
	add	esp, 20					; 00000014H

; 693  : 		delete[] str;

	push	OFFSET ??_C@_0CB@HEJBFPJC@dp88_objectAnnouncements?3?3Killed@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z@4JA
	add	eax, 15					; 0000000fH
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN11@Killed
	xor	edx, edx
	jne	SHORT $LN10@Killed
	mov	eax, DWORD PTR ?__LINE__Var@?1??Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z@4JA
	add	eax, 15					; 0000000fH
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Killed:
	jmp	SHORT $LN12@Killed
$LN11@Killed:
	mov	edx, DWORD PTR _str$3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN12@Killed:

; 694  : 		if ( team1_destroyedSoundId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN5@Killed

; 695  : 			Create_2D_Sound_Team(Get_Definition_Name(team1_destroyedSoundId),1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	?Get_Definition_Name@@YAPBDK@Z		; Get_Definition_Name
	add	esp, 4
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Team@@3P6AHPBDH@ZA ; Create_2D_Sound_Team
	add	esp, 8
$LN5@Killed:

; 696  : 	}
; 697  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_objectAnnouncements::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
tv241 = -112						; size = 4
tv287 = -108						; size = 4
tv234 = -104						; size = 4
tv285 = -100						; size = 4
tv208 = -100						; size = 8
tv227 = -96						; size = 4
tv283 = -92						; size = 4
tv205 = -92						; size = 8
tv220 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_str$3 = -12						; size = 4
_str$4 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_objectAnnouncements::Damaged, COMDAT
; _this$ = ecx

; 643  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 644  : 	/* If damage has been done and it is more than minimumAnnounceInterval seconds since the last
; 645  : 	announcement was made then trigger the under attack announcement */
; 646  : 	if ( amount > 0 && time(NULL) - lastAnnouncementTime > minimumAnnounceInterval )

	movss	xmm0, DWORD PTR _amount$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN1@Damaged
	push	0
	call	_time
	add	esp, 4
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _this$[ebp]
	sub	ecx, DWORD PTR [edx+32]
	sbb	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	cdq
	mov	DWORD PTR tv205[ebp], ecx
	mov	DWORD PTR tv205[ebp+4], esi
	mov	DWORD PTR tv208[ebp], eax
	mov	DWORD PTR tv208[ebp+4], edx
	mov	ecx, DWORD PTR tv205[ebp+4]
	cmp	ecx, DWORD PTR tv208[ebp+4]
	jl	$LN1@Damaged
	jg	SHORT $LN15@Damaged
	mov	edx, DWORD PTR tv205[ebp]
	cmp	edx, DWORD PTR tv208[ebp]
	jbe	$LN1@Damaged
$LN15@Damaged:

; 647  : 	{
; 648  :     // Don't trigger above 95% health to avoid lots of annoying announcements when it takes a tiny
; 649  :     // bit of damage from an explosion
; 650  :     if ( 0.95f < (Commands->Get_Health(obj)+Commands->Get_Shield_Strength(obj))/(Commands->Get_Max_Health(obj)+Commands->Get_Max_Shield_Strength(obj)) )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+220]
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv220[ebp]
	movss	xmm0, DWORD PTR tv220[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+232]
	movss	DWORD PTR tv283[ebp], xmm0
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv227[ebp]
	movss	xmm0, DWORD PTR tv283[ebp]
	addss	xmm0, DWORD PTR tv227[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+224]
	movss	DWORD PTR tv285[ebp], xmm0
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv234[ebp]
	movss	xmm0, DWORD PTR tv234[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+236]
	movss	DWORD PTR tv287[ebp], xmm0
	call	edx
	add	esp, 4
	fstp	DWORD PTR tv241[ebp]
	movss	xmm0, DWORD PTR tv287[ebp]
	addss	xmm0, DWORD PTR tv241[ebp]
	movss	xmm1, DWORD PTR tv285[ebp]
	divss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@3f733333
	jbe	SHORT $LN5@Damaged

; 651  :       return;

	jmp	$LN7@Damaged
$LN5@Damaged:

; 652  : 
; 653  : 		lastAnnouncementTime = time(NULL);

	push	0
	call	_time
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx

; 654  : 
; 655  : 		/* Send messages to teams */
; 656  : 		if ( team0_underAttackStringId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN3@Damaged

; 657  : 		{
; 658  : 			const char *str = Get_Translated_String(team0_underAttackStringId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	mov	DWORD PTR _str$4[ebp], eax

; 659  : 			Send_Message_Team(0,255,255,255,str);

	mov	eax, DWORD PTR _str$4[ebp]
	push	eax
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	0
	call	?Send_Message_Team@@YAXHIIIPBD@Z	; Send_Message_Team
	add	esp, 20					; 00000014H

; 660  : 			delete[] str;

	push	OFFSET ??_C@_0CC@GNCMCEPH@dp88_objectAnnouncements?3?3Damage@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z@4JA
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN10@Damaged
	xor	edx, edx
	jne	SHORT $LN9@Damaged
	mov	eax, DWORD PTR ?__LINE__Var@?1??Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z@4JA
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Damaged:
	jmp	SHORT $LN11@Damaged
$LN10@Damaged:
	mov	edx, DWORD PTR _str$4[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN11@Damaged:

; 661  : 			if ( team0_underAttackSoundId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN3@Damaged

; 662  : 				Create_2D_Sound_Team(Get_Definition_Name(team0_underAttackSoundId),0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	?Get_Definition_Name@@YAPBDK@Z		; Get_Definition_Name
	add	esp, 4
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Team@@3P6AHPBDH@ZA ; Create_2D_Sound_Team
	add	esp, 8
$LN3@Damaged:

; 663  : 		}
; 664  : 
; 665  : 		if ( team1_underAttackStringId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN1@Damaged

; 666  : 		{
; 667  : 			const char *str = Get_Translated_String(team1_underAttackStringId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?Get_Translated_String@@YAPBDK@Z	; Get_Translated_String
	add	esp, 4
	mov	DWORD PTR _str$3[ebp], eax

; 668  : 			Send_Message_Team(1,255,255,255,str);

	mov	eax, DWORD PTR _str$3[ebp]
	push	eax
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	1
	call	?Send_Message_Team@@YAXHIIIPBD@Z	; Send_Message_Team
	add	esp, 20					; 00000014H

; 669  : 			delete[] str;

	push	OFFSET ??_C@_0CC@GNCMCEPH@dp88_objectAnnouncements?3?3Damage@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z@4JA
	add	eax, 26					; 0000001aH
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN13@Damaged
	xor	edx, edx
	jne	SHORT $LN12@Damaged
	mov	eax, DWORD PTR ?__LINE__Var@?1??Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z@4JA
	add	eax, 26					; 0000001aH
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN12@Damaged:
	jmp	SHORT $LN14@Damaged
$LN13@Damaged:
	mov	edx, DWORD PTR _str$3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN14@Damaged:

; 670  : 			if ( team1_underAttackSoundId )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN1@Damaged

; 671  : 				Create_2D_Sound_Team(Get_Definition_Name(team1_underAttackSoundId),1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	?Get_Definition_Name@@YAPBDK@Z		; Get_Definition_Name
	add	esp, 4
	push	eax
	call	DWORD PTR ?Create_2D_Sound_Team@@3P6AHPBDH@ZA ; Create_2D_Sound_Team
	add	esp, 8
$LN1@Damaged:
$LN7@Damaged:

; 672  : 		}
; 673  : 	}
; 674  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_objectAnnouncements::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv259 = -76						; size = 4
tv245 = -76						; size = 4
tv220 = -76						; size = 4
tv206 = -76						; size = 4
tv181 = -76						; size = 4
tv167 = -76						; size = 4
tv142 = -76						; size = 4
tv128 = -76						; size = 4
_soundId$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_objectAnnouncements::Created, COMDAT
; _this$ = ecx

; 611  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 612  : 	lastAnnouncementTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0

; 613  : 	minimumAnnounceInterval = Get_Int_Parameter("minimumAnnounceInterval");

	push	OFFSET ??_C@_0BI@CNNOOAEH@minimumAnnounceInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 614  : 
; 615  : 	/* By default we set all sound IDs to 0 */
; 616  : 	team0_underAttackSoundId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 617  : 	team1_underAttackSoundId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 618  : 	team0_destroyedSoundId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 619  : 	team1_destroyedSoundId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 620  : 
; 621  : 	/* Get string IDs and for each one determine if it has a valid sound
; 622  : 	attached to it */
; 623  : 	unsigned long soundId;
; 624  : 	team0_underAttackStringId = (Is_Valid_String_ID(Get_Int_Parameter("team0_underAttackStringId"))) ? Get_Int_Parameter("team0_underAttackStringId") : 0;

	push	OFFSET ??_C@_0BK@JBPONDKJ@team0_underAttackStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	call	?Is_Valid_String_ID@@YA_NK@Z		; Is_Valid_String_ID
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@Created
	push	OFFSET ??_C@_0BK@JBPONDKJ@team0_underAttackStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN8@Created
$LN7@Created:
	mov	DWORD PTR tv128[ebp], 0
$LN8@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR [ecx+44], edx

; 625  : 	if ( team0_underAttackStringId && (soundId = Get_String_Sound_ID(team0_underAttackStringId)) != 0 && Is_Valid_Preset_ID(soundId) && Find_Definition(soundId)->Get_Class_ID() == 0x5000 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN4@Created
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?Get_String_Sound_ID@@YAKK@Z		; Get_String_Sound_ID
	add	esp, 4
	mov	DWORD PTR _soundId$[ebp], eax
	cmp	DWORD PTR _soundId$[ebp], 0
	je	SHORT $LN4@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Is_Valid_Preset_ID@@YA_NK@Z		; Is_Valid_Preset_ID
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Find_Definition@@YAPAVDefinitionClass@@K@Z ; Find_Definition
	add	esp, 4
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	eax, 20480				; 00005000H
	jne	SHORT $LN4@Created

; 626  : 		team0_underAttackSoundId = soundId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soundId$[ebp]
	mov	DWORD PTR [eax+60], ecx
$LN4@Created:

; 627  : 
; 628  : 	team1_underAttackStringId = (Is_Valid_String_ID(Get_Int_Parameter("team1_underAttackStringId"))) ? Get_Int_Parameter("team1_underAttackStringId") : 0;

	push	OFFSET ??_C@_0BK@IGNGLHGJ@team1_underAttackStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	call	?Is_Valid_String_ID@@YA_NK@Z		; Is_Valid_String_ID
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@Created
	push	OFFSET ??_C@_0BK@IGNGLHGJ@team1_underAttackStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN10@Created
$LN9@Created:
	mov	DWORD PTR tv167[ebp], 0
$LN10@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR [ecx+48], edx

; 629  : 	if ( team1_underAttackStringId && (soundId = Get_String_Sound_ID(team1_underAttackStringId)) != 0 && Is_Valid_Preset_ID(soundId) && Find_Definition(soundId)->Get_Class_ID() == 0x5000 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@Created
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?Get_String_Sound_ID@@YAKK@Z		; Get_String_Sound_ID
	add	esp, 4
	mov	DWORD PTR _soundId$[ebp], eax
	cmp	DWORD PTR _soundId$[ebp], 0
	je	SHORT $LN3@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Is_Valid_Preset_ID@@YA_NK@Z		; Is_Valid_Preset_ID
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Find_Definition@@YAPAVDefinitionClass@@K@Z ; Find_Definition
	add	esp, 4
	mov	DWORD PTR tv181[ebp], eax
	mov	ecx, DWORD PTR tv181[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv181[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	eax, 20480				; 00005000H
	jne	SHORT $LN3@Created

; 630  : 		team1_underAttackSoundId = soundId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soundId$[ebp]
	mov	DWORD PTR [eax+64], ecx
$LN3@Created:

; 631  : 
; 632  : 	team0_destroyedStringId = (Is_Valid_String_ID(Get_Int_Parameter("team0_destroyedStringId"))) ? Get_Int_Parameter("team0_destroyedStringId") : 0;

	push	OFFSET ??_C@_0BI@MNBPCFLE@team0_destroyedStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	call	?Is_Valid_String_ID@@YA_NK@Z		; Is_Valid_String_ID
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@Created
	push	OFFSET ??_C@_0BI@MNBPCFLE@team0_destroyedStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv206[ebp], eax
	jmp	SHORT $LN12@Created
$LN11@Created:
	mov	DWORD PTR tv206[ebp], 0
$LN12@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv206[ebp]
	mov	DWORD PTR [ecx+52], edx

; 633  : 	if ( team0_destroyedStringId && (soundId = Get_String_Sound_ID(team0_destroyedStringId)) != 0 && Is_Valid_Preset_ID(soundId) && Find_Definition(soundId)->Get_Class_ID() == 0x5000 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN2@Created
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?Get_String_Sound_ID@@YAKK@Z		; Get_String_Sound_ID
	add	esp, 4
	mov	DWORD PTR _soundId$[ebp], eax
	cmp	DWORD PTR _soundId$[ebp], 0
	je	SHORT $LN2@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Is_Valid_Preset_ID@@YA_NK@Z		; Is_Valid_Preset_ID
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Find_Definition@@YAPAVDefinitionClass@@K@Z ; Find_Definition
	add	esp, 4
	mov	DWORD PTR tv220[ebp], eax
	mov	ecx, DWORD PTR tv220[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv220[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	eax, 20480				; 00005000H
	jne	SHORT $LN2@Created

; 634  : 		team0_destroyedSoundId = soundId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soundId$[ebp]
	mov	DWORD PTR [eax+68], ecx
$LN2@Created:

; 635  : 
; 636  : 	team1_destroyedStringId = (Is_Valid_String_ID(Get_Int_Parameter("team1_destroyedStringId"))) ? Get_Int_Parameter("team1_destroyedStringId") : 0;

	push	OFFSET ??_C@_0BI@KIHIBOPC@team1_destroyedStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	call	?Is_Valid_String_ID@@YA_NK@Z		; Is_Valid_String_ID
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@Created
	push	OFFSET ??_C@_0BI@KIHIBOPC@team1_destroyedStringId?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	DWORD PTR tv245[ebp], eax
	jmp	SHORT $LN14@Created
$LN13@Created:
	mov	DWORD PTR tv245[ebp], 0
$LN14@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv245[ebp]
	mov	DWORD PTR [ecx+56], edx

; 637  : 	if ( team1_destroyedStringId && (soundId = Get_String_Sound_ID(team1_destroyedStringId)) != 0 && Is_Valid_Preset_ID(soundId) && Find_Definition(soundId)->Get_Class_ID() == 0x5000 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN5@Created
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?Get_String_Sound_ID@@YAKK@Z		; Get_String_Sound_ID
	add	esp, 4
	mov	DWORD PTR _soundId$[ebp], eax
	cmp	DWORD PTR _soundId$[ebp], 0
	je	SHORT $LN5@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Is_Valid_Preset_ID@@YA_NK@Z		; Is_Valid_Preset_ID
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Created
	mov	eax, DWORD PTR _soundId$[ebp]
	push	eax
	call	?Find_Definition@@YAPAVDefinitionClass@@K@Z ; Find_Definition
	add	esp, 4
	mov	DWORD PTR tv259[ebp], eax
	mov	ecx, DWORD PTR tv259[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv259[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	eax, 20480				; 00005000H
	jne	SHORT $LN5@Created

; 638  : 		team1_destroyedSoundId = soundId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soundId$[ebp]
	mov	DWORD PTR [eax+72], ecx
$LN5@Created:

; 639  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_objectAnnouncements@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_objectAnnouncements::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_damageAnimation@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_damageAnimation@@UAEPAXI@Z PROC		; dp88_damageAnimation::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_damageAnimation@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_damageAnimation@@UAEPAXI@Z ENDP		; dp88_damageAnimation::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_damageAnimation@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_damageAnimation@@UAE@XZ PROC			; dp88_damageAnimation::~dp88_damageAnimation, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_damageAnimation@@UAE@XZ ENDP			; dp88_damageAnimation::~dp88_damageAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.h
;	COMDAT ??0dp88_damageAnimation@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_damageAnimation@@QAE@XZ PROC			; dp88_damageAnimation::dp88_damageAnimation, COMDAT
; _this$ = ecx

; 292  :   dp88_damageAnimation() : m_pLoopedAnimCtrl(0) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_damageAnimation@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_damageAnimation@@QAE@XZ ENDP			; dp88_damageAnimation::dp88_damageAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?SetDamageAnimation@dp88_damageAnimation@@AAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv163 = -80						; size = 4
tv136 = -80						; size = 4
tv85 = -74						; size = 1
_WakeObjects$ = -9					; size = 1
_wakeup_param$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?SetDamageAnimation@dp88_damageAnimation@@AAEXPAVScriptableGameObj@@@Z PROC ; dp88_damageAnimation::SetDamageAnimation, COMDAT
; _this$ = ecx

; 543  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 544  :   int wakeup_param = Get_Parameter_Index("wakeObjects");

	push	OFFSET ??_C@_0M@BAABMIKH@wakeObjects?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter_Index@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Parameter_Index
	mov	DWORD PTR _wakeup_param$[ebp], eax

; 545  :   bool WakeObjects = wakeup_param < Get_Parameter_Count() ? Get_Bool_Parameter(wakeup_param) : false;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter_Count@ScriptImpClass@@QAEHXZ ; ScriptImpClass::Get_Parameter_Count
	cmp	DWORD PTR _wakeup_param$[ebp], eax
	jge	SHORT $LN7@SetDamageA
	mov	eax, DWORD PTR _wakeup_param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z ; ScriptImpClass::Get_Bool_Parameter
	mov	BYTE PTR tv85[ebp], al
	jmp	SHORT $LN8@SetDamageA
$LN7@SetDamageA:
	mov	BYTE PTR tv85[ebp], 0
$LN8@SetDamageA:
	mov	cl, BYTE PTR tv85[ebp]
	mov	BYTE PTR _WakeObjects$[ebp], cl

; 546  :   if (WakeObjects)

	movzx	eax, BYTE PTR _WakeObjects$[ebp]
	test	eax, eax
	je	SHORT $LN4@SetDamageA

; 547  :   {
; 548  :     Wake_Up_Objects_In_Box(obj,"WAKEBOX");

	push	OFFSET ??_C@_07OKHHAEAF@WAKEBOX?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Wake_Up_Objects_In_Box@@YAXPAVScriptableGameObj@@PBD@Z ; Wake_Up_Objects_In_Box
	add	esp, 8
$LN4@SetDamageA:

; 549  :   }
; 550  :   if ( basePowerState || damageLevelLowPowerStartFrames[currentDamageLevel] < 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN2@SetDamageA
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+108], 0
	jge	SHORT $LN3@SetDamageA
$LN2@SetDamageA:

; 551  :     m_pLoopedAnimCtrl->PlayAnimation ( Get_Parameter("animationName"), damageLevelStartFrames[currentDamageLevel], damageLevelEndFrames[currentDamageLevel], (loopAnimation)?0:1 );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+156]
	test	ecx, ecx
	je	SHORT $LN9@SetDamageA
	mov	DWORD PTR tv136[ebp], 0
	jmp	SHORT $LN10@SetDamageA
$LN9@SetDamageA:
	mov	DWORD PTR tv136[ebp], 1
$LN10@SetDamageA:
	mov	edx, DWORD PTR tv136[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+60]
	push	ecx
	push	OFFSET ??_C@_0O@MKCKBGNB@animationName?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation

; 552  :   else

	jmp	SHORT $LN5@SetDamageA
$LN3@SetDamageA:

; 553  :     m_pLoopedAnimCtrl->PlayAnimation ( Get_Parameter("animationName"), damageLevelLowPowerStartFrames[currentDamageLevel], damageLevelLowPowerEndFrames[currentDamageLevel], (loopAnimation)?0:1 );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+156]
	test	ecx, ecx
	je	SHORT $LN11@SetDamageA
	mov	DWORD PTR tv163[ebp], 0
	jmp	SHORT $LN12@SetDamageA
$LN11@SetDamageA:
	mov	DWORD PTR tv163[ebp], 1
$LN12@SetDamageA:
	mov	edx, DWORD PTR tv163[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+132]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+108]
	push	ecx
	push	OFFSET ??_C@_0O@MKCKBGNB@animationName?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	?PlayAnimation@LoopedAnimationController@@QAEXPBDHHH@Z ; LoopedAnimationController::PlayAnimation
$LN5@SetDamageA:

; 554  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDamageAnimation@dp88_damageAnimation@@AAEXPAVScriptableGameObj@@@Z ENDP ; dp88_damageAnimation::SetDamageAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_damageAnimation::Timer_Expired, COMDAT
; _this$ = ecx

; 526  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 527  :   if ( number == TIMER_CHECK_BASE_POWER_STATE )

	cmp	DWORD PTR _number$[ebp], -620756983	; db000009H
	jne	SHORT $LN2@Timer_Expi

; 528  :   {
; 529  :     if ( Is_Base_Powered(Get_Object_Type(obj)) != basePowerState )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	call	?Is_Base_Powered@@YA_NH@Z		; Is_Base_Powered
	add	esp, 4
	movzx	ecx, al
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	cmp	ecx, eax
	je	SHORT $LN1@Timer_Expi

; 530  :     {
; 531  :       basePowerState = !basePowerState;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN5@Timer_Expi
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN6@Timer_Expi
$LN5@Timer_Expi:
	mov	DWORD PTR tv77[ebp], 0
$LN6@Timer_Expi:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv77[ebp]
	mov	BYTE PTR [edx+32], al

; 532  :       SetDamageAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageAnimation@dp88_damageAnimation@@AAEXPAVScriptableGameObj@@@Z ; dp88_damageAnimation::SetDamageAnimation
$LN1@Timer_Expi:

; 533  :     }
; 534  : 
; 535  :     // Restart timer
; 536  :     Commands->Start_Timer(obj, this, 1.0f, TIMER_CHECK_BASE_POWER_STATE );

	push	-620756983				; db000009H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN2@Timer_Expi:

; 537  :   }
; 538  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_damageAnimation::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Damaged@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
tv246 = -80						; size = 4
tv233 = -80						; size = 4
tv207 = -80						; size = 4
tv262 = -76						; size = 4
tv260 = -76						; size = 4
tv258 = -76						; size = 4
tv241 = -72						; size = 4
tv228 = -72						; size = 4
tv202 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_damageAnimation::Damaged, COMDAT
; _this$ = ecx

; 495  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   if ( amount >= 0 )

	movss	xmm0, DWORD PTR _amount$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN7@Damaged
$LN8@Damaged:

; 497  :   {
; 498  :     while ( currentDamageLevel < 5 && damageLevelBoundaries[currentDamageLevel+1] >= 0
; 499  :       && ((Get_Hitpoints(obj)/Get_Max_Hitpoints(obj))*100.0f) < damageLevelBoundaries[currentDamageLevel+1] )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 5
	jge	$LN7@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+40], 0
	jl	$LN7@Damaged
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Hitpoints@@YAMPAVScriptableGameObj@@@Z ; Get_Hitpoints
	add	esp, 4
	fstp	DWORD PTR tv202[ebp]
	movss	xmm0, DWORD PTR tv202[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	movss	DWORD PTR tv258[ebp], xmm0
	call	?Get_Max_Hitpoints@@YAMPAVScriptableGameObj@@@Z ; Get_Max_Hitpoints
	add	esp, 4
	fstp	DWORD PTR tv207[ebp]
	movss	xmm0, DWORD PTR tv258[ebp]
	divss	xmm0, DWORD PTR tv207[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+eax*4+40]
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@Damaged

; 500  :     {
; 501  :       currentDamageLevel++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 502  :       basePowerState = Is_Base_Powered(Get_Object_Type(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	call	?Is_Base_Powered@@YA_NH@Z		; Is_Base_Powered
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], al

; 503  :       SetDamageAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageAnimation@dp88_damageAnimation@@AAEXPAVScriptableGameObj@@@Z ; dp88_damageAnimation::SetDamageAnimation

; 504  : 
; 505  :       if ( m_bUseDestroyedMode && (currentDamageLevel == 5 || damageLevelBoundaries[currentDamageLevel+1] <= 0) )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+157]
	test	ecx, ecx
	je	SHORT $LN6@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 5
	je	SHORT $LN5@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+40], 0
	jg	SHORT $LN6@Damaged
$LN5@Damaged:

; 506  :         m_bIsDestroyed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+33], 1
$LN6@Damaged:

; 507  :     }

	jmp	$LN8@Damaged
$LN7@Damaged:

; 508  :   }
; 509  : 
; 510  :   // Repairs make the damage level go backwards, unless we're fully destroyed and not at 100% health
; 511  :   if ( amount <= 0 && (!m_bIsDestroyed || Get_Hitpoints(obj) == Get_Max_Hitpoints(obj)) )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _amount$[ebp]
	jb	$LN1@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	je	SHORT $LN3@Damaged
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Hitpoints@@YAMPAVScriptableGameObj@@@Z ; Get_Hitpoints
	add	esp, 4
	fstp	DWORD PTR tv228[ebp]
	movss	xmm0, DWORD PTR tv228[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	movss	DWORD PTR tv260[ebp], xmm0
	call	?Get_Max_Hitpoints@@YAMPAVScriptableGameObj@@@Z ; Get_Max_Hitpoints
	add	esp, 4
	fstp	DWORD PTR tv233[ebp]
	movss	xmm0, DWORD PTR tv260[ebp]
	ucomiss	xmm0, DWORD PTR tv233[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	$LN1@Damaged
$LN3@Damaged:

; 512  :   {
; 513  :     while ( currentDamageLevel > 0
; 514  :       && ((Get_Hitpoints(obj)/Get_Max_Hitpoints(obj))*100.0f) > damageLevelBoundaries[currentDamageLevel] )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jle	$LN1@Damaged
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Hitpoints@@YAMPAVScriptableGameObj@@@Z ; Get_Hitpoints
	add	esp, 4
	fstp	DWORD PTR tv241[ebp]
	movss	xmm0, DWORD PTR tv241[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	movss	DWORD PTR tv262[ebp], xmm0
	call	?Get_Max_Hitpoints@@YAMPAVScriptableGameObj@@@Z ; Get_Max_Hitpoints
	add	esp, 4
	fstp	DWORD PTR tv246[ebp]
	movss	xmm0, DWORD PTR tv262[ebp]
	divss	xmm0, DWORD PTR tv246[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+eax*4+36]
	comiss	xmm0, xmm1
	jbe	SHORT $LN1@Damaged

; 515  :     {
; 516  :       currentDamageLevel--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 517  :       basePowerState = Is_Base_Powered(Get_Object_Type(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	call	?Is_Base_Powered@@YA_NH@Z		; Is_Base_Powered
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], al

; 518  :       SetDamageAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageAnimation@dp88_damageAnimation@@AAEXPAVScriptableGameObj@@@Z ; dp88_damageAnimation::SetDamageAnimation

; 519  :     }

	jmp	$LN3@Damaged
$LN1@Damaged:

; 520  :   }
; 521  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_damageAnimation::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv93 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_damageAnimation::Detach, COMDAT
; _this$ = ecx

; 484  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 485  :   ScriptImpClass::Detach(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Detach@ScriptImpClass@@MAEXPAVScriptableGameObj@@@Z ; ScriptImpClass::Detach

; 486  :   if (m_pLoopedAnimCtrl)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN2@Detach

; 487  :   {
; 488  :     delete m_pLoopedAnimCtrl;

	push	OFFSET ??_C@_0BN@CIEFPDDI@dp88_damageAnimation?3?3Detach?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN7@Detach
	xor	edx, edx
	jne	SHORT $LN4@Detach
	mov	eax, DWORD PTR ?__LINE__Var@?1??Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Detach:
	jmp	SHORT $LN2@Detach
$LN7@Detach:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Detach
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN2@Detach
$LN5@Detach:
	mov	DWORD PTR tv93[ebp], 0
$LN2@Detach:

; 489  :   }
; 490  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Detach@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_damageAnimation::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv468 = -84						; size = 4
tv92 = -84						; size = 4
tv469 = -80						; size = 4
tv94 = -80						; size = 4
tv73 = -80						; size = 4
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_damageAnimation::Created, COMDAT
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 418  :   loopAnimation = (Get_Int_Parameter ( "loopAnimation" ) == 1);

	push	OFFSET ??_C@_0O@PEDGHOIN@loopAnimation?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, 1
	jne	SHORT $LN8@Created
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN9@Created
$LN8@Created:
	mov	DWORD PTR tv73[ebp], 0
$LN9@Created:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR [eax+156], cl

; 419  :   m_pLoopedAnimCtrl = new LoopedAnimationController(obj);   // Can also do single-iteration loops :) 

	push	OFFSET ??_C@_0BO@IMJLNFNM@dp88_damageAnimation?3?3Created?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN13@Created
	xor	edx, edx
	jne	SHORT $LN10@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Created:
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $LN14@Created
$LN13@Created:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@Created
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0LoopedAnimationController@@QAE@PAVScriptableGameObj@@@Z ; LoopedAnimationController::LoopedAnimationController
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN12@Created
$LN11@Created:
	mov	DWORD PTR tv92[ebp], 0
$LN12@Created:
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR tv94[ebp], eax
$LN14@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR [ecx+160], edx

; 420  : 
; 421  :   /* Load settings */
; 422  :   damageLevelBoundaries[0] = 100;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+36], 100		; 00000064H

; 423  :   damageLevelStartFrames[0] = Get_Int_Parameter("healthy_startFrame");

	push	OFFSET ??_C@_0BD@MKMFKMFG@healthy_startFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], eax

; 424  :   damageLevelEndFrames[0] = Get_Int_Parameter("healthy_endFrame");

	push	OFFSET ??_C@_0BB@JBDGIKG@healthy_endFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+84], eax

; 425  :   damageLevelLowPowerStartFrames[0] = Get_Int_Parameter("healthy_startFrame_lowPower");

	push	OFFSET ??_C@_0BM@LCKBNGPH@healthy_startFrame_lowPower?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+108], eax

; 426  :   damageLevelLowPowerEndFrames[0] = Get_Int_Parameter("healthy_endFrame_lowPower");

	push	OFFSET ??_C@_0BK@IFNEAGMF@healthy_endFrame_lowPower?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+132], eax

; 427  : 
; 428  :   damageLevelBoundaries[1] = Get_Int_Parameter("damageBoundary1");

	push	OFFSET ??_C@_0BA@NNCKLGJK@damageBoundary1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+36], eax

; 429  :   damageLevelStartFrames[1] = Get_Int_Parameter("damageBoundary1_startFrame");

	push	OFFSET ??_C@_0BL@NIFMBHCI@damageBoundary1_startFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], eax

; 430  :   damageLevelEndFrames[1] = Get_Int_Parameter("damageBoundary1_endFrame");

	push	OFFSET ??_C@_0BJ@OPDALANL@damageBoundary1_endFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+84], eax

; 431  :   damageLevelLowPowerStartFrames[1] = Get_Int_Parameter("damageBoundary1_startFrame_lowPower");

	push	OFFSET ??_C@_0CE@DFBCJEDO@damageBoundary1_startFrame_lowPo@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+108], eax

; 432  :   damageLevelLowPowerEndFrames[1] = Get_Int_Parameter("damageBoundary1_endFrame_lowPower");

	push	OFFSET ??_C@_0CC@GPIIJEHA@damageBoundary1_endFrame_lowPowe@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+132], eax

; 433  : 
; 434  :   damageLevelBoundaries[2] = Get_Int_Parameter("damageBoundary2");

	push	OFFSET ??_C@_0BA@PGAHOFFJ@damageBoundary2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+36], eax

; 435  :   damageLevelStartFrames[2] = Get_Int_Parameter("damageBoundary2_startFrame");

	push	OFFSET ??_C@_0BL@GFJGHLOG@damageBoundary2_startFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], eax

; 436  :   damageLevelEndFrames[2] = Get_Int_Parameter("damageBoundary2_endFrame");

	push	OFFSET ??_C@_0BJ@HGNCNGNK@damageBoundary2_endFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+84], eax

; 437  :   damageLevelLowPowerStartFrames[2] = Get_Int_Parameter("damageBoundary2_startFrame_lowPower");

	push	OFFSET ??_C@_0CE@MGKDJHO@damageBoundary2_startFrame_lowPo@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+108], eax

; 438  :   damageLevelLowPowerEndFrames[2] = Get_Int_Parameter("damageBoundary2_endFrame_lowPower");

	push	OFFSET ??_C@_0CC@MACBNJLK@damageBoundary2_endFrame_lowPowe@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+132], eax

; 439  : 
; 440  :   damageLevelBoundaries[3] = Get_Int_Parameter("damageBoundary3");

	push	OFFSET ??_C@_0BA@OPBMNEBI@damageBoundary3?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+36], eax

; 441  :   damageLevelStartFrames[3] = Get_Int_Parameter("damageBoundary3_startFrame");

	push	OFFSET ??_C@_0BL@LIAAKCGD@damageBoundary3_startFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], eax

; 442  :   damageLevelEndFrames[3] = Get_Int_Parameter("damageBoundary3_endFrame");

	push	OFFSET ??_C@_0BJ@LHFMAJBK@damageBoundary3_endFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+84], eax

; 443  :   damageLevelLowPowerStartFrames[3] = Get_Int_Parameter("damageBoundary3_startFrame_lowPower");

	push	OFFSET ??_C@_0CE@BLECFNLO@damageBoundary3_startFrame_lowPo@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+108], eax

; 444  :   damageLevelLowPowerEndFrames[3] = Get_Int_Parameter("damageBoundary3_endFrame_lowPower");

	push	OFFSET ??_C@_0CC@KFEGOCPM@damageBoundary3_endFrame_lowPowe@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+132], eax

; 445  : 
; 446  :   damageLevelBoundaries[4] = Get_Int_Parameter("damageBoundary4");

	push	OFFSET ??_C@_0BA@KAFNECNP@damageBoundary4?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+36], eax

; 447  :   damageLevelStartFrames[4] = Get_Int_Parameter("damageBoundary4_startFrame");

	push	OFFSET ??_C@_0BL@MFHDKEDL@damageBoundary4_startFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], eax

; 448  :   damageLevelEndFrames[4] = Get_Int_Parameter("damageBoundary4_endFrame");

	push	OFFSET ??_C@_0BJ@JOGHBMJJ@damageBoundary4_endFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+84], eax

; 449  :   damageLevelLowPowerStartFrames[4] = Get_Int_Parameter("damageBoundary4_startFrame_lowPower");

	push	OFFSET ??_C@_0CE@HOJLGDPO@damageBoundary4_startFrame_lowPo@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+108], eax

; 450  :   damageLevelLowPowerEndFrames[4] = Get_Int_Parameter("damageBoundary4_endFrame_lowPower");

	push	OFFSET ??_C@_0CC@EEACEEGP@damageBoundary4_endFrame_lowPowe@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+132], eax

; 451  : 
; 452  :   damageLevelBoundaries[5] = Get_Int_Parameter("damageBoundary5");

	push	OFFSET ??_C@_0BA@LJEGHDJO@damageBoundary5?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+36], eax

; 453  :   damageLevelStartFrames[5] = Get_Int_Parameter("damageBoundary5_startFrame");

	push	OFFSET ??_C@_0BL@BIOFHNLO@damageBoundary5_startFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], eax

; 454  :   damageLevelEndFrames[5] = Get_Int_Parameter("damageBoundary5_endFrame");

	push	OFFSET ??_C@_0BJ@FPOJMDFJ@damageBoundary5_endFrame?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+84], eax

; 455  :   damageLevelLowPowerStartFrames[5] = Get_Int_Parameter("damageBoundary5_startFrame_lowPower");

	push	OFFSET ??_C@_0CE@GJLDAHDO@damageBoundary5_startFrame_lowPo@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+108], eax

; 456  :   damageLevelLowPowerEndFrames[5] = Get_Int_Parameter("damageBoundary5_endFrame_lowPower");

	push	OFFSET ??_C@_0CC@CBGFHPCJ@damageBoundary5_endFrame_lowPowe@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+132], eax

; 457  : 
; 458  :   m_bUseDestroyedMode = (Get_Parameter_Count() < 33) ? false : 0 != Get_Int_Parameter("useDestroyedMode");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter_Count@ScriptImpClass@@QAEHXZ ; ScriptImpClass::Get_Parameter_Count
	cmp	eax, 33					; 00000021H
	jge	SHORT $LN17@Created
	mov	DWORD PTR tv469[ebp], 0
	jmp	SHORT $LN18@Created
$LN17@Created:
	push	OFFSET ??_C@_0BB@GLBLILDK@useDestroyedMode?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN15@Created
	mov	DWORD PTR tv468[ebp], 1
	jmp	SHORT $LN16@Created
$LN15@Created:
	mov	DWORD PTR tv468[ebp], 0
$LN16@Created:
	mov	eax, DWORD PTR tv468[ebp]
	mov	DWORD PTR tv469[ebp], eax
$LN18@Created:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv469[ebp]
	mov	BYTE PTR [ecx+157], dl

; 459  :   m_bIsDestroyed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+33], 0

; 460  : 
; 461  :   /* Set default level */
; 462  :   currentDamageLevel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 463  :   basePowerState = Is_Base_Powered(Get_Object_Type(obj));

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	push	eax
	call	?Is_Base_Powered@@YA_NH@Z		; Is_Base_Powered
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], al

; 464  :   SetDamageAnimation(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageAnimation@dp88_damageAnimation@@AAEXPAVScriptableGameObj@@@Z ; dp88_damageAnimation::SetDamageAnimation

; 465  : 
; 466  :   /* If any of the damage levels have a different set of frames for the low power state
; 467  :   then start the timer to check power state regularly */
; 468  :   for ( int i = 0; i < 6; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@Created
$LN4@Created:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@Created:
	cmp	DWORD PTR _i$2[ebp], 6
	jge	SHORT $LN3@Created

; 469  :   {
; 470  :     if ( damageLevelBoundaries[i] >= 0 && damageLevelLowPowerStartFrames[i] >= 0
; 471  :       && (damageLevelLowPowerStartFrames[i] != damageLevelStartFrames[i]
; 472  :         || damageLevelLowPowerEndFrames[i] != damageLevelEndFrames[i])
; 473  :       )

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+36], 0
	jl	SHORT $LN2@Created
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+108], 0
	jl	SHORT $LN2@Created
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+108]
	cmp	eax, DWORD PTR [esi+edx*4+60]
	jne	SHORT $LN1@Created
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+132]
	cmp	eax, DWORD PTR [esi+edx*4+84]
	je	SHORT $LN2@Created
$LN1@Created:

; 474  :     {
; 475  :       Commands->Start_Timer(obj, this, 1.0f, TIMER_CHECK_BASE_POWER_STATE );

	push	-620756983				; db000009H
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 476  :       break;

	jmp	SHORT $LN3@Created
$LN2@Created:

; 477  :     }
; 478  :   }

	jmp	$LN4@Created
$LN3@Created:

; 479  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_damageAnimation@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_damageAnimation::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_uniqueInfantry_controller@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_uniqueInfantry_controller@@UAEPAXI@Z PROC	; dp88_uniqueInfantry_controller::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_uniqueInfantry_controller@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_uniqueInfantry_controller@@UAEPAXI@Z ENDP	; dp88_uniqueInfantry_controller::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_uniqueInfantry_controller@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_uniqueInfantry_controller@@UAE@XZ PROC		; dp88_uniqueInfantry_controller::~dp88_uniqueInfantry_controller, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_uniqueInfantry_controller@@UAE@XZ ENDP		; dp88_uniqueInfantry_controller::~dp88_uniqueInfantry_controller
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_uniqueInfantry_controller@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_uniqueInfantry_controller@@QAE@XZ PROC		; dp88_uniqueInfantry_controller::dp88_uniqueInfantry_controller, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0JFW_Object_Created_Hook_Base@@QAE@XZ	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_uniqueInfantry_controller@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_uniqueInfantry_controller@@QAE@XZ ENDP		; dp88_uniqueInfantry_controller::dp88_uniqueInfantry_controller
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_uniqueInfantry_controller::Destroyed, COMDAT
; _this$ = ecx

; 378  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 379  : 	if ( infantry_preset != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN2@Destroyed

; 380  : 		delete [] infantry_preset;

	push	OFFSET ??_C@_0CK@NKBCAI@dp88_uniqueInfantry_controller?3?3@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN5@Destroyed
	xor	edx, edx
	jne	SHORT $LN4@Destroyed
	mov	eax, DWORD PTR ?__LINE__Var@?1??Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Destroyed:
	jmp	SHORT $LN2@Destroyed
$LN5@Destroyed:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@Destroyed:

; 381  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_uniqueInfantry_controller::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?ObjectCreateHook@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?ObjectCreateHook@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_uniqueInfantry_controller::ObjectCreateHook, COMDAT
; _this$ = ecx

; 384  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 385  : 		if ( Commands->Is_A_Star(obj)
; 386  : 		&& Get_Object_Type(obj) == team_id
; 387  : 		&& Get_Object_Count(team_id,infantry_preset) < max_count
; 388  : 		&& Commands->Get_Random_Int(0,100) < percent_chance )

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+280]
	call	edx
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ObjectCrea
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?Get_Object_Type@@YAHPAVScriptableGameObj@@@Z ; Get_Object_Type
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+40]
	jne	SHORT $LN2@ObjectCrea
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	?Get_Object_Count@@YAHHPBD@Z		; Get_Object_Count
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+44]
	jge	SHORT $LN2@ObjectCrea
	push	100					; 00000064H
	push	0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+48]
	jge	SHORT $LN2@ObjectCrea

; 389  : 	{
; 390  : 		Change_Character(obj,infantry_preset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?Change_Character@@YA_NPAVScriptableGameObj@@PBD@Z ; Change_Character
	add	esp, 8
$LN2@ObjectCrea:

; 391  : 	}
; 392  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ObjectCreateHook@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_uniqueInfantry_controller::ObjectCreateHook
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv85 = -92						; size = 4
tv198 = -85						; size = 1
tv134 = -85						; size = 1
tv195 = -84						; size = 4
tv133 = -84						; size = 4
tv192 = -80						; size = 4
tv132 = -80						; size = 4
tv130 = -76						; size = 4
tv89 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_uniqueInfantry_controller::Created, COMDAT
; _this$ = ecx

; 357  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 358  : 	infantry_preset = new char[strlen(Get_Parameter("infantry_preset"))+1];

	push	OFFSET ??_C@_0CI@ENMLKBOD@dp88_uniqueInfantry_controller?3?3@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0DH@NNFLBPPJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN6@Created
	xor	edx, edx
	jne	SHORT $LN5@Created
	mov	eax, DWORD PTR ?__LINE__Var@?1??Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GO@JBMMJAEJ@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Created:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN7@Created
$LN6@Created:
	push	OFFSET ??_C@_0BA@NFPOMMJA@infantry_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv192[ebp], eax
	mov	edx, DWORD PTR tv192[ebp]
	add	edx, 1
	mov	DWORD PTR tv195[ebp], edx
$LL9@Created:
	mov	eax, DWORD PTR tv192[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv198[ebp], cl
	add	DWORD PTR tv192[ebp], 1
	cmp	BYTE PTR tv198[ebp], 0
	jne	SHORT $LL9@Created
	mov	edx, DWORD PTR tv192[ebp]
	sub	edx, DWORD PTR tv195[ebp]
	mov	DWORD PTR tv85[ebp], edx
	mov	eax, DWORD PTR tv85[ebp]
	add	eax, 1
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv89[ebp], ecx
$LN7@Created:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR [edx+36], eax

; 359  : 	strcpy ( infantry_preset, Get_Parameter("infantry_preset") );

	push	OFFSET ??_C@_0BA@NFPOMMJA@infantry_preset?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv130[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR tv133[ebp], edx
$LN8@Created:
	mov	eax, DWORD PTR tv130[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv134[ebp], cl
	mov	edx, DWORD PTR tv132[ebp]
	mov	al, BYTE PTR tv134[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv130[ebp]
	add	ecx, 1
	mov	DWORD PTR tv130[ebp], ecx
	mov	edx, DWORD PTR tv132[ebp]
	add	edx, 1
	mov	DWORD PTR tv132[ebp], edx
	cmp	BYTE PTR tv134[ebp], 0
	jne	SHORT $LN8@Created

; 360  : 	team_id = Get_Int_Parameter("team_id");

	push	OFFSET ??_C@_07BMLKPCEF@team_id?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 361  : 	max_count = Get_Int_Parameter("max_count");

	push	OFFSET ??_C@_09BJKFAJML@max_count?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 362  : 	percent_chance = Get_Int_Parameter("percent_chance");

	push	OFFSET ??_C@_0P@BPMHCCNE@percent_chance?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 363  : 
; 364  : 	// Die if infantry_preset is not valid
; 365  : 	if ( !Is_Valid_Preset(infantry_preset) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@Created

; 366  : 	{
; 367  : 		Console_Output("dp88_uniqueInfantry_controller: %s is not a valid infantry preset! Destroying script...\n", infantry_preset );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	push	OFFSET ??_C@_0FJ@MJNBDJBP@dp88_uniqueInfantry_controller?3?5@
	call	?Console_Output@@YAXPBDZZ		; Console_Output
	add	esp, 8

; 368  : 		Destroy_Script();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy_Script@ScriptImpClass@@QAEXXZ	; ScriptImpClass::Destroy_Script

; 369  : 	}
; 370  : 	else

	jmp	SHORT $LN3@Created
$LN2@Created:

; 371  : 	{
; 372  : 		hookid = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 373  : 		InstallHook();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InstallHook@JFW_Object_Created_Hook_Base@@QAEXXZ ; JFW_Object_Created_Hook_Base::InstallHook
$LN3@Created:

; 374  : 	}
; 375  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_uniqueInfantry_controller@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_uniqueInfantry_controller::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_unitSounds@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_unitSounds@@UAEPAXI@Z PROC			; dp88_unitSounds::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_unitSounds@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_unitSounds@@UAEPAXI@Z ENDP			; dp88_unitSounds::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_unitSounds@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_unitSounds@@UAE@XZ PROC				; dp88_unitSounds::~dp88_unitSounds, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_unitSounds@@UAE@XZ ENDP				; dp88_unitSounds::~dp88_unitSounds
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_unitSounds@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_unitSounds@@QAE@XZ PROC				; dp88_unitSounds::dp88_unitSounds, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_unitSounds@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_unitSounds@@QAE@XZ ENDP				; dp88_unitSounds::dp88_unitSounds
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Custom@dp88_unitSounds@@EAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@dp88_unitSounds@@EAEXPAVScriptableGameObj@@HH0@Z PROC ; dp88_unitSounds::Custom, COMDAT
; _this$ = ecx

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 300  : 	if ( type == CUSTOM_EVENT_FALLING_DAMAGE && fallingDamageEnabled )

	cmp	DWORD PTR _type$[ebp], 1000000035	; 3b9aca23H
	jne	SHORT $LN3@Custom
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+31]
	test	ecx, ecx
	je	SHORT $LN3@Custom

; 301  : 	{
; 302  : 		fallingDamageEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+31], 0

; 303  : 		Commands->Create_3D_Sound_At_Bone( Get_Parameter ( "fallingDamageSound" ), obj, "origin" );

	push	OFFSET ??_C@_06NHCMNMEH@origin?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@ODPFHLGP@fallingDamageSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+188]
	call	edx
	add	esp, 12					; 0000000cH

; 304  : 		Commands->Start_Timer ( obj, this, (float)Get_Int_Parameter( "fallingDamageSoundMinInterval" ), 4 );

	push	4
	push	OFFSET ??_C@_0BO@OMJFDGPB@fallingDamageSoundMinInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@Custom
$LN3@Custom:

; 305  : 	}
; 306  : 
; 307  : 	else if ( type == CUSTOM_UNITSOUNDS_HEALDECREMENT )

	cmp	DWORD PTR _type$[ebp], -637534206	; da000002H
	jne	SHORT $LN1@Custom

; 308  : 		healAmount -= param;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, DWORD PTR _param$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN1@Custom:

; 309  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@dp88_unitSounds@@EAEXPAVScriptableGameObj@@HH0@Z ENDP ; dp88_unitSounds::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_unitSounds@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_unitSounds@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_unitSounds::Timer_Expired, COMDAT
; _this$ = ecx

; 312  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 313  : 	if ( number == 1 )

	cmp	DWORD PTR _number$[ebp], 1
	jne	SHORT $LN7@Timer_Expi

; 314  : 		damagedEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 1
	jmp	SHORT $LN8@Timer_Expi
$LN7@Timer_Expi:

; 315  : 	else if ( number == 2 )

	cmp	DWORD PTR _number$[ebp], 2
	jne	SHORT $LN5@Timer_Expi

; 316  : 		heavilyDamagedEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+29], 1
	jmp	SHORT $LN8@Timer_Expi
$LN5@Timer_Expi:

; 317  : 	else if ( number == 3 )

	cmp	DWORD PTR _number$[ebp], 3
	jne	SHORT $LN3@Timer_Expi

; 318  : 		healedEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+30], 1
	jmp	SHORT $LN8@Timer_Expi
$LN3@Timer_Expi:

; 319  : 	else if ( number == 4 )

	cmp	DWORD PTR _number$[ebp], 4
	jne	SHORT $LN8@Timer_Expi

; 320  : 		fallingDamageEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+31], 1
$LN8@Timer_Expi:

; 321  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_unitSounds@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_unitSounds::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Killed@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
tv74 = -88						; size = 4
tv147 = -84						; size = 4
tv142 = -78						; size = 1
tv135 = -77						; size = 1
tv131 = -76						; size = 4
tv132 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0@Z PROC ; dp88_unitSounds::Killed, COMDAT
; _this$ = ecx

; 293  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 294  : 	if ( strcmp ( Get_Parameter ( "killedSound" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter ( "killedSound" ) ) )

	mov	DWORD PTR tv132[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0M@OOEMILKO@killedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv131[ebp], eax
$LL4@Killed:
	mov	eax, DWORD PTR tv131[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv135[ebp], cl
	mov	edx, DWORD PTR tv132[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN5@Killed
	cmp	BYTE PTR tv135[ebp], 0
	je	SHORT $LN6@Killed
	mov	eax, DWORD PTR tv131[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv142[ebp], cl
	mov	edx, DWORD PTR tv132[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN5@Killed
	add	DWORD PTR tv131[ebp], 2
	add	DWORD PTR tv132[ebp], 2
	cmp	BYTE PTR tv142[ebp], 0
	jne	SHORT $LL4@Killed
$LN6@Killed:
	mov	DWORD PTR tv147[ebp], 0
	jmp	SHORT $LN7@Killed
$LN5@Killed:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv147[ebp], eax
$LN7@Killed:
	mov	ecx, DWORD PTR tv147[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 0
	je	SHORT $LN2@Killed
	push	OFFSET ??_C@_0M@OOEMILKO@killedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Killed

; 295  : 		Commands->Create_3D_Sound_At_Bone( Get_Parameter ( "killedSound" ), obj, "origin" );

	push	OFFSET ??_C@_06NHCMNMEH@origin?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@OOEMILKO@killedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+188]
	call	edx
	add	esp, 12					; 0000000cH
$LN2@Killed:

; 296  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0@Z ENDP ; dp88_unitSounds::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Damaged@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0M@Z PROC ; dp88_unitSounds::Damaged, COMDAT
; _this$ = ecx

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 250  : 	// Bail out if damager == null or damager == obj
; 251  : 	if ( damager == NULL || Commands->Get_ID ( damager ) == Commands->Get_ID ( obj ) )

	cmp	DWORD PTR _damager$[ebp], 0
	je	SHORT $LN9@Damaged
	mov	eax, DWORD PTR _damager$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN10@Damaged
$LN9@Damaged:

; 252  : 		return;

	jmp	$LN11@Damaged
$LN10@Damaged:

; 253  : 
; 254  : 	if ( amount > 0 && heavilyDamagedEnabled && amount > Get_Int_Parameter ( "heavilyDamagedSoundMinDamageAmount" ) )

	movss	xmm0, DWORD PTR _amount$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN8@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	test	ecx, ecx
	je	$LN8@Damaged
	push	OFFSET ??_C@_0CD@LHBDKIJI@heavilyDamagedSoundMinDamageAmou@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _amount$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN8@Damaged

; 255  : 	{
; 256  : 		if ( Commands->Get_Random_Int ( 0,101 ) <= Get_Int_Parameter ( "heavilyDamagedSoundProbability" ) )

	push	101					; 00000065H
	push	0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	esi, eax
	push	OFFSET ??_C@_0BP@KNDMHEJA@heavilyDamagedSoundProbability?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	esi, eax
	jg	SHORT $LN7@Damaged

; 257  : 		{
; 258  : 			heavilyDamagedEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+29], 0

; 259  : 			Commands->Create_3D_Sound_At_Bone( Get_Parameter ( "heavilyDamagedSound" ), obj, "origin" );

	push	OFFSET ??_C@_06NHCMNMEH@origin?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@EBDFLGEH@heavilyDamagedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+188]
	call	edx
	add	esp, 12					; 0000000cH

; 260  : 			Commands->Start_Timer ( obj, this, (float)Get_Int_Parameter( "heavilyDamagedSoundMinInterval" ), 2 );

	push	2
	push	OFFSET ??_C@_0BP@NCEDOML@heavilyDamagedSoundMinInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN7@Damaged:

; 261  : 		}
; 262  : 	}

	jmp	$LN1@Damaged
$LN8@Damaged:

; 263  : 
; 264  : 
; 265  : 	else if ( amount > 0 && damagedEnabled )

	movss	xmm0, DWORD PTR _amount$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN5@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	je	$LN5@Damaged

; 266  : 	{
; 267  : 		if ( Commands->Get_Random_Int ( 0,101 ) <= Get_Int_Parameter ( "damagedSoundProbability" ) )

	push	101					; 00000065H
	push	0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	esi, eax
	push	OFFSET ??_C@_0BI@IGEACIE@damagedSoundProbability?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	esi, eax
	jg	SHORT $LN4@Damaged

; 268  : 		{
; 269  : 			damagedEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 0

; 270  : 			Commands->Create_3D_Sound_At_Bone( Get_Parameter ( "damagedSound" ), obj, "origin" );

	push	OFFSET ??_C@_06NHCMNMEH@origin?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@HJOCDFAF@damagedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+188]
	call	edx
	add	esp, 12					; 0000000cH

; 271  : 			Commands->Start_Timer ( obj, this, (float)Get_Int_Parameter( "damagedSoundMinInterval" ), 1 );

	push	1
	push	OFFSET ??_C@_0BI@KIHMEINP@damagedSoundMinInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN4@Damaged:

; 272  : 		}
; 273  : 	}

	jmp	$LN1@Damaged
$LN5@Damaged:

; 274  : 
; 275  : 
; 276  : 	else if ( amount < 0 && healedEnabled )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _amount$[ebp]
	jbe	$LN1@Damaged
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+30]
	test	ecx, ecx
	je	$LN1@Damaged

; 277  : 	{
; 278  : 		healAmount += (int)-amount;

	movss	xmm0, DWORD PTR _amount$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], eax

; 279  : 		
; 280  : 		// Send delayed custom to decrement heal amount
; 281  : 		Commands->Send_Custom_Event ( obj, obj, CUSTOM_UNITSOUNDS_HEALDECREMENT, (int)-amount, (float)Get_Int_Parameter ( "healedSoundCheckTime" ) );

	push	OFFSET ??_C@_0BF@BDLJAEAI@healedSoundCheckTime?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _amount$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvttss2si eax, xmm0
	push	eax
	push	-637534206				; da000002H
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 20					; 00000014H

; 282  : 
; 283  : 		if ( healAmount >= Get_Int_Parameter ( "healedSoundMinHealAmount" ) )

	push	OFFSET ??_C@_0BJ@CJHOHEKB@healedSoundMinHealAmount?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jl	SHORT $LN1@Damaged

; 284  : 		{
; 285  : 			healedEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+30], 0

; 286  : 			Commands->Create_3D_Sound_At_Bone( Get_Parameter ( "healedSound" ), obj, "origin" );

	push	OFFSET ??_C@_06NHCMNMEH@origin?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@GGDGEACJ@healedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+188]
	call	edx
	add	esp, 12					; 0000000cH

; 287  : 			Commands->Start_Timer ( obj, this, (float)Get_Int_Parameter( "healedSoundMinInterval" ), 3 );

	push	3
	push	OFFSET ??_C@_0BH@NIOKCIKB@healedSoundMinInterval?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H
$LN1@Damaged:
$LN11@Damaged:

; 288  : 		}
; 289  : 	}
; 290  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@dp88_unitSounds@@EAEXPAVScriptableGameObj@@0M@Z ENDP ; dp88_unitSounds::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_unitSounds@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
tv223 = -88						; size = 4
tv198 = -88						; size = 4
tv173 = -88						; size = 4
tv148 = -88						; size = 4
tv82 = -88						; size = 4
tv362 = -84						; size = 4
tv337 = -84						; size = 4
tv312 = -84						; size = 4
tv287 = -84						; size = 4
tv260 = -84						; size = 4
tv357 = -78						; size = 1
tv332 = -78						; size = 1
tv307 = -78						; size = 1
tv282 = -78						; size = 1
tv255 = -78						; size = 1
tv350 = -77						; size = 1
tv325 = -77						; size = 1
tv300 = -77						; size = 1
tv275 = -77						; size = 1
tv248 = -77						; size = 1
tv346 = -76						; size = 4
tv321 = -76						; size = 4
tv296 = -76						; size = 4
tv271 = -76						; size = 4
tv244 = -76						; size = 4
tv347 = -72						; size = 4
tv322 = -72						; size = 4
tv297 = -72						; size = 4
tv272 = -72						; size = 4
tv245 = -72						; size = 4
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_unitSounds@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_unitSounds::Created, COMDAT
; _this$ = ecx

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	Update_Network_Object(obj);

	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN12@Created
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 8
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN13@Created
$LN12@Created:
	mov	DWORD PTR tv68[ebp], 0
$LN13@Created:
	mov	ecx, DWORD PTR tv68[ebp]
	push	ecx
	call	DWORD PTR ?Update_Network_Object@@3P6AXPAVNetworkObjectClass@@@ZA ; Update_Network_Object
	add	esp, 4

; 219  : 	healAmount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 220  : 	if ( strcmp ( Get_Parameter ( "createdSound" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter ( "createdSound" ) ) )

	mov	DWORD PTR tv245[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0N@FAJJJDKA@createdSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv244[ebp], eax
$LL14@Created:
	mov	eax, DWORD PTR tv244[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv248[ebp], cl
	mov	edx, DWORD PTR tv245[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN15@Created
	cmp	BYTE PTR tv248[ebp], 0
	je	SHORT $LN16@Created
	mov	eax, DWORD PTR tv244[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv255[ebp], cl
	mov	edx, DWORD PTR tv245[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN15@Created
	add	DWORD PTR tv244[ebp], 2
	add	DWORD PTR tv245[ebp], 2
	cmp	BYTE PTR tv255[ebp], 0
	jne	SHORT $LL14@Created
$LN16@Created:
	mov	DWORD PTR tv260[ebp], 0
	jmp	SHORT $LN17@Created
$LN15@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv260[ebp], eax
$LN17@Created:
	mov	ecx, DWORD PTR tv260[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN9@Created
	push	OFFSET ??_C@_0N@FAJJJDKA@createdSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@Created

; 221  : 		Commands->Create_3D_Sound_At_Bone( Get_Parameter ( "createdSound" ), obj, "origin" );

	push	OFFSET ??_C@_06NHCMNMEH@origin?$AA@
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@FAJJJDKA@createdSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	mov	ecx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	edx, DWORD PTR [ecx+188]
	call	edx
	add	esp, 12					; 0000000cH
$LN9@Created:

; 222  : 
; 223  : 
; 224  : 	if ( strcmp ( Get_Parameter ( "damagedSound" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter ( "damagedSound" ) ) )

	mov	DWORD PTR tv272[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0N@HJOCDFAF@damagedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv271[ebp], eax
$LL18@Created:
	mov	eax, DWORD PTR tv271[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv275[ebp], cl
	mov	edx, DWORD PTR tv272[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN19@Created
	cmp	BYTE PTR tv275[ebp], 0
	je	SHORT $LN20@Created
	mov	eax, DWORD PTR tv271[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv282[ebp], cl
	mov	edx, DWORD PTR tv272[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN19@Created
	add	DWORD PTR tv271[ebp], 2
	add	DWORD PTR tv272[ebp], 2
	cmp	BYTE PTR tv282[ebp], 0
	jne	SHORT $LL18@Created
$LN20@Created:
	mov	DWORD PTR tv287[ebp], 0
	jmp	SHORT $LN21@Created
$LN19@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv287[ebp], eax
$LN21@Created:
	mov	ecx, DWORD PTR tv287[ebp]
	mov	DWORD PTR tv148[ebp], ecx
	cmp	DWORD PTR tv148[ebp], 0
	je	SHORT $LN8@Created
	push	OFFSET ??_C@_0N@HJOCDFAF@damagedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@Created

; 225  : 		damagedEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 1

; 226  : 	else

	jmp	SHORT $LN7@Created
$LN8@Created:

; 227  : 		damagedEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 0
$LN7@Created:

; 228  : 
; 229  : 
; 230  : 	if ( strcmp ( Get_Parameter ( "heavilyDamagedSound" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter ( "heavilyDamagedSound" ) ) )

	mov	DWORD PTR tv297[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BE@EBDFLGEH@heavilyDamagedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv296[ebp], eax
$LL22@Created:
	mov	eax, DWORD PTR tv296[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv300[ebp], cl
	mov	edx, DWORD PTR tv297[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN23@Created
	cmp	BYTE PTR tv300[ebp], 0
	je	SHORT $LN24@Created
	mov	eax, DWORD PTR tv296[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv307[ebp], cl
	mov	edx, DWORD PTR tv297[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN23@Created
	add	DWORD PTR tv296[ebp], 2
	add	DWORD PTR tv297[ebp], 2
	cmp	BYTE PTR tv307[ebp], 0
	jne	SHORT $LL22@Created
$LN24@Created:
	mov	DWORD PTR tv312[ebp], 0
	jmp	SHORT $LN25@Created
$LN23@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv312[ebp], eax
$LN25@Created:
	mov	ecx, DWORD PTR tv312[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	cmp	DWORD PTR tv173[ebp], 0
	je	SHORT $LN6@Created
	push	OFFSET ??_C@_0BE@EBDFLGEH@heavilyDamagedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@Created

; 231  : 		heavilyDamagedEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+29], 1

; 232  : 	else

	jmp	SHORT $LN5@Created
$LN6@Created:

; 233  : 		heavilyDamagedEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+29], 0
$LN5@Created:

; 234  : 
; 235  : 
; 236  : 	if ( strcmp ( Get_Parameter ( "healedSound" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter ( "healedSound" ) ) )

	mov	DWORD PTR tv322[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0M@GGDGEACJ@healedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv321[ebp], eax
$LL26@Created:
	mov	eax, DWORD PTR tv321[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv325[ebp], cl
	mov	edx, DWORD PTR tv322[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN27@Created
	cmp	BYTE PTR tv325[ebp], 0
	je	SHORT $LN28@Created
	mov	eax, DWORD PTR tv321[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv332[ebp], cl
	mov	edx, DWORD PTR tv322[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN27@Created
	add	DWORD PTR tv321[ebp], 2
	add	DWORD PTR tv322[ebp], 2
	cmp	BYTE PTR tv332[ebp], 0
	jne	SHORT $LL26@Created
$LN28@Created:
	mov	DWORD PTR tv337[ebp], 0
	jmp	SHORT $LN29@Created
$LN27@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv337[ebp], eax
$LN29@Created:
	mov	ecx, DWORD PTR tv337[ebp]
	mov	DWORD PTR tv198[ebp], ecx
	cmp	DWORD PTR tv198[ebp], 0
	je	SHORT $LN4@Created
	push	OFFSET ??_C@_0M@GGDGEACJ@healedSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Created

; 237  : 		healedEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+30], 1

; 238  : 	else

	jmp	SHORT $LN3@Created
$LN4@Created:

; 239  : 		healedEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+30], 0
$LN3@Created:

; 240  : 
; 241  : 
; 242  : 	if ( strcmp ( Get_Parameter ( "fallingDamageSound" ), "null" ) != 0 && Is_Valid_Preset ( Get_Parameter ( "fallingDamageSound" ) ) )

	mov	DWORD PTR tv347[ebp], OFFSET ??_C@_04MLLLIHIP@null?$AA@
	push	OFFSET ??_C@_0BD@ODPFHLGP@fallingDamageSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	mov	DWORD PTR tv346[ebp], eax
$LL30@Created:
	mov	eax, DWORD PTR tv346[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv350[ebp], cl
	mov	edx, DWORD PTR tv347[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN31@Created
	cmp	BYTE PTR tv350[ebp], 0
	je	SHORT $LN32@Created
	mov	eax, DWORD PTR tv346[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv357[ebp], cl
	mov	edx, DWORD PTR tv347[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN31@Created
	add	DWORD PTR tv346[ebp], 2
	add	DWORD PTR tv347[ebp], 2
	cmp	BYTE PTR tv357[ebp], 0
	jne	SHORT $LL30@Created
$LN32@Created:
	mov	DWORD PTR tv362[ebp], 0
	jmp	SHORT $LN33@Created
$LN31@Created:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv362[ebp], eax
$LN33@Created:
	mov	ecx, DWORD PTR tv362[ebp]
	mov	DWORD PTR tv223[ebp], ecx
	cmp	DWORD PTR tv223[ebp], 0
	je	SHORT $LN2@Created
	push	OFFSET ??_C@_0BD@ODPFHLGP@fallingDamageSound?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDPBD@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	?Is_Valid_Preset@@YA_NPBD@Z		; Is_Valid_Preset
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Created

; 243  : 		fallingDamageEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+31], 1

; 244  : 	else

	jmp	SHORT $LN10@Created
$LN2@Created:

; 245  : 		fallingDamageEnabled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+31], 0
$LN10@Created:

; 246  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_unitSounds@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_unitSounds::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gdp88_randomWeather@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gdp88_randomWeather@@UAEPAXI@Z PROC			; dp88_randomWeather::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1dp88_randomWeather@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gdp88_randomWeather@@UAEPAXI@Z ENDP			; dp88_randomWeather::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1dp88_randomWeather@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1dp88_randomWeather@@UAE@XZ PROC			; dp88_randomWeather::~dp88_randomWeather, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1dp88_randomWeather@@UAE@XZ ENDP			; dp88_randomWeather::~dp88_randomWeather
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0dp88_randomWeather@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0dp88_randomWeather@@QAE@XZ PROC			; dp88_randomWeather::dp88_randomWeather, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7dp88_randomWeather@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0dp88_randomWeather@@QAE@XZ ENDP			; dp88_randomWeather::dp88_randomWeather
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Timer_Expired@dp88_randomWeather@@EAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
tv913 = -132						; size = 4
tv902 = -132						; size = 4
tv789 = -132						; size = 4
tv773 = -132						; size = 4
tv762 = -132						; size = 4
tv751 = -132						; size = 4
tv656 = -132						; size = 4
tv909 = -128						; size = 4
tv898 = -128						; size = 4
tv785 = -128						; size = 4
tv769 = -128						; size = 4
tv758 = -128						; size = 4
tv747 = -128						; size = 4
tv652 = -128						; size = 4
_updateInterval$ = -60					; size = 4
_wind_variability$1 = -56				; size = 4
_wind_strength$2 = -52					; size = 4
_wind_heading$3 = -48					; size = 4
_lightning_distribution$4 = -44				; size = 4
_lightning_heading$5 = -40				; size = 4
_lightning_end$6 = -36					; size = 4
_lightning_start$7 = -32				; size = 4
_lightning_intensity$8 = -28				; size = 4
_lightning_type$9 = -24					; size = 4
_precipitation_density$10 = -20				; size = 4
_precipitation_type$11 = -16				; size = 4
_fog_end$12 = -12					; size = 4
_fog_start$13 = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@dp88_randomWeather@@EAEXPAVScriptableGameObj@@H@Z PROC ; dp88_randomWeather::Timer_Expired, COMDAT
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 	// Decide if we should change the weather at all
; 41   : 	if ( Commands->Get_Random_Int ( 0,101 ) <= Get_Int_Parameter ( "probability_change" ) )

	push	101					; 00000065H
	push	0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	esi, eax
	push	OFFSET ??_C@_0BD@NIDGNOJM@probability_change?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	esi, eax
	jg	$LN18@Timer_Expi

; 42   : 	{
; 43   : 		// Time to change the weather!
; 44   : 
; 45   : 
; 46   : 		/********************
; 47   : 		Fog section (start / end / time)
; 48   : 		********************/
; 49   : 		float fog_start = (float)Commands->Get_Random_Int ( Get_Int_Parameter ( "fog_start_distance_min" ), Get_Int_Parameter ( "fog_start_distance_max" )+1 );

	push	OFFSET ??_C@_0BH@EAMNBDJP@fog_start_distance_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0BH@FCEGPHPA@fog_start_distance_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _fog_start$13[ebp], xmm0

; 50   : 		float fog_end = (float)Commands->Get_Random_Int ( Get_Int_Parameter ( "fog_end_distance_min" ), Get_Int_Parameter ( "fog_end_distance_max" )+1 );

	push	OFFSET ??_C@_0BF@EOPDOMBG@fog_end_distance_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0BF@FMHIAIHJ@fog_end_distance_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _fog_end$12[ebp], xmm0

; 51   : 		
; 52   : 		// Check start <= end
; 53   : 		if ( fog_start > fog_end )

	movss	xmm0, DWORD PTR _fog_start$13[ebp]
	comiss	xmm0, DWORD PTR _fog_end$12[ebp]
	jbe	SHORT $LN17@Timer_Expi

; 54   : 			fog_end = fog_start;

	movss	xmm0, DWORD PTR _fog_start$13[ebp]
	movss	DWORD PTR _fog_end$12[ebp], xmm0
$LN17@Timer_Expi:

; 55   : 
; 56   : 		Commands->Set_Fog_Range ( fog_start, fog_end, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fog_end$12[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fog_start$13[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+704]
	call	ecx
	add	esp, 12					; 0000000cH

; 57   : 
; 58   : 
; 59   : 
; 60   : 
; 61   : 
; 62   : 
; 63   : 		/********************
; 64   : 		Precipitation section (density / time / unknown)
; 65   : 		********************/
; 66   : 		int precipitation_type = Commands->Get_Random_Int ( 1, 101 );		// 1 to 100

	push	101					; 00000065H
	push	1
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	DWORD PTR _precipitation_type$11[ebp], eax

; 67   : 		float precipitation_density = (float)(Commands->Get_Random_Int ( (int)(Get_Float_Parameter ( "precipitation_density_min" ) *100.0f), (int)((Get_Float_Parameter ( "precipitation_density_max" ) *100.0f)+1.0f) ) / 100.0f );

	push	OFFSET ??_C@_0BK@BPCGMILK@precipitation_density_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv652[ebp]
	movss	xmm0, DWORD PTR tv652[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_0BK@NKNCMNF@precipitation_density_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv656[ebp]
	movss	xmm0, DWORD PTR tv656[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _precipitation_density$10[ebp], xmm0

; 68   : 
; 69   : 		
; 70   : 		if ( precipitation_density > 0.0f && Get_Int_Parameter ( "precipitation_probability_snow" ) >= precipitation_type )

	movss	xmm0, DWORD PTR _precipitation_density$10[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN16@Timer_Expi
	push	OFFSET ??_C@_0BP@MFKHFMGM@precipitation_probability_snow?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, DWORD PTR _precipitation_type$11[ebp]
	jl	$LN16@Timer_Expi

; 71   : 		{
; 72   : 			// Set snow
; 73   : 			Commands->Set_Snow(precipitation_density, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _precipitation_density$10[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+692]
	call	ecx
	add	esp, 12					; 0000000cH

; 74   : 			Commands->Set_Rain(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+688]
	call	ecx
	add	esp, 12					; 0000000cH

; 75   : 			Commands->Set_Ash(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+696]
	call	ecx
	add	esp, 12					; 0000000cH
	jmp	$LN11@Timer_Expi
$LN16@Timer_Expi:

; 76   : 		}
; 77   : 		else if ( precipitation_density > 0.0f && Get_Int_Parameter ( "precipitation_probability_snow" ) + Get_Int_Parameter ( "precipitation_probability_rain" ) >= precipitation_type )

	movss	xmm0, DWORD PTR _precipitation_density$10[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN14@Timer_Expi
	push	OFFSET ??_C@_0BP@MFKHFMGM@precipitation_probability_snow?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	esi, eax
	push	OFFSET ??_C@_0BP@DPCJLACA@precipitation_probability_rain?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	esi, eax
	cmp	esi, DWORD PTR _precipitation_type$11[ebp]
	jl	$LN14@Timer_Expi

; 78   : 		{
; 79   : 			// Set rain
; 80   : 			Commands->Set_Snow(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+692]
	call	ecx
	add	esp, 12					; 0000000cH

; 81   : 			Commands->Set_Rain(precipitation_density, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _precipitation_density$10[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+688]
	call	ecx
	add	esp, 12					; 0000000cH

; 82   : 			Commands->Set_Ash(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+696]
	call	ecx
	add	esp, 12					; 0000000cH
	jmp	$LN11@Timer_Expi
$LN14@Timer_Expi:

; 83   : 		}
; 84   : 		else if ( precipitation_density > 0.0f && Get_Int_Parameter ( "precipitation_probability_snow" ) + Get_Int_Parameter ( "precipitation_probability_rain" )+ Get_Int_Parameter ( "precipitation_probability_volcanic_ash" ) >= precipitation_type )

	movss	xmm0, DWORD PTR _precipitation_density$10[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN12@Timer_Expi
	push	OFFSET ??_C@_0BP@MFKHFMGM@precipitation_probability_snow?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	esi, eax
	push	OFFSET ??_C@_0BP@DPCJLACA@precipitation_probability_rain?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	esi, eax
	push	OFFSET ??_C@_0CH@KLINGEFD@precipitation_probability_volcan@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	esi, eax
	cmp	esi, DWORD PTR _precipitation_type$11[ebp]
	jl	$LN12@Timer_Expi

; 85   : 		{
; 86   : 			// Set volcanic ash
; 87   : 			Commands->Set_Snow(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+692]
	call	ecx
	add	esp, 12					; 0000000cH

; 88   : 			Commands->Set_Rain(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+688]
	call	ecx
	add	esp, 12					; 0000000cH

; 89   : 			Commands->Set_Ash(precipitation_density, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _precipitation_density$10[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+696]
	call	ecx
	add	esp, 12					; 0000000cH

; 90   : 		}
; 91   : 		else

	jmp	$LN11@Timer_Expi
$LN12@Timer_Expi:

; 92   : 		{
; 93   : 			// Set none
; 94   : 			Commands->Set_Rain(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+688]
	call	ecx
	add	esp, 12					; 0000000cH

; 95   : 			Commands->Set_Snow(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+692]
	call	ecx
	add	esp, 12					; 0000000cH

; 96   : 			Commands->Set_Ash(0.0f, 2.0f, true);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+696]
	call	ecx
	add	esp, 12					; 0000000cH
$LN11@Timer_Expi:

; 97   : 		}
; 98   : 
; 99   : 
; 100  : 
; 101  : 
; 102  : 
; 103  : 
; 104  : 		/********************
; 105  : 		Lightning section (intensity / start / end / heading / distribution / time)
; 106  : 		********************/
; 107  : 		int lightning_type = Commands->Get_Random_Int ( 1, 101 );		// 1 to 100

	push	101					; 00000065H
	push	1
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	mov	DWORD PTR _lightning_type$9[ebp], eax

; 108  : 		float lightning_intensity = (float)(Commands->Get_Random_Int ( (int)(Get_Float_Parameter ( "lighting_intensity_min" ) *100.0f), (int)((Get_Float_Parameter ( "lighting_intensity_max" ) *100.0f)+1.0f) ) / 100.0f );

	push	OFFSET ??_C@_0BH@IMDLENDJ@lighting_intensity_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv747[ebp]
	movss	xmm0, DWORD PTR tv747[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_0BH@JOLAKJFG@lighting_intensity_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv751[ebp]
	movss	xmm0, DWORD PTR tv751[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _lightning_intensity$8[ebp], xmm0

; 109  : 		float lightning_start = (float)(Commands->Get_Random_Int ( (int)(Get_Float_Parameter ( "lighting_start_distance_min" ) *100.0f), (int)((Get_Float_Parameter ( "lighting_start_distance_max" ) *100.0f)+1.0f) ) / 100.0f );

	push	OFFSET ??_C@_0BM@ELGKDIPJ@lighting_start_distance_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv758[ebp]
	movss	xmm0, DWORD PTR tv758[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_0BM@FJOBNMJG@lighting_start_distance_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv762[ebp]
	movss	xmm0, DWORD PTR tv762[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _lightning_start$7[ebp], xmm0

; 110  : 		float lightning_end = (float)(Commands->Get_Random_Int ( (int)(Get_Float_Parameter ( "lighting_end_distance_min" ) *100.0f), (int)((Get_Float_Parameter ( "lighting_end_distance_max" ) *100.0f)+1.0f) ) / 100.0f );

	push	OFFSET ??_C@_0BK@GGFLJENI@lighting_end_distance_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv769[ebp]
	movss	xmm0, DWORD PTR tv769[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_0BK@HENAHALH@lighting_end_distance_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv773[ebp]
	movss	xmm0, DWORD PTR tv773[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _lightning_end$6[ebp], xmm0

; 111  : 		float lightning_heading = (float)Commands->Get_Random_Int ( Get_Int_Parameter ( "lighting_heading_min" ), Get_Int_Parameter ( "lighting_heading_max" ) +1 );

	push	OFFSET ??_C@_0BF@JLDPMMAB@lighting_heading_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0BF@IJLECIGO@lighting_heading_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _lightning_heading$5[ebp], xmm0

; 112  : 		float lightning_distribution = (float)(Commands->Get_Random_Int ( (int)(Get_Float_Parameter ( "lighting_distribution_min" ) *100.0f), (int)((Get_Float_Parameter ( "lighting_distribution_max" ) *100.0f)+1.0f) ) / 100.0f );

	push	OFFSET ??_C@_0BK@JEJGOJCM@lighting_distribution_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv785[ebp]
	movss	xmm0, DWORD PTR tv785[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_0BK@IGBNANED@lighting_distribution_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv789[ebp]
	movss	xmm0, DWORD PTR tv789[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _lightning_distribution$4[ebp], xmm0

; 113  : 
; 114  : 		// Check ranges of variables
; 115  : 		if ( lightning_intensity > 1.0f )			lightning_intensity = 1.0f;

	movss	xmm0, DWORD PTR _lightning_intensity$8[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN10@Timer_Expi
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _lightning_intensity$8[ebp], xmm0
$LN10@Timer_Expi:

; 116  : 		if ( lightning_start > 1.0f )				lightning_start = 1.0f;

	movss	xmm0, DWORD PTR _lightning_start$7[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN9@Timer_Expi
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _lightning_start$7[ebp], xmm0
$LN9@Timer_Expi:

; 117  : 		if ( lightning_end > 1.0f )					lightning_end = 1.0f;

	movss	xmm0, DWORD PTR _lightning_end$6[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN8@Timer_Expi
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _lightning_end$6[ebp], xmm0
$LN8@Timer_Expi:

; 118  : 		if ( lightning_distribution > 1.0f )		lightning_distribution = 1.0f;

	movss	xmm0, DWORD PTR _lightning_distribution$4[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN7@Timer_Expi
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _lightning_distribution$4[ebp], xmm0
$LN7@Timer_Expi:

; 119  : 
; 120  : 		// Check start <= end
; 121  : 		if ( lightning_start > lightning_end )

	movss	xmm0, DWORD PTR _lightning_start$7[ebp]
	comiss	xmm0, DWORD PTR _lightning_end$6[ebp]
	jbe	SHORT $LN6@Timer_Expi

; 122  : 			lightning_end = lightning_start;

	movss	xmm0, DWORD PTR _lightning_start$7[ebp]
	movss	DWORD PTR _lightning_end$6[ebp], xmm0
$LN6@Timer_Expi:

; 123  : 
; 124  : 
; 125  : 		if ( Get_Int_Parameter ( "lighting_probability_normal" ) >= lightning_type )

	push	OFFSET ??_C@_0BM@DAJAJHBL@lighting_probability_normal?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	cmp	eax, DWORD PTR _lightning_type$9[ebp]
	jl	$LN5@Timer_Expi

; 126  : 		{
; 127  : 			// Set lightning normal
; 128  : 			Commands->Set_Lightning ( lightning_intensity, lightning_start, lightning_end, lightning_heading, lightning_distribution, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_distribution$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_heading$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_end$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_start$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_intensity$8[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+676]
	call	ecx
	add	esp, 24					; 00000018H

; 129  : 			Commands->Set_War_Blitz ( 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+680]
	call	ecx
	add	esp, 24					; 00000018H
	jmp	$LN2@Timer_Expi
$LN5@Timer_Expi:

; 130  : 		}
; 131  : 
; 132  : 		else if ( Get_Int_Parameter ( "lighting_probability_normal" ) + Get_Int_Parameter ( "lighting_probability_war_blitz" ) >= lightning_type )

	push	OFFSET ??_C@_0BM@DAJAJHBL@lighting_probability_normal?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	mov	esi, eax
	push	OFFSET ??_C@_0BP@LEGLJNCE@lighting_probability_war_blitz?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	esi, eax
	cmp	esi, DWORD PTR _lightning_type$9[ebp]
	jl	$LN3@Timer_Expi

; 133  : 		{
; 134  : 			// Set lightning war blitz
; 135  : 			Commands->Set_Lightning ( 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+676]
	call	ecx
	add	esp, 24					; 00000018H

; 136  : 			Commands->Set_War_Blitz ( lightning_intensity, lightning_start, lightning_end, lightning_heading, lightning_distribution, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_distribution$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_heading$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_end$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_start$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lightning_intensity$8[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+680]
	call	ecx
	add	esp, 24					; 00000018H

; 137  : 		}
; 138  : 
; 139  : 		else

	jmp	$LN2@Timer_Expi
$LN3@Timer_Expi:

; 140  : 		{
; 141  : 			// Set none
; 142  : 			Commands->Set_Lightning ( 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+676]
	call	ecx
	add	esp, 24					; 00000018H

; 143  : 			Commands->Set_War_Blitz ( 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+680]
	call	ecx
	add	esp, 24					; 00000018H
$LN2@Timer_Expi:

; 144  : 		}
; 145  : 		
; 146  : 
; 147  : 
; 148  : 
; 149  : 
; 150  : 
; 151  : 		/********************
; 152  : 		Wind section (heading / strength / variability / time)
; 153  : 		********************/
; 154  : 		float wind_heading = (float)Commands->Get_Random_Int ( Get_Int_Parameter ( "wind_heading_min" ), Get_Int_Parameter ( "wind_heading_max" ) +1 );

	push	OFFSET ??_C@_0BB@GOJNIJEO@wind_heading_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0BB@HMBGGNCB@wind_heading_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _wind_heading$3[ebp], xmm0

; 155  : 		float wind_strength = (float)(Commands->Get_Random_Int ( (int)(Get_Float_Parameter ( "wind_speed_min" ) *100.0f), (int)((Get_Float_Parameter ( "wind_speed_max" ) *100.0f)+1.0f) ) / 100.0f );

	push	OFFSET ??_C@_0P@EBDMKJAO@wind_speed_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv898[ebp]
	movss	xmm0, DWORD PTR tv898[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_0P@FDLHENGB@wind_speed_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv902[ebp]
	movss	xmm0, DWORD PTR tv902[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _wind_strength$2[ebp], xmm0

; 156  : 		float wind_variability = (float)(Commands->Get_Random_Int ( (int)(Get_Float_Parameter ( "wind_variability_min" ) *100.0f), (int)((Get_Float_Parameter ( "wind_variability_max" ) *100.0f)+1.0f) ) / 100.0f );

	push	OFFSET ??_C@_0BF@EIIDAABA@wind_variability_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv909[ebp]
	movss	xmm0, DWORD PTR tv909[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_0BF@FKAIOEHP@wind_variability_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Float_Parameter@ScriptImpClass@@QAEMPBD@Z ; ScriptImpClass::Get_Float_Parameter
	fstp	DWORD PTR tv913[ebp]
	movss	xmm0, DWORD PTR tv913[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _wind_variability$1[ebp], xmm0

; 157  : 
; 158  : 		// Check ranges of variables
; 159  : 		if ( wind_variability > 1.0f )				wind_variability = 1.0f;

	movss	xmm0, DWORD PTR _wind_variability$1[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN1@Timer_Expi
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _wind_variability$1[ebp], xmm0
$LN1@Timer_Expi:

; 160  : 		
; 161  : 		Commands->Set_Wind ( wind_heading, wind_strength, wind_variability, 2.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _wind_variability$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _wind_strength$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _wind_heading$3[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+684]
	call	ecx
	add	esp, 16					; 00000010H
$LN18@Timer_Expi:

; 162  : 	}
; 163  : 
; 164  : 	// Restart timer
; 165  : 	float updateInterval = (float)Commands->Get_Random_Int ( Get_Int_Parameter ( "update_interval_min" ), Get_Int_Parameter ( "update_interval_max" )+1 );

	push	OFFSET ??_C@_0BE@HFKMOJBJ@update_interval_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0BE@GHCHANHG@update_interval_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _updateInterval$[ebp], xmm0

; 166  : 	Commands->Start_Timer ( obj, this, updateInterval, TIMER_RANDOMWEATHER );

	push	-620756990				; db000002H
	push	ecx
	movss	xmm0, DWORD PTR _updateInterval$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@dp88_randomWeather@@EAEXPAVScriptableGameObj@@H@Z ENDP ; dp88_randomWeather::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\dp88_misc.cpp
;	COMDAT ?Created@dp88_randomWeather@@EAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_updateInterval$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@dp88_randomWeather@@EAEXPAVScriptableGameObj@@@Z PROC ; dp88_randomWeather::Created, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 	// Start timer
; 33   : 	float updateInterval = (float)Commands->Get_Random_Int ( Get_Int_Parameter ( "update_interval_min" ), Get_Int_Parameter ( "update_interval_max" )+1 );

	push	OFFSET ??_C@_0BE@HFKMOJBJ@update_interval_max?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0BE@GHCHANHG@update_interval_min?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	push	eax
	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _updateInterval$[ebp], xmm0

; 34   : 	Commands->Start_Timer ( obj, this, updateInterval, TIMER_RANDOMWEATHER );

	push	-620756990				; db000002H
	push	ecx
	movss	xmm0, DWORD PTR _updateInterval$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	eax, DWORD PTR [edx+128]
	call	eax
	add	esp, 16					; 00000010H

; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@dp88_randomWeather@@EAEXPAVScriptableGameObj@@@Z ENDP ; dp88_randomWeather::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z PROC	; JFW_Object_Created_Hook_Base::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1JFW_Object_Created_Hook_Base@@UAE@XZ ; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EJFW_Object_Created_Hook_Base@@UAEPAXI@Z ENDP	; JFW_Object_Created_Hook_Base::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z PROC	; JFW_Object_Created_Hook_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Object_Created_Hook_Base@@UAE@XZ	; JFW_Object_Created_Hook_Base::~JFW_Object_Created_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJFW_Object_Created_Hook_Base@@UAEPAXI@Z ENDP	; JFW_Object_Created_Hook_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z PROC	; JFW_Object_Created_Hook_Base::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4JFW_Object_Created_Hook_Base@@QAEAAV0@ABV0@@Z ENDP	; JFW_Object_Created_Hook_Base::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z PROC	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Object_Created_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0JFW_Object_Created_Hook_Base@@QAE@ABV0@@Z ENDP	; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_tt.h
;	COMDAT ??0JFW_Object_Created_Hook_Base@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0JFW_Object_Created_Hook_Base@@QAE@XZ PROC		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base, COMDAT
; _this$ = ecx

; 556  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Object_Created_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 557  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0JFW_Object_Created_Hook_Base@@QAE@XZ ENDP		; JFW_Object_Created_Hook_Base::JFW_Object_Created_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z PROC		; MultiKeyHookScriptImpClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMultiKeyHookScriptImpClass@@UAEPAXI@Z ENDP		; MultiKeyHookScriptImpClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z PROC		; MultiKeyHookScriptImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MultiKeyHookScriptImpClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMultiKeyHookScriptImpClass@@UAEPAXI@Z ENDP		; MultiKeyHookScriptImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z PROC	; MultiKeyHookScriptImpClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4MultiKeyHookScriptImpClass@@QAEAAV0@ABV0@@Z ENDP	; MultiKeyHookScriptImpClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z PROC		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MultiKeyHookScriptImpClass@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0MultiKeyHookScriptImpClass@@QAE@ABV0@@Z ENDP		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1MultiKeyHookScriptImpClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MultiKeyHookScriptImpClass@@UAE@XZ PROC		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1MultiKeyHookScriptImpClass@@UAE@XZ ENDP		; MultiKeyHookScriptImpClass::~MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0MultiKeyHookScriptImpClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MultiKeyHookScriptImpClass@@QAE@XZ PROC		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MultiKeyHookScriptImpClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0MultiKeyHookScriptImpClass@@QAE@XZ ENDP		; MultiKeyHookScriptImpClass::MultiKeyHookScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAXI@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEAAV0@ABV0@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@ABV0@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ
_TEXT	SEGMENT
_node$1 = -12						; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count, COMDAT
; _this$ = ecx

; 302  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		uint32 count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 304  : 
; 305  : 		for (SLNode<T>* node = HeadNode; node; node = node->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _node$1[ebp], ecx
	jmp	SHORT $LN3@Get_Count
$LN2@Get_Count:
	mov	ecx, DWORD PTR _node$1[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _node$1[ebp], eax
$LN3@Get_Count:
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN1@Get_Count

; 306  : 			++count;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN2@Get_Count
$LN1@Get_Count:

; 307  : 
; 308  : 		return count;

	mov	eax, DWORD PTR _count$[ebp]

; 309  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Count@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBEIXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Get_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty, COMDAT
; _this$ = ecx

; 296  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return !HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv66[ebp]

; 298  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UBE_NXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
_TEXT	SEGMENT
tv140 = -88						; size = 4
tv142 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN8@Insert_Aft

; 269  : 		{
; 270  : 			return false;

	xor	al, al
	jmp	$LN9@Insert_Aft
$LN8@Insert_Aft:

; 271  : 		}
; 272  : 		if (oldnode == NULL || HeadNode == NULL)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN6@Insert_Aft
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@Insert_Aft
$LN6@Insert_Aft:

; 273  : 		{
; 274  : 			return(Add_Head(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN9@Insert_Aft
$LN7@Insert_Aft:

; 275  : 		}
; 276  : 		SLNode<T> *cur;
; 277  : 		for (cur = HeadNode; cur && cur->Data() != oldnode; cur = cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Insert_Aft
$LN4@Insert_Aft:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Insert_Aft:
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN3@Insert_Aft

; 278  : 		{
; 279  : 		}

	jmp	SHORT $LN4@Insert_Aft
$LN3@Insert_Aft:

; 280  : 		if (cur != NULL  && cur->Data() == oldnode)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN2@Insert_Aft
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN2@Insert_Aft

; 281  : 		{
; 282  : 			if (cur == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Insert_Aft

; 283  : 			{
; 284  : 				return(Add_Tail(newnode));

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	$LN9@Insert_Aft
$LN1@Insert_Aft:

; 285  : 			}
; 286  : 			SLNode<T> *temp = new SLNode<T>(newnode);

	push	OFFSET ??_C@_0EN@HIHNAGN@SList?$DMstruct?5MultiKeyHookScriptI@
	push	286					; 0000011eH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Insert_Aft
	xor	ecx, ecx
	jne	SHORT $LN11@Insert_Aft
	push	286					; 0000011eH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@Insert_Aft:
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN15@Insert_Aft
$LN14@Insert_Aft:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN12@Insert_Aft
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN13@Insert_Aft
$LN12@Insert_Aft:
	mov	DWORD PTR tv140[ebp], 0
$LN13@Insert_Aft:
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv142[ebp], ecx
$LN15@Insert_Aft:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 287  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 288  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 289  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Insert_Aft
$LN2@Insert_Aft:

; 290  : 		}
; 291  : 		return false;

	xor	al, al
$LN9@Insert_Aft:

; 292  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_After@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_After
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z
_TEXT	SEGMENT
tv145 = -88						; size = 4
tv147 = -84						; size = 4
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_newnode$ = 8						; size = 4
_oldnode$ = 12						; size = 4
?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		if (newnode == NULL)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN7@Insert_Bef

; 245  : 		{
; 246  : 			return false;

	xor	al, al
	jmp	$LN8@Insert_Bef
$LN7@Insert_Bef:

; 247  : 		}
; 248  : 		if (oldnode == NULL || HeadNode == NULL || HeadNode->Data() == oldnode)

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@Insert_Bef
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	SHORT $LN6@Insert_Bef
$LN5@Insert_Bef:

; 249  : 		{
; 250  : 			return Add_Head(newnode);

	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN8@Insert_Bef
$LN6@Insert_Bef:

; 251  : 		}
; 252  : 		SLNode<T> *cur;
; 253  : 		for (cur=HeadNode; cur->Next() && cur->Next()->Data() != oldnode; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN4@Insert_Bef
$LN3@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN4@Insert_Bef:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	SHORT $LN2@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	je	SHORT $LN2@Insert_Bef

; 254  : 		{
; 255  : 		}

	jmp	SHORT $LN3@Insert_Bef
$LN2@Insert_Bef:

; 256  : 		if (cur->Next() != NULL && cur->Next()->Data() == oldnode)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	$LN1@Insert_Bef
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN1@Insert_Bef

; 257  : 		{
; 258  : 			SLNode<T> *temp	= new SLNode<T> (newnode);

	push	OFFSET ??_C@_0EO@OJGPEJGC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	258					; 00000102H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@Insert_Bef
	xor	ecx, ecx
	jne	SHORT $LN10@Insert_Bef
	push	258					; 00000102H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Insert_Bef:
	mov	DWORD PTR tv147[ebp], 0
	jmp	SHORT $LN14@Insert_Bef
$LN13@Insert_Bef:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@Insert_Bef
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN12@Insert_Bef
$LN11@Insert_Bef:
	mov	DWORD PTR tv145[ebp], 0
$LN12@Insert_Bef:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv147[ebp], ecx
$LN14@Insert_Bef:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _temp$2[ebp], edx

; 259  : 			temp->Set_Next(cur->Next());

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 260  : 			cur->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 261  : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@Insert_Bef
$LN1@Insert_Bef:

; 262  : 		}
; 263  : 		return false;

	xor	al, al
$LN8@Insert_Bef:

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert_Before@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@PBU23@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Insert_Before
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_cur$2 = -12						; size = 4
_next$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All, COMDAT
; _this$ = ecx

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 		SLNode<T> *next;
; 233  : 		for (SLNode<T> *cur = HeadNode; cur; cur = next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$2[ebp], ecx
	jmp	SHORT $LN3@Remove_All
$LN2@Remove_All:
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$2[ebp], eax
$LN3@Remove_All:
	cmp	DWORD PTR _cur$2[ebp], 0
	je	SHORT $LN1@Remove_All

; 234  : 		{
; 235  : 			next = cur->Next();

	mov	ecx, DWORD PTR _cur$2[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _next$[ebp], eax

; 236  : 			delete cur;

	push	OFFSET ??_C@_0EL@MPFHHNNA@SList?$DMstruct?5MultiKeyHookScriptI@
	push	236					; 000000ecH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@Remove_All
	xor	ecx, ecx
	jne	SHORT $LN6@Remove_All
	push	236					; 000000ecH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Remove_All:
	jmp	SHORT $LN8@Remove_All
$LN7@Remove_All:
	mov	eax, DWORD PTR _cur$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN8@Remove_All:

; 237  : 		}

	jmp	SHORT $LN2@Remove_All
$LN1@Remove_All:

; 238  : 		HeadNode = TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 239  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv76 = -81						; size = 1
$T1 = -80						; size = 4
_temp$2 = -12						; size = 4
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_element$ = 8						; size = 4
?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove, COMDAT
; _this$ = ecx

; 202  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		if (element == NULL || HeadNode == NULL)

	cmp	DWORD PTR _element$[ebp], 0
	je	SHORT $LN7@Remove
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@Remove
$LN7@Remove:

; 204  : 		{
; 205  : 			return false;

	xor	al, al
	jmp	$LN9@Remove
$LN8@Remove:

; 206  : 		}
; 207  : 		if (HeadNode->Data() == element)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN6@Remove

; 208  : 		{
; 209  : 			return Remove_Head() != NULL ? true : false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	test	eax, eax
	je	SHORT $LN11@Remove
	mov	BYTE PTR tv76[ebp], 1
	jmp	SHORT $LN12@Remove
$LN11@Remove:
	mov	BYTE PTR tv76[ebp], 0
$LN12@Remove:
	mov	al, BYTE PTR tv76[ebp]
	jmp	$LN9@Remove
$LN6@Remove:

; 210  : 		}
; 211  : 		SLNode<T> *cur;
; 212  : 		for (cur = HeadNode; cur->Next() && cur->Next()->Data() != element; cur=cur->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN5@Remove
$LN4@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$[ebp], eax
$LN5@Remove:
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	SHORT $LN3@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	je	SHORT $LN3@Remove

; 213  : 		{
; 214  : 		}

	jmp	SHORT $LN4@Remove
$LN3@Remove:

; 215  : 		if (cur->Next() != NULL && cur->Next()->Data() == element)

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	test	eax, eax
	je	$LN2@Remove
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, eax
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	cmp	eax, DWORD PTR _element$[ebp]
	jne	SHORT $LN2@Remove

; 216  : 		{
; 217  : 			SLNode<T> *temp	= cur->Next();

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _temp$2[ebp], eax

; 218  : 			cur->Set_Next(temp->Next());

	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 219  : 			if (temp == TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Remove

; 220  : 			{
; 221  : 				TailNode = cur;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Remove:

; 222  : 			}
; 223  : 			delete temp;

	push	OFFSET ??_C@_0EH@CGJBMJBC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	223					; 000000dfH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@Remove
	xor	ecx, ecx
	jne	SHORT $LN13@Remove
	push	223					; 000000dfH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Remove:
	jmp	SHORT $LN15@Remove
$LN14@Remove:
	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN15@Remove:

; 224  : 			return true;

	mov	al, 1
	jmp	SHORT $LN9@Remove
$LN2@Remove:

; 225  : 		}
; 226  : 		return false;

	xor	al, al
$LN9@Remove:

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPBUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
_data$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Tai

; 193  : 		{
; 194  : 			return ((T *)NULL);

	xor	eax, eax
	jmp	SHORT $LN2@Remove_Tai
$LN1@Remove_Tai:

; 195  : 		}
; 196  : 		T* data = TailNode->Data();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	mov	DWORD PTR _data$[ebp], eax

; 197  : 		return (Remove(data) ? data : (T*)NULL);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Remove_Tai
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN5@Remove_Tai
$LN4@Remove_Tai:
	mov	DWORD PTR tv76[ebp], 0
$LN5@Remove_Tai:
	mov	eax, DWORD PTR tv76[ebp]
$LN2@Remove_Tai:

; 198  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_data$ = -12						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Remove_Hea

; 175  : 		{
; 176  : 			return ((T* )NULL);

	xor	eax, eax
	jmp	$LN3@Remove_Hea
$LN2@Remove_Hea:

; 177  : 		}
; 178  : 		SLNode<T> *temp = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 179  : 		HeadNode = HeadNode->Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 180  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Remove_Hea

; 181  : 		{
; 182  : 			TailNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@Remove_Hea:

; 183  : 		}
; 184  : 		T *data = temp->Data();

	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	mov	DWORD PTR _data$[ebp], eax

; 185  : 		delete temp;

	push	OFFSET ??_C@_0EM@PPENJFKC@SList?$DMstruct?5MultiKeyHookScriptI@
	push	185					; 000000b9H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Remove_Hea
	xor	ecx, ecx
	jne	SHORT $LN5@Remove_Hea
	push	185					; 000000b9H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Remove_Hea:
	jmp	SHORT $LN7@Remove_Hea
$LN6@Remove_Hea:
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<GenericSLNode,256>::operator delete
	add	esp, 4
$LN7@Remove_Hea:

; 186  : 		return data;

	mov	eax, DWORD PTR _data$[ebp]
$LN3@Remove_Hea:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
_cur$1 = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail, COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@Add_Tail

; 161  : 		{
; 162  : 			return false;

	xor	al, al
	jmp	SHORT $LN5@Add_Tail
$LN4@Add_Tail:

; 163  : 		}
; 164  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next()) 

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$1[ebp], ecx
	jmp	SHORT $LN3@Add_Tail
$LN2@Add_Tail:
	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$1[ebp], eax
$LN3@Add_Tail:
	cmp	DWORD PTR _cur$1[ebp], 0
	je	SHORT $LN1@Add_Tail

; 165  : 		{
; 166  : 			Add_Tail(cur->Data());

	mov	ecx, DWORD PTR _cur$1[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 167  : 		}

	jmp	SHORT $LN2@Add_Tail
$LN1@Add_Tail:

; 168  : 		return true;

	mov	al, 1
$LN5@Add_Tail:

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		if (data == NULL)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN3@Add_Tail

; 141  : 		{
; 142  : 			return false;

	xor	al, al
	jmp	$LN4@Add_Tail
$LN3@Add_Tail:

; 143  : 		}
; 144  : 		SLNode<T> *temp = new SLNode<T> (data);

	push	OFFSET ??_C@_0EJ@OIGECPDF@SList?$DMstruct?5MultiKeyHookScriptI@
	push	144					; 00000090H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@Add_Tail
	xor	ecx, ecx
	jne	SHORT $LN6@Add_Tail
	push	144					; 00000090H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Add_Tail:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN10@Add_Tail
$LN9@Add_Tail:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@Add_Tail
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN8@Add_Tail
$LN7@Add_Tail:
	mov	DWORD PTR tv82[ebp], 0
$LN8@Add_Tail:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN10@Add_Tail:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 145  : 		if (HeadNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Add_Tail

; 146  : 		{
; 147  : 			HeadNode = TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx+4], eax

; 148  : 		}
; 149  : 		else

	jmp	SHORT $LN1@Add_Tail
$LN2@Add_Tail:

; 150  : 		{
; 151  : 			TailNode->Set_Next(temp);

	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 152  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Tail:

; 153  : 		}
; 154  : 		return true;

	mov	al, 1
$LN4@Add_Tail:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z
_TEXT	SEGMENT
tv90 = -92						; size = 4
tv92 = -88						; size = 4
$T1 = -84						; size = 4
_temp$2 = -16						; size = 4
_cur$3 = -12						; size = 4
_addpoint$ = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		if (list.HeadNode == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@Add_Head

; 115  : 		{
; 116  : 			return false;

	xor	al, al
	jmp	$LN7@Add_Head
$LN6@Add_Head:

; 117  : 		}
; 118  : 		SLNode<T> *addpoint = NULL;

	mov	DWORD PTR _addpoint$[ebp], 0

; 119  : 		for (SLNode<T> *cur = list.HeadNode; cur; cur = cur->Next())

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$3[ebp], ecx
	jmp	SHORT $LN5@Add_Head
$LN4@Add_Head:
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	mov	DWORD PTR _cur$3[ebp], eax
$LN5@Add_Head:
	cmp	DWORD PTR _cur$3[ebp], 0
	je	$LN3@Add_Head

; 120  : 		{
; 121  : 			if (addpoint)

	cmp	DWORD PTR _addpoint$[ebp], 0
	je	$LN2@Add_Head

; 122  : 			{
; 123  : 				SLNode<T> *temp = new SLNode<T>(cur->Data());

	push	OFFSET ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
	push	123					; 0000007bH
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN12@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN9@Add_Head
	push	123					; 0000007bH
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Add_Head:
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN13@Add_Head
$LN12@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN10@Add_Head
	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN11@Add_Head
$LN10@Add_Head:
	mov	DWORD PTR tv90[ebp], 0
$LN11@Add_Head:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv92[ebp], eax
$LN13@Add_Head:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _temp$2[ebp], ecx

; 124  : 				temp->Set_Next(addpoint->Next());

	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAV1@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Next
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 125  : 				addpoint->Set_Next(temp);

	mov	eax, DWORD PTR _temp$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _addpoint$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 126  : 				addpoint = temp;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR _addpoint$[ebp], eax

; 127  : 			}
; 128  : 			else

	jmp	SHORT $LN1@Add_Head
$LN2@Add_Head:

; 129  : 			{
; 130  : 				Add_Head(cur->Data());

	mov	ecx, DWORD PTR _cur$3[ebp]
	call	?Data@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QBEPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@XZ ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 131  : 				addpoint = HeadNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _addpoint$[ebp], ecx
$LN1@Add_Head:

; 132  : 			}
; 133  : 		}

	jmp	$LN4@Add_Head
$LN3@Add_Head:

; 134  : 		return true;

	mov	al, 1
$LN7@Add_Head:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NAAV1@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z
_TEXT	SEGMENT
tv82 = -84						; size = 4
tv84 = -80						; size = 4
$T1 = -76						; size = 4
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head, COMDAT
; _this$ = ecx

; 96   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		if (!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN2@Add_Head

; 98   : 		{
; 99   : 			return false;

	xor	al, al
	jmp	$LN3@Add_Head
$LN2@Add_Head:

; 100  : 		}
; 101  : 		SLNode<T> *temp	= new SLNode<T>(data);

	push	OFFSET ??_C@_0EJ@ENMBJFB@SList?$DMstruct?5MultiKeyHookScriptI@
	push	101					; 00000065H
	push	OFFSET ??_C@_0DB@DFBFLIIO@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Add_Head
	xor	ecx, ecx
	jne	SHORT $LN5@Add_Head
	push	101					; 00000065H
	push	OFFSET ??_C@_1GC@LJHGOLFN@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Add_Head:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN9@Add_Head
$LN8@Add_Head:
	push	0
	push	0
	push	0
	push	8
	call	??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<GenericSLNode,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Add_Head
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@IAE@PAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN7@Add_Head
$LN6@Add_Head:
	mov	DWORD PTR tv82[ebp], 0
$LN7@Add_Head:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN9@Add_Head:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 102  : 		temp->Set_Next(HeadNode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _temp$[ebp]
	call	?Set_Next@?$SLNode@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAEXPAV1@@Z ; SLNode<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Set_Next

; 103  : 		HeadNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 104  : 		if (!TailNode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@Add_Head

; 105  : 		{
; 106  : 			TailNode = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Add_Head:

; 107  : 		}
; 108  : 		return true;

	mov	al, 1
$LN3@Add_Head:

; 109  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Head@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE_NPAUKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@Z ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Add_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 90   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@

; 91   : 		Remove_All();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove_All@?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAEXXZ ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::Remove_All

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@UAE@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::~SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ PROC ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>, COMDAT
; _this$ = ecx

; 86   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 87   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SList@UKeyHookWrapperStruct@MultiKeyHookScriptImpClass@@@@QAE@XZ ENDP ; SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>::SList<MultiKeyHookScriptImpClass::KeyHookWrapperStruct>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EJFW_Key_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EJFW_Key_Hook_Base@@UAEPAXI@Z PROC			; JFW_Key_Hook_Base::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1JFW_Key_Hook_Base@@UAE@XZ	; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EJFW_Key_Hook_Base@@UAEPAXI@Z ENDP			; JFW_Key_Hook_Base::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GJFW_Key_Hook_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJFW_Key_Hook_Base@@UAEPAXI@Z PROC			; JFW_Key_Hook_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1JFW_Key_Hook_Base@@UAE@XZ		; JFW_Key_Hook_Base::~JFW_Key_Hook_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJFW_Key_Hook_Base@@UAEPAXI@Z ENDP			; JFW_Key_Hook_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z PROC		; JFW_Key_Hook_Base::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptImpClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4JFW_Key_Hook_Base@@QAEAAV0@ABV0@@Z ENDP		; JFW_Key_Hook_Base::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0JFW_Key_Hook_Base@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0JFW_Key_Hook_Base@@QAE@ABV0@@Z PROC			; JFW_Key_Hook_Base::JFW_Key_Hook_Base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Key_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0JFW_Key_Hook_Base@@QAE@ABV0@@Z ENDP			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_tt.h
;	COMDAT ??0JFW_Key_Hook_Base@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0JFW_Key_Hook_Base@@QAE@XZ PROC			; JFW_Key_Hook_Base::JFW_Key_Hook_Base, COMDAT
; _this$ = ecx

; 491  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptImpClass@@QAE@XZ		; ScriptImpClass::ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7JFW_Key_Hook_Base@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 492  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0JFW_Key_Hook_Base@@QAE@XZ ENDP			; JFW_Key_Hook_Base::JFW_Key_Hook_Base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\slist.h
;	COMDAT ??0GenericSLNode@@IAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0GenericSLNode@@IAE@PAX@Z PROC			; GenericSLNode::GenericSLNode, COMDAT
; _this$ = ecx

; 37   : 	GenericSLNode(void *obj)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 		NodeData = obj;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 40   : 		NodeNext = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 41   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0GenericSLNode@@IAE@PAX@Z ENDP			; GenericSLNode::GenericSLNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z PROC ; AutoPoolClass<GenericSLNode,256>::operator delete, COMDAT

; 1485 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1486 : 		if (object)

	cmp	DWORD PTR _object$[ebp], 0
	je	SHORT $LN2@operator

; 1487 : 			objectPoolClass(T, nAlign).Free_Object_Memory(*(T*)object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
	mov	ecx, eax
	call	?Free_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEXAAVGenericSLNode@@@Z ; ObjectPoolClass<GenericSLNode,256>::Free_Object_Memory
$LN2@operator:

; 1488 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAXPAX@Z ENDP ; AutoPoolClass<GenericSLNode,256>::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_file$ = 12						; size = 4
_line$ = 16						; size = 4
_function$ = 20						; size = 4
??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z PROC ; AutoPoolClass<GenericSLNode,256>::operator new, COMDAT

; 1479 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN3@operator:

; 1480 : 		TT_ASSERT(size == sizeof(T));

	xor	eax, eax
	jne	SHORT $LN3@operator
	cmp	DWORD PTR _size$[ebp], 8
	je	SHORT $LN1@operator
	int	3
$LN1@operator:

; 1481 : 		return (void*)objectPoolClass(T, nAlign).Allocate_Object_Memory();

	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<GenericSLNode,256> >::getInstance
	mov	ecx, eax
	call	?Allocate_Object_Memory@?$ObjectPoolClass@VGenericSLNode@@$0BAA@@@QAEPAVGenericSLNode@@XZ ; ObjectPoolClass<GenericSLNode,256>::Allocate_Object_Memory

; 1482 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2?$AutoPoolClass@VGenericSLNode@@$0BAA@@@SAPAXIPBDI0@Z ENDP ; AutoPoolClass<GenericSLNode,256>::operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\playerdataclass.h
;	COMDAT ?Get_Score@PlayerDataClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Score@PlayerDataClass@@QBEMXZ PROC			; PlayerDataClass::Get_Score, COMDAT
; _this$ = ecx

; 95   : 	float Get_Score() const {return Score;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??B?$SafeDataClass@M@@QBEMXZ		; SafeDataClass<float>::operator float
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Score@PlayerDataClass@@QBEMXZ ENDP			; PlayerDataClass::Get_Score
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\smartgameobj.h
;	COMDAT ?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ PROC	; SmartGameObj::Get_Action, COMDAT
; _this$ = ecx

; 70   : 	ActionClass			*Get_Action( void )						{ return &Action; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2124				; 0000084cH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Action@SmartGameObj@@QAEPAVActionClass@@XZ ENDP	; SmartGameObj::Get_Action
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Set_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?Set_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEXH@Z PROC ; PhysicalGameObj::Set_Radar_Blip_Shape_Type, COMDAT
; _this$ = ecx

; 89   : 	void				Set_Radar_Blip_Shape_Type( int type )			{ RadarBlipShapeType = type; Set_Object_Dirty_Bit(NetworkObjectClass::BIT_RARE,true);}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+1948], ecx
	push	1
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEXH@Z ENDP ; PhysicalGameObj::Set_Radar_Blip_Shape_Type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Get_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEHXZ PROC	; PhysicalGameObj::Get_Radar_Blip_Shape_Type, COMDAT
; _this$ = ecx

; 88   : 	int				Get_Radar_Blip_Shape_Type( void )				{ return RadarBlipShapeType; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1948]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Radar_Blip_Shape_Type@PhysicalGameObj@@QAEHXZ ENDP	; PhysicalGameObj::Get_Radar_Blip_Shape_Type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ PROC ; PhysicalGameObj::Peek_Model, COMDAT
; _this$ = ecx

; 50   : 	inline RenderObjClass	*	Peek_Model( void ) { return Peek_Physical_Object()->Peek_Model(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ ; PhysClass::Peek_Model
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Model@PhysicalGameObj@@QAEPAVRenderObjClass@@XZ ENDP ; PhysicalGameObj::Peek_Model
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
_Return$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ PROC	; PhysicalGameObj::Get_Position, COMDAT
; _this$ = ecx

; 47   : 	SCRIPTS_API Vector3 Get_Position() { Vector3 Return; Peek_Physical_Object()->Get_Position(&Return); return Return; }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR _Return$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	lea	eax, DWORD PTR _Return$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ; PhysicalGameObj::Peek_Physical_Object
	mov	ecx, eax
	call	?Get_Position@PhysClass@@QBEXPAVVector3@@@Z ; PhysClass::Get_Position
	lea	eax, DWORD PTR _Return$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Position@PhysicalGameObj@@QAE?AVVector3@@XZ ENDP	; PhysicalGameObj::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physicalgameobj.h
;	COMDAT ?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ PROC ; PhysicalGameObj::Peek_Physical_Object, COMDAT
; _this$ = ecx

; 40   : 	inline PhysClass *	Peek_Physical_Object( void ) const { return PhysObj; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1908]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Physical_Object@PhysicalGameObj@@QBEPAVPhysClass@@XZ ENDP ; PhysicalGameObj::Peek_Physical_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physclass.h
;	COMDAT ?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ PROC	; PhysClass::Peek_Model, COMDAT
; _this$ = ecx

; 92   : 	RenderObjClass *	Peek_Model(void) { return Model; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Model@PhysClass@@QAEPAVRenderObjClass@@XZ ENDP	; PhysClass::Peek_Model
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\physclass.h
;	COMDAT ?Get_Position@PhysClass@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_pos$ = 8						; size = 4
?Get_Position@PhysClass@@QBEXPAVVector3@@@Z PROC	; PhysClass::Get_Position, COMDAT
; _this$ = ecx

; 73   : 	void								Get_Position(Vector3 * set_pos) const	{ Get_Transform().Get_Translation(set_pos); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _set_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	ecx, eax
	call	?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ; Matrix3D::Get_Translation
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Position@PhysClass@@QBEXPAVVector3@@@Z ENDP	; PhysClass::Get_Position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\renderobjclass.h
;	COMDAT ?Get_Transform@RenderObjClass@@QBEABVMatrix3D@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Transform@RenderObjClass@@QBEABVMatrix3D@@XZ PROC	; RenderObjClass::Get_Transform, COMDAT
; _this$ = ecx

; 297  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 298  : 	Validate_Transform();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax

; 299  : 	return Transform;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH

; 300  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Transform@RenderObjClass@@QBEABVMatrix3D@@XZ ENDP	; RenderObjClass::Get_Transform
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4LineSegClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4LineSegClass@@QAEAAV0@ABV0@@Z PROC			; LineSegClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4LineSegClass@@QAEAAV0@ABV0@@Z ENDP			; LineSegClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0LineSegClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0LineSegClass@@QAE@ABV0@@Z PROC			; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LineSegClass@@QAE@ABV0@@Z ENDP			; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?recalculate@LineSegClass@@IAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
?recalculate@LineSegClass@@IAEXXZ PROC			; LineSegClass::recalculate, COMDAT
; _this$ = ecx

; 81   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 		DP = P1 - P0;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??G@YA?AVVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 83   : 		Dir = DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 84   : 		Dir.Normalize();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Normalize@Vector3@@QAEXXZ		; Vector3::Normalize

; 85   : 		Length = DP.Length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Length@Vector3@@QBEMXZ			; Vector3::Length
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+48]

; 86   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?recalculate@LineSegClass@@IAEXXZ ENDP			; LineSegClass::recalculate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 12
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_set$ = 12						; size = 4
?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z PROC	; LineSegClass::Compute_Point, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		Vector3::Add(P0,t*DP,set);

	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 76   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Compute_Point@LineSegClass@@QBEXMPAVVector3@@@Z ENDP	; LineSegClass::Compute_Point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_Length@LineSegClass@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Length@LineSegClass@@QBEMXZ PROC			; LineSegClass::Get_Length, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return Length;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@LineSegClass@@QBEMXZ ENDP			; LineSegClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_Dir@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Dir@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_Dir, COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return Dir;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Dir@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_Dir
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_DP@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_DP@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_DP, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		return DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H

; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_DP@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_DP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_P1@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_P1@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_P1, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		return P1;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 60   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_P1@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_P1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Get_P0@LineSegClass@@QBEABVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_P0@LineSegClass@@QBEABVVector3@@XZ PROC		; LineSegClass::Get_P0, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return P0;

	mov	eax, DWORD PTR _this$[ebp]

; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_P0@LineSegClass@@QBEABVVector3@@XZ ENDP		; LineSegClass::Get_P0
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Set@LineSegClass@@QAEXABVVector3@@0M@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_dir$ = 12						; size = 4
_l$ = 16						; size = 4
?Set@LineSegClass@@QAEXABVVector3@@0M@Z PROC		; LineSegClass::Set, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		DP = dir * l;

	push	ecx
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 46   : 		P0 = p0;

	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 47   : 		P1 = p0 + DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _p0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??H@YA?AVVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 48   : 		Dir = dir;

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 49   : 		Length = l;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@LineSegClass@@QAEXABVVector3@@0M@Z ENDP		; LineSegClass::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ?Set@LineSegClass@@QAEXABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
?Set@LineSegClass@@QAEXABVVector3@@0@Z PROC		; LineSegClass::Set, COMDAT
; _this$ = ecx

; 38   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		P0 = p0;

	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 		P1 = p1;

	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 41   : 		recalculate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?recalculate@LineSegClass@@IAEXXZ	; LineSegClass::recalculate

; 42   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@LineSegClass@@QAEXABVVector3@@0@Z ENDP		; LineSegClass::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
_tm$ = 12						; size = 4
??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 33   : 	LineSegClass(const LineSegClass & that,const Matrix3D & tm)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 34   : 	{
; 35   : 		Set(that,tm);

	mov	eax, DWORD PTR _tm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _that$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@LineSegClass@@QAEXABV1@ABVMatrix3D@@@Z ; LineSegClass::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0LineSegClass@@QAE@ABV0@ABVMatrix3D@@@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABVVector3@@0M@Z
_TEXT	SEGMENT
$T1 = -92						; size = 12
$T2 = -80						; size = 12
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_dir$ = 12						; size = 4
_l$ = 16						; size = 4
??0LineSegClass@@QAE@ABVVector3@@0M@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 29   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _l$[ebp]
	movss	DWORD PTR [eax+48], xmm0

; 30   : 		DP = Dir * Length;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??D@YA?AVVector3@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 31   : 		P1 = P0 + DP;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??H@YA?AVVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0LineSegClass@@QAE@ABVVector3@@0M@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@ABVVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
??0LineSegClass@@QAE@ABVVector3@@0@Z PROC		; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 25   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _p0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 26   : 		recalculate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?recalculate@LineSegClass@@IAEXXZ	; LineSegClass::recalculate

; 27   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0LineSegClass@@QAE@ABVVector3@@0@Z ENDP		; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\linesegclass.h
;	COMDAT ??0LineSegClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LineSegClass@@QAE@XZ PROC				; LineSegClass::LineSegClass, COMDAT
; _this$ = ecx

; 21   : 	LineSegClass(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 22   : 	{
; 23   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0LineSegClass@@QAE@XZ ENDP				; LineSegClass::LineSegClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??B?$SafeDataClass@M@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$SafeDataClass@M@@QBEMXZ PROC			; SafeDataClass<float>::operator float, COMDAT
; _this$ = ecx

; 1236 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1237 : 	return (*this)();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$SafeDataClass@M@@QBEAAMXZ		; SafeDataClass<float>::operator()
	fld	DWORD PTR [eax]

; 1238 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$SafeDataClass@M@@QBEMXZ ENDP			; SafeDataClass<float>::operator float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??R?$SafeDataClass@M@@QBEAAMXZ
_TEXT	SEGMENT
_data_ptr$ = -8						; size = 4
_this$ = -4						; size = 4
??R?$SafeDataClass@M@@QBEAAMXZ PROC			; SafeDataClass<float>::operator(), COMDAT
; _this$ = ecx

; 1221 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1222 : 	T *data_ptr = NULL;

	mov	DWORD PTR _data_ptr$[ebp], 0

; 1223 : 	if (Handle.Is_Valid())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Valid@DataSafeHandleClass@@QBE_NXZ	; DataSafeHandleClass::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@operator

; 1224 : 	{
; 1225 : 		DataSafeClass<T>::Get(Handle, data_ptr);

	lea	eax, DWORD PTR _data_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Get@?$DataSafeClass@M@@SA_NVDataSafeHandleClass@@AAPAM@Z ; DataSafeClass<float>::Get
	add	esp, 8

; 1226 : 		if (data_ptr)

	cmp	DWORD PTR _data_ptr$[ebp], 0
	je	SHORT $LN2@operator

; 1227 : 		{
; 1228 : 			return *data_ptr;

	mov	eax, DWORD PTR _data_ptr$[ebp]
	jmp	SHORT $LN3@operator
$LN2@operator:

; 1229 : 		}
; 1230 : 	}
; 1231 : 	static T oh_dear;
; 1232 : 	return oh_dear;

	mov	eax, OFFSET ?oh_dear@?7???R?$SafeDataClass@M@@QBEAAMXZ@4MA ; `SafeDataClass<float>::operator()'::`8'::oh_dear
$LN3@operator:

; 1233 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??R?$SafeDataClass@M@@QBEAAMXZ ENDP			; SafeDataClass<float>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\basegameobj.h
;	COMDAT ?Get_ID@BaseGameObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@BaseGameObj@@QBEHXZ PROC			; BaseGameObj::Get_ID, COMDAT
; _this$ = ecx

; 51   :     int                         Get_ID() const { return Get_Network_ID(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Get_Network_ID@NetworkObjectClass@@QBEHXZ ; NetworkObjectClass::Get_Network_ID
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@BaseGameObj@@QBEHXZ ENDP			; BaseGameObj::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referenceableclass.h
;	COMDAT ?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ PROC ; ReferenceableClass<ScriptableGameObj>::Get_Data, COMDAT
; _this$ = ecx

; 30   : 	T * Get_Data( void ) const	{ return ReferenceData; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ENDP ; ReferenceableClass<ScriptableGameObj>::Get_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EReferencerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EReferencerClass@@UAEPAXI@Z PROC			; ReferencerClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ReferencerClass@@UAE@XZ	; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EReferencerClass@@UAEPAXI@Z ENDP			; ReferencerClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GReferencerClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GReferencerClass@@UAEPAXI@Z PROC			; ReferencerClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ReferencerClass@@UAE@XZ		; ReferencerClass::~ReferencerClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GReferencerClass@@UAEPAXI@Z ENDP			; ReferencerClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ReferencerClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ReferencerClass@@QAE@ABV0@@Z PROC			; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ReferencerClass@@QAE@ABV0@@Z ENDP			; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z PROC ; ReferencerClass::Set_Ptr, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 		*this = object;

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 63   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Ptr@ReferencerClass@@QAEXPAVScriptableGameObj@@@Z ENDP ; ReferencerClass::Set_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ PROC ; ReferencerClass::Get_Ptr, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return ReferenceTarget ? ReferenceTarget->Get_Data() : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Get_Ptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Get_Data@?$ReferenceableClass@VScriptableGameObj@@@@IBEPAVScriptableGameObj@@XZ ; ReferenceableClass<ScriptableGameObj>::Get_Data
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@Get_Ptr
$LN3@Get_Ptr:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Get_Ptr:
	mov	eax, DWORD PTR tv69[ebp]

; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ENDP ; ReferencerClass::Get_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z PROC	; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 49   : 		*this = object;

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ReferencerClass@@QAEAAV0@PAVScriptableGameObj@@@Z ; ReferencerClass::operator=

; 50   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ReferencerClass@@QAE@PAVScriptableGameObj@@@Z ENDP	; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??0ReferencerClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ReferencerClass@@QAE@XZ PROC				; ReferencerClass::ReferencerClass, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ReferencerClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ReferencerClass@@QAE@XZ ENDP				; ReferencerClass::ReferencerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\referencerclass.h
;	COMDAT ??CReferencerClass@@QAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??CReferencerClass@@QAEPAVScriptableGameObj@@XZ PROC	; ReferencerClass::operator->, COMDAT
; _this$ = ecx

; 37   : 	inline ScriptableGameObj* operator ->() { return Get_Ptr(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Ptr@ReferencerClass@@QBEPAVScriptableGameObj@@XZ ; ReferencerClass::Get_Ptr
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??CReferencerClass@@QAEPAVScriptableGameObj@@XZ ENDP	; ReferencerClass::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1PostLoadableClass@@UAE@XZ	; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4PostLoadableClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z PROC		; PostLoadableClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PostLoadableClass@@QAEAAV0@ABV0@@Z ENDP		; PostLoadableClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0PostLoadableClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0PostLoadableClass@@QAE@ABV0@@Z PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0PostLoadableClass@@QAE@ABV0@@Z ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_onoff$ = 8						; size = 1
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z PROC ; PostLoadableClass::Set_Post_Load_Registered, COMDAT
; _this$ = ecx

; 22   : 	void									Set_Post_Load_Registered(bool onoff)	{ IsPostLoadRegistered = onoff; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _onoff$[ebp]
	mov	BYTE PTR [eax+4], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Post_Load_Registered@PostLoadableClass@@QAEX_N@Z ENDP ; PostLoadableClass::Set_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ PROC ; PostLoadableClass::Is_Post_Load_Registered, COMDAT
; _this$ = ecx

; 21   : 	bool									Is_Post_Load_Registered(void) const				{ return IsPostLoadRegistered; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Post_Load_Registered@PostLoadableClass@@QBE_NXZ ENDP ; PostLoadableClass::Is_Post_Load_Registered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?On_Post_Load@PostLoadableClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?On_Post_Load@PostLoadableClass@@UAEXXZ PROC		; PostLoadableClass::On_Post_Load, COMDAT
; _this$ = ecx

; 20   : 	virtual void						On_Post_Load (void)							{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?On_Post_Load@PostLoadableClass@@UAEXXZ ENDP		; PostLoadableClass::On_Post_Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??1PostLoadableClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PostLoadableClass@@UAE@XZ PROC			; PostLoadableClass::~PostLoadableClass, COMDAT
; _this$ = ecx

; 19   : 	virtual ~PostLoadableClass(void)													{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1PostLoadableClass@@UAE@XZ ENDP			; PostLoadableClass::~PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??0PostLoadableClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PostLoadableClass@@QAE@XZ PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx

; 18   : 	PostLoadableClass(void) : IsPostLoadRegistered(false)						{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PostLoadableClass@@QAE@XZ ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z
_TEXT	SEGMENT
_data_entry_ptr$ = -8					; size = 4
_entry_ptr$ = -4					; size = 4
_handle$ = 8						; size = 4
_item$ = 12						; size = 4
?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z PROC ; DataSafeClass<int>::Get, COMDAT

; 561  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 562  : 	DataSafeEntryClass *entry_ptr = Get_Entry(handle);

	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	?Get_Entry@GenericDataSafeClass@@SAPAVDataSafeEntryClass@@VDataSafeHandleClass@@@Z ; GenericDataSafeClass::Get_Entry
	add	esp, 4
	mov	DWORD PTR _entry_ptr$[ebp], eax

; 563  : 	if (entry_ptr == NULL)

	cmp	DWORD PTR _entry_ptr$[ebp], 0
	jne	SHORT $LN2@Get

; 564  : 	{
; 565  : 		return(false);

	xor	al, al
	jmp	$LN3@Get
$LN2@Get:

; 566  : 	}
; 567  : 	DataSafeEntryDataClass<T> *data_entry_ptr = (DataSafeEntryDataClass<T>*) entry_ptr;

	mov	eax, DWORD PTR _entry_ptr$[ebp]
	mov	DWORD PTR _data_entry_ptr$[ebp], eax

; 568  : 	Mem_Copy_Decrypt(&(ReturnList[ReturnIndex][0]), &data_entry_ptr->Data, sizeof(T), false);

	push	0
	push	4
	mov	eax, DWORD PTR _data_entry_ptr$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR ?ReturnList@?$DataSafeClass@H@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A ; DataSafeClass<int>::ReturnList
	call	??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
	mov	ecx, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	call	??B?$RefArray@D$03@@QAEPADXZ		; RefArray<char,4>::operator char *
	mov	ecx, 1
	imul	ecx, 0
	add	eax, ecx
	push	eax
	call	?Mem_Copy_Decrypt@GenericDataSafeClass@@KAXPAX0H_N@Z ; GenericDataSafeClass::Mem_Copy_Decrypt
	add	esp, 16					; 00000010H

; 569  : 	item = (T*)(&(ReturnList[ReturnIndex][0]));

	mov	ecx, DWORD PTR ?ReturnList@?$DataSafeClass@H@@0AAV?$RefArray@V?$RefArray@D$03@@$07@@A ; DataSafeClass<int>::ReturnList
	call	??B?$RefArray@V?$RefArray@D$03@@$07@@QAEPAV?$RefArray@D$03@@XZ ; RefArray<RefArray<char,4>,8>::operator RefArray<char,4> *
	mov	ecx, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	call	??B?$RefArray@D$03@@QAEPADXZ		; RefArray<char,4>::operator char *
	mov	ecx, 1
	imul	ecx, 0
	add	eax, ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx], eax

; 570  : 	ReturnIndex++;

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	DWORD PTR [edx], ecx

; 571  : 	if (ReturnIndex >= MAX_OBJECT_COPIES)

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	cmp	DWORD PTR [eax], 8
	jl	SHORT $LN1@Get

; 572  : 	{
; 573  : 		ReturnIndex = 0;

	mov	eax, DWORD PTR ?ReturnIndex@?$DataSafeClass@H@@0AAHA ; DataSafeClass<int>::ReturnIndex
	mov	DWORD PTR [eax], 0
$LN1@Get:

; 574  : 	}
; 575  : 	Shuffle();

	push	0
	call	?Shuffle@GenericDataSafeClass@@KAX_N@Z	; GenericDataSafeClass::Shuffle
	add	esp, 4

; 576  : 	Security_Check();

	call	?Security_Check@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Check

; 577  : 	return(true);

	mov	al, 1
$LN3@Get:

; 578  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ENDP ; DataSafeClass<int>::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ PROC ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 46   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ENDP ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Security_Fault@GenericDataSafeClass@@KAXXZ
_TEXT	SEGMENT
?Security_Fault@GenericDataSafeClass@@KAXXZ PROC	; GenericDataSafeClass::Security_Fault, COMDAT

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 300  : 	CRCErrors++;

	mov	eax, DWORD PTR ?CRCErrors@GenericDataSafeClass@@1AAHA ; GenericDataSafeClass::CRCErrors
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR ?CRCErrors@GenericDataSafeClass@@1AAHA ; GenericDataSafeClass::CRCErrors
	mov	DWORD PTR [edx], ecx

; 301  : 	Say_Security_Fault();

	call	?Say_Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Say_Security_Fault

; 302  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Security_Fault@GenericDataSafeClass@@KAXXZ ENDP	; GenericDataSafeClass::Security_Fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Security_Check@GenericDataSafeClass@@KAXXZ
_TEXT	SEGMENT
_got$1 = -38						; size = 1
_got$2 = -37						; size = 1
_val$3 = -36						; size = 4
_z$4 = -32						; size = 4
_j$5 = -28						; size = 4
_data_size$6 = -24					; size = 4
_data$7 = -20						; size = 4
_entry_ptr$8 = -16					; size = 4
_i$9 = -12						; size = 4
_checkey$10 = -8					; size = 4
_time$ = -4						; size = 4
?Security_Check@GenericDataSafeClass@@KAXXZ PROC	; GenericDataSafeClass::Security_Check, COMDAT

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 306  : 	static bool _checking = false;
; 307  : 	static unsigned long _calls = 0;
; 308  : 	_calls++;

	mov	eax, DWORD PTR ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA ; `GenericDataSafeClass::Security_Check'::`2'::_calls
	add	eax, 1
	mov	DWORD PTR ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA, eax ; `GenericDataSafeClass::Security_Check'::`2'::_calls

; 309  : 	if (_calls < DATASAFE_TIME_CHECK_CALLS)

	cmp	DWORD PTR ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA, 100000 ; `GenericDataSafeClass::Security_Check'::`2'::_calls, 000186a0H
	jae	SHORT $LN25@Security_C

; 310  : 	{
; 311  : 		return;

	jmp	$LN26@Security_C
$LN25@Security_C:

; 312  : 	}
; 313  : 	_calls = 0;

	mov	DWORD PTR ?_calls@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4KA, 0 ; `GenericDataSafeClass::Security_Check'::`2'::_calls

; 314  : 	if (HandleKey - SimpleKey == HandleKey)

	mov	eax, DWORD PTR ?HandleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::HandleKey
	mov	ecx, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?HandleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::HandleKey
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN24@Security_C

; 315  : 	{
; 316  : 		Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN24@Security_C:

; 317  : 	}
; 318  : 	if (SimpleKey - HandleKey == SimpleKey)

	mov	eax, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	mov	ecx, DWORD PTR ?HandleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::HandleKey
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN23@Security_C

; 319  : 	{
; 320  : 		Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN23@Security_C:

; 321  : 	}
; 322  : 	unsigned long time = TIMEGETTIME();

	mov	ecx, DWORD PTR ?SystemTime@SysTimeClass@@2AAV1@A ; SysTimeClass::SystemTime
	call	?Get@SysTimeClass@@QAEIXZ		; SysTimeClass::Get
	mov	DWORD PTR _time$[ebp], eax

; 323  : 	if (time < SecurityCheckDelay || (time | SecurityCheckDelay) == 0 || (time - SecurityCheckDelay) > SECURITY_CHECK_TIME)

	mov	eax, DWORD PTR ?SecurityCheckDelay@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SecurityCheckDelay
	mov	ecx, DWORD PTR _time$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN21@Security_C
	mov	eax, DWORD PTR ?SecurityCheckDelay@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SecurityCheckDelay
	mov	ecx, DWORD PTR _time$[ebp]
	or	ecx, DWORD PTR [eax]
	je	SHORT $LN21@Security_C
	mov	eax, DWORD PTR ?SecurityCheckDelay@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SecurityCheckDelay
	mov	ecx, DWORD PTR _time$[ebp]
	sub	ecx, DWORD PTR [eax]
	cmp	ecx, 15000				; 00003a98H
	jbe	$LN26@Security_C
$LN21@Security_C:

; 324  : 	{
; 325  : 		if (!_checking)

	movzx	eax, BYTE PTR ?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA ; `GenericDataSafeClass::Security_Check'::`2'::_checking
	test	eax, eax
	jne	$LN26@Security_C

; 326  : 		{
; 327  : 			_checking = true;

	mov	BYTE PTR ?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA, 1 ; `GenericDataSafeClass::Security_Check'::`2'::_checking

; 328  : 			SecurityCheckDelay = time;

	mov	eax, DWORD PTR ?SecurityCheckDelay@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SecurityCheckDelay
	mov	ecx, DWORD PTR _time$[ebp]
	mov	DWORD PTR [eax], ecx

; 329  : 			unsigned long checkey = ~SimpleKey;

	mov	eax, DWORD PTR ?SimpleKey@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::SimpleKey
	mov	ecx, DWORD PTR [eax]
	not	ecx
	mov	DWORD PTR _checkey$10[ebp], ecx

; 330  : 			for (int i=0 ; i<NumLists ; i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN19@Security_C
$LN18@Security_C:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN19@Security_C:
	mov	eax, DWORD PTR ?NumLists@GenericDataSafeClass@@1AAHA ; GenericDataSafeClass::NumLists
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN17@Security_C

; 331  : 			{
; 332  : 				if (Safe[i] != NULL && Safe[i]->EntryCount > 0)

	mov	ecx, DWORD PTR ?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A ; GenericDataSafeClass::Safe
	call	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	$LN16@Security_C
	mov	ecx, DWORD PTR ?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A ; GenericDataSafeClass::Safe
	call	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	DWORD PTR [edx+4], 0
	jle	$LN16@Security_C

; 333  : 				{
; 334  : 					DataSafeEntryClass *entry_ptr = Safe[i]->SafeList;

	mov	ecx, DWORD PTR ?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A ; GenericDataSafeClass::Safe
	call	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _entry_ptr$8[ebp], eax

; 335  : 					unsigned long *data = NULL;

	mov	DWORD PTR _data$7[ebp], 0

; 336  : 					int data_size = entry_ptr->Size;

	mov	eax, DWORD PTR _entry_ptr$8[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _data_size$6[ebp], ecx

; 337  : 					data_size = data_size >> 2;

	mov	eax, DWORD PTR _data_size$6[ebp]
	sar	eax, 2
	mov	DWORD PTR _data_size$6[ebp], eax

; 338  : 					if (entry_ptr)

	cmp	DWORD PTR _entry_ptr$8[ebp], 0
	je	SHORT $LN16@Security_C

; 339  : 					{
; 340  : 						for (int j=0 ; j<Safe[i]->EntryCount ; j++)

	mov	DWORD PTR _j$5[ebp], 0
	jmp	SHORT $LN14@Security_C
$LN13@Security_C:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
$LN14@Security_C:
	mov	ecx, DWORD PTR ?Safe@GenericDataSafeClass@@1AAV?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@A ; GenericDataSafeClass::Safe
	call	??B?$RefArray@PAVDataSafeEntryListClass@@$0CAAA@@@QAEPAPAVDataSafeEntryListClass@@XZ ; RefArray<DataSafeEntryListClass *,8192>::operator DataSafeEntryListClass * *
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _j$5[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN16@Security_C

; 341  : 						{
; 342  : 							checkey ^= entry_ptr->Handle;

	mov	ecx, DWORD PTR _entry_ptr$8[ebp]
	call	??BDataSafeHandleClass@@QAEHXZ		; DataSafeHandleClass::operator int
	xor	eax, DWORD PTR _checkey$10[ebp]
	mov	DWORD PTR _checkey$10[ebp], eax

; 343  : 							data = (unsigned long *) (((char*)entry_ptr) + sizeof(*entry_ptr));

	mov	eax, DWORD PTR _entry_ptr$8[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _data$7[ebp], eax

; 344  : 							for (int z=0 ; z<data_size ; z++)

	mov	DWORD PTR _z$4[ebp], 0
	jmp	SHORT $LN11@Security_C
$LN10@Security_C:
	mov	eax, DWORD PTR _z$4[ebp]
	add	eax, 1
	mov	DWORD PTR _z$4[ebp], eax
$LN11@Security_C:
	mov	eax, DWORD PTR _z$4[ebp]
	cmp	eax, DWORD PTR _data_size$6[ebp]
	jge	SHORT $LN9@Security_C

; 345  : 							{
; 346  : 								checkey ^= *data++;

	mov	eax, DWORD PTR _data$7[ebp]
	mov	ecx, DWORD PTR _checkey$10[ebp]
	xor	ecx, DWORD PTR [eax]
	mov	DWORD PTR _checkey$10[ebp], ecx
	mov	edx, DWORD PTR _data$7[ebp]
	add	edx, 4
	mov	DWORD PTR _data$7[ebp], edx

; 347  : 							}

	jmp	SHORT $LN10@Security_C
$LN9@Security_C:

; 348  : 							entry_ptr = entry_ptr->Next;

	mov	eax, DWORD PTR _entry_ptr$8[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _entry_ptr$8[ebp], ecx

; 349  : 						}

	jmp	SHORT $LN13@Security_C
$LN16@Security_C:

; 350  : 					}
; 351  : 				}
; 352  : 			}

	jmp	$LN18@Security_C
$LN17@Security_C:

; 353  : 			if (checkey != Checksum)

	mov	eax, DWORD PTR ?Checksum@GenericDataSafeClass@@1AAKA ; GenericDataSafeClass::Checksum
	mov	ecx, DWORD PTR _checkey$10[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN8@Security_C

; 354  : 			{
; 355  : 				Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN8@Security_C:

; 356  : 			}
; 357  : 			if (NumLists)

	mov	eax, DWORD PTR ?NumLists@GenericDataSafeClass@@1AAHA ; GenericDataSafeClass::NumLists
	cmp	DWORD PTR [eax], 0
	je	$LN7@Security_C

; 358  : 			{
; 359  : 				int *val = NULL;

	mov	DWORD PTR _val$3[ebp], 0

; 360  : 				if ((int)SentinelOne != 0)

	mov	ecx, DWORD PTR ?SentinelOne@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A ; GenericDataSafeClass::SentinelOne
	call	??BDataSafeHandleClass@@QAEHXZ		; DataSafeHandleClass::operator int
	test	eax, eax
	je	SHORT $LN6@Security_C

; 361  : 				{
; 362  : 					bool got = DataSafeClass<int>::Get(SentinelOne, val);

	lea	eax, DWORD PTR _val$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?SentinelOne@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A ; GenericDataSafeClass::SentinelOne
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ; DataSafeClass<int>::Get
	add	esp, 8
	mov	BYTE PTR _got$2[ebp], al

; 363  : 					if (!got || val == NULL || *val != SENTINEL_ONE)

	movzx	eax, BYTE PTR _got$2[ebp]
	test	eax, eax
	je	SHORT $LN4@Security_C
	cmp	DWORD PTR _val$3[ebp], 0
	je	SHORT $LN4@Security_C
	mov	eax, DWORD PTR _val$3[ebp]
	cmp	DWORD PTR [eax], 696730466		; 29874362H
	je	SHORT $LN6@Security_C
$LN4@Security_C:

; 364  : 					{
; 365  : 						Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN6@Security_C:

; 366  : 					}
; 367  : 				}
; 368  : 				val = NULL;

	mov	DWORD PTR _val$3[ebp], 0

; 369  : 				if ((int)SentinelTwo != 0)

	mov	ecx, DWORD PTR ?SentinelTwo@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A ; GenericDataSafeClass::SentinelTwo
	call	??BDataSafeHandleClass@@QAEHXZ		; DataSafeHandleClass::operator int
	test	eax, eax
	je	SHORT $LN7@Security_C

; 370  : 				{
; 371  : 					bool got = DataSafeClass<int>::Get(SentinelTwo, val);

	lea	eax, DWORD PTR _val$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?SentinelTwo@GenericDataSafeClass@@1AAVDataSafeHandleClass@@A ; GenericDataSafeClass::SentinelTwo
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Get@?$DataSafeClass@H@@SA_NVDataSafeHandleClass@@AAPAH@Z ; DataSafeClass<int>::Get
	add	esp, 8
	mov	BYTE PTR _got$1[ebp], al

; 372  : 					if (!got || val == NULL || *val != SENTINEL_TWO)

	movzx	eax, BYTE PTR _got$1[ebp]
	test	eax, eax
	je	SHORT $LN1@Security_C
	cmp	DWORD PTR _val$3[ebp], 0
	je	SHORT $LN1@Security_C
	mov	eax, DWORD PTR _val$3[ebp]
	cmp	DWORD PTR [eax], 195890093		; 0bad0badH
	je	SHORT $LN7@Security_C
$LN1@Security_C:

; 373  : 					{
; 374  : 						Security_Fault();

	call	?Security_Fault@GenericDataSafeClass@@KAXXZ ; GenericDataSafeClass::Security_Fault
$LN7@Security_C:

; 375  : 					}
; 376  : 				}
; 377  : 			}
; 378  : 			_checking = false;

	mov	BYTE PTR ?_checking@?1??Security_Check@GenericDataSafeClass@@KAXXZ@4_NA, 0 ; `GenericDataSafeClass::Security_Check'::`2'::_checking
$LN26@Security_C:

; 379  : 		}
; 380  : 	}
; 381  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Security_Check@GenericDataSafeClass@@KAXXZ ENDP	; GenericDataSafeClass::Security_Check
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ??BDataSafeHandleClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BDataSafeHandleClass@@QAEHXZ PROC			; DataSafeHandleClass::operator int, COMDAT
; _this$ = ecx

; 77   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 		return Handle.Whole.WholeHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 79   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BDataSafeHandleClass@@QAEHXZ ENDP			; DataSafeHandleClass::operator int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\datasafe.h
;	COMDAT ?Is_Valid@DataSafeHandleClass@@QBE_NXZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Valid@DataSafeHandleClass@@QBE_NXZ PROC		; DataSafeHandleClass::Is_Valid, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		return Handle.Whole.WholeHandle != -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN3@Is_Valid
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Is_Valid
$LN3@Is_Valid:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Is_Valid:
	mov	al, BYTE PTR tv68[ebp]

; 70   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid@DataSafeHandleClass@@QBE_NXZ ENDP		; DataSafeHandleClass::Is_Valid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4SysTimeClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SysTimeClass@@QAEAAV0@ABV0@@Z PROC			; SysTimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4SysTimeClass@@QAEAAV0@ABV0@@Z ENDP			; SysTimeClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\obboxclass.h
;	COMDAT ??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_center$ = 8						; size = 4
_extent$ = 12						; size = 4
_basis$ = 16						; size = 4
??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z PROC	; OBBoxClass::OBBoxClass, COMDAT
; _this$ = ecx

; 30   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _basis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3
	mov	eax, DWORD PTR _center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 31   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0OBBoxClass@@QAE@ABVVector3@@0ABVMatrix3@@@Z ENDP	; OBBoxClass::OBBoxClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Inverse@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
tv222 = -188						; size = 4
tv272 = -184						; size = 4
tv212 = -180						; size = 4
$T1 = -176						; size = 12
$T2 = -164						; size = 12
_i1$ = -88						; size = 4
_j$ = -84						; size = 4
_i$ = -80						; size = 4
_b$ = -76						; size = 36
_a$ = -40						; size = 36
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Inverse, COMDAT
; _this$ = ecx

; 309  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 310  : 		Matrix3 a(*this);				// As a evolves from original mat into identity

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3

; 311  : 		Matrix3 b(true);				// b evolves from identity into inverse(a)

	push	1
	lea	ecx, DWORD PTR _b$[ebp]
	call	??0Matrix3@@QAE@_N@Z			; Matrix3::Matrix3

; 312  : 		int i, j, i1;
; 313  : 
; 314  : 		// Loop over cols of a from left to right, eliminating above and below diagonal
; 315  : 		for (j=0; j<3; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@Inverse
$LN11@Inverse:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@Inverse:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN10@Inverse

; 316  : 
; 317  : 			// Find largest pivot in column j among rows j..3
; 318  : 			i1 = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i1$[ebp], eax

; 319  : 			for (i=j+1; i<3; i++) {

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@Inverse
$LN8@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN7@Inverse

; 320  : 				if (WWMath::Fabs(a[i][j]) > WWMath::Fabs(a[i1][j])) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv212[ebp]
	movss	xmm0, DWORD PTR tv212[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv222[ebp]
	movss	xmm0, DWORD PTR tv272[ebp]
	comiss	xmm0, DWORD PTR tv222[ebp]
	jbe	SHORT $LN6@Inverse

; 321  : 					i1 = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i1$[ebp], eax
$LN6@Inverse:

; 322  : 				}
; 323  : 			}

	jmp	$LN8@Inverse
$LN7@Inverse:

; 324  : 
; 325  : 			// Swap rows i1 and j in a and b to put pivot on diagonal
; 326  : 			Swap(a.Row[i1], a.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _a$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 327  : 			Swap(b.Row[i1], b.Row[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _b$[ebp+edx]
	push	eax
	call	?Swap@@YAXAAVVector3@@0@Z		; Swap
	add	esp, 8

; 328  : 
; 329  : 			// Scale row j to have a unit diagonal
; 330  : 			if (a[j][j]==0.) {

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]

; 331  : 				//Matrix3::inverse: singular matrix; can't invert
; 332  : 			}
; 333  : 			b.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 334  : 			a.Row[j] /= a.Row[j][j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+ecx]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 335  : 
; 336  : 			// Eliminate off-diagonal elems in col j of a, doing identical ops to b
; 337  : 			for (i=0; i<3; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Inverse
$LN3@Inverse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Inverse:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN2@Inverse

; 338  : 				if (i != j) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	je	$LN1@Inverse

; 339  : 					b.Row[i] -= a[i][j] * b.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _b$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 340  : 					a.Row[i] -= a[i][j] * a.Row[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QAEAAVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??D@YA?AVVector3@@MABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	lea	ecx, DWORD PTR _a$[ebp+edx]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
$LN1@Inverse:

; 341  : 				}
; 342  : 			}

	jmp	$LN3@Inverse
$LN2@Inverse:

; 343  : 		}

	jmp	$LN11@Inverse
$LN10@Inverse:

; 344  : 		return b;

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABV0@@Z			; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 345  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
tv86 = -80						; size = 4
_j$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_extent$ = 8						; size = 4
_new_extent$ = 12					; size = 4
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_AABox_Extent, COMDAT
; _this$ = ecx

; 298  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 		for (int i=0; i<3; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@Rotate_AAB
$LN5@Rotate_AAB:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@Rotate_AAB:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	$LN4@Rotate_AAB

; 300  : 		{
; 301  : 			(*new_extent)[i] = 0.0f;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 302  : 			for (int j=0; j<3; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN3@Rotate_AAB
$LN2@Rotate_AAB:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN3@Rotate_AAB:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	SHORT $LN1@Rotate_AAB

; 303  : 			{
; 304  : 				(*new_extent)[i] += WWMath::Fabs(Row[i][j] * extent[j]);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_extent$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _j$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _extent$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR tv137[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 305  : 			}

	jmp	SHORT $LN2@Rotate_AAB
$LN1@Rotate_AAB:

; 306  : 		}

	jmp	$LN5@Rotate_AAB
$LN4@Rotate_AAB:

; 307  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_AABox_Extent@Matrix3@@QAEXABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_AABox_Extent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Transpose_Rotate_Vector, COMDAT

; 283  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 284  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 285  : 		Vector3 * v;
; 286  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transpose_

; 287  : 		{
; 288  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 289  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 290  : 		} else {

	jmp	SHORT $LN1@Transpose_
$LN2@Transpose_:

; 291  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transpose_:

; 292  : 		}
; 293  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 294  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 295  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 296  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transpose_Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Transpose_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3::Rotate_Vector, COMDAT

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 267  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 268  : 		Vector3 * v;
; 269  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 270  : 		{
; 271  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 272  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 273  : 		}
; 274  : 		else

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 275  : 		{
; 276  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 277  : 		}
; 278  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 279  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 280  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Subtract@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z PROC		; Matrix3::Subtract, COMDAT

; 257  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 258  : 		Vector3::Subtract(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 259  : 		Vector3::Subtract(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 260  : 		Vector3::Subtract(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Subtract@Vector3@@SAXABV1@0PAV1@@Z	; Vector3::Subtract
	add	esp, 12					; 0000000cH

; 261  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Matrix3@@SAXABV1@0PAV1@@Z ENDP		; Matrix3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Add@Matrix3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_res$ = 16						; size = 4
?Add@Matrix3@@SAXABV1@0PAV1@@Z PROC			; Matrix3::Add, COMDAT

; 251  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 252  : 		Vector3::Add(a.Row[0],b.Row[0],&(res->Row[0]));

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 253  : 		Vector3::Add(a.Row[1],b.Row[1],&(res->Row[1]));

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 254  : 		Vector3::Add(a.Row[2],b.Row[2],&(res->Row[2]));

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?Add@Vector3@@SAXABV1@0PAV1@@Z		; Vector3::Add
	add	esp, 12					; 0000000cH

; 255  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Matrix3@@SAXABV1@0PAV1@@Z ENDP			; Matrix3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z
_TEXT	SEGMENT
tv246 = -88						; size = 4
tv244 = -84						; size = 4
tv242 = -80						; size = 4
tv240 = -76						; size = 4
tv238 = -72						; size = 4
tv236 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z PROC		; operator*, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 399  : 	return Vector3(
; 400  : 		a[0][0] * v[0] + a[0][1] * v[1] + a[0][2] * v[2],
; 401  : 		a[1][0] * v[0] + a[1][1] * v[1] + a[1][2] * v[2],
; 402  : 		a[2][0] * v[0] + a[2][1] * v[1] + a[2][2] * v[2] 
; 403  : 	);

	push	0
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv236[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv236[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv238[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv238[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv240[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv242[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv242[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv244[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv246[ebp], xmm1
	call	??AMatrix3@@QBEABVVector3@@H@Z		; Matrix3::operator[]
	mov	ecx, eax
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv246[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 404  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z ENDP		; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 234  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		set_z->Set(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 236  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 		set_y->Set(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 232  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 226  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 		set_x->Set(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 228  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBEXPAVVector3@@@Z ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Z_Vector, COMDAT
; _this$ = ecx

; 222  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 		return Vector3(Row[0][2], Row[1][2], Row[2][2]);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_Y_Vector, COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 		return Vector3(Row[0][1], Row[1][1], Row[2][1]);

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 220  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ PROC		; Matrix3::Get_X_Vector, COMDAT
; _this$ = ecx

; 214  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 		return Vector3(Row[0][0], Row[1][0], Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3@@QBE?AVVector3@@XZ ENDP		; Matrix3::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Z_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Z_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Z_Rotation, COMDAT
; _this$ = ecx

; 209  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		Vector3 v = (*this) * Vector3(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 211  : 		return atan2(v[1],v[0]);

	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 212  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Z_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_Y_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_Y_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_Y_Rotation, COMDAT
; _this$ = ecx

; 204  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 		Vector3 v = (*this) * Vector3(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 206  : 		return atan2(v[0],v[2]);

	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 207  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_Y_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Get_X_Rotation@Matrix3@@QBEMXZ
_TEXT	SEGMENT
$T1 = -92						; size = 12
_v$ = -16						; size = 12
_this$ = -4						; size = 4
?Get_X_Rotation@Matrix3@@QBEMXZ PROC			; Matrix3::Get_X_Rotation, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		Vector3 v = (*this) * Vector3(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??D@YA?AVVector3@@ABVMatrix3@@ABV0@@Z	; operator*
	add	esp, 12					; 0000000cH

; 201  : 		return atan2(v[2], v[1]);

	push	1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	lea	ecx, DWORD PTR _v$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8

; 202  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Rotation@Matrix3@@QBEMXZ ENDP			; Matrix3::Get_X_Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		float tmp1,tmp2;
; 188  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 189  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 190  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 191  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 192  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 193  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 194  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 195  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 196  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Z@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Z, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		Rotate_Z(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Z@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Z

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 169  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		float tmp1,tmp2;
; 171  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 172  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 173  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 174  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 175  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 176  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 177  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 178  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 180  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_Y@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_Y, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		Rotate_Y(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_Y@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_Y

; 167  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3@@QAEXMM@Z PROC			; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		float tmp1,tmp2;
; 154  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 155  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 156  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 157  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 158  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 159  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 160  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 161  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 162  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector3@@QAEAAMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 163  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3@@QAEXMM@Z ENDP			; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Rotate_X@Matrix3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3@@QAEXM@Z PROC				; Matrix3::Rotate_X, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		Rotate_X(sinf(theta),cosf(theta));

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate_X@Matrix3@@QAEXMM@Z		; Matrix3::Rotate_X

; 150  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3@@QAEXM@Z ENDP				; Matrix3::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Make_Identity@Matrix3@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3@@QAEXXZ PROC			; Matrix3::Make_Identity, COMDAT
; _this$ = ecx

; 142  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		Row[0].Set(1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 144  : 		Row[1].Set(0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 145  : 		Row[2].Set(0.0f,0.0f,1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 146  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3@@QAEXXZ ENDP			; Matrix3::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??_0Matrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator/=, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		Row[0] /= d; Row[1] /= d; Row[2] /= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??_0Vector3@@QAEAAV0@M@Z		; Vector3::operator/=

; 139  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??XMatrix3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix3@@QAEAAV0@M@Z PROC				; Matrix3::operator*=, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; 

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@@QAEAAV0@M@Z			; Vector3::operator*=

; 134  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix3@@QAEAAV0@M@Z ENDP				; Matrix3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??ZMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator-=, COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator-=

; 129  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 130  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??YMatrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator+=, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; 

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector3@@QAEAAV0@ABV0@@Z		; Vector3::operator+=

; 124  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??4Matrix3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3@@QAEAAV0@ABV0@@Z PROC			; Matrix3::operator=, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 117  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 118  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@@QAEAAV0@ABV0@@Z ENDP			; Matrix3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Determinant@Matrix3@@QBEMXZ
_TEXT	SEGMENT
tv243 = -92						; size = 4
tv255 = -88						; size = 4
tv253 = -84						; size = 4
tv251 = -80						; size = 4
tv249 = -76						; size = 4
tv247 = -72						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix3@@QBEMXZ PROC			; Matrix3::Determinant, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return   Row[0][0] * (Row[1][1] * Row[2][2] - Row[1][2] * Row[2][1])
; 111  : 				- Row[0][1] * (Row[1][0] * Row[2][2] - Row[1][2] * Row[2][0])
; 112  : 				- Row[0][2] * (Row[1][0] * Row[2][1] - Row[1][1] * Row[2][0]);

	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv247[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm1
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv251[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv249[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	edi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv255[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR [esi]
	movss	xmm0, DWORD PTR tv253[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR tv243[ebp], xmm0
	fld	DWORD PTR tv243[ebp]

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix3@@QBEMXZ ENDP			; Matrix3::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Transpose@Matrix3@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -104						; size = 12
$T2 = -92						; size = 12
$T3 = -80						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix3@@QBE?AV1@XZ PROC			; Matrix3::Transpose, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 		return Matrix3(
; 103  : 				Vector3(Row[0][0], Row[1][0], Row[2][0]),
; 104  : 				Vector3(Row[0][1], Row[1][1], Row[2][1]),
; 105  : 				Vector3(Row[0][2], Row[1][2], Row[2][2])
; 106  : 		);

	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix3@@QAE@ABVVector3@@00@Z	; Matrix3::Matrix3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix3@@QBE?AV1@XZ ENDP			; Matrix3::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QBEABVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QBEABVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 99   : 	TT_INLINE const Vector3 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QBEABVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??AMatrix3@@QAEAAVVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3@@QAEAAVVector3@@H@Z PROC			; Matrix3::operator[], COMDAT
; _this$ = ecx

; 98   : 	TT_INLINE Vector3 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3@@QAEAAVVector3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv359 = -80						; size = 4
tv353 = -80						; size = 4
tv347 = -80						; size = 4
tv357 = -76						; size = 4
tv351 = -76						; size = 4
tv345 = -76						; size = 4
tv355 = -72						; size = 4
tv349 = -72						; size = 4
tv343 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@MM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Row[0].Set(
; 82   : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 83   : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 84   : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s)
; 85   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv343[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv343[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv345[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv345[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv347[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv347[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 86   : 		Row[1].Set(
; 87   : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 88   : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 89   : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s)
; 90   : 		);

	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv349[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv349[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv351[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv351[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv353[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv353[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 91   : 	Row[2].Set(
; 92   : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 93   : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 94   : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2]))
; 95   : 		);

	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv355[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv355[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv357[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv357[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv359[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv359[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@MM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3@@QAEXABVVector3@@M@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Set(axis,sinf(angle),cosf(angle));

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3@@QAEXABVVector3@@M@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
?Set@Matrix3@@QAEXMMMMMMMMM@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 72   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 73   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 74   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Set@Matrix3@@QAEXMMMMMMMMM@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ?Set@Matrix3@@QAEXABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?Set@Matrix3@@QAEXABVVector3@@00@Z PROC			; Matrix3::Set, COMDAT
; _this$ = ecx

; 64   : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 66   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 67   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3@@QAEXABVVector3@@00@Z ENDP			; Matrix3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVQuaternion@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
??0Matrix3@@QAE@ABVQuaternion@@@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE Matrix3(const Quaternion & q)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		this->Set(q);

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVQuaternion@@@Z	; Matrix3::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABVQuaternion@@@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s_angle$ = 12						; size = 4
_c_angle$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@MM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float s_angle,float c_angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{ 
; 55   : 		Set(axis,s_angle,c_angle); 

	push	ecx
	movss	xmm0, DWORD PTR _c_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@MM@Z	; Matrix3::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3@@QAE@ABVVector3@@M@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3(const Vector3 & axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{ 
; 51   : 		Set(axis,angle); 

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3@@QAEXABVVector3@@M@Z	; Matrix3::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3@@QAE@ABVVector3@@M@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m21$ = 20						; size = 4
_m22$ = 24						; size = 4
_m23$ = 28						; size = 4
_m31$ = 32						; size = 4
_m32$ = 36						; size = 4
_m33$ = 40						; size = 4
??0Matrix3@@QAE@MMMMMMMMM@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 43   : 	TT_INLINE explicit Matrix3(float m11,float m12,float m13,float m21,float m22,float m23,float m31,float m32,float m33)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 44   : 	{
; 45   : 		Row[0].Set(m11,m12,m13);

	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 46   : 		Row[1].Set(m21,m22,m23);

	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 47   : 		Row[2].Set(m31,m32,m33);

	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0Matrix3@@QAE@MMMMMMMMM@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABVVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0Matrix3@@QAE@ABVVector3@@00@Z PROC			; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE explicit Matrix3(const Vector3 & v0, const Vector3 & v1, const Vector3 & v2)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 36   : 	{ 
; 37   : 		Row[0] = v0; 

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 38   : 		Row[1] = v1; 

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 39   : 		Row[2] = v2; 

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3@@QAE@ABVVector3@@00@Z ENDP			; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix3@@QAE@_N@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE explicit Matrix3(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 27   : 	{
; 28   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	$LN1@Matrix3

; 29   : 		{
; 30   : 			Row[0].Set(1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 31   : 			Row[1].Set(0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set

; 32   : 			Row[2].Set(0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
$LN1@Matrix3:

; 33   : 		}
; 34   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@_N@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3@@QAE@ABV0@@Z PROC				; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix3(const Matrix3 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 25   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3@@QAE@ABV0@@Z ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3.h
;	COMDAT ??0Matrix3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix3@@QAE@XZ PROC					; Matrix3::Matrix3, COMDAT
; _this$ = ecx

; 21   : 	TT_INLINE Matrix3(void) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@@QAE@XZ		; Vector3::Vector3
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix3@@QAE@XZ ENDP					; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z
_TEXT	SEGMENT
tv342 = -96						; size = 4
tv336 = -96						; size = 4
tv330 = -96						; size = 4
tv324 = -96						; size = 4
tv340 = -92						; size = 4
tv334 = -92						; size = 4
tv328 = -92						; size = 4
tv322 = -92						; size = 4
tv338 = -88						; size = 4
tv332 = -88						; size = 4
tv326 = -88						; size = 4
tv320 = -88						; size = 4
_v$ = -20						; size = 4
_tmp$ = -16						; size = 16
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 227  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 228  : 		Vector4 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector4@@QAE@XZ			; Vector4::Vector4

; 229  : 		Vector4 * v;
; 230  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 231  : 		{
; 232  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 233  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 234  : 		}
; 235  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 236  : 		{
; 237  : 			v = (Vector4 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 238  : 		}
; 239  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3] * v->W);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv320[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv320[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv322[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv322[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv324[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv324[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax], xmm1

; 240  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3] * v->W);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv326[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv326[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv328[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv328[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv330[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv330[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 241  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3] * v->W);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv332[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv332[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv334[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv334[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv336[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv336[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 242  : 		out->W = (A[3][0] * v->X + A[3][1] * v->Y + A[3][2] * v->Z + A[3][3] * v->W);

	push	0
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv338[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv338[ebp]
	addss	xmm1, xmm0
	push	2
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv340[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv340[ebp]
	addss	xmm1, xmm0
	push	3
	push	3
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv342[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR tv342[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 243  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector4@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z
_TEXT	SEGMENT
tv265 = -76						; size = 4
tv259 = -76						; size = 4
tv253 = -76						; size = 4
tv263 = -72						; size = 4
tv257 = -72						; size = 4
tv251 = -72						; size = 4
tv261 = -68						; size = 4
tv255 = -68						; size = 4
tv249 = -68						; size = 4
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 220  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 221  : 		out->X = (A[0][0] * in.X + A[0][1] * in.Y + A[0][2] * in.Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv249[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv251[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv251[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv253[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 222  : 		out->Y = (A[1][0] * in.X + A[1][1] * in.Y + A[1][2] * in.Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv255[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv257[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv257[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv259[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv259[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 223  : 		out->Z = (A[2][0] * in.X + A[2][1] * in.Y + A[2][2] * in.Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv261[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv261[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv263[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv263[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv265[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv265[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 224  : 		out->W = 1.0f;

	mov	eax, DWORD PTR _out$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 225  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAVVector4@@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix4::Transform_Vector, COMDAT

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 204  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 205  : 		Vector3 *v;
; 206  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 207  : 		{
; 208  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 209  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 210  : 		}
; 211  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 212  : 		{
; 213  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 214  : 		}
; 215  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z + A[0][3]);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 216  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z + A[1][3]);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 217  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z + A[2][3]);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AMatrix4@@QBEABVVector4@@H@Z		; Matrix4::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 218  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix4@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix4::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??_0Matrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_ood$ = -8						; size = 4
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??_0Matrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator/=, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 		float ood = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _ood$[ebp], xmm0

; 179  : 		Row[0] *= ood; Row[1] *= ood; Row[2] *= ood; Row[3] *= ood;

	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _ood$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 180  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 181  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??XMatrix4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_d$ = 8							; size = 4
??XMatrix4@@QAEAAV0@M@Z PROC				; Matrix4::operator*=, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		Row[0] *= d; Row[1] *= d; Row[2] *= d; Row[3] *= d;

	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=
	push	ecx
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??XVector4@@QAEAAV0@M@Z			; Vector4::operator*=

; 174  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 175  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix4@@QAEAAV0@M@Z ENDP				; Matrix4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??ZMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??ZMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator-=, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		Row[0] -= m.Row[0]; Row[1] -= m.Row[1]; Row[2] -= m.Row[2]; Row[3] -= m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??ZVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator-=

; 169  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??YMatrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??YMatrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator+=, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0] += m.Row[0]; Row[1] += m.Row[1]; Row[2] += m.Row[2]; Row[3] += m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??YVector4@@QAEAAV0@ABV0@@Z		; Vector4::operator+=

; 164  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 165  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??4Matrix4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix4@@QAEAAV0@ABV0@@Z PROC			; Matrix4::operator=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 159  : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix4@@QAEAAV0@ABV0@@Z ENDP			; Matrix4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Inverse@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
_t$ = -72						; size = 64
_s$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Inverse@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Inverse, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		float s = Determinant();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Determinant@Matrix4@@QBEMXZ		; Matrix4::Determinant
	fstp	DWORD PTR _s$[ebp]

; 135  : 		if (s == 0.0) return Matrix4();

	cvtss2sd xmm0, DWORD PTR _s$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Inverse
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN2@Inverse
$LN1@Inverse:

; 136  : 		s = 1/s;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _s$[ebp], xmm0

; 137  : 		Matrix4 t;

	lea	ecx, DWORD PTR _t$[ebp]
	call	??0Matrix4@@QAE@XZ			; Matrix4::Matrix4

; 138  : 		t.Row[0].X = s*(Row[1].Y*(Row[2].Z*Row[3].W - Row[2].W*Row[3].Z) + Row[1].Z*(Row[2].W*Row[3].Y - Row[2].Y*Row[3].W) + Row[1].W*(Row[2].Y*Row[3].Z - Row[2].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 139  : 		t.Row[0].Y = s*(Row[2].Y*(Row[0].Z*Row[3].W - Row[0].W*Row[3].Z) + Row[2].Z*(Row[0].W*Row[3].Y - Row[0].Y*Row[3].W) + Row[2].W*(Row[0].Y*Row[3].Z - Row[0].Z*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 140  : 		t.Row[0].Z = s*(Row[3].Y*(Row[0].Z*Row[1].W - Row[0].W*Row[1].Z) + Row[3].Z*(Row[0].W*Row[1].Y - Row[0].Y*Row[1].W) + Row[3].W*(Row[0].Y*Row[1].Z - Row[0].Z*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 141  : 		t.Row[0].W = s*(Row[0].Y*(Row[1].W*Row[2].Z - Row[1].Z*Row[2].W) + Row[0].Z*(Row[1].Y*Row[2].W - Row[1].W*Row[2].Y) + Row[0].W*(Row[1].Z*Row[2].Y - Row[1].Y*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+4]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+8]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+12]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 142  : 		t.Row[1].X = s*(Row[1].Z*(Row[2].X*Row[3].W - Row[2].W*Row[3].X) + Row[1].W*(Row[2].Z*Row[3].X - Row[2].X*Row[3].Z) + Row[1].X*(Row[2].W*Row[3].Z - Row[2].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 143  : 		t.Row[1].Y = s*(Row[2].Z*(Row[0].X*Row[3].W - Row[0].W*Row[3].X) + Row[2].W*(Row[0].Z*Row[3].X - Row[0].X*Row[3].Z) + Row[2].X*(Row[0].W*Row[3].Z - Row[0].Z*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 144  : 		t.Row[1].Z = s*(Row[3].Z*(Row[0].X*Row[1].W - Row[0].W*Row[1].X) + Row[3].W*(Row[0].Z*Row[1].X - Row[0].X*Row[1].Z) + Row[3].X*(Row[0].W*Row[1].Z - Row[0].Z*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+12]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+12]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+8]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 145  : 		t.Row[1].W = s*(Row[0].Z*(Row[1].W*Row[2].X - Row[1].X*Row[2].W) + Row[0].W*(Row[1].X*Row[2].Z - Row[1].Z*Row[2].X) + Row[0].X*(Row[1].Z*Row[2].W - Row[1].W*Row[2].Z));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+12]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+12]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+8]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+12]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+8]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax+8]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 146  : 		t.Row[2].X = s*(Row[1].W*(Row[2].X*Row[3].Y - Row[2].Y*Row[3].X) + Row[1].X*(Row[2].Y*Row[3].W - Row[2].W*Row[3].Y) + Row[1].Y*(Row[2].W*Row[3].X - Row[2].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 147  : 		t.Row[2].Y = s*(Row[2].W*(Row[0].X*Row[3].Y - Row[0].Y*Row[3].X) + Row[2].X*(Row[0].Y*Row[3].W - Row[0].W*Row[3].Y) + Row[2].Y*(Row[0].W*Row[3].X - Row[0].X*Row[3].W));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 148  : 		t.Row[2].Z = s*(Row[3].W*(Row[0].X*Row[1].Y - Row[0].Y*Row[1].X) + Row[3].X*(Row[0].Y*Row[1].W - Row[0].W*Row[1].Y) + Row[3].Y*(Row[0].W*Row[1].X - Row[0].X*Row[1].W));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+4]
	mulss	xmm1, DWORD PTR [edi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+12]
	mulss	xmm2, DWORD PTR [edi+ecx+4]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+12]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+12]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 149  : 		t.Row[2].W = s*(Row[0].W*(Row[1].Y*Row[2].X - Row[1].X*Row[2].Y) + Row[0].X*(Row[1].W*Row[2].Y - Row[1].Y*Row[2].W) + Row[0].Y*(Row[1].X*Row[2].W - Row[1].W*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+12]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+12]
	mulss	xmm1, DWORD PTR [edi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+4]
	mulss	xmm2, DWORD PTR [edi+ecx+12]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+12]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+12]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 150  : 		t.Row[3].X = s*(Row[1].X*(Row[2].Z*Row[3].Y - Row[2].Y*Row[3].Z) + Row[1].Y*(Row[2].X*Row[3].Z - Row[2].Z*Row[3].X) + Row[1].Z*(Row[2].Y*Row[3].X - Row[2].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax], xmm0

; 151  : 		t.Row[3].Y = s*(Row[2].X*(Row[0].Z*Row[3].Y - Row[0].Y*Row[3].Z) + Row[2].Y*(Row[0].X*Row[3].Z - Row[0].Z*Row[3].X) + Row[2].Z*(Row[0].Y*Row[3].X - Row[0].X*Row[3].Y));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+4], xmm0

; 152  : 		t.Row[3].Z = s*(Row[3].X*(Row[0].Z*Row[1].Y - Row[0].Y*Row[1].Z) + Row[3].Y*(Row[0].X*Row[1].Z - Row[0].Z*Row[1].X) + Row[3].Z*(Row[0].Y*Row[1].X - Row[0].X*Row[1].Y));

	mov	eax, 16					; 00000010H
	imul	eax, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR [edi+edx+4]
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+4]
	mulss	xmm1, DWORD PTR [edi+edx+8]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 3
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax+8]
	mulss	xmm2, DWORD PTR [edi+ecx]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx+4]
	mulss	xmm1, DWORD PTR [edi+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx]
	mulss	xmm2, DWORD PTR [edi+eax+4]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+8], xmm0

; 153  : 		t.Row[3].W = s*(Row[0].X*(Row[1].Y*Row[2].Z - Row[1].Z*Row[2].Y) + Row[0].Y*(Row[1].Z*Row[2].X - Row[1].X*Row[2].Z) + Row[0].Z*(Row[1].X*Row[2].Y - Row[1].Y*Row[2].X));

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+4]
	mulss	xmm0, DWORD PTR [edi+edx+8]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx+8]
	mulss	xmm1, DWORD PTR [edi+edx+4]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 16					; 00000010H
	imul	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+eax+8]
	mulss	xmm1, DWORD PTR [edi+ecx]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [edi+ecx+8]
	subss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx+4]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [edi+eax+4]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [esi+edx+4]
	mulss	xmm2, DWORD PTR [edi+eax]
	subss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx+8]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	eax, 16					; 00000010H
	imul	eax, 3
	movss	DWORD PTR _t$[ebp+eax+12], xmm0

; 154  : 		return t;

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABV0@@Z			; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@Inverse:

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inverse@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Determinant@Matrix4@@QBEMXZ
_TEXT	SEGMENT
_det$ = -8						; size = 4
_this$ = -4						; size = 4
?Determinant@Matrix4@@QBEMXZ PROC			; Matrix4::Determinant, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		float det;
; 124  : 		det =	(Row[0].X * Row[1].Y - Row[0].Y * Row[1].X) * (Row[2].Z * Row[3].W - Row[2].W * Row[3].Z);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+8]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR _det$[ebp], xmm0

; 125  : 		det -=	(Row[0].X * Row[1].Z - Row[0].Z * Row[1].X) * (Row[2].Y * Row[3].W - Row[2].W * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 126  : 		det +=	(Row[0].X * Row[1].W - Row[0].W * Row[1].X) * (Row[2].Y * Row[3].Z - Row[2].Z * Row[3].Y);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+4]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx+4]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 127  : 		det +=	(Row[0].Y * Row[1].Z - Row[0].Z * Row[1].Y) * (Row[2].X * Row[3].W - Row[2].W * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+8]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+12]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 128  : 		det -=	(Row[0].Y * Row[1].W - Row[0].W * Row[1].Y) * (Row[2].X * Row[3].Z - Row[2].Z * Row[3].X);

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+8]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _det$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$[ebp], xmm1

; 129  : 		det +=	(Row[0].Z * Row[1].W - Row[0].W * Row[1].Z) * (Row[2].X * Row[3].Y - Row[2].Y * Row[3].X);		

	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+8]
	mulss	xmm0, DWORD PTR [esi+ecx+12]
	mov	eax, 16					; 00000010H
	imul	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax+12]
	mulss	xmm1, DWORD PTR [esi+ecx+8]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx+4]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [edx+eax+4]
	mulss	xmm2, DWORD PTR [esi+ecx]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _det$[ebp]
	movss	DWORD PTR _det$[ebp], xmm0

; 130  : 		return det;	

	fld	DWORD PTR _det$[ebp]

; 131  : 	};	

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Determinant@Matrix4@@QBEMXZ ENDP			; Matrix4::Determinant
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Transpose@Matrix4@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -132						; size = 16
$T2 = -116						; size = 16
$T3 = -100						; size = 16
$T4 = -84						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Transpose@Matrix4@@QBE?AV1@XZ PROC			; Matrix4::Transpose, COMDAT
; _this$ = ecx

; 118  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 		return Matrix4(Vector4(Row[0][0], Row[1][0], Row[2][0], Row[3][0]),Vector4(Row[0][1], Row[1][1], Row[2][1], Row[3][1]),Vector4(Row[0][2], Row[1][2], Row[2][2], Row[3][2]),Vector4(Row[0][3], Row[1][3], Row[2][3], Row[3][3]));

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@@QAE@ABVVector4@@000@Z	; Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Transpose@Matrix4@@QBE?AV1@XZ ENDP			; Matrix4::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QBEABVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 116  : 	TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QBEABVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??AMatrix4@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix4@@QAEAAVVector4@@H@Z PROC			; Matrix4::operator[], COMDAT
; _this$ = ecx

; 115  : 	TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@@QAEAAVVector4@@H@Z ENDP			; Matrix4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv218 = -72						; size = 4
tv216 = -72						; size = 4
tv214 = -72						; size = 4
tv212 = -72						; size = 4
tv210 = -72						; size = 4
tv208 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Perspective, COMDAT
; _this$ = ecx

; 103  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 105  : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv208[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv208[ebp]
	movss	DWORD PTR [eax], xmm0

; 106  : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv210[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv210[ebp]
	movss	DWORD PTR [eax], xmm0

; 107  : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv212[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv212[ebp]
	movss	DWORD PTR [eax], xmm0

; 108  : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv214[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv214[ebp]
	movss	DWORD PTR [eax], xmm0

; 109  : 		Row[2][2] = zfar / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv216[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv216[ebp]
	movss	DWORD PTR [eax], xmm0

; 110  : 		Row[2][3] = (znear * zfar) / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	mulss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	subss	xmm1, DWORD PTR _zfar$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv218[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR [eax], xmm0

; 111  : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 112  : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Perspective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv190 = -72						; size = 4
tv188 = -72						; size = 4
tv186 = -72						; size = 4
tv184 = -72						; size = 4
tv182 = -72						; size = 4
tv180 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z PROC			; Matrix4::Init_Ortho, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 94   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv180[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv180[ebp]
	movss	DWORD PTR [eax], xmm0

; 95   : 		Row[0][3] = (left + right) / (left - right);

	movss	xmm0, DWORD PTR _left$[ebp]
	addss	xmm0, DWORD PTR _right$[ebp]
	movss	xmm1, DWORD PTR _left$[ebp]
	subss	xmm1, DWORD PTR _right$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv182[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv182[ebp]
	movss	DWORD PTR [eax], xmm0

; 96   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv184[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv184[ebp]
	movss	DWORD PTR [eax], xmm0

; 97   : 		Row[1][3] = (top + bottom) / (bottom - top);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _bottom$[ebp]
	subss	xmm1, DWORD PTR _top$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR [eax], xmm0

; 98   : 		Row[2][2] = 1.0f / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv188[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv188[ebp]
	movss	DWORD PTR [eax], xmm0

; 99   : 		Row[2][3] = znear / (znear - zfar);

	movss	xmm0, DWORD PTR _znear$[ebp]
	subss	xmm0, DWORD PTR _zfar$[ebp]
	movss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv190[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR [eax], xmm0

; 100  : 
; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho@Matrix4@@QAEXMMMMMM@Z ENDP			; Matrix4::Init_Ortho
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv227 = -72						; size = 4
tv225 = -72						; size = 4
tv223 = -72						; size = 4
tv221 = -72						; size = 4
tv219 = -72						; size = 4
tv217 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z PROC	; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 82   : 		Row[0][0] = static_cast<float>(2.0*znear / (right - left));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv217[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv217[ebp]
	movss	DWORD PTR [eax], xmm0

; 83   : 		Row[0][2] = (right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv219[ebp]
	movss	DWORD PTR [eax], xmm0

; 84   : 		Row[1][1] = static_cast<float>(2.0*znear / (top - bottom));

	cvtss2sd xmm0, DWORD PTR _znear$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv221[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv221[ebp]
	movss	DWORD PTR [eax], xmm0

; 85   : 		Row[1][2] = (top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv223[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv223[ebp]
	movss	DWORD PTR [eax], xmm0

; 86   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv225[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv225[ebp]
	movss	DWORD PTR [eax], xmm0

; 87   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv227[ebp]
	movss	DWORD PTR [eax], xmm0

; 88   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 89   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Perspective_OGL@Matrix4@@QAEXMMMMMM@Z ENDP	; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z
_TEXT	SEGMENT
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_hfov$ = 8						; size = 4
_vfov$ = 12						; size = 4
_znear$ = 16						; size = 4
_zfar$ = 20						; size = 4
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z PROC		; Matrix4::Init_Perspective_OGL, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 72   : 		Row[0][0] = static_cast<float>(1.0 / tan(hfov*0.5));

	cvtss2sd xmm0, DWORD PTR _hfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 73   : 		Row[1][1] = static_cast<float>(1.0 / tan(vfov*0.5));

	cvtss2sd xmm0, DWORD PTR _vfov$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 74   : 		Row[2][2] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 75   : 		Row[2][3] = static_cast<float>(-(2.0*zfar*znear) / (zfar - znear));

	cvtss2sd xmm0, DWORD PTR _zfar$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvtss2sd xmm1, DWORD PTR _znear$[ebp]
	mulsd	xmm0, xmm1
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 76   : 		Row[3][2] = -1.0f;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 77   : 		Row[3][3] = 0.0f;

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init_Perspective_OGL@Matrix4@@QAEXMMMM@Z ENDP		; Matrix4::Init_Perspective_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z
_TEXT	SEGMENT
tv195 = -72						; size = 4
tv193 = -72						; size = 4
tv191 = -72						; size = 4
tv189 = -72						; size = 4
tv187 = -72						; size = 4
tv185 = -72						; size = 4
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_znear$ = 24						; size = 4
_zfar$ = 28						; size = 4
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z PROC		; Matrix4::Init_Ortho_OGL, COMDAT
; _this$ = ecx

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity

; 61   : 		Row[0][0] = 2.0f / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	subss	xmm0, DWORD PTR _left$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv185[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR [eax], xmm0

; 62   : 		Row[0][3] = -(right + left) / (right - left);

	movss	xmm0, DWORD PTR _right$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, DWORD PTR _left$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 63   : 		Row[1][1] = 2.0f / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	subss	xmm0, DWORD PTR _bottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv189[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [eax], xmm0

; 64   : 		Row[1][3] = -(top + bottom) / (top - bottom);

	movss	xmm0, DWORD PTR _top$[ebp]
	addss	xmm0, DWORD PTR _bottom$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _top$[ebp]
	subss	xmm1, DWORD PTR _bottom$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 65   : 		Row[2][2] = -2.0f / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	subss	xmm0, DWORD PTR _znear$[ebp]
	movss	xmm1, DWORD PTR __real@c0000000
	divss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv193[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR [eax], xmm0

; 66   : 		Row[2][3] = -(zfar + znear) / (zfar - znear);

	movss	xmm0, DWORD PTR _zfar$[ebp]
	addss	xmm0, DWORD PTR _znear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zfar$[ebp]
	subss	xmm1, DWORD PTR _znear$[ebp]
	divss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv195[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv195[ebp]
	movss	DWORD PTR [eax], xmm0

; 67   : 
; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Init_Ortho_OGL@Matrix4@@QAEXMMMMMM@Z ENDP		; Matrix4::Init_Ortho_OGL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
?Init@Matrix4@@QAEXABVVector4@@000@Z PROC		; Matrix4::Init, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		Row[0] = v0; Row[1] = v1; Row[2] = v2; Row[3] = v3;

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init@Matrix4@@QAEXABVVector4@@000@Z ENDP		; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Init@Matrix4@@QAEXABVMatrix3D@@@Z
_TEXT	SEGMENT
$T1 = -84						; size = 16
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z PROC			; Matrix4::Init, COMDAT
; _this$ = ecx

; 51   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 		Row[0] = m[0]; Row[1] = m[1]; Row[2] = m[2]; Row[3] = Vector4(0.0,0.0,0.0,1.0); 

	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vector4@@QAE@MMMM@Z			; Vector4::Vector4
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 53   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@Matrix4@@QAEXABVMatrix3D@@@Z ENDP			; Matrix4::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ?Make_Identity@Matrix4@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix4@@QAEXXZ PROC			; Matrix4::Make_Identity, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		Row[0].Set(1.0,0.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 46   : 		Row[1].Set(0.0,1.0,0.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 47   : 		Row[2].Set(0.0,0.0,1.0,0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 48   : 		Row[3].Set(0.0,0.0,0.0,1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 49   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix4@@QAEXXZ ENDP			; Matrix4::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVVector4@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0Matrix4@@QAE@ABVVector4@@000@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 40   : 	TT_INLINE explicit Matrix4(const Vector4 & v0, const Vector4 & v1, const Vector4 & v2, const Vector4 & v3)	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 41   : 		Init(v0,v1,v2,v3);

	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVVector4@@000@Z	; Matrix4::Init

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix4@@QAE@ABVVector4@@000@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABVMatrix3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABVMatrix3D@@@Z PROC			; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 36   : 	TT_INLINE explicit Matrix4(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 37   : 	{
; 38   : 		Init(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@Matrix4@@QAEXABVMatrix3D@@@Z	; Matrix4::Init

; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABVMatrix3D@@@Z ENDP			; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_identity$ = 8						; size = 1
??0Matrix4@@QAE@_N@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 29   : 	TT_INLINE explicit Matrix4(bool identity)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 30   : 	{
; 31   : 		if (identity)

	movzx	eax, BYTE PTR _identity$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix4

; 32   : 		{
; 33   : 			Make_Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix4@@QAEXXZ		; Matrix4::Make_Identity
$LN2@Matrix4:

; 34   : 		}
; 35   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@_N@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix4@@QAE@ABV0@@Z PROC				; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 25   : 	TT_INLINE Matrix4(const Matrix4 & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 26   : 	{
; 27   : 		Row[0] = m.Row[0]; Row[1] = m.Row[1]; Row[2] = m.Row[2]; Row[3] = m.Row[3];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=
	mov	eax, 16					; 00000010H
	imul	eax, 3
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 3
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 28   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@@QAE@ABV0@@Z ENDP				; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix4.h
;	COMDAT ??0Matrix4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix4@@QAE@XZ PROC					; Matrix4::Matrix4, COMDAT
; _this$ = ecx

; 22   : 	TT_INLINE Matrix4(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 23   : 	{
; 24   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix4@@QAE@XZ ENDP					; Matrix4::Matrix4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\networkobjectclass.h
;	COMDAT ?Get_Network_ID@NetworkObjectClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Network_ID@NetworkObjectClass@@QBEHXZ PROC		; NetworkObjectClass::Get_Network_ID, COMDAT
; _this$ = ecx

; 51   : 	int					Get_Network_ID (void) const								{ return NetworkID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Network_ID@NetworkObjectClass@@QBEHXZ ENDP		; NetworkObjectClass::Get_Network_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Rotate_Vector, COMDAT

; 564  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 565  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 566  : 		Vector3 * v;
; 567  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Ro

; 568  : 		{
; 569  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 570  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 571  : 		}
; 572  : 		else

	jmp	SHORT $LN1@Inverse_Ro
$LN2@Inverse_Ro:

; 573  : 		{
; 574  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Ro:

; 575  : 		}
; 576  : 		out->X = (A[0][0] * v->X + A[1][0] * v->Y + A[2][0] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 577  : 		out->Y = (A[0][1] * v->X + A[1][1] * v->Y + A[2][1] * v->Z);

	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 578  : 		out->Z = (A[0][2] * v->X + A[1][2] * v->Y + A[2][2] * v->Z);

	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 579  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
_diff$ = -28						; size = 12
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Inverse_Transform_Vector, COMDAT

; 548  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 549  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 550  : 		Vector3 * v;
; 551  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Inverse_Tr

; 552  : 		{
; 553  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 554  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 555  : 		}
; 556  : 		else

	jmp	SHORT $LN1@Inverse_Tr
$LN2@Inverse_Tr:

; 557  : 		{
; 558  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Inverse_Tr:

; 559  : 		}
; 560  : 		Vector3 diff(v->X - A[0][3], v->Y - A[1][3], v->Z - A[2][3]);

	push	3
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _diff$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 561  : 		Matrix3D::Inverse_Rotate_Vector(A, diff, out);

	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	call	?Inverse_Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ; Matrix3D::Inverse_Rotate_Vector
	add	esp, 12					; 0000000cH

; 562  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Inverse_Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Inverse_Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv233 = -88						; size = 4
tv229 = -88						; size = 4
tv235 = -84						; size = 4
tv231 = -84						; size = 4
tv227 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Rotate_Vector, COMDAT

; 531  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 532  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 533  : 		Vector3 * v;
; 534  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Rotate_Vec

; 535  : 		{
; 536  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 537  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 538  : 		}
; 539  : 		else 

	jmp	SHORT $LN1@Rotate_Vec
$LN2@Rotate_Vec:

; 540  : 		{
; 541  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Rotate_Vec:

; 542  : 		}
; 543  : 		out->X = (A[0][0] * v->X + A[0][1] * v->Y + A[0][2] * v->Z);

	push	0
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv227[ebp]
	addss	xmm1, xmm0
	push	2
	push	0
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv229[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv229[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm1

; 544  : 		out->Y = (A[1][0] * v->X + A[1][1] * v->Y + A[1][2] * v->Z);

	push	0
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv231[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv233[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv233[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 545  : 		out->Z = (A[2][0] * v->X + A[2][1] * v->Y + A[2][2] * v->Z);

	push	0
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	push	2
	mov	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AMatrix3D@@QBEABVVector4@@H@Z		; Matrix3D::operator[]
	mov	ecx, eax
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 546  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Rotate_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Rotate_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_z$ = 8						; size = 4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 524  : 	TT_INLINE void Get_Z_Vector(Vector3 * set_z) const { set_z->Set(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_z$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_y$ = 8						; size = 4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 523  : 	TT_INLINE void Get_Y_Vector(Vector3 * set_y) const { set_y->Set(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_y$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set_x$ = 8						; size = 4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 522  : 	TT_INLINE void Get_X_Vector(Vector3 * set_x) const { set_x->Set(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _set_x$[ebp]
	call	?Set@Vector3@@QAEXMMM@Z			; Vector3::Set
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBEXPAVVector3@@@Z ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Z_Vector, COMDAT
; _this$ = ecx

; 521  : 	TT_INLINE Vector3 Get_Z_Vector() const { return Vector3(Row[0][2], Row[1][2], Row[2][2]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Z_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Z_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_Y_Vector, COMDAT
; _this$ = ecx

; 520  : 	TT_INLINE Vector3 Get_Y_Vector() const { return Vector3(Row[0][1], Row[1][1], Row[2][1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Y_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_Y_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ PROC		; Matrix3D::Get_X_Vector, COMDAT
; _this$ = ecx

; 519  : 	TT_INLINE Vector3 Get_X_Vector() const { return Vector3(Row[0][0], Row[1][0], Row[2][0]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_X_Vector@Matrix3D@@QBE?AVVector3@@XZ ENDP		; Matrix3D::Get_X_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z
_TEXT	SEGMENT
tv270 = -92						; size = 4
tv264 = -92						; size = 4
tv258 = -92						; size = 4
tv268 = -88						; size = 4
tv262 = -88						; size = 4
tv256 = -88						; size = 4
tv266 = -84						; size = 4
tv260 = -84						; size = 4
tv254 = -84						; size = 4
_v$ = -16						; size = 4
_tmp$ = -12						; size = 12
_A$ = 8							; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z PROC ; Matrix3D::Transform_Vector, COMDAT

; 503  :    {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 504  : 		Vector3 tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 505  : 		Vector3 * v;
; 506  : 		if (out == &in)

	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR _in$[ebp]
	jne	SHORT $LN2@Transform_

; 507  : 		{
; 508  : 			tmp = in;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 509  : 			v = &tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 510  : 		}
; 511  : 		else

	jmp	SHORT $LN1@Transform_
$LN2@Transform_:

; 512  : 		{
; 513  : 			v = (Vector3 *)&in;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN1@Transform_:

; 514  : 		}
; 515  : 		out->X = (A.Row[0][0] * v->X + A.Row[0][1] * v->Y + A.Row[0][2] * v->Z + A.Row[0][3]);

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv254[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv256[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv256[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv258[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx], xmm0

; 516  : 		out->Y = (A.Row[1][0] * v->X + A.Row[1][1] * v->Y + A.Row[1][2] * v->Z + A.Row[1][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv260[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv262[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv262[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv264[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 517  : 		out->Z = (A.Row[2][0] * v->X + A.Row[2][1] * v->Y + A.Row[2][2] * v->Z + A.Row[2][3]);

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR tv266[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv268[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv270[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 518  :    }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transform_Vector@Matrix3D@@SAXABV1@ABVVector3@@PAV2@@Z ENDP ; Matrix3D::Transform_Vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 486  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 487  : 		float tmp1,tmp2;
; 488  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 489  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 490  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 491  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 492  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 493  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 494  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 495  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 496  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 497  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 473  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 474  : 		float tmp1,tmp2;
; 475  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 476  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 477  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 478  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 479  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 480  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 481  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 482  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 483  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 460  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		float tmp1,tmp2;
; 462  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 463  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 464  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 465  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 466  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 467  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 468  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 469  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 470  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 471  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		float tmp1,tmp2;
; 446  : 		float c,s;
; 447  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 448  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 449  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 450  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 451  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 452  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 453  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 454  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 455  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 456  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 457  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 458  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 428  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 429  : 		float tmp1,tmp2;
; 430  : 		float c,s;
; 431  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 432  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 433  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 434  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 435  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 436  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 437  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 438  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 439  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 440  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 441  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 442  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC		; Matrix3D::In_Place_Pre_Rotate_X, COMDAT
; _this$ = ecx

; 412  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 		float tmp1,tmp2;
; 414  : 		float c,s;
; 415  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 416  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 417  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 418  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 419  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 420  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 421  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 422  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 423  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 424  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 425  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 426  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?In_Place_Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::In_Place_Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 396  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 		float tmp1,tmp2;
; 398  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 399  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 400  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 401  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 402  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 403  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 404  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 405  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 406  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 407  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 408  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 409  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 410  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv299 = -80						; size = 4
tv297 = -80						; size = 4
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 380  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		float tmp1,tmp2;
; 382  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 383  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 384  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 385  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 386  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 387  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 388  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 389  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 390  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 391  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 392  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 393  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 394  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv295 = -80						; size = 4
tv293 = -80						; size = 4
tv291 = -80						; size = 4
tv289 = -80						; size = 4
tv287 = -80						; size = 4
tv285 = -80						; size = 4
tv283 = -80						; size = 4
tv281 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 364  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 365  : 		float tmp1,tmp2;
; 366  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 367  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax], xmm0

; 368  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax], xmm0

; 369  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 370  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax], xmm0

; 371  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR [eax], xmm0

; 372  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 373  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv289[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [eax], xmm0

; 374  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR [eax], xmm0

; 375  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 376  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 377  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 378  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Pre_Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Z, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 		float tmp1,tmp2;
; 347  : 		float c,s;
; 348  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 349  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 350  : 		tmp1 = Row[0][0]; tmp2 = Row[1][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 351  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 352  : 		Row[1][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 353  : 		tmp1 = Row[0][1]; tmp2 = Row[1][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 354  : 		Row[0][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 355  : 		Row[1][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 356  : 		tmp1 = Row[0][2]; tmp2 = Row[1][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 357  : 		Row[0][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 358  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 359  : 		tmp1 = Row[0][3]; tmp2 = Row[1][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 360  : 		Row[0][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 361  : 		Row[1][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 362  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv311 = -88						; size = 4
tv309 = -88						; size = 4
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_Y, COMDAT
; _this$ = ecx

; 326  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 327  : 		float tmp1,tmp2;
; 328  : 		float c,s;
; 329  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 330  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 331  : 		tmp1 = Row[0][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 332  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 333  : 		Row[2][0] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 334  : 		tmp1 = Row[0][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 335  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 336  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 337  : 		tmp1 = Row[0][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 338  : 		Row[0][2] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 339  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 340  : 		tmp1 = Row[0][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 341  : 		Row[0][3] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv309[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv309[ebp]
	movss	DWORD PTR [eax], xmm0

; 342  : 		Row[2][3] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv311[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv311[ebp]
	movss	DWORD PTR [eax], xmm0

; 343  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Pre_Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv307 = -88						; size = 4
tv305 = -88						; size = 4
tv303 = -88						; size = 4
tv301 = -88						; size = 4
tv299 = -88						; size = 4
tv297 = -88						; size = 4
tv295 = -88						; size = 4
tv293 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Pre_Rotate_X, COMDAT
; _this$ = ecx

; 307  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 		float tmp1,tmp2;
; 309  : 		float c,s;
; 310  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 311  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 312  : 		tmp1 = Row[1][0]; tmp2 = Row[2][0];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 313  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR [eax], xmm0

; 314  : 		Row[2][0] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR [eax], xmm0

; 315  : 		tmp1 = Row[1][1]; tmp2 = Row[2][1];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 316  : 		Row[1][1] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv297[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR [eax], xmm0

; 317  : 		Row[2][1] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv299[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [eax], xmm0

; 318  : 		tmp1 = Row[1][2]; tmp2 = Row[2][2];

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 319  : 		Row[1][2] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 320  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 321  : 		tmp1 = Row[1][3]; tmp2 = Row[2][3];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 322  : 		Row[1][3] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 323  : 		Row[2][3] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 324  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Pre_Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Pre_Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXAAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z PROC		; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 		Scale(scale.X, scale.Y, scale.Z);

	mov	eax, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _scale$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@Matrix3D@@QAEXMMM@Z		; Matrix3D::Scale

; 305  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXAAVVector3@@@Z ENDP		; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Scale@Matrix3D@@QAEXMMM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 291  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		Row[0][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 293  : 		Row[1][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 294  : 		Row[2][0] *= x;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 295  : 		Row[0][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 296  : 		Row[1][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 297  : 		Row[2][1] *= y;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 298  : 		Row[0][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 299  : 		Row[1][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 300  : 		Row[2][2] *= z;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 301  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Scale@Matrix3D@@QAEXMMM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Scale@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv158 = -72						; size = 4
tv150 = -72						; size = 4
tv142 = -72						; size = 4
tv134 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv78 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?Scale@Matrix3D@@QAEXM@Z PROC				; Matrix3D::Scale, COMDAT
; _this$ = ecx

; 279  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 		Row[0][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0

; 281  : 		Row[1][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 282  : 		Row[2][0] *= scale;

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	movss	DWORD PTR [ecx], xmm0

; 283  : 		Row[0][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 284  : 		Row[1][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm0

; 285  : 		Row[2][1] *= scale;

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 286  : 		Row[0][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	movss	DWORD PTR [ecx], xmm0

; 287  : 		Row[1][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm0

; 288  : 		Row[2][2] *= scale;

	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	movss	DWORD PTR [ecx], xmm0

; 289  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Scale@Matrix3D@@QAEXM@Z ENDP				; Matrix3D::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Z@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 		float tmp1,tmp2;
; 268  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 269  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 270  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 271  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 272  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 273  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 274  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 275  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 276  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 277  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Z@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv243 = -80						; size = 4
tv241 = -80						; size = 4
tv239 = -80						; size = 4
tv237 = -80						; size = 4
tv235 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_Y@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 253  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 254  : 		float tmp1,tmp2;
; 255  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 256  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv235[ebp]
	movss	DWORD PTR [eax], xmm0

; 257  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [eax], xmm0

; 258  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 259  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [eax], xmm0

; 260  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv241[ebp]
	movss	DWORD PTR [eax], xmm0

; 261  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 262  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv243[ebp]
	movss	DWORD PTR [eax], xmm0

; 263  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv245[ebp]
	movss	DWORD PTR [eax], xmm0

; 264  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_Y@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXMM@Z
_TEXT	SEGMENT
tv248 = -80						; size = 4
tv246 = -80						; size = 4
tv244 = -80						; size = 4
tv242 = -80						; size = 4
tv240 = -80						; size = 4
tv238 = -80						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
?Rotate_X@Matrix3D@@QAEXMM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 240  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 		float tmp1,tmp2;
; 242  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 243  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [eax], xmm0

; 244  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv240[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv240[ebp]
	movss	DWORD PTR [eax], xmm0

; 245  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 246  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv242[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv242[ebp]
	movss	DWORD PTR [eax], xmm0

; 247  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv244[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR [eax], xmm0

; 248  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 249  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR [eax], xmm0

; 250  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR [eax], xmm0

; 251  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Rotate_X@Matrix3D@@QAEXMM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_s$ = -20						; size = 4
_c$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Z, COMDAT
; _this$ = ecx

; 224  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 225  : 		float tmp1,tmp2;
; 226  : 		float c,s;
; 227  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 228  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 229  : 		tmp1 = Row[0][0]; tmp2 = Row[0][1];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 230  : 		Row[0][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 231  : 		Row[0][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 232  : 		tmp1 = Row[1][0]; tmp2 = Row[1][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 233  : 		Row[1][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 234  : 		Row[1][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 235  : 		tmp1 = Row[2][0]; tmp2 = Row[2][1];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 236  : 		Row[2][0] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 237  : 		Row[2][1] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 238  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv257 = -88						; size = 4
tv255 = -88						; size = 4
tv253 = -88						; size = 4
tv251 = -88						; size = 4
tv249 = -88						; size = 4
tv247 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_Y, COMDAT
; _this$ = ecx

; 208  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 209  : 		float tmp1,tmp2;
; 210  : 		float s,c;
; 211  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 212  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 213  : 		tmp1 = Row[0][0]; tmp2 = Row[0][2];

	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 214  : 		Row[0][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv247[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR [eax], xmm0

; 215  : 		Row[0][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR [eax], xmm0

; 216  : 		tmp1 = Row[1][0]; tmp2 = Row[1][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 217  : 		Row[1][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [eax], xmm0

; 218  : 		Row[1][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv253[ebp]
	movss	DWORD PTR [eax], xmm0

; 219  : 		tmp1 = Row[2][0]; tmp2 = Row[2][2];

	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 220  : 		Row[2][0] = (float)(c*tmp1 - s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	subss	xmm0, xmm1
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv255[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv255[ebp]
	movss	DWORD PTR [eax], xmm0

; 221  : 		Row[2][2] = (float)(s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv257[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR [eax], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Rotate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv260 = -88						; size = 4
tv258 = -88						; size = 4
tv256 = -88						; size = 4
tv254 = -88						; size = 4
tv252 = -88						; size = 4
tv250 = -88						; size = 4
_c$ = -20						; size = 4
_s$ = -16						; size = 4
_tmp2$ = -12						; size = 4
_tmp1$ = -8						; size = 4
_this$ = -4						; size = 4
_theta$ = 8						; size = 4
?Rotate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Rotate_X, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 		float tmp1,tmp2;
; 194  : 		float s,c;
; 195  : 		s = sinf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 196  : 		c = cosf(theta);

	push	ecx
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 197  : 		tmp1 = Row[0][1]; tmp2 = Row[0][2];

	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 198  : 		Row[0][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR [eax], xmm0

; 199  : 		Row[0][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax], xmm0

; 200  : 		tmp1 = Row[1][1]; tmp2 = Row[1][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 201  : 		Row[1][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv254[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv254[ebp]
	movss	DWORD PTR [eax], xmm0

; 202  : 		Row[1][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [eax], xmm0

; 203  : 		tmp1 = Row[2][1]; tmp2 = Row[2][2];

	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp1$[ebp], xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _tmp2$[ebp], xmm0

; 204  : 		Row[2][1] = (float)( c*tmp1 + s*tmp2);

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [eax], xmm0

; 205  : 		Row[2][2] = (float)(-s*tmp1 + c*tmp2);

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _tmp1$[ebp]
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _tmp2$[ebp]
	addss	xmm0, xmm1
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv260[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR [eax], xmm0

; 206  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Rotate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Z@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Translate_Z@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Z, COMDAT
; _this$ = ecx

; 186  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		Row[0][3]  += (float)(Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 188  : 		Row[1][3]  += (float)(Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 189  : 		Row[2][3]  += (float)(Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Z@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Z
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_Y@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Translate_Y@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_Y, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		Row[0][3]  += (float)(Row[0][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 182  : 		Row[1][3]  += (float)(Row[1][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 183  : 		Row[2][3]  += (float)(Row[2][1]*y);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 184  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_Y@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_Y
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate_X@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv142 = -72						; size = 4
tv94 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Translate_X@Matrix3D@@QAEXM@Z PROC			; Matrix3D::Translate_X, COMDAT
; _this$ = ecx

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		Row[0][3]  += (float)(Row[0][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv78[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv78[ebp]
	movss	DWORD PTR [ecx], xmm0

; 176  : 		Row[1][3]  += (float)(Row[1][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 177  : 		Row[2][3]  += (float)(Row[2][0]*x);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv142[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	movss	DWORD PTR [ecx], xmm0

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate_X@Matrix3D@@QAEXM@Z ENDP			; Matrix3D::Translate_X
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv278 = -80						; size = 4
tv274 = -80						; size = 4
tv270 = -80						; size = 4
tv276 = -76						; size = 4
tv272 = -76						; size = 4
tv268 = -76						; size = 4
tv214 = -72						; size = 4
tv174 = -72						; size = 4
tv134 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Translate@Matrix3D@@QAEXABVVector3@@@Z PROC		; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		Row[0][3]  += Row[0][0]*t[0] + Row[0][1]*t[1] + Row[0][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv134[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv268[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv268[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv270[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv270[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv134[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv134[ebp]
	movss	DWORD PTR [ecx], xmm1

; 170  : 		Row[1][3]  += Row[1][0]*t[0] + Row[1][1]*t[1] + Row[1][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv174[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv272[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv272[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv274[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv274[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv174[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv174[ebp]
	movss	DWORD PTR [ecx], xmm1

; 171  : 		Row[2][3]  += Row[2][0]*t[0] + Row[2][1]*t[1] + Row[2][2]*t[2];

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv214[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv276[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv276[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv278[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv278[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv214[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv214[ebp]
	movss	DWORD PTR [ecx], xmm1

; 172  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@Matrix3D@@QAEXABVVector3@@@Z ENDP		; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Translate@Matrix3D@@QAEXMMM@Z
_TEXT	SEGMENT
tv245 = -80						; size = 4
tv241 = -80						; size = 4
tv237 = -80						; size = 4
tv243 = -76						; size = 4
tv239 = -76						; size = 4
tv235 = -76						; size = 4
tv190 = -72						; size = 4
tv158 = -72						; size = 4
tv94 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Translate@Matrix3D@@QAEXMMM@Z PROC			; Matrix3D::Translate, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		Row[0][3]  += (float)(Row[0][0]*x + Row[0][1]*y + Row[0][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv94[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv235[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv235[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv237[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv94[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm1

; 164  : 		Row[1][3]  += (float)(Row[1][0]*x + Row[1][1]*y + Row[1][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv158[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv239[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv241[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv241[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv158[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv158[ebp]
	movss	DWORD PTR [ecx], xmm1

; 165  : 		Row[2][3]  += (float)(Row[2][0]*x + Row[2][1]*y + Row[2][2]*z);

	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv190[ebp], eax
	push	0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _x$[ebp]
	push	1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR tv243[ebp]
	addss	xmm1, xmm0
	push	2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv245[ebp], xmm1
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR tv245[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR tv190[ebp]
	addss	xmm1, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv190[ebp]
	movss	DWORD PTR [ecx], xmm1

; 166  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Translate@Matrix3D@@QAEXMMM@Z ENDP			; Matrix3D::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Make_Identity@Matrix3D@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Make_Identity@Matrix3D@@QAEXXZ PROC			; Matrix3D::Make_Identity, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		Row[0].Set(1.0f,0.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 158  : 		Row[1].Set(0.0f,1.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 159  : 		Row[2].Set(0.0f,0.0f,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 160  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Make_Identity@Matrix3D@@QAEXXZ ENDP			; Matrix3D::Make_Identity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Z_Translation, COMDAT
; _this$ = ecx

; 154  : 	TT_INLINE void Adjust_Z_Translation(float z) { Row[2][3] += z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_Y_Translation, COMDAT
; _this$ = ecx

; 153  : 	TT_INLINE void Adjust_Y_Translation(float y) { Row[1][3] += y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Adjust_X_Translation, COMDAT
; _this$ = ecx

; 152  : 	TT_INLINE void Adjust_X_Translation(float x) { Row[0][3] += x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Adjust_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
tv95 = -72						; size = 4
tv84 = -72						; size = 4
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Adjust_Translation, COMDAT
; _this$ = ecx

; 151  : 	TT_INLINE void Adjust_Translation(const Vector3 & t) { Row[0][3] += t[0]; Row[1][3] += t[1]; Row[2][3] += t[2]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv73[ebp], eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv73[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv84[ebp], eax
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv84[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv84[ebp]
	movss	DWORD PTR [edx], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	DWORD PTR tv95[ebp], eax
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	ecx, DWORD PTR tv95[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv95[ebp]
	movss	DWORD PTR [edx], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Adjust_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Adjust_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Z_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_z$ = 8							; size = 4
?Set_Z_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Z_Translation, COMDAT
; _this$ = ecx

; 150  : 	TT_INLINE void Set_Z_Translation(float z) { Row[2][3] = z; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Z_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Y_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?Set_Y_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_Y_Translation, COMDAT
; _this$ = ecx

; 149  : 	TT_INLINE void Set_Y_Translation(float y) { Row[1][3] = y; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Y_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_X_Translation@Matrix3D@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Set_X_Translation@Matrix3D@@QAEXM@Z PROC		; Matrix3D::Set_X_Translation, COMDAT
; _this$ = ecx

; 148  : 	TT_INLINE void Set_X_Translation(float x) { Row[0][3] = x; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_X_Translation@Matrix3D@@QAEXM@Z ENDP		; Matrix3D::Set_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Z_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Z_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Z_Translation, COMDAT
; _this$ = ecx

; 147  : 	TT_INLINE float Get_Z_Translation(void) const { return Row[2][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Z_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Z_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Y_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Y_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_Y_Translation, COMDAT
; _this$ = ecx

; 146  : 	TT_INLINE float Get_Y_Translation(void) const { return Row[1][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Y_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_Y_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_X_Translation@Matrix3D@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_X_Translation@Matrix3D@@QBEMXZ PROC		; Matrix3D::Get_X_Translation, COMDAT
; _this$ = ecx

; 145  : 	TT_INLINE float Get_X_Translation(void) const { return Row[0][3]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_X_Translation@Matrix3D@@QBEMXZ ENDP		; Matrix3D::Get_X_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z PROC	; Matrix3D::Set_Translation, COMDAT
; _this$ = ecx

; 143  : 	TT_INLINE void Set_Translation(const Vector3 & t)  { Row[0][3] = t[0]; Row[1][3] = t[1];Row[2][3] = t[2]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	1
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	push	2
	mov	ecx, DWORD PTR _t$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QAEAAMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Translation@Matrix3D@@QAEXABVVector3@@@Z ENDP	; Matrix3D::Set_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set$ = 8						; size = 4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 142  : 	TT_INLINE void Get_Translation(Vector3 * set) const { set->X = Row[0][3]; set->Y = Row[1][3]; set->Z = Row[2][3]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBEXPAVVector3@@@Z ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ PROC	; Matrix3D::Get_Translation, COMDAT
; _this$ = ecx

; 141  : 	TT_INLINE Vector3 Get_Translation(void) const { return Vector3(Row[0][3],Row[1][3],Row[2][3]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??AVector4@@QBEABMH@Z			; Vector4::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Translation@Matrix3D@@QBE?AVVector3@@XZ ENDP	; Matrix3D::Get_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		Row[0].Set(1.0f,0.0f,0.0f,position[0]);

	push	0
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 135  : 		Row[1].Set(0.0f,1.0f,0.0f,position[1]);

	push	1
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 136  : 		Row[2].Set(0.0f,0.0f,1.0f,position[2]);

	push	2
	mov	ecx, DWORD PTR _position$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 137  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXABVVector3@@@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@MM@Z
_TEXT	SEGMENT
tv368 = -80						; size = 4
tv362 = -80						; size = 4
tv356 = -80						; size = 4
tv366 = -76						; size = 4
tv360 = -76						; size = 4
tv354 = -76						; size = 4
tv364 = -72						; size = 4
tv358 = -72						; size = 4
tv352 = -72						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@MM@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 112  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 		Row[0].Set(
; 114  : 			(float)(axis[0]*axis[0] + c*(1.0f - axis[0]*axis[0])),
; 115  : 			(float)(axis[0]*axis[1]*(1.0f - c) - axis[2]*s),
; 116  : 			(float)(axis[2]*axis[0]*(1.0f - c) + axis[1]*s),
; 117  : 			0.0f
; 118  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv352[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv352[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv354[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv354[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv356[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv356[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 119  : 		Row[1].Set(
; 120  : 			(float)(axis[0]*axis[1]*(1.0f - c) + axis[2]*s),
; 121  : 			(float)(axis[1]*axis[1] + c*(1.0f - axis[1]*axis[1])),
; 122  : 			(float)(axis[1]*axis[2]*(1.0f - c) - axis[0]*s),
; 123  : 			0.0f
; 124  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv358[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv358[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv360[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv362[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv362[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 125  : 		Row[2].Set(
; 126  : 			(float)(axis[2]*axis[0]*(1.0f - c) - axis[1]*s),
; 127  : 			(float)(axis[1]*axis[2]*(1.0f - c) + axis[0]*s),
; 128  : 			(float)(axis[2]*axis[2] + c*(1 - axis[2]*axis[2])),
; 129  : 			0.0f
; 130  : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv364[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _c$[ebp]
	movss	xmm0, DWORD PTR tv364[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv366[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv366[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	2
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _axis$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	push	1
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv368[ebp], xmm0
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR tv368[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 131  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Matrix3D@@QAEXABVVector3@@MM@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@M@Z
_TEXT	SEGMENT
_s$ = -12						; size = 4
_c$ = -8						; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@M@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 106  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 		float c = cosf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 108  : 		float s = sinf(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 109  : 		Set(axis,s,c);

	push	ecx
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 110  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@Matrix3D@@QAEXABVVector3@@M@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
?Set@Matrix3D@@QAEXABVVector3@@000@Z PROC		; Matrix3D::Set, COMDAT
; _this$ = ecx

; 100  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 		Row[0].Set(x[0],y[0],z[0],pos[0]);

	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 102  : 		Row[1].Set(x[1],y[1],z[1],pos[1]);

	push	1
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 103  : 		Row[2].Set(x[2],y[2],z[2],pos[2]);

	push	2
	mov	ecx, DWORD PTR _pos$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _z$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _y$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _x$[ebp]
	call	??AVector3@@QBEABMH@Z			; Vector3::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Matrix3D@@QAEXABVVector3@@000@Z ENDP		; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m11$ = 8						; size = 4
_m12$ = 12						; size = 4
_m13$ = 16						; size = 4
_m14$ = 20						; size = 4
_m21$ = 24						; size = 4
_m22$ = 28						; size = 4
_m23$ = 32						; size = 4
_m24$ = 36						; size = 4
_m31$ = 40						; size = 4
_m32$ = 44						; size = 4
_m33$ = 48						; size = 4
_m34$ = 52						; size = 4
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z PROC			; Matrix3D::Set, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		Row[0].Set(m11,m12,m13,m14);

	push	ecx
	movss	xmm0, DWORD PTR _m14$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 96   : 		Row[1].Set(m21,m22,m23,m24);

	push	ecx
	movss	xmm0, DWORD PTR _m24$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 97   : 		Row[2].Set(m31,m32,m33,m34);

	push	ecx
	movss	xmm0, DWORD PTR _m34$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
?Set@Matrix3D@@QAEXMMMMMMMMMMMM@Z ENDP			; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ?Set@Matrix3D@@QAEXQAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Set@Matrix3D@@QAEXQAM@Z PROC				; Matrix3D::Set, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 90   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 91   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@Matrix3D@@QAEXQAM@Z ENDP				; Matrix3D::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??4Matrix3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Matrix3D@@QAEAAV0@ABV0@@Z PROC			; Matrix3D::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 70   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 71   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 72   : 		return *this; 

	mov	eax, DWORD PTR _this$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3D@@QAEAAV0@ABV0@@Z ENDP			; Matrix3D::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@ABV0@@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 61   : 	TT_INLINE Matrix3D(const Matrix3D & m)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 62   : 	{
; 63   : 		Row[0] = m.Row[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 64   : 		Row[1] = m.Row[1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 65   : 		Row[2] = m.Row[2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector4@@QAEAAV0@ABV0@@Z		; Vector4::operator=

; 66   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABV0@@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 4
??0Matrix3D@@QAE@ABVVector3@@@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 57   : 	TT_INLINE explicit Matrix3D(const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 58   : 	{
; 59   : 		Set(position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@@Z	; Matrix3D::Set

; 60   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@ABVVector3@@@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 53   : 	TT_INLINE explicit Matrix3D(const Quaternion & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 54   : 	{
; 55   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVQuaternion@@ABVVector3@@@Z ; Matrix3D::Set

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVQuaternion@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rotation$ = 8						; size = 4
_position$ = 12						; size = 4
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z PROC	; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 49   : 	TT_INLINE explicit Matrix3D(const Matrix3 & rotation,const Vector3 & position)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 50   : 	{
; 51   : 		Set(rotation,position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rotation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVMatrix3@@ABVVector3@@@Z ; Matrix3D::Set

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVMatrix3@@ABVVector3@@@Z ENDP	; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_sine$ = 12						; size = 4
_cosine$ = 16						; size = 4
??0Matrix3D@@QAE@ABVVector3@@MM@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 45   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float sine,float cosine)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 46   : 	{
; 47   : 		Set(axis,sine,cosine);

	push	ecx
	movss	xmm0, DWORD PTR _cosine$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sine$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@MM@Z	; Matrix3D::Set

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Matrix3D@@QAE@ABVVector3@@MM@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Matrix3D@@QAE@ABVVector3@@M@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 41   : 	TT_INLINE explicit Matrix3D(const Vector3	&axis,float angle)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 42   : 	{
; 43   : 		Set(axis,angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@M@Z	; Matrix3D::Set

; 44   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Matrix3D@@QAE@ABVVector3@@M@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@ABVVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pos$ = 20						; size = 4
??0Matrix3D@@QAE@ABVVector3@@000@Z PROC			; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 37   : 	TT_INLINE explicit Matrix3D(const Vector3	&x,const Vector3	&y,const Vector3	&z,const Vector3	&pos)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 38   : 	{
; 39   : 		Set(x,y,z,pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@Matrix3D@@QAEXABVVector3@@000@Z	; Matrix3D::Set

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Matrix3D@@QAE@ABVVector3@@000@Z ENDP			; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@QAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Matrix3D@@QAE@QAM@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 31   : 	TT_INLINE explicit Matrix3D(float m[12])

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 32   : 	{
; 33   : 		Row[0].Set(m[0],m[1],m[2],m[3]);

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	imul	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 34   : 		Row[1].Set(m[4],m[5],m[6],m[7]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 35   : 		Row[2].Set(m[8],m[9],m[10],m[11]);

	mov	eax, 4
	imul	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	call	?Set@Vector4@@QAEXMMMM@Z		; Vector4::Set

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@QAM@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??0Matrix3D@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_init$ = 8						; size = 1
??0Matrix3D@@QAE@_N@Z PROC				; Matrix3D::Matrix3D, COMDAT
; _this$ = ecx

; 30   : 	TT_INLINE explicit Matrix3D(bool init) { if (init) Make_Identity(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector4@@QAE@XZ		; Vector4::Vector4
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	movzx	eax, BYTE PTR _init$[ebp]
	test	eax, eax
	je	SHORT $LN2@Matrix3D
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Make_Identity@Matrix3D@@QAEXXZ		; Matrix3D::Make_Identity
$LN2@Matrix3D:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix3D@@QAE@_N@Z ENDP				; Matrix3D::Matrix3D
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QBEABVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QBEABVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 28   :    TT_INLINE const Vector4 & operator [] (int i) const { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QBEABVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\matrix3d.h
;	COMDAT ??AMatrix3D@@QAEAAVVector4@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatrix3D@@QAEAAVVector4@@H@Z PROC			; Matrix3D::operator[], COMDAT
; _this$ = ecx

; 27   :    TT_INLINE Vector4 & operator [] (int i) { return Row[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix3D@@QAEAAVVector4@@H@Z ENDP			; Matrix3D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??XVector4@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
??XVector4@@QAEAAV0@M@Z PROC				; Vector4::operator*=, COMDAT
; _this$ = ecx

; 64   : 	TT_INLINE Vector4& operator*=(float f) { X *= f; Y *= f; Z *= f; W *= f; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector4@@QAEAAV0@M@Z ENDP				; Vector4::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??ZVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator-=, COMDAT
; _this$ = ecx

; 63   : 	TT_INLINE Vector4& operator-=(const Vector4& v) { X -= v.X; Y -= v.Y; Z -= v.Z; W -= v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??YVector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator+=, COMDAT
; _this$ = ecx

; 62   : 	TT_INLINE Vector4& operator+=(const Vector4& v) { X += v.X; Y += v.Y; Z += v.Z; W += v.W; return *this;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QBEABMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 39   : 	TT_INLINE const float& operator[](int i) const { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QBEABMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??AVector4@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector4@@QAEAAMH@Z PROC				; Vector4::operator[], COMDAT
; _this$ = ecx

; 38   : 	TT_INLINE float& operator[](int i) { return (&X)[i]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector4@@QAEAAMH@Z ENDP				; Vector4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ?Set@Vector4@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
?Set@Vector4@@QAEXMMMM@Z PROC				; Vector4::Set, COMDAT
; _this$ = ecx

; 35   : 	TT_INLINE void Set(float x, float y, float z, float w) { X = x; Y = y; Z = z; W = w; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@Vector4@@QAEXMMMM@Z ENDP				; Vector4::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??4Vector4@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector4@@QAEAAV0@ABV0@@Z PROC			; Vector4::operator=, COMDAT
; _this$ = ecx

; 34   : 	TT_INLINE Vector4& operator=(const Vector4& v) { X = v.X; Y = v.Y; Z = v.Z; W = v.W; return *this; };	

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector4@@QAEAAV0@ABV0@@Z ENDP			; Vector4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
??0Vector4@@QAE@MMMM@Z PROC				; Vector4::Vector4, COMDAT
; _this$ = ecx

; 26   : 	TT_INLINE Vector4(float x, float y, float z, float w) {	X = x; Y = y; Z = z; W = w;	};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@@QAE@MMMM@Z ENDP				; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector4.h
;	COMDAT ??0Vector4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector4@@QAE@XZ PROC					; Vector4::Vector4, COMDAT
; _this$ = ecx

; 24   : 	TT_INLINE Vector4() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector4@@QAE@XZ ENDP					; Vector4::Vector4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4file_auto_ptr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z PROC			; file_auto_ptr::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z ENDP			; file_auto_ptr::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?get@file_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@file_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::get, COMDAT
; _this$ = ecx

; 202  : 	FileClass* get() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get@file_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Dfile_auto_ptr@@QAEAAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ PROC		; file_auto_ptr::operator*, COMDAT
; _this$ = ecx

; 201  : 	FileClass& operator*() { return *_Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ ENDP		; file_auto_ptr::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Bfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator FileClass *, COMDAT
; _this$ = ecx

; 200  : 	operator FileClass *() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator FileClass *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Cfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator->, COMDAT
; _this$ = ecx

; 199  : 	FileClass* operator ->() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EINIClass@@UAEPAXI@Z PROC				; INIClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1INIClass@@UAE@XZ		; INIClass::~INIClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EINIClass@@UAEPAXI@Z ENDP				; INIClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINIClass@@UAEPAXI@Z PROC				; INIClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINIClass@@UAEPAXI@Z ENDP				; INIClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4INIClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4INIClass@@QAEAAV0@ABV0@@Z PROC			; INIClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4INIClass@@QAEAAV0@ABV0@@Z ENDP			; INIClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0INIClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0INIClass@@QAE@ABV0@@Z PROC				; INIClass::INIClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INIClass@@QAE@ABV0@@Z ENDP				; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Name@INIClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Name@INIClass@@QAEPBDXZ PROC			; INIClass::Get_File_Name, COMDAT
; _this$ = ecx

; 183  : 	const char *Get_File_Name() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 		return Filename;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Name@INIClass@@QAEPBDXZ ENDP			; INIClass::Get_File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ PROC ; INIClass::Get_Section_Index, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		return *SectionIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 182  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ENDP ; INIClass::Get_Section_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ PROC ; INIClass::Get_Section_List, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return *SectionList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ENDP ; INIClass::Get_Section_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Section_Present@INIClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Section_Present@INIClass@@QBE_NPBD@Z PROC		; INIClass::Section_Present, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN3@Section_Pr
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Section_Pr
$LN3@Section_Pr:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Section_Pr:
	mov	al, BYTE PTR tv68[ebp]

; 174  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Section_Present@INIClass@@QBE_NPBD@Z ENDP		; INIClass::Section_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Is_Present@INIClass@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Is_Present@INIClass@@QBE_NPBD0@Z PROC			; INIClass::Is_Present, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@Is_Present

; 163  : 		{
; 164  : 			return Find_Entry(section,entry) != 0;

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	test	eax, eax
	je	SHORT $LN5@Is_Present
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@Is_Present
$LN5@Is_Present:
	mov	DWORD PTR tv70[ebp], 0
$LN6@Is_Present:
	mov	al, BYTE PTR tv70[ebp]
	jmp	SHORT $LN3@Is_Present

; 165  : 		}
; 166  : 		else

	jmp	SHORT $LN3@Is_Present
$LN2@Is_Present:

; 167  : 		{
; 168  : 			return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN7@Is_Present
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN8@Is_Present
$LN7@Is_Present:
	mov	DWORD PTR tv76[ebp], 0
$LN8@Is_Present:
	mov	al, BYTE PTR tv76[ebp]
$LN3@Is_Present:

; 169  : 		}
; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Is_Present@INIClass@@QBE_NPBD0@Z ENDP			; INIClass::Is_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkSaveClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z PROC			; ChunkSaveClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkSaveClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ PROC	; ChunkSaveClass::Set_Contains_Chunks, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		HeaderStack[StackIndex-1].ChunkSize |= 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*8+1028], eax

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ ENDP	; ChunkSaveClass::Set_Contains_Chunks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkLoadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z PROC			; ChunkLoadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkLoadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EWideStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EWideStringClass@@QAEPAXI@Z PROC			; WideStringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1WideStringClass@@QAE@XZ	; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EWideStringClass@@QAEPAXI@Z ENDP			; WideStringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1WideStringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WideStringClass@@QAE@XZ PROC				; WideStringClass::~WideStringClass, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@WideStringClass@@AAEXXZ

; 780  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1WideStringClass@@QAE@XZ ENDP				; WideStringClass::~WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EStringClass@@QAEPAXI@Z PROC				; StringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1StringClass@@QAE@XZ		; StringClass::~StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EStringClass@@QAEPAXI@Z ENDP				; StringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?getFormattedString@StringClass@@SA?AV1@PBDZZ
_TEXT	SEGMENT
_result$ = -8						; size = 4
_arguments$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_format$ = 12						; size = 4
?getFormattedString@StringClass@@SA?AV1@PBDZZ PROC	; StringClass::getFormattedString, COMDAT

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 232  : 		va_list arguments;
; 233  : 		StringClass result;

	push	0
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 234  : 
; 235  : 		va_start(arguments, format);

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _arguments$[ebp], eax

; 236  : 		result.Format_Args(format, arguments);

	lea	eax, DWORD PTR _arguments$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	lea	edx, DWORD PTR _result$[ebp]
	push	edx
	call	DWORD PTR __imp_?Format_Args@StringClass@@QAAHPBDABQAD@Z
	add	esp, 12					; 0000000cH

; 237  : 		va_end(arguments);

	mov	DWORD PTR _arguments$[ebp], 0

; 238  : 
; 239  : 		return result;

	push	0
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 240  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getFormattedString@StringClass@@SA?AV1@PBDZZ ENDP	; StringClass::getFormattedString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@StringClass@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@StringClass@@QAEPADXZ PROC			; StringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 477  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@StringClass@@QAEPADXZ ENDP			; StringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv74 = -92						; size = 4
tv91 = -85						; size = 1
tv88 = -84						; size = 4
tv85 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv85[ebp]
	add	edx, 1
	mov	DWORD PTR tv88[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv85[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv91[ebp], cl
	add	DWORD PTR tv85[ebp], 1
	cmp	BYTE PTR tv91[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv85[ebp]
	sub	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv74[ebp], edx
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BStringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BStringClass@@QBEPBDXZ PROC				; StringClass::operator char const *, COMDAT
; _this$ = ecx

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BStringClass@@QBEPBDXZ ENDP				; StringClass::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@ABV0@@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 279  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	int len = string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _len$[ebp], eax

; 281  : 	Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 282  : 	Store_Length(len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 283  : 	memcpy (m_Buffer, string.m_Buffer, (len+1) * sizeof (char));		

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 284  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@ABV0@@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1StringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringClass@@QAE@XZ PROC				; StringClass::~StringClass, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@StringClass@@AAEXXZ

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StringClass@@QAE@XZ ENDP				; StringClass::~StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@PBD_N@Z
_TEXT	SEGMENT
tv70 = -92						; size = 4
tv68 = -88						; size = 4
tv90 = -81						; size = 1
tv87 = -80						; size = 4
tv84 = -76						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@PBD_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 347  : 	int len=string ? (int)strlen(string) : 0;

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN5@StringClas
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	add	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
$LL7@StringClas:
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv90[ebp], al
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL7@StringClas
	mov	ecx, DWORD PTR tv84[ebp]
	sub	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@StringClas
$LN5@StringClas:
	mov	DWORD PTR tv70[ebp], 0
$LN6@StringClas:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 348  : 	if (hint_temporary || len>0)

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 349  : 	{
; 350  : 		Get_String (len+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z
$LN2@StringClas:

; 351  : 	}
; 352  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 353  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@PBD_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@ABV0@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@ABV0@_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 338  : 	if (hint_temporary || (string.Get_Length()>0))

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	test	eax, eax
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 339  : 	{
; 340  : 		Get_String (string.Get_Length()+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z
$LN2@StringClas:

; 341  : 	}
; 342  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 343  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@ABV0@_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@H_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 326  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 327  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 328  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@H_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hint_temporary$ = 8					; size = 1
??0StringClass@@QAE@_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 319  : 	Get_String (MAX_TEMP_LEN, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	push	248					; 000000f8H
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 320  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 321  : 	return ;
; 322  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0StringClass@@QAE@_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FastCriticalSectionClass@@QAE@XZ PROC		; FastCriticalSectionClass::FastCriticalSectionClass, COMDAT
; _this$ = ecx

; 110  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 111  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FastCriticalSectionClass@@QAE@XZ ENDP		; FastCriticalSectionClass::FastCriticalSectionClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??1LockClass@FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LockClass@FastCriticalSectionClass@@QAE@XZ PROC	; FastCriticalSectionClass::LockClass::~LockClass, COMDAT
; _this$ = ecx

; 102  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 			criticalSection.Leave();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Leave

; 104  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1LockClass@FastCriticalSectionClass@@QAE@XZ ENDP	; FastCriticalSectionClass::LockClass::~LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__criticalSection$ = 8					; size = 4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z PROC	; FastCriticalSectionClass::LockClass::LockClass, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __criticalSection$[ebp]
	mov	DWORD PTR [eax], ecx

; 98   : 			criticalSection.Enter();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Enter@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Enter

; 99   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ENDP	; FastCriticalSectionClass::LockClass::LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Leave@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Leave, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Flag = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Leave
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Enter@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Enter, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Enter:

; 66   : 		TT_ASSERT((size_t)&Flag % 4 == 0); // aligned to 4 bytes please

	xor	eax, eax
	jne	SHORT $LN6@Enter
	mov	eax, DWORD PTR _this$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	je	SHORT $LN3@Enter
	int	3
$LN3@Enter:

; 67   : 		for (;;)
; 68   : 		{
; 69   : 			if (_interlockedbittestandset(&Flag, 0) == 0) return;

	mov	eax, DWORD PTR _this$[ebp]
	lock	 bts	 DWORD PTR [eax], 0
	setb	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN1@Enter
	jmp	SHORT $LN8@Enter
$LN1@Enter:

; 70   : 			_mm_pause();

	pause

; 71   : 		};

	jmp	SHORT $LN3@Enter
$LN8@Enter:

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Enter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptRegistrar@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptRegistrar@@QAEAAV0@ABV0@@Z PROC		; ScriptRegistrar::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptRegistrar@@QAEAAV0@ABV0@@Z ENDP		; ScriptRegistrar::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptFactory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptFactory@@UAEPAXI@Z PROC			; ScriptFactory::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptFactory@@UAEPAXI@Z ENDP			; ScriptFactory::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptFactory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptFactory@@UAEPAXI@Z PROC			; ScriptFactory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptFactory@@UAE@XZ		; ScriptFactory::~ScriptFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptFactory@@UAEPAXI@Z ENDP			; ScriptFactory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptFactory@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptFactory@@QAEAAV0@ABV0@@Z PROC			; ScriptFactory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptFactory@@QAEAAV0@ABV0@@Z ENDP			; ScriptFactory::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptFactory@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptFactory@@QAE@ABV0@@Z PROC			; ScriptFactory::ScriptFactory, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptFactory@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptFactory@@QAE@ABV0@@Z ENDP			; ScriptFactory::ScriptFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_Basic@ActionParamsStruct@@QAEXJMHW4SoldierAIState@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_observer_id$ = 8					; size = 4
_priority$ = 12						; size = 4
_action_id$ = 16					; size = 4
_ai_state$ = 20						; size = 4
?Set_Basic@ActionParamsStruct@@QAEXJMHW4SoldierAIState@@@Z PROC ; ActionParamsStruct::Set_Basic, COMDAT
; _this$ = ecx

; 322  : 	void Set_Basic( long observer_id, float priority, int action_id, SoldierAIState ai_state = NO_AI_STATE_CHANGE ) { ObserverID = observer_id; Priority = (int)priority; ActionID = action_id; AIState = ai_state; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _observer_id$[ebp]
	mov	DWORD PTR [eax+8], ecx
	cvttss2si eax, DWORD PTR _priority$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _action_id$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ai_state$[ebp]
	mov	DWORD PTR [eax+168], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set_Basic@ActionParamsStruct@@QAEXJMHW4SoldierAIState@@@Z ENDP ; ActionParamsStruct::Set_Basic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0ActionParamsStruct@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ActionParamsStruct@@QAE@XZ PROC			; ActionParamsStruct::ActionParamsStruct, COMDAT
; _this$ = ecx

; 432  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _DONT_MOVE_ARRIVED_DIST
	movss	DWORD PTR [eax+64], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+69], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+70], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+71], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [eax+76], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+80], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+92], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+93], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+108], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+109], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+110], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+111], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+113], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+128], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+132], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+168], -1
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3

; 433  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ActionParamsStruct@@QAE@XZ ENDP			; ActionParamsStruct::ActionParamsStruct
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptImpClass@@UAEPAXI@Z PROC			; ScriptImpClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptImpClass@@UAE@XZ	; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptImpClass@@UAEPAXI@Z ENDP			; ScriptImpClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptImpClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptImpClass@@UAEPAXI@Z PROC			; ScriptImpClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptImpClass@@UAE@XZ		; ScriptImpClass::~ScriptImpClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptImpClass@@UAEPAXI@Z ENDP			; ScriptImpClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptImpClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptImpClass@@QAEAAV0@ABV0@@Z PROC			; ScriptImpClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4ScriptClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptImpClass@@QAEAAV0@ABV0@@Z ENDP			; ScriptImpClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptImpClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptImpClass@@QAE@ABV0@@Z PROC			; ScriptImpClass::ScriptImpClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ScriptClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptImpClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptImpClass@@QAE@ABV0@@Z ENDP			; ScriptImpClass::ScriptImpClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z PROC	; ScriptImpClass::Get_Bool_Parameter, COMDAT
; _this$ = ecx

; 290  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 291  :         return Get_Int_Parameter(index) != 0;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN3@Get_Bool_P
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Get_Bool_P
$LN3@Get_Bool_P:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_Bool_P:
	mov	al, BYTE PTR tv68[ebp]

; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NH@Z ENDP	; ScriptImpClass::Get_Bool_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z PROC	; ScriptImpClass::Get_Bool_Parameter, COMDAT
; _this$ = ecx

; 286  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 287  :         return Get_Int_Parameter(name) != 0;

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int_Parameter@ScriptImpClass@@QAEHPBD@Z ; ScriptImpClass::Get_Int_Parameter
	test	eax, eax
	je	SHORT $LN3@Get_Bool_P
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Get_Bool_P
$LN3@Get_Bool_P:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_Bool_P:
	mov	al, BYTE PTR tv68[ebp]

; 288  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Bool_Parameter@ScriptImpClass@@QAE_NPBD@Z ENDP	; ScriptImpClass::Get_Bool_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z PROC	; ScriptImpClass::Get_Float_Parameter, COMDAT
; _this$ = ecx

; 282  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 		return (float)atof(Get_Parameter(index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 284  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Float_Parameter@ScriptImpClass@@QAEMH@Z ENDP	; ScriptImpClass::Get_Float_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z PROC		; ScriptImpClass::Get_Int_Parameter, COMDAT
; _this$ = ecx

; 278  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 		return atoi(Get_Parameter(index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Parameter@ScriptImpClass@@QAEPBDH@Z ; ScriptImpClass::Get_Parameter
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4

; 280  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Int_Parameter@ScriptImpClass@@QAEHH@Z ENDP		; ScriptImpClass::Get_Int_Parameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Parameter_Count@ScriptImpClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Parameter_Count@ScriptImpClass@@QAEHXZ PROC	; ScriptImpClass::Get_Parameter_Count, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 		return mArgC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 276  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Parameter_Count@ScriptImpClass@@QAEHXZ ENDP	; ScriptImpClass::Get_Parameter_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ PROC ; ScriptImpClass::Register_Auto_Save_Variables, COMDAT
; _this$ = ecx

; 265  : 	virtual	void Register_Auto_Save_Variables()	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Register_Auto_Save_Variables@ScriptImpClass@@UAEXXZ ENDP ; ScriptImpClass::Register_Auto_Save_Variables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loader$ = 8						; size = 4
?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z PROC	; ScriptImpClass::Load_Data, COMDAT
; _this$ = ecx

; 264  : 	virtual void Load_Data(ScriptLoader& loader) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load_Data@ScriptImpClass@@UAEXAAVScriptLoader@@@Z ENDP	; ScriptImpClass::Load_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_saver$ = 8						; size = 4
?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z PROC	; ScriptImpClass::Save_Data, COMDAT
; _this$ = ecx

; 263  : 	virtual void Save_Data(ScriptSaver& saver) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save_Data@ScriptImpClass@@UAEXAAVScriptSaver@@@Z ENDP	; ScriptImpClass::Save_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ PROC ; ScriptImpClass::Get_Owner_Ptr, COMDAT
; _this$ = ecx

; 258  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 259  : 		return &mOwner;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 260  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Owner_Ptr@ScriptImpClass@@UAEPAPAVScriptableGameObj@@XZ ENDP ; ScriptImpClass::Get_Owner_Ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ PROC	; ScriptImpClass::Owner, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		return mOwner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 256  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Owner@ScriptImpClass@@UAEPAVScriptableGameObj@@XZ ENDP	; ScriptImpClass::Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_exiter$ = 12						; size = 4
?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Exited, COMDAT
; _this$ = ecx

; 251  :   void Exited(GameObject *obj,GameObject *exiter) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Exited@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Exited
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enterer$ = 12						; size = 4
?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Entered, COMDAT
; _this$ = ecx

; 244  :   void Entered(GameObject *obj,GameObject *enterer) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Entered@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Entered
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_poker$ = 12						; size = 4
?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Poked, COMDAT
; _this$ = ecx

; 237  :   void Poked(GameObject *obj,GameObject *poker) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Poked@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Poked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_animation_name$ = 12					; size = 4
?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z PROC ; ScriptImpClass::Animation_Complete, COMDAT
; _this$ = ecx

; 229  :   void Animation_Complete(GameObject *obj,const char *animation_name) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Animation_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@PBD@Z ENDP ; ScriptImpClass::Animation_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_number$ = 12						; size = 4
?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z PROC ; ScriptImpClass::Timer_Expired, COMDAT
; _this$ = ecx

; 221  :   void Timer_Expired(GameObject *obj,int number) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Timer_Expired@ScriptImpClass@@UAEXPAVScriptableGameObj@@H@Z ENDP ; ScriptImpClass::Timer_Expired
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_action_id$ = 12					; size = 4
_complete_reason$ = 16					; size = 4
?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z PROC ; ScriptImpClass::Action_Complete, COMDAT
; _this$ = ecx

; 212  :   void Action_Complete(GameObject *obj,int action_id,ActionCompleteReason complete_reason) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Action_Complete@ScriptImpClass@@UAEXPAVScriptableGameObj@@HW4ActionCompleteReason@@@Z ENDP ; ScriptImpClass::Action_Complete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_enemy$ = 12						; size = 4
?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Enemy_Seen, COMDAT
; _this$ = ecx

; 201  :   void Enemy_Seen(GameObject *obj,GameObject *enemy) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Enemy_Seen@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Enemy_Seen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_sound$ = 12						; size = 4
?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z PROC ; ScriptImpClass::Sound_Heard, COMDAT
; _this$ = ecx

; 193  :   void Sound_Heard(GameObject *obj,const CombatSound & sound) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Sound_Heard@ScriptImpClass@@UAEXPAVScriptableGameObj@@ABUCombatSound@@@Z ENDP ; ScriptImpClass::Sound_Heard
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_param$ = 16						; size = 4
_sender$ = 20						; size = 4
?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z PROC ; ScriptImpClass::Custom, COMDAT
; _this$ = ecx

; 184  :   void Custom(GameObject *obj,int type,int param,GameObject *sender) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Custom@ScriptImpClass@@UAEXPAVScriptableGameObj@@HH0@Z ENDP ; ScriptImpClass::Custom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_damager$ = 12						; size = 4
_amount$ = 16						; size = 4
?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z PROC ; ScriptImpClass::Damaged, COMDAT
; _this$ = ecx

; 174  :   void Damaged(GameObject *obj,GameObject *damager,float amount) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Damaged@ScriptImpClass@@UAEXPAVScriptableGameObj@@0M@Z ENDP ; ScriptImpClass::Damaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_killer$ = 12						; size = 4
?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z PROC ; ScriptImpClass::Killed, COMDAT
; _this$ = ecx

; 164  :   void Killed(GameObject *obj,GameObject *killer) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Killed@ScriptImpClass@@UAEXPAVScriptableGameObj@@0@Z ENDP ; ScriptImpClass::Killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z PROC ; ScriptImpClass::Destroyed, COMDAT
; _this$ = ecx

; 155  :   void Destroyed(GameObject *obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Destroyed@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; ScriptImpClass::Destroyed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z PROC ; ScriptImpClass::Created, COMDAT
; _this$ = ecx

; 149  :   void Created(GameObject *obj) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Created@ScriptImpClass@@UAEXPAVScriptableGameObj@@@Z ENDP ; ScriptImpClass::Created
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_factory$ = 8						; size = 4
?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z PROC ; ScriptImpClass::SetFactory, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		mFactory = factory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 138  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFactory@ScriptImpClass@@QAEXPAVScriptFactory@@@Z ENDP ; ScriptImpClass::SetFactory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EScriptClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EScriptClass@@UAEPAXI@Z PROC				; ScriptClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ScriptClass@@UAE@XZ		; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptClass@@UAE@XZ			; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EScriptClass@@UAEPAXI@Z ENDP				; ScriptClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GScriptClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScriptClass@@UAEPAXI@Z PROC				; ScriptClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScriptClass@@UAE@XZ			; ScriptClass::~ScriptClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScriptClass@@UAEPAXI@Z ENDP				; ScriptClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ScriptClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ScriptClass@@QAEAAV0@ABV0@@Z PROC			; ScriptClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ScriptClass@@QAEAAV0@ABV0@@Z ENDP			; ScriptClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ScriptClass@@QAE@ABV0@@Z PROC			; ScriptClass::ScriptClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ScriptClass@@QAE@ABV0@@Z ENDP			; ScriptClass::ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ScriptClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ScriptClass@@QAE@XZ PROC				; ScriptClass::ScriptClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameObjObserverClass@@QAE@XZ		; GameObjObserverClass::GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ScriptClass@@QAE@XZ ENDP				; ScriptClass::ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??1ScriptClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ScriptClass@@UAE@XZ PROC				; ScriptClass::~ScriptClass, COMDAT
; _this$ = ecx

; 124  : 	virtual ~ScriptClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ScriptClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1ScriptClass@@UAE@XZ ENDP				; ScriptClass::~ScriptClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EGameObjObserverClass@@UAEPAXI@Z PROC		; GameObjObserverClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1GameObjObserverClass@@UAE@XZ	; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EGameObjObserverClass@@UAEPAXI@Z ENDP		; GameObjObserverClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GGameObjObserverClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGameObjObserverClass@@UAEPAXI@Z PROC		; GameObjObserverClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameObjObserverClass@@UAE@XZ		; GameObjObserverClass::~GameObjObserverClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGameObjObserverClass@@UAEPAXI@Z ENDP		; GameObjObserverClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4GameObjObserverClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4GameObjObserverClass@@QAEAAV0@ABV0@@Z PROC		; GameObjObserverClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4GameObjObserverClass@@QAEAAV0@ABV0@@Z ENDP		; GameObjObserverClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0GameObjObserverClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0GameObjObserverClass@@QAE@ABV0@@Z PROC		; GameObjObserverClass::GameObjObserverClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0GameObjObserverClass@@QAE@ABV0@@Z ENDP		; GameObjObserverClass::GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ PROC ; GameObjObserverClass::Owner, COMDAT
; _this$ = ecx

; 117  : 	virtual GameObject* Owner() {return 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Owner@GameObjObserverClass@@UAEPAVScriptableGameObj@@XZ ENDP ; GameObjObserverClass::Owner
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Get_ID@GameObjObserverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@GameObjObserverClass@@QAEHXZ PROC		; GameObjObserverClass::Get_ID, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 101  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@GameObjObserverClass@@QAEHXZ ENDP		; GameObjObserverClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ?Set_ID@GameObjObserverClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Set_ID@GameObjObserverClass@@QAEXH@Z PROC		; GameObjObserverClass::Set_ID, COMDAT
; _this$ = ecx

; 95   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		ID = id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 97   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_ID@GameObjObserverClass@@QAEXH@Z ENDP		; GameObjObserverClass::Set_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??1GameObjObserverClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GameObjObserverClass@@UAE@XZ PROC			; GameObjObserverClass::~GameObjObserverClass, COMDAT
; _this$ = ecx

; 92   : 	virtual	~GameObjObserverClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1GameObjObserverClass@@UAE@XZ ENDP			; GameObjObserverClass::~GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\scripts.h
;	COMDAT ??0GameObjObserverClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GameObjObserverClass@@QAE@XZ PROC			; GameObjObserverClass::GameObjObserverClass, COMDAT
; _this$ = ecx

; 91   : 	GameObjObserverClass() : ID( 0 ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GameObjObserverClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0GameObjObserverClass@@QAE@XZ ENDP			; GameObjObserverClass::GameObjObserverClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Swap@@YAXAAVVector3@@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Swap@@YAXAAVVector3@@0@Z PROC				; Swap, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 399  : 	Vector3 tmp(a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector3@@QAE@ABV0@@Z			; Vector3::Vector3

; 400  : 	a = b;

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 401  : 	b = tmp;

	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	??4Vector3@@QAEAAV0@ABV0@@Z		; Vector3::operator=

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Swap@@YAXAAVVector3@@0@Z ENDP				; Swap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Subtract@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Subtract@Vector3@@SAXABV1@0PAV1@@Z PROC		; Vector3::Subtract, COMDAT

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 219  : 		set_result->X = a.X - b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 220  : 		set_result->Y = a.Y - b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 221  : 		set_result->Z = a.Z - b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtract@Vector3@@SAXABV1@0PAV1@@Z ENDP		; Vector3::Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Add@Vector3@@SAXABV1@0PAV1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_set_result$ = 16					; size = 4
?Add@Vector3@@SAXABV1@0PAV1@@Z PROC			; Vector3::Add, COMDAT

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 213  : 		set_result->X = a.X + b.X;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx], xmm0

; 214  : 		set_result->Y = a.Y + b.Y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 215  : 		set_result->Z = a.Z + b.Z;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _set_result$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 216  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add@Vector3@@SAXABV1@0PAV1@@Z ENDP			; Vector3::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??G@YA?AVVector3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??G@YA?AVVector3@@ABV0@0@Z PROC				; operator-, COMDAT

; 377  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 378  : 	return Vector3(a.X - b.X,a.Y - b.Y,a.Z - b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 379  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVVector3@@ABV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??H@YA?AVVector3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
??H@YA?AVVector3@@ABV0@0@Z PROC				; operator+, COMDAT

; 373  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 374  : 	return Vector3(a.X + b.X,a.Y + b.Y,a.Z + b.Z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 375  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVVector3@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
_a$ = 16						; size = 4
??D@YA?AVVector3@@MABV0@@Z PROC				; operator*, COMDAT

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 366  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 367  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??D@YA?AVVector3@@ABV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_k$ = 16						; size = 4
??D@YA?AVVector3@@ABV0@M@Z PROC				; operator*, COMDAT

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 362  : 	return Vector3((a.X * k),(a.Y * k),(a.Z * k));

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _k$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 363  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVector3@@ABV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??_0Vector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??_0Vector3@@QAEAAV0@M@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		X = X * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 166  : 		Y = Y * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 167  : 		Z = Z * 1.0f / k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 168  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@@QAEAAV0@M@Z ENDP				; Vector3::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??XVector3@@QAEAAV0@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??XVector3@@QAEAAV0@M@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		X = X * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 159  : 		Y = Y * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 160  : 		Z = Z * k;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 161  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 162  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@@QAEAAV0@M@Z ENDP				; Vector3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??ZVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator-=, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		X -= v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 152  : 		Y -= v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 153  : 		Z -= v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 154  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??YVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YVector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator+=, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		X += v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 145  : 		Y += v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 146  : 		Z += v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 147  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 148  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length2@Vector3@@QBEMXZ
_TEXT	SEGMENT
tv85 = -72						; size = 4
_this$ = -4						; size = 4
?Length2@Vector3@@QBEMXZ PROC				; Vector3::Length2, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		return X * X + Y * Y + Z * Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]

; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length2@Vector3@@QBEMXZ ENDP				; Vector3::Length2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Length@Vector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@Vector3@@QBEMXZ PROC				; Vector3::Length, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 		return WWMath::Sqrt(Length2());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@WWMath@@SAMM@Z			; WWMath::Sqrt
	add	esp, 4

; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector3@@QBEMXZ ENDP				; Vector3::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Normalize@Vector3@@QAEXXZ
_TEXT	SEGMENT
tv81 = -80						; size = 4
_oolen$ = -12						; size = 4
_len2$ = -8						; size = 4
_this$ = -4						; size = 4
?Normalize@Vector3@@QAEXXZ PROC				; Vector3::Normalize, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		float len2 = WWMATH_FLOAT_TINY + Length2();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length2@Vector3@@QBEMXZ		; Vector3::Length2
	fstp	DWORD PTR tv81[ebp]
	movss	xmm0, DWORD PTR tv81[ebp]
	addss	xmm0, DWORD PTR __real@02081cea
	movss	DWORD PTR _len2$[ebp], xmm0

; 76   : 		float oolen = WWMath::Inv_Sqrt(len2);

	push	ecx
	movss	xmm0, DWORD PTR _len2$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Inv_Sqrt@WWMath@@SIMM@Z		; WWMath::Inv_Sqrt
	fstp	DWORD PTR _oolen$[ebp]

; 77   : 		X *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 78   : 		Y *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 79   : 		Z *= oolen;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _oolen$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@Vector3@@QAEXXZ ENDP				; Vector3::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QBEABMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QBEABMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??AVector3@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AVector3@@QAEAAMH@Z PROC				; Vector3::operator[], COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		return (&X)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AVector3@@QAEAAMH@Z ENDP				; Vector3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ?Set@Vector3@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?Set@Vector3@@QAEXMMM@Z PROC				; Vector3::Set, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 56   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 57   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@Vector3@@QAEXMMM@Z ENDP				; Vector3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??4Vector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4Vector3@@QAEAAV0@ABV0@@Z PROC			; Vector3::operator=, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 49   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 50   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 51   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@@QAEAAV0@ABV0@@Z ENDP			; Vector3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0Vector3@@QAE@MMM@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 33   : 	TT_INLINE Vector3(float x, float y, float z)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	{
; 35   : 		X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 36   : 		Y = y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 37   : 		Z = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 38   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@@QAE@MMM@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@@QAE@ABV0@@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 27   : 	TT_INLINE Vector3(const Vector3 &v)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	{
; 29   : 		X = v.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 30   : 		Y = v.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 31   : 		Z = v.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@@QAE@ABV0@@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\vector3.h
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 23   : 	TT_INLINE Vector3()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	{
; 25   : 		X = Y = Z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 26   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ PROC		; RefArrayHelper<float,1024>::operator float *, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		return (T*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 163  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ ENDP		; RefArrayHelper<float,1024>::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4WWMath@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WWMath@@QAEAAV0@ABV0@@Z PROC				; WWMath::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WWMath@@QAEAAV0@ABV0@@Z ENDP				; WWMath::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Double@WWMath@@SA_NN@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 8
?Is_Valid_Double@WWMath@@SA_NN@Z PROC			; WWMath::Is_Valid_Double, COMDAT

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 208  : 	unsigned long * plong = (unsigned long *)(&x) + 1;

	lea	eax, DWORD PTR _x$[ebp+4]
	mov	DWORD PTR _plong$[ebp], eax

; 209  : 	unsigned long exponent = ((*plong) & 0x7FF00000) >> (32-12);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2146435072				; 7ff00000H
	shr	ecx, 20					; 00000014H
	mov	DWORD PTR _exponent$[ebp], ecx

; 210  : 	if (exponent == 0x7FF) {

	cmp	DWORD PTR _exponent$[ebp], 2047		; 000007ffH
	jne	SHORT $LN1@Is_Valid_D

; 211  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_D
$LN1@Is_Valid_D:

; 212  : 	}
; 213  : 	return true;

	mov	al, 1
$LN2@Is_Valid_D:

; 214  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Double@WWMath@@SA_NN@Z ENDP			; WWMath::Is_Valid_Double
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Is_Valid_Float@WWMath@@SA_NM@Z
_TEXT	SEGMENT
_exponent$ = -8						; size = 4
_plong$ = -4						; size = 4
_x$ = 8							; size = 4
?Is_Valid_Float@WWMath@@SA_NM@Z PROC			; WWMath::Is_Valid_Float, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 198  : 	unsigned long * plong = (unsigned long *)(&x);

	lea	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _plong$[ebp], eax

; 199  : 	unsigned long exponent = ((*plong) & 0x7F800000) >> (32-9);

	mov	eax, DWORD PTR _plong$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2139095040				; 7f800000H
	shr	ecx, 23					; 00000017H
	mov	DWORD PTR _exponent$[ebp], ecx

; 200  : 	if (exponent == 0xFF) {

	cmp	DWORD PTR _exponent$[ebp], 255		; 000000ffH
	jne	SHORT $LN1@Is_Valid_F

; 201  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@Is_Valid_F
$LN1@Is_Valid_F:

; 202  : 	}
; 203  : 	return true;

	mov	al, 1
$LN2@Is_Valid_F:

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid_Float@WWMath@@SA_NM@Z ENDP			; WWMath::Is_Valid_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Byte_To_Unit_Float@WWMath@@SAME@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
_byte$ = 8						; size = 1
?Byte_To_Unit_Float@WWMath@@SAME@Z PROC			; WWMath::Byte_To_Unit_Float, COMDAT

; 97   : 	static float Byte_To_Unit_Float(unsigned char byte) { return ((float)byte) / 255.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	movzx	eax, BYTE PTR _byte$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Byte_To_Unit_Float@WWMath@@SAME@Z ENDP			; WWMath::Byte_To_Unit_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Unit_Float_To_Byte@WWMath@@SAEM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?Unit_Float_To_Byte@WWMath@@SAEM@Z PROC			; WWMath::Unit_Float_To_Byte, COMDAT

; 96   : 	static unsigned char Unit_Float_To_Byte(float f) { return (unsigned char)(f*255.0f); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	movss	xmm0, DWORD PTR _f$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Unit_Float_To_Byte@WWMath@@SAEM@Z ENDP			; WWMath::Unit_Float_To_Byte
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJN@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 8
?Float_To_Long@WWMath@@SAJN@Z PROC			; WWMath::Float_To_Long, COMDAT

; 222  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 223  :     return _mm_cvttsd_si32(_mm_load_pd(&f));

	movupd	xmm0, XMMWORD PTR _f$[ebx]
	movapd	XMMWORD PTR $T1[ebp], xmm0
	movapd	xmm0, XMMWORD PTR $T1[ebp]
	cvttsd2si eax, xmm0

; 224  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJN@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAHHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAHHHM@Z PROC				; WWMath::Lerp, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 193  : 	return (a + (int)((b - a)*lerp));

	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	cvttss2si eax, xmm0
	add	eax, DWORD PTR _a$[ebp]

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAHHHM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SANNNM@Z
_TEXT	SEGMENT
tv73 = -72						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_lerp$ = 24						; size = 4
?Lerp@WWMath@@SANNNM@Z PROC				; WWMath::Lerp, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 188  : 	return (a + (b - a)*lerp);

	movsd	xmm0, QWORD PTR _b$[ebp]
	subsd	xmm0, QWORD PTR _a$[ebp]
	cvtss2sd xmm1, DWORD PTR _lerp$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _a$[ebp]
	movsd	QWORD PTR tv73[ebp], xmm0
	fld	QWORD PTR tv73[ebp]

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SANNNM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Lerp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lerp$ = 16						; size = 4
?Lerp@WWMath@@SAMMMM@Z PROC				; WWMath::Lerp, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 183  : 	return (a + (b - a)*lerp);

	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	mulss	xmm0, DWORD PTR _lerp$[ebp]
	addss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@WWMath@@SAMMMM@Z ENDP				; WWMath::Lerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Max@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Max@WWMath@@SAMMM@Z PROC				; WWMath::Max, COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 177  : 	if (a>b) return a;

	movss	xmm0, DWORD PTR _a$[ebp]
	comiss	xmm0, DWORD PTR _b$[ebp]
	jbe	SHORT $LN1@Max
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Max
$LN1@Max:

; 178  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Max:

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Max@WWMath@@SAMMM@Z ENDP				; WWMath::Max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Min@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Min@WWMath@@SAMMM@Z PROC				; WWMath::Min, COMDAT

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 171  : 	if (a<b) return a;

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _a$[ebp]
	jbe	SHORT $LN1@Min
	fld	DWORD PTR _a$[ebp]
	jmp	SHORT $LN2@Min
$LN1@Min:

; 172  : 	return b;

	fld	DWORD PTR _b$[ebp]
$LN2@Min:

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Min@WWMath@@SAMMM@Z ENDP				; WWMath::Min
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Wrap@WWMath@@SANNNN@Z PROC				; WWMath::Wrap, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 158  : 	if ( val >= max )	val -= (max-min);

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	movsd	xmm1, QWORD PTR _val$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 159  : 	if ( val < min )	val += (max-min);

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movsd	xmm0, QWORD PTR _max$[ebp]
	subsd	xmm0, QWORD PTR _min$[ebp]
	addsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 160  : 	if ( val < min ) {

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 161  : 		val = min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 162  : 	}
; 163  : 	if ( val > max ) {

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 164  : 		val = max;

	movsd	xmm0, QWORD PTR _max$[ebp]
	movsd	QWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 165  : 	}
; 166  : 	return val;

	fld	QWORD PTR _val$[ebp]

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SANNNN@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Wrap@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Wrap@WWMath@@SAMMMM@Z PROC				; WWMath::Wrap, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 145  : 	if ( val >= max )	val -= (max-min);

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jb	SHORT $LN4@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val$[ebp], xmm1
$LN4@Wrap:

; 146  : 	if ( val < min )	val += (max-min);

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN3@Wrap
	movss	xmm0, DWORD PTR _max$[ebp]
	subss	xmm0, DWORD PTR _min$[ebp]
	addss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN3@Wrap:

; 147  : 	if ( val < min ) {

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Wrap

; 148  : 		val = min;

	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN2@Wrap:

; 149  : 	}
; 150  : 	if ( val > max ) {

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Wrap

; 151  : 		val = max;

	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN1@Wrap:

; 152  : 	}
; 153  : 	return val;

	fld	DWORD PTR _val$[ebp]

; 154  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Wrap@WWMath@@SAMMMM@Z ENDP				; WWMath::Wrap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp_Int@WWMath@@SAHHHH@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min_val$ = 12						; size = 4
_max_val$ = 16						; size = 4
?Clamp_Int@WWMath@@SAHHHH@Z PROC			; WWMath::Clamp_Int, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 138  : 	if(val < min_val) return min_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _min_val$[ebp]
	jge	SHORT $LN2@Clamp_Int
	mov	eax, DWORD PTR _min_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN2@Clamp_Int:

; 139  : 	if(val > max_val) return max_val;

	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _max_val$[ebp]
	jle	SHORT $LN1@Clamp_Int
	mov	eax, DWORD PTR _max_val$[ebp]
	jmp	SHORT $LN3@Clamp_Int
$LN1@Clamp_Int:

; 140  : 	return val;

	mov	eax, DWORD PTR _val$[ebp]
$LN3@Clamp_Int:

; 141  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp_Int@WWMath@@SAHHHH@Z ENDP			; WWMath::Clamp_Int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SANNNN@Z
_TEXT	SEGMENT
_val$ = 8						; size = 8
_min$ = 16						; size = 8
_max$ = 24						; size = 8
?Clamp@WWMath@@SANNNN@Z PROC				; WWMath::Clamp, COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 131  : 	if(val < min) return min;

	movsd	xmm0, QWORD PTR _min$[ebp]
	comisd	xmm0, QWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	QWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 132  : 	if(val > max) return max;

	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	QWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 133  : 	return val;

	fld	QWORD PTR _val$[ebp]
$LN3@Clamp:

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SANNNN@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Clamp@WWMath@@SAMMMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?Clamp@WWMath@@SAMMMM@Z PROC				; WWMath::Clamp, COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 124  : 	if(val < min) return min;

	movss	xmm0, DWORD PTR _min$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	DWORD PTR _min$[ebp]
	jmp	SHORT $LN3@Clamp
$LN2@Clamp:

; 125  : 	if(val > max) return max;

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _max$[ebp]
	jbe	SHORT $LN1@Clamp
	fld	DWORD PTR _max$[ebp]
	jmp	SHORT $LN3@Clamp
$LN1@Clamp:

; 126  : 	return val;

	fld	DWORD PTR _val$[ebp]
$LN3@Clamp:

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clamp@WWMath@@SAMMMM@Z ENDP				; WWMath::Clamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Random_Float@WWMath@@SAMMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_min$ = 8						; size = 4
_max$ = 12						; size = 4
?Random_Float@WWMath@@SAMMM@Z PROC			; WWMath::Random_Float, COMDAT

; 118  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 119  : 	return Random_Float() * (max-min) + min; 

	call	?Random_Float@WWMath@@SAMXZ		; WWMath::Random_Float
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	xmm1, DWORD PTR _max$[ebp]
	subss	xmm1, DWORD PTR _min$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Random_Float@WWMath@@SAMMM@Z ENDP			; WWMath::Random_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z PROC		; WWMath::Fast_Is_Float_Positive, COMDAT

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 114  : 	return !((*(int *)(&val)) & 0x80000000);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2147483648			; 80000000H
	jne	SHORT $LN3@Fast_Is_Fl
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Fast_Is_Fl
$LN3@Fast_Is_Fl:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Fast_Is_Fl:
	mov	al, BYTE PTR tv66[ebp]

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Is_Float_Positive@WWMath@@SA_NABM@Z ENDP		; WWMath::Fast_Is_Float_Positive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Floor@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Floor@WWMath@@SAMM@Z PROC				; WWMath::Floor, COMDAT

; 81   : 	static float Floor(float val) { return floorf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Floor@WWMath@@SAMM@Z ENDP				; WWMath::Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Ceil@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Ceil@WWMath@@SAMM@Z PROC				; WWMath::Ceil, COMDAT

; 80   : 	static float Ceil(float val) { return ceilf(val); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_ceilf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Ceil@WWMath@@SAMM@Z ENDP				; WWMath::Ceil
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sign@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sign@WWMath@@SAMM@Z PROC				; WWMath::Sign, COMDAT

; 102  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 103  : 	if (val > 0.0f) { 

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@Sign

; 104  : 		return +1.0f; 

	fld1
	jmp	SHORT $LN3@Sign
$LN2@Sign:

; 105  : 	} 
; 106  : 	if (val < 0.0f) { 

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN1@Sign

; 107  : 		return -1.0f; 

	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN3@Sign
$LN1@Sign:

; 108  : 	} 
; 109  : 	return 0.0f; 

	fldz
$LN3@Sign:

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sign@WWMath@@SAMM@Z ENDP				; WWMath::Sign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan2@WWMath@@SAMMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
_x$ = 12						; size = 4
?Atan2@WWMath@@SAMMM@Z PROC				; WWMath::Atan2, COMDAT

; 78   : 	static float Atan2(float y,float x) { return static_cast<float>(atan2(y,x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan2@WWMath@@SAMMM@Z ENDP				; WWMath::Atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Atan@WWMath@@SAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Atan@WWMath@@SAMM@Z PROC				; WWMath::Atan, COMDAT

; 77   : 	static float Atan(float x) { return static_cast<float>(atan(x)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Atan@WWMath@@SAMM@Z ENDP				; WWMath::Atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Asin@WWMath@@SAMM@Z PROC				; WWMath::Asin, COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 307  : 	return (float)asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Asin@WWMath@@SAMM@Z ENDP				; WWMath::Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Acos@WWMath@@SAMM@Z PROC				; WWMath::Acos, COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 287  : 	return (float)acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4

; 288  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Acos@WWMath@@SAMM@Z ENDP				; WWMath::Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Asin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Asin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Asin, COMDAT

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 292  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Asin

; 293  : 		return WWMath::Asin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Asin@WWMath@@SAMM@Z			; WWMath::Asin
	add	esp, 4
	jmp	$LN12@Fast_Asin
$LN11@Fast_Asin:

; 294  : 	}
; 295  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 296  : 	int idx0=Float_To_Int_Floor(val); 

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 297  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 298  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 299  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 300  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Asin:

; 301  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Asin
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Asin
$LN6@Fast_Asin:
	int	3
$LN7@Fast_Asin:

; 302  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Asin
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Asin
$LN1@Fast_Asin:
	int	3
$LN2@Fast_Asin:

; 303  : 	return (1.0f - frac) * _FastAsinTable[idx0] + frac * _FastAsinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAsinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAsinTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Asin:

; 304  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Asin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Acos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv156 = -88						; size = 4
tv161 = -84						; size = 4
tv159 = -80						; size = 4
tv134 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Acos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Acos, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 271  : 	if (WWMath::Fabs(val) > 0.975f) {

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fabs@WWMath@@SAMM@Z			; WWMath::Fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	comiss	xmm0, DWORD PTR __real@3f79999a
	jbe	SHORT $LN11@Fast_Acos

; 272  : 		return WWMath::Acos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Acos@WWMath@@SAMM@Z			; WWMath::Acos
	add	esp, 4
	jmp	$LN12@Fast_Acos
$LN11@Fast_Acos:

; 273  : 	}
; 274  : 	val*=float(ARC_TABLE_SIZE/2);

	movss	xmm0, DWORD PTR _val$[ebp]
	mulss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR _val$[ebp], xmm0

; 275  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 276  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 277  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 278  : 	idx0+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx0$[ebp], eax

; 279  : 	idx1+=ARC_TABLE_SIZE/2;

	mov	eax, DWORD PTR _idx1$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _idx1$[ebp], eax
$LN10@Fast_Acos:

; 280  : 	TT_ASSERT((idx0 >= 0) && (idx0 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN10@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 0
	jl	SHORT $LN6@Fast_Acos
	cmp	DWORD PTR _idx0$[ebp], 1024		; 00000400H
	jl	SHORT $LN7@Fast_Acos
$LN6@Fast_Acos:
	int	3
$LN7@Fast_Acos:

; 281  : 	TT_ASSERT((idx1 >= 0) && (idx1 < ARC_TABLE_SIZE));

	xor	eax, eax
	jne	SHORT $LN7@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 0
	jl	SHORT $LN1@Fast_Acos
	cmp	DWORD PTR _idx1$[ebp], 1024		; 00000400H
	jl	SHORT $LN2@Fast_Acos
$LN1@Fast_Acos:
	int	3
$LN2@Fast_Acos:

; 282  : 	return (1.0f - frac) * _FastAcosTable[idx0] + frac * _FastAcosTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv159[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastAcosTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastAcosTable
	movss	DWORD PTR tv161[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv156[ebp], xmm1
	fld	DWORD PTR tv156[ebp]
$LN12@Fast_Acos:

; 283  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Acos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Cos@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Cos, COMDAT

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 266  : 	return 1.0f / WWMath::Fast_Cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Cos@WWMath@@SAMM@Z		; WWMath::Fast_Cos
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Cos@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv135 = -88						; size = 4
tv140 = -84						; size = 4
tv138 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Cos@WWMath@@SAMM@Z PROC				; WWMath::Fast_Cos, COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 254  : 	val+=(WWMATH_PI * 0.5f);

	movss	xmm0, DWORD PTR _val$[ebp]
	addss	xmm0, DWORD PTR __real@3fc90fdb
	movss	DWORD PTR _val$[ebp], xmm0

; 255  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 256  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 257  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 258  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 259  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 260  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 261  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv140[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv140[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv135[ebp], xmm1
	fld	DWORD PTR tv135[ebp]

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Cos@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Inv_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_val$ = 8						; size = 4
?Fast_Inv_Sin@WWMath@@SAMM@Z PROC			; WWMath::Fast_Inv_Sin, COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 249  : 	return 1.0f / WWMath::Fast_Sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Fast_Sin@WWMath@@SAMM@Z		; WWMath::Fast_Sin
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 250  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Inv_Sin@WWMath@@SAMM@Z ENDP			; WWMath::Fast_Inv_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fast_Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
tv133 = -88						; size = 4
tv138 = -84						; size = 4
tv136 = -80						; size = 4
_frac$ = -12						; size = 4
_idx1$ = -8						; size = 4
_idx0$ = -4						; size = 4
_val$ = 8						; size = 4
?Fast_Sin@WWMath@@SAMM@Z PROC				; WWMath::Fast_Sin, COMDAT

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 238  : 	val*=float(SIN_TABLE_SIZE) / (2.0f * WWMATH_PI);

	movss	xmm0, DWORD PTR __real@44800000
	divss	xmm0, DWORD PTR __real@40c90fdb
	mulss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0

; 239  : 	int idx0=Float_To_Int_Floor(val);

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?Float_To_Int_Floor@WWMath@@SAHABM@Z	; WWMath::Float_To_Int_Floor
	add	esp, 4
	mov	DWORD PTR _idx0$[ebp], eax

; 240  : 	int idx1=idx0+1;

	mov	eax, DWORD PTR _idx0$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx1$[ebp], eax

; 241  : 	float frac=val-(float)idx0;

	cvtsi2ss xmm0, DWORD PTR _idx0$[ebp]
	movss	xmm1, DWORD PTR _val$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 242  : 	idx0 = ((unsigned)idx0) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx0$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx0$[ebp], eax

; 243  : 	idx1 = ((unsigned)idx1) & (SIN_TABLE_SIZE-1);

	mov	eax, DWORD PTR _idx1$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _idx1$[ebp], eax

; 244  : 	return (1.0f - frac) * _FastSinTable[idx0] + frac * _FastSinTable[idx1];

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _frac$[ebp]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv136[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	ecx, DWORD PTR _idx0$[ebp]
	movss	xmm0, DWORD PTR tv136[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR ?_FastSinTable@@3AAV?$RefArrayHelper@M$0EAA@@@A ; _FastSinTable
	movss	DWORD PTR tv138[ebp], xmm0
	call	??B?$RefArrayHelper@M$0EAA@@@QAEPAMXZ	; RefArrayHelper<float,1024>::operator float *
	mov	edx, DWORD PTR _idx1$[ebp]
	movss	xmm0, DWORD PTR _frac$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	movss	xmm1, DWORD PTR tv138[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv133[ebp], xmm1
	fld	DWORD PTR tv133[ebp]

; 245  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fast_Sin@WWMath@@SAMM@Z ENDP				; WWMath::Fast_Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Long@WWMath@@SAJM@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
_f$ = 8							; size = 4
?Float_To_Long@WWMath@@SAJM@Z PROC			; WWMath::Float_To_Long, COMDAT

; 217  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 218  :     return _mm_cvtt_ss2si(_mm_load_ss(&f));

	movss	xmm0, DWORD PTR _f$[ebx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	cvttss2si eax, xmm0

; 219  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Float_To_Long@WWMath@@SAJM@Z ENDP			; WWMath::Float_To_Long
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Inv_Sqrt@WWMath@@SIMM@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv73 = -68						; size = 4
_number$ = 8						; size = 4
?Inv_Sqrt@WWMath@@SIMM@Z PROC				; WWMath::Inv_Sqrt, COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 342  : 	return 1.f / sqrt(number);

	push	ecx
	movss	xmm0, DWORD PTR _number$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 343  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inv_Sqrt@WWMath@@SIMM@Z ENDP				; WWMath::Inv_Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sqrt@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sqrt@WWMath@@SAMM@Z PROC				; WWMath::Sqrt, COMDAT

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 312  :     return ::sqrtf(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4

; 313  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sqrt@WWMath@@SAMM@Z ENDP				; WWMath::Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Sin@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Sin@WWMath@@SAMM@Z PROC				; WWMath::Sin, COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 233  :     return ::sin(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sin@WWMath@@SAMM@Z ENDP				; WWMath::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Cos@WWMath@@SAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?Cos@WWMath@@SAMM@Z PROC				; WWMath::Cos, COMDAT

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 228  :     return ::cos(val);

	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cos@WWMath@@SAMM@Z ENDP				; WWMath::Cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Floor@WWMath@@SAHABM@Z
_TEXT	SEGMENT
tv83 = -96						; size = 4
_r$ = -28						; size = 4
_mantissa$ = -24					; size = 4
_imask$ = -20						; size = 4
_expsign$ = -16						; size = 4
_exponent$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Floor@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Floor, COMDAT

; 326  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 327  : 	int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 328  : 	int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 329  : 	a&=0x7fffffff;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _a$[ebp], eax

; 330  : 	int exponent = (a>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 331  : 	int expsign	= ~(exponent>>31);

	mov	eax, DWORD PTR _exponent$[ebp]
	sar	eax, 31					; 0000001fH
	not	eax
	mov	DWORD PTR _expsign$[ebp], eax

; 332  : 	int imask = ( (1<<(31-(exponent))))-1;

	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _imask$[ebp], eax

; 333  : 	int mantissa = (a&((1<<23)-1));

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	mov	DWORD PTR _mantissa$[ebp], eax

; 334  : 	int r = ((unsigned int)(mantissa|(1<<23))<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	or	eax, 8388608				; 00800000H
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 335  : #pragma warning(suppress: 6290) //warning C6290: Bitwise operation on logical result: ! has higher precedence than &. Use && or (!(x & y)) instead
; 336  : 	r = ((r & expsign) ^ (sign)) + ((!((mantissa<<8)&imask)&(expsign^((a-1)>>31)))&sign);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	and	eax, DWORD PTR _imask$[ebp]
	jne	SHORT $LN3@Float_To_I
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@Float_To_I
$LN3@Float_To_I:
	mov	DWORD PTR tv83[ebp], 0
$LN4@Float_To_I:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR _expsign$[ebp]
	xor	ecx, DWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	sub	edx, 1
	sar	edx, 31					; 0000001fH
	xor	edx, DWORD PTR _expsign$[ebp]
	and	edx, DWORD PTR tv83[ebp]
	and	edx, DWORD PTR _sign$[ebp]
	add	ecx, edx
	mov	DWORD PTR _r$[ebp], ecx

; 337  : 	return r;

	mov	eax, DWORD PTR _r$[ebp]

; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Floor@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Float_To_Int_Chop@WWMath@@SAHABM@Z
_TEXT	SEGMENT
_r$ = -20						; size = 4
_exponent$ = -16					; size = 4
_mantissa$ = -12					; size = 4
_sign$ = -8						; size = 4
_a$ = -4						; size = 4
_f$ = 8							; size = 4
?Float_To_Int_Chop@WWMath@@SAHABM@Z PROC		; WWMath::Float_To_Int_Chop, COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 317  :     int a = *reinterpret_cast<const int*>(&f);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx

; 318  :     int sign = (a>>31);

	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _sign$[ebp], eax

; 319  :     int mantissa = (a&((1<<23)-1))|(1<<23);

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8388607				; 007fffffH
	or	eax, 8388608				; 00800000H
	mov	DWORD PTR _mantissa$[ebp], eax

; 320  :     int exponent = ((a&0x7fffffff)>>23)-127;

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2147483647				; 7fffffffH
	sar	eax, 23					; 00000017H
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR _exponent$[ebp], eax

; 321  :     int r = ((unsigned int)(mantissa)<<8)>>(31-exponent);

	mov	eax, DWORD PTR _mantissa$[ebp]
	shl	eax, 8
	mov	ecx, 31					; 0000001fH
	sub	ecx, DWORD PTR _exponent$[ebp]
	shr	eax, cl
	mov	DWORD PTR _r$[ebp], eax

; 322  :     return ((r ^ (sign)) - sign ) &~ (exponent>>31);

	mov	eax, DWORD PTR _r$[ebp]
	xor	eax, DWORD PTR _sign$[ebp]
	sub	eax, DWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	sar	ecx, 31					; 0000001fH
	not	ecx
	and	eax, ecx

; 323  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Float_To_Int_Chop@WWMath@@SAHABM@Z ENDP		; WWMath::Float_To_Int_Chop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\wwmath.h
;	COMDAT ?Fabs@WWMath@@SAMM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_val$ = 8						; size = 4
?Fabs@WWMath@@SAMM@Z PROC				; WWMath::Fabs, COMDAT

; 57   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 58   : 		int value=*(int*)&val;

	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 59   : 		value&=0x7fffffff;

	mov	eax, DWORD PTR _value$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _value$[ebp], eax

; 60   : 		return *(float*)&value;

	fld	DWORD PTR _value$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Fabs@WWMath@@SAMM@Z ENDP				; WWMath::Fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 133  :     return _time64(_Time);

	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 541  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 519  :         {return (floorf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 507  :         {return (atan2f(_Y, _X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?abs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?abs@@YAMM@Z PROC					; abs, COMDAT

; 499  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?abs@@YAMM@Z ENDP					; abs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv78 = -80						; size = 8
tv72 = -72						; size = 8
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv72[ebp], xmm0
	fld	QWORD PTR tv72[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv78[ebp]
	movsd	xmm0, QWORD PTR tv78[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv80[ebp], xmm0
	fld	DWORD PTR tv80[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_cos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _ceilf
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv74 = -72						; size = 8
__X$ = 8						; size = 4
_ceilf	PROC						; COMDAT

; 408  :         {return ((float)ceil((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__ceil
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ceilf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv85 = -92						; size = 4
tv83 = -88						; size = 8
tv77 = -80						; size = 8
tv75 = -72						; size = 8
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
	fld	QWORD PTR tv75[ebp]
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
	fld	QWORD PTR tv77[ebp]
	call	__CIatan2
	fstp	QWORD PTR tv83[ebp]
	movsd	xmm0, QWORD PTR tv83[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_atan_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_asin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_acos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
