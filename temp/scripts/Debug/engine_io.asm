; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\engine_io.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__GUID_11a66efa_382e_451a_9234_1e0e12ef3085
PUBLIC	__GUID_43826d1e_e718_42ee_bc55_a1e261c37bfe
PUBLIC	?FilePath@@3PADA				; FilePath
PUBLIC	?AppDataPath@@3PADA				; AppDataPath
PUBLIC	?RegPath@@3PADA					; RegPath
PUBLIC	?PathsInit@@3_NA				; PathsInit
_BSS	SEGMENT
?FilePath@@3PADA DB 0104H DUP (?)			; FilePath
?AppDataPath@@3PADA DB 0104H DUP (?)			; AppDataPath
?RegPath@@3PADA DB 0104H DUP (?)			; RegPath
?PathsInit@@3_NA DB 01H DUP (?)				; PathsInit
_BSS	ENDS
;	COMDAT __GUID_43826d1e_e718_42ee_bc55_a1e261c37bfe
CONST	SEGMENT
__GUID_43826d1e_e718_42ee_bc55_a1e261c37bfe DD 043826d1eH
	DW	0e718H
	DW	042eeH
	DB	0bcH
	DB	055H
	DB	0a1H
	DB	0e2H
	DB	061H
	DB	0c3H
	DB	07bH
	DB	0feH
CONST	ENDS
;	COMDAT __GUID_11a66efa_382e_451a_9234_1e0e12ef3085
CONST	SEGMENT
__GUID_11a66efa_382e_451a_9234_1e0e12ef3085 DD 011a66efaH
	DW	0382eH
	DW	0451aH
	DB	092H
	DB	034H
	DB	01eH
	DB	0eH
	DB	012H
	DB	0efH
	DB	030H
	DB	085H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
PUBLIC	?strrchr@@YAPADPADH@Z				; strrchr
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	??0GenericNode@@QAE@XZ				; GenericNode::GenericNode
PUBLIC	??1GenericNode@@UAE@XZ				; GenericNode::~GenericNode
PUBLIC	?Unlink@GenericNode@@QAEXXZ			; GenericNode::Unlink
PUBLIC	?Link@GenericNode@@QAEXPAV1@@Z			; GenericNode::Link
PUBLIC	?Next@GenericNode@@QBEPAV1@XZ			; GenericNode::Next
PUBLIC	?Prev@GenericNode@@QBEPAV1@XZ			; GenericNode::Prev
PUBLIC	?Is_Valid@GenericNode@@QBE_NXZ			; GenericNode::Is_Valid
PUBLIC	??_GGenericNode@@UAEPAXI@Z			; GenericNode::`scalar deleting destructor'
PUBLIC	??0GenericList@@QAE@XZ				; GenericList::GenericList
PUBLIC	??1GenericList@@UAE@XZ				; GenericList::~GenericList
PUBLIC	?First@GenericList@@QBEPAVGenericNode@@XZ	; GenericList::First
PUBLIC	?Is_Empty@GenericList@@QBE_NXZ			; GenericList::Is_Empty
PUBLIC	?Add_Tail@GenericList@@QAEXPAVGenericNode@@@Z	; GenericList::Add_Tail
PUBLIC	??_GGenericList@@UAEPAXI@Z			; GenericList::`scalar deleting destructor'
PUBLIC	??0StringClass@@QAE@H_N@Z			; StringClass::StringClass
PUBLIC	??1StringClass@@QAE@XZ				; StringClass::~StringClass
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	??BStringClass@@QBEPBDXZ			; StringClass::operator char const *
PUBLIC	?Is_Empty@StringClass@@QBE_NXZ			; StringClass::Is_Empty
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??4ChunkLoadClass@@QAEAAV0@ABV0@@Z		; ChunkLoadClass::operator=
PUBLIC	?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ	; ChunkSaveClass::Set_Contains_Chunks
PUBLIC	??4ChunkSaveClass@@QAEAAV0@ABV0@@Z		; ChunkSaveClass::operator=
PUBLIC	??1FileClass@@UAE@XZ				; FileClass::~FileClass
PUBLIC	?Tell@FileClass@@UAEHXZ				; FileClass::Tell
PUBLIC	?Get_Date_Time@FileClass@@UAEKXZ		; FileClass::Get_Date_Time
PUBLIC	?Set_Date_Time@FileClass@@UAE_NK@Z		; FileClass::Set_Date_Time
PUBLIC	?Get_File_Handle@FileClass@@UAEPAXXZ		; FileClass::Get_File_Handle
PUBLIC	??0FileClass@@QAE@XZ				; FileClass::FileClass
PUBLIC	??_GFileClass@@UAEPAXI@Z			; FileClass::`scalar deleting destructor'
PUBLIC	?Next@?$Node@PAUINIEntry@@@@QBEPAUINIEntry@@XZ	; Node<INIEntry *>::Next
PUBLIC	?Is_Valid@?$Node@PAUINIEntry@@@@QBE_NXZ		; Node<INIEntry *>::Is_Valid
PUBLIC	??0?$Node@PAUINIEntry@@@@QAE@XZ			; Node<INIEntry *>::Node<INIEntry *>
PUBLIC	??1?$Node@PAUINIEntry@@@@UAE@XZ			; Node<INIEntry *>::~Node<INIEntry *>
PUBLIC	??_G?$Node@PAUINIEntry@@@@UAEPAXI@Z		; Node<INIEntry *>::`scalar deleting destructor'
PUBLIC	??1INIEntry@@UAE@XZ				; INIEntry::~INIEntry
PUBLIC	??0INIEntry@@QAE@PAD0@Z				; INIEntry::INIEntry
PUBLIC	??_GINIEntry@@UAEPAXI@Z				; INIEntry::`scalar deleting destructor'
PUBLIC	?Next@?$Node@PAUINISection@@@@QBEPAUINISection@@XZ ; Node<INISection *>::Next
PUBLIC	?Is_Valid@?$Node@PAUINISection@@@@QBE_NXZ	; Node<INISection *>::Is_Valid
PUBLIC	??0?$Node@PAUINISection@@@@QAE@XZ		; Node<INISection *>::Node<INISection *>
PUBLIC	??1?$Node@PAUINISection@@@@UAE@XZ		; Node<INISection *>::~Node<INISection *>
PUBLIC	??_G?$Node@PAUINISection@@@@UAEPAXI@Z		; Node<INISection *>::`scalar deleting destructor'
PUBLIC	??0?$List@PAUINIEntry@@@@QAE@XZ			; List<INIEntry *>::List<INIEntry *>
PUBLIC	?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ	; List<INIEntry *>::First
PUBLIC	?Delete@?$List@PAUINIEntry@@@@QAEXXZ		; List<INIEntry *>::Delete
PUBLIC	??1?$List@PAUINIEntry@@@@UAE@XZ			; List<INIEntry *>::~List<INIEntry *>
PUBLIC	??_G?$List@PAUINIEntry@@@@UAEPAXI@Z		; List<INIEntry *>::`scalar deleting destructor'
PUBLIC	??0?$IndexClass@HPAUINIEntry@@@@QAE@XZ		; IndexClass<int,INIEntry *>::IndexClass<int,INIEntry *>
PUBLIC	??1?$IndexClass@HPAUINIEntry@@@@QAE@XZ		; IndexClass<int,INIEntry *>::~IndexClass<int,INIEntry *>
PUBLIC	?Remove_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ; IndexClass<int,INIEntry *>::Remove_Index
PUBLIC	?Is_Present@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ; IndexClass<int,INIEntry *>::Is_Present
PUBLIC	?Add_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABHABQAUINIEntry@@@Z ; IndexClass<int,INIEntry *>::Add_Index
PUBLIC	?Count@?$IndexClass@HPAUINIEntry@@@@QBEHXZ	; IndexClass<int,INIEntry *>::Count
PUBLIC	?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ; IndexClass<int,INIEntry *>::Invalidate_Archive
PUBLIC	?Clear@?$IndexClass@HPAUINIEntry@@@@QAEXXZ	; IndexClass<int,INIEntry *>::Clear
PUBLIC	?Is_Archive_Same@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ; IndexClass<int,INIEntry *>::Is_Archive_Same
PUBLIC	?Search_For_Node@?$IndexClass@HPAUINIEntry@@@@QAEPAUNodeElement@1@ABH@Z ; IndexClass<int,INIEntry *>::Search_For_Node
PUBLIC	?Set_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXPBUNodeElement@1@@Z ; IndexClass<int,INIEntry *>::Set_Archive
PUBLIC	?Increase_Table_Size@?$IndexClass@HPAUINIEntry@@@@QAE_NH@Z ; IndexClass<int,INIEntry *>::Increase_Table_Size
PUBLIC	?search_compfunc@?$IndexClass@HPAUINIEntry@@@@SAHPBX0@Z ; IndexClass<int,INIEntry *>::search_compfunc
PUBLIC	??1INISection@@UAE@XZ				; INISection::~INISection
PUBLIC	?Find_Entry@INISection@@QAEPAUINIEntry@@PBD@Z	; INISection::Find_Entry
PUBLIC	??0INISection@@QAE@PAD@Z			; INISection::INISection
PUBLIC	??_GINISection@@UAEPAXI@Z			; INISection::`scalar deleting destructor'
PUBLIC	?Strip_Comments@INIClass@@SAXPAD@Z		; INIClass::Strip_Comments
PUBLIC	?CRC@INIClass@@SAHPAD@Z				; INIClass::CRC
PUBLIC	?DuplicateCRCError@INIClass@@QAEXPBD00@Z	; INIClass::DuplicateCRCError
PUBLIC	??0INIClass@@QAE@XZ				; INIClass::INIClass
PUBLIC	??0INIClass@@QAE@AAVFileClass@@@Z		; INIClass::INIClass
PUBLIC	?Initialize@INIClass@@QAEXXZ			; INIClass::Initialize
PUBLIC	?Shutdown@INIClass@@QAEXXZ			; INIClass::Shutdown
PUBLIC	?Clear@INIClass@@QAE_NPAD0@Z			; INIClass::Clear
PUBLIC	?Get_Int@INIClass@@QBEHPBD0H@Z			; INIClass::Get_Int
PUBLIC	?Get_Color_UInt@INIClass@@QBEIPBD0I@Z		; INIClass::Get_Color_UInt
PUBLIC	?Get_Float@INIClass@@QBEMPBD0M@Z		; INIClass::Get_Float
PUBLIC	?Get_Bool@INIClass@@QBE_NPBD0_N@Z		; INIClass::Get_Bool
PUBLIC	?Get_String@INIClass@@QBEHPBD00PADH@Z		; INIClass::Get_String
PUBLIC	?Get_String_Advanced@INIClass@@QBEHPBD00PADH_N@Z ; INIClass::Get_String_Advanced
PUBLIC	?Get_String@INIClass@@QBEAAVStringClass@@AAV2@PBD11@Z ; INIClass::Get_String
PUBLIC	?Get_String_Advanced@INIClass@@QBEAAVStringClass@@AAV2@PBD11_N@Z ; INIClass::Get_String_Advanced
PUBLIC	?Get_Wide_String@INIClass@@QBEAAVWideStringClass@@AAV2@PBD1PB_W@Z ; INIClass::Get_Wide_String
PUBLIC	?Put_Wide_String@INIClass@@QAE_NPBD0PB_W@Z	; INIClass::Put_Wide_String
PUBLIC	?Put_String@INIClass@@QAE_NPBD00@Z		; INIClass::Put_String
PUBLIC	?Put_Int@INIClass@@QAE_NPBD0HH@Z		; INIClass::Put_Int
PUBLIC	?Put_Bool@INIClass@@QAE_NPBD0_N@Z		; INIClass::Put_Bool
PUBLIC	?Put_Float@INIClass@@QAE_NPBD0M@Z		; INIClass::Put_Float
PUBLIC	?Entry_Count@INIClass@@QBEHPBD@Z		; INIClass::Entry_Count
PUBLIC	?Get_Entry@INIClass@@QBEPBDPBDH@Z		; INIClass::Get_Entry
PUBLIC	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z	; INIClass::Find_Entry
PUBLIC	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z	; INIClass::Find_Section
PUBLIC	??1INIClass@@UAE@XZ				; INIClass::~INIClass
PUBLIC	?Load@INIClass@@QAEHAAVStraw@@@Z		; INIClass::Load
PUBLIC	?Load@INIClass@@QAEHAAVFileClass@@@Z		; INIClass::Load
PUBLIC	?Load@INIClass@@QAEHPAD@Z			; INIClass::Load
PUBLIC	?Save@INIClass@@QAEHAAVFileClass@@@Z		; INIClass::Save
PUBLIC	?Save@INIClass@@QAEHAAVPipe@@@Z			; INIClass::Save
PUBLIC	?Section_Count@INIClass@@QBEHXZ			; INIClass::Section_Count
PUBLIC	?Is_Present@INIClass@@QBE_NPBD0@Z		; INIClass::Is_Present
PUBLIC	?Section_Present@INIClass@@QBE_NPBD@Z		; INIClass::Section_Present
PUBLIC	?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ; INIClass::Get_Section_List
PUBLIC	?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ; INIClass::Get_Section_Index
PUBLIC	?Get_File_Name@INIClass@@QAEPBDXZ		; INIClass::Get_File_Name
PUBLIC	??0INIClass@@QAE@ABV0@@Z			; INIClass::INIClass
PUBLIC	??4INIClass@@QAEAAV0@ABV0@@Z			; INIClass::operator=
PUBLIC	??_GINIClass@@UAEPAXI@Z				; INIClass::`scalar deleting destructor'
PUBLIC	??_EINIClass@@UAEPAXI@Z				; INIClass::`vector deleting destructor'
PUBLIC	??0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z ; file_auto_ptr::file_auto_ptr
PUBLIC	??1file_auto_ptr@@QAE@XZ			; file_auto_ptr::~file_auto_ptr
PUBLIC	??Cfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator->
PUBLIC	??Bfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator FileClass *
PUBLIC	??Dfile_auto_ptr@@QAEAAVFileClass@@XZ		; file_auto_ptr::operator*
PUBLIC	?get@file_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::get
PUBLIC	??4file_auto_ptr@@QAEAAV0@ABV0@@Z		; file_auto_ptr::operator=
PUBLIC	?Get_Data_File@@YAPAVFileClass@@PBD@Z		; Get_Data_File
PUBLIC	?Close_Data_File@@YAXPAVFileClass@@@Z		; Close_Data_File
PUBLIC	?Get_INI@@YAPAVINIClass@@PBD@Z			; Get_INI
PUBLIC	?Release_INI@@YAXPAVINIClass@@@Z		; Release_INI
PUBLIC	?Get_Registry_Int@@YAIPBDH@Z			; Get_Registry_Int
PUBLIC	?Get_File_Path@@YAPBDXZ				; Get_File_Path
PUBLIC	?Get_App_Data_Path@@YAPBDXZ			; Get_App_Data_Path
PUBLIC	?Get_Registry_Path@@YAPBDXZ			; Get_Registry_Path
PUBLIC	?Strip_Path_From_Filename@@YAXAAVStringClass@@PBD@Z ; Strip_Path_From_Filename
PUBLIC	??0Straw@@QAE@ABV0@@Z				; Straw::Straw
PUBLIC	??4Straw@@QAEAAV0@ABV0@@Z			; Straw::operator=
PUBLIC	??_GStraw@@UAEPAXI@Z				; Straw::`scalar deleting destructor'
PUBLIC	??_EStraw@@UAEPAXI@Z				; Straw::`vector deleting destructor'
PUBLIC	??0Buffer@@QAE@J@Z				; Buffer::Buffer
PUBLIC	?Get_Buffer@Buffer@@QAEPAXXZ			; Buffer::Get_Buffer
PUBLIC	?Get_Size@Buffer@@QAEJXZ			; Buffer::Get_Size
PUBLIC	??4Buffer@@QAEAAV0@ABV0@@Z			; Buffer::operator=
PUBLIC	??0BufferStraw@@QAE@ABV0@@Z			; BufferStraw::BufferStraw
PUBLIC	??4BufferStraw@@QAEAAV0@ABV0@@Z			; BufferStraw::operator=
PUBLIC	??_GBufferStraw@@UAEPAXI@Z			; BufferStraw::`scalar deleting destructor'
PUBLIC	??_EBufferStraw@@UAEPAXI@Z			; BufferStraw::`vector deleting destructor'
PUBLIC	??0FileStraw@@QAE@ABV0@@Z			; FileStraw::FileStraw
PUBLIC	??4FileStraw@@QAEAAV0@ABV0@@Z			; FileStraw::operator=
PUBLIC	??_GFileStraw@@UAEPAXI@Z			; FileStraw::`scalar deleting destructor'
PUBLIC	??_EFileStraw@@UAEPAXI@Z			; FileStraw::`vector deleting destructor'
PUBLIC	??0CacheStraw@@QAE@H@Z				; CacheStraw::CacheStraw
PUBLIC	?Is_Valid@CacheStraw@@QAE_NXZ			; CacheStraw::Is_Valid
PUBLIC	??1CacheStraw@@UAE@XZ				; CacheStraw::~CacheStraw
PUBLIC	?Get@CacheStraw@@UAEHPAXH@Z			; CacheStraw::Get
PUBLIC	??0CacheStraw@@QAE@ABV0@@Z			; CacheStraw::CacheStraw
PUBLIC	??4CacheStraw@@QAEAAV0@ABV0@@Z			; CacheStraw::operator=
PUBLIC	??_GCacheStraw@@UAEPAXI@Z			; CacheStraw::`scalar deleting destructor'
PUBLIC	??_ECacheStraw@@UAEPAXI@Z			; CacheStraw::`vector deleting destructor'
PUBLIC	??0Pipe@@QAE@XZ					; Pipe::Pipe
PUBLIC	??1Pipe@@UAE@XZ					; Pipe::~Pipe
PUBLIC	?Flush@Pipe@@UAEHXZ				; Pipe::Flush
PUBLIC	?End@Pipe@@UAEHXZ				; Pipe::End
PUBLIC	?Put_To@Pipe@@UAEXPAV1@@Z			; Pipe::Put_To
PUBLIC	?Put@Pipe@@UAEHPBXH@Z				; Pipe::Put
PUBLIC	??0Pipe@@QAE@ABV0@@Z				; Pipe::Pipe
PUBLIC	??4Pipe@@QAEAAV0@ABV0@@Z			; Pipe::operator=
PUBLIC	??_GPipe@@UAEPAXI@Z				; Pipe::`scalar deleting destructor'
PUBLIC	??_EPipe@@UAEPAXI@Z				; Pipe::`vector deleting destructor'
PUBLIC	??0FilePipe@@QAE@PAVFileClass@@@Z		; FilePipe::FilePipe
PUBLIC	??1FilePipe@@UAE@XZ				; FilePipe::~FilePipe
PUBLIC	?End@FilePipe@@UAEHXZ				; FilePipe::End
PUBLIC	?Put@FilePipe@@UAEHPBXH@Z			; FilePipe::Put
PUBLIC	??_GFilePipe@@UAEPAXI@Z				; FilePipe::`scalar deleting destructor'
PUBLIC	?Is_Hash_Checked@RawFileClass@@UAE_NXZ		; RawFileClass::Is_Hash_Checked
PUBLIC	?Is_Biased@RawFileClass@@QAE_NXZ		; RawFileClass::Is_Biased
PUBLIC	??0RawFileClass@@QAE@XZ				; RawFileClass::RawFileClass
PUBLIC	?Reset@RawFileClass@@QAEXXZ			; RawFileClass::Reset
PUBLIC	??1RawFileClass@@UAE@XZ				; RawFileClass::~RawFileClass
PUBLIC	?File_Name@RawFileClass@@UAEPBDXZ		; RawFileClass::File_Name
PUBLIC	?Set_Name@RawFileClass@@UAEPBDPBD@Z		; RawFileClass::Set_Name
PUBLIC	?Create@RawFileClass@@UAE_NXZ			; RawFileClass::Create
PUBLIC	?Delete@RawFileClass@@UAE_NXZ			; RawFileClass::Delete
PUBLIC	?Is_Available@RawFileClass@@UAE_NH@Z		; RawFileClass::Is_Available
PUBLIC	?Is_Open@RawFileClass@@UAE_NXZ			; RawFileClass::Is_Open
PUBLIC	?Open@RawFileClass@@UAEHPBDH@Z			; RawFileClass::Open
PUBLIC	?Open@RawFileClass@@UAEHH@Z			; RawFileClass::Open
PUBLIC	?Read@RawFileClass@@UAEHPAXH@Z			; RawFileClass::Read
PUBLIC	?Seek@RawFileClass@@UAEHHH@Z			; RawFileClass::Seek
PUBLIC	?Raw_Seek@RawFileClass@@QAEHHH@Z		; RawFileClass::Raw_Seek
PUBLIC	?Size@RawFileClass@@UAEHXZ			; RawFileClass::Size
PUBLIC	?Write@RawFileClass@@UAEHPAXH@Z			; RawFileClass::Write
PUBLIC	?Close@RawFileClass@@UAEXXZ			; RawFileClass::Close
PUBLIC	?Get_Date_Time@RawFileClass@@UAEKXZ		; RawFileClass::Get_Date_Time
PUBLIC	?Set_Date_Time@RawFileClass@@UAE_NK@Z		; RawFileClass::Set_Date_Time
PUBLIC	?Error@RawFileClass@@UAEXHHPBD@Z		; RawFileClass::Error
PUBLIC	?Get_File_Handle@RawFileClass@@UAEPAXXZ		; RawFileClass::Get_File_Handle
PUBLIC	?Bias@RawFileClass@@UAEXHH@Z			; RawFileClass::Bias
PUBLIC	?Attach@RawFileClass@@UAEXPAXH@Z		; RawFileClass::Attach
PUBLIC	?Detach@RawFileClass@@UAEXXZ			; RawFileClass::Detach
PUBLIC	??_GRawFileClass@@UAEPAXI@Z			; RawFileClass::`scalar deleting destructor'
PUBLIC	??$clamp@H@@YAHHHH@Z				; clamp<int>
PUBLIC	??0BufferedFileClass@@QAE@XZ			; BufferedFileClass::BufferedFileClass
PUBLIC	??1BufferedFileClass@@UAE@XZ			; BufferedFileClass::~BufferedFileClass
PUBLIC	?Read@BufferedFileClass@@UAEHPAXH@Z		; BufferedFileClass::Read
PUBLIC	?Seek@BufferedFileClass@@UAEHHH@Z		; BufferedFileClass::Seek
PUBLIC	?Write@BufferedFileClass@@UAEHPAXH@Z		; BufferedFileClass::Write
PUBLIC	?Close@BufferedFileClass@@UAEXXZ		; BufferedFileClass::Close
PUBLIC	?Reset_Buffer@BufferedFileClass@@QAEXXZ		; BufferedFileClass::Reset_Buffer
PUBLIC	??_GBufferedFileClass@@UAEPAXI@Z		; BufferedFileClass::`scalar deleting destructor'
PUBLIC	??$ResolveGameReference@PAVFileFactoryClass@@@@YAAAPAVFileFactoryClass@@HHH@Z ; ResolveGameReference<FileFactoryClass *>
PUBLIC	?Read_Paths@@YAXXZ				; Read_Paths
PUBLIC	??0?$IndexClass@HPAUINISection@@@@QAE@XZ	; IndexClass<int,INISection *>::IndexClass<int,INISection *>
PUBLIC	??1?$IndexClass@HPAUINISection@@@@QAE@XZ	; IndexClass<int,INISection *>::~IndexClass<int,INISection *>
PUBLIC	?Remove_Index@?$IndexClass@HPAUINISection@@@@QAE_NABH@Z ; IndexClass<int,INISection *>::Remove_Index
PUBLIC	?Add_Index@?$IndexClass@HPAUINISection@@@@QAE_NABHABQAUINISection@@@Z ; IndexClass<int,INISection *>::Add_Index
PUBLIC	?Count@?$IndexClass@HPAUINISection@@@@QBEHXZ	; IndexClass<int,INISection *>::Count
PUBLIC	?Invalidate_Archive@?$IndexClass@HPAUINISection@@@@QAEXXZ ; IndexClass<int,INISection *>::Invalidate_Archive
PUBLIC	?Clear@?$IndexClass@HPAUINISection@@@@QAEXXZ	; IndexClass<int,INISection *>::Clear
PUBLIC	?Increase_Table_Size@?$IndexClass@HPAUINISection@@@@QAE_NH@Z ; IndexClass<int,INISection *>::Increase_Table_Size
PUBLIC	??_G?$IndexClass@HPAUINISection@@@@QAEPAXI@Z	; IndexClass<int,INISection *>::`scalar deleting destructor'
PUBLIC	?Read_Line@@YAHAAVStraw@@PADHAA_N@Z		; Read_Line
PUBLIC	??0?$List@PAUINISection@@@@QAE@XZ		; List<INISection *>::List<INISection *>
PUBLIC	?First@?$List@PAUINISection@@@@QBEPAUINISection@@XZ ; List<INISection *>::First
PUBLIC	?Delete@?$List@PAUINISection@@@@QAEXXZ		; List<INISection *>::Delete
PUBLIC	??1?$List@PAUINISection@@@@UAE@XZ		; List<INISection *>::~List<INISection *>
PUBLIC	??_G?$List@PAUINISection@@@@UAEPAXI@Z		; List<INISection *>::`scalar deleting destructor'
PUBLIC	??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@ABHABQAUINIEntry@@@Z ; IndexClass<int,INIEntry *>::NodeElement::NodeElement
PUBLIC	??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@XZ ; IndexClass<int,INIEntry *>::NodeElement::NodeElement
PUBLIC	??8NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z ; IndexClass<int,INIEntry *>::NodeElement::operator==
PUBLIC	??MNodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z ; IndexClass<int,INIEntry *>::NodeElement::operator<
PUBLIC	??0NodeElement@?$IndexClass@HPAUINISection@@@@QAE@XZ ; IndexClass<int,INISection *>::NodeElement::NodeElement
PUBLIC	??$Binary_Search@UNodeElement@?$IndexClass@HPAUINIEntry@@@@@@YAPAUNodeElement@?$IndexClass@HPAUINIEntry@@@@PAU01@HAAU01@@Z ; Binary_Search<IndexClass<int,INIEntry *>::NodeElement>
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_7GenericNode@@6B@				; GenericNode::`vftable'
PUBLIC	??_7GenericList@@6B@				; GenericList::`vftable'
PUBLIC	??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_7FileClass@@6B@				; FileClass::`vftable'
PUBLIC	??_7?$Node@PAUINIEntry@@@@6B@			; Node<INIEntry *>::`vftable'
PUBLIC	??_7INIEntry@@6B@				; INIEntry::`vftable'
PUBLIC	??_C@_0BE@NLFCMBPK@INIEntry?3?3?$HOINIEntry?$AA@ ; `string'
PUBLIC	??_C@_0DF@OBDLAGEP@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GK@FAFJBHHM@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_7?$Node@PAUINISection@@@@6B@			; Node<INISection *>::`vftable'
PUBLIC	??_7?$List@PAUINIEntry@@@@6B@			; List<INIEntry *>::`vftable'
PUBLIC	??_7INISection@@6B@				; INISection::`vftable'
PUBLIC	??_C@_0BI@MNFJCFIP@INISection?3?3?$HOINISection?$AA@ ; `string'
PUBLIC	??_7INIClass@@6B@				; INIClass::`vftable'
PUBLIC	?_TheFileFactory@@3AAPAVFileFactoryClass@@A	; _TheFileFactory
PUBLIC	??_7Straw@@6B@					; Straw::`vftable'
PUBLIC	??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@		; `string'
PUBLIC	??_C@_0DB@KAPDHD@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GC@DMMDNGMD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_7BufferStraw@@6B@				; BufferStraw::`vftable'
PUBLIC	??_7FileStraw@@6B@				; FileStraw::`vftable'
PUBLIC	??_7CacheStraw@@6B@				; CacheStraw::`vftable'
PUBLIC	??_7Pipe@@6B@					; Pipe::`vftable'
PUBLIC	??_7FilePipe@@6B@				; FilePipe::`vftable'
PUBLIC	??_7RawFileClass@@6B@				; RawFileClass::`vftable'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7BufferedFileClass@@6B@			; BufferedFileClass::`vftable'
PUBLIC	??_C@_0BI@LFKJEOO@BufferedFileClass?3?3Read?$AA@ ; `string'
PUBLIC	??_C@_0DN@NGCACKDA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HK@BLILCDCH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0CA@LMFINKNE@BufferedFileClass?3?3Reset_Buffer?$AA@ ; `string'
PUBLIC	??_C@_09HCHIHKFJ@paths?4ini?$AA@		; `string'
PUBLIC	??_C@_08LAFABFGE@Westwood?$AA@			; `string'
PUBLIC	??_C@_07KODFFKCJ@RegBase?$AA@			; `string'
PUBLIC	??_C@_05EHMGIKAG@paths?$AA@			; `string'
PUBLIC	??_C@_08KBDFECAK@Renegade?$AA@			; `string'
PUBLIC	??_C@_09PGFLEEKF@RegClient?$AA@			; `string'
PUBLIC	??_C@_0M@MBBBEALJ@RenegadeFDS?$AA@		; `string'
PUBLIC	??_C@_06PNIIMBMB@RegFDS?$AA@			; `string'
PUBLIC	??_C@_08IAGBEAJA@FileBase?$AA@			; `string'
PUBLIC	??_C@_06PJIGMIJB@Client?$AA@			; `string'
PUBLIC	??_C@_0L@DODOIGHK@FileClient?$AA@		; `string'
PUBLIC	??_C@_03IGMBAMIJ@FDS?$AA@			; `string'
PUBLIC	??_C@_07BNJPPJLM@FileFDS?$AA@			; `string'
PUBLIC	??_C@_0N@JNOHGBBN@UseRenFolder?$AA@		; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_09OIHOKJLD@Software?2?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Get_INI@@YAPAVINIClass@@PBD@Z@4JA ; `Get_INI'::`2'::__LINE__Var
PUBLIC	??_C@_07PHFINMNM@Get_INI?$AA@			; `string'
PUBLIC	??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?1??Release_INI@@YAXPAVINIClass@@@Z@4JA ; `Release_INI'::`2'::__LINE__Var
PUBLIC	??_C@_0M@DGNOAIDN@Release_INI?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Load@INIClass@@QAEHAAVFileClass@@@Z@4JA ; `INIClass::Load'::`2'::__LINE__Var
PUBLIC	??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA ; `INIClass::Load'::`2'::__LINE__Var
PUBLIC	??_7?$List@PAUINISection@@@@6B@			; List<INISection *>::`vftable'
PUBLIC	??_C@_03CIILGPHP@$?$CFx?$AA@			; `string'
PUBLIC	??_C@_03LOJBKHKI@?$CFxh?$AA@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??Initialize@INIClass@@QAEXXZ@4JA ; `INIClass::Initialize'::`2'::__LINE__Var
PUBLIC	??_C@_0BF@BAMGKENB@INIClass?3?3Initialize?$AA@	; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA	; `INIClass::Shutdown'::`2'::__LINE__Var
PUBLIC	??_C@_0BD@BKLIDOBA@INIClass?3?3Shutdown?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA ; `INIClass::Clear'::`2'::__LINE__Var
PUBLIC	??_C@_0BA@NFMHJJNN@INIClass?3?3Clear?$AA@	; `string'
PUBLIC	??_C@_05FAHENKCB@?$CFsHex?$AA@			; `string'
PUBLIC	??_C@_0L@BHNCPNHJ@0xNotValid?$AA@		; `string'
PUBLIC	??_C@_03OPHMLOFF@?$CFlx?$AA@			; `string'
PUBLIC	??_C@_07DPBAKFHF@?$CFsAlpha?$AA@		; `string'
PUBLIC	??_C@_05IJKHDAIH@?$CFsRed?$AA@			; `string'
PUBLIC	??_C@_07NOBOEHLK@?$CFsGreen?$AA@		; `string'
PUBLIC	??_C@_06GLNDDPBO@?$CFsBlue?$AA@			; `string'
PUBLIC	??_C@_0DA@LBAEEJJ@?$CFs?5?9?5Duplicate?5Entry?5?$CC?$CFs?$CC?5in?5sec@ ; `string'
PUBLIC	??_C@_0BL@MCNMCOPK@Duplicate?5CRC?5in?5INI?5file?4?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Load@INIClass@@QAEHPAD@Z@4JA	; `INIClass::Load'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??Save@INIClass@@QAEHAAVFileClass@@@Z@4JA ; `INIClass::Save'::`2'::__LINE__Var
PUBLIC	??_C@_0P@PBFFLOEA@INIClass?3?3Save?$AA@		; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA ; `INIClass::Put_String'::`2'::__LINE__Var
PUBLIC	??_C@_0BF@EKGBNGFP@INIClass?3?3Put_String?$AA@	; `string'
PUBLIC	??_C@_03IGNMOBEI@?$CFXh?$AA@			; `string'
PUBLIC	??_C@_03LNAPELNN@$?$CFX?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_03ICICOMAL@yes?$AA@			; `string'
PUBLIC	??_C@_02KAJCLHKP@no?$AA@			; `string'
PUBLIC	?__LINE__Var@?1???0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z@4JA ; `file_auto_ptr::file_auto_ptr'::`2'::__LINE__Var
PUBLIC	??_C@_0BN@JBPACNPA@file_auto_ptr?3?3file_auto_ptr?$AA@ ; `string'
PUBLIC	??_C@_0CA@FGEPAIP@List?$DMstruct?5INIEntry?5?$CK?$DO?3?3Delete?$AA@ ; `string'
PUBLIC	??_C@_0CL@POINCKL@IndexClass?$DMint?0struct?5INISection@ ; `string'
PUBLIC	??_C@_0CC@CJCFMMIE@List?$DMstruct?5INISection?5?$CK?$DO?3?3Delet@ ; `string'
PUBLIC	??_C@_0CJ@EAFFDJJP@IndexClass?$DMint?0struct?5INIEntry?5?$CK@ ; `string'
PUBLIC	??_C@_0DH@FMKNHFBJ@IndexClass?$DMint?0struct?5INIEntry?5?$CK@ ; `string'
PUBLIC	??_C@_0DJ@IHGELHP@IndexClass?$DMint?0struct?5INISection@ ; `string'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4GenericList@@6B@				; GenericList::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGenericList@@@8				; GenericList `RTTI Type Descriptor'
PUBLIC	??_R3GenericList@@8				; GenericList::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GenericList@@8				; GenericList::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GenericList@@8			; GenericList::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4GenericNode@@6B@				; GenericNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGenericNode@@@8				; GenericNode `RTTI Type Descriptor'
PUBLIC	??_R3GenericNode@@8				; GenericNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GenericNode@@8				; GenericNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GenericNode@@8			; GenericNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FileClass@@6B@				; FileClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileClass@@@8				; FileClass `RTTI Type Descriptor'
PUBLIC	??_R3FileClass@@8				; FileClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileClass@@8				; FileClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileClass@@8			; FileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Straw@@6B@					; Straw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStraw@@@8				; Straw `RTTI Type Descriptor'
PUBLIC	??_R3Straw@@8					; Straw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Straw@@8					; Straw::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Straw@@8				; Straw::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Pipe@@6B@					; Pipe::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPipe@@@8				; Pipe `RTTI Type Descriptor'
PUBLIC	??_R3Pipe@@8					; Pipe::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Pipe@@8					; Pipe::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Pipe@@8				; Pipe::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INIEntry@@6B@				; INIEntry::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUINIEntry@@@8				; INIEntry `RTTI Type Descriptor'
PUBLIC	??_R3INIEntry@@8				; INIEntry::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INIEntry@@8				; INIEntry::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INIEntry@@8			; INIEntry::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$Node@PAUINIEntry@@@@8		; Node<INIEntry *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$Node@PAUINIEntry@@@@@8		; Node<INIEntry *> `RTTI Type Descriptor'
PUBLIC	??_R3?$Node@PAUINIEntry@@@@8			; Node<INIEntry *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Node@PAUINIEntry@@@@8			; Node<INIEntry *>::`RTTI Base Class Array'
PUBLIC	??_R4?$Node@PAUINIEntry@@@@6B@			; Node<INIEntry *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$List@PAUINIEntry@@@@6B@			; List<INIEntry *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$List@PAUINIEntry@@@@@8		; List<INIEntry *> `RTTI Type Descriptor'
PUBLIC	??_R3?$List@PAUINIEntry@@@@8			; List<INIEntry *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$List@PAUINIEntry@@@@8			; List<INIEntry *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$List@PAUINIEntry@@@@8		; List<INIEntry *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INISection@@6B@				; INISection::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUINISection@@@8				; INISection `RTTI Type Descriptor'
PUBLIC	??_R3INISection@@8				; INISection::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INISection@@8				; INISection::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INISection@@8			; INISection::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$Node@PAUINISection@@@@8		; Node<INISection *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$Node@PAUINISection@@@@@8		; Node<INISection *> `RTTI Type Descriptor'
PUBLIC	??_R3?$Node@PAUINISection@@@@8			; Node<INISection *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Node@PAUINISection@@@@8			; Node<INISection *>::`RTTI Base Class Array'
PUBLIC	??_R4?$Node@PAUINISection@@@@6B@		; Node<INISection *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$List@PAUINISection@@@@6B@		; List<INISection *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$List@PAUINISection@@@@@8		; List<INISection *> `RTTI Type Descriptor'
PUBLIC	??_R3?$List@PAUINISection@@@@8			; List<INISection *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$List@PAUINISection@@@@8			; List<INISection *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$List@PAUINISection@@@@8		; List<INISection *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INIClass@@6B@				; INIClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVINIClass@@@8				; INIClass `RTTI Type Descriptor'
PUBLIC	??_R3INIClass@@8				; INIClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INIClass@@8				; INIClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INIClass@@8			; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BufferStraw@@6B@				; BufferStraw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBufferStraw@@@8				; BufferStraw `RTTI Type Descriptor'
PUBLIC	??_R3BufferStraw@@8				; BufferStraw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BufferStraw@@8				; BufferStraw::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BufferStraw@@8			; BufferStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FileStraw@@6B@				; FileStraw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStraw@@@8				; FileStraw `RTTI Type Descriptor'
PUBLIC	??_R3FileStraw@@8				; FileStraw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStraw@@8				; FileStraw::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStraw@@8			; FileStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CacheStraw@@6B@				; CacheStraw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCacheStraw@@@8				; CacheStraw `RTTI Type Descriptor'
PUBLIC	??_R3CacheStraw@@8				; CacheStraw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CacheStraw@@8				; CacheStraw::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CacheStraw@@8			; CacheStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FilePipe@@6B@				; FilePipe::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFilePipe@@@8				; FilePipe `RTTI Type Descriptor'
PUBLIC	??_R3FilePipe@@8				; FilePipe::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FilePipe@@8				; FilePipe::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FilePipe@@8			; FilePipe::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RawFileClass@@6B@				; RawFileClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRawFileClass@@@8			; RawFileClass `RTTI Type Descriptor'
PUBLIC	??_R3RawFileClass@@8				; RawFileClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RawFileClass@@8				; RawFileClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RawFileClass@@8			; RawFileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BufferedFileClass@@6B@			; BufferedFileClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBufferedFileClass@@@8			; BufferedFileClass `RTTI Type Descriptor'
PUBLIC	??_R3BufferedFileClass@@8			; BufferedFileClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BufferedFileClass@@8			; BufferedFileClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BufferedFileClass@@8		; BufferedFileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@42c80000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?HookupAT3@@YAPAXPAX000@Z:PROC			; HookupAT3
EXTRN	?InitEngine@@YAXXZ:PROC				; InitEngine
EXTRN	__imp___wassert:PROC
EXTRN	__imp___errno:PROC
EXTRN	__imp__atoi:PROC
EXTRN	__imp__qsort:PROC
EXTRN	__imp__memmove:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__sscanf:PROC
EXTRN	__imp___snprintf:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp__strrchr:PROC
EXTRN	__imp__toupper:PROC
EXTRN	__imp__tolower:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__GetFileInformationByHandle@8:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__FileTimeToDosDateTime@12:PROC
EXTRN	__imp__DosDateTimeToFileTime@12:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileAttributesA@4:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	??_EGenericNode@@UAEPAXI@Z:PROC			; GenericNode::`vector deleting destructor'
EXTRN	??_EGenericList@@UAEPAXI@Z:PROC			; GenericList::`vector deleting destructor'
EXTRN	__imp_?Get_String@StringClass@@AAEXH_N@Z:PROC
EXTRN	__imp_?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC
EXTRN	__imp_?Free_String@StringClass@@AAEXXZ:PROC
EXTRN	?newstr@@YAPADPBD@Z:PROC			; newstr
EXTRN	?strtrim@@YAPADPAD@Z:PROC			; strtrim
EXTRN	?CRC_String@@YAKPBDK@Z:PROC			; CRC_String
EXTRN	??_EFileClass@@UAEPAXI@Z:PROC			; FileClass::`vector deleting destructor'
EXTRN	??_E?$Node@PAUINIEntry@@@@UAEPAXI@Z:PROC	; Node<INIEntry *>::`vector deleting destructor'
EXTRN	??_EINIEntry@@UAEPAXI@Z:PROC			; INIEntry::`vector deleting destructor'
EXTRN	??_E?$Node@PAUINISection@@@@UAEPAXI@Z:PROC	; Node<INISection *>::`vector deleting destructor'
EXTRN	??_E?$List@PAUINIEntry@@@@UAEPAXI@Z:PROC	; List<INIEntry *>::`vector deleting destructor'
EXTRN	??_EINISection@@UAEPAXI@Z:PROC			; INISection::`vector deleting destructor'
EXTRN	??0Straw@@QAE@XZ:PROC				; Straw::Straw
EXTRN	??1Straw@@UAE@XZ:PROC				; Straw::~Straw
EXTRN	?Get_From@Straw@@UAEXPAV1@@Z:PROC		; Straw::Get_From
EXTRN	?Get@Straw@@UAEHPAXH@Z:PROC			; Straw::Get
EXTRN	??1Buffer@@QAE@XZ:PROC				; Buffer::~Buffer
EXTRN	??1BufferStraw@@UAE@XZ:PROC			; BufferStraw::~BufferStraw
EXTRN	?Get@BufferStraw@@UAEHPAXH@Z:PROC		; BufferStraw::Get
EXTRN	??0FileStraw@@QAE@AAVFileClass@@@Z:PROC		; FileStraw::FileStraw
EXTRN	??1FileStraw@@UAE@XZ:PROC			; FileStraw::~FileStraw
EXTRN	?Get@FileStraw@@UAEHPAXH@Z:PROC			; FileStraw::Get
EXTRN	??_EFilePipe@@UAEPAXI@Z:PROC			; FilePipe::`vector deleting destructor'
EXTRN	??_ERawFileClass@@UAEPAXI@Z:PROC		; RawFileClass::`vector deleting destructor'
EXTRN	??_EBufferedFileClass@@UAEPAXI@Z:PROC		; BufferedFileClass::`vector deleting destructor'
EXTRN	__imp__SHGetSpecialFolderPathA@16:PROC
EXTRN	__imp__SHGetSpecialFolderPathW@16:PROC
EXTRN	??_E?$List@PAUINISection@@@@UAEPAXI@Z:PROC	; List<INISection *>::`vector deleting destructor'
EXTRN	_memcpy:PROC
EXTRN	?Exe@@3HA:DWORD					; Exe
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?m_EmptyString@StringClass@@0AAPADA:DWORD
EXTRN	__imp_?m_NullChar@StringClass@@0AADA:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

?_TheFileFactory@@3AAPAVFileFactoryClass@@A DD 01H DUP (?) ; _TheFileFactory
_BSS	ENDS
CRT$XCL	SEGMENT
__TheFileFactory$initializer$ DD FLAT:??__E_TheFileFactory@@YAXXZ
CRT$XCL	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@BufferedFileClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BufferedFileClass@@8 DD FLAT:??_R0?AVBufferedFileClass@@@8 ; BufferedFileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BufferedFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R2BufferedFileClass@@8
rdata$r	SEGMENT
??_R2BufferedFileClass@@8 DD FLAT:??_R1A@?0A@EA@BufferedFileClass@@8 ; BufferedFileClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RawFileClass@@8
	DD	FLAT:??_R1A@?0A@EA@FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R3BufferedFileClass@@8
rdata$r	SEGMENT
??_R3BufferedFileClass@@8 DD 00H			; BufferedFileClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BufferedFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBufferedFileClass@@@8
_DATA	SEGMENT
??_R0?AVBufferedFileClass@@@8 DD FLAT:??_7type_info@@6B@ ; BufferedFileClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBufferedFileClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BufferedFileClass@@6B@
rdata$r	SEGMENT
??_R4BufferedFileClass@@6B@ DD 00H			; BufferedFileClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBufferedFileClass@@@8
	DD	FLAT:??_R3BufferedFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RawFileClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RawFileClass@@8 DD FLAT:??_R0?AVRawFileClass@@@8 ; RawFileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RawFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R2RawFileClass@@8
rdata$r	SEGMENT
??_R2RawFileClass@@8 DD FLAT:??_R1A@?0A@EA@RawFileClass@@8 ; RawFileClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R3RawFileClass@@8
rdata$r	SEGMENT
??_R3RawFileClass@@8 DD 00H				; RawFileClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2RawFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRawFileClass@@@8
_DATA	SEGMENT
??_R0?AVRawFileClass@@@8 DD FLAT:??_7type_info@@6B@	; RawFileClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRawFileClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RawFileClass@@6B@
rdata$r	SEGMENT
??_R4RawFileClass@@6B@ DD 00H				; RawFileClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRawFileClass@@@8
	DD	FLAT:??_R3RawFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FilePipe@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FilePipe@@8 DD FLAT:??_R0?AVFilePipe@@@8	; FilePipe::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FilePipe@@8
rdata$r	ENDS
;	COMDAT ??_R2FilePipe@@8
rdata$r	SEGMENT
??_R2FilePipe@@8 DD FLAT:??_R1A@?0A@EA@FilePipe@@8	; FilePipe::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Pipe@@8
rdata$r	ENDS
;	COMDAT ??_R3FilePipe@@8
rdata$r	SEGMENT
??_R3FilePipe@@8 DD 00H					; FilePipe::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FilePipe@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFilePipe@@@8
_DATA	SEGMENT
??_R0?AVFilePipe@@@8 DD FLAT:??_7type_info@@6B@		; FilePipe `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFilePipe@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FilePipe@@6B@
rdata$r	SEGMENT
??_R4FilePipe@@6B@ DD 00H				; FilePipe::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFilePipe@@@8
	DD	FLAT:??_R3FilePipe@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CacheStraw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CacheStraw@@8 DD FLAT:??_R0?AVCacheStraw@@@8 ; CacheStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CacheStraw@@8
rdata$r	ENDS
;	COMDAT ??_R2CacheStraw@@8
rdata$r	SEGMENT
??_R2CacheStraw@@8 DD FLAT:??_R1A@?0A@EA@CacheStraw@@8	; CacheStraw::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Straw@@8
rdata$r	ENDS
;	COMDAT ??_R3CacheStraw@@8
rdata$r	SEGMENT
??_R3CacheStraw@@8 DD 00H				; CacheStraw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CacheStraw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCacheStraw@@@8
_DATA	SEGMENT
??_R0?AVCacheStraw@@@8 DD FLAT:??_7type_info@@6B@	; CacheStraw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCacheStraw@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CacheStraw@@6B@
rdata$r	SEGMENT
??_R4CacheStraw@@6B@ DD 00H				; CacheStraw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCacheStraw@@@8
	DD	FLAT:??_R3CacheStraw@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FileStraw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStraw@@8 DD FLAT:??_R0?AVFileStraw@@@8 ; FileStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStraw@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStraw@@8
rdata$r	SEGMENT
??_R2FileStraw@@8 DD FLAT:??_R1A@?0A@EA@FileStraw@@8	; FileStraw::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Straw@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStraw@@8
rdata$r	SEGMENT
??_R3FileStraw@@8 DD 00H				; FileStraw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStraw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStraw@@@8
_DATA	SEGMENT
??_R0?AVFileStraw@@@8 DD FLAT:??_7type_info@@6B@	; FileStraw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStraw@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStraw@@6B@
rdata$r	SEGMENT
??_R4FileStraw@@6B@ DD 00H				; FileStraw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStraw@@@8
	DD	FLAT:??_R3FileStraw@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BufferStraw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BufferStraw@@8 DD FLAT:??_R0?AVBufferStraw@@@8 ; BufferStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BufferStraw@@8
rdata$r	ENDS
;	COMDAT ??_R2BufferStraw@@8
rdata$r	SEGMENT
??_R2BufferStraw@@8 DD FLAT:??_R1A@?0A@EA@BufferStraw@@8 ; BufferStraw::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Straw@@8
rdata$r	ENDS
;	COMDAT ??_R3BufferStraw@@8
rdata$r	SEGMENT
??_R3BufferStraw@@8 DD 00H				; BufferStraw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BufferStraw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBufferStraw@@@8
_DATA	SEGMENT
??_R0?AVBufferStraw@@@8 DD FLAT:??_7type_info@@6B@	; BufferStraw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBufferStraw@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BufferStraw@@6B@
rdata$r	SEGMENT
??_R4BufferStraw@@6B@ DD 00H				; BufferStraw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBufferStraw@@@8
	DD	FLAT:??_R3BufferStraw@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INIClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INIClass@@8 DD FLAT:??_R0?AVINIClass@@@8	; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R2INIClass@@8
rdata$r	SEGMENT
??_R2INIClass@@8 DD FLAT:??_R1A@?0A@EA@INIClass@@8	; INIClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INIClass@@8
rdata$r	SEGMENT
??_R3INIClass@@8 DD 00H					; INIClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVINIClass@@@8
_DATA	SEGMENT
??_R0?AVINIClass@@@8 DD FLAT:??_7type_info@@6B@		; INIClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVINIClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INIClass@@6B@
rdata$r	SEGMENT
??_R4INIClass@@6B@ DD 00H				; INIClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVINIClass@@@8
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$List@PAUINISection@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$List@PAUINISection@@@@8 DD FLAT:??_R0?AV?$List@PAUINISection@@@@@8 ; List<INISection *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$List@PAUINISection@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$List@PAUINISection@@@@8
rdata$r	SEGMENT
??_R2?$List@PAUINISection@@@@8 DD FLAT:??_R1A@?0A@EA@?$List@PAUINISection@@@@8 ; List<INISection *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericList@@8
rdata$r	ENDS
;	COMDAT ??_R3?$List@PAUINISection@@@@8
rdata$r	SEGMENT
??_R3?$List@PAUINISection@@@@8 DD 00H			; List<INISection *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$List@PAUINISection@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$List@PAUINISection@@@@@8
_DATA	SEGMENT
??_R0?AV?$List@PAUINISection@@@@@8 DD FLAT:??_7type_info@@6B@ ; List<INISection *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$List@PAUINISection@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$List@PAUINISection@@@@6B@
rdata$r	SEGMENT
??_R4?$List@PAUINISection@@@@6B@ DD 00H			; List<INISection *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$List@PAUINISection@@@@@8
	DD	FLAT:??_R3?$List@PAUINISection@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$Node@PAUINISection@@@@6B@
rdata$r	SEGMENT
??_R4?$Node@PAUINISection@@@@6B@ DD 00H			; Node<INISection *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$Node@PAUINISection@@@@@8
	DD	FLAT:??_R3?$Node@PAUINISection@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Node@PAUINISection@@@@8
rdata$r	SEGMENT
??_R2?$Node@PAUINISection@@@@8 DD FLAT:??_R1A@?0A@EA@?$Node@PAUINISection@@@@8 ; Node<INISection *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericNode@@8
rdata$r	ENDS
;	COMDAT ??_R3?$Node@PAUINISection@@@@8
rdata$r	SEGMENT
??_R3?$Node@PAUINISection@@@@8 DD 00H			; Node<INISection *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$Node@PAUINISection@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Node@PAUINISection@@@@@8
_DATA	SEGMENT
??_R0?AV?$Node@PAUINISection@@@@@8 DD FLAT:??_7type_info@@6B@ ; Node<INISection *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Node@PAUINISection@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$Node@PAUINISection@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Node@PAUINISection@@@@8 DD FLAT:??_R0?AV?$Node@PAUINISection@@@@@8 ; Node<INISection *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Node@PAUINISection@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INISection@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INISection@@8 DD FLAT:??_R0?AUINISection@@@8 ; INISection::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INISection@@8
rdata$r	ENDS
;	COMDAT ??_R2INISection@@8
rdata$r	SEGMENT
??_R2INISection@@8 DD FLAT:??_R1A@?0A@EA@INISection@@8	; INISection::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$Node@PAUINISection@@@@8
	DD	FLAT:??_R1A@?0A@EA@GenericNode@@8
rdata$r	ENDS
;	COMDAT ??_R3INISection@@8
rdata$r	SEGMENT
??_R3INISection@@8 DD 00H				; INISection::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2INISection@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUINISection@@@8
_DATA	SEGMENT
??_R0?AUINISection@@@8 DD FLAT:??_7type_info@@6B@	; INISection `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUINISection@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INISection@@6B@
rdata$r	SEGMENT
??_R4INISection@@6B@ DD 00H				; INISection::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUINISection@@@8
	DD	FLAT:??_R3INISection@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$List@PAUINIEntry@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$List@PAUINIEntry@@@@8 DD FLAT:??_R0?AV?$List@PAUINIEntry@@@@@8 ; List<INIEntry *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$List@PAUINIEntry@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$List@PAUINIEntry@@@@8
rdata$r	SEGMENT
??_R2?$List@PAUINIEntry@@@@8 DD FLAT:??_R1A@?0A@EA@?$List@PAUINIEntry@@@@8 ; List<INIEntry *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericList@@8
rdata$r	ENDS
;	COMDAT ??_R3?$List@PAUINIEntry@@@@8
rdata$r	SEGMENT
??_R3?$List@PAUINIEntry@@@@8 DD 00H			; List<INIEntry *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$List@PAUINIEntry@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$List@PAUINIEntry@@@@@8
_DATA	SEGMENT
??_R0?AV?$List@PAUINIEntry@@@@@8 DD FLAT:??_7type_info@@6B@ ; List<INIEntry *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$List@PAUINIEntry@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$List@PAUINIEntry@@@@6B@
rdata$r	SEGMENT
??_R4?$List@PAUINIEntry@@@@6B@ DD 00H			; List<INIEntry *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$List@PAUINIEntry@@@@@8
	DD	FLAT:??_R3?$List@PAUINIEntry@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$Node@PAUINIEntry@@@@6B@
rdata$r	SEGMENT
??_R4?$Node@PAUINIEntry@@@@6B@ DD 00H			; Node<INIEntry *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$Node@PAUINIEntry@@@@@8
	DD	FLAT:??_R3?$Node@PAUINIEntry@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Node@PAUINIEntry@@@@8
rdata$r	SEGMENT
??_R2?$Node@PAUINIEntry@@@@8 DD FLAT:??_R1A@?0A@EA@?$Node@PAUINIEntry@@@@8 ; Node<INIEntry *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericNode@@8
rdata$r	ENDS
;	COMDAT ??_R3?$Node@PAUINIEntry@@@@8
rdata$r	SEGMENT
??_R3?$Node@PAUINIEntry@@@@8 DD 00H			; Node<INIEntry *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$Node@PAUINIEntry@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Node@PAUINIEntry@@@@@8
_DATA	SEGMENT
??_R0?AV?$Node@PAUINIEntry@@@@@8 DD FLAT:??_7type_info@@6B@ ; Node<INIEntry *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Node@PAUINIEntry@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$Node@PAUINIEntry@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Node@PAUINIEntry@@@@8 DD FLAT:??_R0?AV?$Node@PAUINIEntry@@@@@8 ; Node<INIEntry *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Node@PAUINIEntry@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INIEntry@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INIEntry@@8 DD FLAT:??_R0?AUINIEntry@@@8	; INIEntry::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INIEntry@@8
rdata$r	ENDS
;	COMDAT ??_R2INIEntry@@8
rdata$r	SEGMENT
??_R2INIEntry@@8 DD FLAT:??_R1A@?0A@EA@INIEntry@@8	; INIEntry::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$Node@PAUINIEntry@@@@8
	DD	FLAT:??_R1A@?0A@EA@GenericNode@@8
rdata$r	ENDS
;	COMDAT ??_R3INIEntry@@8
rdata$r	SEGMENT
??_R3INIEntry@@8 DD 00H					; INIEntry::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2INIEntry@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUINIEntry@@@8
_DATA	SEGMENT
??_R0?AUINIEntry@@@8 DD FLAT:??_7type_info@@6B@		; INIEntry `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUINIEntry@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INIEntry@@6B@
rdata$r	SEGMENT
??_R4INIEntry@@6B@ DD 00H				; INIEntry::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUINIEntry@@@8
	DD	FLAT:??_R3INIEntry@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Pipe@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Pipe@@8 DD FLAT:??_R0?AVPipe@@@8		; Pipe::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Pipe@@8
rdata$r	ENDS
;	COMDAT ??_R2Pipe@@8
rdata$r	SEGMENT
??_R2Pipe@@8 DD	FLAT:??_R1A@?0A@EA@Pipe@@8		; Pipe::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Pipe@@8
rdata$r	SEGMENT
??_R3Pipe@@8 DD	00H					; Pipe::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Pipe@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPipe@@@8
_DATA	SEGMENT
??_R0?AVPipe@@@8 DD FLAT:??_7type_info@@6B@		; Pipe `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPipe@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Pipe@@6B@
rdata$r	SEGMENT
??_R4Pipe@@6B@ DD 00H					; Pipe::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPipe@@@8
	DD	FLAT:??_R3Pipe@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Straw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Straw@@8 DD FLAT:??_R0?AVStraw@@@8	; Straw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Straw@@8
rdata$r	ENDS
;	COMDAT ??_R2Straw@@8
rdata$r	SEGMENT
??_R2Straw@@8 DD FLAT:??_R1A@?0A@EA@Straw@@8		; Straw::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Straw@@8
rdata$r	SEGMENT
??_R3Straw@@8 DD 00H					; Straw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Straw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStraw@@@8
_DATA	SEGMENT
??_R0?AVStraw@@@8 DD FLAT:??_7type_info@@6B@		; Straw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStraw@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Straw@@6B@
rdata$r	SEGMENT
??_R4Straw@@6B@ DD 00H					; Straw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStraw@@@8
	DD	FLAT:??_R3Straw@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FileClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileClass@@8 DD FLAT:??_R0?AVFileClass@@@8 ; FileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R2FileClass@@8
rdata$r	SEGMENT
??_R2FileClass@@8 DD FLAT:??_R1A@?0A@EA@FileClass@@8	; FileClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3FileClass@@8
rdata$r	SEGMENT
??_R3FileClass@@8 DD 00H				; FileClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileClass@@@8
_DATA	SEGMENT
??_R0?AVFileClass@@@8 DD FLAT:??_7type_info@@6B@	; FileClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileClass@@6B@
rdata$r	SEGMENT
??_R4FileClass@@6B@ DD 00H				; FileClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileClass@@@8
	DD	FLAT:??_R3FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@GenericNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GenericNode@@8 DD FLAT:??_R0?AVGenericNode@@@8 ; GenericNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GenericNode@@8
rdata$r	ENDS
;	COMDAT ??_R2GenericNode@@8
rdata$r	SEGMENT
??_R2GenericNode@@8 DD FLAT:??_R1A@?0A@EA@GenericNode@@8 ; GenericNode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GenericNode@@8
rdata$r	SEGMENT
??_R3GenericNode@@8 DD 00H				; GenericNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GenericNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGenericNode@@@8
_DATA	SEGMENT
??_R0?AVGenericNode@@@8 DD FLAT:??_7type_info@@6B@	; GenericNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGenericNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4GenericNode@@6B@
rdata$r	SEGMENT
??_R4GenericNode@@6B@ DD 00H				; GenericNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGenericNode@@@8
	DD	FLAT:??_R3GenericNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@GenericList@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GenericList@@8 DD FLAT:??_R0?AVGenericList@@@8 ; GenericList::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GenericList@@8
rdata$r	ENDS
;	COMDAT ??_R2GenericList@@8
rdata$r	SEGMENT
??_R2GenericList@@8 DD FLAT:??_R1A@?0A@EA@GenericList@@8 ; GenericList::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GenericList@@8
rdata$r	SEGMENT
??_R3GenericList@@8 DD 00H				; GenericList::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GenericList@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGenericList@@@8
_DATA	SEGMENT
??_R0?AVGenericList@@@8 DD FLAT:??_7type_info@@6B@	; GenericList `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGenericList@@', 00H
_DATA	ENDS
;	COMDAT ??_R4GenericList@@6B@
rdata$r	SEGMENT
??_R4GenericList@@6B@ DD 00H				; GenericList::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGenericList@@@8
	DD	FLAT:??_R3GenericList@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DJ@IHGELHP@IndexClass?$DMint?0struct?5INISection@
CONST	SEGMENT
??_C@_0DJ@IHGELHP@IndexClass?$DMint?0struct?5INISection@ DB 'IndexClass<i'
	DB	'nt,struct INISection *>::Increase_Table_Size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FMKNHFBJ@IndexClass?$DMint?0struct?5INIEntry?5?$CK@
CONST	SEGMENT
??_C@_0DH@FMKNHFBJ@IndexClass?$DMint?0struct?5INIEntry?5?$CK@ DB 'IndexCl'
	DB	'ass<int,struct INIEntry *>::Increase_Table_Size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EAFFDJJP@IndexClass?$DMint?0struct?5INIEntry?5?$CK@
CONST	SEGMENT
??_C@_0CJ@EAFFDJJP@IndexClass?$DMint?0struct?5INIEntry?5?$CK@ DB 'IndexCl'
	DB	'ass<int,struct INIEntry *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CJCFMMIE@List?$DMstruct?5INISection?5?$CK?$DO?3?3Delet@
CONST	SEGMENT
??_C@_0CC@CJCFMMIE@List?$DMstruct?5INISection?5?$CK?$DO?3?3Delet@ DB 'Lis'
	DB	't<struct INISection *>::Delete', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@POINCKL@IndexClass?$DMint?0struct?5INISection@
CONST	SEGMENT
??_C@_0CL@POINCKL@IndexClass?$DMint?0struct?5INISection@ DB 'IndexClass<i'
	DB	'nt,struct INISection *>::Clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FGEPAIP@List?$DMstruct?5INIEntry?5?$CK?$DO?3?3Delete?$AA@
CONST	SEGMENT
??_C@_0CA@FGEPAIP@List?$DMstruct?5INIEntry?5?$CK?$DO?3?3Delete?$AA@ DB 'L'
	DB	'ist<struct INIEntry *>::Delete', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JBPACNPA@file_auto_ptr?3?3file_auto_ptr?$AA@
CONST	SEGMENT
??_C@_0BN@JBPACNPA@file_auto_ptr?3?3file_auto_ptr?$AA@ DB 'file_auto_ptr:'
	DB	':file_auto_ptr', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1???0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z@4JA DD 03a2H ; `file_auto_ptr::file_auto_ptr'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02KAJCLHKP@no?$AA@
CONST	SEGMENT
??_C@_02KAJCLHKP@no?$AA@ DB 'no', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICICOMAL@yes?$AA@
CONST	SEGMENT
??_C@_03ICICOMAL@yes?$AA@ DB 'yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LNAPELNN@$?$CFX?$AA@
CONST	SEGMENT
??_C@_03LNAPELNN@$?$CFX?$AA@ DB '$%X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IGNMOBEI@?$CFXh?$AA@
CONST	SEGMENT
??_C@_03IGNMOBEI@?$CFXh?$AA@ DB '%Xh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKGBNGFP@INIClass?3?3Put_String?$AA@
CONST	SEGMENT
??_C@_0BF@EKGBNGFP@INIClass?3?3Put_String?$AA@ DB 'INIClass::Put_String', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA DD 0342H ; `INIClass::Put_String'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN?$AA@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN?$AA@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PBFFLOEA@INIClass?3?3Save?$AA@
CONST	SEGMENT
??_C@_0P@PBFFLOEA@INIClass?3?3Save?$AA@ DB 'INIClass::Save', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Save@INIClass@@QAEHAAVFileClass@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Save@INIClass@@QAEHAAVFileClass@@@Z@4JA DD 031aH ; `INIClass::Save'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??Load@INIClass@@QAEHPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Load@INIClass@@QAEHPAD@Z@4JA DD 030eH	; `INIClass::Load'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@MCNMCOPK@Duplicate?5CRC?5in?5INI?5file?4?$AA@
CONST	SEGMENT
??_C@_0BL@MCNMCOPK@Duplicate?5CRC?5in?5INI?5file?4?$AA@ DB 'Duplicate CRC'
	DB	' in INI file.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LBAEEJJ@?$CFs?5?9?5Duplicate?5Entry?5?$CC?$CFs?$CC?5in?5sec@
CONST	SEGMENT
??_C@_0DA@LBAEEJJ@?$CFs?5?9?5Duplicate?5Entry?5?$CC?$CFs?$CC?5in?5sec@ DB '%'
	DB	's - Duplicate Entry "%s" in section "%s" (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLNDDPBO@?$CFsBlue?$AA@
CONST	SEGMENT
??_C@_06GLNDDPBO@?$CFsBlue?$AA@ DB '%sBlue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NOBOEHLK@?$CFsGreen?$AA@
CONST	SEGMENT
??_C@_07NOBOEHLK@?$CFsGreen?$AA@ DB '%sGreen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJKHDAIH@?$CFsRed?$AA@
CONST	SEGMENT
??_C@_05IJKHDAIH@?$CFsRed?$AA@ DB '%sRed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DPBAKFHF@?$CFsAlpha?$AA@
CONST	SEGMENT
??_C@_07DPBAKFHF@?$CFsAlpha?$AA@ DB '%sAlpha', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OPHMLOFF@?$CFlx?$AA@
CONST	SEGMENT
??_C@_03OPHMLOFF@?$CFlx?$AA@ DB '%lx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BHNCPNHJ@0xNotValid?$AA@
CONST	SEGMENT
??_C@_0L@BHNCPNHJ@0xNotValid?$AA@ DB '0xNotValid', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAHENKCB@?$CFsHex?$AA@
CONST	SEGMENT
??_C@_05FAHENKCB@?$CFsHex?$AA@ DB '%sHex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFMHJJNN@INIClass?3?3Clear?$AA@
CONST	SEGMENT
??_C@_0BA@NFMHJJNN@INIClass?3?3Clear?$AA@ DB 'INIClass::Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA DD 02a3H ; `INIClass::Clear'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@BKLIDOBA@INIClass?3?3Shutdown?$AA@
CONST	SEGMENT
??_C@_0BD@BKLIDOBA@INIClass?3?3Shutdown?$AA@ DB 'INIClass::Shutdown', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA DD 0294H	; `INIClass::Shutdown'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@ DB '<unknown>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BAMGKENB@INIClass?3?3Initialize?$AA@
CONST	SEGMENT
??_C@_0BF@BAMGKENB@INIClass?3?3Initialize?$AA@ DB 'INIClass::Initialize', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Initialize@INIClass@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Initialize@INIClass@@QAEXXZ@4JA DD 028eH ; `INIClass::Initialize'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LOJBKHKI@?$CFxh?$AA@
CONST	SEGMENT
??_C@_03LOJBKHKI@?$CFxh?$AA@ DB '%xh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIILGPHP@$?$CFx?$AA@
CONST	SEGMENT
??_C@_03CIILGPHP@$?$CFx?$AA@ DB '$%x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$List@PAUINISection@@@@6B@
CONST	SEGMENT
??_7?$List@PAUINISection@@@@6B@ DD FLAT:??_R4?$List@PAUINISection@@@@6B@ ; List<INISection *>::`vftable'
	DD	FLAT:??_E?$List@PAUINISection@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA DD 0113H ; `INIClass::Load'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@
CONST	SEGMENT
??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@ DB 'INIClass::Load', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Load@INIClass@@QAEHAAVFileClass@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Load@INIClass@@QAEHAAVFileClass@@@Z@4JA DD 0e7H ; `INIClass::Load'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@DGNOAIDN@Release_INI?$AA@
CONST	SEGMENT
??_C@_0M@DGNOAIDN@Release_INI?$AA@ DB 'Release_INI', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Release_INI@@YAXPAVINIClass@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Release_INI@@YAXPAVINIClass@@@Z@4JA DD 0daH ; `Release_INI'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_io.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PHFINMNM@Get_INI?$AA@
CONST	SEGMENT
??_C@_07PHFINMNM@Get_INI?$AA@ DB 'Get_INI', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Get_INI@@YAPAVINIClass@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Get_INI@@YAPAVINIClass@@PBD@Z@4JA DD 0cbH ; `Get_INI'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09OIHOKJLD@Software?2?$AA@
CONST	SEGMENT
??_C@_09OIHOKJLD@Software?2?$AA@ DB 'Software\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JNOHGBBN@UseRenFolder?$AA@
CONST	SEGMENT
??_C@_0N@JNOHGBBN@UseRenFolder?$AA@ DB 'UseRenFolder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNJPPJLM@FileFDS?$AA@
CONST	SEGMENT
??_C@_07BNJPPJLM@FileFDS?$AA@ DB 'FileFDS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IGMBAMIJ@FDS?$AA@
CONST	SEGMENT
??_C@_03IGMBAMIJ@FDS?$AA@ DB 'FDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DODOIGHK@FileClient?$AA@
CONST	SEGMENT
??_C@_0L@DODOIGHK@FileClient?$AA@ DB 'FileClient', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJIGMIJB@Client?$AA@
CONST	SEGMENT
??_C@_06PJIGMIJB@Client?$AA@ DB 'Client', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IAGBEAJA@FileBase?$AA@
CONST	SEGMENT
??_C@_08IAGBEAJA@FileBase?$AA@ DB 'FileBase', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PNIIMBMB@RegFDS?$AA@
CONST	SEGMENT
??_C@_06PNIIMBMB@RegFDS?$AA@ DB 'RegFDS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MBBBEALJ@RenegadeFDS?$AA@
CONST	SEGMENT
??_C@_0M@MBBBEALJ@RenegadeFDS?$AA@ DB 'RenegadeFDS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGFLEEKF@RegClient?$AA@
CONST	SEGMENT
??_C@_09PGFLEEKF@RegClient?$AA@ DB 'RegClient', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBDFECAK@Renegade?$AA@
CONST	SEGMENT
??_C@_08KBDFECAK@Renegade?$AA@ DB 'Renegade', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHMGIKAG@paths?$AA@
CONST	SEGMENT
??_C@_05EHMGIKAG@paths?$AA@ DB 'paths', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KODFFKCJ@RegBase?$AA@
CONST	SEGMENT
??_C@_07KODFFKCJ@RegBase?$AA@ DB 'RegBase', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LAFABFGE@Westwood?$AA@
CONST	SEGMENT
??_C@_08LAFABFGE@Westwood?$AA@ DB 'Westwood', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HCHIHKFJ@paths?4ini?$AA@
CONST	SEGMENT
??_C@_09HCHIHKFJ@paths?4ini?$AA@ DB 'paths.ini', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LMFINKNE@BufferedFileClass?3?3Reset_Buffer?$AA@
CONST	SEGMENT
??_C@_0CA@LMFINKNE@BufferedFileClass?3?3Reset_Buffer?$AA@ DB 'BufferedFil'
	DB	'eClass::Reset_Buffer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HK@BLILCDCH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HK@BLILCDCH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@NGCACKDA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DN@NGCACKDA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\bufferedfileclass.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LFKJEOO@BufferedFileClass?3?3Read?$AA@
CONST	SEGMENT
??_C@_0BI@LFKJEOO@BufferedFileClass?3?3Read?$AA@ DB 'BufferedFileClass::R'
	DB	'ead', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7BufferedFileClass@@6B@
CONST	SEGMENT
??_7BufferedFileClass@@6B@ DD FLAT:??_R4BufferedFileClass@@6B@ ; BufferedFileClass::`vftable'
	DD	FLAT:??_EBufferedFileClass@@UAEPAXI@Z
	DD	FLAT:?File_Name@RawFileClass@@UAEPBDXZ
	DD	FLAT:?Set_Name@RawFileClass@@UAEPBDPBD@Z
	DD	FLAT:?Create@RawFileClass@@UAE_NXZ
	DD	FLAT:?Delete@RawFileClass@@UAE_NXZ
	DD	FLAT:?Is_Available@RawFileClass@@UAE_NH@Z
	DD	FLAT:?Is_Open@RawFileClass@@UAE_NXZ
	DD	FLAT:?Open@RawFileClass@@UAEHH@Z
	DD	FLAT:?Open@RawFileClass@@UAEHPBDH@Z
	DD	FLAT:?Read@BufferedFileClass@@UAEHPAXH@Z
	DD	FLAT:?Seek@BufferedFileClass@@UAEHHH@Z
	DD	FLAT:?Tell@FileClass@@UAEHXZ
	DD	FLAT:?Size@RawFileClass@@UAEHXZ
	DD	FLAT:?Write@BufferedFileClass@@UAEHPAXH@Z
	DD	FLAT:?Close@BufferedFileClass@@UAEXXZ
	DD	FLAT:?Get_Date_Time@RawFileClass@@UAEKXZ
	DD	FLAT:?Set_Date_Time@RawFileClass@@UAE_NK@Z
	DD	FLAT:?Error@RawFileClass@@UAEXHHPBD@Z
	DD	FLAT:?Get_File_Handle@RawFileClass@@UAEPAXXZ
	DD	FLAT:?Bias@RawFileClass@@UAEXHH@Z
	DD	FLAT:?Is_Hash_Checked@RawFileClass@@UAE_NXZ
	DD	FLAT:?Attach@RawFileClass@@UAEXPAXH@Z
	DD	FLAT:?Detach@RawFileClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7RawFileClass@@6B@
CONST	SEGMENT
??_7RawFileClass@@6B@ DD FLAT:??_R4RawFileClass@@6B@	; RawFileClass::`vftable'
	DD	FLAT:??_ERawFileClass@@UAEPAXI@Z
	DD	FLAT:?File_Name@RawFileClass@@UAEPBDXZ
	DD	FLAT:?Set_Name@RawFileClass@@UAEPBDPBD@Z
	DD	FLAT:?Create@RawFileClass@@UAE_NXZ
	DD	FLAT:?Delete@RawFileClass@@UAE_NXZ
	DD	FLAT:?Is_Available@RawFileClass@@UAE_NH@Z
	DD	FLAT:?Is_Open@RawFileClass@@UAE_NXZ
	DD	FLAT:?Open@RawFileClass@@UAEHH@Z
	DD	FLAT:?Open@RawFileClass@@UAEHPBDH@Z
	DD	FLAT:?Read@RawFileClass@@UAEHPAXH@Z
	DD	FLAT:?Seek@RawFileClass@@UAEHHH@Z
	DD	FLAT:?Tell@FileClass@@UAEHXZ
	DD	FLAT:?Size@RawFileClass@@UAEHXZ
	DD	FLAT:?Write@RawFileClass@@UAEHPAXH@Z
	DD	FLAT:?Close@RawFileClass@@UAEXXZ
	DD	FLAT:?Get_Date_Time@RawFileClass@@UAEKXZ
	DD	FLAT:?Set_Date_Time@RawFileClass@@UAE_NK@Z
	DD	FLAT:?Error@RawFileClass@@UAEXHHPBD@Z
	DD	FLAT:?Get_File_Handle@RawFileClass@@UAEPAXXZ
	DD	FLAT:?Bias@RawFileClass@@UAEXHH@Z
	DD	FLAT:?Is_Hash_Checked@RawFileClass@@UAE_NXZ
	DD	FLAT:?Attach@RawFileClass@@UAEXPAXH@Z
	DD	FLAT:?Detach@RawFileClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7FilePipe@@6B@
CONST	SEGMENT
??_7FilePipe@@6B@ DD FLAT:??_R4FilePipe@@6B@		; FilePipe::`vftable'
	DD	FLAT:??_EFilePipe@@UAEPAXI@Z
	DD	FLAT:?Flush@Pipe@@UAEHXZ
	DD	FLAT:?End@FilePipe@@UAEHXZ
	DD	FLAT:?Put_To@Pipe@@UAEXPAV1@@Z
	DD	FLAT:?Put@FilePipe@@UAEHPBXH@Z
CONST	ENDS
;	COMDAT ??_7Pipe@@6B@
CONST	SEGMENT
??_7Pipe@@6B@ DD FLAT:??_R4Pipe@@6B@			; Pipe::`vftable'
	DD	FLAT:??_EPipe@@UAEPAXI@Z
	DD	FLAT:?Flush@Pipe@@UAEHXZ
	DD	FLAT:?End@Pipe@@UAEHXZ
	DD	FLAT:?Put_To@Pipe@@UAEXPAV1@@Z
	DD	FLAT:?Put@Pipe@@UAEHPBXH@Z
CONST	ENDS
;	COMDAT ??_7CacheStraw@@6B@
CONST	SEGMENT
??_7CacheStraw@@6B@ DD FLAT:??_R4CacheStraw@@6B@	; CacheStraw::`vftable'
	DD	FLAT:??_ECacheStraw@@UAEPAXI@Z
	DD	FLAT:?Get_From@Straw@@UAEXPAV1@@Z
	DD	FLAT:?Get@CacheStraw@@UAEHPAXH@Z
CONST	ENDS
;	COMDAT ??_7FileStraw@@6B@
CONST	SEGMENT
??_7FileStraw@@6B@ DD FLAT:??_R4FileStraw@@6B@		; FileStraw::`vftable'
	DD	FLAT:??_EFileStraw@@UAEPAXI@Z
	DD	FLAT:?Get_From@Straw@@UAEXPAV1@@Z
	DD	FLAT:?Get@FileStraw@@UAEHPAXH@Z
CONST	ENDS
;	COMDAT ??_7BufferStraw@@6B@
CONST	SEGMENT
??_7BufferStraw@@6B@ DD FLAT:??_R4BufferStraw@@6B@	; BufferStraw::`vftable'
	DD	FLAT:??_EBufferStraw@@UAEPAXI@Z
	DD	FLAT:?Get_From@Straw@@UAEXPAV1@@Z
	DD	FLAT:?Get@BufferStraw@@UAEHPAXH@Z
CONST	ENDS
;	COMDAT ??_C@_1GC@DMMDNGMD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GC@DMMDNGMD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'w', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KAPDHD@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DB@KAPDHD@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\rene'
	DB	'gade\dragonade_rxd\scripts\straw.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@
CONST	SEGMENT
??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@ DB 'Buffer::Buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7Straw@@6B@
CONST	SEGMENT
??_7Straw@@6B@ DD FLAT:??_R4Straw@@6B@			; Straw::`vftable'
	DD	FLAT:??_EStraw@@UAEPAXI@Z
	DD	FLAT:?Get_From@Straw@@UAEXPAV1@@Z
	DD	FLAT:?Get@Straw@@UAEHPAXH@Z
CONST	ENDS
;	COMDAT ??_7INIClass@@6B@
CONST	SEGMENT
??_7INIClass@@6B@ DD FLAT:??_R4INIClass@@6B@		; INIClass::`vftable'
	DD	FLAT:??_EINIClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BI@MNFJCFIP@INISection?3?3?$HOINISection?$AA@
CONST	SEGMENT
??_C@_0BI@MNFJCFIP@INISection?3?3?$HOINISection?$AA@ DB 'INISection::~INI'
	DB	'Section', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7INISection@@6B@
CONST	SEGMENT
??_7INISection@@6B@ DD FLAT:??_R4INISection@@6B@	; INISection::`vftable'
	DD	FLAT:??_EINISection@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$List@PAUINIEntry@@@@6B@
CONST	SEGMENT
??_7?$List@PAUINIEntry@@@@6B@ DD FLAT:??_R4?$List@PAUINIEntry@@@@6B@ ; List<INIEntry *>::`vftable'
	DD	FLAT:??_E?$List@PAUINIEntry@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$Node@PAUINISection@@@@6B@
CONST	SEGMENT
??_7?$Node@PAUINISection@@@@6B@ DD FLAT:??_R4?$Node@PAUINISection@@@@6B@ ; Node<INISection *>::`vftable'
	DD	FLAT:??_E?$Node@PAUINISection@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1GK@FAFJBHHM@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GK@FAFJBHHM@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@OBDLAGEP@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DF@OBDLAGEP@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_io.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLFCMBPK@INIEntry?3?3?$HOINIEntry?$AA@
CONST	SEGMENT
??_C@_0BE@NLFCMBPK@INIEntry?3?3?$HOINIEntry?$AA@ DB 'INIEntry::~INIEntry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7INIEntry@@6B@
CONST	SEGMENT
??_7INIEntry@@6B@ DD FLAT:??_R4INIEntry@@6B@		; INIEntry::`vftable'
	DD	FLAT:??_EINIEntry@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$Node@PAUINIEntry@@@@6B@
CONST	SEGMENT
??_7?$Node@PAUINIEntry@@@@6B@ DD FLAT:??_R4?$Node@PAUINIEntry@@@@6B@ ; Node<INIEntry *>::`vftable'
	DD	FLAT:??_E?$Node@PAUINIEntry@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7FileClass@@6B@
CONST	SEGMENT
??_7FileClass@@6B@ DD FLAT:??_R4FileClass@@6B@		; FileClass::`vftable'
	DD	FLAT:??_EFileClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Tell@FileClass@@UAEHXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Get_Date_Time@FileClass@@UAEKXZ
	DD	FLAT:?Set_Date_Time@FileClass@@UAE_NK@Z
	DD	FLAT:__purecall
	DD	FLAT:?Get_File_Handle@FileClass@@UAEPAXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_vector.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7GenericList@@6B@
CONST	SEGMENT
??_7GenericList@@6B@ DD FLAT:??_R4GenericList@@6B@	; GenericList::`vftable'
	DD	FLAT:??_EGenericList@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7GenericNode@@6B@
CONST	SEGMENT
??_7GenericNode@@6B@ DD FLAT:??_R4GenericNode@@6B@	; GenericNode::`vftable'
	DD	FLAT:??_EGenericNode@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??$Binary_Search@UNodeElement@?$IndexClass@HPAUINIEntry@@@@@@YAPAUNodeElement@?$IndexClass@HPAUINIEntry@@@@PAU01@HAAU01@@Z
_TEXT	SEGMENT
_list3$1 = -12						; size = 4
_pos$ = -8						; size = 4
_list2$ = -4						; size = 4
_list$ = 8						; size = 4
_count$ = 12						; size = 4
_var$ = 16						; size = 4
??$Binary_Search@UNodeElement@?$IndexClass@HPAUINIEntry@@@@@@YAPAUNodeElement@?$IndexClass@HPAUINIEntry@@@@PAU01@HAAU01@@Z PROC ; Binary_Search<IndexClass<int,INIEntry *>::NodeElement>, COMDAT

; 1348 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1349 : 	T *list2 = list;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _list2$[ebp], eax

; 1350 : 	int pos = count;

	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
$LN5@Binary_Sea:

; 1351 : 	while (pos > 0)

	cmp	DWORD PTR _pos$[ebp], 0
	jle	SHORT $LN4@Binary_Sea

; 1352 : 	{
; 1353 : 		T *list3 = &list2[pos / 2];

	mov	eax, DWORD PTR _pos$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _list2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _list3$1[ebp], edx

; 1354 : 		if (var.ID >= list3->ID)

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _list3$1[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN3@Binary_Sea

; 1355 : 		{
; 1356 : 			if (list3->ID == var.ID)

	mov	eax, DWORD PTR _list3$1[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@Binary_Sea

; 1357 : 			{
; 1358 : 				return &list2[pos / 2];

	mov	eax, DWORD PTR _pos$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _list2$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	jmp	SHORT $LN6@Binary_Sea
$LN2@Binary_Sea:

; 1359 : 			}
; 1360 : 			list2 = list3 + 1;

	mov	eax, DWORD PTR _list3$1[ebp]
	add	eax, 8
	mov	DWORD PTR _list2$[ebp], eax

; 1361 : 			pos = pos - pos / 2 - 1;

	mov	eax, DWORD PTR _pos$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _pos$[ebp]
	sub	ecx, eax
	sub	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx

; 1362 : 		}
; 1363 : 		else

	jmp	SHORT $LN1@Binary_Sea
$LN3@Binary_Sea:

; 1364 : 		{
; 1365 : 			pos /= 2;

	mov	eax, DWORD PTR _pos$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
$LN1@Binary_Sea:

; 1366 : 		}
; 1367 : 	}

	jmp	SHORT $LN5@Binary_Sea
$LN4@Binary_Sea:

; 1368 : 	return 0;

	xor	eax, eax
$LN6@Binary_Sea:

; 1369 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$Binary_Search@UNodeElement@?$IndexClass@HPAUINIEntry@@@@@@YAPAUNodeElement@?$IndexClass@HPAUINIEntry@@@@PAU01@HAAU01@@Z ENDP ; Binary_Search<IndexClass<int,INIEntry *>::NodeElement>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0NodeElement@?$IndexClass@HPAUINISection@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NodeElement@?$IndexClass@HPAUINISection@@@@QAE@XZ PROC ; IndexClass<int,INISection *>::NodeElement::NodeElement, COMDAT
; _this$ = ecx

; 1141 : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1142 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0NodeElement@?$IndexClass@HPAUINISection@@@@QAE@XZ ENDP ; IndexClass<int,INISection *>::NodeElement::NodeElement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??MNodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_elem$ = 8						; size = 4
??MNodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z PROC ; IndexClass<int,INIEntry *>::NodeElement::operator<, COMDAT
; _this$ = ecx

; 1148 : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1149 : 			return ID < elem.ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]

; 1150 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??MNodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z ENDP ; IndexClass<int,INIEntry *>::NodeElement::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_elem$ = 8						; size = 4
??8NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z PROC ; IndexClass<int,INIEntry *>::NodeElement::operator==, COMDAT
; _this$ = ecx

; 1144 : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1145 : 			return ID == elem.ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]

; 1146 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z ENDP ; IndexClass<int,INIEntry *>::NodeElement::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@XZ PROC	; IndexClass<int,INIEntry *>::NodeElement::NodeElement, COMDAT
; _this$ = ecx

; 1141 : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1142 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@XZ ENDP	; IndexClass<int,INIEntry *>::NodeElement::NodeElement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@ABHABQAUINIEntry@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
_data$ = 12						; size = 4
??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@ABHABQAUINIEntry@@@Z PROC ; IndexClass<int,INIEntry *>::NodeElement::NodeElement, COMDAT
; _this$ = ecx

; 1138 : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1139 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@ABHABQAUINIEntry@@@Z ENDP ; IndexClass<int,INIEntry *>::NodeElement::NodeElement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$List@PAUINISection@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$List@PAUINISection@@@@UAEPAXI@Z PROC		; List<INISection *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$List@PAUINISection@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$List@PAUINISection@@@@UAEPAXI@Z ENDP		; List<INISection *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$List@PAUINISection@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@PAUINISection@@@@UAE@XZ PROC			; List<INISection *>::~List<INISection *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericList@@UAE@XZ			; GenericList::~GenericList
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@PAUINISection@@@@UAE@XZ ENDP			; List<INISection *>::~List<INISection *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete@?$List@PAUINISection@@@@QAEXXZ
_TEXT	SEGMENT
tv94 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Delete@?$List@PAUINISection@@@@QAEXXZ PROC		; List<INISection *>::Delete, COMDAT
; _this$ = ecx

; 1077 : 	void Delete(void) {while (First()->Is_Valid()) delete First();}

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Delete:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?First@?$List@PAUINISection@@@@QBEPAUINISection@@XZ ; List<INISection *>::First
	mov	ecx, eax
	call	?Is_Valid@?$Node@PAUINISection@@@@QBE_NXZ ; Node<INISection *>::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Delete
	push	OFFSET ??_C@_0CC@CJCFMMIE@List?$DMstruct?5INISection?5?$CK?$DO?3?3Delet@
	push	1077					; 00000435H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Delete
	xor	ecx, ecx
	jne	SHORT $LN5@Delete
	push	1077					; 00000435H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Delete:
	jmp	SHORT $LN9@Delete
$LN8@Delete:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?First@?$List@PAUINISection@@@@QBEPAUINISection@@XZ ; List<INISection *>::First
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Delete
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN9@Delete
$LN6@Delete:
	mov	DWORD PTR tv94[ebp], 0
$LN9@Delete:
	jmp	$LN2@Delete
$LN3@Delete:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete@?$List@PAUINISection@@@@QAEXXZ ENDP		; List<INISection *>::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?First@?$List@PAUINISection@@@@QBEPAUINISection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?First@?$List@PAUINISection@@@@QBEPAUINISection@@XZ PROC ; List<INISection *>::First, COMDAT
; _this$ = ecx

; 1073 : 	T First(void) const {return((T)GenericList::First());}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?First@GenericList@@QBEPAVGenericNode@@XZ ; GenericList::First
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?First@?$List@PAUINISection@@@@QBEPAUINISection@@XZ ENDP ; List<INISection *>::First
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$List@PAUINISection@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@PAUINISection@@@@QAE@XZ PROC			; List<INISection *>::List<INISection *>, COMDAT
; _this$ = ecx

; 1072 : 	List(void) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericList@@QAE@XZ			; GenericList::GenericList
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$List@PAUINISection@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@PAUINISection@@@@QAE@XZ ENDP			; List<INISection *>::List<INISection *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Read_Line@@YAHAAVStraw@@PADHAA_N@Z
_TEXT	SEGMENT
tv87 = -92						; size = 4
tv140 = -85						; size = 1
tv137 = -84						; size = 4
tv134 = -80						; size = 4
_getResult$1 = -12					; size = 4
_c$2 = -5						; size = 1
_i$ = -4						; size = 4
_straw$ = 8						; size = 4
_line$ = 12						; size = 4
_lineSize$ = 16						; size = 4
_isLast$ = 20						; size = 4
?Read_Line@@YAHAAVStraw@@PADHAA_N@Z PROC		; Read_Line, COMDAT

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 252  : 		if (!line || lineSize == 0)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN6@Read_Line
	cmp	DWORD PTR _lineSize$[ebp], 0
	jne	SHORT $LN7@Read_Line
$LN6@Read_Line:

; 253  : 				return 0;

	xor	eax, eax
	jmp	$LN8@Read_Line
$LN7@Read_Line:

; 254  : 		int i;
; 255  : 		for (i = 0;;)

	mov	DWORD PTR _i$[ebp], 0
$LN5@Read_Line:

; 256  : 		{
; 257  : 				char c;
; 258  : 				int getResult = straw.Get(&c, 1);

	push	1
	lea	eax, DWORD PTR _c$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _straw$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _straw$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR _getResult$1[ebp], eax

; 259  : 				if (getResult != 1)

	cmp	DWORD PTR _getResult$1[ebp], 1
	je	SHORT $LN3@Read_Line

; 260  : 				{
; 261  : 						isLast = true;

	mov	eax, DWORD PTR _isLast$[ebp]
	mov	BYTE PTR [eax], 1

; 262  : 						break;

	jmp	SHORT $LN4@Read_Line
$LN3@Read_Line:

; 263  : 				}
; 264  : 				if (c == '\n')

	movsx	eax, BYTE PTR _c$2[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN2@Read_Line

; 265  : 						break;

	jmp	SHORT $LN4@Read_Line
$LN2@Read_Line:

; 266  : 				if (c != '\r' && i + 1 < lineSize)

	movsx	eax, BYTE PTR _c$2[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN1@Read_Line
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _lineSize$[ebp]
	jge	SHORT $LN1@Read_Line

; 267  : 						line[i++] = c;

	mov	eax, DWORD PTR _line$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _c$2[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN1@Read_Line:

; 268  : 		}

	jmp	SHORT $LN5@Read_Line
$LN4@Read_Line:

; 269  : 		line[i] = '\0';

	mov	eax, DWORD PTR _line$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0

; 270  : 		strtrim(line);

	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 271  : 		return (int)strlen(line);

	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	mov	ecx, DWORD PTR tv134[ebp]
	add	ecx, 1
	mov	DWORD PTR tv137[ebp], ecx
$LL10@Read_Line:
	mov	edx, DWORD PTR tv134[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv140[ebp], al
	add	DWORD PTR tv134[ebp], 1
	cmp	BYTE PTR tv140[ebp], 0
	jne	SHORT $LL10@Read_Line
	mov	ecx, DWORD PTR tv134[ebp]
	sub	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv87[ebp], ecx
	mov	eax, DWORD PTR tv87[ebp]
$LN8@Read_Line:

; 272  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Read_Line@@YAHAAVStraw@@PADHAA_N@Z ENDP		; Read_Line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$IndexClass@HPAUINISection@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$IndexClass@HPAUINISection@@@@QAEPAXI@Z PROC	; IndexClass<int,INISection *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$IndexClass@HPAUINISection@@@@QAE@XZ ; IndexClass<int,INISection *>::~IndexClass<int,INISection *>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$IndexClass@HPAUINISection@@@@QAEPAXI@Z ENDP	; IndexClass<int,INISection *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Increase_Table_Size@?$IndexClass@HPAUINISection@@@@QAE_NH@Z
_TEXT	SEGMENT
tv87 = -100						; size = 4
tv89 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_i$4 = -16						; size = 4
_newindex$5 = -12					; size = 4
_newsize$6 = -8						; size = 4
_this$ = -4						; size = 4
_amount$ = 8						; size = 4
?Increase_Table_Size@?$IndexClass@HPAUINISection@@@@QAE_NH@Z PROC ; IndexClass<int,INISection *>::Increase_Table_Size, COMDAT
; _this$ = ecx

; 1297 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1298 : 		if (amount >= 0)

	cmp	DWORD PTR _amount$[ebp], 0
	jl	$LN10@Increase_T

; 1299 : 		{
; 1300 : 			int newsize = IndexSize + amount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _amount$[ebp]
	mov	DWORD PTR _newsize$6[ebp], ecx

; 1301 : 			NodeElement *newindex = new NodeElement[newsize];

	push	OFFSET ??_C@_0DJ@IHGELHP@IndexClass?$DMint?0struct?5INISection@
	push	1301					; 00000515H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN16@Increase_T
	xor	ecx, ecx
	jne	SHORT $LN13@Increase_T
	push	1301					; 00000515H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Increase_T:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN17@Increase_T
$LN16@Increase_T:
	mov	eax, DWORD PTR _newsize$6[ebp]
	mov	DWORD PTR $T1[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN14@Increase_T
	push	OFFSET ??0NodeElement@?$IndexClass@HPAUINISection@@@@QAE@XZ ; IndexClass<int,INISection *>::NodeElement::NodeElement
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN15@Increase_T
$LN14@Increase_T:
	mov	DWORD PTR tv87[ebp], 0
$LN15@Increase_T:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN17@Increase_T:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _newindex$5[ebp], ecx

; 1302 : 			if (newindex)

	cmp	DWORD PTR _newindex$5[ebp], 0
	je	$LN10@Increase_T
$LN7@Increase_T:

; 1303 : 			{
; 1304 : 				TT_ASSERT(IndexCount < newsize);

	xor	eax, eax
	jne	SHORT $LN7@Increase_T
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _newsize$6[ebp]
	jl	SHORT $LN5@Increase_T
	int	3
$LN5@Increase_T:

; 1305 : 				for (int i = 0;i < this->IndexCount;i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@Increase_T
$LN3@Increase_T:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@Increase_T:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN2@Increase_T

; 1306 : 				{
; 1307 : 					newindex[i].ID = IndexTable[i].ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _newindex$5[ebp]
	mov	esi, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR [ecx+esi*8]
	mov	DWORD PTR [eax+edx*8], ecx

; 1308 : 					newindex[i].Data = IndexTable[i].Data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _newindex$5[ebp]
	mov	esi, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR [ecx+esi*8+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 1309 : 				}

	jmp	SHORT $LN3@Increase_T
$LN2@Increase_T:

; 1310 : 				if (IndexTable)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Increase_T

; 1311 : 					delete[] IndexTable;

	push	OFFSET ??_C@_0DJ@IHGELHP@IndexClass?$DMint?0struct?5INISection@
	push	1311					; 0000051fH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN19@Increase_T
	xor	ecx, ecx
	jne	SHORT $LN18@Increase_T
	push	1311					; 0000051fH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN18@Increase_T:
	jmp	SHORT $LN1@Increase_T
$LN19@Increase_T:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Increase_T:

; 1312 : 				IndexTable = newindex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newindex$5[ebp]
	mov	DWORD PTR [eax], ecx

; 1313 : 				IndexSize += amount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _amount$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1314 : 				Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINISection@@@@QAEXXZ ; IndexClass<int,INISection *>::Invalidate_Archive

; 1315 : 				return true;

	mov	al, 1
	jmp	SHORT $LN11@Increase_T
$LN10@Increase_T:

; 1316 : 			}
; 1317 : 		}
; 1318 : 		return false;

	xor	al, al
$LN11@Increase_T:

; 1319 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Increase_Table_Size@?$IndexClass@HPAUINISection@@@@QAE_NH@Z ENDP ; IndexClass<int,INISection *>::Increase_Table_Size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$IndexClass@HPAUINISection@@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$IndexClass@HPAUINISection@@@@QAEXXZ PROC	; IndexClass<int,INISection *>::Clear, COMDAT
; _this$ = ecx

; 1262 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1263 : 		if (IndexTable)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Clear

; 1264 : 		{
; 1265 : 			delete[] IndexTable;

	push	OFFSET ??_C@_0CL@POINCKL@IndexClass?$DMint?0struct?5INISection@
	push	1265					; 000004f1H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN5@Clear
	xor	ecx, ecx
	jne	SHORT $LN4@Clear
	push	1265					; 000004f1H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Clear:
	jmp	SHORT $LN1@Clear
$LN5@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 1266 : 		}
; 1267 : 		IndexTable = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1268 : 		IndexCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1269 : 		IndexSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1270 : 		IsSorted = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 1271 : 		Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINISection@@@@QAEXXZ ; IndexClass<int,INISection *>::Invalidate_Archive

; 1272 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$IndexClass@HPAUINISection@@@@QAEXXZ ENDP	; IndexClass<int,INISection *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Invalidate_Archive@?$IndexClass@HPAUINISection@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Invalidate_Archive@?$IndexClass@HPAUINISection@@@@QAEXXZ PROC ; IndexClass<int,INISection *>::Invalidate_Archive, COMDAT
; _this$ = ecx

; 1258 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1259 : 		Archive = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1260 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Invalidate_Archive@?$IndexClass@HPAUINISection@@@@QAEXXZ ENDP ; IndexClass<int,INISection *>::Invalidate_Archive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$IndexClass@HPAUINISection@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$IndexClass@HPAUINISection@@@@QBEHXZ PROC	; IndexClass<int,INISection *>::Count, COMDAT
; _this$ = ecx

; 1245 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1246 : 		return IndexCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1247 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$IndexClass@HPAUINISection@@@@QBEHXZ ENDP	; IndexClass<int,INISection *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add_Index@?$IndexClass@HPAUINISection@@@@QAE_NABHABQAUINISection@@@Z
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_Data$ = 12						; size = 4
?Add_Index@?$IndexClass@HPAUINISection@@@@QAE_NABHABQAUINISection@@@Z PROC ; IndexClass<int,INISection *>::Add_Index, COMDAT
; _this$ = ecx

; 1219 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1220 : 		if (IndexCount + 1 <= IndexSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jg	SHORT $LN4@Add_Index

; 1221 : 		{
; 1222 : 			IndexTable[IndexCount].ID = ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _ID$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8], edx

; 1223 : 			IndexTable[IndexCount++].Data = Data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _Data$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1224 : 			IsSorted = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 1225 : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Add_Index
$LN4@Add_Index:

; 1226 : 		}
; 1227 : 		int size = IndexSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _size$[ebp], ecx

; 1228 : 		if (!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN3@Add_Index

; 1229 : 		{
; 1230 : 			size = 10;

	mov	DWORD PTR _size$[ebp], 10		; 0000000aH
$LN3@Add_Index:

; 1231 : 		}
; 1232 : 		if (Increase_Table_Size(size))

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Increase_Table_Size@?$IndexClass@HPAUINISection@@@@QAE_NH@Z ; IndexClass<int,INISection *>::Increase_Table_Size
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Add_Index

; 1233 : 		{
; 1234 : 			IndexTable[IndexCount].ID = ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _ID$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8], edx

; 1235 : 			IndexTable[IndexCount++].Data = Data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _Data$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1236 : 			IsSorted = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 1237 : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Add_Index

; 1238 : 		}
; 1239 : 		else

	jmp	SHORT $LN5@Add_Index
$LN2@Add_Index:

; 1240 : 		{
; 1241 : 			return false;

	xor	al, al
$LN5@Add_Index:

; 1242 : 		}
; 1243 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Add_Index@?$IndexClass@HPAUINISection@@@@QAE_NABHABQAUINISection@@@Z ENDP ; IndexClass<int,INISection *>::Add_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Remove_Index@?$IndexClass@HPAUINISection@@@@QAE_NABH@Z
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_i$2 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Remove_Index@?$IndexClass@HPAUINISection@@@@QAE_NABH@Z PROC ; IndexClass<int,INISection *>::Remove_Index, COMDAT
; _this$ = ecx

; 1167 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1168 : 		int pos = -1;

	mov	DWORD PTR _pos$[ebp], -1

; 1169 : 		for (int i = 0;i < IndexCount;i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN9@Remove_Ind
$LN8@Remove_Ind:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN9@Remove_Ind:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN7@Remove_Ind

; 1170 : 		{
; 1171 : 			if (IndexTable[i].ID == ID)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _ID$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN6@Remove_Ind

; 1172 : 			{
; 1173 : 				pos = i;

	mov	eax, DWORD PTR _i$2[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 1174 : 				break;

	jmp	SHORT $LN7@Remove_Ind
$LN6@Remove_Ind:

; 1175 : 			}
; 1176 : 		}

	jmp	SHORT $LN8@Remove_Ind
$LN7@Remove_Ind:

; 1177 : 		if (pos == -1)

	cmp	DWORD PTR _pos$[ebp], -1
	jne	SHORT $LN5@Remove_Ind

; 1178 : 		{
; 1179 : 			return false;

	xor	al, al
	jmp	SHORT $LN10@Remove_Ind

; 1180 : 		}
; 1181 : 		else

	jmp	SHORT $LN4@Remove_Ind
$LN5@Remove_Ind:

; 1182 : 		{
; 1183 : 			for (int i = pos;i < IndexCount;i++)

	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN3@Remove_Ind
$LN2@Remove_Ind:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Remove_Ind:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN4@Remove_Ind

; 1184 : 			{
; 1185 : 				IndexTable[i] = IndexTable[i+1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+8]
	mov	ecx, DWORD PTR [ecx+edx*8+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	esi, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [edx+esi*8], eax
	mov	DWORD PTR [edx+esi*8+4], ecx

; 1186 : 			}

	jmp	SHORT $LN2@Remove_Ind
$LN4@Remove_Ind:

; 1187 : 		}
; 1188 : 		IndexCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1189 : 		IndexTable[IndexCount].ID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8], 0

; 1190 : 		IndexTable[IndexCount].Data = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8+4], 0

; 1191 : 		Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINISection@@@@QAEXXZ ; IndexClass<int,INISection *>::Invalidate_Archive

; 1192 : 		return true;

	mov	al, 1
$LN10@Remove_Ind:

; 1193 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_Index@?$IndexClass@HPAUINISection@@@@QAE_NABH@Z ENDP ; IndexClass<int,INISection *>::Remove_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$IndexClass@HPAUINISection@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$IndexClass@HPAUINISection@@@@QAE@XZ PROC		; IndexClass<int,INISection *>::~IndexClass<int,INISection *>, COMDAT
; _this$ = ecx

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1164 : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$IndexClass@HPAUINISection@@@@QAEXXZ ; IndexClass<int,INISection *>::Clear

; 1165 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$IndexClass@HPAUINISection@@@@QAE@XZ ENDP		; IndexClass<int,INISection *>::~IndexClass<int,INISection *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$IndexClass@HPAUINISection@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IndexClass@HPAUINISection@@@@QAE@XZ PROC		; IndexClass<int,INISection *>::IndexClass<int,INISection *>, COMDAT
; _this$ = ecx

; 1159 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1160 : 		Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINISection@@@@QAEXXZ ; IndexClass<int,INISection *>::Invalidate_Archive

; 1161 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$IndexClass@HPAUINISection@@@@QAE@XZ ENDP		; IndexClass<int,INISection *>::IndexClass<int,INISection *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Read_Paths@@YAXXZ
_TEXT	SEGMENT
tv716 = -2729						; size = 1
tv622 = -2729						; size = 1
tv513 = -2729						; size = 1
tv713 = -2728						; size = 4
tv619 = -2728						; size = 4
tv510 = -2728						; size = 4
tv671 = -2725						; size = 1
tv577 = -2725						; size = 1
tv468 = -2725						; size = 1
tv710 = -2724						; size = 4
tv668 = -2724						; size = 4
tv616 = -2724						; size = 4
tv574 = -2724						; size = 4
tv507 = -2724						; size = 4
tv465 = -2724						; size = 4
tv709 = -2720						; size = 4
tv665 = -2720						; size = 4
tv615 = -2720						; size = 4
tv571 = -2720						; size = 4
tv506 = -2720						; size = 4
tv462 = -2720						; size = 4
tv664 = -2716						; size = 4
tv570 = -2716						; size = 4
tv461 = -2716						; size = 4
tv704 = -2713						; size = 1
tv610 = -2713						; size = 1
tv501 = -2713						; size = 1
tv701 = -2712						; size = 4
tv607 = -2712						; size = 4
tv498 = -2712						; size = 4
tv659 = -2709						; size = 1
tv565 = -2709						; size = 1
tv456 = -2709						; size = 1
tv699 = -2708						; size = 4
tv656 = -2708						; size = 4
tv605 = -2708						; size = 4
tv562 = -2708						; size = 4
tv496 = -2708						; size = 4
tv453 = -2708						; size = 4
tv690 = -2705						; size = 1
tv641 = -2705						; size = 1
tv596 = -2705						; size = 1
tv553 = -2705						; size = 1
tv532 = -2705						; size = 1
tv487 = -2705						; size = 1
tv412 = -2705						; size = 1
tv687 = -2704						; size = 4
tv654 = -2704						; size = 4
tv638 = -2704						; size = 4
tv593 = -2704						; size = 4
tv560 = -2704						; size = 4
tv550 = -2704						; size = 4
tv529 = -2704						; size = 4
tv484 = -2704						; size = 4
tv451 = -2704						; size = 4
tv409 = -2704						; size = 4
tv317 = -2704						; size = 4
tv293 = -2704						; size = 4
tv231 = -2704						; size = 4
tv68 = -2704						; size = 4
tv65 = -2701						; size = 1
_value$1 = -2636					; size = 2
_i$2 = -2632						; size = 4
_unicode$3 = -2625					; size = 1
_fpath$4 = -2624					; size = 520
_value$5 = -2104					; size = 2
_i$6 = -2100						; size = 4
_unicode$7 = -2093					; size = 1
_fpath$8 = -2092					; size = 520
_ini$ = -1572						; size = 4
_UseRenFolder$ = -1565					; size = 1
_FileFDS$ = -1564					; size = 260
_FileClient$ = -1304					; size = 260
_FileBase$ = -1044					; size = 260
_RegFDS$ = -784						; size = 260
_RegClient$ = -524					; size = 260
_RegBase$ = -264					; size = 260
_isClient$ = -1						; size = 1
?Read_Paths@@YAXXZ PROC					; Read_Paths, COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2732				; 00000aacH
	push	ebx
	push	esi
	push	edi

; 56   : #ifndef EXTERNAL
; 57   : 	const bool isClient = (Exe == 0);

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN21@Read_Paths
	mov	BYTE PTR tv65[ebp], 1
	jmp	SHORT $LN22@Read_Paths
$LN21@Read_Paths:
	mov	BYTE PTR tv65[ebp], 0
$LN22@Read_Paths:
	mov	al, BYTE PTR tv65[ebp]
	mov	BYTE PTR _isClient$[ebp], al

; 58   : #else
; 59   : #if defined(PACKAGEEDITOR)
; 60   : 	const bool isClient = false;
; 61   : #else
; 62   : 	const bool isClient = true;
; 63   : #endif
; 64   : #endif
; 65   : 
; 66   : 	char RegBase[MAX_PATH];
; 67   : 	char RegClient[MAX_PATH];
; 68   : 	char RegFDS[MAX_PATH];
; 69   : 	char FileBase[MAX_PATH];
; 70   : 	char FileClient[MAX_PATH];
; 71   : 	char FileFDS[MAX_PATH];
; 72   : 
; 73   : 	bool UseRenFolder = !isClient;

	movzx	eax, BYTE PTR _isClient$[ebp]
	test	eax, eax
	jne	SHORT $LN23@Read_Paths
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN24@Read_Paths
$LN23@Read_Paths:
	mov	DWORD PTR tv68[ebp], 0
$LN24@Read_Paths:
	mov	cl, BYTE PTR tv68[ebp]
	mov	BYTE PTR _UseRenFolder$[ebp], cl

; 74   : 	INIClass *ini = Get_INI("paths.ini");

	push	OFFSET ??_C@_09HCHIHKFJ@paths?4ini?$AA@
	call	?Get_INI@@YAPAVINIClass@@PBD@Z		; Get_INI
	add	esp, 4
	mov	DWORD PTR _ini$[ebp], eax

; 75   : 	if (ini)

	cmp	DWORD PTR _ini$[ebp], 0
	je	$LN18@Read_Paths

; 76   : 	{
; 77   : 		ini->Get_String("paths","RegBase","Westwood",RegBase,MAX_PATH);

	push	260					; 00000104H
	lea	eax, DWORD PTR _RegBase$[ebp]
	push	eax
	push	OFFSET ??_C@_08LAFABFGE@Westwood?$AA@
	push	OFFSET ??_C@_07KODFFKCJ@RegBase?$AA@
	push	OFFSET ??_C@_05EHMGIKAG@paths?$AA@
	mov	ecx, DWORD PTR _ini$[ebp]
	call	?Get_String@INIClass@@QBEHPBD00PADH@Z	; INIClass::Get_String

; 78   : 		ini->Get_String("paths","RegClient","Renegade",RegClient,MAX_PATH);

	push	260					; 00000104H
	lea	eax, DWORD PTR _RegClient$[ebp]
	push	eax
	push	OFFSET ??_C@_08KBDFECAK@Renegade?$AA@
	push	OFFSET ??_C@_09PGFLEEKF@RegClient?$AA@
	push	OFFSET ??_C@_05EHMGIKAG@paths?$AA@
	mov	ecx, DWORD PTR _ini$[ebp]
	call	?Get_String@INIClass@@QBEHPBD00PADH@Z	; INIClass::Get_String

; 79   : 		ini->Get_String("paths","RegFDS","RenegadeFDS",RegFDS,MAX_PATH);

	push	260					; 00000104H
	lea	eax, DWORD PTR _RegFDS$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@MBBBEALJ@RenegadeFDS?$AA@
	push	OFFSET ??_C@_06PNIIMBMB@RegFDS?$AA@
	push	OFFSET ??_C@_05EHMGIKAG@paths?$AA@
	mov	ecx, DWORD PTR _ini$[ebp]
	call	?Get_String@INIClass@@QBEHPBD00PADH@Z	; INIClass::Get_String

; 80   : 		ini->Get_String("paths","FileBase","Renegade",FileBase,MAX_PATH);

	push	260					; 00000104H
	lea	eax, DWORD PTR _FileBase$[ebp]
	push	eax
	push	OFFSET ??_C@_08KBDFECAK@Renegade?$AA@
	push	OFFSET ??_C@_08IAGBEAJA@FileBase?$AA@
	push	OFFSET ??_C@_05EHMGIKAG@paths?$AA@
	mov	ecx, DWORD PTR _ini$[ebp]
	call	?Get_String@INIClass@@QBEHPBD00PADH@Z	; INIClass::Get_String

; 81   : 		ini->Get_String("paths","FileClient","Client",FileClient,MAX_PATH);

	push	260					; 00000104H
	lea	eax, DWORD PTR _FileClient$[ebp]
	push	eax
	push	OFFSET ??_C@_06PJIGMIJB@Client?$AA@
	push	OFFSET ??_C@_0L@DODOIGHK@FileClient?$AA@
	push	OFFSET ??_C@_05EHMGIKAG@paths?$AA@
	mov	ecx, DWORD PTR _ini$[ebp]
	call	?Get_String@INIClass@@QBEHPBD00PADH@Z	; INIClass::Get_String

; 82   : 		ini->Get_String("paths","FileFDS","FDS",FileFDS,MAX_PATH);

	push	260					; 00000104H
	lea	eax, DWORD PTR _FileFDS$[ebp]
	push	eax
	push	OFFSET ??_C@_03IGMBAMIJ@FDS?$AA@
	push	OFFSET ??_C@_07BNJPPJLM@FileFDS?$AA@
	push	OFFSET ??_C@_05EHMGIKAG@paths?$AA@
	mov	ecx, DWORD PTR _ini$[ebp]
	call	?Get_String@INIClass@@QBEHPBD00PADH@Z	; INIClass::Get_String

; 83   : 		UseRenFolder = ini->Get_Bool("paths","UseRenFolder",UseRenFolder);

	movzx	eax, BYTE PTR _UseRenFolder$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@JNOHGBBN@UseRenFolder?$AA@
	push	OFFSET ??_C@_05EHMGIKAG@paths?$AA@
	mov	ecx, DWORD PTR _ini$[ebp]
	call	?Get_Bool@INIClass@@QBE_NPBD0_N@Z	; INIClass::Get_Bool
	mov	BYTE PTR _UseRenFolder$[ebp], al

; 84   : 		Release_INI(ini);

	mov	eax, DWORD PTR _ini$[ebp]
	push	eax
	call	?Release_INI@@YAXPAVINIClass@@@Z	; Release_INI
	add	esp, 4

; 85   : 	}
; 86   : 	else

	jmp	$LN17@Read_Paths
$LN18@Read_Paths:

; 87   : 	{
; 88   : 		strcpy(RegBase,"Westwood");

	mov	eax, DWORD PTR ??_C@_08LAFABFGE@Westwood?$AA@
	mov	DWORD PTR _RegBase$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_08LAFABFGE@Westwood?$AA@+4
	mov	DWORD PTR _RegBase$[ebp+4], ecx
	mov	dl, BYTE PTR ??_C@_08LAFABFGE@Westwood?$AA@+8
	mov	BYTE PTR _RegBase$[ebp+8], dl

; 89   : 		strcpy(RegClient,"Renegade");

	mov	eax, DWORD PTR ??_C@_08KBDFECAK@Renegade?$AA@
	mov	DWORD PTR _RegClient$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_08KBDFECAK@Renegade?$AA@+4
	mov	DWORD PTR _RegClient$[ebp+4], ecx
	mov	dl, BYTE PTR ??_C@_08KBDFECAK@Renegade?$AA@+8
	mov	BYTE PTR _RegClient$[ebp+8], dl

; 90   : 		strcpy(RegFDS,"RenegadeFDS");

	mov	eax, DWORD PTR ??_C@_0M@MBBBEALJ@RenegadeFDS?$AA@
	mov	DWORD PTR _RegFDS$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_0M@MBBBEALJ@RenegadeFDS?$AA@+4
	mov	DWORD PTR _RegFDS$[ebp+4], ecx
	mov	edx, DWORD PTR ??_C@_0M@MBBBEALJ@RenegadeFDS?$AA@+8
	mov	DWORD PTR _RegFDS$[ebp+8], edx

; 91   : 		strcpy(FileBase,"Renegade");

	mov	eax, DWORD PTR ??_C@_08KBDFECAK@Renegade?$AA@
	mov	DWORD PTR _FileBase$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_08KBDFECAK@Renegade?$AA@+4
	mov	DWORD PTR _FileBase$[ebp+4], ecx
	mov	dl, BYTE PTR ??_C@_08KBDFECAK@Renegade?$AA@+8
	mov	BYTE PTR _FileBase$[ebp+8], dl

; 92   : 		strcpy(FileClient,"Client");

	mov	eax, DWORD PTR ??_C@_06PJIGMIJB@Client?$AA@
	mov	DWORD PTR _FileClient$[ebp], eax
	mov	cx, WORD PTR ??_C@_06PJIGMIJB@Client?$AA@+4
	mov	WORD PTR _FileClient$[ebp+4], cx
	mov	dl, BYTE PTR ??_C@_06PJIGMIJB@Client?$AA@+6
	mov	BYTE PTR _FileClient$[ebp+6], dl

; 93   : 		strcpy(FileFDS,"FDS");

	mov	eax, DWORD PTR ??_C@_03IGMBAMIJ@FDS?$AA@
	mov	DWORD PTR _FileFDS$[ebp], eax
$LN17@Read_Paths:

; 94   : 	}
; 95   : 	FilePath[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	BYTE PTR ?FilePath@@3PADA[eax], 0

; 96   : 	if (!UseRenFolder)

	movzx	eax, BYTE PTR _UseRenFolder$[ebp]
	test	eax, eax
	jne	$LN16@Read_Paths

; 97   : 	{
; 98   : 		wchar_t fpath[MAX_PATH];
; 99   : 		SHGetSpecialFolderPathW(NULL, fpath, CSIDL_MYDOCUMENTS, FALSE);

	push	0
	push	5
	lea	eax, DWORD PTR _fpath$8[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__SHGetSpecialFolderPathW@16

; 100  : 		bool unicode = false;

	mov	BYTE PTR _unicode$7[ebp], 0

; 101  : 		for (int i = 0;fpath[i] != 0;i++)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN15@Read_Paths
$LN14@Read_Paths:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN15@Read_Paths:
	mov	eax, DWORD PTR _i$6[ebp]
	movzx	ecx, WORD PTR _fpath$8[ebp+eax*2]
	test	ecx, ecx
	je	SHORT $LN13@Read_Paths

; 102  : 		{
; 103  : 			unsigned short value = fpath[i];

	mov	eax, DWORD PTR _i$6[ebp]
	mov	cx, WORD PTR _fpath$8[ebp+eax*2]
	mov	WORD PTR _value$5[ebp], cx

; 104  : 			if (value > 255)

	movzx	eax, WORD PTR _value$5[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN12@Read_Paths

; 105  : 			{
; 106  : 				unicode = true;

	mov	BYTE PTR _unicode$7[ebp], 1

; 107  : 				break;

	jmp	SHORT $LN13@Read_Paths
$LN12@Read_Paths:

; 108  : 			}
; 109  : 		}

	jmp	SHORT $LN14@Read_Paths
$LN13@Read_Paths:

; 110  : 		if (unicode)

	movzx	eax, BYTE PTR _unicode$7[ebp]
	test	eax, eax
	je	SHORT $LN11@Read_Paths

; 111  : 		{
; 112  : 			GetModuleFileName(NULL,FilePath,MAX_PATH);

	push	260					; 00000104H
	push	OFFSET ?FilePath@@3PADA			; FilePath
	push	0
	call	DWORD PTR __imp__GetModuleFileNameA@12

; 113  : 			strrchr(FilePath,'\\')[0] = 0;

	push	92					; 0000005cH
	push	OFFSET ?FilePath@@3PADA			; FilePath
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR [eax+ecx], 0

; 114  : 		}
; 115  : 		else

	jmp	SHORT $LN10@Read_Paths
$LN11@Read_Paths:

; 116  : 		{
; 117  : 			SHGetSpecialFolderPath(NULL,  FilePath, CSIDL_MYDOCUMENTS, FALSE);

	push	0
	push	5
	push	OFFSET ?FilePath@@3PADA			; FilePath
	push	0
	call	DWORD PTR __imp__SHGetSpecialFolderPathA@16
$LN10@Read_Paths:

; 118  : 		}
; 119  : 	}
; 120  : 	else

	jmp	SHORT $LN9@Read_Paths
$LN16@Read_Paths:

; 121  : 	{
; 122  : 		GetModuleFileName(NULL,FilePath,MAX_PATH);

	push	260					; 00000104H
	push	OFFSET ?FilePath@@3PADA			; FilePath
	push	0
	call	DWORD PTR __imp__GetModuleFileNameA@12

; 123  : 		strrchr(FilePath,'\\')[0] = 0;

	push	92					; 0000005cH
	push	OFFSET ?FilePath@@3PADA			; FilePath
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR [eax+ecx], 0
$LN9@Read_Paths:

; 124  : 	}
; 125  : 	strcat(FilePath,"\\");

	mov	eax, OFFSET ?FilePath@@3PADA		; FilePath
	add	eax, -1
	mov	DWORD PTR tv409[ebp], eax
$LL31@Read_Paths:
	mov	ecx, DWORD PTR tv409[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv412[ebp], dl
	add	DWORD PTR tv409[ebp], 1
	cmp	BYTE PTR tv412[ebp], 0
	jne	SHORT $LL31@Read_Paths
	mov	edi, DWORD PTR tv409[ebp]
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [edi], ax

; 126  : 	strcat(FilePath,FileBase);

	lea	eax, DWORD PTR _FileBase$[ebp]
	mov	DWORD PTR tv451[ebp], eax
	mov	ecx, DWORD PTR tv451[ebp]
	mov	DWORD PTR tv453[ebp], ecx
$LL32@Read_Paths:
	mov	edx, DWORD PTR tv451[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv456[ebp], al
	add	DWORD PTR tv451[ebp], 1
	cmp	BYTE PTR tv456[ebp], 0
	jne	SHORT $LL32@Read_Paths
	mov	ecx, DWORD PTR tv451[ebp]
	sub	ecx, DWORD PTR tv453[ebp]
	mov	edx, DWORD PTR tv453[ebp]
	mov	DWORD PTR tv461[ebp], edx
	mov	DWORD PTR tv462[ebp], ecx
	mov	eax, OFFSET ?FilePath@@3PADA		; FilePath
	add	eax, -1
	mov	DWORD PTR tv465[ebp], eax
$LL33@Read_Paths:
	mov	ecx, DWORD PTR tv465[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv468[ebp], dl
	add	DWORD PTR tv465[ebp], 1
	cmp	BYTE PTR tv468[ebp], 0
	jne	SHORT $LL33@Read_Paths
	mov	edi, DWORD PTR tv465[ebp]
	mov	esi, DWORD PTR tv461[ebp]
	mov	eax, DWORD PTR tv462[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 127  : 	strcat(FilePath,"\\");

	mov	eax, OFFSET ?FilePath@@3PADA		; FilePath
	add	eax, -1
	mov	DWORD PTR tv484[ebp], eax
$LL34@Read_Paths:
	mov	ecx, DWORD PTR tv484[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv487[ebp], dl
	add	DWORD PTR tv484[ebp], 1
	cmp	BYTE PTR tv487[ebp], 0
	jne	SHORT $LL34@Read_Paths
	mov	edi, DWORD PTR tv484[ebp]
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [edi], ax

; 128  : 	strcat(FilePath,isClient ? FileClient : FileFDS);

	movzx	eax, BYTE PTR _isClient$[ebp]
	test	eax, eax
	je	SHORT $LN25@Read_Paths
	lea	ecx, DWORD PTR _FileClient$[ebp]
	mov	DWORD PTR tv231[ebp], ecx
	jmp	SHORT $LN26@Read_Paths
$LN25@Read_Paths:
	lea	edx, DWORD PTR _FileFDS$[ebp]
	mov	DWORD PTR tv231[ebp], edx
$LN26@Read_Paths:
	mov	eax, DWORD PTR tv231[ebp]
	mov	DWORD PTR tv496[ebp], eax
	mov	ecx, DWORD PTR tv496[ebp]
	mov	DWORD PTR tv498[ebp], ecx
$LL35@Read_Paths:
	mov	edx, DWORD PTR tv496[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv501[ebp], al
	add	DWORD PTR tv496[ebp], 1
	cmp	BYTE PTR tv501[ebp], 0
	jne	SHORT $LL35@Read_Paths
	mov	ecx, DWORD PTR tv496[ebp]
	sub	ecx, DWORD PTR tv498[ebp]
	mov	edx, DWORD PTR tv498[ebp]
	mov	DWORD PTR tv506[ebp], edx
	mov	DWORD PTR tv507[ebp], ecx
	mov	eax, OFFSET ?FilePath@@3PADA		; FilePath
	add	eax, -1
	mov	DWORD PTR tv510[ebp], eax
$LL36@Read_Paths:
	mov	ecx, DWORD PTR tv510[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv513[ebp], dl
	add	DWORD PTR tv510[ebp], 1
	cmp	BYTE PTR tv513[ebp], 0
	jne	SHORT $LL36@Read_Paths
	mov	edi, DWORD PTR tv510[ebp]
	mov	esi, DWORD PTR tv506[ebp]
	mov	eax, DWORD PTR tv507[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 129  : 	strcat(FilePath,"\\");

	mov	eax, OFFSET ?FilePath@@3PADA		; FilePath
	add	eax, -1
	mov	DWORD PTR tv529[ebp], eax
$LL37@Read_Paths:
	mov	ecx, DWORD PTR tv529[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv532[ebp], dl
	add	DWORD PTR tv529[ebp], 1
	cmp	BYTE PTR tv532[ebp], 0
	jne	SHORT $LL37@Read_Paths
	mov	edi, DWORD PTR tv529[ebp]
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [edi], ax

; 130  : 
; 131  : 	AppDataPath[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	BYTE PTR ?AppDataPath@@3PADA[eax], 0

; 132  : 	if (!UseRenFolder)

	movzx	eax, BYTE PTR _UseRenFolder$[ebp]
	test	eax, eax
	jne	$LN8@Read_Paths

; 133  : 	{
; 134  : 		wchar_t fpath[MAX_PATH];
; 135  : 		SHGetSpecialFolderPathW(NULL, fpath, CSIDL_MYDOCUMENTS, FALSE);

	push	0
	push	5
	lea	eax, DWORD PTR _fpath$4[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__SHGetSpecialFolderPathW@16

; 136  : 		bool unicode = false;

	mov	BYTE PTR _unicode$3[ebp], 0

; 137  : 		for (int i = 0;fpath[i] != 0;i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@Read_Paths
$LN6@Read_Paths:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@Read_Paths:
	mov	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, WORD PTR _fpath$4[ebp+eax*2]
	test	ecx, ecx
	je	SHORT $LN5@Read_Paths

; 138  : 		{
; 139  : 			unsigned short value = fpath[i];

	mov	eax, DWORD PTR _i$2[ebp]
	mov	cx, WORD PTR _fpath$4[ebp+eax*2]
	mov	WORD PTR _value$1[ebp], cx

; 140  : 			if (value > 255)

	movzx	eax, WORD PTR _value$1[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN4@Read_Paths

; 141  : 			{
; 142  : 				unicode = true;

	mov	BYTE PTR _unicode$3[ebp], 1

; 143  : 				break;

	jmp	SHORT $LN5@Read_Paths
$LN4@Read_Paths:

; 144  : 			}
; 145  : 		}

	jmp	SHORT $LN6@Read_Paths
$LN5@Read_Paths:

; 146  : 		if (unicode)

	movzx	eax, BYTE PTR _unicode$3[ebp]
	test	eax, eax
	je	SHORT $LN3@Read_Paths

; 147  : 		{
; 148  : 			GetModuleFileName(NULL,AppDataPath,MAX_PATH);

	push	260					; 00000104H
	push	OFFSET ?AppDataPath@@3PADA		; AppDataPath
	push	0
	call	DWORD PTR __imp__GetModuleFileNameA@12

; 149  : 			strrchr(AppDataPath,'\\')[0] = 0;

	push	92					; 0000005cH
	push	OFFSET ?AppDataPath@@3PADA		; AppDataPath
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR [eax+ecx], 0

; 150  : 		}
; 151  : 		else

	jmp	SHORT $LN2@Read_Paths
$LN3@Read_Paths:

; 152  : 		{
; 153  : 			SHGetSpecialFolderPath(NULL, AppDataPath, CSIDL_APPDATA, FALSE);

	push	0
	push	26					; 0000001aH
	push	OFFSET ?AppDataPath@@3PADA		; AppDataPath
	push	0
	call	DWORD PTR __imp__SHGetSpecialFolderPathA@16
$LN2@Read_Paths:

; 154  : 		}
; 155  : 	}
; 156  : 	else

	jmp	SHORT $LN1@Read_Paths
$LN8@Read_Paths:

; 157  : 	{
; 158  : 		GetModuleFileName(NULL,AppDataPath,MAX_PATH);

	push	260					; 00000104H
	push	OFFSET ?AppDataPath@@3PADA		; AppDataPath
	push	0
	call	DWORD PTR __imp__GetModuleFileNameA@12

; 159  : 		strrchr(AppDataPath,'\\')[0] = 0;

	push	92					; 0000005cH
	push	OFFSET ?AppDataPath@@3PADA		; AppDataPath
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR [eax+ecx], 0
$LN1@Read_Paths:

; 160  : 	}
; 161  : 	strcat(AppDataPath,"\\");

	mov	eax, OFFSET ?AppDataPath@@3PADA		; AppDataPath
	add	eax, -1
	mov	DWORD PTR tv550[ebp], eax
$LL38@Read_Paths:
	mov	ecx, DWORD PTR tv550[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv553[ebp], dl
	add	DWORD PTR tv550[ebp], 1
	cmp	BYTE PTR tv553[ebp], 0
	jne	SHORT $LL38@Read_Paths
	mov	edi, DWORD PTR tv550[ebp]
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [edi], ax

; 162  : 	strcat(AppDataPath,FileBase);

	lea	eax, DWORD PTR _FileBase$[ebp]
	mov	DWORD PTR tv560[ebp], eax
	mov	ecx, DWORD PTR tv560[ebp]
	mov	DWORD PTR tv562[ebp], ecx
$LL39@Read_Paths:
	mov	edx, DWORD PTR tv560[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv565[ebp], al
	add	DWORD PTR tv560[ebp], 1
	cmp	BYTE PTR tv565[ebp], 0
	jne	SHORT $LL39@Read_Paths
	mov	ecx, DWORD PTR tv560[ebp]
	sub	ecx, DWORD PTR tv562[ebp]
	mov	edx, DWORD PTR tv562[ebp]
	mov	DWORD PTR tv570[ebp], edx
	mov	DWORD PTR tv571[ebp], ecx
	mov	eax, OFFSET ?AppDataPath@@3PADA		; AppDataPath
	add	eax, -1
	mov	DWORD PTR tv574[ebp], eax
$LL40@Read_Paths:
	mov	ecx, DWORD PTR tv574[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv577[ebp], dl
	add	DWORD PTR tv574[ebp], 1
	cmp	BYTE PTR tv577[ebp], 0
	jne	SHORT $LL40@Read_Paths
	mov	edi, DWORD PTR tv574[ebp]
	mov	esi, DWORD PTR tv570[ebp]
	mov	eax, DWORD PTR tv571[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 163  : 	strcat(AppDataPath,"\\");

	mov	eax, OFFSET ?AppDataPath@@3PADA		; AppDataPath
	add	eax, -1
	mov	DWORD PTR tv593[ebp], eax
$LL41@Read_Paths:
	mov	ecx, DWORD PTR tv593[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv596[ebp], dl
	add	DWORD PTR tv593[ebp], 1
	cmp	BYTE PTR tv596[ebp], 0
	jne	SHORT $LL41@Read_Paths
	mov	edi, DWORD PTR tv593[ebp]
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [edi], ax

; 164  : 	strcat(AppDataPath,isClient ? FileClient : FileFDS);

	movzx	eax, BYTE PTR _isClient$[ebp]
	test	eax, eax
	je	SHORT $LN27@Read_Paths
	lea	ecx, DWORD PTR _FileClient$[ebp]
	mov	DWORD PTR tv293[ebp], ecx
	jmp	SHORT $LN28@Read_Paths
$LN27@Read_Paths:
	lea	edx, DWORD PTR _FileFDS$[ebp]
	mov	DWORD PTR tv293[ebp], edx
$LN28@Read_Paths:
	mov	eax, DWORD PTR tv293[ebp]
	mov	DWORD PTR tv605[ebp], eax
	mov	ecx, DWORD PTR tv605[ebp]
	mov	DWORD PTR tv607[ebp], ecx
$LL42@Read_Paths:
	mov	edx, DWORD PTR tv605[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv610[ebp], al
	add	DWORD PTR tv605[ebp], 1
	cmp	BYTE PTR tv610[ebp], 0
	jne	SHORT $LL42@Read_Paths
	mov	ecx, DWORD PTR tv605[ebp]
	sub	ecx, DWORD PTR tv607[ebp]
	mov	edx, DWORD PTR tv607[ebp]
	mov	DWORD PTR tv615[ebp], edx
	mov	DWORD PTR tv616[ebp], ecx
	mov	eax, OFFSET ?AppDataPath@@3PADA		; AppDataPath
	add	eax, -1
	mov	DWORD PTR tv619[ebp], eax
$LL43@Read_Paths:
	mov	ecx, DWORD PTR tv619[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv622[ebp], dl
	add	DWORD PTR tv619[ebp], 1
	cmp	BYTE PTR tv622[ebp], 0
	jne	SHORT $LL43@Read_Paths
	mov	edi, DWORD PTR tv619[ebp]
	mov	esi, DWORD PTR tv615[ebp]
	mov	eax, DWORD PTR tv616[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 165  : 	strcat(AppDataPath,"\\");

	mov	eax, OFFSET ?AppDataPath@@3PADA		; AppDataPath
	add	eax, -1
	mov	DWORD PTR tv638[ebp], eax
$LL44@Read_Paths:
	mov	ecx, DWORD PTR tv638[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv641[ebp], dl
	add	DWORD PTR tv638[ebp], 1
	cmp	BYTE PTR tv641[ebp], 0
	jne	SHORT $LL44@Read_Paths
	mov	edi, DWORD PTR tv638[ebp]
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [edi], ax

; 166  : 
; 167  : 	strcpy(RegPath,"Software\\");

	mov	eax, DWORD PTR ??_C@_09OIHOKJLD@Software?2?$AA@
	mov	DWORD PTR ?RegPath@@3PADA, eax
	mov	ecx, DWORD PTR ??_C@_09OIHOKJLD@Software?2?$AA@+4
	mov	DWORD PTR ?RegPath@@3PADA+4, ecx
	mov	dx, WORD PTR ??_C@_09OIHOKJLD@Software?2?$AA@+8
	mov	WORD PTR ?RegPath@@3PADA+8, dx

; 168  : 	strcat(RegPath,RegBase);

	lea	eax, DWORD PTR _RegBase$[ebp]
	mov	DWORD PTR tv654[ebp], eax
	mov	ecx, DWORD PTR tv654[ebp]
	mov	DWORD PTR tv656[ebp], ecx
$LL45@Read_Paths:
	mov	edx, DWORD PTR tv654[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv659[ebp], al
	add	DWORD PTR tv654[ebp], 1
	cmp	BYTE PTR tv659[ebp], 0
	jne	SHORT $LL45@Read_Paths
	mov	ecx, DWORD PTR tv654[ebp]
	sub	ecx, DWORD PTR tv656[ebp]
	mov	edx, DWORD PTR tv656[ebp]
	mov	DWORD PTR tv664[ebp], edx
	mov	DWORD PTR tv665[ebp], ecx
	mov	eax, OFFSET ?RegPath@@3PADA		; RegPath
	add	eax, -1
	mov	DWORD PTR tv668[ebp], eax
$LL46@Read_Paths:
	mov	ecx, DWORD PTR tv668[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv671[ebp], dl
	add	DWORD PTR tv668[ebp], 1
	cmp	BYTE PTR tv671[ebp], 0
	jne	SHORT $LL46@Read_Paths
	mov	edi, DWORD PTR tv668[ebp]
	mov	esi, DWORD PTR tv664[ebp]
	mov	eax, DWORD PTR tv665[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 169  : 	strcat(RegPath,"\\");

	mov	eax, OFFSET ?RegPath@@3PADA		; RegPath
	add	eax, -1
	mov	DWORD PTR tv687[ebp], eax
$LL47@Read_Paths:
	mov	ecx, DWORD PTR tv687[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv690[ebp], dl
	add	DWORD PTR tv687[ebp], 1
	cmp	BYTE PTR tv690[ebp], 0
	jne	SHORT $LL47@Read_Paths
	mov	edi, DWORD PTR tv687[ebp]
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [edi], ax

; 170  : 	strcat(RegPath,isClient ? RegClient : RegFDS);

	movzx	eax, BYTE PTR _isClient$[ebp]
	test	eax, eax
	je	SHORT $LN29@Read_Paths
	lea	ecx, DWORD PTR _RegClient$[ebp]
	mov	DWORD PTR tv317[ebp], ecx
	jmp	SHORT $LN30@Read_Paths
$LN29@Read_Paths:
	lea	edx, DWORD PTR _RegFDS$[ebp]
	mov	DWORD PTR tv317[ebp], edx
$LN30@Read_Paths:
	mov	eax, DWORD PTR tv317[ebp]
	mov	DWORD PTR tv699[ebp], eax
	mov	ecx, DWORD PTR tv699[ebp]
	mov	DWORD PTR tv701[ebp], ecx
$LL48@Read_Paths:
	mov	edx, DWORD PTR tv699[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv704[ebp], al
	add	DWORD PTR tv699[ebp], 1
	cmp	BYTE PTR tv704[ebp], 0
	jne	SHORT $LL48@Read_Paths
	mov	ecx, DWORD PTR tv699[ebp]
	sub	ecx, DWORD PTR tv701[ebp]
	mov	edx, DWORD PTR tv701[ebp]
	mov	DWORD PTR tv709[ebp], edx
	mov	DWORD PTR tv710[ebp], ecx
	mov	eax, OFFSET ?RegPath@@3PADA		; RegPath
	add	eax, -1
	mov	DWORD PTR tv713[ebp], eax
$LL49@Read_Paths:
	mov	ecx, DWORD PTR tv713[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv716[ebp], dl
	add	DWORD PTR tv713[ebp], 1
	cmp	BYTE PTR tv716[ebp], 0
	jne	SHORT $LL49@Read_Paths
	mov	edi, DWORD PTR tv713[ebp]
	mov	esi, DWORD PTR tv709[ebp]
	mov	eax, DWORD PTR tv710[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 171  : 
; 172  : 	PathsInit = true;

	mov	BYTE PTR ?PathsInit@@3_NA, 1		; PathsInit

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Read_Paths@@YAXXZ ENDP					; Read_Paths
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ??__E_TheFileFactory@@YAXXZ
text$yc	SEGMENT
??__E_TheFileFactory@@YAXXZ PROC			; `dynamic initializer for '_TheFileFactory'', COMDAT

; 37   : SCRIPTS_API REF_DEF2(FileFactoryClass *, _TheFileFactory, 0x00809E74, 0x0080904C);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8425548					; 0080904cH
	push	8429172					; 00809e74H
	call	??$ResolveGameReference@PAVFileFactoryClass@@@@YAAAPAVFileFactoryClass@@HHH@Z ; ResolveGameReference<FileFactoryClass *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A, eax ; _TheFileFactory
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_TheFileFactory@@YAXXZ ENDP			; `dynamic initializer for '_TheFileFactory''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@PAVFileFactoryClass@@@@YAAAPAVFileFactoryClass@@HHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@PAVFileFactoryClass@@@@YAAAPAVFileFactoryClass@@HHH@Z PROC ; ResolveGameReference<FileFactoryClass *>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@PAVFileFactoryClass@@@@YAAAPAVFileFactoryClass@@HHH@Z ENDP ; ResolveGameReference<FileFactoryClass *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GBufferedFileClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBufferedFileClass@@UAEPAXI@Z PROC			; BufferedFileClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BufferedFileClass@@UAE@XZ		; BufferedFileClass::~BufferedFileClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBufferedFileClass@@UAEPAXI@Z ENDP			; BufferedFileClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\bufferedfileclass.h
;	COMDAT ?Reset_Buffer@BufferedFileClass@@QAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Reset_Buffer@BufferedFileClass@@QAEXXZ PROC		; BufferedFileClass::Reset_Buffer, COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		if (Buffer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@Reset_Buff

; 129  : 		{
; 130  : 			delete[] Buffer;

	push	OFFSET ??_C@_0CA@LMFINKNE@BufferedFileClass?3?3Reset_Buffer?$AA@
	push	130					; 00000082H
	push	OFFSET ??_C@_0DN@NGCACKDA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN5@Reset_Buff
	xor	ecx, ecx
	jne	SHORT $LN4@Reset_Buff
	push	130					; 00000082H
	push	OFFSET ??_C@_1HK@BLILCDCH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Reset_Buff:
	jmp	SHORT $LN6@Reset_Buff
$LN5@Reset_Buff:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@Reset_Buff:

; 131  : 			Buffer = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 132  : 			BufferSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 133  : 			BufferAvailable = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 134  : 			BufferOffset = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN2@Reset_Buff:

; 135  : 		}
; 136  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset_Buffer@BufferedFileClass@@QAEXXZ ENDP		; BufferedFileClass::Reset_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\bufferedfileclass.h
;	COMDAT ?Close@BufferedFileClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@BufferedFileClass@@UAEXXZ PROC			; BufferedFileClass::Close, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		RawFileClass::Close();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@RawFileClass@@UAEXXZ		; RawFileClass::Close

; 124  : 		Reset_Buffer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset_Buffer@BufferedFileClass@@QAEXXZ	; BufferedFileClass::Reset_Buffer

; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@BufferedFileClass@@UAEXXZ ENDP			; BufferedFileClass::Close
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\bufferedfileclass.h
;	COMDAT ?Write@BufferedFileClass@@UAEHPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Write@BufferedFileClass@@UAEHPAXH@Z PROC		; BufferedFileClass::Write, COMDAT
; _this$ = ecx

; 118  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 		return RawFileClass::Write(buffer,size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write@RawFileClass@@UAEHPAXH@Z		; RawFileClass::Write

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Write@BufferedFileClass@@UAEHPAXH@Z ENDP		; BufferedFileClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\bufferedfileclass.h
;	COMDAT ?Seek@BufferedFileClass@@UAEHHH@Z
_TEXT	SEGMENT
_buf$1 = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_dir$ = 12						; size = 4
?Seek@BufferedFileClass@@UAEHHH@Z PROC			; BufferedFileClass::Seek, COMDAT
; _this$ = ecx

; 96   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		if (dir != 1 || pos < 0)

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN4@Seek
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN5@Seek
$LN4@Seek:

; 98   : 		{
; 99   : 			Reset_Buffer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset_Buffer@BufferedFileClass@@QAEXXZ	; BufferedFileClass::Reset_Buffer
$LN5@Seek:

; 100  : 		}
; 101  : 		if (BufferAvailable)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN3@Seek

; 102  : 		{
; 103  : 			int buf = BufferAvailable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _buf$1[ebp], ecx

; 104  : 			if (buf > pos)

	mov	eax, DWORD PTR _buf$1[ebp]
	cmp	eax, DWORD PTR _pos$[ebp]
	jle	SHORT $LN2@Seek

; 105  : 			{
; 106  : 				buf = pos;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _buf$1[ebp], eax
$LN2@Seek:

; 107  : 			}
; 108  : 			BufferAvailable -= buf;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _buf$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 109  : 			BufferOffset += buf;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _buf$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], ecx

; 110  : 			return RawFileClass::Seek(pos - buf,dir) - BufferAvailable;

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	sub	ecx, DWORD PTR _buf$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Seek@RawFileClass@@UAEHHH@Z		; RawFileClass::Seek
	mov	edx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [edx+36]
	jmp	SHORT $LN6@Seek

; 111  : 		}
; 112  : 		else

	jmp	SHORT $LN6@Seek
$LN3@Seek:

; 113  : 		{
; 114  : 			return RawFileClass::Seek(pos,dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Seek@RawFileClass@@UAEHHH@Z		; RawFileClass::Seek
$LN6@Seek:

; 115  : 		}
; 116  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Seek@BufferedFileClass@@UAEHHH@Z ENDP			; BufferedFileClass::Seek
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\bufferedfileclass.h
;	COMDAT ?Read@BufferedFileClass@@UAEHPAXH@Z
_TEXT	SEGMENT
tv143 = -100						; size = 4
$T1 = -96						; size = 4
_buf2$2 = -28						; size = 4
_buf$3 = -24						; size = 4
_buf$4 = -20						; size = 4
_result$ = -16						; size = 4
_sz$ = -12						; size = 4
_tmp$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Read@BufferedFileClass@@UAEHPAXH@Z PROC		; BufferedFileClass::Read, COMDAT
; _this$ = ecx

; 31   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 		void *tmp = buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax

; 33   : 		int sz = size;

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _sz$[ebp], eax

; 34   : 		int result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 35   : 		if (BufferAvailable > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jle	SHORT $LN11@Read

; 36   : 		{
; 37   : 			int buf = BufferAvailable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _buf$4[ebp], ecx

; 38   : 			if (buf > size)

	mov	eax, DWORD PTR _buf$4[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jle	SHORT $LN10@Read

; 39   : 			{
; 40   : 				buf = size;

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _buf$4[ebp], eax
$LN10@Read:

; 41   : 			}
; 42   : 			memcpy(buffer, Buffer + BufferOffset, buf);

	mov	eax, DWORD PTR _buf$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+40]
	push	edx
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 43   : 			BufferAvailable -= buf;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _buf$4[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 44   : 			BufferOffset += buf;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _buf$4[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], ecx

; 45   : 			sz -= buf;

	mov	eax, DWORD PTR _sz$[ebp]
	sub	eax, DWORD PTR _buf$4[ebp]
	mov	DWORD PTR _sz$[ebp], eax

; 46   : 			tmp = (char *)tmp + buf;

	mov	eax, DWORD PTR _tmp$[ebp]
	add	eax, DWORD PTR _buf$4[ebp]
	mov	DWORD PTR _tmp$[ebp], eax

; 47   : 			result += buf;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _buf$4[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN11@Read:

; 48   : 		}
; 49   : 		if (sz)

	cmp	DWORD PTR _sz$[ebp], 0
	je	$LN9@Read

; 50   : 		{
; 51   : 			int buf = BufferSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _buf$3[ebp], ecx

; 52   : 			if (!buf)

	cmp	DWORD PTR _buf$3[ebp], 0
	jne	SHORT $LN8@Read

; 53   : 			{
; 54   : 				buf = 16384;

	mov	DWORD PTR _buf$3[ebp], 16384		; 00004000H
$LN8@Read:

; 55   : 			}
; 56   : 			if (sz > buf)

	mov	eax, DWORD PTR _sz$[ebp]
	cmp	eax, DWORD PTR _buf$3[ebp]
	jle	SHORT $LN7@Read

; 57   : 			{
; 58   : 				return result + RawFileClass::Read(tmp,sz);

	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@RawFileClass@@UAEHPAXH@Z		; RawFileClass::Read
	add	eax, DWORD PTR _result$[ebp]
	jmp	$LN12@Read
$LN7@Read:

; 59   : 			}
; 60   : 			if (!BufferSize)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN6@Read

; 61   : 			{
; 62   : 				BufferSize = 16384;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 16384		; 00004000H

; 63   : 				Buffer = new unsigned char[16384];

	push	OFFSET ??_C@_0BI@LFKJEOO@BufferedFileClass?3?3Read?$AA@
	push	63					; 0000003fH
	push	OFFSET ??_C@_0DN@NGCACKDA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN15@Read
	xor	ecx, ecx
	jne	SHORT $LN14@Read
	push	63					; 0000003fH
	push	OFFSET ??_C@_1HK@BLILCDCH@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN14@Read:
	mov	DWORD PTR tv143[ebp], 0
	jmp	SHORT $LN16@Read
$LN15@Read:
	push	16384					; 00004000H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv143[ebp], eax
$LN16@Read:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR [ecx+28], edx

; 64   : 				BufferAvailable = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 65   : 				BufferOffset = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN6@Read:

; 66   : 			}
; 67   : 			if (!Buffer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@Read

; 68   : 			{
; 69   : 				return 0;

	xor	eax, eax
	jmp	$LN12@Read
$LN5@Read:

; 70   : 			}
; 71   : 			if (!BufferAvailable)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN4@Read

; 72   : 			{
; 73   : 				BufferAvailable = RawFileClass::Read(Buffer,BufferSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@RawFileClass@@UAEHPAXH@Z		; RawFileClass::Read
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 74   : 				BufferOffset = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN4@Read:

; 75   : 			}
; 76   : 			if (BufferAvailable > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jle	SHORT $LN9@Read

; 77   : 			{
; 78   : 				int buf2 = BufferAvailable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _buf2$2[ebp], ecx

; 79   : 				if (buf2 > sz)

	mov	eax, DWORD PTR _buf2$2[ebp]
	cmp	eax, DWORD PTR _sz$[ebp]
	jle	SHORT $LN2@Read

; 80   : 				{
; 81   : 					buf2 = sz;

	mov	eax, DWORD PTR _sz$[ebp]
	mov	DWORD PTR _buf2$2[ebp], eax
$LN2@Read:

; 82   : 				}
; 83   : 				if (!Buffer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@Read

; 84   : 				{
; 85   : 					return 0;

	xor	eax, eax
	jmp	SHORT $LN12@Read
$LN1@Read:

; 86   : 				}
; 87   : 				memcpy(tmp,Buffer+BufferOffset,buf2);

	mov	eax, DWORD PTR _buf2$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+40]
	push	edx
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 88   : 				BufferAvailable -= buf2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _buf2$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 89   : 				BufferOffset += buf2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _buf2$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], ecx

; 90   : 				result += buf2;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _buf2$2[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN9@Read:

; 91   : 			}
; 92   : 		}
; 93   : 		return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN12@Read:

; 94   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Read@BufferedFileClass@@UAEHPAXH@Z ENDP		; BufferedFileClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\bufferedfileclass.h
;	COMDAT ??1BufferedFileClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BufferedFileClass@@UAE@XZ PROC			; BufferedFileClass::~BufferedFileClass, COMDAT
; _this$ = ecx

; 27   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BufferedFileClass@@6B@

; 28   : 		Reset_Buffer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset_Buffer@BufferedFileClass@@QAEXXZ	; BufferedFileClass::Reset_Buffer

; 29   : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RawFileClass@@UAE@XZ			; RawFileClass::~RawFileClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1BufferedFileClass@@UAE@XZ ENDP			; BufferedFileClass::~BufferedFileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\bufferedfileclass.h
;	COMDAT ??0BufferedFileClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BufferedFileClass@@QAE@XZ PROC			; BufferedFileClass::BufferedFileClass, COMDAT
; _this$ = ecx

; 24   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RawFileClass@@QAE@XZ			; RawFileClass::RawFileClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BufferedFileClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 25   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0BufferedFileClass@@QAE@XZ ENDP			; BufferedFileClass::BufferedFileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_math.h
;	COMDAT ??$clamp@H@@YAHHHH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
??$clamp@H@@YAHHHH@Z PROC				; clamp<int>, COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 39   : 	if (value < min)

	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _min$[ebp]
	jge	SHORT $LN2@clamp

; 40   : 		return min;

	mov	eax, DWORD PTR _min$[ebp]
	jmp	SHORT $LN3@clamp
$LN2@clamp:

; 41   : 
; 42   : 	if (value > max)

	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jle	SHORT $LN1@clamp

; 43   : 		return max;

	mov	eax, DWORD PTR _max$[ebp]
	jmp	SHORT $LN3@clamp
$LN1@clamp:

; 44   : 
; 45   : 	return value;

	mov	eax, DWORD PTR _value$[ebp]
$LN3@clamp:

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$clamp@H@@YAHHHH@Z ENDP				; clamp<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GRawFileClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRawFileClass@@UAEPAXI@Z PROC			; RawFileClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RawFileClass@@UAE@XZ			; RawFileClass::~RawFileClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRawFileClass@@UAEPAXI@Z ENDP			; RawFileClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Detach@RawFileClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Detach@RawFileClass@@UAEXXZ PROC			; RawFileClass::Detach, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 		Rights = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 388  : 		Handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -1

; 389  : 		BiasStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 390  : 		BiasLength = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 391  : 		Date = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+24], ax

; 392  : 		Time = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+26], ax

; 393  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@RawFileClass@@UAEXXZ ENDP			; RawFileClass::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Attach@RawFileClass@@UAEXPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_handle$ = 8						; size = 4
_rights$ = 12						; size = 4
?Attach@RawFileClass@@UAEXPAXH@Z PROC			; RawFileClass::Attach, COMDAT
; _this$ = ecx

; 376  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@RawFileClass@@QAEXXZ		; RawFileClass::Reset

; 378  : 		Handle = handle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _handle$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 379  : 		Rights = rights;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rights$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 380  : 		BiasStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 381  : 		BiasLength = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 382  : 		Date = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+24], ax

; 383  : 		Time = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+26], ax

; 384  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Attach@RawFileClass@@UAEXPAXH@Z ENDP			; RawFileClass::Attach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Bias@RawFileClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_length$ = 12						; size = 4
?Bias@RawFileClass@@UAEXHH@Z PROC			; RawFileClass::Bias, COMDAT
; _this$ = ecx

; 354  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		if (start == 0)

	cmp	DWORD PTR _start$[ebp], 0
	jne	SHORT $LN9@Bias
$LN7@Bias:

; 356  : 		{
; 357  : 			TT_ASSERT(length == -1);

	xor	eax, eax
	jne	SHORT $LN7@Bias
	cmp	DWORD PTR _length$[ebp], -1
	je	SHORT $LN5@Bias
	int	3
$LN5@Bias:

; 358  : 			BiasStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 359  : 			BiasLength = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 360  : 		}
; 361  : 		else

	jmp	SHORT $LN10@Bias
$LN9@Bias:

; 362  : 		{
; 363  : 			BiasLength = Size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 364  : 			BiasStart += start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 365  : 			if (length != -1)

	cmp	DWORD PTR _length$[ebp], -1
	je	SHORT $LN10@Bias

; 366  : 			{
; 367  : 				if (length < BiasLength)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN2@Bias

; 368  : 					BiasLength = length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN2@Bias:

; 369  : 				
; 370  : 				if (BiasLength < 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN10@Bias

; 371  : 					BiasLength = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN10@Bias:

; 372  : 			}
; 373  : 		}
; 374  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Bias@RawFileClass@@UAEXHH@Z ENDP			; RawFileClass::Bias
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Get_File_Handle@RawFileClass@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Handle@RawFileClass@@UAEPAXXZ PROC		; RawFileClass::Get_File_Handle, COMDAT
; _this$ = ecx

; 350  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 351  : 		return Handle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 352  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Handle@RawFileClass@@UAEPAXXZ ENDP		; RawFileClass::Get_File_Handle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Error@RawFileClass@@UAEXHHPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?Error@RawFileClass@@UAEXHHPBD@Z PROC			; RawFileClass::Error, COMDAT
; _this$ = ecx

; 347  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 348  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Error@RawFileClass@@UAEXHHPBD@Z ENDP			; RawFileClass::Error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Set_Date_Time@RawFileClass@@UAE_NK@Z
_TEXT	SEGMENT
_filetime$ = -64					; size = 8
_info$ = -56						; size = 52
_this$ = -4						; size = 4
_datetime$ = 8						; size = 4
?Set_Date_Time@RawFileClass@@UAE_NK@Z PROC		; RawFileClass::Set_Date_Time, COMDAT
; _this$ = ecx

; 328  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 		BY_HANDLE_FILE_INFORMATION info;
; 330  : 		FILETIME filetime;
; 331  : 		if (Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Set_Date_T

; 332  : 		{
; 333  : 			if (GetFileInformationByHandle(Handle,&info))

	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR __imp__GetFileInformationByHandle@8
	test	eax, eax
	je	SHORT $LN4@Set_Date_T

; 334  : 			{
; 335  : 				if (DosDateTimeToFileTime((WORD)(datetime >> 0x10),(WORD)datetime,&filetime))

	lea	eax, DWORD PTR _filetime$[ebp]
	push	eax
	movzx	ecx, WORD PTR _datetime$[ebp]
	push	ecx
	mov	edx, DWORD PTR _datetime$[ebp]
	shr	edx, 16					; 00000010H
	push	edx
	call	DWORD PTR __imp__DosDateTimeToFileTime@12
	test	eax, eax
	je	SHORT $LN4@Set_Date_T

; 336  : 				{
; 337  : 					if (SetFileTime(Handle,&info.ftCreationTime,&filetime,&filetime))

	lea	eax, DWORD PTR _filetime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _filetime$[ebp]
	push	ecx
	lea	edx, DWORD PTR _info$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__SetFileTime@16
	test	eax, eax
	je	SHORT $LN4@Set_Date_T

; 338  : 					{
; 339  : 						return true;

	mov	al, 1
	jmp	SHORT $LN5@Set_Date_T
$LN4@Set_Date_T:

; 340  : 					}
; 341  : 				}
; 342  : 			}
; 343  : 		}
; 344  : 		return false;

	xor	al, al
$LN5@Set_Date_T:

; 345  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Date_Time@RawFileClass@@UAE_NK@Z ENDP		; RawFileClass::Set_Date_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Get_Date_Time@RawFileClass@@UAEKXZ
_TEXT	SEGMENT
_dosdate$ = -64						; size = 2
_dostime$ = -60						; size = 2
_info$ = -56						; size = 52
_this$ = -4						; size = 4
?Get_Date_Time@RawFileClass@@UAEKXZ PROC		; RawFileClass::Get_Date_Time, COMDAT
; _this$ = ecx

; 316  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 317  : 		BY_HANDLE_FILE_INFORMATION info;
; 318  : 		unsigned short dostime;
; 319  : 		unsigned short dosdate;
; 320  : 		if (GetFileInformationByHandle(Handle,&info))

	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR __imp__GetFileInformationByHandle@8
	test	eax, eax
	je	SHORT $LN1@Get_Date_T

; 321  : 		{
; 322  : 			FileTimeToDosDateTime(&info.ftLastWriteTime, &dosdate, &dostime);

	lea	eax, DWORD PTR _dostime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dosdate$[ebp]
	push	ecx
	lea	edx, DWORD PTR _info$[ebp+20]
	push	edx
	call	DWORD PTR __imp__FileTimeToDosDateTime@12

; 323  : 			return dosdate << 0x10 | dostime;

	movzx	eax, WORD PTR _dosdate$[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _dostime$[ebp]
	or	eax, ecx
	jmp	SHORT $LN2@Get_Date_T
$LN1@Get_Date_T:

; 324  : 		}
; 325  : 		return 0;

	xor	eax, eax
$LN2@Get_Date_T:

; 326  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Date_Time@RawFileClass@@UAEKXZ ENDP		; RawFileClass::Get_Date_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Close@RawFileClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@RawFileClass@@UAEXXZ PROC			; RawFileClass::Close, COMDAT
; _this$ = ecx

; 304  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 305  : 		if (Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Close

; 306  : 		{
; 307  : 			if (!CloseHandle(Handle))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	test	eax, eax
	jne	SHORT $LN1@Close

; 308  : 				Error(GetLastError(), 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN1@Close:

; 309  : 			
; 310  : 			Handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -1
$LN3@Close:

; 311  : 		}
; 312  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@RawFileClass@@UAEXXZ ENDP			; RawFileClass::Close
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Write@RawFileClass@@UAEHPAXH@Z
_TEXT	SEGMENT
_bytesWritten$ = -8					; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Write@RawFileClass@@UAEHPAXH@Z PROC			; RawFileClass::Write, COMDAT
; _this$ = ecx

; 276  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		DWORD bytesWritten = 0;

	mov	DWORD PTR _bytesWritten$[ebp], 0

; 278  : 		if (!Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@Write

; 279  : 		{
; 280  : 			if (Open(2))

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	test	eax, eax
	je	SHORT $LN5@Write

; 281  : 			{
; 282  : 				bytesWritten = Write(buffer, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	mov	DWORD PTR _bytesWritten$[ebp], eax

; 283  : 				Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN5@Write:

; 284  : 			}
; 285  : 		}
; 286  : 		else

	jmp	SHORT $LN4@Write
$LN6@Write:

; 287  : 		{
; 288  : 			if (!WriteFile(Handle, buffer, size, &bytesWritten, 0))

	push	0
	lea	eax, DWORD PTR _bytesWritten$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	jne	SHORT $LN3@Write

; 289  : 				Error(GetLastError(), 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN3@Write:

; 290  : 			
; 291  : 			if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN4@Write

; 292  : 			{
; 293  : 				if (Raw_Seek(0, 1) > BiasStart + BiasLength)

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+12]
	cmp	eax, edx
	jle	SHORT $LN4@Write

; 294  : 				{
; 295  : 					BiasLength = Raw_Seek(0, 1) - BiasStart;

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN4@Write:

; 296  : 				}
; 297  : 			}
; 298  : 		}
; 299  : 		return bytesWritten;

	mov	eax, DWORD PTR _bytesWritten$[ebp]

; 300  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Write@RawFileClass@@UAEHPAXH@Z ENDP			; RawFileClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Size@RawFileClass@@UAEHXZ
_TEXT	SEGMENT
_size$1 = -8						; size = 4
_this$ = -4						; size = 4
?Size@RawFileClass@@UAEHXZ PROC				; RawFileClass::Size, COMDAT
; _this$ = ecx

; 250  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 		if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN6@Size

; 252  : 			return BiasLength;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	$LN7@Size

; 253  : 		else

	jmp	$LN7@Size
$LN6@Size:

; 254  : 		{
; 255  : 			int size = -1;

	mov	DWORD PTR _size$1[ebp], -1

; 256  : 			if (!Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@Size

; 257  : 			{
; 258  : 				if (Open(1))

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	test	eax, eax
	je	SHORT $LN3@Size

; 259  : 				{
; 260  : 					size = Size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	DWORD PTR _size$1[ebp], eax

; 261  : 					Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN3@Size:

; 262  : 				}
; 263  : 			}
; 264  : 			else

	jmp	SHORT $LN2@Size
$LN4@Size:

; 265  : 			{
; 266  : 				size = GetFileSize(Handle,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__GetFileSize@8
	mov	DWORD PTR _size$1[ebp], eax

; 267  : 				if (size == -1)

	cmp	DWORD PTR _size$1[ebp], -1
	jne	SHORT $LN2@Size

; 268  : 					Error(GetLastError(), 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN2@Size:

; 269  : 			}
; 270  : 			return size;

	mov	eax, DWORD PTR _size$1[ebp]
$LN7@Size:

; 271  : 		}
; 272  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@RawFileClass@@UAEHXZ ENDP				; RawFileClass::Size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Raw_Seek@RawFileClass@@QAEHHH@Z
_TEXT	SEGMENT
_seek$ = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_dir$ = 12						; size = 4
?Raw_Seek@RawFileClass@@QAEHHH@Z PROC			; RawFileClass::Raw_Seek, COMDAT
; _this$ = ecx

; 237  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 		if (!Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Raw_Seek

; 239  : 			Error(9, 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN2@Raw_Seek:

; 240  : 		
; 241  : 		int seek = SetFilePointer(Handle, pos, 0, dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	DWORD PTR __imp__SetFilePointer@16
	mov	DWORD PTR _seek$[ebp], eax

; 242  : 		if (seek == -1)

	cmp	DWORD PTR _seek$[ebp], -1
	jne	SHORT $LN1@Raw_Seek

; 243  : 			Error(GetLastError(), 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN1@Raw_Seek:

; 244  : 		
; 245  : 		return seek;

	mov	eax, DWORD PTR _seek$[ebp]

; 246  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Raw_Seek@RawFileClass@@QAEHHH@Z ENDP			; RawFileClass::Raw_Seek
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Seek@RawFileClass@@UAEHHH@Z
_TEXT	SEGMENT
tv66 = -76						; size = 4
_result$1 = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_dir$ = 12						; size = 4
?Seek@RawFileClass@@UAEHHH@Z PROC			; RawFileClass::Seek, COMDAT
; _this$ = ecx

; 215  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	$LN11@Seek

; 217  : 		{
; 218  : 			switch (dir)

	mov	eax, DWORD PTR _dir$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN8@Seek
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN7@Seek
	jmp	SHORT $LN9@Seek
$LN8@Seek:

; 219  : 			{
; 220  : 			case 1: pos += Raw_Seek(0, 1) - BiasStart; break;

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN9@Seek
$LN7@Seek:

; 221  : 			case 2: pos += BiasLength; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pos$[ebp], ecx
$LN9@Seek:

; 222  : 			}
; 223  : 
; 224  : 			int result = Raw_Seek(BiasStart + clamp(pos, 0, BiasLength), 0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	??$clamp@H@@YAHHHH@Z			; clamp<int>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
	mov	DWORD PTR _result$1[ebp], eax

; 225  : 			if (result != -1)

	cmp	DWORD PTR _result$1[ebp], -1
	je	SHORT $LN4@Seek

; 226  : 				result -= BiasStart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _result$1[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$1[ebp], ecx
$LN4@Seek:

; 227  : 
; 228  : 			TT_ASSERT(result <= BiasLength);

	xor	eax, eax
	jne	SHORT $LN4@Seek
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _result$1[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN2@Seek
	int	3
$LN2@Seek:

; 229  : 			return result;

	mov	eax, DWORD PTR _result$1[ebp]
	jmp	SHORT $LN12@Seek

; 230  : 		}
; 231  : 		else

	jmp	SHORT $LN12@Seek
$LN11@Seek:

; 232  : 			return Raw_Seek(pos, dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
$LN12@Seek:

; 233  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Seek@RawFileClass@@UAEHHH@Z ENDP			; RawFileClass::Seek
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Read@RawFileClass@@UAEHPAXH@Z
_TEXT	SEGMENT
_maxBytesToRead$1 = -12					; size = 4
_bytesRead$ = -8					; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_bytesToRead$ = 12					; size = 4
?Read@RawFileClass@@UAEHPAXH@Z PROC			; RawFileClass::Read, COMDAT
; _this$ = ecx

; 187  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 		DWORD bytesRead = 0;

	mov	DWORD PTR _bytesRead$[ebp], 0

; 189  : 		if (!Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@Read

; 190  : 		{
; 191  : 			if (Open(1))

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	test	eax, eax
	je	SHORT $LN5@Read

; 192  : 			{
; 193  : 				bytesRead = Read(buffer, bytesToRead);

	mov	eax, DWORD PTR _bytesToRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	mov	DWORD PTR _bytesRead$[ebp], eax

; 194  : 				Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN5@Read:

; 195  : 			}
; 196  : 		}
; 197  : 		else

	jmp	SHORT $LN4@Read
$LN6@Read:

; 198  : 		{
; 199  : 			if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN3@Read

; 200  : 			{
; 201  : 				int maxBytesToRead = BiasLength - Tell();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, eax
	mov	DWORD PTR _maxBytesToRead$1[ebp], edx

; 202  : 				if (bytesToRead > maxBytesToRead)

	mov	eax, DWORD PTR _bytesToRead$[ebp]
	cmp	eax, DWORD PTR _maxBytesToRead$1[ebp]
	jle	SHORT $LN3@Read

; 203  : 					bytesToRead = maxBytesToRead;

	mov	eax, DWORD PTR _maxBytesToRead$1[ebp]
	mov	DWORD PTR _bytesToRead$[ebp], eax
$LN3@Read:

; 204  : 			}
; 205  : 			
; 206  : 			if (!ReadFile(Handle, buffer, bytesToRead, &bytesRead, NULL))

	push	0
	lea	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytesToRead$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
	test	eax, eax
	jne	SHORT $LN4@Read

; 207  : 				Error(GetLastError(), 1, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	1
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN4@Read:

; 208  : 		}
; 209  : 		
; 210  : 		return bytesRead;

	mov	eax, DWORD PTR _bytesRead$[ebp]

; 211  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Read@RawFileClass@@UAEHPAXH@Z ENDP			; RawFileClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Open@RawFileClass@@UAEHH@Z
_TEXT	SEGMENT
tv88 = -72						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?Open@RawFileClass@@UAEHH@Z PROC			; RawFileClass::Open, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 152  : 		if (Filename.Is_Empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@Open

; 153  : 		{
; 154  : 			Error(2,0,0);

	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN10@Open:

; 155  : 		}
; 156  : 		Rights = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 157  : 		switch (Rights)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 3
	ja	$LN3@Open
	mov	edx, DWORD PTR tv88[ebp]
	jmp	DWORD PTR $LN13@Open[edx*4]
$LN7@Open:

; 158  : 		{
; 159  : 		case 3: //DA
; 160  : 			Handle = CreateFileA(Filename, GENERIC_WRITE, 0, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

	push	0
	push	128					; 00000080H
	push	4
	push	0
	push	0
	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 161  : 			break;

	jmp	$LN8@Open
$LN6@Open:

; 162  : 		case 2:
; 163  : 			Handle = CreateFileA(Filename,GENERIC_WRITE,0,0,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,0);

	push	0
	push	128					; 00000080H
	push	2
	push	0
	push	0
	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 164  : 			break;

	jmp	SHORT $LN8@Open
$LN5@Open:

; 165  : 		case 1:
; 166  : 			Handle = CreateFileA(Filename,GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN,0);

	push	0
	push	134217856				; 08000080H
	push	3
	push	0
	push	1
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 167  : 			break;

	jmp	SHORT $LN8@Open
$LN4@Open:

; 168  : 		case 0:
; 169  : 			Handle = CreateFileA(Filename,GENERIC_READ|GENERIC_WRITE,0,0,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,0);

	push	0
	push	128					; 00000080H
	push	4
	push	0
	push	0
	push	-1073741824				; c0000000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 170  : 			break;

	jmp	SHORT $LN8@Open
$LN3@Open:

; 171  : 		default:
; 172  : 			errno = EINVAL;

	call	DWORD PTR __imp___errno
	mov	DWORD PTR [eax], 22			; 00000016H
$LN8@Open:

; 173  : 		}
; 174  : 		if ((BiasStart) && (BiasLength != -1))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@Open
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN2@Open

; 175  : 		{
; 176  : 			Seek(0,0);

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN2@Open:

; 177  : 		}
; 178  : 		if (Handle != INVALID_HANDLE_VALUE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], -1
	je	SHORT $LN1@Open

; 179  : 		{
; 180  : 			return true;

	mov	eax, 1
	jmp	SHORT $LN11@Open
$LN1@Open:

; 181  : 		}
; 182  : 		return false;

	xor	eax, eax
$LN11@Open:

; 183  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN13@Open:
	DD	$LN4@Open
	DD	$LN5@Open
	DD	$LN6@Open
	DD	$LN7@Open
?Open@RawFileClass@@UAEHH@Z ENDP			; RawFileClass::Open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Open@RawFileClass@@UAEHPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_mode$ = 12						; size = 4
?Open@RawFileClass@@UAEHPBDH@Z PROC			; RawFileClass::Open, COMDAT
; _this$ = ecx

; 145  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		Set_Name(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 147  : 		return Open(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 148  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Open@RawFileClass@@UAEHPBDH@Z ENDP			; RawFileClass::Open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Is_Open@RawFileClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Open@RawFileClass@@UAE_NXZ PROC			; RawFileClass::Is_Open, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		if (Handle != INVALID_HANDLE_VALUE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], -1
	je	SHORT $LN1@Is_Open

; 139  : 		{
; 140  : 			return true;

	mov	al, 1
	jmp	SHORT $LN2@Is_Open
$LN1@Is_Open:

; 141  : 		}
; 142  : 		return false;

	xor	al, al
$LN2@Is_Open:

; 143  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Open@RawFileClass@@UAE_NXZ ENDP			; RawFileClass::Is_Open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Is_Available@RawFileClass@@UAE_NH@Z
_TEXT	SEGMENT
tv135 = -76						; size = 4
_attr$ = -8						; size = 4
_this$ = -4						; size = 4
__handle$ = 8						; size = 4
?Is_Available@RawFileClass@@UAE_NH@Z PROC		; RawFileClass::Is_Available, COMDAT
; _this$ = ecx

; 119  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		if (Filename.Is_Empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Is_Availab

; 121  : 			return false;

	xor	al, al
	jmp	SHORT $LN4@Is_Availab
$LN3@Is_Availab:

; 122  : 		
; 123  : 		if (Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Is_Availab

; 124  : 			return true;

	mov	al, 1
	jmp	SHORT $LN4@Is_Availab
$LN2@Is_Availab:

; 125  : 		
; 126  : 		if (_handle)

	cmp	DWORD PTR __handle$[ebp], 0
	je	SHORT $LN1@Is_Availab

; 127  : 		{
; 128  : 			Open(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 129  : 			Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 130  : 			return true;

	mov	al, 1
	jmp	SHORT $LN4@Is_Availab
$LN1@Is_Availab:

; 131  : 		}
; 132  : 
; 133  : 		int attr = GetFileAttributesA(Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	mov	DWORD PTR _attr$[ebp], eax

; 134  : 		return attr != INVALID_FILE_ATTRIBUTES && !(attr & FILE_ATTRIBUTE_DIRECTORY);

	cmp	DWORD PTR _attr$[ebp], -1
	je	SHORT $LN6@Is_Availab
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 16					; 00000010H
	jne	SHORT $LN6@Is_Availab
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN7@Is_Availab
$LN6@Is_Availab:
	mov	DWORD PTR tv135[ebp], 0
$LN7@Is_Availab:
	mov	al, BYTE PTR tv135[ebp]
$LN4@Is_Availab:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_Available@RawFileClass@@UAE_NH@Z ENDP		; RawFileClass::Is_Available
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Delete@RawFileClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Delete@RawFileClass@@UAE_NXZ PROC			; RawFileClass::Delete, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 103  : 		if (Filename.Is_Empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Delete

; 104  : 		{
; 105  : 			Error(2,0,0);

	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN3@Delete:

; 106  : 		}
; 107  : 		if (!Is_Available(0))

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Delete

; 108  : 		{
; 109  : 			return false;

	xor	al, al
	jmp	SHORT $LN4@Delete
$LN2@Delete:

; 110  : 		}
; 111  : 		if (!DeleteFileA(Filename))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__DeleteFileA@4
	test	eax, eax
	jne	SHORT $LN1@Delete

; 112  : 		{
; 113  : 			Error(GetLastError(),0,Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 114  : 			return false;

	xor	al, al
	jmp	SHORT $LN4@Delete
$LN1@Delete:

; 115  : 		}
; 116  : 		return true;

	mov	al, 1
$LN4@Delete:

; 117  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete@RawFileClass@@UAE_NXZ ENDP			; RawFileClass::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Create@RawFileClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Create@RawFileClass@@UAE_NXZ PROC			; RawFileClass::Create, COMDAT
; _this$ = ecx

; 87   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 89   : 		if (!Open(2))

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	test	eax, eax
	jne	SHORT $LN2@Create

; 90   : 		{
; 91   : 			return false;

	xor	al, al
	jmp	SHORT $LN3@Create
$LN2@Create:

; 92   : 		}
; 93   : 		if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN1@Create

; 94   : 		{
; 95   : 			Seek(0,0);

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN1@Create:

; 96   : 		}
; 97   : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 98   : 		return true;

	mov	al, 1
$LN3@Create:

; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@RawFileClass@@UAE_NXZ ENDP			; RawFileClass::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Set_Name@RawFileClass@@UAEPBDPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Set_Name@RawFileClass@@UAEPBDPBD@Z PROC		; RawFileClass::Set_Name, COMDAT
; _this$ = ecx

; 77   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 		Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@RawFileClass@@QAEXXZ		; RawFileClass::Reset

; 79   : 		if (name)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN1@Set_Name

; 80   : 		{
; 81   : 			Bias(0,-1);

	push	-1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax

; 82   : 			Filename = name;

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN1@Set_Name:

; 83   : 		}
; 84   : 		return 0;

	xor	eax, eax

; 85   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Name@RawFileClass@@UAEPBDPBD@Z ENDP		; RawFileClass::Set_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?File_Name@RawFileClass@@UAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?File_Name@RawFileClass@@UAEPBDXZ PROC			; RawFileClass::File_Name, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 		return Filename;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *

; 75   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?File_Name@RawFileClass@@UAEPBDXZ ENDP			; RawFileClass::File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ??1RawFileClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RawFileClass@@UAE@XZ PROC				; RawFileClass::~RawFileClass, COMDAT
; _this$ = ecx

; 69   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RawFileClass@@6B@

; 70   : 		Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@RawFileClass@@QAEXXZ		; RawFileClass::Reset

; 71   : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileClass@@UAE@XZ			; FileClass::~FileClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1RawFileClass@@UAE@XZ ENDP				; RawFileClass::~RawFileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Reset@RawFileClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@RawFileClass@@QAEXXZ PROC			; RawFileClass::Reset, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 66   : 		Filename = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@RawFileClass@@QAEXXZ ENDP			; RawFileClass::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ??0RawFileClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RawFileClass@@QAE@XZ PROC				; RawFileClass::RawFileClass, COMDAT
; _this$ = ecx

; 39   : 	RawFileClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FileClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RawFileClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 40   : 	{
; 41   : 		BiasLength = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 42   : 		Handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -1

; 43   : 		Rights = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 44   : 		BiasStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 45   : 		Date = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+24], ax

; 46   : 		Time = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+26], ax

; 47   : 		Filename = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0RawFileClass@@QAE@XZ ENDP				; RawFileClass::RawFileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Is_Biased@RawFileClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Biased@RawFileClass@@QAE_NXZ PROC			; RawFileClass::Is_Biased, COMDAT
; _this$ = ecx

; 36   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 		return BiasLength != -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN3@Is_Biased
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Biased
$LN3@Is_Biased:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Biased:
	mov	al, BYTE PTR tv66[ebp]

; 38   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Biased@RawFileClass@@QAE_NXZ ENDP			; RawFileClass::Is_Biased
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Is_Hash_Checked@RawFileClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Hash_Checked@RawFileClass@@UAE_NXZ PROC		; RawFileClass::Is_Hash_Checked, COMDAT
; _this$ = ecx

; 32   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 		return Is_Biased();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Biased@RawFileClass@@QAE_NXZ	; RawFileClass::Is_Biased

; 34   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Hash_Checked@RawFileClass@@UAE_NXZ ENDP		; RawFileClass::Is_Hash_Checked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GFilePipe@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFilePipe@@UAEPAXI@Z PROC				; FilePipe::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FilePipe@@UAE@XZ			; FilePipe::~FilePipe
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFilePipe@@UAEPAXI@Z ENDP				; FilePipe::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Put@FilePipe@@UAEHPBXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_source$ = 8						; size = 4
_length$ = 12						; size = 4
?Put@FilePipe@@UAEHPBXH@Z PROC				; FilePipe::Put, COMDAT
; _this$ = ecx

; 253  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 254  : 		if (File && source && length > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@Put
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN3@Put
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN3@Put

; 255  : 		{
; 256  : 			if (!File->Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Put

; 257  : 			{
; 258  : 				HasOpened = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1

; 259  : 				File->Open(2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+28]
	call	edx
$LN2@Put:

; 260  : 			}
; 261  : 			return File->Write((void *)source,length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	jmp	SHORT $LN4@Put

; 262  : 		}
; 263  : 		else

	jmp	SHORT $LN4@Put
$LN3@Put:

; 264  : 		{
; 265  : 			return 0;

	xor	eax, eax
$LN4@Put:

; 266  : 		}
; 267  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Put@FilePipe@@UAEHPBXH@Z ENDP				; FilePipe::Put
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?End@FilePipe@@UAEHXZ
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_this$ = -4						; size = 4
?End@FilePipe@@UAEHXZ PROC				; FilePipe::End, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		int ret = Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR _ret$[ebp], eax

; 245  : 		if (File && HasOpened)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@End
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@End

; 246  : 		{
; 247  : 			HasOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 248  : 			File->Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+56]
	call	edx
$LN1@End:

; 249  : 		}
; 250  : 		return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 251  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?End@FilePipe@@UAEHXZ ENDP				; FilePipe::End
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??1FilePipe@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FilePipe@@UAE@XZ PROC				; FilePipe::~FilePipe, COMDAT
; _this$ = ecx

; 234  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FilePipe@@6B@

; 235  : 		if (File && HasOpened)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@FilePipe
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN2@FilePipe

; 236  : 		{
; 237  : 			HasOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 238  : 			File->Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 239  : 			File = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN2@FilePipe:

; 240  : 		}
; 241  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Pipe@@UAE@XZ				; Pipe::~Pipe
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1FilePipe@@UAE@XZ ENDP				; FilePipe::~FilePipe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??0FilePipe@@QAE@PAVFileClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
??0FilePipe@@QAE@PAVFileClass@@@Z PROC			; FilePipe::FilePipe, COMDAT
; _this$ = ecx

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Pipe@@QAE@XZ				; Pipe::Pipe
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FilePipe@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _file$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 232  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0FilePipe@@QAE@PAVFileClass@@@Z ENDP			; FilePipe::FilePipe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EPipe@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EPipe@@UAEPAXI@Z PROC				; Pipe::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1Pipe@@UAE@XZ			; Pipe::~Pipe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Pipe@@UAE@XZ				; Pipe::~Pipe
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EPipe@@UAEPAXI@Z ENDP				; Pipe::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPipe@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPipe@@UAEPAXI@Z PROC				; Pipe::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Pipe@@UAE@XZ				; Pipe::~Pipe
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPipe@@UAEPAXI@Z ENDP				; Pipe::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4Pipe@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Pipe@@QAEAAV0@ABV0@@Z PROC				; Pipe::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Pipe@@QAEAAV0@ABV0@@Z ENDP				; Pipe::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Pipe@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Pipe@@QAE@ABV0@@Z PROC				; Pipe::Pipe, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Pipe@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Pipe@@QAE@ABV0@@Z ENDP				; Pipe::Pipe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Put@Pipe@@UAEHPBXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_source$ = 8						; size = 4
_length$ = 12						; size = 4
?Put@Pipe@@UAEHPBXH@Z PROC				; Pipe::Put, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Put

; 184  : 		{
; 185  : 			return ChainTo->Put(source,length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	SHORT $LN2@Put
$LN1@Put:

; 186  : 		}
; 187  : 		return length;

	mov	eax, DWORD PTR _length$[ebp]
$LN2@Put:

; 188  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Put@Pipe@@UAEHPBXH@Z ENDP				; Pipe::Put
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Put_To@Pipe@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pipe$ = 8						; size = 4
?Put_To@Pipe@@UAEXPAV1@@Z PROC				; Pipe::Put_To, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (ChainTo != pipe)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _pipe$[ebp]
	je	SHORT $LN5@Put_To

; 163  : 		{
; 164  : 			if (pipe && pipe->ChainFrom)

	cmp	DWORD PTR _pipe$[ebp], 0
	je	SHORT $LN3@Put_To
	mov	eax, DWORD PTR _pipe$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Put_To

; 165  : 			{
; 166  : 				pipe->ChainFrom->Put_To(0);

	push	0
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 167  : 				pipe->ChainFrom = 0;

	mov	eax, DWORD PTR _pipe$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@Put_To:

; 168  : 			}
; 169  : 			if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Put_To

; 170  : 			{
; 171  : 				ChainTo->ChainFrom = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], 0

; 172  : 				ChainTo->Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN2@Put_To:

; 173  : 			}
; 174  : 			ChainTo = pipe;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 175  : 			if (pipe)

	cmp	DWORD PTR _pipe$[ebp], 0
	je	SHORT $LN5@Put_To

; 176  : 			{
; 177  : 				pipe->ChainFrom = this;

	mov	eax, DWORD PTR _pipe$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN5@Put_To:

; 178  : 			}
; 179  : 		}
; 180  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Put_To@Pipe@@UAEXPAV1@@Z ENDP				; Pipe::Put_To
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?End@Pipe@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?End@Pipe@@UAEHXZ PROC					; Pipe::End, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		return Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 159  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?End@Pipe@@UAEHXZ ENDP					; Pipe::End
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Flush@Pipe@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flush@Pipe@@UAEHXZ PROC				; Pipe::Flush, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Flush

; 148  : 		{
; 149  : 			return ChainTo->Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	jmp	SHORT $LN3@Flush

; 150  : 		}
; 151  : 		else

	jmp	SHORT $LN3@Flush
$LN2@Flush:

; 152  : 		{
; 153  : 			return 0;

	xor	eax, eax
$LN3@Flush:

; 154  : 		}
; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Flush@Pipe@@UAEHXZ ENDP				; Pipe::Flush
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??1Pipe@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Pipe@@UAE@XZ PROC					; Pipe::~Pipe, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Pipe@@6B@

; 134  : 		if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Pipe

; 135  : 		{
; 136  : 			ChainTo->ChainFrom = ChainFrom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
$LN2@Pipe:

; 137  : 		}
; 138  : 		if (ChainFrom)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Pipe

; 139  : 		{
; 140  : 			ChainFrom->Put_To(ChainTo);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Pipe:

; 141  : 		}
; 142  : 		ChainFrom = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 143  : 		ChainTo = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 144  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Pipe@@UAE@XZ ENDP					; Pipe::~Pipe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??0Pipe@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Pipe@@QAE@XZ PROC					; Pipe::Pipe, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Pipe@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 131  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Pipe@@QAE@XZ ENDP					; Pipe::Pipe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECacheStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECacheStraw@@UAEPAXI@Z PROC				; CacheStraw::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CacheStraw@@UAE@XZ		; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECacheStraw@@UAEPAXI@Z ENDP				; CacheStraw::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCacheStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCacheStraw@@UAEPAXI@Z PROC				; CacheStraw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCacheStraw@@UAEPAXI@Z ENDP				; CacheStraw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CacheStraw@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CacheStraw@@QAEAAV0@ABV0@@Z PROC			; CacheStraw::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Straw@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CacheStraw@@QAEAAV0@ABV0@@Z ENDP			; CacheStraw::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CacheStraw@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CacheStraw@@QAE@ABV0@@Z PROC				; CacheStraw::CacheStraw, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CacheStraw@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CacheStraw@@QAE@ABV0@@Z ENDP				; CacheStraw::CacheStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Get@CacheStraw@@UAEHPAXH@Z
_TEXT	SEGMENT
tv71 = -96						; size = 4
tv69 = -96						; size = 4
_sz$1 = -28						; size = 4
_i$2 = -24						; size = 4
_len2$ = -20						; size = 4
_ret$ = -16						; size = 4
_len$ = -12						; size = 4
_src$ = -8						; size = 4
_this$ = -4						; size = 4
_source$ = 8						; size = 4
_slen$ = 12						; size = 4
?Get@CacheStraw@@UAEHPAXH@Z PROC			; CacheStraw::Get, COMDAT
; _this$ = ecx

; 87   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		char *src = (char *)source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _src$[ebp], eax

; 89   : 		int len = slen;

	mov	eax, DWORD PTR _slen$[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 90   : 		int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 91   : 		int len2;
; 92   : 		if (BufferPtr.Get_Buffer())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	test	eax, eax
	je	$LN7@Get

; 93   : 		{
; 94   : 			for (int i = source == 0;!i && len > 0;i = len2 == 0)

	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN10@Get
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN11@Get
$LN10@Get:
	mov	DWORD PTR tv69[ebp], 0
$LN11@Get:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN6@Get
$LN5@Get:
	cmp	DWORD PTR _len2$[ebp], 0
	jne	SHORT $LN12@Get
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN13@Get
$LN12@Get:
	mov	DWORD PTR tv71[ebp], 0
$LN13@Get:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _i$2[ebp], eax
$LN6@Get:
	cmp	DWORD PTR _i$2[ebp], 0
	jne	$LN7@Get
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN7@Get

; 95   : 			{
; 96   : 				if (Length > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jle	SHORT $LN3@Get

; 97   : 				{
; 98   : 					int sz = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _sz$1[ebp], eax

; 99   : 					if (len > this->Length)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jle	SHORT $LN2@Get

; 100  : 					{
; 101  : 						sz = Length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _sz$1[ebp], ecx
$LN2@Get:

; 102  : 					}
; 103  : 					memmove(src,(char *)BufferPtr.Get_Buffer() + Index,sz);

	mov	eax, DWORD PTR _sz$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	push	eax
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 104  : 					len -= sz;

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _sz$1[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 105  : 					Index += sz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _sz$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 106  : 					ret += sz;

	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _sz$1[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 107  : 					Length -= sz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR _sz$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 108  : 					src += sz;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _sz$1[ebp]
	mov	DWORD PTR _src$[ebp], eax
$LN3@Get:

; 109  : 				}
; 110  : 				if (!len)

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN1@Get

; 111  : 				{
; 112  : 					break;

	jmp	SHORT $LN7@Get
$LN1@Get:

; 113  : 				}
; 114  : 				len2 = Straw::Get(BufferPtr.Get_Buffer(),BufferPtr.Get_Size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Size@Buffer@@QAEJXZ		; Buffer::Get_Size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get@Straw@@UAEHPAXH@Z			; Straw::Get
	mov	DWORD PTR _len2$[ebp], eax

; 115  : 				Length = len2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len2$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 116  : 				Index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 117  : 			}

	jmp	$LN5@Get
$LN7@Get:

; 118  : 		}
; 119  : 		return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get@CacheStraw@@UAEHPAXH@Z ENDP			; CacheStraw::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??1CacheStraw@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CacheStraw@@UAE@XZ PROC				; CacheStraw::~CacheStraw, COMDAT
; _this$ = ecx

; 85   : 	~CacheStraw() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CacheStraw@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1Buffer@@QAE@XZ			; Buffer::~Buffer
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Straw@@UAE@XZ			; Straw::~Straw
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CacheStraw@@UAE@XZ ENDP				; CacheStraw::~CacheStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Is_Valid@CacheStraw@@QAE_NXZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Valid@CacheStraw@@QAE_NXZ PROC			; CacheStraw::Is_Valid, COMDAT
; _this$ = ecx

; 82   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 		return BufferPtr.Get_Buffer() != 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	test	eax, eax
	je	SHORT $LN3@Is_Valid
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Is_Valid
$LN3@Is_Valid:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Is_Valid:
	mov	al, BYTE PTR tv68[ebp]

; 84   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid@CacheStraw@@QAE_NXZ ENDP			; CacheStraw::Is_Valid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??0CacheStraw@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0CacheStraw@@QAE@H@Z PROC				; CacheStraw::CacheStraw, COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@XZ			; Straw::Straw
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CacheStraw@@6B@
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Buffer@@QAE@J@Z			; Buffer::Buffer
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 80   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CacheStraw@@QAE@H@Z ENDP				; CacheStraw::CacheStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EFileStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStraw@@UAEPAXI@Z PROC				; FileStraw::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1FileStraw@@UAE@XZ		; FileStraw::~FileStraw
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStraw@@UAE@XZ			; FileStraw::~FileStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStraw@@UAEPAXI@Z ENDP				; FileStraw::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GFileStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStraw@@UAEPAXI@Z PROC				; FileStraw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStraw@@UAE@XZ			; FileStraw::~FileStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStraw@@UAEPAXI@Z ENDP				; FileStraw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4FileStraw@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStraw@@QAEAAV0@ABV0@@Z PROC			; FileStraw::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Straw@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+16]
	mov	BYTE PTR [eax+16], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStraw@@QAEAAV0@ABV0@@Z ENDP			; FileStraw::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0FileStraw@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0FileStraw@@QAE@ABV0@@Z PROC				; FileStraw::FileStraw, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileStraw@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+16]
	mov	BYTE PTR [eax+16], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0FileStraw@@QAE@ABV0@@Z ENDP				; FileStraw::FileStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EBufferStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBufferStraw@@UAEPAXI@Z PROC				; BufferStraw::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BufferStraw@@UAE@XZ		; BufferStraw::~BufferStraw
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BufferStraw@@UAE@XZ			; BufferStraw::~BufferStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBufferStraw@@UAEPAXI@Z ENDP				; BufferStraw::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GBufferStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBufferStraw@@UAEPAXI@Z PROC				; BufferStraw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BufferStraw@@UAE@XZ			; BufferStraw::~BufferStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBufferStraw@@UAEPAXI@Z ENDP				; BufferStraw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4BufferStraw@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BufferStraw@@QAEAAV0@ABV0@@Z PROC			; BufferStraw::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Straw@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4BufferStraw@@QAEAAV0@ABV0@@Z ENDP			; BufferStraw::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0BufferStraw@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BufferStraw@@QAE@ABV0@@Z PROC			; BufferStraw::BufferStraw, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BufferStraw@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0BufferStraw@@QAE@ABV0@@Z ENDP			; BufferStraw::BufferStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4Buffer@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Buffer@@QAEAAV0@ABV0@@Z PROC				; Buffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Buffer@@QAEAAV0@ABV0@@Z ENDP				; Buffer::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Get_Size@Buffer@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Size@Buffer@@QAEJXZ PROC				; Buffer::Get_Size, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return Size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Size@Buffer@@QAEJXZ ENDP				; Buffer::Get_Size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Get_Buffer@Buffer@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Buffer@Buffer@@QAEPAXXZ PROC			; Buffer::Get_Buffer, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 		return BufferPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Buffer@Buffer@@QAEPAXXZ ENDP			; Buffer::Get_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??0Buffer@@QAE@J@Z
_TEXT	SEGMENT
tv80 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0Buffer@@QAE@J@Z PROC					; Buffer::Buffer, COMDAT
; _this$ = ecx

; 33   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0

; 34   : 		if (size > 0)

	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN2@Buffer

; 35   : 		{
; 36   : 			BufferPtr = new char[size];

	push	OFFSET ??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@
	push	36					; 00000024H
	push	OFFSET ??_C@_0DB@KAPDHD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN5@Buffer
	xor	ecx, ecx
	jne	SHORT $LN4@Buffer
	push	36					; 00000024H
	push	OFFSET ??_C@_1GC@DMMDNGMD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Buffer:
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN6@Buffer
$LN5@Buffer:
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv80[ebp], ecx
$LN6@Buffer:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR [edx], eax

; 37   : 			IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 1
$LN2@Buffer:

; 38   : 		}
; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Buffer@@QAE@J@Z ENDP					; Buffer::Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EStraw@@UAEPAXI@Z PROC				; Straw::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1Straw@@UAE@XZ			; Straw::~Straw
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Straw@@UAE@XZ			; Straw::~Straw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EStraw@@UAEPAXI@Z ENDP				; Straw::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GStraw@@UAEPAXI@Z PROC				; Straw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Straw@@UAE@XZ			; Straw::~Straw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GStraw@@UAEPAXI@Z ENDP				; Straw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4Straw@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Straw@@QAEAAV0@ABV0@@Z PROC				; Straw::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Straw@@QAEAAV0@ABV0@@Z ENDP				; Straw::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Straw@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Straw@@QAE@ABV0@@Z PROC				; Straw::Straw, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Straw@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Straw@@QAE@ABV0@@Z ENDP				; Straw::Straw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Strip_Path_From_Filename@@YAXAAVStringClass@@PBD@Z
_TEXT	SEGMENT
_c$1 = -4						; size = 4
_target$ = 8						; size = 4
_fileName$ = 12						; size = 4
?Strip_Path_From_Filename@@YAXAAVStringClass@@PBD@Z PROC ; Strip_Path_From_Filename, COMDAT

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 23   : 	if (strchr(fileName,'\\'))

	push	92					; 0000005cH
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@Strip_Path

; 24   : 	{
; 25   : 		const char *c = strrchr(fileName,'\\');

	push	92					; 0000005cH
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	mov	DWORD PTR _c$1[ebp], eax

; 26   : 		c++;

	mov	eax, DWORD PTR _c$1[ebp]
	add	eax, 1
	mov	DWORD PTR _c$1[ebp], eax

; 27   : 		target = c;

	mov	eax, DWORD PTR _c$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 28   : 	}
; 29   : 	else

	jmp	SHORT $LN3@Strip_Path
$LN2@Strip_Path:

; 30   : 	{
; 31   : 		target = fileName;

	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN3@Strip_Path:

; 32   : 	}
; 33   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Strip_Path_From_Filename@@YAXAAVStringClass@@PBD@Z ENDP ; Strip_Path_From_Filename
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Registry_Path@@YAPBDXZ
_TEXT	SEGMENT
?Get_Registry_Path@@YAPBDXZ PROC			; Get_Registry_Path, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 192  : 	if (!PathsInit)

	movzx	eax, BYTE PTR ?PathsInit@@3_NA		; PathsInit
	test	eax, eax
	jne	SHORT $LN1@Get_Regist

; 193  : 	{
; 194  : 		Read_Paths();

	call	?Read_Paths@@YAXXZ			; Read_Paths
$LN1@Get_Regist:

; 195  : 	}
; 196  : 	return RegPath;

	mov	eax, OFFSET ?RegPath@@3PADA		; RegPath

; 197  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Registry_Path@@YAPBDXZ ENDP			; Get_Registry_Path
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_App_Data_Path@@YAPBDXZ
_TEXT	SEGMENT
?Get_App_Data_Path@@YAPBDXZ PROC			; Get_App_Data_Path, COMDAT

; 183  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 184  : 	if (!PathsInit)

	movzx	eax, BYTE PTR ?PathsInit@@3_NA		; PathsInit
	test	eax, eax
	jne	SHORT $LN1@Get_App_Da

; 185  : 	{
; 186  : 		Read_Paths();

	call	?Read_Paths@@YAXXZ			; Read_Paths
$LN1@Get_App_Da:

; 187  : 	}
; 188  : 	return AppDataPath;

	mov	eax, OFFSET ?AppDataPath@@3PADA		; AppDataPath

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_App_Data_Path@@YAPBDXZ ENDP			; Get_App_Data_Path
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_File_Path@@YAPBDXZ
_TEXT	SEGMENT
?Get_File_Path@@YAPBDXZ PROC				; Get_File_Path, COMDAT

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 176  : 	if (!PathsInit)

	movzx	eax, BYTE PTR ?PathsInit@@3_NA		; PathsInit
	test	eax, eax
	jne	SHORT $LN1@Get_File_P

; 177  : 	{
; 178  : 		Read_Paths();

	call	?Read_Paths@@YAXXZ			; Read_Paths
$LN1@Get_File_P:

; 179  : 	}
; 180  : 	return FilePath;

	mov	eax, OFFSET ?FilePath@@3PADA		; FilePath

; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Path@@YAPBDXZ ENDP				; Get_File_Path
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Registry_Int@@YAIPBDH@Z
_TEXT	SEGMENT
_type$ = -20						; size = 4
_size$ = -16						; size = 4
_error$ = -12						; size = 4
_key$ = -8						; size = 4
_value$ = -4						; size = 4
_entry$ = 8						; size = 4
_defaultvalue$ = 12					; size = 4
?Get_Registry_Int@@YAIPBDH@Z PROC			; Get_Registry_Int, COMDAT

; 913  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 914  : 	unsigned int value;
; 915  : 	HKEY key;
; 916  : 	LONG error = RegOpenKeyEx(HKEY_CURRENT_USER,Get_Registry_Path(),0,KEY_READ,&key);

	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	push	131097					; 00020019H
	push	0
	call	?Get_Registry_Path@@YAPBDXZ		; Get_Registry_Path
	push	eax
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	mov	DWORD PTR _error$[ebp], eax

; 917  : 	value = 0;

	mov	DWORD PTR _value$[ebp], 0

; 918  : 	unsigned long size = 4;

	mov	DWORD PTR _size$[ebp], 4

; 919  : 	unsigned long type;
; 920  : 	error = RegQueryValueEx(key,entry,0,&type,(BYTE *)&value,&size);

	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _value$[ebp]
	push	ecx
	lea	edx, DWORD PTR _type$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24
	mov	DWORD PTR _error$[ebp], eax

; 921  : 	if (error == ERROR_FILE_NOT_FOUND)

	cmp	DWORD PTR _error$[ebp], 2
	jne	SHORT $LN1@Get_Regist

; 922  : 	{
; 923  : 		value = defaultvalue;

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	mov	DWORD PTR _value$[ebp], eax
$LN1@Get_Regist:

; 924  : 	}
; 925  : 	RegCloseKey(key);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4

; 926  : 	return value;

	mov	eax, DWORD PTR _value$[ebp]

; 927  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Registry_Int@@YAIPBDH@Z ENDP			; Get_Registry_Int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Release_INI@@YAXPAVINIClass@@@Z
_TEXT	SEGMENT
tv81 = -76						; size = 4
$T1 = -72						; size = 4
$T2 = -68						; size = 4
_ini$ = 8						; size = 4
?Release_INI@@YAXPAVINIClass@@@Z PROC			; Release_INI, COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 219  : 	if (ini)

	cmp	DWORD PTR _ini$[ebp], 0
	je	SHORT $LN2@Release_IN

; 220  : 	{
; 221  : 		delete ini;

	push	OFFSET ??_C@_0M@DGNOAIDN@Release_INI?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Release_INI@@YAXPAVINIClass@@@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN7@Release_IN
	xor	edx, edx
	jne	SHORT $LN4@Release_IN
	mov	eax, DWORD PTR ?__LINE__Var@?1??Release_INI@@YAXPAVINIClass@@@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Release_IN:
	jmp	SHORT $LN2@Release_IN
$LN7@Release_IN:
	mov	edx, DWORD PTR _ini$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Release_IN
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN2@Release_IN
$LN5@Release_IN:
	mov	DWORD PTR tv81[ebp], 0
$LN2@Release_IN:

; 222  : 	}
; 223  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Release_INI@@YAXPAVINIClass@@@Z ENDP			; Release_INI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_INI@@YAPAVINIClass@@PBD@Z
_TEXT	SEGMENT
tv95 = -84						; size = 4
tv129 = -80						; size = 4
$T1 = -76						; size = 4
_f$ = -8						; size = 4
_ini$ = -4						; size = 4
_filename$ = 8						; size = 4
?Get_INI@@YAPAVINIClass@@PBD@Z PROC			; Get_INI, COMDAT

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 204  : 	INIClass *ini = 0;

	mov	DWORD PTR _ini$[ebp], 0

; 205  : 	FileClass *f = _TheFileFactory->Get_File(filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR _f$[ebp], eax

; 206  : 	if (f)

	cmp	DWORD PTR _f$[ebp], 0
	je	$LN2@Get_INI

; 207  : 	{
; 208  : 		if (f->Is_Available())

	push	0
	mov	eax, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Get_INI

; 209  : 		{
; 210  : 			ini = new INIClass(*f);

	push	OFFSET ??_C@_07PHFINMNM@Get_INI?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Get_INI@@YAPAVINIClass@@PBD@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN8@Get_INI
	xor	edx, edx
	jne	SHORT $LN5@Get_INI
	mov	eax, DWORD PTR ?__LINE__Var@?1??Get_INI@@YAPAVINIClass@@PBD@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Get_INI:
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN9@Get_INI
$LN8@Get_INI:
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Get_INI
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0INIClass@@QAE@AAVFileClass@@@Z	; INIClass::INIClass
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN7@Get_INI
$LN6@Get_INI:
	mov	DWORD PTR tv95[ebp], 0
$LN7@Get_INI:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv129[ebp], eax
$LN9@Get_INI:
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _ini$[ebp], ecx
$LN1@Get_INI:

; 211  : 		}
; 212  : 		_TheFileFactory->Return_File(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Get_INI:

; 213  : 	}
; 214  : 	return ini;

	mov	eax, DWORD PTR _ini$[ebp]

; 215  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_INI@@YAPAVINIClass@@PBD@Z ENDP			; Get_INI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Close_Data_File@@YAXPAVFileClass@@@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
?Close_Data_File@@YAXPAVFileClass@@@Z PROC		; Close_Data_File, COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 48   : 	_TheFileFactory->Return_File(file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 49   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Close_Data_File@@YAXPAVFileClass@@@Z ENDP		; Close_Data_File
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Data_File@@YAPAVFileClass@@PBD@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
?Get_Data_File@@YAPAVFileClass@@PBD@Z PROC		; Get_Data_File, COMDAT

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 43   : 	return _TheFileFactory->Get_File(file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Data_File@@YAPAVFileClass@@PBD@Z ENDP		; Get_Data_File
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4file_auto_ptr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z PROC			; file_auto_ptr::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z ENDP			; file_auto_ptr::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?get@file_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@file_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::get, COMDAT
; _this$ = ecx

; 202  : 	FileClass* get() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get@file_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Dfile_auto_ptr@@QAEAAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ PROC		; file_auto_ptr::operator*, COMDAT
; _this$ = ecx

; 201  : 	FileClass& operator*() { return *_Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ ENDP		; file_auto_ptr::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Bfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator FileClass *, COMDAT
; _this$ = ecx

; 200  : 	operator FileClass *() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator FileClass *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Cfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator->, COMDAT
; _this$ = ecx

; 199  : 	FileClass* operator ->() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ??1file_auto_ptr@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1file_auto_ptr@@QAE@XZ PROC				; file_auto_ptr::~file_auto_ptr, COMDAT
; _this$ = ecx

; 941  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 942  : 	_Fac->Return_File(_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 943  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1file_auto_ptr@@QAE@XZ ENDP				; file_auto_ptr::~file_auto_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ??0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z
_TEXT	SEGMENT
tv93 = -80						; size = 4
tv95 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_fac$ = 8						; size = 4
_filename$ = 12						; size = 4
??0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z PROC	; file_auto_ptr::file_auto_ptr, COMDAT
; _this$ = ecx

; 930  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 931  : 	_Ptr = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 932  : 	_Fac = fac;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fac$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 933  : 	_Ptr = fac->Get_File(filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fac$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _fac$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 934  : 	if (!_Ptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@file_auto_

; 935  : 	{
; 936  : 		_Ptr = new BufferedFileClass();

	push	OFFSET ??_C@_0BN@JBPACNPA@file_auto_ptr?3?3file_auto_ptr?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1???0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z@4JA
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN7@file_auto_
	xor	edx, edx
	jne	SHORT $LN4@file_auto_
	mov	eax, DWORD PTR ?__LINE__Var@?1???0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z@4JA
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@file_auto_:
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN8@file_auto_
$LN7@file_auto_:
	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@file_auto_
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0BufferedFileClass@@QAE@XZ		; BufferedFileClass::BufferedFileClass
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN6@file_auto_
$LN5@file_auto_:
	mov	DWORD PTR tv93[ebp], 0
$LN6@file_auto_:
	mov	edx, DWORD PTR tv93[ebp]
	mov	DWORD PTR tv95[ebp], edx
$LN8@file_auto_:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@file_auto_:

; 937  : 	}
; 938  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z ENDP	; file_auto_ptr::file_auto_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EINIClass@@UAEPAXI@Z PROC				; INIClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1INIClass@@UAE@XZ		; INIClass::~INIClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EINIClass@@UAEPAXI@Z ENDP				; INIClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINIClass@@UAEPAXI@Z PROC				; INIClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINIClass@@UAEPAXI@Z ENDP				; INIClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4INIClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4INIClass@@QAEAAV0@ABV0@@Z PROC			; INIClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4INIClass@@QAEAAV0@ABV0@@Z ENDP			; INIClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0INIClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0INIClass@@QAE@ABV0@@Z PROC				; INIClass::INIClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INIClass@@QAE@ABV0@@Z ENDP				; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Name@INIClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Name@INIClass@@QAEPBDXZ PROC			; INIClass::Get_File_Name, COMDAT
; _this$ = ecx

; 183  : 	const char *Get_File_Name() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 		return Filename;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Name@INIClass@@QAEPBDXZ ENDP			; INIClass::Get_File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ PROC ; INIClass::Get_Section_Index, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		return *SectionIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 182  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ENDP ; INIClass::Get_Section_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ PROC ; INIClass::Get_Section_List, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return *SectionList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ENDP ; INIClass::Get_Section_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Section_Present@INIClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Section_Present@INIClass@@QBE_NPBD@Z PROC		; INIClass::Section_Present, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN3@Section_Pr
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Section_Pr
$LN3@Section_Pr:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Section_Pr:
	mov	al, BYTE PTR tv68[ebp]

; 174  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Section_Present@INIClass@@QBE_NPBD@Z ENDP		; INIClass::Section_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Is_Present@INIClass@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Is_Present@INIClass@@QBE_NPBD0@Z PROC			; INIClass::Is_Present, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@Is_Present

; 163  : 		{
; 164  : 			return Find_Entry(section,entry) != 0;

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	test	eax, eax
	je	SHORT $LN5@Is_Present
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@Is_Present
$LN5@Is_Present:
	mov	DWORD PTR tv70[ebp], 0
$LN6@Is_Present:
	mov	al, BYTE PTR tv70[ebp]
	jmp	SHORT $LN3@Is_Present

; 165  : 		}
; 166  : 		else

	jmp	SHORT $LN3@Is_Present
$LN2@Is_Present:

; 167  : 		{
; 168  : 			return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN7@Is_Present
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN8@Is_Present
$LN7@Is_Present:
	mov	DWORD PTR tv76[ebp], 0
$LN8@Is_Present:
	mov	al, BYTE PTR tv76[ebp]
$LN3@Is_Present:

; 169  : 		}
; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Is_Present@INIClass@@QBE_NPBD0@Z ENDP			; INIClass::Is_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Section_Count@INIClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Section_Count@INIClass@@QBEHXZ PROC			; INIClass::Section_Count, COMDAT
; _this$ = ecx

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 	return SectionIndex->Count();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Count@?$IndexClass@HPAUINISection@@@@QBEHXZ ; IndexClass<int,INISection *>::Count

; 228  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Section_Count@INIClass@@QBEHXZ ENDP			; INIClass::Section_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Save@INIClass@@QAEHAAVPipe@@@Z
_TEXT	SEGMENT
tv191 = -124						; size = 4
tv172 = -124						; size = 4
tv128 = -124						; size = 4
tv289 = -117						; size = 1
tv268 = -117						; size = 1
tv240 = -117						; size = 1
tv286 = -116						; size = 4
tv265 = -116						; size = 4
tv237 = -116						; size = 4
tv283 = -112						; size = 4
tv262 = -112						; size = 4
tv234 = -112						; size = 4
_i7$1 = -44						; size = 4
_i6$2 = -40						; size = 4
_i5$3 = -36						; size = 4
_j$4 = -32						; size = 4
_i4$5 = -28						; size = 4
_i3$6 = -24						; size = 4
_i2$7 = -20						; size = 4
_i1$8 = -16						; size = 4
_i$9 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_pipe$ = 8						; size = 4
?Save@INIClass@@QAEHAAVPipe@@@Z PROC			; INIClass::Save, COMDAT
; _this$ = ecx

; 805  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 806  : 	int pos = 0;

	mov	DWORD PTR _pos$[ebp], 0

; 807  : 	for (INISection *i = SectionList->First();i;i = i->Next())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?First@?$List@PAUINISection@@@@QBEPAUINISection@@XZ ; List<INISection *>::First
	mov	DWORD PTR _i$9[ebp], eax
	jmp	SHORT $LN8@Save
$LN7@Save:
	mov	ecx, DWORD PTR _i$9[ebp]
	call	?Next@?$Node@PAUINISection@@@@QBEPAUINISection@@XZ ; Node<INISection *>::Next
	mov	DWORD PTR _i$9[ebp], eax
$LN8@Save:
	cmp	DWORD PTR _i$9[ebp], 0
	je	$LN6@Save

; 808  : 	{
; 809  : 		if (!i->Is_Valid())

	mov	ecx, DWORD PTR _i$9[ebp]
	call	?Is_Valid@?$Node@PAUINISection@@@@QBE_NXZ ; Node<INISection *>::Is_Valid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@Save

; 810  : 		{
; 811  : 			break;

	jmp	$LN6@Save
$LN5@Save:

; 812  : 		}
; 813  : 		int i1 = pipe.Put("[",1) + pos;

	push	1
	push	OFFSET ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _i1$8[ebp], eax

; 814  : 		int i2 = pipe.Put(i->Section,(int)strlen(i->Section)) + i1;

	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv234[ebp], ecx
	mov	edx, DWORD PTR tv234[ebp]
	add	edx, 1
	mov	DWORD PTR tv237[ebp], edx
$LL11@Save:
	mov	eax, DWORD PTR tv234[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv240[ebp], cl
	add	DWORD PTR tv234[ebp], 1
	cmp	BYTE PTR tv240[ebp], 0
	jne	SHORT $LL11@Save
	mov	edx, DWORD PTR tv234[ebp]
	sub	edx, DWORD PTR tv237[ebp]
	mov	DWORD PTR tv128[ebp], edx
	mov	eax, DWORD PTR tv128[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _i1$8[ebp]
	mov	DWORD PTR _i2$7[ebp], eax

; 815  : 		int i3 = pipe.Put("]",1) + i2;

	push	1
	push	OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _i2$7[ebp]
	mov	DWORD PTR _i3$6[ebp], eax

; 816  : 		int i4 = pipe.Put("\n",(int)strlen("\n")) + i3;

	push	1
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _i3$6[ebp]
	mov	DWORD PTR _i4$5[ebp], eax

; 817  : 		for (INIEntry *j = i->EntryList.First();j;j = j->Next())

	mov	ecx, DWORD PTR _i$9[ebp]
	add	ecx, 16					; 00000010H
	call	?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ; List<INIEntry *>::First
	mov	DWORD PTR _j$4[ebp], eax
	jmp	SHORT $LN4@Save
$LN3@Save:
	mov	ecx, DWORD PTR _j$4[ebp]
	call	?Next@?$Node@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ; Node<INIEntry *>::Next
	mov	DWORD PTR _j$4[ebp], eax
$LN4@Save:
	cmp	DWORD PTR _j$4[ebp], 0
	je	$LN2@Save

; 818  : 		{
; 819  : 			if (!j->Is_Valid())

	mov	ecx, DWORD PTR _j$4[ebp]
	call	?Is_Valid@?$Node@PAUINIEntry@@@@QBE_NXZ	; Node<INIEntry *>::Is_Valid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Save

; 820  : 			{
; 821  : 				break;

	jmp	$LN2@Save
$LN1@Save:

; 822  : 			}
; 823  : 			int i5 = pipe.Put(j->Entry,(int)strlen(j->Entry)) + i4;

	mov	eax, DWORD PTR _j$4[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv262[ebp], ecx
	mov	edx, DWORD PTR tv262[ebp]
	add	edx, 1
	mov	DWORD PTR tv265[ebp], edx
$LL12@Save:
	mov	eax, DWORD PTR tv262[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv268[ebp], cl
	add	DWORD PTR tv262[ebp], 1
	cmp	BYTE PTR tv268[ebp], 0
	jne	SHORT $LL12@Save
	mov	edx, DWORD PTR tv262[ebp]
	sub	edx, DWORD PTR tv265[ebp]
	mov	DWORD PTR tv172[ebp], edx
	mov	eax, DWORD PTR tv172[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$4[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _i4$5[ebp]
	mov	DWORD PTR _i5$3[ebp], eax

; 824  : 			int i6 = pipe.Put("=",1) + i5;

	push	1
	push	OFFSET ??_C@_01NEMOKFLO@?$DN?$AA@
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _i5$3[ebp]
	mov	DWORD PTR _i6$2[ebp], eax

; 825  : 			int i7 = pipe.Put(j->Value,(int)strlen(j->Value)) + i6;

	mov	eax, DWORD PTR _j$4[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv283[ebp], ecx
	mov	edx, DWORD PTR tv283[ebp]
	add	edx, 1
	mov	DWORD PTR tv286[ebp], edx
$LL13@Save:
	mov	eax, DWORD PTR tv283[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv289[ebp], cl
	add	DWORD PTR tv283[ebp], 1
	cmp	BYTE PTR tv289[ebp], 0
	jne	SHORT $LL13@Save
	mov	edx, DWORD PTR tv283[ebp]
	sub	edx, DWORD PTR tv286[ebp]
	mov	DWORD PTR tv191[ebp], edx
	mov	eax, DWORD PTR tv191[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$4[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _i6$2[ebp]
	mov	DWORD PTR _i7$1[ebp], eax

; 826  : 			i4 = pipe.Put("\n",(int)strlen("\n")) + i7;

	push	1
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _i7$1[ebp]
	mov	DWORD PTR _i4$5[ebp], eax

; 827  : 		}

	jmp	$LN3@Save
$LN2@Save:

; 828  : 		pos = pipe.Put("\n",(int)strlen("\n")) + i4;

	push	1
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	eax, DWORD PTR _i4$5[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 829  : 	}

	jmp	$LN7@Save
$LN6@Save:

; 830  : 	return pipe.End() + pos;

	mov	eax, DWORD PTR _pipe$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	eax, DWORD PTR _pos$[ebp]

; 831  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save@INIClass@@QAEHAAVPipe@@@Z ENDP			; INIClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Save@INIClass@@QAEHAAVFileClass@@@Z
_TEXT	SEGMENT
$T1 = -96						; size = 4
$T2 = -92						; size = 4
_pipe$ = -24						; size = 20
_this$ = -4						; size = 4
_file$ = 8						; size = 4
?Save@INIClass@@QAEHAAVFileClass@@@Z PROC		; INIClass::Save, COMDAT
; _this$ = ecx

; 794  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 795  : 	FilePipe pipe(&file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pipe$[ebp]
	call	??0FilePipe@@QAE@PAVFileClass@@@Z	; FilePipe::FilePipe

; 796  : 	if (Filename)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Save

; 797  : 	{
; 798  : 		delete[] Filename;

	push	OFFSET ??_C@_0P@PBFFLOEA@INIClass?3?3Save?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Save@INIClass@@QAEHAAVFileClass@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN5@Save
	xor	edx, edx
	jne	SHORT $LN4@Save
	mov	eax, DWORD PTR ?__LINE__Var@?1??Save@INIClass@@QAEHAAVFileClass@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Save:
	jmp	SHORT $LN1@Save
$LN5@Save:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Save:

; 799  : 	}
; 800  : 	Filename = newstr(file.File_Name());

	mov	eax, DWORD PTR _file$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _file$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 801  : 	return Save(pipe);

	lea	eax, DWORD PTR _pipe$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@INIClass@@QAEHAAVPipe@@@Z		; INIClass::Save
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR _pipe$[ebp]
	call	??1FilePipe@@UAE@XZ			; FilePipe::~FilePipe
	mov	eax, DWORD PTR $T2[ebp]

; 802  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save@INIClass@@QAEHAAVFileClass@@@Z ENDP		; INIClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Load@INIClass@@QAEHPAD@Z
_TEXT	SEGMENT
$T1 = -88						; size = 4
$T2 = -84						; size = 4
_ret$ = -16						; size = 4
_ptr$ = -12						; size = 8
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Load@INIClass@@QAEHPAD@Z PROC				; INIClass::Load, COMDAT
; _this$ = ecx

; 782  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 783  : 	file_auto_ptr ptr(_TheFileFactory,filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?_TheFileFactory@@3AAPAVFileFactoryClass@@A ; _TheFileFactory
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??0file_auto_ptr@@QAE@PAVFileFactoryClass@@PBD@Z ; file_auto_ptr::file_auto_ptr

; 784  : 	int ret = Load(*ptr);

	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??Dfile_auto_ptr@@QAEAAVFileClass@@XZ	; file_auto_ptr::operator*
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load@INIClass@@QAEHAAVFileClass@@@Z	; INIClass::Load
	mov	DWORD PTR _ret$[ebp], eax

; 785  : 	if (Filename)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Load

; 786  : 	{
; 787  : 		delete[] Filename;

	push	OFFSET ??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHPAD@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN5@Load
	xor	edx, edx
	jne	SHORT $LN4@Load
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHPAD@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Load:
	jmp	SHORT $LN1@Load
$LN5@Load:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Load:

; 788  : 	}
; 789  : 	Filename = newstr(filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 790  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??1file_auto_ptr@@QAE@XZ		; file_auto_ptr::~file_auto_ptr
	mov	eax, DWORD PTR $T2[ebp]

; 791  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load@INIClass@@QAEHPAD@Z ENDP				; INIClass::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Load@INIClass@@QAEHAAVFileClass@@@Z
_TEXT	SEGMENT
$T1 = -96						; size = 4
$T2 = -92						; size = 4
_straw$ = -24						; size = 20
_this$ = -4						; size = 4
_file$ = 8						; size = 4
?Load@INIClass@@QAEHAAVFileClass@@@Z PROC		; INIClass::Load, COMDAT
; _this$ = ecx

; 231  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 	FileStraw straw(file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	lea	ecx, DWORD PTR _straw$[ebp]
	call	??0FileStraw@@QAE@AAVFileClass@@@Z	; FileStraw::FileStraw

; 233  : 	if (Filename)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Load

; 234  : 	{
; 235  : 		delete[] Filename;

	push	OFFSET ??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVFileClass@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN5@Load
	xor	edx, edx
	jne	SHORT $LN4@Load
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVFileClass@@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Load:
	jmp	SHORT $LN1@Load
$LN5@Load:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Load:

; 236  : 	}
; 237  : 	Filename = newstr(file.File_Name());

	mov	eax, DWORD PTR _file$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _file$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 238  : 	return Load(straw);

	lea	eax, DWORD PTR _straw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load@INIClass@@QAEHAAVStraw@@@Z	; INIClass::Load
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR _straw$[ebp]
	call	??1FileStraw@@UAE@XZ			; FileStraw::~FileStraw
	mov	eax, DWORD PTR $T2[ebp]

; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load@INIClass@@QAEHAAVFileClass@@@Z ENDP		; INIClass::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Load@INIClass@@QAEHAAVStraw@@@Z
_TEXT	SEGMENT
tv150 = -797						; size = 1
tv149 = -796						; size = 4
tv312 = -792						; size = 4
tv240 = -792						; size = 4
tv148 = -792						; size = 4
tv400 = -788						; size = 4
tv336 = -788						; size = 4
tv314 = -788						; size = 4
tv242 = -788						; size = 4
tv147 = -788						; size = 4
$T1 = -784						; size = 4
$T2 = -780						; size = 4
$T3 = -776						; size = 4
$T4 = -772						; size = 4
$T5 = -768						; size = 4
$T6 = -764						; size = 4
$T7 = -760						; size = 4
$T8 = -756						; size = 4
$T9 = -752						; size = 4
$T10 = -748						; size = 4
$T11 = -744						; size = 4
$T12 = -740						; size = 4
$T13 = -736						; size = 4
$T14 = -732						; size = 4
_crc$15 = -664						; size = 4
_crc$16 = -660						; size = 4
_entry$17 = -656					; size = 4
_value$18 = -652					; size = 4
_key$19 = -648						; size = 4
_delimiter$20 = -644					; size = 4
_count$21 = -640					; size = 4
_section$22 = -636					; size = 4
_value$23 = -632					; size = 4
_key$24 = -628						; size = 4
_delimiter$25 = -624					; size = 4
_count$26 = -620					; size = 4
_sectionName$27 = -616					; size = 64
_line$ = -552						; size = 512
_cacheStraw$ = -40					; size = 32
_isLastLine$ = -5					; size = 1
_this$ = -4						; size = 4
_straw$ = 8						; size = 4
?Load@INIClass@@QAEHAAVStraw@@@Z PROC			; INIClass::Load, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 800				; 00000320H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 		bool isLastLine = false;

	mov	BYTE PTR _isLastLine$[ebp], 0

; 277  : 		CacheStraw cacheStraw(4096);

	push	4096					; 00001000H
	lea	ecx, DWORD PTR _cacheStraw$[ebp]
	call	??0CacheStraw@@QAE@H@Z			; CacheStraw::CacheStraw

; 278  : 		cacheStraw.Get_From(&straw);

	mov	eax, DWORD PTR _straw$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cacheStraw$[ebp]
	call	?Get_From@Straw@@UAEXPAV1@@Z		; Straw::Get_From
$LN44@Load:

; 279  : 		char line[512];
; 280  :  
; 281  : 		// Ignore everything above first section (indicated by a line like "[sectionName]")
; 282  : 		while (!isLastLine)

	movzx	eax, BYTE PTR _isLastLine$[ebp]
	test	eax, eax
	jne	SHORT $LN43@Load

; 283  : 		{
; 284  : 				Read_Line(cacheStraw, line, 512, isLastLine);

	lea	eax, DWORD PTR _isLastLine$[ebp]
	push	eax
	push	512					; 00000200H
	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cacheStraw$[ebp]
	push	edx
	call	?Read_Line@@YAHAAVStraw@@PADHAA_N@Z	; Read_Line
	add	esp, 16					; 00000010H

; 285  : 				if (isLastLine)

	movzx	eax, BYTE PTR _isLastLine$[ebp]
	test	eax, eax
	je	SHORT $LN42@Load

; 286  : 						return false;

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR _cacheStraw$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR $T1[ebp]
	jmp	$LN45@Load
$LN42@Load:

; 287  : 				if (line[0] == '[' && strchr(line, ']'))

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN41@Load
	push	93					; 0000005dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN41@Load

; 288  : 						break;

	jmp	SHORT $LN43@Load
$LN41@Load:

; 289  : 		}

	jmp	SHORT $LN44@Load
$LN43@Load:

; 290  :  
; 291  : 		if (Section_Count() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Section_Count@INIClass@@QBEHXZ		; INIClass::Section_Count
	test	eax, eax
	jle	$LN21@Load
$LN39@Load:

; 292  : 		{
; 293  : 				while (!isLastLine)

	movzx	eax, BYTE PTR _isLastLine$[ebp]
	test	eax, eax
	jne	$LN38@Load
$LN36@Load:

; 294  : 				{
; 295  : 						TT_ASSERT(line[0] == '[' && strchr(line, ']')); // at start of section

	xor	eax, eax
	jne	SHORT $LN36@Load
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN33@Load
	push	93					; 0000005dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN34@Load
$LN33@Load:
	int	3
$LN34@Load:

; 296  : 						line[0] = ' ';

	mov	eax, 1
	imul	eax, 0
	mov	BYTE PTR _line$[ebp+eax], 32		; 00000020H

; 297  : 						*strchr(line, ']') = '\0';

	push	93					; 0000005dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	BYTE PTR [eax], 0

; 298  : 						strtrim(line);

	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 299  : 						char sectionName[64];
; 300  : 						strcpy(sectionName, line);

	lea	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR tv147[ebp], eax
	lea	ecx, DWORD PTR _sectionName$27[ebp]
	mov	DWORD PTR tv148[ebp], ecx
	mov	edx, DWORD PTR tv148[ebp]
	mov	DWORD PTR tv149[ebp], edx
$LN47@Load:
	mov	eax, DWORD PTR tv147[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv150[ebp], cl
	mov	edx, DWORD PTR tv148[ebp]
	mov	al, BYTE PTR tv150[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv147[ebp]
	add	ecx, 1
	mov	DWORD PTR tv147[ebp], ecx
	mov	edx, DWORD PTR tv148[ebp]
	add	edx, 1
	mov	DWORD PTR tv148[ebp], edx
	cmp	BYTE PTR tv150[ebp], 0
	jne	SHORT $LN47@Load
$LN32@Load:

; 301  : 						while (!isLastLine)

	movzx	eax, BYTE PTR _isLastLine$[ebp]
	test	eax, eax
	jne	$LN31@Load

; 302  : 						{
; 303  : 								int count = Read_Line(cacheStraw, line, 512, isLastLine);

	lea	eax, DWORD PTR _isLastLine$[ebp]
	push	eax
	push	512					; 00000200H
	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cacheStraw$[ebp]
	push	edx
	call	?Read_Line@@YAHAAVStraw@@PADHAA_N@Z	; Read_Line
	add	esp, 16					; 00000010H
	mov	DWORD PTR _count$26[ebp], eax

; 304  : 								if (line[0] == '[' && strchr(line, ']'))

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN30@Load
	push	93					; 0000005dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN30@Load

; 305  : 										break;

	jmp	$LN31@Load
$LN30@Load:

; 306  : 								Strip_Comments(line);

	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?Strip_Comments@INIClass@@SAXPAD@Z	; INIClass::Strip_Comments
	add	esp, 4

; 307  : 								if (count)

	cmp	DWORD PTR _count$26[ebp], 0
	je	$LN29@Load

; 308  : 								{
; 309  : 										if (line[0] != ';')

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 59					; 0000003bH
	je	$LN29@Load

; 310  : 										{
; 311  : 												if (line[0] != '=')

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 61					; 0000003dH
	je	$LN29@Load

; 312  : 												{
; 313  : 														char* delimiter = strchr(line, '=');

	push	61					; 0000003dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _delimiter$25[ebp], eax

; 314  : 														if (delimiter)

	cmp	DWORD PTR _delimiter$25[ebp], 0
	je	$LN29@Load

; 315  : 														{
; 316  : 																*delimiter = '\0';

	mov	eax, DWORD PTR _delimiter$25[ebp]
	mov	BYTE PTR [eax], 0

; 317  : 																char* key = line;

	lea	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR _key$24[ebp], eax

; 318  : 																char* value = delimiter + 1;

	mov	eax, DWORD PTR _delimiter$25[ebp]
	add	eax, 1
	mov	DWORD PTR _value$23[ebp], eax

; 319  : 																strtrim(key);

	mov	eax, DWORD PTR _key$24[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 320  : 																if (key[0] != '\0')

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _key$24[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN29@Load

; 321  : 																{
; 322  : 																		strtrim(value);

	mov	eax, DWORD PTR _value$23[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 323  : 																		if (value[0] == '\0')

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _value$23[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN24@Load

; 324  : 																		{
; 325  : 																				continue;

	jmp	$LN32@Load
$LN24@Load:

; 326  : 																		}
; 327  : 																		if (!Put_String(sectionName, key, value))

	mov	eax, DWORD PTR _value$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$24[ebp]
	push	ecx
	lea	edx, DWORD PTR _sectionName$27[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Put_String@INIClass@@QAE_NPBD00@Z	; INIClass::Put_String
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN29@Load

; 328  : 																				return false;

	mov	DWORD PTR $T2[ebp], 0
	lea	ecx, DWORD PTR _cacheStraw$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR $T2[ebp]
	jmp	$LN45@Load
$LN29@Load:

; 329  : 																}
; 330  : 														}
; 331  : 												}
; 332  : 										}
; 333  : 								}
; 334  : 						}

	jmp	$LN32@Load
$LN31@Load:

; 335  : 				}

	jmp	$LN39@Load
$LN38@Load:

; 336  : 		}
; 337  : 		else

	jmp	$LN22@Load
$LN21@Load:

; 338  : 		{
; 339  : 				while (!isLastLine)

	movzx	eax, BYTE PTR _isLastLine$[ebp]
	test	eax, eax
	jne	$LN22@Load
$LN18@Load:

; 340  : 				{
; 341  : 						TT_ASSERT(line[0] == '[' && strchr(line, ']')); // at start of section

	xor	eax, eax
	jne	SHORT $LN18@Load
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN15@Load
	push	93					; 0000005dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@Load
$LN15@Load:
	int	3
$LN16@Load:

; 342  : 						line[0] = ' ';

	mov	eax, 1
	imul	eax, 0
	mov	BYTE PTR _line$[ebp+eax], 32		; 00000020H

; 343  : 						*strchr(line, ']') = '\0';

	push	93					; 0000005dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	BYTE PTR [eax], 0

; 344  : 						strtrim(line);

	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 345  : 						INISection* section = new INISection(newstr(line));

	push	OFFSET ??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
	add	eax, 70					; 00000046H
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN51@Load
	xor	edx, edx
	jne	SHORT $LN48@Load
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
	add	eax, 70					; 00000046H
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN48@Load:
	mov	DWORD PTR tv242[ebp], 0
	jmp	SHORT $LN52@Load
$LN51@Load:
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN49@Load
	lea	edx, DWORD PTR _line$[ebp]
	push	edx
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0INISection@@QAE@PAD@Z		; INISection::INISection
	mov	DWORD PTR tv240[ebp], eax
	jmp	SHORT $LN50@Load
$LN49@Load:
	mov	DWORD PTR tv240[ebp], 0
$LN50@Load:
	mov	eax, DWORD PTR tv240[ebp]
	mov	DWORD PTR tv242[ebp], eax
$LN52@Load:
	mov	ecx, DWORD PTR tv242[ebp]
	mov	DWORD PTR _section$22[ebp], ecx

; 346  : 						if (!section)

	cmp	DWORD PTR _section$22[ebp], 0
	jne	SHORT $LN13@Load

; 347  : 						{
; 348  : 								Clear(0, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@INIClass@@QAE_NPAD0@Z		; INIClass::Clear

; 349  : 								return false;

	mov	DWORD PTR $T4[ebp], 0
	lea	ecx, DWORD PTR _cacheStraw$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR $T4[ebp]
	jmp	$LN45@Load
$LN13@Load:

; 350  : 						}
; 351  : 						while (!isLastLine)

	movzx	eax, BYTE PTR _isLastLine$[ebp]
	test	eax, eax
	jne	$LN12@Load

; 352  : 						{
; 353  : 								int count = Read_Line(cacheStraw, line, 512, isLastLine);

	lea	eax, DWORD PTR _isLastLine$[ebp]
	push	eax
	push	512					; 00000200H
	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cacheStraw$[ebp]
	push	edx
	call	?Read_Line@@YAHAAVStraw@@PADHAA_N@Z	; Read_Line
	add	esp, 16					; 00000010H
	mov	DWORD PTR _count$21[ebp], eax

; 354  : 								if (line[0] == '[' && strchr(line, ']'))

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN11@Load
	push	93					; 0000005dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@Load

; 355  : 										break;

	jmp	$LN12@Load
$LN11@Load:

; 356  : 								Strip_Comments(line);

	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?Strip_Comments@INIClass@@SAXPAD@Z	; INIClass::Strip_Comments
	add	esp, 4

; 357  : 								char* delimiter = strchr(line, '=');

	push	61					; 0000003dH
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _delimiter$20[ebp], eax

; 358  : 								if (count)

	cmp	DWORD PTR _count$21[ebp], 0
	je	$LN10@Load

; 359  : 								{
; 360  : 										if (line[0] != ';')

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 59					; 0000003bH
	je	$LN10@Load

; 361  : 										{
; 362  : 												if (line[0] != '=')

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _line$[ebp+eax]
	cmp	ecx, 61					; 0000003dH
	je	$LN10@Load

; 363  : 												{
; 364  : 														if (delimiter)

	cmp	DWORD PTR _delimiter$20[ebp], 0
	je	$LN10@Load

; 365  : 														{
; 366  : 																*delimiter = '\0';

	mov	eax, DWORD PTR _delimiter$20[ebp]
	mov	BYTE PTR [eax], 0

; 367  : 																char* key = line;

	lea	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR _key$19[ebp], eax

; 368  : 																char* value = delimiter + 1;

	mov	eax, DWORD PTR _delimiter$20[ebp]
	add	eax, 1
	mov	DWORD PTR _value$18[ebp], eax

; 369  : 																strtrim(key);

	mov	eax, DWORD PTR _key$19[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 370  : 																if (key[0] != '\0')

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _key$19[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	$LN10@Load

; 371  : 																{
; 372  : 																		strtrim(value);

	mov	eax, DWORD PTR _value$18[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 373  : 																		if (value[0] == '\0')

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _value$18[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN5@Load

; 374  : 																		{
; 375  : 																				continue;

	jmp	$LN13@Load
$LN5@Load:

; 376  : 																		}
; 377  : 																		INIEntry* entry = new INIEntry(newstr(key), newstr(value));

	push	OFFSET ??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
	add	eax, 102				; 00000066H
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN56@Load
	xor	edx, edx
	jne	SHORT $LN53@Load
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
	add	eax, 102				; 00000066H
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN53@Load:
	mov	DWORD PTR tv314[ebp], 0
	jmp	SHORT $LN57@Load
$LN56@Load:
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN54@Load
	mov	edx, DWORD PTR _value$18[ebp]
	push	edx
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _key$19[ebp]
	push	eax
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0INIEntry@@QAE@PAD0@Z			; INIEntry::INIEntry
	mov	DWORD PTR tv312[ebp], eax
	jmp	SHORT $LN55@Load
$LN54@Load:
	mov	DWORD PTR tv312[ebp], 0
$LN55@Load:
	mov	ecx, DWORD PTR tv312[ebp]
	mov	DWORD PTR tv314[ebp], ecx
$LN57@Load:
	mov	edx, DWORD PTR tv314[ebp]
	mov	DWORD PTR _entry$17[ebp], edx

; 378  : 																		if (!entry)

	cmp	DWORD PTR _entry$17[ebp], 0
	jne	$LN4@Load

; 379  : 																		{
; 380  : 																				delete section;

	push	OFFSET ??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
	add	eax, 105				; 00000069H
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN61@Load
	xor	edx, edx
	jne	SHORT $LN58@Load
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
	add	eax, 105				; 00000069H
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN58@Load:
	jmp	SHORT $LN62@Load
$LN61@Load:
	mov	edx, DWORD PTR _section$22[ebp]
	mov	DWORD PTR $T7[ebp], edx
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN59@Load
	push	1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv336[ebp], eax
	jmp	SHORT $LN62@Load
$LN59@Load:
	mov	DWORD PTR tv336[ebp], 0
$LN62@Load:

; 381  : 																				Clear(0, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@INIClass@@QAE_NPAD0@Z		; INIClass::Clear

; 382  : 																				return false;

	mov	DWORD PTR $T8[ebp], 0
	lea	ecx, DWORD PTR _cacheStraw$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR $T8[ebp]
	jmp	$LN45@Load
$LN4@Load:

; 383  : 																		}
; 384  : 																		uint32 crc = CRC_String(entry->Entry, 0);

	push	0
	mov	eax, DWORD PTR _entry$17[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?CRC_String@@YAKPBDK@Z			; CRC_String
	add	esp, 8
	mov	DWORD PTR _crc$16[ebp], eax

; 385  : 																		if (section->EntryIndex.Is_Present(crc))

	mov	eax, DWORD PTR _crc$16[ebp]
	mov	DWORD PTR $T9[ebp], eax
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _section$22[ebp]
	add	ecx, 44					; 0000002cH
	call	?Is_Present@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ; IndexClass<int,INIEntry *>::Is_Present
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@Load

; 386  : 																				DuplicateCRCError(__FUNCTION__, section->Section, line);

	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$22[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	OFFSET ??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DuplicateCRCError@INIClass@@QAEXPBD00@Z ; INIClass::DuplicateCRCError
$LN3@Load:

; 387  : 																		section->EntryIndex.Add_Index(crc, entry);

	mov	eax, DWORD PTR _crc$16[ebp]
	mov	DWORD PTR $T10[ebp], eax
	lea	ecx, DWORD PTR _entry$17[ebp]
	push	ecx
	lea	edx, DWORD PTR $T10[ebp]
	push	edx
	mov	ecx, DWORD PTR _section$22[ebp]
	add	ecx, 44					; 0000002cH
	call	?Add_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABHABQAUINIEntry@@@Z ; IndexClass<int,INIEntry *>::Add_Index

; 388  : 																		section->EntryList.Add_Tail(entry);

	mov	eax, DWORD PTR _entry$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$22[ebp]
	add	ecx, 16					; 00000010H
	call	?Add_Tail@GenericList@@QAEXPAVGenericNode@@@Z ; GenericList::Add_Tail
$LN10@Load:

; 389  : 																}
; 390  : 														}
; 391  : 												}
; 392  : 										}
; 393  : 								}
; 394  : 						}

	jmp	$LN13@Load
$LN12@Load:

; 395  : 						if (section->EntryList.Is_Empty())

	mov	ecx, DWORD PTR _section$22[ebp]
	add	ecx, 16					; 00000010H
	call	?Is_Empty@GenericList@@QBE_NXZ		; GenericList::Is_Empty
	movzx	eax, al
	test	eax, eax
	je	$LN2@Load

; 396  : 						{
; 397  : 								delete section;

	push	OFFSET ??_C@_0P@PDEIENJE@INIClass?3?3Load?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
	add	eax, 122				; 0000007aH
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN66@Load
	xor	edx, edx
	jne	SHORT $LN63@Load
	mov	eax, DWORD PTR ?__LINE__Var@?1??Load@INIClass@@QAEHAAVStraw@@@Z@4JA
	add	eax, 122				; 0000007aH
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN63@Load:
	jmp	SHORT $LN67@Load
$LN66@Load:
	mov	edx, DWORD PTR _section$22[ebp]
	mov	DWORD PTR $T12[ebp], edx
	mov	eax, DWORD PTR $T12[ebp]
	mov	DWORD PTR $T11[ebp], eax
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN64@Load
	push	1
	mov	ecx, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv400[ebp], eax
	jmp	SHORT $LN67@Load
$LN64@Load:
	mov	DWORD PTR tv400[ebp], 0
$LN67@Load:

; 398  : 						}
; 399  : 						else

	jmp	SHORT $LN1@Load
$LN2@Load:

; 400  : 						{
; 401  : 								uint32 crc = CRC_String(section->Section, 0);

	push	0
	mov	eax, DWORD PTR _section$22[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?CRC_String@@YAKPBDK@Z			; CRC_String
	add	esp, 8
	mov	DWORD PTR _crc$15[ebp], eax

; 402  : 								SectionIndex->Add_Index(crc, section);

	mov	eax, DWORD PTR _crc$15[ebp]
	mov	DWORD PTR $T13[ebp], eax
	lea	ecx, DWORD PTR _section$22[ebp]
	push	ecx
	lea	edx, DWORD PTR $T13[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Add_Index@?$IndexClass@HPAUINISection@@@@QAE_NABHABQAUINISection@@@Z ; IndexClass<int,INISection *>::Add_Index

; 403  : 								SectionList->Add_Tail(section);

	mov	eax, DWORD PTR _section$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?Add_Tail@GenericList@@QAEXPAVGenericNode@@@Z ; GenericList::Add_Tail
$LN1@Load:

; 404  : 						}
; 405  : 				}

	jmp	$LN21@Load
$LN22@Load:

; 406  : 		}
; 407  : 		return true;

	mov	DWORD PTR $T14[ebp], 1
	lea	ecx, DWORD PTR _cacheStraw$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR $T14[ebp]
$LN45@Load:

; 408  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load@INIClass@@QAEHAAVStraw@@@Z ENDP			; INIClass::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ??1INIClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1INIClass@@UAE@XZ PROC				; INIClass::~INIClass, COMDAT
; _this$ = ecx

; 728  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@

; 729  : 	Clear(0,0);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@INIClass@@QAE_NPAD0@Z		; INIClass::Clear

; 730  : 	Shutdown();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Shutdown@INIClass@@QAEXXZ		; INIClass::Shutdown

; 731  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1INIClass@@UAE@XZ ENDP				; INIClass::~INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z PROC	; INIClass::Find_Section, COMDAT
; _this$ = ecx

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 	if (section)

	cmp	DWORD PTR _section$[ebp], 0
	je	SHORT $LN5@Find_Secti

; 462  : 	{
; 463  : 		/*int crc = CRC_String(section,0); //DA
; 464  : 		if (SectionIndex->Is_Present(crc))
; 465  : 		{
; 466  : 			return (*SectionIndex)[crc];
; 467  : 		}*/
; 468  : 		for (INISection *i = SectionList->First(); i && i->Is_Valid(); i = i->Next()) { //DA

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?First@?$List@PAUINISection@@@@QBEPAUINISection@@XZ ; List<INISection *>::First
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN4@Find_Secti
$LN3@Find_Secti:
	mov	ecx, DWORD PTR _i$1[ebp]
	call	?Next@?$Node@PAUINISection@@@@QBEPAUINISection@@XZ ; Node<INISection *>::Next
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Secti:
	cmp	DWORD PTR _i$1[ebp], 0
	je	SHORT $LN5@Find_Secti
	mov	ecx, DWORD PTR _i$1[ebp]
	call	?Is_Valid@?$Node@PAUINISection@@@@QBE_NXZ ; Node<INISection *>::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@Find_Secti

; 469  : 			if (!_stricmp(section, i->Section)) {

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Find_Secti

; 470  : 				return i;

	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN6@Find_Secti
$LN1@Find_Secti:

; 471  : 			}
; 472  : 		}

	jmp	SHORT $LN3@Find_Secti
$LN5@Find_Secti:

; 473  : 	}
; 474  : 	return 0;

	xor	eax, eax
$LN6@Find_Secti:

; 475  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ENDP	; INIClass::Find_Section
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z
_TEXT	SEGMENT
_Section$ = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z PROC	; INIClass::Find_Entry, COMDAT
; _this$ = ecx

; 477  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 478  : 	INISection *Section = Find_Section(section);

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	mov	DWORD PTR _Section$[ebp], eax

; 479  : 	if (Section)

	cmp	DWORD PTR _Section$[ebp], 0
	je	SHORT $LN1@Find_Entry

; 480  : 	{
; 481  : 		return Section->Find_Entry(entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Section$[ebp]
	call	?Find_Entry@INISection@@QAEPAUINIEntry@@PBD@Z ; INISection::Find_Entry
	jmp	SHORT $LN2@Find_Entry
$LN1@Find_Entry:

; 482  : 	}
; 483  : 	return 0;

	xor	eax, eax
$LN2@Find_Entry:

; 484  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ENDP	; INIClass::Find_Entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Entry@INIClass@@QBEPBDPBDH@Z
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_Section$ = -12						; size = 4
_count$ = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_index$ = 12						; size = 4
?Get_Entry@INIClass@@QBEPBDPBDH@Z PROC			; INIClass::Get_Entry, COMDAT
; _this$ = ecx

; 630  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 631  : 	int count = index;

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _count$[ebp], eax

; 632  : 	INISection *Section = Find_Section(section);

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	mov	DWORD PTR _Section$[ebp], eax

; 633  : 	if (Section)

	cmp	DWORD PTR _Section$[ebp], 0
	je	SHORT $LN7@Get_Entry

; 634  : 	{
; 635  : 		if (Section && index < Section->EntryIndex.Count())

	cmp	DWORD PTR _Section$[ebp], 0
	je	SHORT $LN7@Get_Entry
	mov	ecx, DWORD PTR _Section$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Count@?$IndexClass@HPAUINIEntry@@@@QBEHXZ ; IndexClass<int,INIEntry *>::Count
	cmp	DWORD PTR _index$[ebp], eax
	jge	SHORT $LN7@Get_Entry

; 636  : 		{
; 637  : 			for (INIEntry *i = Section->EntryList.First();i; i = i->Next())

	mov	ecx, DWORD PTR _Section$[ebp]
	add	ecx, 16					; 00000010H
	call	?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ; List<INIEntry *>::First
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN5@Get_Entry
$LN4@Get_Entry:
	mov	ecx, DWORD PTR _i$1[ebp]
	call	?Next@?$Node@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ; Node<INIEntry *>::Next
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Get_Entry:
	cmp	DWORD PTR _i$1[ebp], 0
	je	SHORT $LN7@Get_Entry

; 638  : 			{
; 639  : 				if (!i->Is_Valid())

	mov	ecx, DWORD PTR _i$1[ebp]
	call	?Is_Valid@?$Node@PAUINIEntry@@@@QBE_NXZ	; Node<INIEntry *>::Is_Valid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Get_Entry

; 640  : 				{
; 641  : 					break;

	jmp	SHORT $LN7@Get_Entry
$LN2@Get_Entry:

; 642  : 				}
; 643  : 				if (!count)

	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN1@Get_Entry

; 644  : 				{
; 645  : 					return i->Entry;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN8@Get_Entry
$LN1@Get_Entry:

; 646  : 				}
; 647  : 				count--;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 648  : 			}

	jmp	SHORT $LN4@Get_Entry
$LN7@Get_Entry:

; 649  : 		}
; 650  : 	}
; 651  : 	return 0;

	xor	eax, eax
$LN8@Get_Entry:

; 652  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get_Entry@INIClass@@QBEPBDPBDH@Z ENDP			; INIClass::Get_Entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Entry_Count@INIClass@@QBEHPBD@Z
_TEXT	SEGMENT
_Section$ = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Entry_Count@INIClass@@QBEHPBD@Z PROC			; INIClass::Entry_Count, COMDAT
; _this$ = ecx

; 621  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 	INISection *Section = Find_Section(section);

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	mov	DWORD PTR _Section$[ebp], eax

; 623  : 	if (Section)

	cmp	DWORD PTR _Section$[ebp], 0
	je	SHORT $LN1@Entry_Coun

; 624  : 	{
; 625  : 		return Section->EntryIndex.Count();

	mov	ecx, DWORD PTR _Section$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Count@?$IndexClass@HPAUINIEntry@@@@QBEHXZ ; IndexClass<int,INIEntry *>::Count
	jmp	SHORT $LN2@Entry_Coun
$LN1@Entry_Coun:

; 626  : 	}
; 627  : 	return 0;

	xor	eax, eax
$LN2@Entry_Coun:

; 628  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Entry_Count@INIClass@@QBEHPBD@Z ENDP			; INIClass::Entry_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Put_Float@INIClass@@QAE_NPBD0M@Z
_TEXT	SEGMENT
_buf$ = -528						; size = 524
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_value$ = 16						; size = 4
?Put_Float@INIClass@@QAE_NPBD0M@Z PROC			; INIClass::Put_Float, COMDAT
; _this$ = ecx

; 906  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 592				; 00000250H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 907  : 	char buf[524];
; 908  : 	sprintf(buf,"%f",value);

	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 909  : 	return Put_String(section,entry,buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Put_String@INIClass@@QAE_NPBD00@Z	; INIClass::Put_String

; 910  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Put_Float@INIClass@@QAE_NPBD0M@Z ENDP			; INIClass::Put_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Put_Bool@INIClass@@QAE_NPBD0_N@Z
_TEXT	SEGMENT
_str$ = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_value$ = 16						; size = 1
?Put_Bool@INIClass@@QAE_NPBD0_N@Z PROC			; INIClass::Put_Bool, COMDAT
; _this$ = ecx

; 892  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 893  : 	char *str;
; 894  : 	if (value)

	movzx	eax, BYTE PTR _value$[ebp]
	test	eax, eax
	je	SHORT $LN2@Put_Bool

; 895  : 	{
; 896  : 		str = "yes";

	mov	DWORD PTR _str$[ebp], OFFSET ??_C@_03ICICOMAL@yes?$AA@

; 897  : 	}
; 898  : 	else

	jmp	SHORT $LN1@Put_Bool
$LN2@Put_Bool:

; 899  : 	{
; 900  : 		str = "no";

	mov	DWORD PTR _str$[ebp], OFFSET ??_C@_02KAJCLHKP@no?$AA@
$LN1@Put_Bool:

; 901  : 	}
; 902  : 	return Put_String(section,entry,str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Put_String@INIClass@@QAE_NPBD00@Z	; INIClass::Put_String

; 903  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Put_Bool@INIClass@@QAE_NPBD0_N@Z ENDP			; INIClass::Put_Bool
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Put_Int@INIClass@@QAE_NPBD0HH@Z
_TEXT	SEGMENT
_buf$ = -532						; size = 524
_form$ = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_value$ = 16						; size = 4
_format$ = 20						; size = 4
?Put_Int@INIClass@@QAE_NPBD0HH@Z PROC			; INIClass::Put_Int, COMDAT
; _this$ = ecx

; 869  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 596				; 00000254H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 870  : 	char *form;
; 871  : 	if (format == 1)

	cmp	DWORD PTR _format$[ebp], 1
	jne	SHORT $LN4@Put_Int

; 872  : 	{
; 873  : 		form = "%Xh";

	mov	DWORD PTR _form$[ebp], OFFSET ??_C@_03IGNMOBEI@?$CFXh?$AA@

; 874  : 	}
; 875  : 	else

	jmp	SHORT $LN3@Put_Int
$LN4@Put_Int:

; 876  : 	{
; 877  : 		if (format > 1 && format == 2)

	cmp	DWORD PTR _format$[ebp], 1
	jle	SHORT $LN2@Put_Int
	cmp	DWORD PTR _format$[ebp], 2
	jne	SHORT $LN2@Put_Int

; 878  : 		{
; 879  : 			form = "$%X";

	mov	DWORD PTR _form$[ebp], OFFSET ??_C@_03LNAPELNN@$?$CFX?$AA@

; 880  : 		}
; 881  : 		else

	jmp	SHORT $LN3@Put_Int
$LN2@Put_Int:

; 882  : 		{
; 883  : 			form = "%d";

	mov	DWORD PTR _form$[ebp], OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
$LN3@Put_Int:

; 884  : 		}
; 885  : 	}
; 886  : 	char buf[524];
; 887  : 	sprintf(buf,form,value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _form$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 888  : 	return Put_String(section,entry,buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Put_String@INIClass@@QAE_NPBD00@Z	; INIClass::Put_String

; 889  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Put_Int@INIClass@@QAE_NPBD0HH@Z ENDP			; INIClass::Put_Int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Put_String@INIClass@@QAE_NPBD00@Z
_TEXT	SEGMENT
tv150 = -124						; size = 4
tv275 = -120						; size = 4
tv270 = -114						; size = 1
tv263 = -113						; size = 1
tv257 = -112						; size = 4
tv210 = -112						; size = 4
tv88 = -112						; size = 4
tv259 = -108						; size = 4
tv212 = -108						; size = 4
tv184 = -108						; size = 4
tv90 = -108						; size = 4
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
_ent$ = -12						; size = 4
_sec$ = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_string$ = 16						; size = 4
?Put_String@INIClass@@QAE_NPBD00@Z PROC			; INIClass::Put_String, COMDAT
; _this$ = ecx

; 834  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 835  : 	if (!section || !entry)

	cmp	DWORD PTR _section$[ebp], 0
	je	SHORT $LN6@Put_String
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN7@Put_String
$LN6@Put_String:

; 836  : 	{
; 837  : 		return false;

	xor	al, al
	jmp	$LN8@Put_String
$LN7@Put_String:

; 838  : 	}
; 839  : 	INISection *sec = Find_Section(section);

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	mov	DWORD PTR _sec$[ebp], eax

; 840  : 	if (!sec)

	cmp	DWORD PTR _sec$[ebp], 0
	jne	$LN5@Put_String

; 841  : 	{
; 842  : 		sec = new INISection(newstr(section));

	push	OFFSET ??_C@_0BF@EKGBNGFP@INIClass?3?3Put_String?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN13@Put_String
	xor	edx, edx
	jne	SHORT $LN10@Put_String
	mov	eax, DWORD PTR ?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Put_String:
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN14@Put_String
$LN13@Put_String:
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@Put_String
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0INISection@@QAE@PAD@Z		; INISection::INISection
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN12@Put_String
$LN11@Put_String:
	mov	DWORD PTR tv88[ebp], 0
$LN12@Put_String:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv90[ebp], eax
$LN14@Put_String:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _sec$[ebp], ecx

; 843  : 		SectionList->Add_Tail(sec);

	mov	eax, DWORD PTR _sec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?Add_Tail@GenericList@@QAEXPAVGenericNode@@@Z ; GenericList::Add_Tail

; 844  : 		SectionIndex->Add_Index(CRC_String(sec->Section,0),sec);

	push	0
	mov	eax, DWORD PTR _sec$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?CRC_String@@YAKPBDK@Z			; CRC_String
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	lea	edx, DWORD PTR _sec$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Add_Index@?$IndexClass@HPAUINISection@@@@QAE_NABHABQAUINISection@@@Z ; IndexClass<int,INISection *>::Add_Index
$LN5@Put_String:

; 845  : 	}
; 846  : 	INIEntry *ent = sec->Find_Entry(entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sec$[ebp]
	call	?Find_Entry@INISection@@QAEPAUINIEntry@@PBD@Z ; INISection::Find_Entry
	mov	DWORD PTR _ent$[ebp], eax

; 847  : 	if (ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	$LN4@Put_String

; 848  : 	{
; 849  : 		if (strcmp(ent->Entry,entry))

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR tv259[ebp], eax
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv257[ebp], edx
$LL25@Put_String:
	mov	eax, DWORD PTR tv257[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv263[ebp], cl
	mov	edx, DWORD PTR tv259[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN26@Put_String
	cmp	BYTE PTR tv263[ebp], 0
	je	SHORT $LN27@Put_String
	mov	eax, DWORD PTR tv257[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv270[ebp], cl
	mov	edx, DWORD PTR tv259[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN26@Put_String
	add	DWORD PTR tv257[ebp], 2
	add	DWORD PTR tv259[ebp], 2
	cmp	BYTE PTR tv270[ebp], 0
	jne	SHORT $LL25@Put_String
$LN27@Put_String:
	mov	DWORD PTR tv275[ebp], 0
	jmp	SHORT $LN28@Put_String
$LN26@Put_String:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv275[ebp], eax
$LN28@Put_String:
	mov	ecx, DWORD PTR tv275[ebp]
	mov	DWORD PTR tv150[ebp], ecx
	cmp	DWORD PTR tv150[ebp], 0
	je	SHORT $LN3@Put_String

; 850  : 		{
; 851  : 			DuplicateCRCError("INIClass::Put_String",section,entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BF@EKGBNGFP@INIClass?3?3Put_String?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DuplicateCRCError@INIClass@@QAEXPBD00@Z ; INIClass::DuplicateCRCError
$LN3@Put_String:

; 852  : 		}
; 853  : 		SectionIndex->Remove_Index(CRC_String(ent->Entry,0));

	push	0
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?CRC_String@@YAKPBDK@Z			; CRC_String
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Remove_Index@?$IndexClass@HPAUINISection@@@@QAE_NABH@Z ; IndexClass<int,INISection *>::Remove_Index

; 854  : 		if (ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN4@Put_String

; 855  : 		{
; 856  : 			delete ent;

	push	OFFSET ??_C@_0BF@EKGBNGFP@INIClass?3?3Put_String?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA
	add	eax, 22					; 00000016H
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN18@Put_String
	xor	edx, edx
	jne	SHORT $LN15@Put_String
	mov	eax, DWORD PTR ?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA
	add	eax, 22					; 00000016H
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN15@Put_String:
	jmp	SHORT $LN4@Put_String
$LN18@Put_String:
	mov	edx, DWORD PTR _ent$[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN16@Put_String
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN4@Put_String
$LN16@Put_String:
	mov	DWORD PTR tv184[ebp], 0
$LN4@Put_String:

; 857  : 		}
; 858  : 	}
; 859  : 	if (string && *string)

	cmp	DWORD PTR _string$[ebp], 0
	je	$LN1@Put_String
	mov	eax, DWORD PTR _string$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN1@Put_String

; 860  : 	{
; 861  : 		ent = new INIEntry(newstr(entry),newstr(string));

	push	OFFSET ??_C@_0BF@EKGBNGFP@INIClass?3?3Put_String?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA
	add	eax, 27					; 0000001bH
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN23@Put_String
	xor	edx, edx
	jne	SHORT $LN20@Put_String
	mov	eax, DWORD PTR ?__LINE__Var@?1??Put_String@INIClass@@QAE_NPBD00@Z@4JA
	add	eax, 27					; 0000001bH
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN20@Put_String:
	mov	DWORD PTR tv212[ebp], 0
	jmp	SHORT $LN24@Put_String
$LN23@Put_String:
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN21@Put_String
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0INIEntry@@QAE@PAD0@Z			; INIEntry::INIEntry
	mov	DWORD PTR tv210[ebp], eax
	jmp	SHORT $LN22@Put_String
$LN21@Put_String:
	mov	DWORD PTR tv210[ebp], 0
$LN22@Put_String:
	mov	ecx, DWORD PTR tv210[ebp]
	mov	DWORD PTR tv212[ebp], ecx
$LN24@Put_String:
	mov	edx, DWORD PTR tv212[ebp]
	mov	DWORD PTR _ent$[ebp], edx

; 862  : 		sec->EntryList.Add_Tail(ent);

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sec$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add_Tail@GenericList@@QAEXPAVGenericNode@@@Z ; GenericList::Add_Tail

; 863  : 		sec->EntryIndex.Add_Index(CRC_String(ent->Entry,0),ent);

	push	0
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?CRC_String@@YAKPBDK@Z			; CRC_String
	add	esp, 8
	mov	DWORD PTR $T7[ebp], eax
	lea	edx, DWORD PTR _ent$[ebp]
	push	edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _sec$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Add_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABHABQAUINIEntry@@@Z ; IndexClass<int,INIEntry *>::Add_Index
$LN1@Put_String:

; 864  : 	}
; 865  : 	return true;

	mov	al, 1
$LN8@Put_String:

; 866  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Put_String@INIClass@@QAE_NPBD00@Z ENDP			; INIClass::Put_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Put_Wide_String@INIClass@@QAE_NPBD0PB_W@Z
_TEXT	SEGMENT
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_string$ = 16						; size = 4
?Put_Wide_String@INIClass@@QAE_NPBD0PB_W@Z PROC		; INIClass::Put_Wide_String, COMDAT
; _this$ = ecx

; 244  : AT2(0x005E08B0,0x005E0150);

$AT3PatchStart$3:
	push	ecx
	push	edx
	push	OFFSET $AT3PatchStart$3
	push	0
	push	6160720					; 005e0150H
	push	6162608					; 005e08b0H
	call	?HookupAT3@@YAPAXPAX000@Z		; HookupAT3
	add	esp, 16					; 00000010H
	pop	edx
	pop	ecx
	jmp	eax
?Put_Wide_String@INIClass@@QAE_NPBD0PB_W@Z ENDP		; INIClass::Put_Wide_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Wide_String@INIClass@@QBEAAVWideStringClass@@AAV2@PBD1PB_W@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Get_Wide_String@INIClass@@QBEAAVWideStringClass@@AAV2@PBD1PB_W@Z PROC ; INIClass::Get_Wide_String, COMDAT
; _this$ = ecx

; 247  : AT2(0x005E06E0,0x005DFF80);

$AT3PatchStart$3:
	push	ecx
	push	edx
	push	OFFSET $AT3PatchStart$3
	push	0
	push	6160256					; 005dff80H
	push	6162144					; 005e06e0H
	call	?HookupAT3@@YAPAXPAX000@Z		; HookupAT3
	add	esp, 16					; 00000010H
	pop	edx
	pop	ecx
	jmp	eax
?Get_Wide_String@INIClass@@QBEAAVWideStringClass@@AAV2@PBD1PB_W@Z ENDP ; INIClass::Get_Wide_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_String_Advanced@INIClass@@QBEAAVStringClass@@AAV2@PBD11_N@Z
_TEXT	SEGMENT
_Entry$ = -12						; size = 4
_value$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_section$ = 12						; size = 4
_entry$ = 16						; size = 4
_defaultvalue$ = 20					; size = 4
_updateIfNotFound$ = 24					; size = 1
?Get_String_Advanced@INIClass@@QBEAAVStringClass@@AAV2@PBD11_N@Z PROC ; INIClass::Get_String_Advanced, COMDAT
; _this$ = ecx

; 434  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 435  : 	const char *value = defaultvalue;

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 436  : 	if (!section || !entry)

	cmp	DWORD PTR _section$[ebp], 0
	je	SHORT $LN6@Get_String
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN7@Get_String
$LN6@Get_String:

; 437  : 	{
; 438  : 		string = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _string$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN7@Get_String:

; 439  : 	}
; 440  : 	INIEntry *Entry = Find_Entry(section,entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	mov	DWORD PTR _Entry$[ebp], eax

; 441  : 	if (Entry)

	cmp	DWORD PTR _Entry$[ebp], 0
	je	SHORT $LN5@Get_String

; 442  : 	{
; 443  : 		value = Entry->Value;

	mov	eax, DWORD PTR _Entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _value$[ebp], ecx
	jmp	SHORT $LN4@Get_String
$LN5@Get_String:

; 444  : 	}
; 445  : 	else if (!updateIfNotFound)

	movzx	eax, BYTE PTR _updateIfNotFound$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Get_String

; 446  : 	{
; 447  : 		return string;

	mov	eax, DWORD PTR _string$[ebp]
	jmp	SHORT $LN8@Get_String
$LN4@Get_String:

; 448  : 	}
; 449  : 
; 450  : 	if (value)

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN2@Get_String

; 451  : 	{
; 452  : 		string = value;

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 453  : 	}
; 454  : 	else

	jmp	SHORT $LN1@Get_String
$LN2@Get_String:

; 455  : 	{
; 456  : 		string = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _string$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN1@Get_String:

; 457  : 	}
; 458  : 	return string;

	mov	eax, DWORD PTR _string$[ebp]
$LN8@Get_String:

; 459  : }INISection *INIClass::Find_Section(const char* section) const

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Get_String_Advanced@INIClass@@QBEAAVStringClass@@AAV2@PBD11_N@Z ENDP ; INIClass::Get_String_Advanced
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_String@INIClass@@QBEAAVStringClass@@AAV2@PBD11@Z
_TEXT	SEGMENT
_Entry$ = -12						; size = 4
_value$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_section$ = 12						; size = 4
_entry$ = 16						; size = 4
_defaultvalue$ = 20					; size = 4
?Get_String@INIClass@@QBEAAVStringClass@@AAV2@PBD11@Z PROC ; INIClass::Get_String, COMDAT
; _this$ = ecx

; 411  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 412  : 	const char *value = defaultvalue;

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 413  : 	if (!section || !entry)

	cmp	DWORD PTR _section$[ebp], 0
	je	SHORT $LN4@Get_String
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN5@Get_String
$LN4@Get_String:

; 414  : 	{
; 415  : 		string = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _string$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN5@Get_String:

; 416  : 	}
; 417  : 	INIEntry *Entry = Find_Entry(section,entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	mov	DWORD PTR _Entry$[ebp], eax

; 418  : 	if (Entry)

	cmp	DWORD PTR _Entry$[ebp], 0
	je	SHORT $LN3@Get_String

; 419  : 	{
; 420  : 		value = Entry->Value;

	mov	eax, DWORD PTR _Entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _value$[ebp], ecx
$LN3@Get_String:

; 421  : 	}
; 422  : 	if (value)

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN2@Get_String

; 423  : 	{
; 424  : 		string = value;

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 425  : 	}
; 426  : 	else

	jmp	SHORT $LN1@Get_String
$LN2@Get_String:

; 427  : 	{
; 428  : 		string = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _string$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN1@Get_String:

; 429  : 	}
; 430  : 	return string;

	mov	eax, DWORD PTR _string$[ebp]

; 431  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Get_String@INIClass@@QBEAAVStringClass@@AAV2@PBD11@Z ENDP ; INIClass::Get_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_String_Advanced@INIClass@@QBEHPBD00PADH_N@Z
_TEXT	SEGMENT
tv93 = -92						; size = 4
tv151 = -85						; size = 1
tv148 = -84						; size = 4
tv145 = -80						; size = 4
_value$ = -12						; size = 4
_Entry$ = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_defaultvalue$ = 16					; size = 4
_result$ = 20						; size = 4
_size$ = 24						; size = 4
_updateIfNotFound$ = 28					; size = 1
?Get_String_Advanced@INIClass@@QBEHPBD00PADH_N@Z PROC	; INIClass::Get_String_Advanced, COMDAT
; _this$ = ecx

; 601  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 602  : 	if (!result || size <= 1 || !section || !entry)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@Get_String
	cmp	DWORD PTR _size$[ebp], 1
	jle	SHORT $LN5@Get_String
	cmp	DWORD PTR _section$[ebp], 0
	je	SHORT $LN5@Get_String
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN6@Get_String
$LN5@Get_String:

; 603  : 		return 0;

	xor	eax, eax
	jmp	$LN7@Get_String
$LN6@Get_String:

; 604  : 	INIEntry *Entry = Find_Entry(section,entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	mov	DWORD PTR _Entry$[ebp], eax

; 605  : 	const char *value = defaultvalue;

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 606  : 	if (Entry && Entry->Value)

	cmp	DWORD PTR _Entry$[ebp], 0
	je	SHORT $LN4@Get_String
	mov	eax, DWORD PTR _Entry$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@Get_String

; 607  : 		value = Entry->Value;

	mov	eax, DWORD PTR _Entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _value$[ebp], ecx
$LN4@Get_String:

; 608  : 	if ((!Entry || !Entry->Value) && !updateIfNotFound) 

	cmp	DWORD PTR _Entry$[ebp], 0
	je	SHORT $LN2@Get_String
	mov	eax, DWORD PTR _Entry$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@Get_String
$LN2@Get_String:
	movzx	eax, BYTE PTR _updateIfNotFound$[ebp]
	test	eax, eax
	jne	SHORT $LN3@Get_String

; 609  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN7@Get_String
$LN3@Get_String:

; 610  : 	if (!value)

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN1@Get_String

; 611  : 	{
; 612  : 		result[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 613  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN7@Get_String
$LN1@Get_String:

; 614  : 	}
; 615  : 	strncpy(result, value, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH

; 616  : 	result[size - 1] = 0;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	BYTE PTR [eax-1], 0

; 617  : 	strtrim(result);

	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 618  : 	return (int)strlen(result);

	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	add	ecx, 1
	mov	DWORD PTR tv148[ebp], ecx
$LL9@Get_String:
	mov	edx, DWORD PTR tv145[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv151[ebp], al
	add	DWORD PTR tv145[ebp], 1
	cmp	BYTE PTR tv151[ebp], 0
	jne	SHORT $LL9@Get_String
	mov	ecx, DWORD PTR tv145[ebp]
	sub	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR tv93[ebp], ecx
	mov	eax, DWORD PTR tv93[ebp]
$LN7@Get_String:

; 619  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Get_String_Advanced@INIClass@@QBEHPBD00PADH_N@Z ENDP	; INIClass::Get_String_Advanced
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_String@INIClass@@QBEHPBD00PADH@Z
_TEXT	SEGMENT
tv88 = -92						; size = 4
tv144 = -85						; size = 1
tv141 = -84						; size = 4
tv138 = -80						; size = 4
_value$ = -12						; size = 4
_Entry$ = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_defaultvalue$ = 16					; size = 4
_result$ = 20						; size = 4
_size$ = 24						; size = 4
?Get_String@INIClass@@QBEHPBD00PADH@Z PROC		; INIClass::Get_String, COMDAT
; _this$ = ecx

; 576  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 577  : 	if (!result || size <= 1 || !section || !entry)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@Get_String
	cmp	DWORD PTR _size$[ebp], 1
	jle	SHORT $LN4@Get_String
	cmp	DWORD PTR _section$[ebp], 0
	je	SHORT $LN4@Get_String
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN5@Get_String
$LN4@Get_String:

; 578  : 	{
; 579  : 		return 0;

	xor	eax, eax
	jmp	$LN6@Get_String
$LN5@Get_String:

; 580  : 	}
; 581  : 	INIEntry *Entry = Find_Entry(section,entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	mov	DWORD PTR _Entry$[ebp], eax

; 582  : 	const char *value = defaultvalue;

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 583  : 	if (Entry)

	cmp	DWORD PTR _Entry$[ebp], 0
	je	SHORT $LN3@Get_String

; 584  : 	{
; 585  : 		if (Entry->Value)

	mov	eax, DWORD PTR _Entry$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@Get_String

; 586  : 		{
; 587  : 			value = Entry->Value;

	mov	eax, DWORD PTR _Entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _value$[ebp], ecx
$LN3@Get_String:

; 588  : 		}
; 589  : 	}
; 590  : 	if (!value)

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN1@Get_String

; 591  : 	{
; 592  : 		result[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 593  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN6@Get_String
$LN1@Get_String:

; 594  : 	}
; 595  : 	strncpy(result, value, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH

; 596  : 	result[size - 1] = 0;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	BYTE PTR [eax-1], 0

; 597  : 	strtrim(result);

	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4

; 598  : 	return (int)strlen(result);

	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR tv138[ebp]
	add	ecx, 1
	mov	DWORD PTR tv141[ebp], ecx
$LL8@Get_String:
	mov	edx, DWORD PTR tv138[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv144[ebp], al
	add	DWORD PTR tv138[ebp], 1
	cmp	BYTE PTR tv144[ebp], 0
	jne	SHORT $LL8@Get_String
	mov	ecx, DWORD PTR tv138[ebp]
	sub	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	mov	eax, DWORD PTR tv88[ebp]
$LN6@Get_String:

; 599  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Get_String@INIClass@@QBEHPBD00PADH@Z ENDP		; INIClass::Get_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Bool@INIClass@@QBE_NPBD0_N@Z
_TEXT	SEGMENT
tv79 = -76						; size = 4
_Entry$1 = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_defaultvalue$ = 16					; size = 1
?Get_Bool@INIClass@@QBE_NPBD0_N@Z PROC			; INIClass::Get_Bool, COMDAT
; _this$ = ecx

; 546  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 	if (section)

	cmp	DWORD PTR _section$[ebp], 0
	je	SHORT $LN8@Get_Bool

; 548  : 	{
; 549  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN8@Get_Bool

; 550  : 		{
; 551  : 			INIEntry *Entry = Find_Entry(section,entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	mov	DWORD PTR _Entry$1[ebp], eax

; 552  : 			if (Entry)

	cmp	DWORD PTR _Entry$1[ebp], 0
	je	SHORT $LN8@Get_Bool

; 553  : 			{
; 554  : 				if (Entry->Value)

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN8@Get_Bool

; 555  : 				{
; 556  : 					switch ( toupper(Entry->Value[0]) )

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movsx	eax, BYTE PTR [edx+eax]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 41			; 00000029H
	ja	SHORT $LN8@Get_Bool
	mov	edx, DWORD PTR tv79[ebp]
	movzx	eax, BYTE PTR $LN11@Get_Bool[edx]
	jmp	DWORD PTR $LN12@Get_Bool[eax*4]
$LN2@Get_Bool:

; 557  : 					{
; 558  : 						case '1':
; 559  : 						case 'T':
; 560  : 						case 'Y':
; 561  : 							return true;

	mov	al, 1
	jmp	SHORT $LN9@Get_Bool

; 562  : 							break;

	jmp	SHORT $LN8@Get_Bool
$LN1@Get_Bool:

; 563  : 						case '0':
; 564  : 						case 'F':
; 565  : 						case 'N':
; 566  : 							return false;

	xor	al, al
	jmp	SHORT $LN9@Get_Bool
$LN8@Get_Bool:

; 567  : 							break;
; 568  : 					}
; 569  : 				}
; 570  : 			}
; 571  : 		}
; 572  : 	}
; 573  : 	return defaultvalue;

	mov	al, BYTE PTR _defaultvalue$[ebp]
$LN9@Get_Bool:

; 574  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN12@Get_Bool:
	DD	$LN1@Get_Bool
	DD	$LN2@Get_Bool
	DD	$LN8@Get_Bool
$LN11@Get_Bool:
	DB	0
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
?Get_Bool@INIClass@@QBE_NPBD0_N@Z ENDP			; INIClass::Get_Bool
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Float@INIClass@@QBEMPBD0M@Z
_TEXT	SEGMENT
_c$1 = -12						; size = 4
_Entry$2 = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_defaultvalue$ = 16					; size = 4
?Get_Float@INIClass@@QBEMPBD0M@Z PROC			; INIClass::Get_Float, COMDAT
; _this$ = ecx

; 521  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 	if (section)

	cmp	DWORD PTR _section$[ebp], 0
	je	SHORT $LN1@Get_Float

; 523  : 	{
; 524  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN1@Get_Float

; 525  : 		{
; 526  : 			INIEntry *Entry = Find_Entry(section,entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	mov	DWORD PTR _Entry$2[ebp], eax

; 527  : 			if (Entry)

	cmp	DWORD PTR _Entry$2[ebp], 0
	je	SHORT $LN1@Get_Float

; 528  : 			{
; 529  : 				if (Entry->Value)

	mov	eax, DWORD PTR _Entry$2[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@Get_Float

; 530  : 				{
; 531  : 					float c = defaultvalue;

	movss	xmm0, DWORD PTR _defaultvalue$[ebp]
	movss	DWORD PTR _c$1[ebp], xmm0

; 532  : #pragma warning(suppress: 6031) //warning C6031: return value ignored
; 533  : 					sscanf(Entry->Value, "%f", &c);

	lea	eax, DWORD PTR _c$1[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _Entry$2[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH

; 534  : 					defaultvalue = c;

	movss	xmm0, DWORD PTR _c$1[ebp]
	movss	DWORD PTR _defaultvalue$[ebp], xmm0

; 535  : 					if (strchr(Entry->Value, '%'))

	push	37					; 00000025H
	mov	eax, DWORD PTR _Entry$2[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@Get_Float

; 536  : 					{
; 537  : 						defaultvalue = defaultvalue / 100.0f;

	movss	xmm0, DWORD PTR _defaultvalue$[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _defaultvalue$[ebp], xmm0
$LN1@Get_Float:

; 538  : 					}
; 539  : 				}
; 540  : 			}
; 541  : 		}
; 542  : 	}
; 543  : 	return defaultvalue;

	fld	DWORD PTR _defaultvalue$[ebp]

; 544  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Get_Float@INIClass@@QBEMPBD0M@Z ENDP			; INIClass::Get_Float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Color_UInt@INIClass@@QBEIPBD0I@Z
_TEXT	SEGMENT
tv76 = -380						; size = 4
tv186 = -376						; size = 4
tv181 = -370						; size = 1
tv174 = -369						; size = 1
tv169 = -368						; size = 4
tv171 = -364						; size = 4
_b$ = -296						; size = 4
_g$ = -292						; size = 4
_r$ = -288						; size = 4
_a$ = -284						; size = 4
_res$1 = -280						; size = 4
_color$2 = -276						; size = 4
_hex$ = -272						; size = 10
_buf$ = -260						; size = 256
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_defaultvalue$ = 16					; size = 4
?Get_Color_UInt@INIClass@@QBEIPBD0I@Z PROC		; INIClass::Get_Color_UInt, COMDAT
; _this$ = ecx

; 734  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 735  : 	char buf[256], hex[10];
; 736  : 
; 737  : 	sprintf(buf,"%sHex",entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	push	OFFSET ??_C@_05FAHENKCB@?$CFsHex?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 738  : 	this->Get_String(section, buf, "0xNotValid", hex, 10); 

	push	10					; 0000000aH
	lea	eax, DWORD PTR _hex$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@BHNCPNHJ@0xNotValid?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@INIClass@@QBEHPBD00PADH@Z	; INIClass::Get_String

; 739  : 	if (strcmp(hex, "0xNotValid") != 0) // We've got us a supposedly valid hex value

	mov	DWORD PTR tv171[ebp], OFFSET ??_C@_0L@BHNCPNHJ@0xNotValid?$AA@
	lea	eax, DWORD PTR _hex$[ebp]
	mov	DWORD PTR tv169[ebp], eax
$LL5@Get_Color_:
	mov	ecx, DWORD PTR tv169[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv174[ebp], dl
	mov	eax, DWORD PTR tv171[ebp]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN6@Get_Color_
	cmp	BYTE PTR tv174[ebp], 0
	je	SHORT $LN7@Get_Color_
	mov	ecx, DWORD PTR tv169[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv181[ebp], dl
	mov	eax, DWORD PTR tv171[ebp]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN6@Get_Color_
	add	DWORD PTR tv169[ebp], 2
	add	DWORD PTR tv171[ebp], 2
	cmp	BYTE PTR tv181[ebp], 0
	jne	SHORT $LL5@Get_Color_
$LN7@Get_Color_:
	mov	DWORD PTR tv186[ebp], 0
	jmp	SHORT $LN8@Get_Color_
$LN6@Get_Color_:
	sbb	ecx, ecx
	or	ecx, 1
	mov	DWORD PTR tv186[ebp], ecx
$LN8@Get_Color_:
	mov	edx, DWORD PTR tv186[ebp]
	mov	DWORD PTR tv76[ebp], edx
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN2@Get_Color_

; 740  : 	{
; 741  : 		uint color;
; 742  : 		int res = sscanf(hex, "%lx", &color);

	lea	eax, DWORD PTR _color$2[ebp]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	lea	ecx, DWORD PTR _hex$[ebp]
	push	ecx
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _res$1[ebp], eax

; 743  : 		if (res == 1) return color; // Yay, we've got a color. Party!

	cmp	DWORD PTR _res$1[ebp], 1
	jne	SHORT $LN2@Get_Color_
	mov	eax, DWORD PTR _color$2[ebp]
	jmp	$LN3@Get_Color_
$LN2@Get_Color_:

; 744  : 	};
; 745  : 
; 746  : 	uint a, r, g, b;
; 747  : 	sprintf(buf,"%sAlpha",entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	push	OFFSET ??_C@_07DPBAKFHF@?$CFsAlpha?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 748  : 	a = this->Get_Int(section, buf, (defaultvalue >> 24) & 0xFF);

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int@INIClass@@QBEHPBD0H@Z		; INIClass::Get_Int
	mov	DWORD PTR _a$[ebp], eax

; 749  : 	sprintf(buf,"%sRed",entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	push	OFFSET ??_C@_05IJKHDAIH@?$CFsRed?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 750  : 	r = this->Get_Int(section, buf, (defaultvalue >> 16) & 0xFF);

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int@INIClass@@QBEHPBD0H@Z		; INIClass::Get_Int
	mov	DWORD PTR _r$[ebp], eax

; 751  : 	sprintf(buf,"%sGreen",entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	push	OFFSET ??_C@_07NOBOEHLK@?$CFsGreen?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 752  : 	g = this->Get_Int(section, buf, (defaultvalue >> 8) & 0xFF);

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int@INIClass@@QBEHPBD0H@Z		; INIClass::Get_Int
	mov	DWORD PTR _g$[ebp], eax

; 753  : 	sprintf(buf,"%sBlue",entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	push	OFFSET ??_C@_06GLNDDPBO@?$CFsBlue?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 754  : 	b = this->Get_Int(section, buf, defaultvalue & 0xFF);

	mov	eax, DWORD PTR _defaultvalue$[ebp]
	and	eax, 255				; 000000ffH
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Int@INIClass@@QBEHPBD0H@Z		; INIClass::Get_Int
	mov	DWORD PTR _b$[ebp], eax

; 755  : 
; 756  : 	return ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8) | (b & 0xFF);

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 255				; 000000ffH
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _g$[ebp]
	and	edx, 255				; 000000ffH
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, 255				; 000000ffH
	or	eax, ecx
$LN3@Get_Color_:

; 757  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Get_Color_UInt@INIClass@@QBEIPBD0I@Z ENDP		; INIClass::Get_Color_UInt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Get_Int@INIClass@@QBEHPBD0H@Z
_TEXT	SEGMENT
tv83 = -96						; size = 4
tv146 = -89						; size = 1
tv143 = -88						; size = 4
tv140 = -84						; size = 4
_pattern$1 = -16					; size = 4
_value$2 = -12						; size = 4
_Entry$3 = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
_defaultvalue$ = 16					; size = 4
?Get_Int@INIClass@@QBEHPBD0H@Z PROC			; INIClass::Get_Int, COMDAT
; _this$ = ecx

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 487  : 	if (section)

	cmp	DWORD PTR _section$[ebp], 0
	je	$LN7@Get_Int

; 488  : 	{
; 489  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	$LN7@Get_Int

; 490  : 		{
; 491  : 			INIEntry *Entry = Find_Entry(section,entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	mov	DWORD PTR _Entry$3[ebp], eax

; 492  : 			if (Entry)

	cmp	DWORD PTR _Entry$3[ebp], 0
	je	$LN7@Get_Int

; 493  : 			{
; 494  : 				if (Entry->Value)

	mov	eax, DWORD PTR _Entry$3[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN7@Get_Int

; 495  : 				{
; 496  : 					int *value;
; 497  : 					const char *pattern;
; 498  : 					if (Entry->Value[0] == '$')

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _Entry$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 36					; 00000024H
	jne	SHORT $LN3@Get_Int

; 499  : 					{
; 500  : 						value = &defaultvalue;

	lea	eax, DWORD PTR _defaultvalue$[ebp]
	mov	DWORD PTR _value$2[ebp], eax

; 501  : 						pattern = "$%x";

	mov	DWORD PTR _pattern$1[ebp], OFFSET ??_C@_03CIILGPHP@$?$CFx?$AA@

; 502  : 					}
; 503  : 					else

	jmp	SHORT $LN2@Get_Int
$LN3@Get_Int:

; 504  : 					{
; 505  : 						if (tolower(Entry->Value[strlen(Entry->Value) - 1]) != 'h')

	mov	eax, DWORD PTR _Entry$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv140[ebp], ecx
	mov	edx, DWORD PTR tv140[ebp]
	add	edx, 1
	mov	DWORD PTR tv143[ebp], edx
$LL10@Get_Int:
	mov	eax, DWORD PTR tv140[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv146[ebp], cl
	add	DWORD PTR tv140[ebp], 1
	cmp	BYTE PTR tv146[ebp], 0
	jne	SHORT $LL10@Get_Int
	mov	edx, DWORD PTR tv140[ebp]
	sub	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv83[ebp], edx
	mov	eax, DWORD PTR _Entry$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR tv83[ebp]
	movsx	eax, BYTE PTR [ecx+edx-1]
	push	eax
	call	DWORD PTR __imp__tolower
	add	esp, 4
	cmp	eax, 104				; 00000068H
	je	SHORT $LN1@Get_Int

; 506  : 						{
; 507  : 							return atoi(Entry->Value);

	mov	eax, DWORD PTR _Entry$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	jmp	SHORT $LN8@Get_Int
$LN1@Get_Int:

; 508  : 						}
; 509  : 						value = &defaultvalue;

	lea	eax, DWORD PTR _defaultvalue$[ebp]
	mov	DWORD PTR _value$2[ebp], eax

; 510  : 						pattern = "%xh";

	mov	DWORD PTR _pattern$1[ebp], OFFSET ??_C@_03LOJBKHKI@?$CFxh?$AA@
$LN2@Get_Int:

; 511  : 					}
; 512  : #pragma warning(suppress: 6031) //warning C6031: return value ignored
; 513  : 					sscanf(Entry->Value, pattern, value);

	mov	eax, DWORD PTR _value$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pattern$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _Entry$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
$LN7@Get_Int:

; 514  : 				}
; 515  : 			}
; 516  : 		}
; 517  : 	}
; 518  : 	return defaultvalue;

	mov	eax, DWORD PTR _defaultvalue$[ebp]
$LN8@Get_Int:

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Get_Int@INIClass@@QBEHPBD0H@Z ENDP			; INIClass::Get_Int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Clear@INIClass@@QAE_NPAD0@Z
_TEXT	SEGMENT
tv162 = -108						; size = 4
tv133 = -108						; size = 4
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
_Entry$8 = -12						; size = 4
_Section$9 = -8						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Clear@INIClass@@QAE_NPAD0@Z PROC			; INIClass::Clear, COMDAT
; _this$ = ecx

; 675  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 676  : 	if (section)

	cmp	DWORD PTR _section$[ebp], 0
	je	$LN6@Clear

; 677  : 	{
; 678  : 		INISection *Section = Find_Section(section);

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	mov	DWORD PTR _Section$9[ebp], eax

; 679  : 		if (Section)

	cmp	DWORD PTR _Section$9[ebp], 0
	je	$LN5@Clear

; 680  : 		{
; 681  : 			if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	$LN4@Clear

; 682  : 			{
; 683  : 				INIEntry *Entry = Section->Find_Entry(entry);

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Section$9[ebp]
	call	?Find_Entry@INISection@@QAEPAUINIEntry@@PBD@Z ; INISection::Find_Entry
	mov	DWORD PTR _Entry$8[ebp], eax

; 684  : 				if (!Entry)

	cmp	DWORD PTR _Entry$8[ebp], 0
	jne	SHORT $LN3@Clear

; 685  : 				{
; 686  : 					return true;

	mov	al, 1
	jmp	$LN7@Clear
$LN3@Clear:

; 687  : 				}
; 688  : 				Section->EntryIndex.Remove_Index(CRC_String(Entry->Entry,0));

	push	0
	mov	eax, DWORD PTR _Entry$8[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?CRC_String@@YAKPBDK@Z			; CRC_String
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _Section$9[ebp]
	add	ecx, 44					; 0000002cH
	call	?Remove_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ; IndexClass<int,INIEntry *>::Remove_Index

; 689  : 				delete Entry;

	push	OFFSET ??_C@_0BA@NFMHJJNN@INIClass?3?3Clear?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN12@Clear
	xor	edx, edx
	jne	SHORT $LN9@Clear
	mov	eax, DWORD PTR ?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Clear:
	jmp	SHORT $LN13@Clear
$LN12@Clear:
	mov	edx, DWORD PTR _Entry$8[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN10@Clear
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN13@Clear
$LN10@Clear:
	mov	DWORD PTR tv133[ebp], 0
$LN13@Clear:

; 690  : 				return true;

	mov	al, 1
	jmp	$LN7@Clear

; 691  : 			}
; 692  : 			else

	jmp	$LN5@Clear
$LN4@Clear:

; 693  : 			{
; 694  : 				SectionIndex->Remove_Index(CRC_String(Section->Section,0));

	push	0
	mov	eax, DWORD PTR _Section$9[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?CRC_String@@YAKPBDK@Z			; CRC_String
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Remove_Index@?$IndexClass@HPAUINISection@@@@QAE_NABH@Z ; IndexClass<int,INISection *>::Remove_Index

; 695  : 				delete Section;

	push	OFFSET ??_C@_0BA@NFMHJJNN@INIClass?3?3Clear?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN17@Clear
	xor	edx, edx
	jne	SHORT $LN14@Clear
	mov	eax, DWORD PTR ?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN14@Clear:
	jmp	SHORT $LN18@Clear
$LN17@Clear:
	mov	edx, DWORD PTR _Section$9[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN15@Clear
	push	1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN18@Clear
$LN15@Clear:
	mov	DWORD PTR tv162[ebp], 0
$LN18@Clear:

; 696  : 				return true;

	mov	al, 1
	jmp	$LN7@Clear
$LN5@Clear:

; 697  : 			}
; 698  : 		}
; 699  : 	}
; 700  : 	else

	jmp	SHORT $LN1@Clear
$LN6@Clear:

; 701  : 	{
; 702  : 		SectionList->Delete();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Delete@?$List@PAUINISection@@@@QAEXXZ	; List<INISection *>::Delete

; 703  : 		SectionIndex->Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Clear@?$IndexClass@HPAUINISection@@@@QAEXXZ ; IndexClass<int,INISection *>::Clear

; 704  : 		delete[] Filename;

	push	OFFSET ??_C@_0BA@NFMHJJNN@INIClass?3?3Clear?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA
	add	eax, 29					; 0000001dH
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN20@Clear
	xor	edx, edx
	jne	SHORT $LN19@Clear
	mov	eax, DWORD PTR ?__LINE__Var@?1??Clear@INIClass@@QAE_NPAD0@Z@4JA
	add	eax, 29					; 0000001dH
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN19@Clear:
	jmp	SHORT $LN21@Clear
$LN20@Clear:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T7[ebp], eax
	mov	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN21@Clear:

; 705  : 		Filename = newstr("<unknown>");

	push	OFFSET ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Clear:

; 706  : 	}
; 707  : 	return true;

	mov	al, 1
$LN7@Clear:

; 708  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Clear@INIClass@@QAE_NPAD0@Z ENDP			; INIClass::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Shutdown@INIClass@@QAEXXZ
_TEXT	SEGMENT
tv138 = -92						; size = 4
tv87 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 4
$T5 = -72						; size = 4
_this$ = -4						; size = 4
?Shutdown@INIClass@@QAEXXZ PROC				; INIClass::Shutdown, COMDAT
; _this$ = ecx

; 660  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 	if (SectionList)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Shutdown

; 662  : 	{
; 663  : 		delete SectionList;

	push	OFFSET ??_C@_0BD@BKLIDOBA@INIClass?3?3Shutdown?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN9@Shutdown
	xor	edx, edx
	jne	SHORT $LN6@Shutdown
	mov	eax, DWORD PTR ?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Shutdown:
	jmp	SHORT $LN3@Shutdown
$LN9@Shutdown:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@Shutdown
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN3@Shutdown
$LN7@Shutdown:
	mov	DWORD PTR tv87[ebp], 0
$LN3@Shutdown:

; 664  : 	}
; 665  : 	if (SectionIndex)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@Shutdown

; 666  : 	{
; 667  : 		delete SectionIndex;

	push	OFFSET ??_C@_0BD@BKLIDOBA@INIClass?3?3Shutdown?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN14@Shutdown
	xor	edx, edx
	jne	SHORT $LN11@Shutdown
	mov	eax, DWORD PTR ?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@Shutdown:
	jmp	SHORT $LN2@Shutdown
$LN14@Shutdown:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN12@Shutdown
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_G?$IndexClass@HPAUINISection@@@@QAEPAXI@Z
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN2@Shutdown
$LN12@Shutdown:
	mov	DWORD PTR tv138[ebp], 0
$LN2@Shutdown:

; 668  : 	}
; 669  : 	if (Filename)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@Shutdown

; 670  : 	{
; 671  : 		delete[] Filename;

	push	OFFSET ??_C@_0BD@BKLIDOBA@INIClass?3?3Shutdown?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN17@Shutdown
	xor	edx, edx
	jne	SHORT $LN16@Shutdown
	mov	eax, DWORD PTR ?__LINE__Var@?1??Shutdown@INIClass@@QAEXXZ@4JA
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN16@Shutdown:
	jmp	SHORT $LN4@Shutdown
$LN17@Shutdown:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN4@Shutdown:

; 672  : 	}
; 673  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Shutdown@INIClass@@QAEXXZ ENDP				; INIClass::Shutdown
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Initialize@INIClass@@QAEXXZ
_TEXT	SEGMENT
tv131 = -84						; size = 4
tv80 = -84						; size = 4
tv133 = -80						; size = 4
tv82 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Initialize@INIClass@@QAEXXZ PROC			; INIClass::Initialize, COMDAT
; _this$ = ecx

; 654  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 655  : 	SectionList = new List<INISection *>;

	push	OFFSET ??_C@_0BF@BAMGKENB@INIClass?3?3Initialize?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Initialize@INIClass@@QAEXXZ@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN6@Initialize
	xor	edx, edx
	jne	SHORT $LN3@Initialize
	mov	eax, DWORD PTR ?__LINE__Var@?1??Initialize@INIClass@@QAEXXZ@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Initialize:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN7@Initialize
$LN6@Initialize:
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Initialize
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$List@PAUINISection@@@@QAE@XZ	; List<INISection *>::List<INISection *>
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@Initialize
$LN4@Initialize:
	mov	DWORD PTR tv80[ebp], 0
$LN5@Initialize:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv82[ebp], edx
$LN7@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR [eax+4], ecx

; 656  : 	SectionIndex = new IndexClass<int,INISection *>;

	push	OFFSET ??_C@_0BF@BAMGKENB@INIClass?3?3Initialize?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Initialize@INIClass@@QAEXXZ@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DH@DCENIBGD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN11@Initialize
	xor	edx, edx
	jne	SHORT $LN8@Initialize
	mov	eax, DWORD PTR ?__LINE__Var@?1??Initialize@INIClass@@QAEXXZ@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GO@FOFKMDD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN8@Initialize:
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN12@Initialize
$LN11@Initialize:
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN9@Initialize
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0?$IndexClass@HPAUINISection@@@@QAE@XZ ; IndexClass<int,INISection *>::IndexClass<int,INISection *>
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN10@Initialize
$LN9@Initialize:
	mov	DWORD PTR tv131[ebp], 0
$LN10@Initialize:
	mov	edx, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv133[ebp], edx
$LN12@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR [eax+8], ecx

; 657  : 	Filename = newstr("<unknown>");

	push	OFFSET ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
	call	?newstr@@YAPADPBD@Z			; newstr
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 658  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Initialize@INIClass@@QAEXXZ ENDP			; INIClass::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ??0INIClass@@QAE@AAVFileClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
??0INIClass@@QAE@AAVFileClass@@@Z PROC			; INIClass::INIClass, COMDAT
; _this$ = ecx

; 721  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@

; 722  : 	Filename = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 723  : 	Initialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@INIClass@@QAEXXZ		; INIClass::Initialize

; 724  : 	Load(file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load@INIClass@@QAEHAAVFileClass@@@Z	; INIClass::Load

; 725  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INIClass@@QAE@AAVFileClass@@@Z ENDP			; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ??0INIClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0INIClass@@QAE@XZ PROC				; INIClass::INIClass, COMDAT
; _this$ = ecx

; 715  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@

; 716  : 	Filename = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 717  : 	Initialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@INIClass@@QAEXXZ		; INIClass::Initialize

; 718  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0INIClass@@QAE@XZ ENDP				; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?DuplicateCRCError@INIClass@@QAEXPBD00@Z
_TEXT	SEGMENT
_OutputString$ = -516					; size = 512
_this$ = -4						; size = 4
_function$ = 8						; size = 4
_section$ = 12						; size = 4
_entry$ = 16						; size = 4
?DuplicateCRCError@INIClass@@QAEXPBD00@Z PROC		; INIClass::DuplicateCRCError, COMDAT
; _this$ = ecx

; 773  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 580				; 00000244H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 774  : 	char OutputString[512];
; 775  : 	_snprintf(OutputString,512,"%s - Duplicate Entry \"%s\" in section \"%s\" (%s)\n",function,entry,section,Filename);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _section$[ebp]
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _function$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DA@LBAEEJJ@?$CFs?5?9?5Duplicate?5Entry?5?$CC?$CFs?$CC?5in?5sec@
	push	512					; 00000200H
	lea	edx, DWORD PTR _OutputString$[ebp]
	push	edx
	call	DWORD PTR __imp___snprintf
	add	esp, 28					; 0000001cH

; 776  : 	OutputString[511] = 0;

	mov	eax, 1
	imul	eax, 511				; 000001ffH
	mov	BYTE PTR _OutputString$[ebp+eax], 0

; 777  : 	OutputDebugString(OutputString);

	lea	eax, DWORD PTR _OutputString$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4

; 778  : 	MessageBox(0,OutputString,"Duplicate CRC in INI file.",16);

	push	16					; 00000010H
	push	OFFSET ??_C@_0BL@MCNMCOPK@Duplicate?5CRC?5in?5INI?5file?4?$AA@
	lea	eax, DWORD PTR _OutputString$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 779  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DuplicateCRCError@INIClass@@QAEXPBD00@Z ENDP		; INIClass::DuplicateCRCError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?CRC@INIClass@@SAHPAD@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?CRC@INIClass@@SAHPAD@Z PROC				; INIClass::CRC, COMDAT

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 711  : 	return CRC_String(string,0);

	push	0
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	?CRC_String@@YAKPBDK@Z			; CRC_String
	add	esp, 8

; 712  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CRC@INIClass@@SAHPAD@Z ENDP				; INIClass::CRC
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.cpp
;	COMDAT ?Strip_Comments@INIClass@@SAXPAD@Z
_TEXT	SEGMENT
_buf$1 = -4						; size = 4
_buffer$ = 8						; size = 4
?Strip_Comments@INIClass@@SAXPAD@Z PROC			; INIClass::Strip_Comments, COMDAT

; 760  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 761  : 	if (buffer)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN3@Strip_Comm

; 762  : 	{
; 763  : 		char *buf = strrchr(buffer,';');

	push	59					; 0000003bH
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _buf$1[ebp], eax

; 764  : 		if (buf)

	cmp	DWORD PTR _buf$1[ebp], 0
	je	SHORT $LN3@Strip_Comm

; 765  : 		{
; 766  : 			buf[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _buf$1[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 767  : 			strtrim(buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?strtrim@@YAPADPAD@Z			; strtrim
	add	esp, 4
$LN3@Strip_Comm:

; 768  : 		}
; 769  : 	}
; 770  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Strip_Comments@INIClass@@SAXPAD@Z ENDP			; INIClass::Strip_Comments
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINISection@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINISection@@UAEPAXI@Z PROC				; INISection::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INISection@@UAE@XZ			; INISection::~INISection
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINISection@@UAEPAXI@Z ENDP				; INISection::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??0INISection@@QAE@PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_section$ = 8						; size = 4
??0INISection@@QAE@PAD@Z PROC				; INISection::INISection, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$Node@PAUINISection@@@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INISection@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$List@PAUINIEntry@@@@QAE@XZ		; List<INIEntry *>::List<INIEntry *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$IndexClass@HPAUINIEntry@@@@QAE@XZ	; IndexClass<int,INIEntry *>::IndexClass<int,INIEntry *>

; 116  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INISection@@QAE@PAD@Z ENDP				; INISection::INISection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Find_Entry@INISection@@QAEPAUINIEntry@@PBD@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_entry$ = 8						; size = 4
?Find_Entry@INISection@@QAEPAUINIEntry@@PBD@Z PROC	; INISection::Find_Entry, COMDAT
; _this$ = ecx

; 98   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN5@Find_Entry

; 100  : 		{
; 101  : 			/*int crc = CRC_String(entry,0); //DA
; 102  : 			if (EntryIndex.Is_Present(crc))
; 103  : 			{
; 104  : 				return EntryIndex[crc];
; 105  : 			}*/
; 106  : 			for (INIEntry *i = EntryList.First(); i && i->Is_Valid(); i = i->Next()) { //DA

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ; List<INIEntry *>::First
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN4@Find_Entry
$LN3@Find_Entry:
	mov	ecx, DWORD PTR _i$1[ebp]
	call	?Next@?$Node@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ; Node<INIEntry *>::Next
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Entry:
	cmp	DWORD PTR _i$1[ebp], 0
	je	SHORT $LN5@Find_Entry
	mov	ecx, DWORD PTR _i$1[ebp]
	call	?Is_Valid@?$Node@PAUINIEntry@@@@QBE_NXZ	; Node<INIEntry *>::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@Find_Entry

; 107  : 				if (!_stricmp(entry, i->Entry)) {

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Find_Entry

; 108  : 					return i;

	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN6@Find_Entry
$LN1@Find_Entry:

; 109  : 				}
; 110  : 			}

	jmp	SHORT $LN3@Find_Entry
$LN5@Find_Entry:

; 111  : 		}
; 112  : 		return 0;

	xor	eax, eax
$LN6@Find_Entry:

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Find_Entry@INISection@@QAEPAUINIEntry@@PBD@Z ENDP	; INISection::Find_Entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??1INISection@@UAE@XZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
??1INISection@@UAE@XZ PROC				; INISection::~INISection, COMDAT
; _this$ = ecx

; 93   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INISection@@6B@

; 94   : 		delete[] Section;

	push	OFFSET ??_C@_0BI@MNFJCFIP@INISection?3?3?$HOINISection?$AA@
	push	94					; 0000005eH
	push	OFFSET ??_C@_0DF@OBDLAGEP@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN4@INISection
	xor	ecx, ecx
	jne	SHORT $LN3@INISection
	push	94					; 0000005eH
	push	OFFSET ??_C@_1GK@FAFJBHHM@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@INISection:
	jmp	SHORT $LN5@INISection
$LN4@INISection:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN5@INISection:

; 95   : 		EntryList.Delete();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Delete@?$List@PAUINIEntry@@@@QAEXXZ	; List<INIEntry *>::Delete

; 96   : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$IndexClass@HPAUINIEntry@@@@QAE@XZ	; IndexClass<int,INIEntry *>::~IndexClass<int,INIEntry *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$List@PAUINIEntry@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$Node@PAUINISection@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1INISection@@UAE@XZ ENDP				; INISection::~INISection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?search_compfunc@?$IndexClass@HPAUINIEntry@@@@SAHPBX0@Z
_TEXT	SEGMENT
_ptr2$ = 8						; size = 4
_ptr1$ = 12						; size = 4
?search_compfunc@?$IndexClass@HPAUINIEntry@@@@SAHPBX0@Z PROC ; IndexClass<int,INIEntry *>::search_compfunc, COMDAT

; 1329 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1330 : 		if (*(NodeElement *)ptr2 == *(NodeElement *)ptr1)

	mov	eax, DWORD PTR _ptr1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr2$[ebp]
	call	??8NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z ; IndexClass<int,INIEntry *>::NodeElement::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@search_com

; 1331 : 		{
; 1332 : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN5@search_com

; 1333 : 		}
; 1334 : 		else

	jmp	SHORT $LN5@search_com
$LN4@search_com:

; 1335 : 		{
; 1336 : 			if (*(NodeElement *)ptr1 < *(NodeElement *)ptr2)

	mov	eax, DWORD PTR _ptr2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr1$[ebp]
	call	??MNodeElement@?$IndexClass@HPAUINIEntry@@@@QAE_NABU01@@Z ; IndexClass<int,INIEntry *>::NodeElement::operator<
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@search_com

; 1337 : 			{
; 1338 : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN5@search_com

; 1339 : 			}
; 1340 : 			else

	jmp	SHORT $LN5@search_com
$LN2@search_com:

; 1341 : 			{
; 1342 : 				return -1;

	or	eax, -1
$LN5@search_com:

; 1343 : 			}
; 1344 : 		}
; 1345 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?search_compfunc@?$IndexClass@HPAUINIEntry@@@@SAHPBX0@Z ENDP ; IndexClass<int,INIEntry *>::search_compfunc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Increase_Table_Size@?$IndexClass@HPAUINIEntry@@@@QAE_NH@Z
_TEXT	SEGMENT
tv87 = -100						; size = 4
tv89 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_i$4 = -16						; size = 4
_newindex$5 = -12					; size = 4
_newsize$6 = -8						; size = 4
_this$ = -4						; size = 4
_amount$ = 8						; size = 4
?Increase_Table_Size@?$IndexClass@HPAUINIEntry@@@@QAE_NH@Z PROC ; IndexClass<int,INIEntry *>::Increase_Table_Size, COMDAT
; _this$ = ecx

; 1297 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1298 : 		if (amount >= 0)

	cmp	DWORD PTR _amount$[ebp], 0
	jl	$LN10@Increase_T

; 1299 : 		{
; 1300 : 			int newsize = IndexSize + amount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _amount$[ebp]
	mov	DWORD PTR _newsize$6[ebp], ecx

; 1301 : 			NodeElement *newindex = new NodeElement[newsize];

	push	OFFSET ??_C@_0DH@FMKNHFBJ@IndexClass?$DMint?0struct?5INIEntry?5?$CK@
	push	1301					; 00000515H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN16@Increase_T
	xor	ecx, ecx
	jne	SHORT $LN13@Increase_T
	push	1301					; 00000515H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Increase_T:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN17@Increase_T
$LN16@Increase_T:
	mov	eax, DWORD PTR _newsize$6[ebp]
	mov	DWORD PTR $T1[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN14@Increase_T
	push	OFFSET ??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@XZ ; IndexClass<int,INIEntry *>::NodeElement::NodeElement
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN15@Increase_T
$LN14@Increase_T:
	mov	DWORD PTR tv87[ebp], 0
$LN15@Increase_T:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN17@Increase_T:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _newindex$5[ebp], ecx

; 1302 : 			if (newindex)

	cmp	DWORD PTR _newindex$5[ebp], 0
	je	$LN10@Increase_T
$LN7@Increase_T:

; 1303 : 			{
; 1304 : 				TT_ASSERT(IndexCount < newsize);

	xor	eax, eax
	jne	SHORT $LN7@Increase_T
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _newsize$6[ebp]
	jl	SHORT $LN5@Increase_T
	int	3
$LN5@Increase_T:

; 1305 : 				for (int i = 0;i < this->IndexCount;i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@Increase_T
$LN3@Increase_T:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@Increase_T:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN2@Increase_T

; 1306 : 				{
; 1307 : 					newindex[i].ID = IndexTable[i].ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _newindex$5[ebp]
	mov	esi, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR [ecx+esi*8]
	mov	DWORD PTR [eax+edx*8], ecx

; 1308 : 					newindex[i].Data = IndexTable[i].Data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _newindex$5[ebp]
	mov	esi, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR [ecx+esi*8+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 1309 : 				}

	jmp	SHORT $LN3@Increase_T
$LN2@Increase_T:

; 1310 : 				if (IndexTable)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Increase_T

; 1311 : 					delete[] IndexTable;

	push	OFFSET ??_C@_0DH@FMKNHFBJ@IndexClass?$DMint?0struct?5INIEntry?5?$CK@
	push	1311					; 0000051fH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN19@Increase_T
	xor	ecx, ecx
	jne	SHORT $LN18@Increase_T
	push	1311					; 0000051fH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN18@Increase_T:
	jmp	SHORT $LN1@Increase_T
$LN19@Increase_T:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Increase_T:

; 1312 : 				IndexTable = newindex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newindex$5[ebp]
	mov	DWORD PTR [eax], ecx

; 1313 : 				IndexSize += amount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _amount$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1314 : 				Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ; IndexClass<int,INIEntry *>::Invalidate_Archive

; 1315 : 				return true;

	mov	al, 1
	jmp	SHORT $LN11@Increase_T
$LN10@Increase_T:

; 1316 : 			}
; 1317 : 		}
; 1318 : 		return false;

	xor	al, al
$LN11@Increase_T:

; 1319 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Increase_Table_Size@?$IndexClass@HPAUINIEntry@@@@QAE_NH@Z ENDP ; IndexClass<int,INIEntry *>::Increase_Table_Size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Set_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXPBUNodeElement@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_archive$ = 8						; size = 4
?Set_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXPBUNodeElement@1@@Z PROC ; IndexClass<int,INIEntry *>::Set_Archive, COMDAT
; _this$ = ecx

; 1293 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1294 : 		Archive = archive;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1295 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXPBUNodeElement@1@@Z ENDP ; IndexClass<int,INIEntry *>::Set_Archive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Search_For_Node@?$IndexClass@HPAUINIEntry@@@@QAEPAUNodeElement@1@ABH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_elem$2 = -12						; size = 8
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Search_For_Node@?$IndexClass@HPAUINIEntry@@@@QAEPAUNodeElement@1@ABH@Z PROC ; IndexClass<int,INIEntry *>::Search_For_Node, COMDAT
; _this$ = ecx

; 1278 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1279 : 		if (IndexCount)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Search_For

; 1280 : 		{
; 1281 : 			if (!IsSorted)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@Search_For

; 1282 : 			{
; 1283 : 				qsort(IndexTable,IndexCount,sizeof(NodeElement),search_compfunc);

	push	OFFSET ?search_compfunc@?$IndexClass@HPAUINIEntry@@@@SAHPBX0@Z ; IndexClass<int,INIEntry *>::search_compfunc
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H

; 1284 : 				Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ; IndexClass<int,INIEntry *>::Invalidate_Archive

; 1285 : 				IsSorted = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
$LN1@Search_For:

; 1286 : 			}
; 1287 : 			NodeElement elem(ID,0);

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _elem$2[ebp]
	call	??0NodeElement@?$IndexClass@HPAUINIEntry@@@@QAE@ABHABQAUINIEntry@@@Z ; IndexClass<int,INIEntry *>::NodeElement::NodeElement

; 1288 : 			return Binary_Search<NodeElement>(IndexTable,IndexCount,elem);

	lea	eax, DWORD PTR _elem$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$Binary_Search@UNodeElement@?$IndexClass@HPAUINIEntry@@@@@@YAPAUNodeElement@?$IndexClass@HPAUINIEntry@@@@PAU01@HAAU01@@Z ; Binary_Search<IndexClass<int,INIEntry *>::NodeElement>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@Search_For
$LN2@Search_For:

; 1289 : 		}
; 1290 : 		return false;

	xor	eax, eax
$LN3@Search_For:

; 1291 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Search_For_Node@?$IndexClass@HPAUINIEntry@@@@QAEPAUNodeElement@1@ABH@Z ENDP ; IndexClass<int,INIEntry *>::Search_For_Node
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Is_Archive_Same@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Is_Archive_Same@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z PROC ; IndexClass<int,INIEntry *>::Is_Archive_Same, COMDAT
; _this$ = ecx

; 1274 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 		return Archive && Archive->ID == ID;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@Is_Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _ID$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@Is_Archive
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@Is_Archive
$LN3@Is_Archive:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Is_Archive:
	mov	al, BYTE PTR tv69[ebp]

; 1276 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_Archive_Same@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ENDP ; IndexClass<int,INIEntry *>::Is_Archive_Same
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$IndexClass@HPAUINIEntry@@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$IndexClass@HPAUINIEntry@@@@QAEXXZ PROC		; IndexClass<int,INIEntry *>::Clear, COMDAT
; _this$ = ecx

; 1262 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1263 : 		if (IndexTable)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Clear

; 1264 : 		{
; 1265 : 			delete[] IndexTable;

	push	OFFSET ??_C@_0CJ@EAFFDJJP@IndexClass?$DMint?0struct?5INIEntry?5?$CK@
	push	1265					; 000004f1H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN5@Clear
	xor	ecx, ecx
	jne	SHORT $LN4@Clear
	push	1265					; 000004f1H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Clear:
	jmp	SHORT $LN1@Clear
$LN5@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Clear:

; 1266 : 		}
; 1267 : 		IndexTable = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1268 : 		IndexCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1269 : 		IndexSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1270 : 		IsSorted = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 1271 : 		Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ; IndexClass<int,INIEntry *>::Invalidate_Archive

; 1272 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ENDP		; IndexClass<int,INIEntry *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ PROC ; IndexClass<int,INIEntry *>::Invalidate_Archive, COMDAT
; _this$ = ecx

; 1258 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1259 : 		Archive = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1260 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ENDP ; IndexClass<int,INIEntry *>::Invalidate_Archive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$IndexClass@HPAUINIEntry@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$IndexClass@HPAUINIEntry@@@@QBEHXZ PROC		; IndexClass<int,INIEntry *>::Count, COMDAT
; _this$ = ecx

; 1245 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1246 : 		return IndexCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1247 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$IndexClass@HPAUINIEntry@@@@QBEHXZ ENDP		; IndexClass<int,INIEntry *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABHABQAUINIEntry@@@Z
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_Data$ = 12						; size = 4
?Add_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABHABQAUINIEntry@@@Z PROC ; IndexClass<int,INIEntry *>::Add_Index, COMDAT
; _this$ = ecx

; 1219 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1220 : 		if (IndexCount + 1 <= IndexSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jg	SHORT $LN4@Add_Index

; 1221 : 		{
; 1222 : 			IndexTable[IndexCount].ID = ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _ID$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8], edx

; 1223 : 			IndexTable[IndexCount++].Data = Data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _Data$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1224 : 			IsSorted = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 1225 : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Add_Index
$LN4@Add_Index:

; 1226 : 		}
; 1227 : 		int size = IndexSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _size$[ebp], ecx

; 1228 : 		if (!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN3@Add_Index

; 1229 : 		{
; 1230 : 			size = 10;

	mov	DWORD PTR _size$[ebp], 10		; 0000000aH
$LN3@Add_Index:

; 1231 : 		}
; 1232 : 		if (Increase_Table_Size(size))

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Increase_Table_Size@?$IndexClass@HPAUINIEntry@@@@QAE_NH@Z ; IndexClass<int,INIEntry *>::Increase_Table_Size
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Add_Index

; 1233 : 		{
; 1234 : 			IndexTable[IndexCount].ID = ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _ID$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8], edx

; 1235 : 			IndexTable[IndexCount++].Data = Data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _Data$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1236 : 			IsSorted = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 1237 : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Add_Index

; 1238 : 		}
; 1239 : 		else

	jmp	SHORT $LN5@Add_Index
$LN2@Add_Index:

; 1240 : 		{
; 1241 : 			return false;

	xor	al, al
$LN5@Add_Index:

; 1242 : 		}
; 1243 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Add_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABHABQAUINIEntry@@@Z ENDP ; IndexClass<int,INIEntry *>::Add_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Is_Present@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z
_TEXT	SEGMENT
_node$1 = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Is_Present@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z PROC ; IndexClass<int,INIEntry *>::Is_Present, COMDAT
; _this$ = ecx

; 1195 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1196 : 		if (IndexCount)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@Is_Present

; 1197 : 		{
; 1198 : 			if (Is_Archive_Same(ID))

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Archive_Same@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ; IndexClass<int,INIEntry *>::Is_Archive_Same
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Is_Present

; 1199 : 			{
; 1200 : 				return true;

	mov	al, 1
	jmp	SHORT $LN6@Is_Present

; 1201 : 			}
; 1202 : 			else

	jmp	SHORT $LN5@Is_Present
$LN4@Is_Present:

; 1203 : 			{
; 1204 : 				NodeElement *node = Search_For_Node(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Search_For_Node@?$IndexClass@HPAUINIEntry@@@@QAEPAUNodeElement@1@ABH@Z ; IndexClass<int,INIEntry *>::Search_For_Node
	mov	DWORD PTR _node$1[ebp], eax

; 1205 : 				if (node)

	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN2@Is_Present

; 1206 : 				{
; 1207 : 					Set_Archive(node);

	mov	eax, DWORD PTR _node$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXPBUNodeElement@1@@Z ; IndexClass<int,INIEntry *>::Set_Archive

; 1208 : 					return true;

	mov	al, 1
	jmp	SHORT $LN6@Is_Present

; 1209 : 				}
; 1210 : 				else

	jmp	SHORT $LN5@Is_Present
$LN2@Is_Present:

; 1211 : 				{
; 1212 : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Is_Present
$LN5@Is_Present:

; 1213 : 				}
; 1214 : 			}
; 1215 : 		}
; 1216 : 		return false;

	xor	al, al
$LN6@Is_Present:

; 1217 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_Present@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ENDP ; IndexClass<int,INIEntry *>::Is_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Remove_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_i$2 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Remove_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z PROC ; IndexClass<int,INIEntry *>::Remove_Index, COMDAT
; _this$ = ecx

; 1167 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1168 : 		int pos = -1;

	mov	DWORD PTR _pos$[ebp], -1

; 1169 : 		for (int i = 0;i < IndexCount;i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN9@Remove_Ind
$LN8@Remove_Ind:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN9@Remove_Ind:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN7@Remove_Ind

; 1170 : 		{
; 1171 : 			if (IndexTable[i].ID == ID)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _ID$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN6@Remove_Ind

; 1172 : 			{
; 1173 : 				pos = i;

	mov	eax, DWORD PTR _i$2[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 1174 : 				break;

	jmp	SHORT $LN7@Remove_Ind
$LN6@Remove_Ind:

; 1175 : 			}
; 1176 : 		}

	jmp	SHORT $LN8@Remove_Ind
$LN7@Remove_Ind:

; 1177 : 		if (pos == -1)

	cmp	DWORD PTR _pos$[ebp], -1
	jne	SHORT $LN5@Remove_Ind

; 1178 : 		{
; 1179 : 			return false;

	xor	al, al
	jmp	SHORT $LN10@Remove_Ind

; 1180 : 		}
; 1181 : 		else

	jmp	SHORT $LN4@Remove_Ind
$LN5@Remove_Ind:

; 1182 : 		{
; 1183 : 			for (int i = pos;i < IndexCount;i++)

	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN3@Remove_Ind
$LN2@Remove_Ind:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Remove_Ind:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN4@Remove_Ind

; 1184 : 			{
; 1185 : 				IndexTable[i] = IndexTable[i+1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+8]
	mov	ecx, DWORD PTR [ecx+edx*8+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	esi, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [edx+esi*8], eax
	mov	DWORD PTR [edx+esi*8+4], ecx

; 1186 : 			}

	jmp	SHORT $LN2@Remove_Ind
$LN4@Remove_Ind:

; 1187 : 		}
; 1188 : 		IndexCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1189 : 		IndexTable[IndexCount].ID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8], 0

; 1190 : 		IndexTable[IndexCount].Data = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*8+4], 0

; 1191 : 		Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ; IndexClass<int,INIEntry *>::Invalidate_Archive

; 1192 : 		return true;

	mov	al, 1
$LN10@Remove_Ind:

; 1193 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove_Index@?$IndexClass@HPAUINIEntry@@@@QAE_NABH@Z ENDP ; IndexClass<int,INIEntry *>::Remove_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$IndexClass@HPAUINIEntry@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$IndexClass@HPAUINIEntry@@@@QAE@XZ PROC		; IndexClass<int,INIEntry *>::~IndexClass<int,INIEntry *>, COMDAT
; _this$ = ecx

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1164 : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ; IndexClass<int,INIEntry *>::Clear

; 1165 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$IndexClass@HPAUINIEntry@@@@QAE@XZ ENDP		; IndexClass<int,INIEntry *>::~IndexClass<int,INIEntry *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$IndexClass@HPAUINIEntry@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IndexClass@HPAUINIEntry@@@@QAE@XZ PROC		; IndexClass<int,INIEntry *>::IndexClass<int,INIEntry *>, COMDAT
; _this$ = ecx

; 1159 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1160 : 		Invalidate_Archive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate_Archive@?$IndexClass@HPAUINIEntry@@@@QAEXXZ ; IndexClass<int,INIEntry *>::Invalidate_Archive

; 1161 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$IndexClass@HPAUINIEntry@@@@QAE@XZ ENDP		; IndexClass<int,INIEntry *>::IndexClass<int,INIEntry *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$List@PAUINIEntry@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$List@PAUINIEntry@@@@UAEPAXI@Z PROC		; List<INIEntry *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$List@PAUINIEntry@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$List@PAUINIEntry@@@@UAEPAXI@Z ENDP		; List<INIEntry *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$List@PAUINIEntry@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@PAUINIEntry@@@@UAE@XZ PROC			; List<INIEntry *>::~List<INIEntry *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericList@@UAE@XZ			; GenericList::~GenericList
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@PAUINIEntry@@@@UAE@XZ ENDP			; List<INIEntry *>::~List<INIEntry *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete@?$List@PAUINIEntry@@@@QAEXXZ
_TEXT	SEGMENT
tv94 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Delete@?$List@PAUINIEntry@@@@QAEXXZ PROC		; List<INIEntry *>::Delete, COMDAT
; _this$ = ecx

; 1077 : 	void Delete(void) {while (First()->Is_Valid()) delete First();}

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Delete:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ; List<INIEntry *>::First
	mov	ecx, eax
	call	?Is_Valid@?$Node@PAUINIEntry@@@@QBE_NXZ	; Node<INIEntry *>::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Delete
	push	OFFSET ??_C@_0CA@FGEPAIP@List?$DMstruct?5INIEntry?5?$CK?$DO?3?3Delete?$AA@
	push	1077					; 00000435H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Delete
	xor	ecx, ecx
	jne	SHORT $LN5@Delete
	push	1077					; 00000435H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Delete:
	jmp	SHORT $LN9@Delete
$LN8@Delete:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ; List<INIEntry *>::First
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Delete
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN9@Delete
$LN6@Delete:
	mov	DWORD PTR tv94[ebp], 0
$LN9@Delete:
	jmp	$LN2@Delete
$LN3@Delete:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete@?$List@PAUINIEntry@@@@QAEXXZ ENDP		; List<INIEntry *>::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ PROC	; List<INIEntry *>::First, COMDAT
; _this$ = ecx

; 1073 : 	T First(void) const {return((T)GenericList::First());}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?First@GenericList@@QBEPAVGenericNode@@XZ ; GenericList::First
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?First@?$List@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ENDP	; List<INIEntry *>::First
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$List@PAUINIEntry@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@PAUINIEntry@@@@QAE@XZ PROC			; List<INIEntry *>::List<INIEntry *>, COMDAT
; _this$ = ecx

; 1072 : 	List(void) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericList@@QAE@XZ			; GenericList::GenericList
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$List@PAUINIEntry@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@PAUINIEntry@@@@QAE@XZ ENDP			; List<INIEntry *>::List<INIEntry *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$Node@PAUINISection@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$Node@PAUINISection@@@@UAEPAXI@Z PROC		; Node<INISection *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$Node@PAUINISection@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$Node@PAUINISection@@@@UAEPAXI@Z ENDP		; Node<INISection *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$Node@PAUINISection@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Node@PAUINISection@@@@UAE@XZ PROC			; Node<INISection *>::~Node<INISection *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericNode@@UAE@XZ			; GenericNode::~GenericNode
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Node@PAUINISection@@@@UAE@XZ ENDP			; Node<INISection *>::~Node<INISection *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$Node@PAUINISection@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Node@PAUINISection@@@@QAE@XZ PROC			; Node<INISection *>::Node<INISection *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericNode@@QAE@XZ			; GenericNode::GenericNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$Node@PAUINISection@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Node@PAUINISection@@@@QAE@XZ ENDP			; Node<INISection *>::Node<INISection *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Is_Valid@?$Node@PAUINISection@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Valid@?$Node@PAUINISection@@@@QBE_NXZ PROC		; Node<INISection *>::Is_Valid, COMDAT
; _this$ = ecx

; 1066 : 	bool Is_Valid(void) const {return(GenericNode::Is_Valid());}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Valid@GenericNode@@QBE_NXZ		; GenericNode::Is_Valid
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid@?$Node@PAUINISection@@@@QBE_NXZ ENDP		; Node<INISection *>::Is_Valid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Next@?$Node@PAUINISection@@@@QBEPAUINISection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$Node@PAUINISection@@@@QBEPAUINISection@@XZ PROC	; Node<INISection *>::Next, COMDAT
; _this$ = ecx

; 1062 : 	T Next(void) const {return((T)GenericNode::Next());}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@GenericNode@@QBEPAV1@XZ		; GenericNode::Next
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$Node@PAUINISection@@@@QBEPAUINISection@@XZ ENDP	; Node<INISection *>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINIEntry@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINIEntry@@UAEPAXI@Z PROC				; INIEntry::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIEntry@@UAE@XZ			; INIEntry::~INIEntry
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINIEntry@@UAEPAXI@Z ENDP				; INIEntry::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??0INIEntry@@QAE@PAD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_entry$ = 8						; size = 4
_value$ = 12						; size = 4
??0INIEntry@@QAE@PAD0@Z PROC				; INIEntry::INIEntry, COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$Node@PAUINIEntry@@@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIEntry@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 80   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0INIEntry@@QAE@PAD0@Z ENDP				; INIEntry::INIEntry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??1INIEntry@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
??1INIEntry@@UAE@XZ PROC				; INIEntry::~INIEntry, COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIEntry@@6B@

; 73   : 		delete[] Entry;

	push	OFFSET ??_C@_0BE@NLFCMBPK@INIEntry?3?3?$HOINIEntry?$AA@
	push	73					; 00000049H
	push	OFFSET ??_C@_0DF@OBDLAGEP@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN4@INIEntry
	xor	ecx, ecx
	jne	SHORT $LN3@INIEntry
	push	73					; 00000049H
	push	OFFSET ??_C@_1GK@FAFJBHHM@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@INIEntry:
	jmp	SHORT $LN5@INIEntry
$LN4@INIEntry:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN5@INIEntry:

; 74   : 		Entry = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 75   : 		delete[] Value;

	push	OFFSET ??_C@_0BE@NLFCMBPK@INIEntry?3?3?$HOINIEntry?$AA@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DF@OBDLAGEP@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@INIEntry
	xor	ecx, ecx
	jne	SHORT $LN6@INIEntry
	push	75					; 0000004bH
	push	OFFSET ??_C@_1GK@FAFJBHHM@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@INIEntry:
	jmp	SHORT $LN8@INIEntry
$LN7@INIEntry:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@INIEntry:

; 76   : 		Value = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 77   : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$Node@PAUINIEntry@@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1INIEntry@@UAE@XZ ENDP				; INIEntry::~INIEntry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$Node@PAUINIEntry@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$Node@PAUINIEntry@@@@UAEPAXI@Z PROC		; Node<INIEntry *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$Node@PAUINIEntry@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$Node@PAUINIEntry@@@@UAEPAXI@Z ENDP		; Node<INIEntry *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$Node@PAUINIEntry@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Node@PAUINIEntry@@@@UAE@XZ PROC			; Node<INIEntry *>::~Node<INIEntry *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericNode@@UAE@XZ			; GenericNode::~GenericNode
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Node@PAUINIEntry@@@@UAE@XZ ENDP			; Node<INIEntry *>::~Node<INIEntry *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$Node@PAUINIEntry@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Node@PAUINIEntry@@@@QAE@XZ PROC			; Node<INIEntry *>::Node<INIEntry *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericNode@@QAE@XZ			; GenericNode::GenericNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$Node@PAUINIEntry@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Node@PAUINIEntry@@@@QAE@XZ ENDP			; Node<INIEntry *>::Node<INIEntry *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Is_Valid@?$Node@PAUINIEntry@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Valid@?$Node@PAUINIEntry@@@@QBE_NXZ PROC		; Node<INIEntry *>::Is_Valid, COMDAT
; _this$ = ecx

; 1066 : 	bool Is_Valid(void) const {return(GenericNode::Is_Valid());}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Valid@GenericNode@@QBE_NXZ		; GenericNode::Is_Valid
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid@?$Node@PAUINIEntry@@@@QBE_NXZ ENDP		; Node<INIEntry *>::Is_Valid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Next@?$Node@PAUINIEntry@@@@QBEPAUINIEntry@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@?$Node@PAUINIEntry@@@@QBEPAUINIEntry@@XZ PROC	; Node<INIEntry *>::Next, COMDAT
; _this$ = ecx

; 1062 : 	T Next(void) const {return((T)GenericNode::Next());}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@GenericNode@@QBEPAV1@XZ		; GenericNode::Next
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@?$Node@PAUINIEntry@@@@QBEPAUINIEntry@@XZ ENDP	; Node<INIEntry *>::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GFileClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileClass@@UAEPAXI@Z PROC				; FileClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileClass@@UAE@XZ			; FileClass::~FileClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileClass@@UAEPAXI@Z ENDP				; FileClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0FileClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FileClass@@QAE@XZ PROC				; FileClass::FileClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FileClass@@QAE@XZ ENDP				; FileClass::FileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Handle@FileClass@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Handle@FileClass@@UAEPAXXZ PROC		; FileClass::Get_File_Handle, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return (HANDLE)-1;

	or	eax, -1

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Handle@FileClass@@UAEPAXXZ ENDP		; FileClass::Get_File_Handle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Set_Date_Time@FileClass@@UAE_NK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 4
?Set_Date_Time@FileClass@@UAE_NK@Z PROC			; FileClass::Set_Date_Time, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return false;

	xor	al, al

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Date_Time@FileClass@@UAE_NK@Z ENDP			; FileClass::Set_Date_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Date_Time@FileClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Date_Time@FileClass@@UAEKXZ PROC			; FileClass::Get_Date_Time, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 		return 0;

	xor	eax, eax

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Date_Time@FileClass@@UAEKXZ ENDP			; FileClass::Get_Date_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Tell@FileClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Tell@FileClass@@UAEHXZ PROC				; FileClass::Tell, COMDAT
; _this$ = ecx

; 34   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return Seek(0,1);

	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 36   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Tell@FileClass@@UAEHXZ ENDP				; FileClass::Tell
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??1FileClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FileClass@@UAE@XZ PROC				; FileClass::~FileClass, COMDAT
; _this$ = ecx

; 21   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileClass@@6B@

; 22   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1FileClass@@UAE@XZ ENDP				; FileClass::~FileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkSaveClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z PROC			; ChunkSaveClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkSaveClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ PROC	; ChunkSaveClass::Set_Contains_Chunks, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		HeaderStack[StackIndex-1].ChunkSize |= 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*8+1028], eax

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ ENDP	; ChunkSaveClass::Set_Contains_Chunks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkLoadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z PROC			; ChunkLoadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkLoadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Is_Empty@StringClass@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@StringClass@@QBE_NXZ PROC			; StringClass::Is_Empty, COMDAT
; _this$ = ecx

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 372  : 	return (m_Buffer[0] == m_NullChar);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+eax]
	mov	ecx, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	edx, DWORD PTR [ecx]
	movsx	ecx, BYTE PTR [edx]
	cmp	eax, ecx
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv71[ebp]

; 373  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@StringClass@@QBE_NXZ ENDP			; StringClass::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BStringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BStringClass@@QBEPBDXZ PROC				; StringClass::operator char const *, COMDAT
; _this$ = ecx

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BStringClass@@QBEPBDXZ ENDP				; StringClass::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Uninitialised_Grow@StringClass@@AAEXH@Z

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1StringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringClass@@QAE@XZ PROC				; StringClass::~StringClass, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Free_String@StringClass@@AAEXXZ

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StringClass@@QAE@XZ ENDP				; StringClass::~StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@H_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __imp_?m_EmptyString@StringClass@@0AAPADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 326  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Get_String@StringClass@@AAEXH_N@Z

; 327  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, DWORD PTR __imp_?m_NullChar@StringClass@@0AADA
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl

; 328  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@H_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GGenericList@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGenericList@@UAEPAXI@Z PROC				; GenericList::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericList@@UAE@XZ			; GenericList::~GenericList
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGenericList@@UAEPAXI@Z ENDP				; GenericList::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add_Tail@GenericList@@QAEXPAVGenericNode@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_node$ = 8						; size = 4
?Add_Tail@GenericList@@QAEXPAVGenericNode@@@Z PROC	; GenericList::Add_Tail, COMDAT
; _this$ = ecx

; 1037 : 	void Add_Tail(GenericNode * node) {LastNode.Prev()->Link(node);}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Prev@GenericNode@@QBEPAV1@XZ		; GenericNode::Prev
	mov	ecx, eax
	call	?Link@GenericNode@@QAEXPAV1@@Z		; GenericNode::Link
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add_Tail@GenericList@@QAEXPAVGenericNode@@@Z ENDP	; GenericList::Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Is_Empty@GenericList@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@GenericList@@QBE_NXZ PROC			; GenericList::Is_Empty, COMDAT
; _this$ = ecx

; 1035 : 	bool Is_Empty(void) const {return(!FirstNode.Next()->Is_Valid());}

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Next@GenericNode@@QBEPAV1@XZ		; GenericNode::Next
	mov	ecx, eax
	call	?Is_Valid@GenericNode@@QBE_NXZ		; GenericNode::Is_Valid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@GenericList@@QBE_NXZ ENDP			; GenericList::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?First@GenericList@@QBEPAVGenericNode@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?First@GenericList@@QBEPAVGenericNode@@XZ PROC		; GenericList::First, COMDAT
; _this$ = ecx

; 1023 : 	GenericNode * First(void) const {return(FirstNode.Next());}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Next@GenericNode@@QBEPAV1@XZ		; GenericNode::Next
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?First@GenericList@@QBEPAVGenericNode@@XZ ENDP		; GenericList::First
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1GenericList@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GenericList@@UAE@XZ PROC				; GenericList::~GenericList, COMDAT
; _this$ = ecx

; 1017 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GenericList@@6B@
$LN2@GenericLis:

; 1018 : 		while (FirstNode.Next()->Is_Valid())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Next@GenericNode@@QBEPAV1@XZ		; GenericNode::Next
	mov	ecx, eax
	call	?Is_Valid@GenericNode@@QBE_NXZ		; GenericNode::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GenericLis

; 1019 : 		{
; 1020 : 			FirstNode.Next()->Unlink();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Next@GenericNode@@QBEPAV1@XZ		; GenericNode::Next
	mov	ecx, eax
	call	?Unlink@GenericNode@@QAEXXZ		; GenericNode::Unlink

; 1021 : 		}

	jmp	SHORT $LN2@GenericLis
$LN3@GenericLis:

; 1022 : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1GenericNode@@UAE@XZ			; GenericNode::~GenericNode
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1GenericNode@@UAE@XZ			; GenericNode::~GenericNode
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1GenericList@@UAE@XZ ENDP				; GenericList::~GenericList
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0GenericList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GenericList@@QAE@XZ PROC				; GenericList::GenericList, COMDAT
; _this$ = ecx

; 1012 : 	GenericList(void)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GenericList@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0GenericNode@@QAE@XZ			; GenericNode::GenericNode
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0GenericNode@@QAE@XZ			; GenericNode::GenericNode

; 1013 : 	{
; 1014 : 		FirstNode.Link(&LastNode);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Link@GenericNode@@QAEXPAV1@@Z		; GenericNode::Link

; 1015 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0GenericList@@QAE@XZ ENDP				; GenericList::GenericList
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GGenericNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGenericNode@@UAEPAXI@Z PROC				; GenericNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericNode@@UAE@XZ			; GenericNode::~GenericNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGenericNode@@UAEPAXI@Z ENDP				; GenericNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Is_Valid@GenericNode@@QBE_NXZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Valid@GenericNode@@QBE_NXZ PROC			; GenericNode::Is_Valid, COMDAT
; _this$ = ecx

; 1005 : 	bool Is_Valid(void) const {return(this != (GenericNode *)0 && NextNode != (GenericNode *)0 && PrevNode != (GenericNode *)0);}

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@Is_Valid
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Is_Valid
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN3@Is_Valid
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@Is_Valid
$LN3@Is_Valid:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Is_Valid:
	mov	al, BYTE PTR tv69[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid@GenericNode@@QBE_NXZ ENDP			; GenericNode::Is_Valid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Prev@GenericNode@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Prev@GenericNode@@QBEPAV1@XZ PROC			; GenericNode::Prev, COMDAT
; _this$ = ecx

; 1000 : 	GenericNode * Prev(void) const {return(PrevNode);}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Prev@GenericNode@@QBEPAV1@XZ ENDP			; GenericNode::Prev
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Next@GenericNode@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@GenericNode@@QBEPAV1@XZ PROC			; GenericNode::Next, COMDAT
; _this$ = ecx

; 995  : 	GenericNode * Next(void) const {return(NextNode);}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@GenericNode@@QBEPAV1@XZ ENDP			; GenericNode::Next
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Link@GenericNode@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_node$ = 8						; size = 4
?Link@GenericNode@@QAEXPAV1@@Z PROC			; GenericNode::Link, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Link:

; 988  : 		TT_ASSERT(node != (GenericNode *)0);

	xor	eax, eax
	jne	SHORT $LN4@Link
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN2@Link
	int	3
$LN2@Link:

; 989  : 		node->Unlink();

	mov	ecx, DWORD PTR _node$[ebp]
	call	?Unlink@GenericNode@@QAEXXZ		; GenericNode::Unlink

; 990  : 		node->NextNode = NextNode;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 991  : 		node->PrevNode = this;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 992  : 		if (NextNode) NextNode->PrevNode = node;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Link
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@Link:

; 993  : 		NextNode = node;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 994  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Link@GenericNode@@QAEXPAV1@@Z ENDP			; GenericNode::Link
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Unlink@GenericNode@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlink@GenericNode@@QAEXXZ PROC			; GenericNode::Unlink, COMDAT
; _this$ = ecx

; 968  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 969  : 		if (Is_Valid())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Valid@GenericNode@@QBE_NXZ		; GenericNode::Is_Valid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Unlink

; 970  : 		{
; 971  : 			PrevNode->NextNode = NextNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 972  : 			NextNode->PrevNode = PrevNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 973  : 			PrevNode = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 974  : 			NextNode = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@Unlink:

; 975  : 		}
; 976  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlink@GenericNode@@QAEXXZ ENDP			; GenericNode::Unlink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1GenericNode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GenericNode@@UAE@XZ PROC				; GenericNode::~GenericNode, COMDAT
; _this$ = ecx

; 957  : 	virtual ~GenericNode(void) {Unlink();}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GenericNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlink@GenericNode@@QAEXXZ		; GenericNode::Unlink
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1GenericNode@@UAE@XZ ENDP				; GenericNode::~GenericNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0GenericNode@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GenericNode@@QAE@XZ PROC				; GenericNode::GenericNode, COMDAT
; _this$ = ecx

; 956  : 	GenericNode(void) : NextNode(0), PrevNode(0) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GenericNode@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0GenericNode@@QAE@XZ ENDP				; GenericNode::GenericNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strrchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADPADH@Z PROC				; strrchr, COMDAT

; 222  : 	{ return (char*)strrchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?strrchr@@YAPADPADH@Z ENDP				; strrchr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 218  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__strchr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
