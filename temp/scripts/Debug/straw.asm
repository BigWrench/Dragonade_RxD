; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\straw.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	?Is_Running@ThreadClass@@QAE_NXZ		; ThreadClass::Is_Running
PUBLIC	?Get_Current_Thread_ID@ThreadClass@@SAHXZ	; ThreadClass::Get_Current_Thread_ID
PUBLIC	?Get_Name@ThreadClass@@QAEPBDXZ			; ThreadClass::Get_Name
PUBLIC	??0ThreadClass@@QAE@ABV0@@Z			; ThreadClass::ThreadClass
PUBLIC	??4ThreadClass@@QAEAAV0@ABV0@@Z			; ThreadClass::operator=
PUBLIC	??_GThreadClass@@UAEPAXI@Z			; ThreadClass::`scalar deleting destructor'
PUBLIC	??_EThreadClass@@UAEPAXI@Z			; ThreadClass::`vector deleting destructor'
PUBLIC	??4CriticalSectionClass@@QAEAAV0@ABV0@@Z	; CriticalSectionClass::operator=
PUBLIC	??4ChunkLoadClass@@QAEAAV0@ABV0@@Z		; ChunkLoadClass::operator=
PUBLIC	?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ	; ChunkSaveClass::Set_Contains_Chunks
PUBLIC	??4ChunkSaveClass@@QAEAAV0@ABV0@@Z		; ChunkSaveClass::operator=
PUBLIC	?Is_Present@INIClass@@QBE_NPBD0@Z		; INIClass::Is_Present
PUBLIC	?Section_Present@INIClass@@QBE_NPBD@Z		; INIClass::Section_Present
PUBLIC	?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ; INIClass::Get_Section_List
PUBLIC	?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ; INIClass::Get_Section_Index
PUBLIC	?Get_File_Name@INIClass@@QAEPBDXZ		; INIClass::Get_File_Name
PUBLIC	??0INIClass@@QAE@ABV0@@Z			; INIClass::INIClass
PUBLIC	??4INIClass@@QAEAAV0@ABV0@@Z			; INIClass::operator=
PUBLIC	??_GINIClass@@UAEPAXI@Z				; INIClass::`scalar deleting destructor'
PUBLIC	??_EINIClass@@UAEPAXI@Z				; INIClass::`vector deleting destructor'
PUBLIC	??Cfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator->
PUBLIC	??Bfile_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::operator FileClass *
PUBLIC	??Dfile_auto_ptr@@QAEAAVFileClass@@XZ		; file_auto_ptr::operator*
PUBLIC	?get@file_auto_ptr@@QAEPAVFileClass@@XZ		; file_auto_ptr::get
PUBLIC	??4file_auto_ptr@@QAEAAV0@ABV0@@Z		; file_auto_ptr::operator=
PUBLIC	??0Straw@@QAE@XZ				; Straw::Straw
PUBLIC	??1Straw@@UAE@XZ				; Straw::~Straw
PUBLIC	?Get_From@Straw@@UAEXPAV1@@Z			; Straw::Get_From
PUBLIC	?Get@Straw@@UAEHPAXH@Z				; Straw::Get
PUBLIC	??0Straw@@QAE@ABV0@@Z				; Straw::Straw
PUBLIC	??4Straw@@QAEAAV0@ABV0@@Z			; Straw::operator=
PUBLIC	??_GStraw@@UAEPAXI@Z				; Straw::`scalar deleting destructor'
PUBLIC	??_EStraw@@UAEPAXI@Z				; Straw::`vector deleting destructor'
PUBLIC	??0Buffer@@QAE@PAXJ@Z				; Buffer::Buffer
PUBLIC	??0Buffer@@QAE@J@Z				; Buffer::Buffer
PUBLIC	?Get_Buffer@Buffer@@QAEPAXXZ			; Buffer::Get_Buffer
PUBLIC	?Get_Size@Buffer@@QAEJXZ			; Buffer::Get_Size
PUBLIC	??1Buffer@@QAE@XZ				; Buffer::~Buffer
PUBLIC	??4Buffer@@QAEAAV0@ABV0@@Z			; Buffer::operator=
PUBLIC	??0BufferStraw@@QAE@PAXH@Z			; BufferStraw::BufferStraw
PUBLIC	??1BufferStraw@@UAE@XZ				; BufferStraw::~BufferStraw
PUBLIC	?Get@BufferStraw@@UAEHPAXH@Z			; BufferStraw::Get
PUBLIC	??0BufferStraw@@QAE@ABV0@@Z			; BufferStraw::BufferStraw
PUBLIC	??4BufferStraw@@QAEAAV0@ABV0@@Z			; BufferStraw::operator=
PUBLIC	??_GBufferStraw@@UAEPAXI@Z			; BufferStraw::`scalar deleting destructor'
PUBLIC	??_EBufferStraw@@UAEPAXI@Z			; BufferStraw::`vector deleting destructor'
PUBLIC	??0FileStraw@@QAE@AAVFileClass@@@Z		; FileStraw::FileStraw
PUBLIC	??1FileStraw@@UAE@XZ				; FileStraw::~FileStraw
PUBLIC	?Get@FileStraw@@UAEHPAXH@Z			; FileStraw::Get
PUBLIC	??0FileStraw@@QAE@ABV0@@Z			; FileStraw::FileStraw
PUBLIC	??4FileStraw@@QAEAAV0@ABV0@@Z			; FileStraw::operator=
PUBLIC	??_GFileStraw@@UAEPAXI@Z			; FileStraw::`scalar deleting destructor'
PUBLIC	??_EFileStraw@@UAEPAXI@Z			; FileStraw::`vector deleting destructor'
PUBLIC	??0CacheStraw@@QAE@H@Z				; CacheStraw::CacheStraw
PUBLIC	?Is_Valid@CacheStraw@@QAE_NXZ			; CacheStraw::Is_Valid
PUBLIC	??1CacheStraw@@UAE@XZ				; CacheStraw::~CacheStraw
PUBLIC	?Get@CacheStraw@@UAEHPAXH@Z			; CacheStraw::Get
PUBLIC	??0CacheStraw@@QAE@ABV0@@Z			; CacheStraw::CacheStraw
PUBLIC	??4CacheStraw@@QAEAAV0@ABV0@@Z			; CacheStraw::operator=
PUBLIC	??_GCacheStraw@@UAEPAXI@Z			; CacheStraw::`scalar deleting destructor'
PUBLIC	??_ECacheStraw@@UAEPAXI@Z			; CacheStraw::`vector deleting destructor'
PUBLIC	??0Pipe@@QAE@XZ					; Pipe::Pipe
PUBLIC	??1Pipe@@UAE@XZ					; Pipe::~Pipe
PUBLIC	?Flush@Pipe@@UAEHXZ				; Pipe::Flush
PUBLIC	?End@Pipe@@UAEHXZ				; Pipe::End
PUBLIC	?Put_To@Pipe@@UAEXPAV1@@Z			; Pipe::Put_To
PUBLIC	?Put@Pipe@@UAEHPBXH@Z				; Pipe::Put
PUBLIC	??0Pipe@@QAE@ABV0@@Z				; Pipe::Pipe
PUBLIC	??4Pipe@@QAEAAV0@ABV0@@Z			; Pipe::operator=
PUBLIC	??_GPipe@@UAEPAXI@Z				; Pipe::`scalar deleting destructor'
PUBLIC	??_EPipe@@UAEPAXI@Z				; Pipe::`vector deleting destructor'
PUBLIC	??_7ThreadClass@@6B@				; ThreadClass::`vftable'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_7INIClass@@6B@				; INIClass::`vftable'
PUBLIC	??_7Straw@@6B@					; Straw::`vftable'
PUBLIC	??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@		; `string'
PUBLIC	??_C@_0DB@KAPDHD@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GC@DMMDNGMD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_7BufferStraw@@6B@				; BufferStraw::`vftable'
PUBLIC	??_7FileStraw@@6B@				; FileStraw::`vftable'
PUBLIC	??_7CacheStraw@@6B@				; CacheStraw::`vftable'
PUBLIC	??_7Pipe@@6B@					; Pipe::`vftable'
PUBLIC	?__LINE__Var@?1???0Buffer@@QAE@PAXJ@Z@4JA	; `Buffer::Buffer'::`2'::__LINE__Var
PUBLIC	??_C@_0DD@IMGJBPJE@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GG@BPDDEBGL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?1???1Buffer@@QAE@XZ@4JA		; `Buffer::~Buffer'::`2'::__LINE__Var
PUBLIC	??_C@_0BA@ONLCCJJC@Buffer?3?3?$HOBuffer?$AA@	; `string'
PUBLIC	??_R4ThreadClass@@6B@				; ThreadClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreadClass@@@8				; ThreadClass `RTTI Type Descriptor'
PUBLIC	??_R3ThreadClass@@8				; ThreadClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreadClass@@8				; ThreadClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreadClass@@8			; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Straw@@6B@					; Straw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStraw@@@8				; Straw `RTTI Type Descriptor'
PUBLIC	??_R3Straw@@8					; Straw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Straw@@8					; Straw::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Straw@@8				; Straw::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Pipe@@6B@					; Pipe::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPipe@@@8				; Pipe `RTTI Type Descriptor'
PUBLIC	??_R3Pipe@@8					; Pipe::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Pipe@@8					; Pipe::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Pipe@@8				; Pipe::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4INIClass@@6B@				; INIClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVINIClass@@@8				; INIClass `RTTI Type Descriptor'
PUBLIC	??_R3INIClass@@8				; INIClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INIClass@@8				; INIClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INIClass@@8			; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BufferStraw@@6B@				; BufferStraw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBufferStraw@@@8				; BufferStraw `RTTI Type Descriptor'
PUBLIC	??_R3BufferStraw@@8				; BufferStraw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BufferStraw@@8				; BufferStraw::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BufferStraw@@8			; BufferStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FileStraw@@6B@				; FileStraw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStraw@@@8				; FileStraw `RTTI Type Descriptor'
PUBLIC	??_R3FileStraw@@8				; FileStraw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStraw@@8				; FileStraw::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStraw@@8			; FileStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CacheStraw@@6B@				; CacheStraw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCacheStraw@@@8				; CacheStraw `RTTI Type Descriptor'
PUBLIC	??_R3CacheStraw@@8				; CacheStraw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CacheStraw@@8				; CacheStraw::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CacheStraw@@8			; CacheStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp___wassert:PROC
EXTRN	__imp__memmove:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	??1ThreadClass@@UAE@XZ:PROC			; ThreadClass::~ThreadClass
EXTRN	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z:PROC ; INIClass::Find_Entry
EXTRN	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z:PROC ; INIClass::Find_Section
EXTRN	??1INIClass@@UAE@XZ:PROC			; INIClass::~INIClass
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CacheStraw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CacheStraw@@8 DD FLAT:??_R0?AVCacheStraw@@@8 ; CacheStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CacheStraw@@8
rdata$r	ENDS
;	COMDAT ??_R2CacheStraw@@8
rdata$r	SEGMENT
??_R2CacheStraw@@8 DD FLAT:??_R1A@?0A@EA@CacheStraw@@8	; CacheStraw::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Straw@@8
rdata$r	ENDS
;	COMDAT ??_R3CacheStraw@@8
rdata$r	SEGMENT
??_R3CacheStraw@@8 DD 00H				; CacheStraw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CacheStraw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCacheStraw@@@8
_DATA	SEGMENT
??_R0?AVCacheStraw@@@8 DD FLAT:??_7type_info@@6B@	; CacheStraw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCacheStraw@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CacheStraw@@6B@
rdata$r	SEGMENT
??_R4CacheStraw@@6B@ DD 00H				; CacheStraw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCacheStraw@@@8
	DD	FLAT:??_R3CacheStraw@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FileStraw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStraw@@8 DD FLAT:??_R0?AVFileStraw@@@8 ; FileStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStraw@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStraw@@8
rdata$r	SEGMENT
??_R2FileStraw@@8 DD FLAT:??_R1A@?0A@EA@FileStraw@@8	; FileStraw::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Straw@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStraw@@8
rdata$r	SEGMENT
??_R3FileStraw@@8 DD 00H				; FileStraw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStraw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStraw@@@8
_DATA	SEGMENT
??_R0?AVFileStraw@@@8 DD FLAT:??_7type_info@@6B@	; FileStraw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStraw@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStraw@@6B@
rdata$r	SEGMENT
??_R4FileStraw@@6B@ DD 00H				; FileStraw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStraw@@@8
	DD	FLAT:??_R3FileStraw@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BufferStraw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BufferStraw@@8 DD FLAT:??_R0?AVBufferStraw@@@8 ; BufferStraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BufferStraw@@8
rdata$r	ENDS
;	COMDAT ??_R2BufferStraw@@8
rdata$r	SEGMENT
??_R2BufferStraw@@8 DD FLAT:??_R1A@?0A@EA@BufferStraw@@8 ; BufferStraw::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Straw@@8
rdata$r	ENDS
;	COMDAT ??_R3BufferStraw@@8
rdata$r	SEGMENT
??_R3BufferStraw@@8 DD 00H				; BufferStraw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BufferStraw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBufferStraw@@@8
_DATA	SEGMENT
??_R0?AVBufferStraw@@@8 DD FLAT:??_7type_info@@6B@	; BufferStraw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBufferStraw@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BufferStraw@@6B@
rdata$r	SEGMENT
??_R4BufferStraw@@6B@ DD 00H				; BufferStraw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBufferStraw@@@8
	DD	FLAT:??_R3BufferStraw@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@INIClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INIClass@@8 DD FLAT:??_R0?AVINIClass@@@8	; INIClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R2INIClass@@8
rdata$r	SEGMENT
??_R2INIClass@@8 DD FLAT:??_R1A@?0A@EA@INIClass@@8	; INIClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INIClass@@8
rdata$r	SEGMENT
??_R3INIClass@@8 DD 00H					; INIClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVINIClass@@@8
_DATA	SEGMENT
??_R0?AVINIClass@@@8 DD FLAT:??_7type_info@@6B@		; INIClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVINIClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4INIClass@@6B@
rdata$r	SEGMENT
??_R4INIClass@@6B@ DD 00H				; INIClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVINIClass@@@8
	DD	FLAT:??_R3INIClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Pipe@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Pipe@@8 DD FLAT:??_R0?AVPipe@@@8		; Pipe::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Pipe@@8
rdata$r	ENDS
;	COMDAT ??_R2Pipe@@8
rdata$r	SEGMENT
??_R2Pipe@@8 DD	FLAT:??_R1A@?0A@EA@Pipe@@8		; Pipe::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Pipe@@8
rdata$r	SEGMENT
??_R3Pipe@@8 DD	00H					; Pipe::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Pipe@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPipe@@@8
_DATA	SEGMENT
??_R0?AVPipe@@@8 DD FLAT:??_7type_info@@6B@		; Pipe `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPipe@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Pipe@@6B@
rdata$r	SEGMENT
??_R4Pipe@@6B@ DD 00H					; Pipe::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPipe@@@8
	DD	FLAT:??_R3Pipe@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Straw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Straw@@8 DD FLAT:??_R0?AVStraw@@@8	; Straw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Straw@@8
rdata$r	ENDS
;	COMDAT ??_R2Straw@@8
rdata$r	SEGMENT
??_R2Straw@@8 DD FLAT:??_R1A@?0A@EA@Straw@@8		; Straw::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Straw@@8
rdata$r	SEGMENT
??_R3Straw@@8 DD 00H					; Straw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Straw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStraw@@@8
_DATA	SEGMENT
??_R0?AVStraw@@@8 DD FLAT:??_7type_info@@6B@		; Straw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStraw@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Straw@@6B@
rdata$r	SEGMENT
??_R4Straw@@6B@ DD 00H					; Straw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStraw@@@8
	DD	FLAT:??_R3Straw@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreadClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreadClass@@8 DD FLAT:??_R0?AVThreadClass@@@8 ; ThreadClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreadClass@@8
rdata$r	SEGMENT
??_R2ThreadClass@@8 DD FLAT:??_R1A@?0A@EA@ThreadClass@@8 ; ThreadClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ThreadClass@@8
rdata$r	SEGMENT
??_R3ThreadClass@@8 DD 00H				; ThreadClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreadClass@@@8
_DATA	SEGMENT
??_R0?AVThreadClass@@@8 DD FLAT:??_7type_info@@6B@	; ThreadClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreadClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreadClass@@6B@
rdata$r	SEGMENT
??_R4ThreadClass@@6B@ DD 00H				; ThreadClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreadClass@@@8
	DD	FLAT:??_R3ThreadClass@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@ONLCCJJC@Buffer?3?3?$HOBuffer?$AA@
CONST	SEGMENT
??_C@_0BA@ONLCCJJC@Buffer?3?3?$HOBuffer?$AA@ DB 'Buffer::~Buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???1Buffer@@QAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1???1Buffer@@QAE@XZ@4JA DD 04dH		; `Buffer::~Buffer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GG@BPDDEBGL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GG@BPDDEBGL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'w', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IMGJBPJE@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DD@IMGJBPJE@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\straw.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???0Buffer@@QAE@PAXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1???0Buffer@@QAE@PAXJ@Z@4JA DD 041H	; `Buffer::Buffer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7Pipe@@6B@
CONST	SEGMENT
??_7Pipe@@6B@ DD FLAT:??_R4Pipe@@6B@			; Pipe::`vftable'
	DD	FLAT:??_EPipe@@UAEPAXI@Z
	DD	FLAT:?Flush@Pipe@@UAEHXZ
	DD	FLAT:?End@Pipe@@UAEHXZ
	DD	FLAT:?Put_To@Pipe@@UAEXPAV1@@Z
	DD	FLAT:?Put@Pipe@@UAEHPBXH@Z
CONST	ENDS
;	COMDAT ??_7CacheStraw@@6B@
CONST	SEGMENT
??_7CacheStraw@@6B@ DD FLAT:??_R4CacheStraw@@6B@	; CacheStraw::`vftable'
	DD	FLAT:??_ECacheStraw@@UAEPAXI@Z
	DD	FLAT:?Get_From@Straw@@UAEXPAV1@@Z
	DD	FLAT:?Get@CacheStraw@@UAEHPAXH@Z
CONST	ENDS
;	COMDAT ??_7FileStraw@@6B@
CONST	SEGMENT
??_7FileStraw@@6B@ DD FLAT:??_R4FileStraw@@6B@		; FileStraw::`vftable'
	DD	FLAT:??_EFileStraw@@UAEPAXI@Z
	DD	FLAT:?Get_From@Straw@@UAEXPAV1@@Z
	DD	FLAT:?Get@FileStraw@@UAEHPAXH@Z
CONST	ENDS
;	COMDAT ??_7BufferStraw@@6B@
CONST	SEGMENT
??_7BufferStraw@@6B@ DD FLAT:??_R4BufferStraw@@6B@	; BufferStraw::`vftable'
	DD	FLAT:??_EBufferStraw@@UAEPAXI@Z
	DD	FLAT:?Get_From@Straw@@UAEXPAV1@@Z
	DD	FLAT:?Get@BufferStraw@@UAEHPAXH@Z
CONST	ENDS
;	COMDAT ??_C@_1GC@DMMDNGMD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GC@DMMDNGMD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'w', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KAPDHD@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DB@KAPDHD@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\rene'
	DB	'gade\dragonade_rxd\scripts\straw.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@
CONST	SEGMENT
??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@ DB 'Buffer::Buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7Straw@@6B@
CONST	SEGMENT
??_7Straw@@6B@ DD FLAT:??_R4Straw@@6B@			; Straw::`vftable'
	DD	FLAT:??_EStraw@@UAEPAXI@Z
	DD	FLAT:?Get_From@Straw@@UAEXPAV1@@Z
	DD	FLAT:?Get@Straw@@UAEHPAXH@Z
CONST	ENDS
;	COMDAT ??_7INIClass@@6B@
CONST	SEGMENT
??_7INIClass@@6B@ DD FLAT:??_R4INIClass@@6B@		; INIClass::`vftable'
	DD	FLAT:??_EINIClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7ThreadClass@@6B@
CONST	SEGMENT
??_7ThreadClass@@6B@ DD FLAT:??_R4ThreadClass@@6B@	; ThreadClass::`vftable'
	DD	FLAT:??_EThreadClass@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EPipe@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EPipe@@UAEPAXI@Z PROC				; Pipe::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1Pipe@@UAE@XZ			; Pipe::~Pipe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Pipe@@UAE@XZ				; Pipe::~Pipe
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EPipe@@UAEPAXI@Z ENDP				; Pipe::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPipe@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPipe@@UAEPAXI@Z PROC				; Pipe::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Pipe@@UAE@XZ				; Pipe::~Pipe
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPipe@@UAEPAXI@Z ENDP				; Pipe::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4Pipe@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Pipe@@QAEAAV0@ABV0@@Z PROC				; Pipe::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Pipe@@QAEAAV0@ABV0@@Z ENDP				; Pipe::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Pipe@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Pipe@@QAE@ABV0@@Z PROC				; Pipe::Pipe, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Pipe@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Pipe@@QAE@ABV0@@Z ENDP				; Pipe::Pipe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Put@Pipe@@UAEHPBXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_source$ = 8						; size = 4
_length$ = 12						; size = 4
?Put@Pipe@@UAEHPBXH@Z PROC				; Pipe::Put, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Put

; 184  : 		{
; 185  : 			return ChainTo->Put(source,length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	SHORT $LN2@Put
$LN1@Put:

; 186  : 		}
; 187  : 		return length;

	mov	eax, DWORD PTR _length$[ebp]
$LN2@Put:

; 188  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Put@Pipe@@UAEHPBXH@Z ENDP				; Pipe::Put
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Put_To@Pipe@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pipe$ = 8						; size = 4
?Put_To@Pipe@@UAEXPAV1@@Z PROC				; Pipe::Put_To, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (ChainTo != pipe)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _pipe$[ebp]
	je	SHORT $LN5@Put_To

; 163  : 		{
; 164  : 			if (pipe && pipe->ChainFrom)

	cmp	DWORD PTR _pipe$[ebp], 0
	je	SHORT $LN3@Put_To
	mov	eax, DWORD PTR _pipe$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Put_To

; 165  : 			{
; 166  : 				pipe->ChainFrom->Put_To(0);

	push	0
	mov	eax, DWORD PTR _pipe$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pipe$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 167  : 				pipe->ChainFrom = 0;

	mov	eax, DWORD PTR _pipe$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@Put_To:

; 168  : 			}
; 169  : 			if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Put_To

; 170  : 			{
; 171  : 				ChainTo->ChainFrom = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], 0

; 172  : 				ChainTo->Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN2@Put_To:

; 173  : 			}
; 174  : 			ChainTo = pipe;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pipe$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 175  : 			if (pipe)

	cmp	DWORD PTR _pipe$[ebp], 0
	je	SHORT $LN5@Put_To

; 176  : 			{
; 177  : 				pipe->ChainFrom = this;

	mov	eax, DWORD PTR _pipe$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN5@Put_To:

; 178  : 			}
; 179  : 		}
; 180  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Put_To@Pipe@@UAEXPAV1@@Z ENDP				; Pipe::Put_To
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?End@Pipe@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?End@Pipe@@UAEHXZ PROC					; Pipe::End, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		return Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 159  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?End@Pipe@@UAEHXZ ENDP					; Pipe::End
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Flush@Pipe@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flush@Pipe@@UAEHXZ PROC				; Pipe::Flush, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Flush

; 148  : 		{
; 149  : 			return ChainTo->Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	jmp	SHORT $LN3@Flush

; 150  : 		}
; 151  : 		else

	jmp	SHORT $LN3@Flush
$LN2@Flush:

; 152  : 		{
; 153  : 			return 0;

	xor	eax, eax
$LN3@Flush:

; 154  : 		}
; 155  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Flush@Pipe@@UAEHXZ ENDP				; Pipe::Flush
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??1Pipe@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Pipe@@UAE@XZ PROC					; Pipe::~Pipe, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Pipe@@6B@

; 134  : 		if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Pipe

; 135  : 		{
; 136  : 			ChainTo->ChainFrom = ChainFrom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
$LN2@Pipe:

; 137  : 		}
; 138  : 		if (ChainFrom)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Pipe

; 139  : 		{
; 140  : 			ChainFrom->Put_To(ChainTo);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Pipe:

; 141  : 		}
; 142  : 		ChainFrom = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 143  : 		ChainTo = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 144  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Pipe@@UAE@XZ ENDP					; Pipe::~Pipe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??0Pipe@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Pipe@@QAE@XZ PROC					; Pipe::Pipe, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Pipe@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 131  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Pipe@@QAE@XZ ENDP					; Pipe::Pipe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECacheStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECacheStraw@@UAEPAXI@Z PROC				; CacheStraw::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CacheStraw@@UAE@XZ		; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECacheStraw@@UAEPAXI@Z ENDP				; CacheStraw::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCacheStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCacheStraw@@UAEPAXI@Z PROC				; CacheStraw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CacheStraw@@UAE@XZ			; CacheStraw::~CacheStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCacheStraw@@UAEPAXI@Z ENDP				; CacheStraw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CacheStraw@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CacheStraw@@QAEAAV0@ABV0@@Z PROC			; CacheStraw::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Straw@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CacheStraw@@QAEAAV0@ABV0@@Z ENDP			; CacheStraw::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CacheStraw@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CacheStraw@@QAE@ABV0@@Z PROC				; CacheStraw::CacheStraw, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CacheStraw@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CacheStraw@@QAE@ABV0@@Z ENDP				; CacheStraw::CacheStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Get@CacheStraw@@UAEHPAXH@Z
_TEXT	SEGMENT
tv71 = -96						; size = 4
tv69 = -96						; size = 4
_sz$1 = -28						; size = 4
_i$2 = -24						; size = 4
_len2$ = -20						; size = 4
_ret$ = -16						; size = 4
_len$ = -12						; size = 4
_src$ = -8						; size = 4
_this$ = -4						; size = 4
_source$ = 8						; size = 4
_slen$ = 12						; size = 4
?Get@CacheStraw@@UAEHPAXH@Z PROC			; CacheStraw::Get, COMDAT
; _this$ = ecx

; 87   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		char *src = (char *)source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _src$[ebp], eax

; 89   : 		int len = slen;

	mov	eax, DWORD PTR _slen$[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 90   : 		int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 91   : 		int len2;
; 92   : 		if (BufferPtr.Get_Buffer())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	test	eax, eax
	je	$LN7@Get

; 93   : 		{
; 94   : 			for (int i = source == 0;!i && len > 0;i = len2 == 0)

	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN10@Get
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN11@Get
$LN10@Get:
	mov	DWORD PTR tv69[ebp], 0
$LN11@Get:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN6@Get
$LN5@Get:
	cmp	DWORD PTR _len2$[ebp], 0
	jne	SHORT $LN12@Get
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN13@Get
$LN12@Get:
	mov	DWORD PTR tv71[ebp], 0
$LN13@Get:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _i$2[ebp], eax
$LN6@Get:
	cmp	DWORD PTR _i$2[ebp], 0
	jne	$LN7@Get
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN7@Get

; 95   : 			{
; 96   : 				if (Length > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jle	SHORT $LN3@Get

; 97   : 				{
; 98   : 					int sz = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _sz$1[ebp], eax

; 99   : 					if (len > this->Length)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jle	SHORT $LN2@Get

; 100  : 					{
; 101  : 						sz = Length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _sz$1[ebp], ecx
$LN2@Get:

; 102  : 					}
; 103  : 					memmove(src,(char *)BufferPtr.Get_Buffer() + Index,sz);

	mov	eax, DWORD PTR _sz$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	push	eax
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 104  : 					len -= sz;

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _sz$1[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 105  : 					Index += sz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _sz$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 106  : 					ret += sz;

	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _sz$1[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 107  : 					Length -= sz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR _sz$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 108  : 					src += sz;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _sz$1[ebp]
	mov	DWORD PTR _src$[ebp], eax
$LN3@Get:

; 109  : 				}
; 110  : 				if (!len)

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN1@Get

; 111  : 				{
; 112  : 					break;

	jmp	SHORT $LN7@Get
$LN1@Get:

; 113  : 				}
; 114  : 				len2 = Straw::Get(BufferPtr.Get_Buffer(),BufferPtr.Get_Size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Size@Buffer@@QAEJXZ		; Buffer::Get_Size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get@Straw@@UAEHPAXH@Z			; Straw::Get
	mov	DWORD PTR _len2$[ebp], eax

; 115  : 				Length = len2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len2$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 116  : 				Index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 117  : 			}

	jmp	$LN5@Get
$LN7@Get:

; 118  : 		}
; 119  : 		return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get@CacheStraw@@UAEHPAXH@Z ENDP			; CacheStraw::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??1CacheStraw@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CacheStraw@@UAE@XZ PROC				; CacheStraw::~CacheStraw, COMDAT
; _this$ = ecx

; 85   : 	~CacheStraw() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CacheStraw@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1Buffer@@QAE@XZ			; Buffer::~Buffer
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Straw@@UAE@XZ			; Straw::~Straw
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CacheStraw@@UAE@XZ ENDP				; CacheStraw::~CacheStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Is_Valid@CacheStraw@@QAE_NXZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Valid@CacheStraw@@QAE_NXZ PROC			; CacheStraw::Is_Valid, COMDAT
; _this$ = ecx

; 82   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 		return BufferPtr.Get_Buffer() != 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	test	eax, eax
	je	SHORT $LN3@Is_Valid
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Is_Valid
$LN3@Is_Valid:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Is_Valid:
	mov	al, BYTE PTR tv68[ebp]

; 84   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Valid@CacheStraw@@QAE_NXZ ENDP			; CacheStraw::Is_Valid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??0CacheStraw@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0CacheStraw@@QAE@H@Z PROC				; CacheStraw::CacheStraw, COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@XZ			; Straw::Straw
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CacheStraw@@6B@
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Buffer@@QAE@J@Z			; Buffer::Buffer
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 80   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CacheStraw@@QAE@H@Z ENDP				; CacheStraw::CacheStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EFileStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStraw@@UAEPAXI@Z PROC				; FileStraw::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1FileStraw@@UAE@XZ		; FileStraw::~FileStraw
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStraw@@UAE@XZ			; FileStraw::~FileStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStraw@@UAEPAXI@Z ENDP				; FileStraw::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GFileStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStraw@@UAEPAXI@Z PROC				; FileStraw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStraw@@UAE@XZ			; FileStraw::~FileStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStraw@@UAEPAXI@Z ENDP				; FileStraw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4FileStraw@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStraw@@QAEAAV0@ABV0@@Z PROC			; FileStraw::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Straw@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+16]
	mov	BYTE PTR [eax+16], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStraw@@QAEAAV0@ABV0@@Z ENDP			; FileStraw::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0FileStraw@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0FileStraw@@QAE@ABV0@@Z PROC				; FileStraw::FileStraw, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileStraw@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+16]
	mov	BYTE PTR [eax+16], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0FileStraw@@QAE@ABV0@@Z ENDP				; FileStraw::FileStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ?Get@FileStraw@@UAEHPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_source$ = 8						; size = 4
_slen$ = 12						; size = 4
?Get@FileStraw@@UAEHPAXH@Z PROC				; FileStraw::Get, COMDAT
; _this$ = ecx

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 	if (File && source && slen)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN5@Get
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN5@Get
	cmp	DWORD PTR _slen$[ebp], 0
	je	SHORT $LN5@Get

; 141  : 	{
; 142  : 		if (!File->Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@Get

; 143  : 		{
; 144  : 			HasOpened = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1

; 145  : 			if (!File->Is_Available() || !File->Open())

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Get
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	test	eax, eax
	jne	SHORT $LN4@Get
$LN2@Get:

; 146  : 			{
; 147  : 				return 0;

	xor	eax, eax
	jmp	SHORT $LN6@Get
$LN4@Get:

; 148  : 			}
; 149  : 		}
; 150  : 		return File->Read(source,slen);

	mov	eax, DWORD PTR _slen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	jmp	SHORT $LN6@Get

; 151  : 	}
; 152  : 	else

	jmp	SHORT $LN6@Get
$LN5@Get:

; 153  : 	{
; 154  : 		return 0;

	xor	eax, eax
$LN6@Get:

; 155  : 	}
; 156  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get@FileStraw@@UAEHPAXH@Z ENDP				; FileStraw::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ??1FileStraw@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FileStraw@@UAE@XZ PROC				; FileStraw::~FileStraw, COMDAT
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileStraw@@6B@

; 127  : 	if (File)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@FileStraw

; 128  : 	{
; 129  : 		if (HasOpened)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN3@FileStraw

; 130  : 		{
; 131  : 			File->Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 132  : 			HasOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 133  : 			File = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN3@FileStraw:

; 134  : 		}
; 135  : 	}
; 136  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Straw@@UAE@XZ			; Straw::~Straw
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1FileStraw@@UAE@XZ ENDP				; FileStraw::~FileStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ??0FileStraw@@QAE@AAVFileClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
??0FileStraw@@QAE@AAVFileClass@@@Z PROC			; FileStraw::FileStraw, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@XZ			; Straw::Straw
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileStraw@@6B@

; 121  : 	File = &f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 122  : 	HasOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 123  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0FileStraw@@QAE@AAVFileClass@@@Z ENDP			; FileStraw::FileStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EBufferStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBufferStraw@@UAEPAXI@Z PROC				; BufferStraw::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BufferStraw@@UAE@XZ		; BufferStraw::~BufferStraw
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BufferStraw@@UAE@XZ			; BufferStraw::~BufferStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBufferStraw@@UAEPAXI@Z ENDP				; BufferStraw::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GBufferStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBufferStraw@@UAEPAXI@Z PROC				; BufferStraw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BufferStraw@@UAE@XZ			; BufferStraw::~BufferStraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBufferStraw@@UAEPAXI@Z ENDP				; BufferStraw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4BufferStraw@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BufferStraw@@QAEAAV0@ABV0@@Z PROC			; BufferStraw::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Straw@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4BufferStraw@@QAEAAV0@ABV0@@Z ENDP			; BufferStraw::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0BufferStraw@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BufferStraw@@QAE@ABV0@@Z PROC			; BufferStraw::BufferStraw, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BufferStraw@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0BufferStraw@@QAE@ABV0@@Z ENDP			; BufferStraw::BufferStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ?Get@BufferStraw@@UAEHPAXH@Z
_TEXT	SEGMENT
_sz$ = -12						; size = 4
_bsz$ = -8						; size = 4
_this$ = -4						; size = 4
_source$ = 8						; size = 4
_slen$ = 12						; size = 4
?Get@BufferStraw@@UAEHPAXH@Z PROC			; BufferStraw::Get, COMDAT
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	if ((!BufferPtr.Get_Buffer()) || (!source) || (slen <= 0))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	test	eax, eax
	je	SHORT $LN4@Get
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN4@Get
	cmp	DWORD PTR _slen$[ebp], 0
	jg	SHORT $LN5@Get
$LN4@Get:

; 98   : 	{
; 99   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN6@Get
$LN5@Get:

; 100  : 	}
; 101  : 	int bsz = BufferPtr.Get_Size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Size@Buffer@@QAEJXZ		; Buffer::Get_Size
	mov	DWORD PTR _bsz$[ebp], eax

; 102  : 	int sz = slen;

	mov	eax, DWORD PTR _slen$[ebp]
	mov	DWORD PTR _sz$[ebp], eax

; 103  : 	if (bsz)

	cmp	DWORD PTR _bsz$[ebp], 0
	je	SHORT $LN3@Get

; 104  : 	{
; 105  : 		bsz -= Index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bsz$[ebp]
	sub	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _bsz$[ebp], ecx

; 106  : 		if (slen > bsz)

	mov	eax, DWORD PTR _slen$[ebp]
	cmp	eax, DWORD PTR _bsz$[ebp]
	jle	SHORT $LN3@Get

; 107  : 		{
; 108  : 			sz = bsz;

	mov	eax, DWORD PTR _bsz$[ebp]
	mov	DWORD PTR _sz$[ebp], eax
$LN3@Get:

; 109  : 		}
; 110  : 	}
; 111  : 	if (sz)

	cmp	DWORD PTR _sz$[ebp], 0
	je	SHORT $LN1@Get

; 112  : 	{
; 113  : 		memmove(source,((char *)BufferPtr.Get_Buffer())+Index,sz);

	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@Buffer@@QAEPAXXZ		; Buffer::Get_Buffer
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	push	eax
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN1@Get:

; 114  : 	}
; 115  : 	Index += sz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _sz$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 116  : 	return sz;

	mov	eax, DWORD PTR _sz$[ebp]
$LN6@Get:

; 117  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get@BufferStraw@@UAEHPAXH@Z ENDP			; BufferStraw::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ??1BufferStraw@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BufferStraw@@UAE@XZ PROC				; BufferStraw::~BufferStraw, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BufferStraw@@6B@

; 93   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1Buffer@@QAE@XZ			; Buffer::~Buffer
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Straw@@UAE@XZ			; Straw::~Straw
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1BufferStraw@@UAE@XZ ENDP				; BufferStraw::~BufferStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ??0BufferStraw@@QAE@PAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
??0BufferStraw@@QAE@PAXH@Z PROC				; BufferStraw::BufferStraw, COMDAT
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Straw@@QAE@XZ			; Straw::Straw
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BufferStraw@@6B@
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Buffer@@QAE@PAXJ@Z			; Buffer::Buffer
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 89   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0BufferStraw@@QAE@PAXH@Z ENDP				; BufferStraw::BufferStraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4Buffer@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Buffer@@QAEAAV0@ABV0@@Z PROC				; Buffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Buffer@@QAEAAV0@ABV0@@Z ENDP				; Buffer::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ??1Buffer@@QAE@XZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
??1Buffer@@QAE@XZ PROC					; Buffer::~Buffer, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 	if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN1@Buffer

; 79   : 	{
; 80   : 		delete[] BufferPtr;

	push	OFFSET ??_C@_0BA@ONLCCJJC@Buffer?3?3?$HOBuffer?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1???1Buffer@@QAE@XZ@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DD@IMGJBPJE@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN5@Buffer
	xor	edx, edx
	jne	SHORT $LN4@Buffer
	mov	eax, DWORD PTR ?__LINE__Var@?1???1Buffer@@QAE@XZ@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GG@BPDDEBGL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Buffer:
	jmp	SHORT $LN1@Buffer
$LN5@Buffer:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Buffer:

; 81   : 	}
; 82   : 	BufferPtr = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 83   : 	Size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 84   : 	IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0

; 85   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Buffer@@QAE@XZ ENDP					; Buffer::~Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Get_Size@Buffer@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Size@Buffer@@QAEJXZ PROC				; Buffer::Get_Size, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return Size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Size@Buffer@@QAEJXZ ENDP				; Buffer::Get_Size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ?Get_Buffer@Buffer@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Buffer@Buffer@@QAEPAXXZ PROC			; Buffer::Get_Buffer, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 		return BufferPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Buffer@Buffer@@QAEPAXXZ ENDP			; Buffer::Get_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.h
;	COMDAT ??0Buffer@@QAE@J@Z
_TEXT	SEGMENT
tv80 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0Buffer@@QAE@J@Z PROC					; Buffer::Buffer, COMDAT
; _this$ = ecx

; 33   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0

; 34   : 		if (size > 0)

	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN2@Buffer

; 35   : 		{
; 36   : 			BufferPtr = new char[size];

	push	OFFSET ??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@
	push	36					; 00000024H
	push	OFFSET ??_C@_0DB@KAPDHD@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN5@Buffer
	xor	ecx, ecx
	jne	SHORT $LN4@Buffer
	push	36					; 00000024H
	push	OFFSET ??_C@_1GC@DMMDNGMD@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Buffer:
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN6@Buffer
$LN5@Buffer:
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv80[ebp], ecx
$LN6@Buffer:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR [edx], eax

; 37   : 			IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 1
$LN2@Buffer:

; 38   : 		}
; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Buffer@@QAE@J@Z ENDP					; Buffer::Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ??0Buffer@@QAE@PAXJ@Z
_TEXT	SEGMENT
tv83 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
??0Buffer@@QAE@PAXJ@Z PROC				; Buffer::Buffer, COMDAT
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 	BufferPtr = buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax], ecx

; 67   : 	Size = size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 68   : 	IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0

; 69   : 	if ((!buffer) && (size > 0))

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@Buffer
	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN2@Buffer

; 70   : 	{
; 71   : 		BufferPtr = new char[size];

	push	OFFSET ??_C@_0P@OCJIINDO@Buffer?3?3Buffer?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1???0Buffer@@QAE@PAXJ@Z@4JA
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_0DD@IMGJBPJE@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN5@Buffer
	xor	edx, edx
	jne	SHORT $LN4@Buffer
	mov	eax, DWORD PTR ?__LINE__Var@?1???0Buffer@@QAE@PAXJ@Z@4JA
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GG@BPDDEBGL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@Buffer:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN6@Buffer
$LN5@Buffer:
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN6@Buffer:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR [ecx], edx

; 72   : 		IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 1
$LN2@Buffer:

; 73   : 	}
; 74   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0Buffer@@QAE@PAXJ@Z ENDP				; Buffer::Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EStraw@@UAEPAXI@Z PROC				; Straw::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1Straw@@UAE@XZ			; Straw::~Straw
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Straw@@UAE@XZ			; Straw::~Straw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EStraw@@UAEPAXI@Z ENDP				; Straw::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GStraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GStraw@@UAEPAXI@Z PROC				; Straw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Straw@@UAE@XZ			; Straw::~Straw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GStraw@@UAEPAXI@Z ENDP				; Straw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4Straw@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Straw@@QAEAAV0@ABV0@@Z PROC				; Straw::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Straw@@QAEAAV0@ABV0@@Z ENDP				; Straw::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Straw@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Straw@@QAE@ABV0@@Z PROC				; Straw::Straw, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Straw@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Straw@@QAE@ABV0@@Z ENDP				; Straw::Straw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ?Get@Straw@@UAEHPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_source$ = 8						; size = 4
_slen$ = 12						; size = 4
?Get@Straw@@UAEHPAXH@Z PROC				; Straw::Get, COMDAT
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 	if (!ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Get

; 58   : 	{
; 59   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Get
$LN1@Get:

; 60   : 	}
; 61   : 	return ChainTo->Get(source,slen);

	mov	eax, DWORD PTR _slen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Get:

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get@Straw@@UAEHPAXH@Z ENDP				; Straw::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ?Get_From@Straw@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_straw$ = 8						; size = 4
?Get_From@Straw@@UAEXPAV1@@Z PROC			; Straw::Get_From, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	if (ChainTo != straw)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _straw$[ebp]
	je	SHORT $LN5@Get_From

; 37   : 	{
; 38   : 		if ((straw) && (ChainFrom))

	cmp	DWORD PTR _straw$[ebp], 0
	je	SHORT $LN3@Get_From
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Get_From

; 39   : 		{
; 40   : 			ChainFrom->Get_From(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 41   : 			ChainFrom = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@Get_From:

; 42   : 		}
; 43   : 		if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Get_From

; 44   : 		{
; 45   : 			ChainFrom = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN2@Get_From:

; 46   : 		}
; 47   : 		ChainTo = straw;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _straw$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 48   : 		if (straw)

	cmp	DWORD PTR _straw$[ebp], 0
	je	SHORT $LN5@Get_From

; 49   : 		{
; 50   : 			straw->ChainFrom = this;

	mov	eax, DWORD PTR _straw$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN5@Get_From:

; 51   : 		}
; 52   : 	}
; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_From@Straw@@UAEXPAV1@@Z ENDP			; Straw::Get_From
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ??1Straw@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Straw@@UAE@XZ PROC					; Straw::~Straw, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Straw@@6B@

; 22   : 	if (ChainTo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Straw

; 23   : 	{
; 24   : 		ChainTo->ChainFrom = ChainFrom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
$LN2@Straw:

; 25   : 	}
; 26   : 	if (ChainFrom)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Straw

; 27   : 	{
; 28   : 		ChainFrom->Get_From(ChainFrom);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN1@Straw:

; 29   : 	}
; 30   : 	ChainTo = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 31   : 	ChainFrom = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Straw@@UAE@XZ ENDP					; Straw::~Straw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\straw.cpp
;	COMDAT ??0Straw@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Straw@@QAE@XZ PROC					; Straw::Straw, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Straw@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 18   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Straw@@QAE@XZ ENDP					; Straw::Straw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4file_auto_ptr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z PROC			; file_auto_ptr::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4file_auto_ptr@@QAEAAV0@ABV0@@Z ENDP			; file_auto_ptr::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?get@file_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@file_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::get, COMDAT
; _this$ = ecx

; 202  : 	FileClass* get() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get@file_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Dfile_auto_ptr@@QAEAAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ PROC		; file_auto_ptr::operator*, COMDAT
; _this$ = ecx

; 201  : 	FileClass& operator*() { return *_Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Dfile_auto_ptr@@QAEAAVFileClass@@XZ ENDP		; file_auto_ptr::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Bfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator FileClass *, COMDAT
; _this$ = ecx

; 200  : 	operator FileClass *() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator FileClass *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??Cfile_auto_ptr@@QAEPAVFileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ PROC		; file_auto_ptr::operator->, COMDAT
; _this$ = ecx

; 199  : 	FileClass* operator ->() { return _Ptr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Cfile_auto_ptr@@QAEPAVFileClass@@XZ ENDP		; file_auto_ptr::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EINIClass@@UAEPAXI@Z PROC				; INIClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1INIClass@@UAE@XZ		; INIClass::~INIClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EINIClass@@UAEPAXI@Z ENDP				; INIClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GINIClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GINIClass@@UAEPAXI@Z PROC				; INIClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1INIClass@@UAE@XZ			; INIClass::~INIClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GINIClass@@UAEPAXI@Z ENDP				; INIClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4INIClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4INIClass@@QAEAAV0@ABV0@@Z PROC			; INIClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4INIClass@@QAEAAV0@ABV0@@Z ENDP			; INIClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0INIClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0INIClass@@QAE@ABV0@@Z PROC				; INIClass::INIClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7INIClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0INIClass@@QAE@ABV0@@Z ENDP				; INIClass::INIClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Name@INIClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Name@INIClass@@QAEPBDXZ PROC			; INIClass::Get_File_Name, COMDAT
; _this$ = ecx

; 183  : 	const char *Get_File_Name() { //DA

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 		return Filename;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Name@INIClass@@QAEPBDXZ ENDP			; INIClass::Get_File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ PROC ; INIClass::Get_Section_Index, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		return *SectionIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 182  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_Index@INIClass@@QAEAAV?$IndexClass@HPAUINISection@@@@XZ ENDP ; INIClass::Get_Section_Index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ PROC ; INIClass::Get_Section_List, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return *SectionList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Section_List@INIClass@@QAEAAV?$List@PAUINISection@@@@XZ ENDP ; INIClass::Get_Section_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Section_Present@INIClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
?Section_Present@INIClass@@QBE_NPBD@Z PROC		; INIClass::Section_Present, COMDAT
; _this$ = ecx

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 		return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN3@Section_Pr
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Section_Pr
$LN3@Section_Pr:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Section_Pr:
	mov	al, BYTE PTR tv68[ebp]

; 174  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Section_Present@INIClass@@QBE_NPBD@Z ENDP		; INIClass::Section_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Is_Present@INIClass@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_section$ = 8						; size = 4
_entry$ = 12						; size = 4
?Is_Present@INIClass@@QBE_NPBD0@Z PROC			; INIClass::Is_Present, COMDAT
; _this$ = ecx

; 161  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@Is_Present

; 163  : 		{
; 164  : 			return Find_Entry(section,entry) != 0;

	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _section$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Entry@INIClass@@QBEPAUINIEntry@@PBD0@Z ; INIClass::Find_Entry
	test	eax, eax
	je	SHORT $LN5@Is_Present
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@Is_Present
$LN5@Is_Present:
	mov	DWORD PTR tv70[ebp], 0
$LN6@Is_Present:
	mov	al, BYTE PTR tv70[ebp]
	jmp	SHORT $LN3@Is_Present

; 165  : 		}
; 166  : 		else

	jmp	SHORT $LN3@Is_Present
$LN2@Is_Present:

; 167  : 		{
; 168  : 			return Find_Section(section) != 0;

	mov	eax, DWORD PTR _section$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find_Section@INIClass@@QBEPAUINISection@@PBD@Z ; INIClass::Find_Section
	test	eax, eax
	je	SHORT $LN7@Is_Present
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN8@Is_Present
$LN7@Is_Present:
	mov	DWORD PTR tv76[ebp], 0
$LN8@Is_Present:
	mov	al, BYTE PTR tv76[ebp]
$LN3@Is_Present:

; 169  : 		}
; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Is_Present@INIClass@@QBE_NPBD0@Z ENDP			; INIClass::Is_Present
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkSaveClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z PROC			; ChunkSaveClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkSaveClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkSaveClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ PROC	; ChunkSaveClass::Set_Contains_Chunks, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		HeaderStack[StackIndex-1].ChunkSize |= 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*8+1028], eax

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set_Contains_Chunks@ChunkSaveClass@@QAEXXZ ENDP	; ChunkSaveClass::Set_Contains_Chunks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ChunkLoadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z PROC			; ChunkLoadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 773				; 00000305H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ChunkLoadClass@@QAEAAV0@ABV0@@Z ENDP			; ChunkLoadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CriticalSectionClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z PROC		; CriticalSectionClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CriticalSectionClass@@QAEAAV0@ABV0@@Z ENDP		; CriticalSectionClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1ThreadClass@@UAE@XZ		; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GThreadClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GThreadClass@@UAEPAXI@Z PROC				; ThreadClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ThreadClass@@UAE@XZ			; ThreadClass::~ThreadClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GThreadClass@@UAEPAXI@Z ENDP				; ThreadClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4ThreadClass@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ThreadClass@@QAEAAV0@ABV0@@Z PROC			; ThreadClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _$S1$1[ebp], 67		; 00000043H
	jae	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$1[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+5], dl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ThreadClass@@QAEAAV0@ABV0@@Z ENDP			; ThreadClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ThreadClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ThreadClass@@QAE@ABV0@@Z PROC			; ThreadClass::ThreadClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreadClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 5
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 5
	mov	ecx, 16					; 00000010H
	rep movsd
	movsw
	movsb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ThreadClass@@QAE@ABV0@@Z ENDP			; ThreadClass::ThreadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Name@ThreadClass@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@ThreadClass@@QAEPBDXZ PROC			; ThreadClass::Get_Name, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 5

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@ThreadClass@@QAEPBDXZ ENDP			; ThreadClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Get_Current_Thread_ID@ThreadClass@@SAHXZ
_TEXT	SEGMENT
?Get_Current_Thread_ID@ThreadClass@@SAHXZ PROC		; ThreadClass::Get_Current_Thread_ID, COMDAT

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 42   : 		return GetCurrentThreadId();

	call	DWORD PTR __imp__GetCurrentThreadId@0

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Thread_ID@ThreadClass@@SAHXZ ENDP		; ThreadClass::Get_Current_Thread_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\threadclass.h
;	COMDAT ?Is_Running@ThreadClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Running@ThreadClass@@QAE_NXZ PROC			; ThreadClass::Is_Running, COMDAT
; _this$ = ecx

; 37   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return handle != 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Is_Running
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Running
$LN3@Is_Running:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Running:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Running@ThreadClass@@QAE_NXZ ENDP			; ThreadClass::Is_Running
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
END
