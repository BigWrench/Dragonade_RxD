; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\ChunkClasses.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??AStringClass@@QAEAADH@Z			; StringClass::operator[]
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Get_Buffer@StringClass@@QAEPADH@Z		; StringClass::Get_Buffer
PUBLIC	?Peek_Buffer@StringClass@@QBEPBDXZ		; StringClass::Peek_Buffer
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??0ChunkLoadClass@@QAE@PAVFileClass@@@Z		; ChunkLoadClass::ChunkLoadClass
PUBLIC	?Open_Chunk@ChunkLoadClass@@QAE_NXZ		; ChunkLoadClass::Open_Chunk
PUBLIC	?Peek_Next_Chunk@ChunkLoadClass@@QAE_NPAI0@Z	; ChunkLoadClass::Peek_Next_Chunk
PUBLIC	?Close_Chunk@ChunkLoadClass@@QAE_NXZ		; ChunkLoadClass::Close_Chunk
PUBLIC	?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ		; ChunkLoadClass::Cur_Chunk_ID
PUBLIC	?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ	; ChunkLoadClass::Cur_Chunk_Length
PUBLIC	?Cur_Chunk_Depth@ChunkLoadClass@@QAEHXZ		; ChunkLoadClass::Cur_Chunk_Depth
PUBLIC	?Contains_Chunks@ChunkLoadClass@@QAEHXZ		; ChunkLoadClass::Contains_Chunks
PUBLIC	?Open_Micro_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Open_Micro_Chunk
PUBLIC	?Close_Micro_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Close_Micro_Chunk
PUBLIC	?Cur_Micro_Chunk_ID@ChunkLoadClass@@QAEKXZ	; ChunkLoadClass::Cur_Micro_Chunk_ID
PUBLIC	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ	; ChunkLoadClass::Cur_Micro_Chunk_Length
PUBLIC	?Seek@ChunkLoadClass@@QAEJK@Z			; ChunkLoadClass::Seek
PUBLIC	?Read@ChunkLoadClass@@QAEJPAXK@Z		; ChunkLoadClass::Read
PUBLIC	?Read@ChunkLoadClass@@QAEJPAUIOVector2Struct@@@Z ; ChunkLoadClass::Read
PUBLIC	?Read@ChunkLoadClass@@QAEJPAUIOVector3Struct@@@Z ; ChunkLoadClass::Read
PUBLIC	?Read@ChunkLoadClass@@QAEJPAUIOVector4Struct@@@Z ; ChunkLoadClass::Read
PUBLIC	?Read@ChunkLoadClass@@QAEJPAUIOQuaternionStruct@@@Z ; ChunkLoadClass::Read
PUBLIC	?Read@ChunkLoadClass@@QAEJAAVStringClass@@@Z	; ChunkLoadClass::Read
PUBLIC	??0ChunkSaveClass@@QAE@PAVFileClass@@@Z		; ChunkSaveClass::ChunkSaveClass
PUBLIC	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z		; ChunkSaveClass::Begin_Chunk
PUBLIC	?End_Chunk@ChunkSaveClass@@QAE_NXZ		; ChunkSaveClass::End_Chunk
PUBLIC	?Cur_Chunk_Depth@ChunkSaveClass@@QAEHXZ		; ChunkSaveClass::Cur_Chunk_Depth
PUBLIC	?Cur_Chunk_Length@ChunkSaveClass@@QAEIXZ	; ChunkSaveClass::Cur_Chunk_Length
PUBLIC	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Micro_Chunk
PUBLIC	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Micro_Chunk
PUBLIC	?Write@ChunkSaveClass@@QAEKPAXK@Z		; ChunkSaveClass::Write
PUBLIC	?Write@ChunkSaveClass@@QAEKAAUIOVector2Struct@@@Z ; ChunkSaveClass::Write
PUBLIC	?Write@ChunkSaveClass@@QAEKAAUIOVector3Struct@@@Z ; ChunkSaveClass::Write
PUBLIC	?Write@ChunkSaveClass@@QAEKAAUIOVector4Struct@@@Z ; ChunkSaveClass::Write
PUBLIC	?Write@ChunkSaveClass@@QAEKAAUIOQuaternionStruct@@@Z ; ChunkSaveClass::Write
PUBLIC	?Write@ChunkSaveClass@@QAEKABVStringClass@@@Z	; ChunkSaveClass::Write
PUBLIC	??$SimpleRead@G@ChunkLoadClass@@QAEJAAG@Z	; ChunkLoadClass::SimpleRead<unsigned short>
PUBLIC	??$SimpleWrite@G@ChunkSaveClass@@QAEJABG@Z	; ChunkSaveClass::SimpleWrite<unsigned short>
EXTRN	?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC	; StringClass::Uninitialised_Grow
EXTRN	_memset:PROC
EXTRN	?m_EmptyString@StringClass@@0AAPADA:DWORD	; StringClass::m_EmptyString
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ??$SimpleWrite@G@ChunkSaveClass@@QAEJABG@Z
_TEXT	SEGMENT
_length$ = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
??$SimpleWrite@G@ChunkSaveClass@@QAEJABG@Z PROC		; ChunkSaveClass::SimpleWrite<unsigned short>, COMDAT
; _this$ = ecx

; 120  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		int length = Write((void*)&buf, sizeof(T));

	push	2
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	DWORD PTR _length$[ebp], eax
$LN3@SimpleWrit:

; 122  : 		TT_ASSERT(length == sizeof(T))

	xor	eax, eax
	jne	SHORT $LN3@SimpleWrit
	cmp	DWORD PTR _length$[ebp], 2
	je	SHORT $LN1@SimpleWrit
	int	3
$LN1@SimpleWrit:

; 123  : 		return length;

	mov	eax, DWORD PTR _length$[ebp]

; 124  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$SimpleWrite@G@ChunkSaveClass@@QAEJABG@Z ENDP		; ChunkSaveClass::SimpleWrite<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclass.h
;	COMDAT ??$SimpleRead@G@ChunkLoadClass@@QAEJAAG@Z
_TEXT	SEGMENT
_length$ = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
??$SimpleRead@G@ChunkLoadClass@@QAEJAAG@Z PROC		; ChunkLoadClass::SimpleRead<unsigned short>, COMDAT
; _this$ = ecx

; 84   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 		int length = Read(&buf, sizeof(T));

	push	2
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	mov	DWORD PTR _length$[ebp], eax
$LN3@SimpleRead:

; 86   : 		TT_ASSERT(length == sizeof(T))

	xor	eax, eax
	jne	SHORT $LN3@SimpleRead
	cmp	DWORD PTR _length$[ebp], 2
	je	SHORT $LN1@SimpleRead
	int	3
$LN1@SimpleRead:

; 87   : 		return length;

	mov	eax, DWORD PTR _length$[ebp]

; 88   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$SimpleRead@G@ChunkLoadClass@@QAEJAAG@Z ENDP		; ChunkLoadClass::SimpleRead<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Write@ChunkSaveClass@@QAEKABVStringClass@@@Z
_TEXT	SEGMENT
_result$ = -12						; size = 4
_length$ = -8						; size = 2
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?Write@ChunkSaveClass@@QAEKABVStringClass@@@Z PROC	; ChunkSaveClass::Write, COMDAT
; _this$ = ecx

; 345  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 	uint16 length = (uint16)string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	WORD PTR _length$[ebp], ax

; 347  : 	int result = SimpleWrite(length);

	lea	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$SimpleWrite@G@ChunkSaveClass@@QAEJABG@Z ; ChunkSaveClass::SimpleWrite<unsigned short>
	mov	DWORD PTR _result$[ebp], eax

; 348  : 	result += Write((char*)string.Peek_Buffer(), length);

	movzx	eax, WORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Peek_Buffer@StringClass@@QBEPBDXZ	; StringClass::Peek_Buffer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN3@Write:

; 349  : 	TT_ASSERT(result == (int)sizeof(uint16) + (int)length);

	xor	eax, eax
	jne	SHORT $LN3@Write
	movzx	eax, WORD PTR _length$[ebp]
	add	eax, 2
	cmp	DWORD PTR _result$[ebp], eax
	je	SHORT $LN1@Write
	int	3
$LN1@Write:

; 350  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 351  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Write@ChunkSaveClass@@QAEKABVStringClass@@@Z ENDP	; ChunkSaveClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Write@ChunkSaveClass@@QAEKAAUIOQuaternionStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?Write@ChunkSaveClass@@QAEKAAUIOQuaternionStruct@@@Z PROC ; ChunkSaveClass::Write, COMDAT
; _this$ = ecx

; 340  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 341  : 	return Write(&q,sizeof(IOQuaternionStruct));

	push	16					; 00000010H
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write

; 342  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Write@ChunkSaveClass@@QAEKAAUIOQuaternionStruct@@@Z ENDP ; ChunkSaveClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Write@ChunkSaveClass@@QAEKAAUIOVector4Struct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?Write@ChunkSaveClass@@QAEKAAUIOVector4Struct@@@Z PROC	; ChunkSaveClass::Write, COMDAT
; _this$ = ecx

; 335  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 336  : 	return Write(&v,sizeof(IOVector4Struct));

	push	16					; 00000010H
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write

; 337  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Write@ChunkSaveClass@@QAEKAAUIOVector4Struct@@@Z ENDP	; ChunkSaveClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Write@ChunkSaveClass@@QAEKAAUIOVector3Struct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?Write@ChunkSaveClass@@QAEKAAUIOVector3Struct@@@Z PROC	; ChunkSaveClass::Write, COMDAT
; _this$ = ecx

; 330  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 	return Write(&v,sizeof(IOVector3Struct));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write

; 332  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Write@ChunkSaveClass@@QAEKAAUIOVector3Struct@@@Z ENDP	; ChunkSaveClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Write@ChunkSaveClass@@QAEKAAUIOVector2Struct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?Write@ChunkSaveClass@@QAEKAAUIOVector2Struct@@@Z PROC	; ChunkSaveClass::Write, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 	return Write(&v,sizeof(IOVector2Struct));

	push	8
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write

; 327  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Write@ChunkSaveClass@@QAEKAAUIOVector2Struct@@@Z ENDP	; ChunkSaveClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Write@ChunkSaveClass@@QAEKPAXK@Z
_TEXT	SEGMENT
_temp$1 = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
_nbytes$ = 12						; size = 4
?Write@ChunkSaveClass@@QAEKPAXK@Z PROC			; ChunkSaveClass::Write, COMDAT
; _this$ = ecx

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Write:

; 306  : 	TT_ASSERT(File->Is_Open());

	xor	eax, eax
	jne	SHORT $LN6@Write
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@Write
	int	3
$LN4@Write:

; 307  : 	if (File->Write(buf,nbytes) == (int)nbytes)

	mov	eax, DWORD PTR _nbytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	eax, DWORD PTR _nbytes$[ebp]
	jne	SHORT $LN3@Write

; 308  : 	{
; 309  : 		int temp = (HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF) + nbytes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	and	eax, 2147483647				; 7fffffffH
	add	eax, DWORD PTR _nbytes$[ebp]
	mov	DWORD PTR _temp$1[ebp], eax

; 310  : 		if (HeaderStack[StackIndex-1].ChunkSize & 0x80000000)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	and	eax, -2147483648			; 80000000H
	je	SHORT $LN2@Write

; 311  : 		{
; 312  : 			temp |= 0x80000000;

	mov	eax, DWORD PTR _temp$1[ebp]
	or	eax, -2147483648			; 80000000H
	mov	DWORD PTR _temp$1[ebp], eax
$LN2@Write:

; 313  : 		}
; 314  : 		HeaderStack[StackIndex-1].ChunkSize = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR [edx+ecx*8+1028], eax

; 315  : 		if (InMicroChunk)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3080]
	test	ecx, ecx
	je	SHORT $LN1@Write

; 316  : 		{
; 317  : 			MCHeader.ChunkSize = MCHeader.ChunkSize + (unsigned char)nbytes;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3089]
	movzx	edx, BYTE PTR _nbytes$[ebp]
	add	ecx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3089], cl
$LN1@Write:

; 318  : 		}
; 319  : 		return nbytes;

	mov	eax, DWORD PTR _nbytes$[ebp]
	jmp	SHORT $LN8@Write
$LN3@Write:

; 320  : 	}
; 321  : 	return 0;

	xor	eax, eax
$LN8@Write:

; 322  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Write@ChunkSaveClass@@QAEKPAXK@Z ENDP			; ChunkSaveClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ PROC		; ChunkSaveClass::End_Micro_Chunk, COMDAT
; _this$ = ecx

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN4@End_Micro_:

; 292  : 	TT_ASSERT(InMicroChunk);

	xor	eax, eax
	jne	SHORT $LN4@End_Micro_
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3080]
	test	ecx, ecx
	jne	SHORT $LN2@End_Micro_
	int	3
$LN2@End_Micro_:

; 293  : 	int temp = File->Seek(0,1);

	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	mov	DWORD PTR _temp$[ebp], eax

; 294  : 	File->Seek(MicroChunkPosition,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3084]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 295  : 	if (File->Write(&MCHeader,sizeof(MCHeader)) == sizeof(MCHeader))

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	eax, 2
	jne	SHORT $LN1@End_Micro_

; 296  : 	{
; 297  : 		File->Seek(temp,0);

	push	0
	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 298  : 		InMicroChunk = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3080], 0

; 299  : 		return true;

	mov	al, 1
	jmp	SHORT $LN6@End_Micro_
$LN1@End_Micro_:

; 300  : 	}
; 301  : 	return false;

	xor	al, al
$LN6@End_Micro_:

; 302  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ ENDP		; ChunkSaveClass::End_Micro_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z PROC	; ChunkSaveClass::Begin_Micro_Chunk, COMDAT
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 	MCHeader.ChunkType = (unsigned char)id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _id$[ebp]
	mov	BYTE PTR [eax+3088], cl

; 280  : 	MicroChunkPosition = File->Seek(0,1);

	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3084], eax

; 281  : 	MCHeader.ChunkSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3089], 0

; 282  : 	if (Write(&MCHeader,sizeof(MCHeader)) == sizeof(MCHeader))

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	cmp	eax, 2
	jne	SHORT $LN1@Begin_Micr

; 283  : 	{
; 284  : 		InMicroChunk = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3080], 1

; 285  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@Begin_Micr
$LN1@Begin_Micr:

; 286  : 	}
; 287  : 	return false;

	xor	al, al
$LN2@Begin_Micr:

; 288  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z ENDP	; ChunkSaveClass::Begin_Micro_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Cur_Chunk_Length@ChunkSaveClass@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cur_Chunk_Length@ChunkSaveClass@@QAEIXZ PROC		; ChunkSaveClass::Cur_Chunk_Length, COMDAT
; _this$ = ecx

; 273  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 274  :     return HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	and	eax, 2147483647				; 7fffffffH

; 275  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cur_Chunk_Length@ChunkSaveClass@@QAEIXZ ENDP		; ChunkSaveClass::Cur_Chunk_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Cur_Chunk_Depth@ChunkSaveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cur_Chunk_Depth@ChunkSaveClass@@QAEHXZ PROC		; ChunkSaveClass::Cur_Chunk_Depth, COMDAT
; _this$ = ecx

; 268  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 269  : 	return StackIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 270  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cur_Chunk_Depth@ChunkSaveClass@@QAEHXZ ENDP		; ChunkSaveClass::Cur_Chunk_Depth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?End_Chunk@ChunkSaveClass@@QAE_NXZ
_TEXT	SEGMENT
_temp2$1 = -20						; size = 4
_temp$ = -16						; size = 4
_chunkh$ = -12						; size = 8
_this$ = -4						; size = 4
?End_Chunk@ChunkSaveClass@@QAE_NXZ PROC			; ChunkSaveClass::End_Chunk, COMDAT
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 	ChunkHeader chunkh;
; 245  : 	int temp = File->Seek(0,1);

	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	mov	DWORD PTR _temp$[ebp], eax

; 246  : 	StackIndex--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 247  : 	chunkh.ChunkType = HeaderStack[StackIndex].ChunkType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1032]
	mov	DWORD PTR _chunkh$[ebp], eax

; 248  : 	chunkh.ChunkSize = HeaderStack[StackIndex].ChunkSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1036]
	mov	DWORD PTR _chunkh$[ebp+4], eax

; 249  : 	File->Seek(PositionStack[StackIndex],0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 250  : 	if (File->Write(&chunkh,8) == 8)

	push	8
	lea	eax, DWORD PTR _chunkh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	eax, 8
	jne	$LN3@End_Chunk

; 251  : 	{
; 252  : 		if ((StackIndex) && (StackIndex < 256))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@End_Chunk
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 256			; 00000100H
	jge	SHORT $LN2@End_Chunk

; 253  : 		{
; 254  : 			int temp2 = (HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF) + (chunkh.ChunkSize & 0x7FFFFFFF) + 8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	and	eax, 2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _chunkh$[ebp+4]
	and	ecx, 2147483647				; 7fffffffH
	lea	edx, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR _temp2$1[ebp], edx

; 255  : 			if (HeaderStack[StackIndex-1].ChunkSize & 0x80000000)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	and	eax, -2147483648			; 80000000H
	je	SHORT $LN1@End_Chunk

; 256  : 			{
; 257  : 				temp2 |= 0x80000000;

	mov	eax, DWORD PTR _temp2$1[ebp]
	or	eax, -2147483648			; 80000000H
	mov	DWORD PTR _temp2$1[ebp], eax
$LN1@End_Chunk:

; 258  : 			}
; 259  : 			HeaderStack[StackIndex-1].ChunkSize = temp2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _temp2$1[ebp]
	mov	DWORD PTR [edx+ecx*8+1028], eax
$LN2@End_Chunk:

; 260  : 		}
; 261  : 		File->Seek(temp,0);

	push	0
	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 262  : 		return true;

	mov	al, 1
	jmp	SHORT $LN4@End_Chunk
$LN3@End_Chunk:

; 263  : 	}
; 264  : 	return false;

	xor	al, al
$LN4@End_Chunk:

; 265  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?End_Chunk@ChunkSaveClass@@QAE_NXZ ENDP			; ChunkSaveClass::End_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z
_TEXT	SEGMENT
_chunkh$ = -12						; size = 8
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z PROC		; ChunkSaveClass::Begin_Chunk, COMDAT
; _this$ = ecx

; 221  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 222  : 	ChunkHeader chunkh;
; 223  : 	chunkh.ChunkSize = 0;

	mov	DWORD PTR _chunkh$[ebp+4], 0

; 224  : 	chunkh.ChunkType = 0;

	mov	DWORD PTR _chunkh$[ebp], 0

; 225  : 	if (StackIndex > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN2@Begin_Chun

; 226  : 	{
; 227  : 		HeaderStack[StackIndex-1].ChunkSize |= 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*8+1028], eax
$LN2@Begin_Chun:

; 228  : 	}
; 229  : 	chunkh.ChunkType = id;

	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR _chunkh$[ebp], eax

; 230  : 	chunkh.ChunkSize &= 0x80000000;

	mov	eax, DWORD PTR _chunkh$[ebp+4]
	and	eax, -2147483648			; 80000000H
	mov	DWORD PTR _chunkh$[ebp+4], eax

; 231  : 	PositionStack[StackIndex] = File->Seek(0,1);

	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+8], eax

; 232  : 	HeaderStack[StackIndex].ChunkType = chunkh.ChunkType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _chunkh$[ebp]
	mov	DWORD PTR [edx+ecx*8+1032], eax

; 233  : 	HeaderStack[StackIndex].ChunkSize = chunkh.ChunkSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _chunkh$[ebp+4]
	mov	DWORD PTR [edx+ecx*8+1036], eax

; 234  : 	StackIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 235  : 	if (File->Write(&chunkh,8) == 8)

	push	8
	lea	eax, DWORD PTR _chunkh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	eax, 8
	jne	SHORT $LN1@Begin_Chun

; 236  : 	{
; 237  : 		return true;

	mov	al, 1
	jmp	SHORT $LN3@Begin_Chun
$LN1@Begin_Chun:

; 238  : 	}
; 239  : 	return false;

	xor	al, al
$LN3@Begin_Chun:

; 240  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z ENDP		; ChunkSaveClass::Begin_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ??0ChunkSaveClass@@QAE@PAVFileClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
??0ChunkSaveClass@@QAE@PAVFileClass@@@Z PROC		; ChunkSaveClass::ChunkSaveClass, COMDAT
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	File = file;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _file$[ebp]
	mov	DWORD PTR [eax], ecx

; 212  : 	StackIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 213  : 	memset(HeaderStack,0,sizeof(HeaderStack));

	push	2048					; 00000800H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1032				; 00000408H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 214  : 	memset(PositionStack,0,sizeof(PositionStack));

	push	1024					; 00000400H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 215  : 	InMicroChunk = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3080], 0

; 216  : 	MicroChunkPosition = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3084], 0

; 217  : 	MCHeader.ChunkType = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3088], 0

; 218  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ChunkSaveClass@@QAE@PAVFileClass@@@Z ENDP		; ChunkSaveClass::ChunkSaveClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Read@ChunkLoadClass@@QAEJAAVStringClass@@@Z
_TEXT	SEGMENT
_result$ = -12						; size = 4
_length$ = -8						; size = 2
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?Read@ChunkLoadClass@@QAEJAAVStringClass@@@Z PROC	; ChunkLoadClass::Read, COMDAT
; _this$ = ecx

; 200  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 201  : 	uint16 length;
; 202  : 	int result = SimpleRead(length);

	lea	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$SimpleRead@G@ChunkLoadClass@@QAEJAAG@Z ; ChunkLoadClass::SimpleRead<unsigned short>
	mov	DWORD PTR _result$[ebp], eax

; 203  : 	result += Read(string.Get_Buffer(length+1), length);

	movzx	eax, WORD PTR _length$[ebp]
	push	eax
	movzx	ecx, WORD PTR _length$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Buffer@StringClass@@QAEPADH@Z	; StringClass::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 204  : 	string[length] = '\0';

	movzx	eax, WORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	??AStringClass@@QAEAADH@Z		; StringClass::operator[]
	mov	BYTE PTR [eax], 0
$LN3@Read:

; 205  : 	TT_ASSERT(result == (int)sizeof(uint16) + (int)length);

	xor	eax, eax
	jne	SHORT $LN3@Read
	movzx	eax, WORD PTR _length$[ebp]
	add	eax, 2
	cmp	DWORD PTR _result$[ebp], eax
	je	SHORT $LN1@Read
	int	3
$LN1@Read:

; 206  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 207  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Read@ChunkLoadClass@@QAEJAAVStringClass@@@Z ENDP	; ChunkLoadClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Read@ChunkLoadClass@@QAEJPAUIOQuaternionStruct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?Read@ChunkLoadClass@@QAEJPAUIOQuaternionStruct@@@Z PROC ; ChunkLoadClass::Read, COMDAT
; _this$ = ecx

; 195  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 196  : 	return Read(q,sizeof(IOQuaternionStruct));

	push	16					; 00000010H
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read

; 197  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Read@ChunkLoadClass@@QAEJPAUIOQuaternionStruct@@@Z ENDP ; ChunkLoadClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Read@ChunkLoadClass@@QAEJPAUIOVector4Struct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?Read@ChunkLoadClass@@QAEJPAUIOVector4Struct@@@Z PROC	; ChunkLoadClass::Read, COMDAT
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	return Read(v,sizeof(IOVector4Struct));

	push	16					; 00000010H
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Read@ChunkLoadClass@@QAEJPAUIOVector4Struct@@@Z ENDP	; ChunkLoadClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Read@ChunkLoadClass@@QAEJPAUIOVector3Struct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?Read@ChunkLoadClass@@QAEJPAUIOVector3Struct@@@Z PROC	; ChunkLoadClass::Read, COMDAT
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	return Read(v,sizeof(IOVector3Struct));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read

; 187  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Read@ChunkLoadClass@@QAEJPAUIOVector3Struct@@@Z ENDP	; ChunkLoadClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Read@ChunkLoadClass@@QAEJPAUIOVector2Struct@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?Read@ChunkLoadClass@@QAEJPAUIOVector2Struct@@@Z PROC	; ChunkLoadClass::Read, COMDAT
; _this$ = ecx

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 	return Read(v,sizeof(IOVector2Struct));

	push	8
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read

; 182  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Read@ChunkLoadClass@@QAEJPAUIOVector2Struct@@@Z ENDP	; ChunkLoadClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Read@ChunkLoadClass@@QAEJPAXK@Z
_TEXT	SEGMENT
_read$1 = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
_nbytes$ = 12						; size = 4
?Read@ChunkLoadClass@@QAEJPAXK@Z PROC			; ChunkLoadClass::Read, COMDAT
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN8@Read:

; 159  : 	TT_ASSERT(File->Is_Open());

	xor	eax, eax
	jne	SHORT $LN8@Read
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@Read
	int	3
$LN6@Read:

; 160  : 	if ((PositionStack[StackIndex-1] + nbytes) <= (HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	add	eax, DWORD PTR _nbytes$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*8+1028]
	and	edx, 2147483647				; 7fffffffH
	cmp	eax, edx
	ja	$LN5@Read

; 161  : 	{
; 162  : 		if ((!InMicroChunk) || ((MicroChunkPosition + nbytes) <= MCHeader.ChunkSize))

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3080]
	test	ecx, ecx
	je	SHORT $LN3@Read
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3084]
	add	ecx, DWORD PTR _nbytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+3089]
	cmp	ecx, eax
	ja	SHORT $LN5@Read
$LN3@Read:

; 163  : 		{
; 164  : 			int read = File->Read(buf,nbytes);

	mov	eax, DWORD PTR _nbytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	DWORD PTR _read$1[ebp], eax

; 165  : 			if (read == (int)nbytes)

	mov	eax, DWORD PTR _read$1[ebp]
	cmp	eax, DWORD PTR _nbytes$[ebp]
	jne	SHORT $LN5@Read

; 166  : 			{
; 167  : 				PositionStack[StackIndex-1] += nbytes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	add	eax, DWORD PTR _nbytes$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax

; 168  : 				if (InMicroChunk)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3080]
	test	ecx, ecx
	je	SHORT $LN1@Read

; 169  : 				{
; 170  : 					MicroChunkPosition += nbytes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3084]
	add	ecx, DWORD PTR _nbytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3084], ecx
$LN1@Read:

; 171  : 				}
; 172  : 				return nbytes;

	mov	eax, DWORD PTR _nbytes$[ebp]
	jmp	SHORT $LN10@Read
$LN5@Read:

; 173  : 			}
; 174  : 		}
; 175  : 	}
; 176  : 	return 0;

	xor	eax, eax
$LN10@Read:

; 177  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Read@ChunkLoadClass@@QAEJPAXK@Z ENDP			; ChunkLoadClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Seek@ChunkLoadClass@@QAEJK@Z
_TEXT	SEGMENT
_seek$1 = -12						; size = 4
_pos$2 = -8						; size = 4
_this$ = -4						; size = 4
_nbytes$ = 8						; size = 4
?Seek@ChunkLoadClass@@QAEJK@Z PROC			; ChunkLoadClass::Seek, COMDAT
; _this$ = ecx

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN8@Seek:

; 136  : 	TT_ASSERT(File->Is_Open());

	xor	eax, eax
	jne	SHORT $LN8@Seek
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@Seek
	int	3
$LN6@Seek:

; 137  : 	if ((PositionStack[StackIndex-1] + nbytes) <= (HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	add	eax, DWORD PTR _nbytes$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*8+1028]
	and	edx, 2147483647				; 7fffffffH
	cmp	eax, edx
	ja	$LN5@Seek

; 138  : 	{
; 139  : 		if ((!InMicroChunk) || ((MicroChunkPosition + nbytes) <= MCHeader.ChunkSize))

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3080]
	test	ecx, ecx
	je	SHORT $LN3@Seek
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3084]
	add	ecx, DWORD PTR _nbytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+3089]
	cmp	ecx, eax
	ja	SHORT $LN5@Seek
$LN3@Seek:

; 140  : 		{
; 141  : 			int pos = File->Tell();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	mov	DWORD PTR _pos$2[ebp], eax

; 142  : 			int seek = File->Seek(nbytes,1);

	push	1
	mov	eax, DWORD PTR _nbytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _seek$1[ebp], eax

; 143  : 			if ((seek - pos) == (int)nbytes)

	mov	eax, DWORD PTR _seek$1[ebp]
	sub	eax, DWORD PTR _pos$2[ebp]
	cmp	eax, DWORD PTR _nbytes$[ebp]
	jne	SHORT $LN5@Seek

; 144  : 			{
; 145  : 				PositionStack[StackIndex-1] += nbytes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	add	eax, DWORD PTR _nbytes$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax

; 146  : 				if (InMicroChunk)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3080]
	test	ecx, ecx
	je	SHORT $LN1@Seek

; 147  : 				{
; 148  : 					MicroChunkPosition += nbytes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3084]
	add	ecx, DWORD PTR _nbytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3084], ecx
$LN1@Seek:

; 149  : 				}
; 150  : 				return nbytes;

	mov	eax, DWORD PTR _nbytes$[ebp]
	jmp	SHORT $LN10@Seek
$LN5@Seek:

; 151  : 			}
; 152  : 		}
; 153  : 	}
; 154  : 	return 0;

	xor	eax, eax
$LN10@Seek:

; 155  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Seek@ChunkLoadClass@@QAEJK@Z ENDP			; ChunkLoadClass::Seek
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ PROC	; ChunkLoadClass::Cur_Micro_Chunk_Length, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	return MCHeader.ChunkSize;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+3089]

; 132  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ENDP	; ChunkLoadClass::Cur_Micro_Chunk_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Cur_Micro_Chunk_ID@ChunkLoadClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cur_Micro_Chunk_ID@ChunkLoadClass@@QAEKXZ PROC		; ChunkLoadClass::Cur_Micro_Chunk_ID, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	return MCHeader.ChunkType;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+3088]

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cur_Micro_Chunk_ID@ChunkLoadClass@@QAEKXZ ENDP		; ChunkLoadClass::Cur_Micro_Chunk_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Close_Micro_Chunk@ChunkLoadClass@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close_Micro_Chunk@ChunkLoadClass@@QAE_NXZ PROC		; ChunkLoadClass::Close_Micro_Chunk, COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 	InMicroChunk = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3080], 0

; 113  : 	if (MicroChunkPosition < MCHeader.ChunkSize)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3089]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+3084], ecx
	jge	SHORT $LN2@Close_Micr

; 114  : 	{
; 115  : 		File->Seek(MCHeader.ChunkSize - MicroChunkPosition,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3089]
	mov	edx, DWORD PTR _this$[ebp]
	sub	ecx, DWORD PTR [edx+3084]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+40]
	call	edx

; 116  : 		if (StackIndex > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN2@Close_Micr

; 117  : 		{
; 118  : 			PositionStack[StackIndex-1] += MCHeader.ChunkSize - MicroChunkPosition;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+3089]
	mov	edx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [edx+3084]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+ecx*4+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax
$LN2@Close_Micr:

; 119  : 		}
; 120  : 	}
; 121  : 	return true;

	mov	al, 1

; 122  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Close_Micro_Chunk@ChunkLoadClass@@QAE_NXZ ENDP		; ChunkLoadClass::Close_Micro_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Open_Micro_Chunk@ChunkLoadClass@@QAE_NXZ
_TEXT	SEGMENT
_bytesread$ = -8					; size = 4
_this$ = -4						; size = 4
?Open_Micro_Chunk@ChunkLoadClass@@QAE_NXZ PROC		; ChunkLoadClass::Open_Micro_Chunk, COMDAT
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 	int bytesread = Read(&MCHeader,sizeof(MCHeader));

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	mov	DWORD PTR _bytesread$[ebp], eax

; 101  : 	if (bytesread == sizeof(MCHeader))

	cmp	DWORD PTR _bytesread$[ebp], 2
	jne	SHORT $LN1@Open_Micro

; 102  : 	{
; 103  : 		MicroChunkPosition = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3084], 0

; 104  : 		InMicroChunk = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3080], 1

; 105  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@Open_Micro
$LN1@Open_Micro:

; 106  : 	}
; 107  : 	return false;

	xor	al, al
$LN2@Open_Micro:

; 108  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Open_Micro_Chunk@ChunkLoadClass@@QAE_NXZ ENDP		; ChunkLoadClass::Open_Micro_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Contains_Chunks@ChunkLoadClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Contains_Chunks@ChunkLoadClass@@QAEHXZ PROC		; ChunkLoadClass::Contains_Chunks, COMDAT
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 	return HeaderStack[StackIndex-1].ChunkSize & 0x80000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	and	eax, -2147483648			; 80000000H

; 96   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Contains_Chunks@ChunkLoadClass@@QAEHXZ ENDP		; ChunkLoadClass::Contains_Chunks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Cur_Chunk_Depth@ChunkLoadClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cur_Chunk_Depth@ChunkLoadClass@@QAEHXZ PROC		; ChunkLoadClass::Cur_Chunk_Depth, COMDAT
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	return StackIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 91   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cur_Chunk_Depth@ChunkLoadClass@@QAEHXZ ENDP		; ChunkLoadClass::Cur_Chunk_Depth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ PROC		; ChunkLoadClass::Cur_Chunk_Length, COMDAT
; _this$ = ecx

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 	return HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	and	eax, 2147483647				; 7fffffffH

; 86   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ ENDP		; ChunkLoadClass::Cur_Chunk_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ PROC		; ChunkLoadClass::Cur_Chunk_ID, COMDAT
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 	return HeaderStack[StackIndex-1].ChunkType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1024]

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ ENDP		; ChunkLoadClass::Cur_Chunk_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Close_Chunk@ChunkLoadClass@@QAE_NXZ
_TEXT	SEGMENT
_x$ = -8						; size = 4
_this$ = -4						; size = 4
?Close_Chunk@ChunkLoadClass@@QAE_NXZ PROC		; ChunkLoadClass::Close_Chunk, COMDAT
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	unsigned int x = HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+1028]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _x$[ebp], eax

; 65   : 	if (PositionStack[StackIndex-1] < (x))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	cmp	eax, DWORD PTR _x$[ebp]
	jae	SHORT $LN2@Close_Chun

; 66   : 	{
; 67   : 		File->Seek((x) - PositionStack[StackIndex-1],1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN2@Close_Chun:

; 68   : 	}
; 69   : 	StackIndex--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 	if (StackIndex > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN1@Close_Chun

; 71   : 	{
; 72   : 		PositionStack[StackIndex-1] += (x);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax

; 73   : 		PositionStack[StackIndex-1] += 8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	add	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax
$LN1@Close_Chun:

; 74   : 	}
; 75   : 	return true;

	mov	al, 1

; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Close_Chunk@ChunkLoadClass@@QAE_NXZ ENDP		; ChunkLoadClass::Close_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Peek_Next_Chunk@ChunkLoadClass@@QAE_NPAI0@Z
_TEXT	SEGMENT
_h$ = -12						; size = 8
_this$ = -4						; size = 4
_id$ = 8						; size = 4
_length$ = 12						; size = 4
?Peek_Next_Chunk@ChunkLoadClass@@QAE_NPAI0@Z PROC	; ChunkLoadClass::Peek_Next_Chunk, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	ChunkHeader h;
; 43   : 	if ((StackIndex <= 0) || (PositionStack[StackIndex-1] != (HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF)))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN4@Peek_Next_
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*8+1028]
	and	eax, 2147483647				; 7fffffffH
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+4], eax
	je	SHORT $LN5@Peek_Next_
$LN4@Peek_Next_:

; 44   : 	{
; 45   : 		if (File->Read(&h,8) == 8)

	push	8
	lea	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	eax, 8
	jne	SHORT $LN5@Peek_Next_

; 46   : 		{
; 47   : 			File->Seek(-8,1);

	push	1
	push	-8					; fffffff8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+40]
	call	edx

; 48   : 			if (length)

	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN2@Peek_Next_

; 49   : 			{
; 50   : 				*length = h.ChunkSize;

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _h$[ebp+4]
	mov	DWORD PTR [eax], ecx
$LN2@Peek_Next_:

; 51   : 			}
; 52   : 			if (id)

	cmp	DWORD PTR _id$[ebp], 0
	je	SHORT $LN1@Peek_Next_

; 53   : 			{
; 54   : 				*id = h.ChunkType & 0x7FFFFFFF;

	mov	eax, DWORD PTR _h$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@Peek_Next_:

; 55   : 			}
; 56   : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@Peek_Next_
$LN5@Peek_Next_:

; 57   : 		}
; 58   : 	}
; 59   : 	return false;

	xor	al, al
$LN6@Peek_Next_:

; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Peek_Next_Chunk@ChunkLoadClass@@QAE_NPAI0@Z ENDP	; ChunkLoadClass::Peek_Next_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ?Open_Chunk@ChunkLoadClass@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Open_Chunk@ChunkLoadClass@@QAE_NXZ PROC		; ChunkLoadClass::Open_Chunk, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	if ((StackIndex <= 0) || (PositionStack[StackIndex-1] != (HeaderStack[StackIndex-1].ChunkSize & 0x7FFFFFFF)))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN2@Open_Chunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*8+1028]
	and	eax, 2147483647				; 7fffffffH
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+4], eax
	je	SHORT $LN3@Open_Chunk
$LN2@Open_Chunk:

; 29   : 	{
; 30   : 		if (File->Read(&HeaderStack[StackIndex],8) == 8)

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+1032]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	eax, 8
	jne	SHORT $LN3@Open_Chunk

; 31   : 		{
; 32   : 			PositionStack[StackIndex] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], 0

; 33   : 			StackIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 34   : 			return true;

	mov	al, 1
	jmp	SHORT $LN4@Open_Chunk
$LN3@Open_Chunk:

; 35   : 		}
; 36   : 	}
; 37   : 	return false;

	xor	al, al
$LN4@Open_Chunk:

; 38   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Open_Chunk@ChunkLoadClass@@QAE_NXZ ENDP		; ChunkLoadClass::Open_Chunk
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\chunkclasses.cpp
;	COMDAT ??0ChunkLoadClass@@QAE@PAVFileClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_file$ = 8						; size = 4
??0ChunkLoadClass@@QAE@PAVFileClass@@@Z PROC		; ChunkLoadClass::ChunkLoadClass, COMDAT
; _this$ = ecx

; 16   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 17   : 	File = file;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _file$[ebp]
	mov	DWORD PTR [eax], ecx

; 18   : 	StackIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 19   : 	memset(HeaderStack,0,sizeof(HeaderStack));

	push	2048					; 00000800H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1032				; 00000408H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 20   : 	memset(PositionStack,0,sizeof(PositionStack));

	push	1024					; 00000400H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 21   : 	InMicroChunk = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3080], 0

; 22   : 	MicroChunkPosition = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3084], 0

; 23   : 	MCHeader.ChunkType = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3088], 0

; 24   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ChunkLoadClass@@QAE@PAVFileClass@@@Z ENDP		; ChunkLoadClass::ChunkLoadClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@StringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@StringClass@@QBEPBDXZ PROC			; StringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 480  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 481  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 482  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@StringClass@@QBEPBDXZ ENDP			; StringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Buffer@StringClass@@QAEPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_new_length$ = 8					; size = 4
?Get_Buffer@StringClass@@QAEPADH@Z PROC			; StringClass::Get_Buffer, COMDAT
; _this$ = ecx

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 470  : 	Uninitialised_Grow (new_length);

	mov	eax, DWORD PTR _new_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@StringClass@@AAEXH@Z ; StringClass::Uninitialised_Grow

; 471  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 472  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Buffer@StringClass@@QAEPADH@Z ENDP			; StringClass::Get_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv73 = -92						; size = 4
tv90 = -85						; size = 1
tv87 = -84						; size = 4
tv84 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 1
	mov	DWORD PTR tv87[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv84[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv90[ebp], cl
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv84[ebp]
	sub	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??AStringClass@@QAEAADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??AStringClass@@QAEAADH@Z PROC				; StringClass::operator[], COMDAT
; _this$ = ecx

; 391  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 	return m_Buffer[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]

; 393  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AStringClass@@QAEAADH@Z ENDP				; StringClass::operator[]
_TEXT	ENDS
END
