; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\TDBObjClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_DONT_MOVE_ARRIVED_DIST DD 0447a0000r		; 1000
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	??_U@YAPAXIPAX@Z				; operator new[]
PUBLIC	??0PostLoadableClass@@QAE@XZ			; PostLoadableClass::PostLoadableClass
PUBLIC	??1PostLoadableClass@@UAE@XZ			; PostLoadableClass::~PostLoadableClass
PUBLIC	?On_Post_Load@PostLoadableClass@@UAEXXZ		; PostLoadableClass::On_Post_Load
PUBLIC	??_GPostLoadableClass@@UAEPAXI@Z		; PostLoadableClass::`scalar deleting destructor'
PUBLIC	?Save@PersistClass@@UAE_NAAVChunkSaveClass@@@Z	; PersistClass::Save
PUBLIC	?Load@PersistClass@@UAE_NAAVChunkLoadClass@@@Z	; PersistClass::Load
PUBLIC	??0PersistClass@@QAE@XZ				; PersistClass::PersistClass
PUBLIC	??1PersistClass@@UAE@XZ				; PersistClass::~PersistClass
PUBLIC	??_GPersistClass@@UAEPAXI@Z			; PersistClass::`scalar deleting destructor'
PUBLIC	??0StringClass@@QAE@H_N@Z			; StringClass::StringClass
PUBLIC	??1StringClass@@QAE@XZ				; StringClass::~StringClass
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	??4StringClass@@QAEABV0@ABV0@@Z			; StringClass::operator=
PUBLIC	??BStringClass@@QBEPBDXZ			; StringClass::operator char const *
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Get_Buffer@StringClass@@QAEPADH@Z		; StringClass::Get_Buffer
PUBLIC	?Peek_Buffer@StringClass@@QAEPADXZ		; StringClass::Peek_Buffer
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??0WideStringClass@@QAE@H_N@Z			; WideStringClass::WideStringClass
PUBLIC	??0WideStringClass@@QAE@PBD_N@Z			; WideStringClass::WideStringClass
PUBLIC	??1WideStringClass@@QAE@XZ			; WideStringClass::~WideStringClass
PUBLIC	??8WideStringClass@@QBE_NPB_W@Z			; WideStringClass::operator==
PUBLIC	??9WideStringClass@@QBE_NPB_W@Z			; WideStringClass::operator!=
PUBLIC	??4WideStringClass@@QAEABV0@ABV0@@Z		; WideStringClass::operator=
PUBLIC	??4WideStringClass@@QAEABV0@PB_W@Z		; WideStringClass::operator=
PUBLIC	??4WideStringClass@@QAEABV0@PBD@Z		; WideStringClass::operator=
PUBLIC	??BWideStringClass@@QBEPB_WXZ			; WideStringClass::operator wchar_t const *
PUBLIC	?Compare@WideStringClass@@QBEHPB_W@Z		; WideStringClass::Compare
PUBLIC	?Get_Length@WideStringClass@@QBEHXZ		; WideStringClass::Get_Length
PUBLIC	?Get_Buffer@WideStringClass@@QAEPA_WH@Z		; WideStringClass::Get_Buffer
PUBLIC	?Peek_Buffer@WideStringClass@@QAEPA_WXZ		; WideStringClass::Peek_Buffer
PUBLIC	?Store_Length@WideStringClass@@AAEXH@Z		; WideStringClass::Store_Length
PUBLIC	?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ	; WideStringClass::Get_Header
PUBLIC	??_FWideStringClass@@QAEXXZ			; WideStringClass::`default constructor closure'
PUBLIC	??_EWideStringClass@@QAEPAXI@Z			; WideStringClass::`vector deleting destructor'
PUBLIC	??0TDBObjClass@@QAE@XZ				; TDBObjClass::TDBObjClass
PUBLIC	??0TDBObjClass@@QAE@ABV0@@Z			; TDBObjClass::TDBObjClass
PUBLIC	??1TDBObjClass@@UAE@XZ				; TDBObjClass::~TDBObjClass
PUBLIC	??4TDBObjClass@@QAEABV0@ABV0@@Z			; TDBObjClass::operator=
PUBLIC	?As_StringTwiddlerClass@TDBObjClass@@UAEPAVStringTwiddlerClass@@XZ ; TDBObjClass::As_StringTwiddlerClass
PUBLIC	?Get_Factory@TDBObjClass@@UBEABVPersistFactoryClass@@XZ ; TDBObjClass::Get_Factory
PUBLIC	?Save@TDBObjClass@@UAE_NAAVChunkSaveClass@@@Z	; TDBObjClass::Save
PUBLIC	?Load@TDBObjClass@@UAE_NAAVChunkLoadClass@@@Z	; TDBObjClass::Load
PUBLIC	?Clone@TDBObjClass@@UBEPAV1@XZ			; TDBObjClass::Clone
PUBLIC	?Get_String@TDBObjClass@@UAEABVWideStringClass@@I@Z ; TDBObjClass::Get_String
PUBLIC	?Get_String@TDBObjClass@@UAEABVWideStringClass@@XZ ; TDBObjClass::Get_String
PUBLIC	?Get_English_String@TDBObjClass@@UAEABVStringClass@@XZ ; TDBObjClass::Get_English_String
PUBLIC	?Get_ID@TDBObjClass@@UAEIXZ			; TDBObjClass::Get_ID
PUBLIC	?Get_ID_Desc@TDBObjClass@@UAEABVStringClass@@XZ	; TDBObjClass::Get_ID_Desc
PUBLIC	?Get_Sound_ID@TDBObjClass@@UAEIXZ		; TDBObjClass::Get_Sound_ID
PUBLIC	?Get_Animation_Name@TDBObjClass@@UAEABVStringClass@@XZ ; TDBObjClass::Get_Animation_Name
PUBLIC	?Get_Category_ID@TDBObjClass@@UAEIXZ		; TDBObjClass::Get_Category_ID
PUBLIC	?Set_String@TDBObjClass@@UAEXIPB_W@Z		; TDBObjClass::Set_String
PUBLIC	?Set_English_String@TDBObjClass@@UAEXPBD@Z	; TDBObjClass::Set_English_String
PUBLIC	?Set_ID@TDBObjClass@@UAEXI@Z			; TDBObjClass::Set_ID
PUBLIC	?Set_ID_Desc@TDBObjClass@@UAEXPBD@Z		; TDBObjClass::Set_ID_Desc
PUBLIC	?Set_Animation_Name@TDBObjClass@@UAEXPBD@Z	; TDBObjClass::Set_Animation_Name
PUBLIC	?Set_Sound_ID@TDBObjClass@@UAEXI@Z		; TDBObjClass::Set_Sound_ID
PUBLIC	?Set_Category_ID@TDBObjClass@@UAEXI@Z		; TDBObjClass::Set_Category_ID
PUBLIC	?Contains_Translation@TDBObjClass@@UAE_NI@Z	; TDBObjClass::Contains_Translation
PUBLIC	?Save_Variables@TDBObjClass@@IAEXAAVChunkSaveClass@@@Z ; TDBObjClass::Save_Variables
PUBLIC	?Load_Variables@TDBObjClass@@IAEXAAVChunkLoadClass@@@Z ; TDBObjClass::Load_Variables
PUBLIC	??0?$VectorClass@VWideStringClass@@@@QAE@HPBVWideStringClass@@@Z ; VectorClass<WideStringClass>::VectorClass<WideStringClass>
PUBLIC	??4?$VectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<WideStringClass>::operator=
PUBLIC	??1?$VectorClass@VWideStringClass@@@@UAE@XZ	; VectorClass<WideStringClass>::~VectorClass<WideStringClass>
PUBLIC	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
PUBLIC	??A?$VectorClass@VWideStringClass@@@@QBEABVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
PUBLIC	??8?$VectorClass@VWideStringClass@@@@UBE_NABV0@@Z ; VectorClass<WideStringClass>::operator==
PUBLIC	?Resize@?$VectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z ; VectorClass<WideStringClass>::Resize
PUBLIC	?Clear@?$VectorClass@VWideStringClass@@@@UAEXXZ	; VectorClass<WideStringClass>::Clear
PUBLIC	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
PUBLIC	?ID@?$VectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z ; VectorClass<WideStringClass>::ID
PUBLIC	?ID@?$VectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z ; VectorClass<WideStringClass>::ID
PUBLIC	??_G?$VectorClass@VWideStringClass@@@@UAEPAXI@Z	; VectorClass<WideStringClass>::`scalar deleting destructor'
PUBLIC	??0?$DynamicVectorClass@VWideStringClass@@@@QAE@IPBVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::DynamicVectorClass<WideStringClass>
PUBLIC	??4?$DynamicVectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<WideStringClass>::operator=
PUBLIC	?Resize@?$DynamicVectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::Resize
PUBLIC	?Clear@?$DynamicVectorClass@VWideStringClass@@@@UAEXXZ ; DynamicVectorClass<WideStringClass>::Clear
PUBLIC	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
PUBLIC	?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_NABVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::Add
PUBLIC	?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_N$$QAVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::Add
PUBLIC	?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::ID
PUBLIC	?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::ID
PUBLIC	??1?$DynamicVectorClass@VWideStringClass@@@@UAE@XZ ; DynamicVectorClass<WideStringClass>::~DynamicVectorClass<WideStringClass>
PUBLIC	??_G?$DynamicVectorClass@VWideStringClass@@@@UAEPAXI@Z ; DynamicVectorClass<WideStringClass>::`scalar deleting destructor'
PUBLIC	??_GTDBObjClass@@UAEPAXI@Z			; TDBObjClass::`scalar deleting destructor'
PUBLIC	?Get_Current_Language@TranslateDBClass@@SAIXZ	; TranslateDBClass::Get_Current_Language
PUBLIC	?Is_Single_Language_Export_Enabled@TranslateDBClass@@SA_NXZ ; TranslateDBClass::Is_Single_Language_Export_Enabled
PUBLIC	?Chunk_ID@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEIXZ ; SimplePersistFactoryClass<TDBObjClass,589825>::Chunk_ID
PUBLIC	?Load@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEPAVPersistClass@@AAVChunkLoadClass@@@Z ; SimplePersistFactoryClass<TDBObjClass,589825>::Load
PUBLIC	?Save@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEXAAVChunkSaveClass@@PAVPersistClass@@@Z ; SimplePersistFactoryClass<TDBObjClass,589825>::Save
PUBLIC	??0?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@QAE@XZ ; SimplePersistFactoryClass<TDBObjClass,589825>::SimplePersistFactoryClass<TDBObjClass,589825>
PUBLIC	??1?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAE@XZ ; SimplePersistFactoryClass<TDBObjClass,589825>::~SimplePersistFactoryClass<TDBObjClass,589825>
PUBLIC	??_G?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAEPAXI@Z ; SimplePersistFactoryClass<TDBObjClass,589825>::`scalar deleting destructor'
PUBLIC	??$move@AAVWideStringClass@@@std@@YA$$QAVWideStringClass@@AAV1@@Z ; std::move<WideStringClass &>
PUBLIC	??_7PostLoadableClass@@6B@			; PostLoadableClass::`vftable'
PUBLIC	??_7PersistClass@@6B@				; PersistClass::`vftable'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_7?$VectorClass@VWideStringClass@@@@6B@	; VectorClass<WideStringClass>::`vftable'
PUBLIC	??_7?$DynamicVectorClass@VWideStringClass@@@@6B@ ; DynamicVectorClass<WideStringClass>::`vftable'
PUBLIC	??_7TDBObjClass@@6B@				; TDBObjClass::`vftable'
PUBLIC	??_C@_0BD@CCMPBDCA@TDBObjClass?3?3Clone?$AA@	; `string'
PUBLIC	??_C@_0DH@IIMPGHLA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1GO@EICHNPCK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_7?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@6B@ ; SimplePersistFactoryClass<TDBObjClass,589825>::`vftable'
PUBLIC	?_TranslateObjPersistFactory@@3V?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@A ; _TranslateObjPersistFactory
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0CL@GGJPOFFL@VectorClass?$DMclass?5WideStringClas@ ; `string'
PUBLIC	??_C@_0CK@NCCEGELB@VectorClass?$DMclass?5WideStringClas@ ; `string'
PUBLIC	??_C@_0DK@KEEKKCHH@SimplePersistFactoryClass?$DMclass?5@ ; `string'
PUBLIC	??_C@_0EF@BPIDEJHJ@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1IK@JLMLKCKA@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_0DA@IALOHAFG@VectorClass?$DMclass?5WideStringClas@ ; `string'
PUBLIC	??_C@_0CP@BIPNANLO@VectorClass?$DMclass?5WideStringClas@ ; `string'
PUBLIC	??_R4PostLoadableClass@@6B@			; PostLoadableClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPostLoadableClass@@@8			; PostLoadableClass `RTTI Type Descriptor'
PUBLIC	??_R3PostLoadableClass@@8			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PostLoadableClass@@8			; PostLoadableClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PostLoadableClass@@8		; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4PersistClass@@6B@				; PersistClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPersistClass@@@8			; PersistClass `RTTI Type Descriptor'
PUBLIC	??_R3PersistClass@@8				; PersistClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PersistClass@@8				; PersistClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PersistClass@@8			; PersistClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4TDBObjClass@@6B@				; TDBObjClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTDBObjClass@@@8				; TDBObjClass `RTTI Type Descriptor'
PUBLIC	??_R3TDBObjClass@@8				; TDBObjClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TDBObjClass@@8				; TDBObjClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TDBObjClass@@8			; TDBObjClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$DynamicVectorClass@VWideStringClass@@@@6B@ ; DynamicVectorClass<WideStringClass>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$DynamicVectorClass@VWideStringClass@@@@@8 ; DynamicVectorClass<WideStringClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$DynamicVectorClass@VWideStringClass@@@@8	; DynamicVectorClass<WideStringClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$DynamicVectorClass@VWideStringClass@@@@8	; DynamicVectorClass<WideStringClass>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$DynamicVectorClass@VWideStringClass@@@@8 ; DynamicVectorClass<WideStringClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$VectorClass@VWideStringClass@@@@8 ; VectorClass<WideStringClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$VectorClass@VWideStringClass@@@@@8	; VectorClass<WideStringClass> `RTTI Type Descriptor'
PUBLIC	??_R3?$VectorClass@VWideStringClass@@@@8	; VectorClass<WideStringClass>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VectorClass@VWideStringClass@@@@8	; VectorClass<WideStringClass>::`RTTI Base Class Array'
PUBLIC	??_R4?$VectorClass@VWideStringClass@@@@6B@	; VectorClass<WideStringClass>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@6B@ ; SimplePersistFactoryClass<TDBObjClass,589825>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@@8 ; SimplePersistFactoryClass<TDBObjClass,589825> `RTTI Type Descriptor'
PUBLIC	??_R3?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8 ; SimplePersistFactoryClass<TDBObjClass,589825>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8 ; SimplePersistFactoryClass<TDBObjClass,589825>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8 ; SimplePersistFactoryClass<TDBObjClass,589825>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@PersistFactoryClass@@8		; PersistFactoryClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPersistFactoryClass@@@8			; PersistFactoryClass `RTTI Type Descriptor'
PUBLIC	??_R3PersistFactoryClass@@8			; PersistFactoryClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PersistFactoryClass@@8			; PersistFactoryClass::`RTTI Base Class Array'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___wassert:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	??_EPostLoadableClass@@UAEPAXI@Z:PROC		; PostLoadableClass::`vector deleting destructor'
EXTRN	??_EPersistClass@@UAEPAXI@Z:PROC		; PersistClass::`vector deleting destructor'
EXTRN	?Copy_Wide@StringClass@@QAE_NPB_W@Z:PROC	; StringClass::Copy_Wide
EXTRN	?Get_String@StringClass@@AAEXH_N@Z:PROC		; StringClass::Get_String
EXTRN	?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC	; StringClass::Uninitialised_Grow
EXTRN	?Free_String@StringClass@@AAEXXZ:PROC		; StringClass::Free_String
EXTRN	?Convert_From@WideStringClass@@QAE_NPBD@Z:PROC	; WideStringClass::Convert_From
EXTRN	?Get_String@WideStringClass@@AAEXH_N@Z:PROC	; WideStringClass::Get_String
EXTRN	?Uninitialised_Grow@WideStringClass@@AAEXH@Z:PROC ; WideStringClass::Uninitialised_Grow
EXTRN	?Free_String@WideStringClass@@AAEXXZ:PROC	; WideStringClass::Free_String
EXTRN	??_E?$VectorClass@VWideStringClass@@@@UAEPAXI@Z:PROC ; VectorClass<WideStringClass>::`vector deleting destructor'
EXTRN	??_E?$DynamicVectorClass@VWideStringClass@@@@UAEPAXI@Z:PROC ; DynamicVectorClass<WideStringClass>::`vector deleting destructor'
EXTRN	??_ETDBObjClass@@UAEPAXI@Z:PROC			; TDBObjClass::`vector deleting destructor'
EXTRN	?Open_Chunk@ChunkLoadClass@@QAE_NXZ:PROC	; ChunkLoadClass::Open_Chunk
EXTRN	?Close_Chunk@ChunkLoadClass@@QAE_NXZ:PROC	; ChunkLoadClass::Close_Chunk
EXTRN	?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ:PROC	; ChunkLoadClass::Cur_Chunk_ID
EXTRN	?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ:PROC	; ChunkLoadClass::Cur_Chunk_Length
EXTRN	?Open_Micro_Chunk@ChunkLoadClass@@QAE_NXZ:PROC	; ChunkLoadClass::Open_Micro_Chunk
EXTRN	?Close_Micro_Chunk@ChunkLoadClass@@QAE_NXZ:PROC	; ChunkLoadClass::Close_Micro_Chunk
EXTRN	?Cur_Micro_Chunk_ID@ChunkLoadClass@@QAEKXZ:PROC	; ChunkLoadClass::Cur_Micro_Chunk_ID
EXTRN	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ:PROC ; ChunkLoadClass::Cur_Micro_Chunk_Length
EXTRN	?Read@ChunkLoadClass@@QAEJPAXK@Z:PROC		; ChunkLoadClass::Read
EXTRN	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z:PROC	; ChunkSaveClass::Begin_Chunk
EXTRN	?End_Chunk@ChunkSaveClass@@QAE_NXZ:PROC		; ChunkSaveClass::End_Chunk
EXTRN	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z:PROC ; ChunkSaveClass::Begin_Micro_Chunk
EXTRN	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ:PROC	; ChunkSaveClass::End_Micro_Chunk
EXTRN	?Write@ChunkSaveClass@@QAEKPAXK@Z:PROC		; ChunkSaveClass::Write
EXTRN	??0PersistFactoryClass@@QAE@XZ:PROC		; PersistFactoryClass::PersistFactoryClass
EXTRN	??1PersistFactoryClass@@UAE@XZ:PROC		; PersistFactoryClass::~PersistFactoryClass
EXTRN	?Register_Pointer@SaveLoadSystemClass@@SAXPAX0@Z:PROC ; SaveLoadSystemClass::Register_Pointer
EXTRN	??_E?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAEPAXI@Z:PROC ; SimplePersistFactoryClass<TDBObjClass,589825>::`vector deleting destructor'
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?m_EmptyString@StringClass@@0AAPADA:DWORD	; StringClass::m_EmptyString
EXTRN	?m_NullChar@StringClass@@0AADA:DWORD		; StringClass::m_NullChar
EXTRN	?m_EmptyString@WideStringClass@@0AAPA_WA:DWORD	; WideStringClass::m_EmptyString
EXTRN	?m_NullChar@WideStringClass@@0AA_WA:DWORD	; WideStringClass::m_NullChar
EXTRN	?m_LanguageID@TranslateDBClass@@0AAIA:DWORD	; TranslateDBClass::m_LanguageID
EXTRN	?IsSingleLanguageExport@TranslateDBClass@@0AA_NA:DWORD ; TranslateDBClass::IsSingleLanguageExport
_BSS	SEGMENT
?_TranslateObjPersistFactory@@3V?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@A DQ 01H DUP (?) ; _TranslateObjPersistFactory
_BSS	ENDS
CRT$XCU	SEGMENT
__TranslateObjPersistFactory$initializer$ DD FLAT:??__E_TranslateObjPersistFactory@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R2PersistFactoryClass@@8
rdata$r	SEGMENT
??_R2PersistFactoryClass@@8 DD FLAT:??_R1A@?0A@EA@PersistFactoryClass@@8 ; PersistFactoryClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PersistFactoryClass@@8
rdata$r	SEGMENT
??_R3PersistFactoryClass@@8 DD 00H			; PersistFactoryClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PersistFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPersistFactoryClass@@@8
_DATA	SEGMENT
??_R0?AVPersistFactoryClass@@@8 DD FLAT:??_7type_info@@6B@ ; PersistFactoryClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPersistFactoryClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@PersistFactoryClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PersistFactoryClass@@8 DD FLAT:??_R0?AVPersistFactoryClass@@@8 ; PersistFactoryClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PersistFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8 DD FLAT:??_R0?AV?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@@8 ; SimplePersistFactoryClass<TDBObjClass,589825>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8
rdata$r	SEGMENT
??_R2?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8 DD FLAT:??_R1A@?0A@EA@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8 ; SimplePersistFactoryClass<TDBObjClass,589825>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PersistFactoryClass@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8
rdata$r	SEGMENT
??_R3?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8 DD 00H ; SimplePersistFactoryClass<TDBObjClass,589825>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@@8
_DATA	SEGMENT
??_R0?AV?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@@8 DD FLAT:??_7type_info@@6B@ ; SimplePersistFactoryClass<TDBObjClass,589825> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@'
	DB	00H
_DATA	ENDS
;	COMDAT ??_R4?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@6B@
rdata$r	SEGMENT
??_R4?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@6B@ DD 00H ; SimplePersistFactoryClass<TDBObjClass,589825>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@@8
	DD	FLAT:??_R3?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$VectorClass@VWideStringClass@@@@6B@
rdata$r	SEGMENT
??_R4?$VectorClass@VWideStringClass@@@@6B@ DD 00H	; VectorClass<WideStringClass>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$VectorClass@VWideStringClass@@@@@8
	DD	FLAT:??_R3?$VectorClass@VWideStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VectorClass@VWideStringClass@@@@8
rdata$r	SEGMENT
??_R2?$VectorClass@VWideStringClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$VectorClass@VWideStringClass@@@@8 ; VectorClass<WideStringClass>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VectorClass@VWideStringClass@@@@8
rdata$r	SEGMENT
??_R3?$VectorClass@VWideStringClass@@@@8 DD 00H		; VectorClass<WideStringClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VectorClass@VWideStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VectorClass@VWideStringClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$VectorClass@VWideStringClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; VectorClass<WideStringClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VectorClass@VWideStringClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VectorClass@VWideStringClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VectorClass@VWideStringClass@@@@8 DD FLAT:??_R0?AV?$VectorClass@VWideStringClass@@@@@8 ; VectorClass<WideStringClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VectorClass@VWideStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$DynamicVectorClass@VWideStringClass@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$DynamicVectorClass@VWideStringClass@@@@8 DD FLAT:??_R0?AV?$DynamicVectorClass@VWideStringClass@@@@@8 ; DynamicVectorClass<WideStringClass>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$DynamicVectorClass@VWideStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$DynamicVectorClass@VWideStringClass@@@@8
rdata$r	SEGMENT
??_R2?$DynamicVectorClass@VWideStringClass@@@@8 DD FLAT:??_R1A@?0A@EA@?$DynamicVectorClass@VWideStringClass@@@@8 ; DynamicVectorClass<WideStringClass>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$VectorClass@VWideStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R3?$DynamicVectorClass@VWideStringClass@@@@8
rdata$r	SEGMENT
??_R3?$DynamicVectorClass@VWideStringClass@@@@8 DD 00H	; DynamicVectorClass<WideStringClass>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$DynamicVectorClass@VWideStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$DynamicVectorClass@VWideStringClass@@@@@8
_DATA	SEGMENT
??_R0?AV?$DynamicVectorClass@VWideStringClass@@@@@8 DD FLAT:??_7type_info@@6B@ ; DynamicVectorClass<WideStringClass> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$DynamicVectorClass@VWideStringClass@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$DynamicVectorClass@VWideStringClass@@@@6B@
rdata$r	SEGMENT
??_R4?$DynamicVectorClass@VWideStringClass@@@@6B@ DD 00H ; DynamicVectorClass<WideStringClass>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$DynamicVectorClass@VWideStringClass@@@@@8
	DD	FLAT:??_R3?$DynamicVectorClass@VWideStringClass@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TDBObjClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TDBObjClass@@8 DD FLAT:??_R0?AVTDBObjClass@@@8 ; TDBObjClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TDBObjClass@@8
rdata$r	ENDS
;	COMDAT ??_R2TDBObjClass@@8
rdata$r	SEGMENT
??_R2TDBObjClass@@8 DD FLAT:??_R1A@?0A@EA@TDBObjClass@@8 ; TDBObjClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PersistClass@@8
	DD	FLAT:??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3TDBObjClass@@8
rdata$r	SEGMENT
??_R3TDBObjClass@@8 DD 00H				; TDBObjClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TDBObjClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTDBObjClass@@@8
_DATA	SEGMENT
??_R0?AVTDBObjClass@@@8 DD FLAT:??_7type_info@@6B@	; TDBObjClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTDBObjClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TDBObjClass@@6B@
rdata$r	SEGMENT
??_R4TDBObjClass@@6B@ DD 00H				; TDBObjClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTDBObjClass@@@8
	DD	FLAT:??_R3TDBObjClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PersistClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PersistClass@@8 DD FLAT:??_R0?AVPersistClass@@@8 ; PersistClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PersistClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PersistClass@@8
rdata$r	SEGMENT
??_R2PersistClass@@8 DD FLAT:??_R1A@?0A@EA@PersistClass@@8 ; PersistClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3PersistClass@@8
rdata$r	SEGMENT
??_R3PersistClass@@8 DD 00H				; PersistClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PersistClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPersistClass@@@8
_DATA	SEGMENT
??_R0?AVPersistClass@@@8 DD FLAT:??_7type_info@@6B@	; PersistClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPersistClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PersistClass@@6B@
rdata$r	SEGMENT
??_R4PersistClass@@6B@ DD 00H				; PersistClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPersistClass@@@8
	DD	FLAT:??_R3PersistClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PostLoadableClass@@8 DD FLAT:??_R0?AVPostLoadableClass@@@8 ; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PostLoadableClass@@8
rdata$r	SEGMENT
??_R2PostLoadableClass@@8 DD FLAT:??_R1A@?0A@EA@PostLoadableClass@@8 ; PostLoadableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PostLoadableClass@@8
rdata$r	SEGMENT
??_R3PostLoadableClass@@8 DD 00H			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPostLoadableClass@@@8
_DATA	SEGMENT
??_R0?AVPostLoadableClass@@@8 DD FLAT:??_7type_info@@6B@ ; PostLoadableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPostLoadableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PostLoadableClass@@6B@
rdata$r	SEGMENT
??_R4PostLoadableClass@@6B@ DD 00H			; PostLoadableClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPostLoadableClass@@@8
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CP@BIPNANLO@VectorClass?$DMclass?5WideStringClas@
CONST	SEGMENT
??_C@_0CP@BIPNANLO@VectorClass?$DMclass?5WideStringClas@ DB 'VectorClass<'
	DB	'class WideStringClass>::operator =', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IALOHAFG@VectorClass?$DMclass?5WideStringClas@
CONST	SEGMENT
??_C@_0DA@IALOHAFG@VectorClass?$DMclass?5WideStringClas@ DB 'VectorClass<'
	DB	'class WideStringClass>::VectorClass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@JLMLKCKA@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1IK@JLMLKCKA@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'e', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@BPIDEJHJ@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0EF@BPIDEJHJ@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\simplepersistfactoryclass.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@KEEKKCHH@SimplePersistFactoryClass?$DMclass?5@
CONST	SEGMENT
??_C@_0DK@KEEKKCHH@SimplePersistFactoryClass?$DMclass?5@ DB 'SimplePersis'
	DB	'tFactoryClass<class TDBObjClass,589825>::Load', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NCCEGELB@VectorClass?$DMclass?5WideStringClas@
CONST	SEGMENT
??_C@_0CK@NCCEGELB@VectorClass?$DMclass?5WideStringClas@ DB 'VectorClass<'
	DB	'class WideStringClass>::Clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GGJPOFFL@VectorClass?$DMclass?5WideStringClas@
CONST	SEGMENT
??_C@_0CL@GGJPOFFL@VectorClass?$DMclass?5WideStringClas@ DB 'VectorClass<'
	DB	'class WideStringClass>::Resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@6B@
CONST	SEGMENT
??_7?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@6B@ DD FLAT:??_R4?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@6B@ ; SimplePersistFactoryClass<TDBObjClass,589825>::`vftable'
	DD	FLAT:??_E?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAEPAXI@Z
	DD	FLAT:?Chunk_ID@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEIXZ
	DD	FLAT:?Load@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEPAVPersistClass@@AAVChunkLoadClass@@@Z
	DD	FLAT:?Save@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEXAAVChunkSaveClass@@PAVPersistClass@@@Z
CONST	ENDS
;	COMDAT ??_C@_1GO@EICHNPCK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1GO@EICHNPCK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 't', 00H, 'd', 00H, 'b', 00H, 'o', 00H, 'b', 00H
	DB	'j', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IIMPGHLA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DH@IIMPGHLA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\tdbobjclass.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CCMPBDCA@TDBObjClass?3?3Clone?$AA@
CONST	SEGMENT
??_C@_0BD@CCMPBDCA@TDBObjClass?3?3Clone?$AA@ DB 'TDBObjClass::Clone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7TDBObjClass@@6B@
CONST	SEGMENT
??_7TDBObjClass@@6B@ DD FLAT:??_R4TDBObjClass@@6B@	; TDBObjClass::`vftable'
	DD	FLAT:??_ETDBObjClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
	DD	FLAT:?Get_Factory@TDBObjClass@@UBEABVPersistFactoryClass@@XZ
	DD	FLAT:?Save@TDBObjClass@@UAE_NAAVChunkSaveClass@@@Z
	DD	FLAT:?Load@TDBObjClass@@UAE_NAAVChunkLoadClass@@@Z
	DD	FLAT:?As_StringTwiddlerClass@TDBObjClass@@UAEPAVStringTwiddlerClass@@XZ
	DD	FLAT:?Clone@TDBObjClass@@UBEPAV1@XZ
	DD	FLAT:?Get_String@TDBObjClass@@UAEABVWideStringClass@@XZ
	DD	FLAT:?Get_String@TDBObjClass@@UAEABVWideStringClass@@I@Z
	DD	FLAT:?Get_English_String@TDBObjClass@@UAEABVStringClass@@XZ
	DD	FLAT:?Get_ID@TDBObjClass@@UAEIXZ
	DD	FLAT:?Get_ID_Desc@TDBObjClass@@UAEABVStringClass@@XZ
	DD	FLAT:?Get_Sound_ID@TDBObjClass@@UAEIXZ
	DD	FLAT:?Get_Animation_Name@TDBObjClass@@UAEABVStringClass@@XZ
	DD	FLAT:?Get_Category_ID@TDBObjClass@@UAEIXZ
	DD	FLAT:?Set_String@TDBObjClass@@UAEXIPB_W@Z
	DD	FLAT:?Set_English_String@TDBObjClass@@UAEXPBD@Z
	DD	FLAT:?Set_ID@TDBObjClass@@UAEXI@Z
	DD	FLAT:?Set_ID_Desc@TDBObjClass@@UAEXPBD@Z
	DD	FLAT:?Set_Animation_Name@TDBObjClass@@UAEXPBD@Z
	DD	FLAT:?Set_Sound_ID@TDBObjClass@@UAEXI@Z
	DD	FLAT:?Set_Category_ID@TDBObjClass@@UAEXI@Z
	DD	FLAT:?Contains_Translation@TDBObjClass@@UAE_NI@Z
CONST	ENDS
;	COMDAT ??_7?$DynamicVectorClass@VWideStringClass@@@@6B@
CONST	SEGMENT
??_7?$DynamicVectorClass@VWideStringClass@@@@6B@ DD FLAT:??_R4?$DynamicVectorClass@VWideStringClass@@@@6B@ ; DynamicVectorClass<WideStringClass>::`vftable'
	DD	FLAT:??_E?$DynamicVectorClass@VWideStringClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@VWideStringClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$DynamicVectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z
	DD	FLAT:?Clear@?$DynamicVectorClass@VWideStringClass@@@@UAEXXZ
	DD	FLAT:?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z
	DD	FLAT:?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z
CONST	ENDS
;	COMDAT ??_7?$VectorClass@VWideStringClass@@@@6B@
CONST	SEGMENT
??_7?$VectorClass@VWideStringClass@@@@6B@ DD FLAT:??_R4?$VectorClass@VWideStringClass@@@@6B@ ; VectorClass<WideStringClass>::`vftable'
	DD	FLAT:??_E?$VectorClass@VWideStringClass@@@@UAEPAXI@Z
	DD	FLAT:??8?$VectorClass@VWideStringClass@@@@UBE_NABV0@@Z
	DD	FLAT:?Resize@?$VectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z
	DD	FLAT:?Clear@?$VectorClass@VWideStringClass@@@@UAEXXZ
	DD	FLAT:?ID@?$VectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z
	DD	FLAT:?ID@?$VectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z
CONST	ENDS
;	COMDAT ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_vector.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7PersistClass@@6B@
CONST	SEGMENT
??_7PersistClass@@6B@ DD FLAT:??_R4PersistClass@@6B@	; PersistClass::`vftable'
	DD	FLAT:??_EPersistClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:?Save@PersistClass@@UAE_NAAVChunkSaveClass@@@Z
	DD	FLAT:?Load@PersistClass@@UAE_NAAVChunkLoadClass@@@Z
CONST	ENDS
;	COMDAT ??_7PostLoadableClass@@6B@
CONST	SEGMENT
??_7PostLoadableClass@@6B@ DD FLAT:??_R4PostLoadableClass@@6B@ ; PostLoadableClass::`vftable'
	DD	FLAT:??_EPostLoadableClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAVWideStringClass@@@std@@YA$$QAVWideStringClass@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVWideStringClass@@@std@@YA$$QAVWideStringClass@@AAV1@@Z PROC ; std::move<WideStringClass &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAVWideStringClass@@@std@@YA$$QAVWideStringClass@@AAV1@@Z ENDP ; std::move<WideStringClass &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__F_TranslateObjPersistFactory@@YAXXZ
text$yd	SEGMENT
??__F_TranslateObjPersistFactory@@YAXXZ PROC		; `dynamic atexit destructor for '_TranslateObjPersistFactory'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?_TranslateObjPersistFactory@@3V?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@A ; _TranslateObjPersistFactory
	call	??1?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__F_TranslateObjPersistFactory@@YAXXZ ENDP		; `dynamic atexit destructor for '_TranslateObjPersistFactory''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ??__E_TranslateObjPersistFactory@@YAXXZ
text$yc	SEGMENT
??__E_TranslateObjPersistFactory@@YAXXZ PROC		; `dynamic initializer for '_TranslateObjPersistFactory'', COMDAT

; 16   : SimplePersistFactoryClass<TDBObjClass,589825> _TranslateObjPersistFactory;

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?_TranslateObjPersistFactory@@3V?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@A ; _TranslateObjPersistFactory
	call	??0?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@QAE@XZ
	push	OFFSET ??__F_TranslateObjPersistFactory@@YAXXZ ; `dynamic atexit destructor for '_TranslateObjPersistFactory''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_TranslateObjPersistFactory@@YAXXZ ENDP		; `dynamic initializer for '_TranslateObjPersistFactory''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAEPAXI@Z PROC ; SimplePersistFactoryClass<TDBObjClass,589825>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAEPAXI@Z ENDP ; SimplePersistFactoryClass<TDBObjClass,589825>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAE@XZ PROC ; SimplePersistFactoryClass<TDBObjClass,589825>::~SimplePersistFactoryClass<TDBObjClass,589825>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PersistFactoryClass@@UAE@XZ		; PersistFactoryClass::~PersistFactoryClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UAE@XZ ENDP ; SimplePersistFactoryClass<TDBObjClass,589825>::~SimplePersistFactoryClass<TDBObjClass,589825>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@QAE@XZ PROC ; SimplePersistFactoryClass<TDBObjClass,589825>::SimplePersistFactoryClass<TDBObjClass,589825>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PersistFactoryClass@@QAE@XZ		; PersistFactoryClass::PersistFactoryClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@QAE@XZ ENDP ; SimplePersistFactoryClass<TDBObjClass,589825>::SimplePersistFactoryClass<TDBObjClass,589825>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\simplepersistfactoryclass.h
;	COMDAT ?Save@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEXAAVChunkSaveClass@@PAVPersistClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xSave$ = 8						; size = 4
_persist$ = 12						; size = 4
?Save@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEXAAVChunkSaveClass@@PAVPersistClass@@@Z PROC ; SimplePersistFactoryClass<TDBObjClass,589825>::Save, COMDAT
; _this$ = ecx

; 40   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		xSave.Begin_Chunk(0x100100);

	push	1048832					; 00100100H
	mov	ecx, DWORD PTR _xSave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 42   : 		xSave.Write(&persist,4);

	push	4
	lea	eax, DWORD PTR _persist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write

; 43   : 		xSave.End_Chunk();

	mov	ecx, DWORD PTR _xSave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 44   : 		xSave.Begin_Chunk(0x100101);

	push	1048833					; 00100101H
	mov	ecx, DWORD PTR _xSave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 45   : 		persist->Save(xSave);

	mov	eax, DWORD PTR _xSave$[ebp]
	push	eax
	mov	ecx, DWORD PTR _persist$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _persist$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 46   : 		xSave.End_Chunk();

	mov	ecx, DWORD PTR _xSave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Save@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEXAAVChunkSaveClass@@PAVPersistClass@@@Z ENDP ; SimplePersistFactoryClass<TDBObjClass,589825>::Save
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\simplepersistfactoryclass.h
;	COMDAT ?Load@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEPAVPersistClass@@AAVChunkLoadClass@@@Z
_TEXT	SEGMENT
tv77 = -88						; size = 4
tv79 = -84						; size = 4
$T1 = -80						; size = 4
_pointer$ = -12						; size = 4
_newobj$ = -8						; size = 4
_this$ = -4						; size = 4
_xLoad$ = 8						; size = 4
?Load@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEPAVPersistClass@@AAVChunkLoadClass@@@Z PROC ; SimplePersistFactoryClass<TDBObjClass,589825>::Load, COMDAT
; _this$ = ecx

; 27   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 		T *newobj = new T;

	push	OFFSET ??_C@_0DK@KEEKKCHH@SimplePersistFactoryClass?$DMclass?5@
	push	28					; 0000001cH
	push	OFFSET ??_C@_0EF@BPIDEJHJ@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Load
	xor	ecx, ecx
	jne	SHORT $LN3@Load
	push	28					; 0000001cH
	push	OFFSET ??_C@_1IK@JLMLKCKA@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Load:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN7@Load
$LN6@Load:
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Load
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0TDBObjClass@@QAE@XZ			; TDBObjClass::TDBObjClass
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Load
$LN4@Load:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Load:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN7@Load:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _newobj$[ebp], ecx

; 29   : 		void *pointer;
; 30   : 		xLoad.Open_Chunk();

	mov	ecx, DWORD PTR _xLoad$[ebp]
	call	?Open_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Open_Chunk

; 31   : 		xLoad.Read(&pointer,4);

	push	4
	lea	eax, DWORD PTR _pointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xLoad$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read

; 32   : 		xLoad.Close_Chunk();

	mov	ecx, DWORD PTR _xLoad$[ebp]
	call	?Close_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Close_Chunk

; 33   : 		xLoad.Open_Chunk();

	mov	ecx, DWORD PTR _xLoad$[ebp]
	call	?Open_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Open_Chunk

; 34   : 		newobj->Load(xLoad);

	mov	eax, DWORD PTR _xLoad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newobj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _newobj$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 35   : 		xLoad.Close_Chunk();

	mov	ecx, DWORD PTR _xLoad$[ebp]
	call	?Close_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Close_Chunk

; 36   : 		SaveLoadSystemClass::Register_Pointer(pointer,newobj);

	mov	eax, DWORD PTR _newobj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pointer$[ebp]
	push	ecx
	call	?Register_Pointer@SaveLoadSystemClass@@SAXPAX0@Z ; SaveLoadSystemClass::Register_Pointer
	add	esp, 8

; 37   : 		return newobj;

	mov	eax, DWORD PTR _newobj$[ebp]

; 38   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEPAVPersistClass@@AAVChunkLoadClass@@@Z ENDP ; SimplePersistFactoryClass<TDBObjClass,589825>::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\simplepersistfactoryclass.h
;	COMDAT ?Chunk_ID@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Chunk_ID@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEIXZ PROC ; SimplePersistFactoryClass<TDBObjClass,589825>::Chunk_ID, COMDAT
; _this$ = ecx

; 23   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 		return I;

	mov	eax, 589825				; 00090001H

; 25   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Chunk_ID@?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@UBEIXZ ENDP ; SimplePersistFactoryClass<TDBObjClass,589825>::Chunk_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.h
;	COMDAT ?Is_Single_Language_Export_Enabled@TranslateDBClass@@SA_NXZ
_TEXT	SEGMENT
?Is_Single_Language_Export_Enabled@TranslateDBClass@@SA_NXZ PROC ; TranslateDBClass::Is_Single_Language_Export_Enabled, COMDAT

; 155  : 	static bool Is_Single_Language_Export_Enabled() { return IsSingleLanguageExport; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ?IsSingleLanguageExport@TranslateDBClass@@0AA_NA ; TranslateDBClass::IsSingleLanguageExport
	mov	al, BYTE PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Single_Language_Export_Enabled@TranslateDBClass@@SA_NXZ ENDP ; TranslateDBClass::Is_Single_Language_Export_Enabled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.h
;	COMDAT ?Get_Current_Language@TranslateDBClass@@SAIXZ
_TEXT	SEGMENT
?Get_Current_Language@TranslateDBClass@@SAIXZ PROC	; TranslateDBClass::Get_Current_Language, COMDAT

; 153  : 	static uint32 Get_Current_Language() { return m_LanguageID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ?m_LanguageID@TranslateDBClass@@0AAIA ; TranslateDBClass::m_LanguageID
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Language@TranslateDBClass@@SAIXZ ENDP	; TranslateDBClass::Get_Current_Language
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GTDBObjClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTDBObjClass@@UAEPAXI@Z PROC				; TDBObjClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TDBObjClass@@UAE@XZ			; TDBObjClass::~TDBObjClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTDBObjClass@@UAEPAXI@Z ENDP				; TDBObjClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$DynamicVectorClass@VWideStringClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$DynamicVectorClass@VWideStringClass@@@@UAEPAXI@Z PROC ; DynamicVectorClass<WideStringClass>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$DynamicVectorClass@VWideStringClass@@@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$DynamicVectorClass@VWideStringClass@@@@UAEPAXI@Z ENDP ; DynamicVectorClass<WideStringClass>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$DynamicVectorClass@VWideStringClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$DynamicVectorClass@VWideStringClass@@@@UAE@XZ PROC	; DynamicVectorClass<WideStringClass>::~DynamicVectorClass<WideStringClass>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@VWideStringClass@@@@UAE@XZ ; VectorClass<WideStringClass>::~VectorClass<WideStringClass>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynamicVectorClass@VWideStringClass@@@@UAE@XZ ENDP	; DynamicVectorClass<WideStringClass>::~DynamicVectorClass<WideStringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z PROC ; DynamicVectorClass<WideStringClass>::ID, COMDAT
; _this$ = ecx

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 		for (int index = 0; index < Count(); index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
	cmp	DWORD PTR _index$1[ebp], eax
	jge	SHORT $LN2@ID

; 477  : 		{
; 478  : 			if ((*this)[index] == object)

	mov	ecx, DWORD PTR _object$[ebp]
	call	??BWideStringClass@@QBEPB_WXZ		; WideStringClass::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	??8WideStringClass@@QBE_NPB_W@Z		; WideStringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ID

; 479  : 			{
; 480  : 				return(index);

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN5@ID
$LN1@ID:

; 481  : 			}
; 482  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 483  : 		return -1;

	or	eax, -1
$LN5@ID:

; 484  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z ENDP ; DynamicVectorClass<WideStringClass>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z PROC ; DynamicVectorClass<WideStringClass>::ID, COMDAT
; _this$ = ecx

; 471  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 		return(VectorClass<T>::ID(ptr));

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ID@?$VectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z ; VectorClass<WideStringClass>::ID

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$DynamicVectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z ENDP ; DynamicVectorClass<WideStringClass>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_N$$QAVWideStringClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_N$$QAVWideStringClass@@@Z PROC ; DynamicVectorClass<WideStringClass>::Add, COMDAT
; _this$ = ecx

; 376  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 378  : 		{
; 379  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 380  : 			{
; 381  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 382  : 				{
; 383  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 384  : 				}
; 385  : 			}
; 386  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 387  : 			{
; 388  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 389  : 			}
; 390  : 		}
; 391  : 		(*this)[ActiveCount++] = std::move(object);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _object$[ebp]
	push	edx
	call	??$move@AAVWideStringClass@@@std@@YA$$QAVWideStringClass@@AAV1@@Z ; std::move<WideStringClass &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	??4WideStringClass@@QAEABV0@ABV0@@Z	; WideStringClass::operator=

; 392  : 		return true;

	mov	al, 1
$LN6@Add:

; 393  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_N$$QAVWideStringClass@@@Z ENDP ; DynamicVectorClass<WideStringClass>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_NABVWideStringClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_NABVWideStringClass@@@Z PROC ; DynamicVectorClass<WideStringClass>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _object$[ebp]
	push	edx
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	??4WideStringClass@@QAEABV0@ABV0@@Z	; WideStringClass::operator=

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_NABVWideStringClass@@@Z ENDP ; DynamicVectorClass<WideStringClass>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ PROC ; DynamicVectorClass<WideStringClass>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ENDP ; DynamicVectorClass<WideStringClass>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$DynamicVectorClass@VWideStringClass@@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$DynamicVectorClass@VWideStringClass@@@@UAEXXZ PROC ; DynamicVectorClass<WideStringClass>::Clear, COMDAT
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 303  : 		VectorClass<T>::Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@VWideStringClass@@@@UAEXXZ ; VectorClass<WideStringClass>::Clear

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$DynamicVectorClass@VWideStringClass@@@@UAEXXZ ENDP ; DynamicVectorClass<WideStringClass>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$DynamicVectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$DynamicVectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z PROC ; DynamicVectorClass<WideStringClass>::Resize, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (VectorClass<T>::Resize(newsize, array))

	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@?$VectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z ; VectorClass<WideStringClass>::Resize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Resize

; 291  : 		{
; 292  : 			if (Length() < ActiveCount)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jge	SHORT $LN1@Resize

; 293  : 			{
; 294  : 				ActiveCount = Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Resize:

; 295  : 			}
; 296  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Resize
$LN2@Resize:

; 297  : 		}
; 298  : 		return false;

	xor	al, al
$LN3@Resize:

; 299  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$DynamicVectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z ENDP ; DynamicVectorClass<WideStringClass>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$DynamicVectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??4?$DynamicVectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z PROC ; DynamicVectorClass<WideStringClass>::operator=, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		VectorClass<T>::operator =(rvalue);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$VectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z ; VectorClass<WideStringClass>::operator=

; 256  : 		ActiveCount = rvalue.ActiveCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 257  : 		GrowthStep = rvalue.GrowthStep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 258  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 259  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$DynamicVectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z ENDP ; DynamicVectorClass<WideStringClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$DynamicVectorClass@VWideStringClass@@@@QAE@IPBVWideStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$DynamicVectorClass@VWideStringClass@@@@QAE@IPBVWideStringClass@@@Z PROC ; DynamicVectorClass<WideStringClass>::DynamicVectorClass<WideStringClass>, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$VectorClass@VWideStringClass@@@@QAE@HPBVWideStringClass@@@Z ; VectorClass<WideStringClass>::VectorClass<WideStringClass>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$DynamicVectorClass@VWideStringClass@@@@6B@

; 244  : 		GrowthStep = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 10			; 0000000aH

; 245  : 		ActiveCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 246  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$DynamicVectorClass@VWideStringClass@@@@QAE@IPBVWideStringClass@@@Z ENDP ; DynamicVectorClass<WideStringClass>::DynamicVectorClass<WideStringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$VectorClass@VWideStringClass@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VectorClass@VWideStringClass@@@@UAEPAXI@Z PROC	; VectorClass<WideStringClass>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VectorClass@VWideStringClass@@@@UAE@XZ ; VectorClass<WideStringClass>::~VectorClass<WideStringClass>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VectorClass@VWideStringClass@@@@UAEPAXI@Z ENDP	; VectorClass<WideStringClass>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?ID@?$VectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z PROC ; VectorClass<WideStringClass>::ID, COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@ID

; 213  : 		{
; 214  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ID
$LN5@ID:

; 215  : 		}
; 216  : 		for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@ID
$LN3@ID:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@ID:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ID

; 217  : 		{
; 218  : 			if ((*this)[index] == object)

	mov	ecx, DWORD PTR _object$[ebp]
	call	??BWideStringClass@@QBEPB_WXZ		; WideStringClass::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	??8WideStringClass@@QBE_NPB_W@Z		; WideStringClass::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ID

; 219  : 			{
; 220  : 				return index;

	mov	eax, DWORD PTR _index$1[ebp]
	jmp	SHORT $LN6@ID
$LN1@ID:

; 221  : 			}
; 222  : 		}

	jmp	SHORT $LN3@ID
$LN2@ID:

; 223  : 		return -1;

	or	eax, -1
$LN6@ID:

; 224  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@VWideStringClass@@@@UAEHABVWideStringClass@@@Z ENDP ; VectorClass<WideStringClass>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?ID@?$VectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ID@?$VectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z PROC ; VectorClass<WideStringClass>::ID, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (!IsValid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN1@ID

; 205  : 		{
; 206  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN2@ID
$LN1@ID:

; 207  : 		}
; 208  : 		return(((unsigned long)ptr - (unsigned long)&(*this)[0]) / sizeof(T));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, DWORD PTR _ptr$[ebp]
	sub	ecx, eax
	shr	ecx, 2
	mov	eax, ecx
$LN2@ID:

; 209  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ID@?$VectorClass@VWideStringClass@@@@UAEHPBVWideStringClass@@@Z ENDP ; VectorClass<WideStringClass>::ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ PROC	; VectorClass<WideStringClass>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ENDP	; VectorClass<WideStringClass>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Clear@?$VectorClass@VWideStringClass@@@@UAEXXZ
_TEXT	SEGMENT
tv82 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Clear@?$VectorClass@VWideStringClass@@@@UAEXXZ PROC	; VectorClass<WideStringClass>::Clear, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN3@Clear

; 191  : 		{
; 192  : 			if (IsAllocated) delete[] Vector;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN1@Clear
	push	OFFSET ??_C@_0CK@NCCEGELB@VectorClass?$DMclass?5WideStringClas@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Clear
	xor	ecx, ecx
	jne	SHORT $LN5@Clear
	push	192					; 000000c0H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Clear:
	jmp	SHORT $LN1@Clear
$LN8@Clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Clear
	push	3
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_EWideStringClass@@QAEPAXI@Z
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN1@Clear
$LN6@Clear:
	mov	DWORD PTR tv82[ebp], 0
$LN1@Clear:

; 193  : 			Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  : 			VectorMax = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 195  : 			IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN3@Clear:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$VectorClass@VWideStringClass@@@@UAEXXZ ENDP	; VectorClass<WideStringClass>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Resize@?$VectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z
_TEXT	SEGMENT
tv157 = -112						; size = 4
tv94 = -112						; size = 4
tv204 = -108						; size = 4
tv195 = -108						; size = 4
tv167 = -108						; size = 4
tv159 = -108						; size = 4
tv128 = -108						; size = 4
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
_index$7 = -16						; size = 4
_copycount$8 = -12					; size = 4
_newptr$9 = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_array$ = 12						; size = 4
?Resize@?$VectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z PROC ; VectorClass<WideStringClass>::Resize, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (newsize)

	cmp	DWORD PTR _newsize$[ebp], 0
	je	$LN10@Resize

; 149  : 		{
; 150  : 			T *newptr;
; 151  : 			IsValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 152  : 			if (!array)

	cmp	DWORD PTR _array$[ebp], 0
	jne	$LN9@Resize

; 153  : 			{
; 154  : 				newptr = new T[newsize];

	push	OFFSET ??_C@_0CL@GGJPOFFL@VectorClass?$DMclass?5WideStringClas@
	push	154					; 0000009aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN16@Resize
	xor	ecx, ecx
	jne	SHORT $LN13@Resize
	push	154					; 0000009aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN13@Resize:
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN17@Resize
$LN16@Resize:
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN14@Resize
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FWideStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN15@Resize
$LN14@Resize:
	mov	DWORD PTR tv94[ebp], 0
$LN15@Resize:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR tv128[ebp], eax
$LN17@Resize:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _newptr$9[ebp], ecx

; 155  : 			}
; 156  : 			else

	jmp	$LN8@Resize
$LN9@Resize:

; 157  : 			{
; 158  : 				newptr = new((void*)array) T[newsize];

	push	OFFSET ??_C@_0CL@GGJPOFFL@VectorClass?$DMclass?5WideStringClas@
	push	158					; 0000009eH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN21@Resize
	xor	ecx, ecx
	jne	SHORT $LN18@Resize
	push	158					; 0000009eH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN18@Resize:
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN22@Resize
$LN21@Resize:
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _array$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN19@Resize
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FWideStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T4[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	add	edx, 4
	mov	DWORD PTR tv157[ebp], edx
	jmp	SHORT $LN20@Resize
$LN19@Resize:
	mov	DWORD PTR tv157[ebp], 0
$LN20@Resize:
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv159[ebp], eax
$LN22@Resize:
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR _newptr$9[ebp], ecx
$LN8@Resize:

; 159  : 			}
; 160  : 			IsValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 161  : 			if (!newptr)

	cmp	DWORD PTR _newptr$9[ebp], 0
	jne	SHORT $LN7@Resize

; 162  : 			{
; 163  : 				return false;

	xor	al, al
	jmp	$LN11@Resize
$LN7@Resize:

; 164  : 			}
; 165  : 			if (Vector != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@Resize

; 166  : 			{
; 167  : 				int copycount = (newsize < VectorMax) ? newsize : VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN23@Resize
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN24@Resize
$LN23@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv167[ebp], ecx
$LN24@Resize:
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR _copycount$8[ebp], edx

; 168  : 				for (int index = 0; index < copycount; index++)

	mov	DWORD PTR _index$7[ebp], 0
	jmp	SHORT $LN5@Resize
$LN4@Resize:
	mov	eax, DWORD PTR _index$7[ebp]
	add	eax, 1
	mov	DWORD PTR _index$7[ebp], eax
$LN5@Resize:
	mov	eax, DWORD PTR _index$7[ebp]
	cmp	eax, DWORD PTR _copycount$8[ebp]
	jge	SHORT $LN3@Resize

; 169  : 				{
; 170  : 					newptr[index] = std::move(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$7[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$move@AAVWideStringClass@@@std@@YA$$QAVWideStringClass@@AAV1@@Z ; std::move<WideStringClass &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _index$7[ebp]
	mov	edx, DWORD PTR _newptr$9[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4]
	call	??4WideStringClass@@QAEABV0@ABV0@@Z	; WideStringClass::operator=

; 171  : 				}

	jmp	SHORT $LN4@Resize
$LN3@Resize:

; 172  : 				if (IsAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@Resize

; 173  : 				{
; 174  : 					delete[] Vector;

	push	OFFSET ??_C@_0CL@GGJPOFFL@VectorClass?$DMclass?5WideStringClas@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN28@Resize
	xor	ecx, ecx
	jne	SHORT $LN25@Resize
	push	174					; 000000aeH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN25@Resize:
	jmp	SHORT $LN29@Resize
$LN28@Resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN26@Resize
	push	3
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_EWideStringClass@@QAEPAXI@Z
	mov	DWORD PTR tv195[ebp], eax
	jmp	SHORT $LN29@Resize
$LN26@Resize:
	mov	DWORD PTR tv195[ebp], 0
$LN29@Resize:

; 175  : 					Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN6@Resize:

; 176  : 				}
; 177  : 			}
; 178  : 			Vector = newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newptr$9[ebp]
	mov	DWORD PTR [eax+4], ecx

; 179  : 			VectorMax = newsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 180  : 			IsAllocated = (Vector && !array);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN30@Resize
	cmp	DWORD PTR _array$[ebp], 0
	jne	SHORT $LN30@Resize
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN31@Resize
$LN30@Resize:
	mov	DWORD PTR tv204[ebp], 0
$LN31@Resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv204[ebp]
	mov	BYTE PTR [ecx+13], dl

; 181  : 		}
; 182  : 		else

	jmp	SHORT $LN1@Resize
$LN10@Resize:

; 183  : 		{
; 184  : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@Resize:

; 185  : 		}
; 186  : 		return true;

	mov	al, 1
$LN11@Resize:

; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Resize@?$VectorClass@VWideStringClass@@@@UAE_NHPBVWideStringClass@@@Z ENDP ; VectorClass<WideStringClass>::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??8?$VectorClass@VWideStringClass@@@@UBE_NABV0@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??8?$VectorClass@VWideStringClass@@@@UBE_NABV0@@Z PROC	; VectorClass<WideStringClass>::operator==, COMDAT
; _this$ = ecx

; 132  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (VectorMax == vector.Length())

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN5@operator

; 134  : 		{
; 135  : 			for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@operator

; 136  : 			{
; 137  : 				if (Vector[index] != vector[index])

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@VWideStringClass@@@@QBEABVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	??BWideStringClass@@QBEPB_WXZ		; WideStringClass::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _index$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	call	??9WideStringClass@@QBE_NPB_W@Z		; WideStringClass::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator

; 138  : 				{
; 139  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:

; 140  : 				}
; 141  : 			}

	jmp	SHORT $LN3@operator
$LN2@operator:

; 142  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@operator
$LN5@operator:

; 143  : 		}
; 144  : 		return false;

	xor	al, al
$LN6@operator:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$VectorClass@VWideStringClass@@@@UBE_NABV0@@Z ENDP	; VectorClass<WideStringClass>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@VWideStringClass@@@@QBEABVWideStringClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@VWideStringClass@@@@QBEABVWideStringClass@@H@Z PROC ; VectorClass<WideStringClass>::operator[], COMDAT
; _this$ = ecx

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 129  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@VWideStringClass@@@@QBEABVWideStringClass@@H@Z ENDP ; VectorClass<WideStringClass>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z PROC ; VectorClass<WideStringClass>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ENDP ; VectorClass<WideStringClass>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$VectorClass@VWideStringClass@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VectorClass@VWideStringClass@@@@UAE@XZ PROC	; VectorClass<WideStringClass>::~VectorClass<WideStringClass>, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@VWideStringClass@@@@6B@

; 118  : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$VectorClass@VWideStringClass@@@@UAEXXZ ; VectorClass<WideStringClass>::Clear

; 119  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VectorClass@VWideStringClass@@@@UAE@XZ ENDP	; VectorClass<WideStringClass>::~VectorClass<WideStringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??4?$VectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv134 = -88						; size = 4
tv136 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_index$3 = -8						; size = 4
_this$ = -4						; size = 4
_vector$ = 8						; size = 4
??4?$VectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z PROC ; VectorClass<WideStringClass>::operator=, COMDAT
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 		if (this != &vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _vector$[ebp]
	je	$LN7@operator

; 70   : 		{
; 71   : 			Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 72   : 			VectorMax = vector.Length();

	mov	ecx, DWORD PTR _vector$[ebp]
	call	?Length@?$VectorClass@VWideStringClass@@@@QBEHXZ ; VectorClass<WideStringClass>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 73   : 			if (VectorMax)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@operator

; 74   : 			{
; 75   : 				Vector = new T[VectorMax];

	push	OFFSET ??_C@_0CP@BIPNANLO@VectorClass?$DMclass?5WideStringClas@
	push	75					; 0000004bH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN13@operator
	xor	ecx, ecx
	jne	SHORT $LN10@operator
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@operator:
	mov	DWORD PTR tv136[ebp], 0
	jmp	SHORT $LN14@operator
$LN13@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN11@operator
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FWideStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN12@operator
$LN11@operator:
	mov	DWORD PTR tv134[ebp], 0
$LN12@operator:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv136[ebp], eax
$LN14@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv136[ebp]
	mov	DWORD PTR [ecx+4], edx

; 76   : 				if (Vector)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@operator

; 77   : 				{
; 78   : 					IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1

; 79   : 					for (int index = 0; index < VectorMax; index++)

	mov	DWORD PTR _index$3[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _index$3[ebp]
	add	eax, 1
	mov	DWORD PTR _index$3[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@operator

; 80   : 					{
; 81   : 						Vector[index] = vector[index];

	mov	eax, DWORD PTR _index$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	call	??A?$VectorClass@VWideStringClass@@@@QBEABVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _index$3[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	call	??4WideStringClass@@QAEABV0@ABV0@@Z	; WideStringClass::operator=

; 82   : 					}

	jmp	SHORT $LN3@operator
$LN5@operator:

; 83   : 				}
; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN7@operator
$LN6@operator:

; 86   : 			{
; 87   : 				Vector = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 88   : 				IsAllocated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0
$LN7@operator:

; 89   : 			}
; 90   : 		}
; 91   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 92   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z ENDP ; VectorClass<WideStringClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$VectorClass@VWideStringClass@@@@QAE@HPBVWideStringClass@@@Z
_TEXT	SEGMENT
tv163 = -92						; size = 4
tv132 = -92						; size = 4
tv165 = -88						; size = 4
tv134 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
$T3 = -76						; size = 4
$T4 = -72						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_array$ = 12						; size = 4
??0?$VectorClass@VWideStringClass@@@@QAE@HPBVWideStringClass@@@Z PROC ; VectorClass<WideStringClass>::VectorClass<WideStringClass>, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$VectorClass@VWideStringClass@@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 0

; 50   : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN4@VectorClas

; 51   : 		{
; 52   : 			if (array)

	cmp	DWORD PTR _array$[ebp], 0
	je	$LN2@VectorClas

; 53   : 			{
; 54   : 				Vector = new((void*)array) T[size];

	push	OFFSET ??_C@_0DA@IALOHAFG@VectorClass?$DMclass?5WideStringClas@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN9@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN6@VectorClas
	push	54					; 00000036H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@VectorClas:
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN10@VectorClas
$LN9@VectorClas:
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _array$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXIPAX@Z			; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@VectorClas
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FWideStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv132[ebp], edx
	jmp	SHORT $LN8@VectorClas
$LN7@VectorClas:
	mov	DWORD PTR tv132[ebp], 0
$LN8@VectorClas:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN10@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			}
; 56   : 			else

	jmp	$LN4@VectorClas
$LN2@VectorClas:

; 57   : 			{
; 58   : 				Vector = new T[size];

	push	OFFSET ??_C@_0DA@IALOHAFG@VectorClass?$DMclass?5WideStringClas@
	push	58					; 0000003aH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN14@VectorClas
	xor	ecx, ecx
	jne	SHORT $LN11@VectorClas
	push	58					; 0000003aH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN11@VectorClas:
	mov	DWORD PTR tv165[ebp], 0
	jmp	SHORT $LN15@VectorClas
$LN14@VectorClas:
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN12@VectorClas
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??_FWideStringClass@@QAEXXZ
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T4[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	add	edx, 4
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN13@VectorClas
$LN12@VectorClas:
	mov	DWORD PTR tv163[ebp], 0
$LN13@VectorClas:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR tv165[ebp], eax
$LN15@VectorClas:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv165[ebp]
	mov	DWORD PTR [ecx+4], edx

; 59   : 				IsAllocated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+13], 1
$LN4@VectorClas:

; 60   : 			}
; 61   : 		}
; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$VectorClass@VWideStringClass@@@@QAE@HPBVWideStringClass@@@Z ENDP ; VectorClass<WideStringClass>::VectorClass<WideStringClass>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Load_Variables@TDBObjClass@@IAEXAAVChunkLoadClass@@@Z
_TEXT	SEGMENT
tv70 = -76						; size = 4
_str$1 = -8						; size = 4
_this$ = -4						; size = 4
_cload$ = 8						; size = 4
?Load_Variables@TDBObjClass@@IAEXAAVChunkLoadClass@@@Z PROC ; TDBObjClass::Load_Variables, COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN12@Load_Varia:

; 112  : 	while (cload.Open_Micro_Chunk ())

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Open_Micro_Chunk@ChunkLoadClass@@QAE_NXZ ; ChunkLoadClass::Open_Micro_Chunk
	movzx	eax, al
	test	eax, eax
	je	$LN13@Load_Varia

; 113  : 	{
; 114  : 		switch (cload.Cur_Micro_Chunk_ID ())

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_ID@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_ID
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	sub	eax, 1
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 6
	ja	$LN9@Load_Varia
	mov	ecx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN15@Load_Varia[ecx*4]
$LN8@Load_Varia:

; 115  : 		{
; 116  : 			READ_MICRO_CHUNK(cload,1,ID);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	jmp	$LN9@Load_Varia
$LN7@Load_Varia:

; 117  : 			READ_MICRO_CHUNK(cload,5,SoundID);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	jmp	$LN9@Load_Varia
$LN6@Load_Varia:

; 118  : 			READ_MICRO_CHUNK(cload,7,CategoryID);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	jmp	$LN9@Load_Varia
$LN5@Load_Varia:

; 119  : 			READ_MICRO_CHUNK_WWSTRING(cload,2,IDDesc);

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Buffer@StringClass@@QAEPADH@Z	; StringClass::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	jmp	$LN9@Load_Varia
$LN4@Load_Varia:

; 120  : 			READ_MICRO_CHUNK_WWSTRING(cload,4,EnglishString);

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Get_Buffer@StringClass@@QAEPADH@Z	; StringClass::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	jmp	SHORT $LN9@Load_Varia
$LN3@Load_Varia:

; 121  : 			READ_MICRO_CHUNK_WWSTRING(cload,6,AnimationName);

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Get_Buffer@StringClass@@QAEPADH@Z	; StringClass::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	jmp	SHORT $LN9@Load_Varia
$LN2@Load_Varia:

; 122  : 			case 3:
; 123  : 			{
; 124  : 				WideStringClass str;

	push	0
	push	0
	lea	ecx, DWORD PTR _str$1[ebp]
	call	??0WideStringClass@@QAE@H_N@Z		; WideStringClass::WideStringClass

; 125  : 				cload.Read(str.Get_Buffer((cload.Cur_Micro_Chunk_Length() + 1) * 2),cload.Cur_Micro_Chunk_Length());

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_Length
	lea	eax, DWORD PTR [eax+eax+2]
	push	eax
	lea	ecx, DWORD PTR _str$1[ebp]
	call	?Get_Buffer@WideStringClass@@QAEPA_WH@Z	; WideStringClass::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read

; 126  : 				TranslatedStrings.Add(str);

	lea	eax, DWORD PTR _str$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_NABVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::Add

; 127  : 			}

	lea	ecx, DWORD PTR _str$1[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
$LN9@Load_Varia:

; 128  : 			default:
; 129  : 				break;
; 130  : 		}
; 131  : 		cload.Close_Micro_Chunk();

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Close_Micro_Chunk@ChunkLoadClass@@QAE_NXZ ; ChunkLoadClass::Close_Micro_Chunk

; 132  : 	}

	jmp	$LN12@Load_Varia
$LN13@Load_Varia:

; 133  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN15@Load_Varia:
	DD	$LN8@Load_Varia
	DD	$LN5@Load_Varia
	DD	$LN2@Load_Varia
	DD	$LN4@Load_Varia
	DD	$LN7@Load_Varia
	DD	$LN3@Load_Varia
	DD	$LN6@Load_Varia
?Load_Variables@TDBObjClass@@IAEXAAVChunkLoadClass@@@Z ENDP ; TDBObjClass::Load_Variables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Save_Variables@TDBObjClass@@IAEXAAVChunkSaveClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_csave$ = 8						; size = 4
?Save_Variables@TDBObjClass@@IAEXAAVChunkSaveClass@@@Z PROC ; TDBObjClass::Save_Variables, COMDAT
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 	WRITE_MICRO_CHUNK(csave,1,ID);

	push	1
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z ; ChunkSaveClass::Begin_Micro_Chunk
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ ; ChunkSaveClass::End_Micro_Chunk

; 104  : 	WRITE_MICRO_CHUNK(csave,5,SoundID);

	push	5
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z ; ChunkSaveClass::Begin_Micro_Chunk
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ ; ChunkSaveClass::End_Micro_Chunk

; 105  : 	WRITE_MICRO_CHUNK(csave,7,CategoryID);

	push	7
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z ; ChunkSaveClass::Begin_Micro_Chunk
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ ; ChunkSaveClass::End_Micro_Chunk

; 106  : 	WRITE_MICRO_CHUNK_WWSTRING(csave,2,IDDesc);

	push	2
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z ; ChunkSaveClass::Begin_Micro_Chunk
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ ; ChunkSaveClass::End_Micro_Chunk

; 107  : 	WRITE_MICRO_CHUNK_WWSTRING(csave,6,AnimationName);

	push	6
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z ; ChunkSaveClass::Begin_Micro_Chunk
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ ; ChunkSaveClass::End_Micro_Chunk

; 108  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save_Variables@TDBObjClass@@IAEXAAVChunkSaveClass@@@Z ENDP ; TDBObjClass::Save_Variables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Contains_Translation@TDBObjClass@@UAE_NI@Z
_TEXT	SEGMENT
tv79 = -72						; size = 4
_this$ = -4						; size = 4
_language$ = 8						; size = 4
?Contains_Translation@TDBObjClass@@UAE_NI@Z PROC	; TDBObjClass::Contains_Translation, COMDAT
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	if ((int)language < TranslatedStrings.Count())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
	cmp	DWORD PTR _language$[ebp], eax
	jge	SHORT $LN1@Contains_T

; 193  : 	{
; 194  : 		return TranslatedStrings[language].Get_Length() > 0;

	mov	eax, DWORD PTR _language$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	test	eax, eax
	jle	SHORT $LN4@Contains_T
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN5@Contains_T
$LN4@Contains_T:
	mov	DWORD PTR tv79[ebp], 0
$LN5@Contains_T:
	mov	al, BYTE PTR tv79[ebp]
	jmp	SHORT $LN2@Contains_T
$LN1@Contains_T:

; 195  : 	}
; 196  : 	return false;

	xor	al, al
$LN2@Contains_T:

; 197  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Contains_Translation@TDBObjClass@@UAE_NI@Z ENDP	; TDBObjClass::Contains_Translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Set_Category_ID@TDBObjClass@@UAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Set_Category_ID@TDBObjClass@@UAEXI@Z PROC		; TDBObjClass::Set_Category_ID, COMDAT
; _this$ = ecx

; 46   : 	virtual void							Set_Category_ID (uint32 id)				{ CategoryID = id; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+24], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Category_ID@TDBObjClass@@UAEXI@Z ENDP		; TDBObjClass::Set_Category_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Set_Sound_ID@TDBObjClass@@UAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Set_Sound_ID@TDBObjClass@@UAEXI@Z PROC			; TDBObjClass::Set_Sound_ID, COMDAT
; _this$ = ecx

; 45   : 	virtual void							Set_Sound_ID (uint32 id)					{ SoundID = id; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+20], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Sound_ID@TDBObjClass@@UAEXI@Z ENDP			; TDBObjClass::Set_Sound_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Set_Animation_Name@TDBObjClass@@UAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Set_Animation_Name@TDBObjClass@@UAEXPBD@Z PROC		; TDBObjClass::Set_Animation_Name, COMDAT
; _this$ = ecx

; 44   : 	virtual void							Set_Animation_Name (const char *name)	{ AnimationName = name; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Animation_Name@TDBObjClass@@UAEXPBD@Z ENDP		; TDBObjClass::Set_Animation_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Set_ID_Desc@TDBObjClass@@UAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_description$ = 8					; size = 4
?Set_ID_Desc@TDBObjClass@@UAEXPBD@Z PROC		; TDBObjClass::Set_ID_Desc, COMDAT
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 	IDDesc = description;

	mov	eax, DWORD PTR _description$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 160  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_ID_Desc@TDBObjClass@@UAEXPBD@Z ENDP		; TDBObjClass::Set_ID_Desc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Set_ID@TDBObjClass@@UAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Set_ID@TDBObjClass@@UAEXI@Z PROC			; TDBObjClass::Set_ID, COMDAT
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 148  : // keeping most of this here because I can't figure out why it's being done
; 149  : // 	if (!TranslateDBClass::Find_Object(ID))
; 150  : // 	{
; 151  : // 		TranslateDBClass::Clear_Object(this->ID - 1000);
; 152  : 		this->ID = ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 153  : // 		TranslateDBClass::Add_Object(this);
; 154  : // 	}
; 155  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_ID@TDBObjClass@@UAEXI@Z ENDP			; TDBObjClass::Set_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Set_English_String@TDBObjClass@@UAEXPBD@Z
_TEXT	SEGMENT
_str$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?Set_English_String@TDBObjClass@@UAEXPBD@Z PROC		; TDBObjClass::Set_English_String, COMDAT
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 	EnglishString = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN2@Set_Englis:

; 138  : 	while (TranslatedStrings.Count() <= 0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
	test	eax, eax
	jg	SHORT $LN1@Set_Englis

; 139  : 	{
; 140  : 		WideStringClass str("");

	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _str$1[ebp]
	call	??0WideStringClass@@QAE@PBD_N@Z		; WideStringClass::WideStringClass

; 141  : 		TranslatedStrings.Add(str);

	lea	eax, DWORD PTR _str$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_NABVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::Add

; 142  : 	}

	lea	ecx, DWORD PTR _str$1[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	jmp	SHORT $LN2@Set_Englis
$LN1@Set_Englis:

; 143  : 	TranslatedStrings[0].Convert_From(string);

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	?Convert_From@WideStringClass@@QAE_NPBD@Z ; WideStringClass::Convert_From

; 144  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_English_String@TDBObjClass@@UAEXPBD@Z ENDP		; TDBObjClass::Set_English_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Set_String@TDBObjClass@@UAEXIPB_W@Z
_TEXT	SEGMENT
_str$1 = -8						; size = 4
_this$ = -4						; size = 4
_language$ = 8						; size = 4
_string$ = 12						; size = 4
?Set_String@TDBObjClass@@UAEXIPB_W@Z PROC		; TDBObjClass::Set_String, COMDAT
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Set_String:

; 175  : 	while (TranslatedStrings.Count() <= (int)language)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
	cmp	eax, DWORD PTR _language$[ebp]
	jg	SHORT $LN3@Set_String

; 176  : 	{
; 177  : 		WideStringClass str("");

	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _str$1[ebp]
	call	??0WideStringClass@@QAE@PBD_N@Z		; WideStringClass::WideStringClass

; 178  : 		TranslatedStrings.Add(str);

	lea	eax, DWORD PTR _str$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_NABVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::Add

; 179  : 	}

	lea	ecx, DWORD PTR _str$1[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	jmp	SHORT $LN4@Set_String
$LN3@Set_String:

; 180  : 	if (string)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN2@Set_String

; 181  : 	{
; 182  : 		TranslatedStrings[language] = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _language$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	??4WideStringClass@@QAEABV0@PB_W@Z	; WideStringClass::operator=
$LN2@Set_String:

; 183  : 	}
; 184  : 	if (!language)

	cmp	DWORD PTR _language$[ebp], 0
	jne	SHORT $LN5@Set_String

; 185  : 	{
; 186  : 		EnglishString.Copy_Wide(string);

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Copy_Wide@StringClass@@QAE_NPB_W@Z	; StringClass::Copy_Wide
$LN5@Set_String:

; 187  : 	}
; 188  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set_String@TDBObjClass@@UAEXIPB_W@Z ENDP		; TDBObjClass::Set_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Get_Category_ID@TDBObjClass@@UAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Category_ID@TDBObjClass@@UAEIXZ PROC		; TDBObjClass::Get_Category_ID, COMDAT
; _this$ = ecx

; 39   : 	virtual uint32							Get_Category_ID (void)				{ return CategoryID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Category_ID@TDBObjClass@@UAEIXZ ENDP		; TDBObjClass::Get_Category_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Get_Animation_Name@TDBObjClass@@UAEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Animation_Name@TDBObjClass@@UAEABVStringClass@@XZ PROC ; TDBObjClass::Get_Animation_Name, COMDAT
; _this$ = ecx

; 38   : 	virtual const StringClass &		Get_Animation_Name (void)			{ return AnimationName; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Animation_Name@TDBObjClass@@UAEABVStringClass@@XZ ENDP ; TDBObjClass::Get_Animation_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Get_Sound_ID@TDBObjClass@@UAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Sound_ID@TDBObjClass@@UAEIXZ PROC			; TDBObjClass::Get_Sound_ID, COMDAT
; _this$ = ecx

; 37   : 	virtual uint32							Get_Sound_ID (void)					{ return SoundID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Sound_ID@TDBObjClass@@UAEIXZ ENDP			; TDBObjClass::Get_Sound_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Get_ID_Desc@TDBObjClass@@UAEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID_Desc@TDBObjClass@@UAEABVStringClass@@XZ PROC	; TDBObjClass::Get_ID_Desc, COMDAT
; _this$ = ecx

; 36   : 	virtual const StringClass &		Get_ID_Desc (void)					{ return IDDesc; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID_Desc@TDBObjClass@@UAEABVStringClass@@XZ ENDP	; TDBObjClass::Get_ID_Desc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Get_ID@TDBObjClass@@UAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@TDBObjClass@@UAEIXZ PROC			; TDBObjClass::Get_ID, COMDAT
; _this$ = ecx

; 35   : 	virtual uint32							Get_ID (void)							{ return ID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@TDBObjClass@@UAEIXZ ENDP			; TDBObjClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Get_English_String@TDBObjClass@@UAEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_English_String@TDBObjClass@@UAEABVStringClass@@XZ PROC ; TDBObjClass::Get_English_String, COMDAT
; _this$ = ecx

; 34   : 	virtual const StringClass &		Get_English_String (void)			{ return EnglishString; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_English_String@TDBObjClass@@UAEABVStringClass@@XZ ENDP ; TDBObjClass::Get_English_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Get_String@TDBObjClass@@UAEABVWideStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_String@TDBObjClass@@UAEABVWideStringClass@@XZ PROC	; TDBObjClass::Get_String, COMDAT
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 	return Get_String(TranslateDBClass::Get_Current_Language());

	call	?Get_Current_Language@TranslateDBClass@@SAIXZ ; TranslateDBClass::Get_Current_Language
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 165  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_String@TDBObjClass@@UAEABVWideStringClass@@XZ ENDP	; TDBObjClass::Get_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Get_String@TDBObjClass@@UAEABVWideStringClass@@I@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
_lang$ = -8						; size = 4
_this$ = -4						; size = 4
_language$ = 8						; size = 4
?Get_String@TDBObjClass@@UAEABVWideStringClass@@I@Z PROC ; TDBObjClass::Get_String, COMDAT
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 	int lang = (int)language < TranslatedStrings.Count() ? language : 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
	cmp	DWORD PTR _language$[ebp], eax
	jge	SHORT $LN3@Get_String
	mov	eax, DWORD PTR _language$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Get_String
$LN3@Get_String:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Get_String:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _lang$[ebp], ecx

; 170  : 	return TranslatedStrings[lang];

	mov	eax, DWORD PTR _lang$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]

; 171  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_String@TDBObjClass@@UAEABVWideStringClass@@I@Z ENDP ; TDBObjClass::Get_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?Clone@TDBObjClass@@UBEPAV1@XZ
_TEXT	SEGMENT
tv78 = -80						; size = 4
tv80 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?Clone@TDBObjClass@@UBEPAV1@XZ PROC			; TDBObjClass::Clone, COMDAT
; _this$ = ecx

; 31   : 	virtual TDBObjClass *				Clone (void) const					{ return new TDBObjClass (*this); }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??_C@_0BD@CCMPBDCA@TDBObjClass?3?3Clone?$AA@
	push	31					; 0000001fH
	push	OFFSET ??_C@_0DH@IIMPGHLA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN6@Clone
	xor	ecx, ecx
	jne	SHORT $LN3@Clone
	push	31					; 0000001fH
	push	OFFSET ??_C@_1GO@EICHNPCK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Clone:
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN7@Clone
$LN6@Clone:
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0TDBObjClass@@QAE@ABV0@@Z		; TDBObjClass::TDBObjClass
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@Clone
$LN4@Clone:
	mov	DWORD PTR tv78[ebp], 0
$LN5@Clone:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv80[ebp], ecx
$LN7@Clone:
	mov	eax, DWORD PTR tv80[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clone@TDBObjClass@@UBEPAV1@XZ ENDP			; TDBObjClass::Clone
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Load@TDBObjClass@@UAE_NAAVChunkLoadClass@@@Z
_TEXT	SEGMENT
tv70 = -80						; size = 4
$T1 = -76						; size = 4
_string$2 = -8						; size = 4
_this$ = -4						; size = 4
_cload$ = 8						; size = 4
?Load@TDBObjClass@@UAE_NAAVChunkLoadClass@@@Z PROC	; TDBObjClass::Load, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN8@Load:

; 78   : 	while (cload.Open_Chunk())

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Open_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Open_Chunk
	movzx	eax, al
	test	eax, eax
	je	$LN7@Load

; 79   : 	{
; 80   : 		switch(cload.Cur_Chunk_ID()) 

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ	; ChunkLoadClass::Cur_Chunk_ID
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 101978376		; 06141108H
	je	SHORT $LN4@Load
	cmp	DWORD PTR tv70[ebp], 101978378		; 0614110aH
	je	SHORT $LN3@Load
	cmp	DWORD PTR tv70[ebp], 101978379		; 0614110bH
	je	SHORT $LN2@Load
	jmp	$LN5@Load
$LN4@Load:

; 81   : 		{
; 82   : 			case 0x6141108:
; 83   : 				Load_Variables(cload);

	mov	eax, DWORD PTR _cload$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load_Variables@TDBObjClass@@IAEXAAVChunkLoadClass@@@Z ; TDBObjClass::Load_Variables

; 84   : 				break;

	jmp	SHORT $LN5@Load
$LN3@Load:

; 85   : 			READ_WWSTRING_CHUNK(cload,0x614110A,EnglishString);

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Get_Buffer@StringClass@@QAEPADH@Z	; StringClass::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	jmp	SHORT $LN5@Load
$LN2@Load:

; 86   : 			case 0x614110B:
; 87   : 				WideStringClass string;

	push	0
	push	0
	lea	ecx, DWORD PTR _string$2[ebp]
	call	??0WideStringClass@@QAE@H_N@Z		; WideStringClass::WideStringClass

; 88   : 				cload.Read(string.Get_Buffer((cload.Cur_Chunk_Length() + 1) / 2),cload.Cur_Chunk_Length());

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Chunk_Length
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Chunk_Length@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Chunk_Length
	add	eax, 1
	shr	eax, 1
	push	eax
	lea	ecx, DWORD PTR _string$2[ebp]
	call	?Get_Buffer@WideStringClass@@QAEPA_WH@Z	; WideStringClass::Get_Buffer
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read

; 89   : 				TranslatedStrings.Add(string);

	lea	eax, DWORD PTR _string$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_NABVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::Add

; 90   : 				break;

	lea	ecx, DWORD PTR _string$2[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
$LN5@Load:

; 91   : 		}
; 92   : 		cload.Close_Chunk();

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Close_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Close_Chunk

; 93   : 	}

	jmp	$LN8@Load
$LN7@Load:

; 94   : 	if (TranslatedStrings.Count() == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
	test	eax, eax
	jne	SHORT $LN1@Load

; 95   : 	{
; 96   : 		TranslatedStrings.Add(WideStringClass(EnglishString));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0WideStringClass@@QAE@PBD_N@Z		; WideStringClass::WideStringClass
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Add@?$DynamicVectorClass@VWideStringClass@@@@QAE_N$$QAVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::Add
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
$LN1@Load:

; 97   : 	}
; 98   : 	return true;

	mov	al, 1

; 99   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load@TDBObjClass@@UAE_NAAVChunkLoadClass@@@Z ENDP	; TDBObjClass::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Save@TDBObjClass@@UAE_NAAVChunkSaveClass@@@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_lang$2 = -8						; size = 4
_this$ = -4						; size = 4
_csave$ = 8						; size = 4
?Save@TDBObjClass@@UAE_NAAVChunkSaveClass@@@Z PROC	; TDBObjClass::Save, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	csave.Begin_Chunk(0x6141109);

	push	101978377				; 06141109H
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 51   : 	csave.End_Chunk();

	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 52   : 	csave.Begin_Chunk(0x6141108);

	push	101978376				; 06141108H
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 53   : 	Save_Variables(csave);

	mov	eax, DWORD PTR _csave$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save_Variables@TDBObjClass@@IAEXAAVChunkSaveClass@@@Z ; TDBObjClass::Save_Variables

; 54   : 	csave.End_Chunk();

	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 55   : 	WRITE_WWSTRING_CHUNK(csave,0x614110A,EnglishString);

	push	101978378				; 0614110aH
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 56   : 	if (TranslateDBClass::Is_Single_Language_Export_Enabled())

	call	?Is_Single_Language_Export_Enabled@TranslateDBClass@@SA_NXZ ; TranslateDBClass::Is_Single_Language_Export_Enabled
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@Save

; 57   : 	{
; 58   : 		int lang = TranslateDBClass::Get_Current_Language();

	call	?Get_Current_Language@TranslateDBClass@@SAIXZ ; TranslateDBClass::Get_Current_Language
	mov	DWORD PTR _lang$2[ebp], eax

; 59   : 		if (lang > TranslatedStrings.Count())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
	cmp	DWORD PTR _lang$2[ebp], eax
	jle	SHORT $LN5@Save

; 60   : 		{
; 61   : 			lang = 0;

	mov	DWORD PTR _lang$2[ebp], 0
$LN5@Save:

; 62   : 		}
; 63   : 		WRITE_WIDESTRING_CHUNK(csave,0x614110B,TranslatedStrings[lang]);

	push	101978379				; 0614110bH
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk
	mov	eax, DWORD PTR _lang$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	mov	edx, DWORD PTR _lang$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	?Peek_Buffer@WideStringClass@@QAEPA_WXZ	; WideStringClass::Peek_Buffer
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 64   : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@Save

; 65   : 	}
; 66   : 	else

	jmp	SHORT $LN7@Save
$LN6@Save:

; 67   : 	{
; 68   : 		for (int i = 0;i < TranslatedStrings.Count();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Save
$LN2@Save:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Save:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Count@?$DynamicVectorClass@VWideStringClass@@@@QBEHXZ ; DynamicVectorClass<WideStringClass>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN1@Save

; 69   : 		{
; 70   : 			WRITE_WIDESTRING_CHUNK(csave,0x614110B,TranslatedStrings[i]);

	push	101978379				; 0614110bH
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$VectorClass@VWideStringClass@@@@QAEAAVWideStringClass@@H@Z ; VectorClass<WideStringClass>::operator[]
	mov	ecx, eax
	call	?Peek_Buffer@WideStringClass@@QAEPA_WXZ	; WideStringClass::Peek_Buffer
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 71   : 		}

	jmp	SHORT $LN2@Save
$LN1@Save:

; 72   : 		return true;

	mov	al, 1
$LN7@Save:

; 73   : 	}
; 74   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save@TDBObjClass@@UAE_NAAVChunkSaveClass@@@Z ENDP	; TDBObjClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ?Get_Factory@TDBObjClass@@UBEABVPersistFactoryClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Factory@TDBObjClass@@UBEABVPersistFactoryClass@@XZ PROC ; TDBObjClass::Get_Factory, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	return _TranslateObjPersistFactory;

	mov	eax, OFFSET ?_TranslateObjPersistFactory@@3V?$SimplePersistFactoryClass@VTDBObjClass@@$0JAAAB@@@A ; _TranslateObjPersistFactory

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Factory@TDBObjClass@@UBEABVPersistFactoryClass@@XZ ENDP ; TDBObjClass::Get_Factory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.h
;	COMDAT ?As_StringTwiddlerClass@TDBObjClass@@UAEPAVStringTwiddlerClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?As_StringTwiddlerClass@TDBObjClass@@UAEPAVStringTwiddlerClass@@XZ PROC ; TDBObjClass::As_StringTwiddlerClass, COMDAT
; _this$ = ecx

; 27   : 	virtual StringTwiddlerClass *	As_StringTwiddlerClass (void)		{ return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?As_StringTwiddlerClass@TDBObjClass@@UAEPAVStringTwiddlerClass@@XZ ENDP ; TDBObjClass::As_StringTwiddlerClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ??4TDBObjClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_src$ = 8						; size = 4
??4TDBObjClass@@QAEABV0@ABV0@@Z PROC			; TDBObjClass::operator=, COMDAT
; _this$ = ecx

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 	TranslatedStrings = src.TranslatedStrings;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4?$DynamicVectorClass@VWideStringClass@@@@QAEAAV0@ABV0@@Z ; DynamicVectorClass<WideStringClass>::operator=

; 34   : 	EnglishString = src.EnglishString;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 35   : 	IDDesc = src.IDDesc;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 36   : 	ID = src.ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 37   : 	SoundID = src.SoundID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 38   : 	AnimationName = src.AnimationName;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 39   : 	CategoryID = src.CategoryID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 40   : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 41   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4TDBObjClass@@QAEABV0@ABV0@@Z ENDP			; TDBObjClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ??1TDBObjClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TDBObjClass@@UAE@XZ PROC				; TDBObjClass::~TDBObjClass, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TDBObjClass@@6B@

; 29   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$DynamicVectorClass@VWideStringClass@@@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PersistClass@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1TDBObjClass@@UAE@XZ ENDP				; TDBObjClass::~TDBObjClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ??0TDBObjClass@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_src$ = 8						; size = 4
??0TDBObjClass@@QAE@ABV0@@Z PROC			; TDBObjClass::TDBObjClass, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PersistClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TDBObjClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$DynamicVectorClass@VWideStringClass@@@@QAE@IPBVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::DynamicVectorClass<WideStringClass>

; 24   : 	*this = src;

	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4TDBObjClass@@QAEABV0@ABV0@@Z		; TDBObjClass::operator=

; 25   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0TDBObjClass@@QAE@ABV0@@Z ENDP			; TDBObjClass::TDBObjClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbobjclass.cpp
;	COMDAT ??0TDBObjClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TDBObjClass@@QAE@XZ PROC				; TDBObjClass::TDBObjClass, COMDAT
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PersistClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TDBObjClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$DynamicVectorClass@VWideStringClass@@@@QAE@IPBVWideStringClass@@@Z ; DynamicVectorClass<WideStringClass>::DynamicVectorClass<WideStringClass>

; 20   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TDBObjClass@@QAE@XZ ENDP				; TDBObjClass::TDBObjClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EWideStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EWideStringClass@@QAEPAXI@Z PROC			; WideStringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1WideStringClass@@QAE@XZ	; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EWideStringClass@@QAEPAXI@Z ENDP			; WideStringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_FWideStringClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FWideStringClass@@QAEXXZ PROC			; WideStringClass::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0WideStringClass@@QAE@H_N@Z		; WideStringClass::WideStringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_FWideStringClass@@QAEXXZ ENDP			; WideStringClass::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ PROC	; WideStringClass::Get_Header, COMDAT
; _this$ = ecx

; 1038 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1039 : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (WideStringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 1040 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ ENDP	; WideStringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@WideStringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@WideStringClass@@AAEXH@Z PROC		; WideStringClass::Store_Length, COMDAT
; _this$ = ecx

; 1052 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1053 : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 1054 : 	{
; 1055 : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ ; WideStringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 1056 : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 1057 : 	}
; 1058 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@WideStringClass@@AAEXH@Z ENDP		; WideStringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@WideStringClass@@QAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@WideStringClass@@QAEPA_WXZ PROC		; WideStringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 946  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 947  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 948  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@WideStringClass@@QAEPA_WXZ ENDP		; WideStringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Buffer@WideStringClass@@QAEPA_WH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_new_length$ = 8					; size = 4
?Get_Buffer@WideStringClass@@QAEPA_WH@Z PROC		; WideStringClass::Get_Buffer, COMDAT
; _this$ = ecx

; 940  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 941  : 	Uninitialised_Grow (new_length);

	mov	eax, DWORD PTR _new_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@WideStringClass@@AAEXH@Z ; WideStringClass::Uninitialised_Grow

; 942  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 943  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Buffer@WideStringClass@@QAEPA_WH@Z ENDP		; WideStringClass::Get_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@WideStringClass@@QBEHXZ
_TEXT	SEGMENT
tv73 = -92						; size = 4
tv90 = -86						; size = 2
tv87 = -84						; size = 4
tv84 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@WideStringClass@@QBEHXZ PROC		; WideStringClass::Get_Length, COMDAT
; _this$ = ecx

; 1002 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1003 : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 1004 : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 1005 : 	{
; 1006 : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ ; WideStringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 1007 : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 1008 : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 1009 : 		{
; 1010 : 			length = (int)wcslen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 2
	mov	DWORD PTR tv87[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv84[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv90[ebp], cx
	add	DWORD PTR tv84[ebp], 2
	cmp	WORD PTR tv90[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv84[ebp]
	sub	edx, DWORD PTR tv87[ebp]
	sar	edx, 1
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 1011 : 			((WideStringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length
$LN2@Get_Length:

; 1012 : 		}
; 1013 : 	}
; 1014 : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 1015 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@WideStringClass@@QBEHXZ ENDP		; WideStringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Compare@WideStringClass@@QBEHPB_W@Z
_TEXT	SEGMENT
tv69 = -88						; size = 4
tv89 = -84						; size = 4
tv84 = -80						; size = 2
tv77 = -78						; size = 2
tv71 = -76						; size = 4
tv73 = -72						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?Compare@WideStringClass@@QBEHPB_W@Z PROC		; WideStringClass::Compare, COMDAT
; _this$ = ecx

; 788  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 789  : 	if (string)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@Compare

; 790  : 	{
; 791  : 		return wcscmp (m_Buffer, string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv71[ebp], edx
$LL4@Compare:
	mov	eax, DWORD PTR tv71[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv77[ebp], cx
	mov	edx, DWORD PTR tv73[ebp]
	cmp	cx, WORD PTR [edx]
	jne	SHORT $LN5@Compare
	cmp	WORD PTR tv77[ebp], 0
	je	SHORT $LN6@Compare
	mov	eax, DWORD PTR tv71[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR tv84[ebp], cx
	mov	edx, DWORD PTR tv73[ebp]
	cmp	cx, WORD PTR [edx+2]
	jne	SHORT $LN5@Compare
	add	DWORD PTR tv71[ebp], 4
	add	DWORD PTR tv73[ebp], 4
	cmp	WORD PTR tv84[ebp], 0
	jne	SHORT $LL4@Compare
$LN6@Compare:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN7@Compare
$LN5@Compare:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv89[ebp], eax
$LN7@Compare:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	mov	eax, DWORD PTR tv69[ebp]
	jmp	SHORT $LN2@Compare
$LN1@Compare:

; 792  : 	}
; 793  : 	return -1;

	or	eax, -1
$LN2@Compare:

; 794  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@WideStringClass@@QBEHPB_W@Z ENDP		; WideStringClass::Compare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BWideStringClass@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BWideStringClass@@QBEPB_WXZ PROC			; WideStringClass::operator wchar_t const *, COMDAT
; _this$ = ecx

; 816  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 817  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 818  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BWideStringClass@@QBEPB_WXZ ENDP			; WideStringClass::operator wchar_t const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4WideStringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4WideStringClass@@QAEABV0@PBD@Z PROC			; WideStringClass::operator=, COMDAT
; _this$ = ecx

; 898  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 899  : 	Convert_From(string);

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Convert_From@WideStringClass@@QAE_NPBD@Z ; WideStringClass::Convert_From

; 900  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 901  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WideStringClass@@QAEABV0@PBD@Z ENDP			; WideStringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4WideStringClass@@QAEABV0@PB_W@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv86 = -82						; size = 2
tv83 = -80						; size = 4
tv80 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4WideStringClass@@QAEABV0@PB_W@Z PROC			; WideStringClass::operator=, COMDAT
; _this$ = ecx

; 886  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 	if (string)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 888  : 	{
; 889  : 		int len = (int)wcslen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	add	ecx, 2
	mov	DWORD PTR tv83[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv80[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv86[ebp], ax
	add	DWORD PTR tv80[ebp], 2
	cmp	WORD PTR tv86[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv80[ebp]
	sub	ecx, DWORD PTR tv83[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 890  : 		Uninitialised_Grow (len + 1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@WideStringClass@@AAEXH@Z ; WideStringClass::Uninitialised_Grow

; 891  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length

; 892  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (wchar_t));		

	mov	eax, DWORD PTR _len$1[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 893  : 	}
; 894  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 895  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WideStringClass@@QAEABV0@PB_W@Z ENDP			; WideStringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4WideStringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4WideStringClass@@QAEABV0@ABV0@@Z PROC		; WideStringClass::operator=, COMDAT
; _this$ = ecx

; 831  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 832  : 	return operator= ((const wchar_t *)string);

	mov	ecx, DWORD PTR _string$[ebp]
	call	??BWideStringClass@@QBEPB_WXZ		; WideStringClass::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4WideStringClass@@QAEABV0@PB_W@Z	; WideStringClass::operator=

; 833  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WideStringClass@@QAEABV0@ABV0@@Z ENDP		; WideStringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??9WideStringClass@@QBE_NPB_W@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??9WideStringClass@@QBE_NPB_W@Z PROC			; WideStringClass::operator!=, COMDAT
; _this$ = ecx

; 826  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 827  : 	return (Compare (rvalue) != 0);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Compare@WideStringClass@@QBEHPB_W@Z	; WideStringClass::Compare
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]

; 828  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9WideStringClass@@QBE_NPB_W@Z ENDP			; WideStringClass::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??8WideStringClass@@QBE_NPB_W@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??8WideStringClass@@QBE_NPB_W@Z PROC			; WideStringClass::operator==, COMDAT
; _this$ = ecx

; 821  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 822  : 	return (Compare (rvalue) == 0);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Compare@WideStringClass@@QBEHPB_W@Z	; WideStringClass::Compare
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]

; 823  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8WideStringClass@@QBE_NPB_W@Z ENDP			; WideStringClass::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1WideStringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WideStringClass@@QAE@XZ PROC				; WideStringClass::~WideStringClass, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@WideStringClass@@AAEXXZ	; WideStringClass::Free_String

; 780  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1WideStringClass@@QAE@XZ ENDP				; WideStringClass::~WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0WideStringClass@@QAE@PBD_N@Z
_TEXT	SEGMENT
tv76 = -84						; size = 4
tv70 = -84						; size = 4
tv134 = -77						; size = 1
tv91 = -77						; size = 1
tv131 = -76						; size = 4
tv88 = -76						; size = 4
tv128 = -72						; size = 4
tv85 = -72						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0WideStringClass@@QAE@PBD_N@Z PROC			; WideStringClass::WideStringClass, COMDAT
; _this$ = ecx

; 769  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 770  : 	if (hint_temporary || (string && strlen(string)>0))

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@WideString
	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN2@WideString
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	add	ecx, 1
	mov	DWORD PTR tv88[ebp], ecx
$LL5@WideString:
	mov	edx, DWORD PTR tv85[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv91[ebp], al
	add	DWORD PTR tv85[ebp], 1
	cmp	BYTE PTR tv91[ebp], 0
	jne	SHORT $LL5@WideString
	mov	ecx, DWORD PTR tv85[ebp]
	sub	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv70[ebp], ecx
	je	SHORT $LN2@WideString
$LN1@WideString:

; 771  : 	{
; 772  : 		Get_String ((int)strlen(string) + 1, hint_temporary);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv128[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp]
	add	ecx, 1
	mov	DWORD PTR tv131[ebp], ecx
$LL6@WideString:
	mov	edx, DWORD PTR tv128[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv134[ebp], al
	add	DWORD PTR tv128[ebp], 1
	cmp	BYTE PTR tv134[ebp], 0
	jne	SHORT $LL6@WideString
	mov	ecx, DWORD PTR tv128[ebp]
	sub	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	movzx	edx, BYTE PTR _hint_temporary$[ebp]
	push	edx
	mov	eax, DWORD PTR tv76[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@WideStringClass@@AAEXH_N@Z	; WideStringClass::Get_String
$LN2@WideString:

; 773  : 	}
; 774  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4WideStringClass@@QAEABV0@PBD@Z	; WideStringClass::operator=

; 775  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0WideStringClass@@QAE@PBD_N@Z ENDP			; WideStringClass::WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0WideStringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0WideStringClass@@QAE@H_N@Z PROC			; WideStringClass::WideStringClass, COMDAT
; _this$ = ecx

; 737  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 738  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@WideStringClass@@AAEXH_N@Z	; WideStringClass::Get_String

; 739  : 	m_Buffer[0] = m_NullChar;

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?m_NullChar@WideStringClass@@0AA_WA ; WideStringClass::m_NullChar
	mov	cx, WORD PTR [ecx]
	mov	WORD PTR [eax+edx], cx

; 740  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0WideStringClass@@QAE@H_N@Z ENDP			; WideStringClass::WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@StringClass@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@StringClass@@QAEPADXZ PROC			; StringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 477  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@StringClass@@QAEPADXZ ENDP			; StringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Buffer@StringClass@@QAEPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_new_length$ = 8					; size = 4
?Get_Buffer@StringClass@@QAEPADH@Z PROC			; StringClass::Get_Buffer, COMDAT
; _this$ = ecx

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 470  : 	Uninitialised_Grow (new_length);

	mov	eax, DWORD PTR _new_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@StringClass@@AAEXH@Z ; StringClass::Uninitialised_Grow

; 471  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 472  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Buffer@StringClass@@QAEPADH@Z ENDP			; StringClass::Get_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv73 = -92						; size = 4
tv90 = -85						; size = 1
tv87 = -84						; size = 4
tv84 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 1
	mov	DWORD PTR tv87[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv84[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv90[ebp], cl
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv84[ebp]
	sub	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BStringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BStringClass@@QBEPBDXZ PROC				; StringClass::operator char const *, COMDAT
; _this$ = ecx

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BStringClass@@QBEPBDXZ ENDP				; StringClass::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@ABV0@@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 279  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	int len = string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _len$[ebp], eax

; 281  : 	Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@StringClass@@AAEXH@Z ; StringClass::Uninitialised_Grow

; 282  : 	Store_Length(len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 283  : 	memcpy (m_Buffer, string.m_Buffer, (len+1) * sizeof (char));		

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 284  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@ABV0@@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@StringClass@@AAEXH@Z ; StringClass::Uninitialised_Grow

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1StringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringClass@@QAE@XZ PROC				; StringClass::~StringClass, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@StringClass@@AAEXXZ	; StringClass::Free_String

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StringClass@@QAE@XZ ENDP				; StringClass::~StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@H_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 326  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@StringClass@@AAEXH_N@Z	; StringClass::Get_String

; 327  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?m_NullChar@StringClass@@0AADA ; StringClass::m_NullChar
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+edx], cl

; 328  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@H_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPersistClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPersistClass@@UAEPAXI@Z PROC			; PersistClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PersistClass@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPersistClass@@UAEPAXI@Z ENDP			; PersistClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1PersistClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PersistClass@@UAE@XZ PROC				; PersistClass::~PersistClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1PersistClass@@UAE@XZ ENDP				; PersistClass::~PersistClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0PersistClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PersistClass@@QAE@XZ PROC				; PersistClass::PersistClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PostLoadableClass@@QAE@XZ		; PostLoadableClass::PostLoadableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PersistClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PersistClass@@QAE@XZ ENDP				; PersistClass::PersistClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\persist.h
;	COMDAT ?Load@PersistClass@@UAE_NAAVChunkLoadClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cload$ = 8						; size = 4
?Load@PersistClass@@UAE_NAAVChunkLoadClass@@@Z PROC	; PersistClass::Load, COMDAT
; _this$ = ecx

; 22   : 	virtual bool								Load (ChunkLoadClass &cload)		{ return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load@PersistClass@@UAE_NAAVChunkLoadClass@@@Z ENDP	; PersistClass::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\persist.h
;	COMDAT ?Save@PersistClass@@UAE_NAAVChunkSaveClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_csave$ = 8						; size = 4
?Save@PersistClass@@UAE_NAAVChunkSaveClass@@@Z PROC	; PersistClass::Save, COMDAT
; _this$ = ecx

; 21   : 	virtual bool								Save (ChunkSaveClass &csave)		{ return true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save@PersistClass@@UAE_NAAVChunkSaveClass@@@Z ENDP	; PersistClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GPostLoadableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPostLoadableClass@@UAEPAXI@Z PROC			; PostLoadableClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PostLoadableClass@@UAE@XZ		; PostLoadableClass::~PostLoadableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPostLoadableClass@@UAEPAXI@Z ENDP			; PostLoadableClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?On_Post_Load@PostLoadableClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?On_Post_Load@PostLoadableClass@@UAEXXZ PROC		; PostLoadableClass::On_Post_Load, COMDAT
; _this$ = ecx

; 20   : 	virtual void						On_Post_Load (void)							{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?On_Post_Load@PostLoadableClass@@UAEXXZ ENDP		; PostLoadableClass::On_Post_Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??1PostLoadableClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PostLoadableClass@@UAE@XZ PROC			; PostLoadableClass::~PostLoadableClass, COMDAT
; _this$ = ecx

; 19   : 	virtual ~PostLoadableClass(void)													{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1PostLoadableClass@@UAE@XZ ENDP			; PostLoadableClass::~PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ??0PostLoadableClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PostLoadableClass@@QAE@XZ PROC			; PostLoadableClass::PostLoadableClass, COMDAT
; _this$ = ecx

; 18   : 	PostLoadableClass(void) : IsPostLoadRegistered(false)						{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PostLoadableClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PostLoadableClass@@QAE@XZ ENDP			; PostLoadableClass::PostLoadableClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??_U@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??_U@YAPAXIPAX@Z PROC					; operator new[], COMDAT

; 71   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 72   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_U@YAPAXIPAX@Z ENDP					; operator new[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
