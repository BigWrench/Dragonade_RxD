; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\TranslateDBClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?STRING_NOT_FOUND@@3PB_WB			; STRING_NOT_FOUND
PUBLIC	?ENGLISH_STRING_NOT_FOUND@@3PBDB		; ENGLISH_STRING_NOT_FOUND
PUBLIC	??_C@_1O@PIPGDLPA@?$AAT?$AAD?$AAB?$AAE?$AAR?$AAR?$AA?$AA@ ; `string'
PUBLIC	??_C@_06EIIMMDHB@TDBERR?$AA@			; `string'
CONST	SEGMENT
_DONT_MOVE_ARRIVED_DIST DD 0447a0000r		; 1000
CONST	ENDS
;	COMDAT ??_C@_06EIIMMDHB@TDBERR?$AA@
CONST	SEGMENT
??_C@_06EIIMMDHB@TDBERR?$AA@ DB 'TDBERR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@PIPGDLPA@?$AAT?$AAD?$AAB?$AAE?$AAR?$AAR?$AA?$AA@
CONST	SEGMENT
??_C@_1O@PIPGDLPA@?$AAT?$AAD?$AAB?$AAE?$AAR?$AAR?$AA?$AA@ DB 'T', 00H, 'D'
	DB	00H, 'B', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 00H, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?STRING_NOT_FOUND@@3PB_WB DD FLAT:??_C@_1O@PIPGDLPA@?$AAT?$AAD?$AAB?$AAE?$AAR?$AAR?$AA?$AA@ ; STRING_NOT_FOUND
?ENGLISH_STRING_NOT_FOUND@@3PBDB DD FLAT:??_C@_06EIIMMDHB@TDBERR?$AA@ ; ENGLISH_STRING_NOT_FOUND
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	?wcschr@@YAPA_WPA_W_W@Z				; wcschr
PUBLIC	?wcsrchr@@YAPA_WPA_W_W@Z			; wcsrchr
PUBLIC	?strrchr@@YAPADPADH@Z				; strrchr
PUBLIC	?On_Post_Load@PostLoadableClass@@UAEXXZ		; PostLoadableClass::On_Post_Load
PUBLIC	??0StringClass@@QAE@H_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@ABV0@_N@Z			; StringClass::StringClass
PUBLIC	??0StringClass@@QAE@PBD_N@Z			; StringClass::StringClass
PUBLIC	??1StringClass@@QAE@XZ				; StringClass::~StringClass
PUBLIC	??8StringClass@@QBE_NPBD@Z			; StringClass::operator==
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	??4StringClass@@QAEABV0@ABV0@@Z			; StringClass::operator=
PUBLIC	??BStringClass@@QBEPBDXZ			; StringClass::operator char const *
PUBLIC	?Compare@StringClass@@QBEHPBD@Z			; StringClass::Compare
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Is_Empty@StringClass@@QBE_NXZ			; StringClass::Is_Empty
PUBLIC	?Peek_Buffer@StringClass@@QAEPADXZ		; StringClass::Peek_Buffer
PUBLIC	?Peek_Buffer@StringClass@@QBEPBDXZ		; StringClass::Peek_Buffer
PUBLIC	?GetHash@StringClass@@QBEIXZ			; StringClass::GetHash
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	??0WideStringClass@@QAE@H_N@Z			; WideStringClass::WideStringClass
PUBLIC	??1WideStringClass@@QAE@XZ			; WideStringClass::~WideStringClass
PUBLIC	??BWideStringClass@@QBEPB_WXZ			; WideStringClass::operator wchar_t const *
PUBLIC	?Peek_Buffer@WideStringClass@@QBEPB_WXZ		; WideStringClass::Peek_Buffer
PUBLIC	??_EWideStringClass@@QAEPAXI@Z			; WideStringClass::`vector deleting destructor'
PUBLIC	??1FileClass@@UAE@XZ				; FileClass::~FileClass
PUBLIC	?Tell@FileClass@@UAEHXZ				; FileClass::Tell
PUBLIC	?Get_Date_Time@FileClass@@UAEKXZ		; FileClass::Get_Date_Time
PUBLIC	?Set_Date_Time@FileClass@@UAE_NK@Z		; FileClass::Set_Date_Time
PUBLIC	?Get_File_Handle@FileClass@@UAEPAXXZ		; FileClass::Get_File_Handle
PUBLIC	??0FileClass@@QAE@XZ				; FileClass::FileClass
PUBLIC	??_GFileClass@@UAEPAXI@Z			; FileClass::`scalar deleting destructor'
PUBLIC	?Get_Name@TDBCategoryClass@@QBEABVStringClass@@XZ ; TDBCategoryClass::Get_Name
PUBLIC	?Set_Name@TDBCategoryClass@@QAEXPBD@Z		; TDBCategoryClass::Set_Name
PUBLIC	?Get_ID@TDBCategoryClass@@QBEIXZ		; TDBCategoryClass::Get_ID
PUBLIC	?Set_ID@TDBCategoryClass@@QAEXI@Z		; TDBCategoryClass::Set_ID
PUBLIC	?isPowerOfTwo@@YA_NH@Z				; isPowerOfTwo
PUBLIC	?Contains_Data@TranslateDBClass@@MBE_NXZ	; TranslateDBClass::Contains_Data
PUBLIC	?Save@TranslateDBClass@@MAE_NAAVChunkSaveClass@@@Z ; TranslateDBClass::Save
PUBLIC	?Load@TranslateDBClass@@MAE_NAAVChunkLoadClass@@@Z ; TranslateDBClass::Load
PUBLIC	?Load_Variables@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ; TranslateDBClass::Load_Variables
PUBLIC	?Load_Objects@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ; TranslateDBClass::Load_Objects
PUBLIC	?Load_Categories@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ; TranslateDBClass::Load_Categories
PUBLIC	?Validate_Data@TranslateDBClass@@KAXXZ		; TranslateDBClass::Validate_Data
PUBLIC	?Free_Objects@TranslateDBClass@@KAXXZ		; TranslateDBClass::Free_Objects
PUBLIC	?Free_Categories@TranslateDBClass@@KAXXZ	; TranslateDBClass::Free_Categories
PUBLIC	?Find_Unique_ID@TranslateDBClass@@KAIXZ		; TranslateDBClass::Find_Unique_ID
PUBLIC	?Initialize@TranslateDBClass@@SAXXZ		; TranslateDBClass::Initialize
PUBLIC	?Shutdown@TranslateDBClass@@SAXXZ		; TranslateDBClass::Shutdown
PUBLIC	?Get_Version_Number@TranslateDBClass@@SAIXZ	; TranslateDBClass::Get_Version_Number
PUBLIC	?Update_Version@TranslateDBClass@@SAXXZ		; TranslateDBClass::Update_Version
PUBLIC	?Is_Loaded@TranslateDBClass@@SA_NXZ		; TranslateDBClass::Is_Loaded
PUBLIC	?Import_Strings@TranslateDBClass@@SAXPBD@Z	; TranslateDBClass::Import_Strings
PUBLIC	?Export_C_Header@TranslateDBClass@@SAXPBD@Z	; TranslateDBClass::Export_C_Header
PUBLIC	?Export_Table@TranslateDBClass@@SAXPBD@Z	; TranslateDBClass::Export_Table
PUBLIC	?Find_Object@TranslateDBClass@@SAPAVTDBObjClass@@PBD@Z ; TranslateDBClass::Find_Object
PUBLIC	?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z ; TranslateDBClass::Add_Object
PUBLIC	?Remove_Object@TranslateDBClass@@SA_NH@Z	; TranslateDBClass::Remove_Object
PUBLIC	?Clear_Object@TranslateDBClass@@SA_NH@Z		; TranslateDBClass::Clear_Object
PUBLIC	?Remove_All@TranslateDBClass@@SAXXZ		; TranslateDBClass::Remove_All
PUBLIC	?Get_Object@TranslateDBClass@@SAPAVTDBObjClass@@H@Z ; TranslateDBClass::Get_Object
PUBLIC	?Get_First_Object@TranslateDBClass@@SAPAVTDBObjClass@@I@Z ; TranslateDBClass::Get_First_Object
PUBLIC	?Get_Next_Object@TranslateDBClass@@SAPAVTDBObjClass@@IPAV2@@Z ; TranslateDBClass::Get_Next_Object
PUBLIC	?Get_Category_Count@TranslateDBClass@@SAHXZ	; TranslateDBClass::Get_Category_Count
PUBLIC	?Get_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@H@Z ; TranslateDBClass::Get_Category
PUBLIC	?Find_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@I@Z ; TranslateDBClass::Find_Category
PUBLIC	?Find_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z ; TranslateDBClass::Find_Category
PUBLIC	?Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z ; TranslateDBClass::Add_Category
PUBLIC	?Add_Category@TranslateDBClass@@SA_NPAVTDBCategoryClass@@_N@Z ; TranslateDBClass::Add_Category
PUBLIC	?Remove_Category@TranslateDBClass@@SA_NH@Z	; TranslateDBClass::Remove_Category
PUBLIC	?Get_Current_Language@TranslateDBClass@@SAIXZ	; TranslateDBClass::Get_Current_Language
PUBLIC	??0TranslateDBClass@@QAE@XZ			; TranslateDBClass::TranslateDBClass
PUBLIC	??1TranslateDBClass@@UAE@XZ			; TranslateDBClass::~TranslateDBClass
PUBLIC	?Chunk_ID@TranslateDBClass@@UBEIXZ		; TranslateDBClass::Chunk_ID
PUBLIC	?Name@TranslateDBClass@@UBEPBDXZ		; TranslateDBClass::Name
PUBLIC	??_GTranslateDBClass@@UAEPAXI@Z			; TranslateDBClass::`scalar deleting destructor'
PUBLIC	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
PUBLIC	?Length@?$VectorClass@PAVTDBObjClass@@@@QBEHXZ	; VectorClass<TDBObjClass *>::Length
PUBLIC	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
PUBLIC	?Add@?$DynamicVectorClass@PAVTDBObjClass@@@@QAE_NABQAVTDBObjClass@@@Z ; DynamicVectorClass<TDBObjClass *>::Add
PUBLIC	?Delete_All@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEXXZ ; DynamicVectorClass<TDBObjClass *>::Delete_All
PUBLIC	?Set_Growth_Step@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEHH@Z ; DynamicVectorClass<TDBObjClass *>::Set_Growth_Step
PUBLIC	?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@CAIABVStringClass@@I@Z ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
PUBLIC	?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@ABEIABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
PUBLIC	?Re_Hash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@AAEXXZ ; HashTemplateClass<StringClass,TDBObjClass *>::Re_Hash
PUBLIC	?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAPAVTDBObjClass@@ABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Get
PUBLIC	?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAVTDBObjClass@@ABVStringClass@@PAV2@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Get
PUBLIC	?Insert@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@ABQAVTDBObjClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Insert
PUBLIC	?Remove@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Remove
PUBLIC	?Remove_All@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXXZ ; HashTemplateClass<StringClass,TDBObjClass *>::Remove_All
PUBLIC	?Is_Hash_Checked@RawFileClass@@UAE_NXZ		; RawFileClass::Is_Hash_Checked
PUBLIC	?Is_Biased@RawFileClass@@QAE_NXZ		; RawFileClass::Is_Biased
PUBLIC	??0RawFileClass@@QAE@XZ				; RawFileClass::RawFileClass
PUBLIC	?Reset@RawFileClass@@QAEXXZ			; RawFileClass::Reset
PUBLIC	??1RawFileClass@@UAE@XZ				; RawFileClass::~RawFileClass
PUBLIC	?File_Name@RawFileClass@@UAEPBDXZ		; RawFileClass::File_Name
PUBLIC	?Set_Name@RawFileClass@@UAEPBDPBD@Z		; RawFileClass::Set_Name
PUBLIC	?Create@RawFileClass@@UAE_NXZ			; RawFileClass::Create
PUBLIC	?Delete@RawFileClass@@UAE_NXZ			; RawFileClass::Delete
PUBLIC	?Is_Available@RawFileClass@@UAE_NH@Z		; RawFileClass::Is_Available
PUBLIC	?Is_Open@RawFileClass@@UAE_NXZ			; RawFileClass::Is_Open
PUBLIC	?Open@RawFileClass@@UAEHPBDH@Z			; RawFileClass::Open
PUBLIC	?Open@RawFileClass@@UAEHH@Z			; RawFileClass::Open
PUBLIC	?Read@RawFileClass@@UAEHPAXH@Z			; RawFileClass::Read
PUBLIC	?Seek@RawFileClass@@UAEHHH@Z			; RawFileClass::Seek
PUBLIC	?Raw_Seek@RawFileClass@@QAEHHH@Z		; RawFileClass::Raw_Seek
PUBLIC	?Size@RawFileClass@@UAEHXZ			; RawFileClass::Size
PUBLIC	?Write@RawFileClass@@UAEHPAXH@Z			; RawFileClass::Write
PUBLIC	?Close@RawFileClass@@UAEXXZ			; RawFileClass::Close
PUBLIC	?Get_Date_Time@RawFileClass@@UAEKXZ		; RawFileClass::Get_Date_Time
PUBLIC	?Set_Date_Time@RawFileClass@@UAE_NK@Z		; RawFileClass::Set_Date_Time
PUBLIC	?Error@RawFileClass@@UAEXHHPBD@Z		; RawFileClass::Error
PUBLIC	?Get_File_Handle@RawFileClass@@UAEPAXXZ		; RawFileClass::Get_File_Handle
PUBLIC	?Bias@RawFileClass@@UAEXHH@Z			; RawFileClass::Bias
PUBLIC	?Attach@RawFileClass@@UAEXPAXH@Z		; RawFileClass::Attach
PUBLIC	?Detach@RawFileClass@@UAEXXZ			; RawFileClass::Detach
PUBLIC	??_GRawFileClass@@UAEPAXI@Z			; RawFileClass::`scalar deleting destructor'
PUBLIC	??$clamp@H@@YAHHHH@Z				; clamp<int>
PUBLIC	??0TextFileClass@@QAE@XZ			; TextFileClass::TextFileClass
PUBLIC	??1TextFileClass@@UAE@XZ			; TextFileClass::~TextFileClass
PUBLIC	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line
PUBLIC	??_GTextFileClass@@UAEPAXI@Z			; TextFileClass::`scalar deleting destructor'
PUBLIC	??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBObjClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBObjClass@@@@HHH@Z ; ResolveGameReference<DynamicVectorClass<TDBObjClass *> >
PUBLIC	??$ResolveGameReference@V?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@@@YAAAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@HHH@Z ; ResolveGameReference<HashTemplateClass<StringClass,TDBObjClass *> >
PUBLIC	??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBCategoryClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@HHH@Z ; ResolveGameReference<DynamicVectorClass<TDBCategoryClass *> >
PUBLIC	??$ResolveGameReference@I@@YAAAIHHH@Z		; ResolveGameReference<unsigned int>
PUBLIC	??$ResolveGameReference@_N@@YAAA_NHHH@Z		; ResolveGameReference<bool>
PUBLIC	??$ResolveGameReference@W4FILTER_OPT@TranslateDBClass@@@@YAAAW4FILTER_OPT@TranslateDBClass@@HHH@Z ; ResolveGameReference<enum TranslateDBClass::FILTER_OPT>
PUBLIC	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
PUBLIC	?Length@?$VectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; VectorClass<TDBCategoryClass *>::Length
PUBLIC	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
PUBLIC	?Add@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NABQAVTDBCategoryClass@@@Z ; DynamicVectorClass<TDBCategoryClass *>::Add
PUBLIC	?Delete@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NH@Z ; DynamicVectorClass<TDBCategoryClass *>::Delete
PUBLIC	?Delete_All@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAEXXZ ; DynamicVectorClass<TDBCategoryClass *>::Delete_All
PUBLIC	??0Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::Entry
PUBLIC	??1Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::~Entry
PUBLIC	??_EEntry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEPAXI@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::`vector deleting destructor'
PUBLIC	??$move@AAPAVTDBCategoryClass@@@std@@YA$$QAPAVTDBCategoryClass@@AAPAV1@@Z ; std::move<TDBCategoryClass * &>
PUBLIC	?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z ; HashTemplateKeyClass<StringClass>::Get_Hash_Value
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_7FileClass@@6B@				; FileClass::`vftable'
PUBLIC	?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
PUBLIC	?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectHash
PUBLIC	?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
PUBLIC	?m_VersionNumber@TranslateDBClass@@0AAIA	; TranslateDBClass::m_VersionNumber
PUBLIC	?m_LanguageID@TranslateDBClass@@0AAIA		; TranslateDBClass::m_LanguageID
PUBLIC	?IsSingleLanguageExport@TranslateDBClass@@0AA_NA ; TranslateDBClass::IsSingleLanguageExport
PUBLIC	?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A ; TranslateDBClass::FilterType
PUBLIC	?FilterCategoryID@TranslateDBClass@@0AAIA	; TranslateDBClass::FilterCategoryID
PUBLIC	??_7TranslateDBClass@@6B@			; TranslateDBClass::`vftable'
PUBLIC	??_C@_0BB@MDFCLIHN@TranslateDBClass?$AA@	; `string'
PUBLIC	?_TheTranslateDB@@3VTranslateDBClass@@A		; _TheTranslateDB
PUBLIC	??_7RawFileClass@@6B@				; RawFileClass::`vftable'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7TextFileClass@@6B@				; TextFileClass::`vftable'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??Free_Categories@TranslateDBClass@@KAXXZ@4JA@fac20d4b ; `TranslateDBClass::Free_Categories'::`2'::__LINE__Var
PUBLIC	??_C@_0CC@KAMEBFOG@TranslateDBClass?3?3Free_Categorie@ ; `string'
PUBLIC	??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?1??Free_Objects@TranslateDBClass@@KAXXZ@4JA@fac20d4b ; `TranslateDBClass::Free_Objects'::`2'::__LINE__Var
PUBLIC	??_C@_0BP@JOCINFGN@TranslateDBClass?3?3Free_Objects?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b ; `TranslateDBClass::Validate_Data'::`2'::__LINE__Var
PUBLIC	??_C@_0CA@JFIDDPLE@TranslateDBClass?3?3Validate_Data?$AA@ ; `string'
PUBLIC	??_C@_07MCAEODGB@Default?$AA@			; `string'
PUBLIC	??_C@_0BK@EJKHOMHD@IDS_MENU_HIGH_RES_SHADOWS?$AA@ ; `string'
PUBLIC	??_C@_0BI@DECOBLOK@High?5Resolution?5Shadows?$AA@ ; `string'
PUBLIC	??_C@_1DA@KABFLKEL@?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAR?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@HBJLLDGE@IDS_TEXTURE_FILTER?$AA@	; `string'
PUBLIC	??_C@_0BD@LHFGGPNL@IDS_ANTIALIAS_MODE?$AA@	; `string'
PUBLIC	??_C@_0BE@EKILDFGH@Anti?9aliasing?5Mode?3?$AA@	; `string'
PUBLIC	??_C@_1CI@INFFHLPF@?$AAA?$AAn?$AAt?$AAi?$AA?9?$AAa?$AAl?$AAi?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?3?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BH@JAFOKEPM@IDS_STRUCT_GUARD_TOWER?$AA@	; `string'
PUBLIC	??_C@_0M@BNEIKKHJ@Guard?5Tower?$AA@		; `string'
PUBLIC	??_C@_1BI@GNJFCJCJ@?$AAG?$AAu?$AAa?$AAr?$AAd?$AA?5?$AAT?$AAo?$AAw?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z@4JA@fac20d4b ; `TranslateDBClass::Add_Category'::`2'::__LINE__Var
PUBLIC	??_C@_0BP@CDAFPENI@TranslateDBClass?3?3Add_Category?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Remove_Category@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b ; `TranslateDBClass::Remove_Category'::`2'::__LINE__Var
PUBLIC	??_C@_0CC@IOGGIFEJ@TranslateDBClass?3?3Remove_Categor@ ; `string'
PUBLIC	?__LINE__Var@?1??Remove_Object@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b ; `TranslateDBClass::Remove_Object'::`2'::__LINE__Var
PUBLIC	??_C@_0CA@OJELAFLO@TranslateDBClass?3?3Remove_Object?$AA@ ; `string'
PUBLIC	??_C@_0BG@MAABPPJM@?$CDif?5defined?$CI_MSC_VER?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0N@IJBPAKJJ@?$CDpragma?5once?$AA@		; `string'
PUBLIC	??_C@_06CCBIAIJP@?$CDendif?$AA@			; `string'
PUBLIC	??_C@_0BH@HFLBGHAE@?$CDifndef?5__STRING_IDS_H?$AA@ ; `string'
PUBLIC	??_C@_0BH@PINIFKEA@?$CDdefine?5__STRING_IDS_H?$AA@ ; `string'
PUBLIC	??_C@_0BI@CPMBELHJ@?$CDdefine?5STRINGS_VER?7?7?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BP@NHHJLBPP@?1?1?5TRANSLATEDB?3?5Begin?5ID?5Block?$AA@ ; `string'
PUBLIC	??_C@_0P@KEFPFMKM@?$CDdefine?5?$CFs?7?7?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BN@CLPJEIKF@?1?1?5TRANSLATEDB?3?5End?5ID?5Block?$AA@ ; `string'
PUBLIC	??_C@_0BI@BCJILNLD@?$CDendif?5?1?1__STRING_IDS_H?$AA@ ; `string'
PUBLIC	??_C@_0M@OEIOICOO@w?0ccs?$DNUTF?98?$AA@		; `string'
PUBLIC	??_C@_1BG@HPEKFGKC@?$AA?$FL?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@DOEFFKLP@?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?0?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@MCOAFFFO@?$AA?$CF?$AAu?$AA?$DN?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@HMCNPFPO@r?0ccs?$DNUTF?98?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b ; `TranslateDBClass::Import_Strings'::`2'::__LINE__Var
PUBLIC	??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@ ; `string'
PUBLIC	??_C@_03MIIGHJO@?$CFls?$AA@			; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@		; `string'
PUBLIC	??_C@_0EC@CHNABGID@HashTemplateClass?$DMclass?5StringCl@ ; `string'
PUBLIC	??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_R0?AVPostLoadableClass@@@8			; PostLoadableClass `RTTI Type Descriptor'
PUBLIC	??_R3PostLoadableClass@@8			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PostLoadableClass@@8			; PostLoadableClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PostLoadableClass@@8		; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FileClass@@6B@				; FileClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileClass@@@8				; FileClass `RTTI Type Descriptor'
PUBLIC	??_R3FileClass@@8				; FileClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileClass@@8				; FileClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileClass@@8			; FileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4TranslateDBClass@@6B@			; TranslateDBClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTranslateDBClass@@@8			; TranslateDBClass `RTTI Type Descriptor'
PUBLIC	??_R3TranslateDBClass@@8			; TranslateDBClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TranslateDBClass@@8			; TranslateDBClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TranslateDBClass@@8		; TranslateDBClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SaveLoadSubSystemClass@@8		; SaveLoadSubSystemClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSaveLoadSubSystemClass@@@8		; SaveLoadSubSystemClass `RTTI Type Descriptor'
PUBLIC	??_R3SaveLoadSubSystemClass@@8			; SaveLoadSubSystemClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SaveLoadSubSystemClass@@8			; SaveLoadSubSystemClass::`RTTI Base Class Array'
PUBLIC	??_R4RawFileClass@@6B@				; RawFileClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRawFileClass@@@8			; RawFileClass `RTTI Type Descriptor'
PUBLIC	??_R3RawFileClass@@8				; RawFileClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RawFileClass@@8				; RawFileClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RawFileClass@@8			; RawFileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4TextFileClass@@6B@				; TextFileClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTextFileClass@@@8			; TextFileClass `RTTI Type Descriptor'
PUBLIC	??_R3TextFileClass@@8				; TextFileClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TextFileClass@@8				; TextFileClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TextFileClass@@8			; TextFileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	?InitEngine@@YAXXZ:PROC				; InitEngine
EXTRN	__imp___wassert:PROC
EXTRN	__imp___errno:PROC
EXTRN	__imp___wtoi:PROC
EXTRN	__imp__fgetws:PROC
EXTRN	__imp__fwprintf_s:PROC
EXTRN	__imp__wcschr:PROC
EXTRN	__imp__wcsrchr:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__fopen:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	__imp___strlwr:PROC
EXTRN	__imp__strrchr:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__GetFileInformationByHandle@8:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__FileTimeToDosDateTime@12:PROC
EXTRN	__imp__DosDateTimeToFileTime@12:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileAttributesA@4:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	?Get_Hash_Value@?$HashTemplateKeyClass@I@@SAIABI@Z:PROC ; HashTemplateKeyClass<unsigned int>::Get_Hash_Value
EXTRN	?Format@StringClass@@QAAHPBDZZ:PROC		; StringClass::Format
EXTRN	?Get_String@StringClass@@AAEXH_N@Z:PROC		; StringClass::Get_String
EXTRN	?Uninitialised_Grow@StringClass@@AAEXH@Z:PROC	; StringClass::Uninitialised_Grow
EXTRN	?Free_String@StringClass@@AAEXXZ:PROC		; StringClass::Free_String
EXTRN	?Format@WideStringClass@@QAAHPB_WZZ:PROC	; WideStringClass::Format
EXTRN	?Get_String@WideStringClass@@AAEXH_N@Z:PROC	; WideStringClass::Get_String
EXTRN	?Free_String@WideStringClass@@AAEXXZ:PROC	; WideStringClass::Free_String
EXTRN	?Open_Chunk@ChunkLoadClass@@QAE_NXZ:PROC	; ChunkLoadClass::Open_Chunk
EXTRN	?Close_Chunk@ChunkLoadClass@@QAE_NXZ:PROC	; ChunkLoadClass::Close_Chunk
EXTRN	?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ:PROC	; ChunkLoadClass::Cur_Chunk_ID
EXTRN	?Open_Micro_Chunk@ChunkLoadClass@@QAE_NXZ:PROC	; ChunkLoadClass::Open_Micro_Chunk
EXTRN	?Close_Micro_Chunk@ChunkLoadClass@@QAE_NXZ:PROC	; ChunkLoadClass::Close_Micro_Chunk
EXTRN	?Cur_Micro_Chunk_ID@ChunkLoadClass@@QAEKXZ:PROC	; ChunkLoadClass::Cur_Micro_Chunk_ID
EXTRN	?Read@ChunkLoadClass@@QAEJPAXK@Z:PROC		; ChunkLoadClass::Read
EXTRN	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z:PROC	; ChunkSaveClass::Begin_Chunk
EXTRN	?End_Chunk@ChunkSaveClass@@QAE_NXZ:PROC		; ChunkSaveClass::End_Chunk
EXTRN	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z:PROC ; ChunkSaveClass::Begin_Micro_Chunk
EXTRN	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ:PROC	; ChunkSaveClass::End_Micro_Chunk
EXTRN	?Write@ChunkSaveClass@@QAEKPAXK@Z:PROC		; ChunkSaveClass::Write
EXTRN	??_EFileClass@@UAEPAXI@Z:PROC			; FileClass::`vector deleting destructor'
EXTRN	??0SaveLoadSubSystemClass@@QAE@XZ:PROC		; SaveLoadSubSystemClass::SaveLoadSubSystemClass
EXTRN	??1SaveLoadSubSystemClass@@UAE@XZ:PROC		; SaveLoadSubSystemClass::~SaveLoadSubSystemClass
EXTRN	??0TDBObjClass@@QAE@XZ:PROC			; TDBObjClass::TDBObjClass
EXTRN	??0TDBCategoryClass@@QAE@XZ:PROC		; TDBCategoryClass::TDBCategoryClass
EXTRN	??_ETranslateDBClass@@UAEPAXI@Z:PROC		; TranslateDBClass::`vector deleting destructor'
EXTRN	?Find_Persist_Factory@SaveLoadSystemClass@@SAPAVPersistFactoryClass@@I@Z:PROC ; SaveLoadSystemClass::Find_Persist_Factory
EXTRN	??_ERawFileClass@@UAEPAXI@Z:PROC		; RawFileClass::`vector deleting destructor'
EXTRN	??_ETextFileClass@@UAEPAXI@Z:PROC		; TextFileClass::`vector deleting destructor'
EXTRN	_memcpy:PROC
EXTRN	?Exe@@3HA:DWORD					; Exe
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?m_EmptyString@StringClass@@0AAPADA:DWORD	; StringClass::m_EmptyString
EXTRN	?m_NullChar@StringClass@@0AADA:DWORD		; StringClass::m_NullChar
EXTRN	?m_EmptyString@WideStringClass@@0AAPA_WA:DWORD	; WideStringClass::m_EmptyString
EXTRN	?m_NullChar@WideStringClass@@0AA_WA:DWORD	; WideStringClass::m_NullChar
_BSS	SEGMENT
?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A DD 01H DUP (?) ; TranslateDBClass::m_ObjectList
?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A DD 01H DUP (?) ; TranslateDBClass::m_ObjectHash
?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A DD 01H DUP (?) ; TranslateDBClass::m_CategoryList
?m_VersionNumber@TranslateDBClass@@0AAIA DD 01H DUP (?)	; TranslateDBClass::m_VersionNumber
?m_LanguageID@TranslateDBClass@@0AAIA DD 01H DUP (?)	; TranslateDBClass::m_LanguageID
?IsSingleLanguageExport@TranslateDBClass@@0AA_NA DD 01H DUP (?) ; TranslateDBClass::IsSingleLanguageExport
?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A DD 01H DUP (?) ; TranslateDBClass::FilterType
?FilterCategoryID@TranslateDBClass@@0AAIA DD 01H DUP (?) ; TranslateDBClass::FilterCategoryID
?_TheTranslateDB@@3VTranslateDBClass@@A DB 0cH DUP (?)	; _TheTranslateDB
_BSS	ENDS
CRT$XCU	SEGMENT
__TheTranslateDB$initializer$ DD FLAT:??__E_TheTranslateDB@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@TextFileClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TextFileClass@@8 DD FLAT:??_R0?AVTextFileClass@@@8 ; TextFileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TextFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R2TextFileClass@@8
rdata$r	SEGMENT
??_R2TextFileClass@@8 DD FLAT:??_R1A@?0A@EA@TextFileClass@@8 ; TextFileClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RawFileClass@@8
	DD	FLAT:??_R1A@?0A@EA@FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R3TextFileClass@@8
rdata$r	SEGMENT
??_R3TextFileClass@@8 DD 00H				; TextFileClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TextFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTextFileClass@@@8
_DATA	SEGMENT
??_R0?AVTextFileClass@@@8 DD FLAT:??_7type_info@@6B@	; TextFileClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTextFileClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TextFileClass@@6B@
rdata$r	SEGMENT
??_R4TextFileClass@@6B@ DD 00H				; TextFileClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTextFileClass@@@8
	DD	FLAT:??_R3TextFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RawFileClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RawFileClass@@8 DD FLAT:??_R0?AVRawFileClass@@@8 ; RawFileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RawFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R2RawFileClass@@8
rdata$r	SEGMENT
??_R2RawFileClass@@8 DD FLAT:??_R1A@?0A@EA@RawFileClass@@8 ; RawFileClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R3RawFileClass@@8
rdata$r	SEGMENT
??_R3RawFileClass@@8 DD 00H				; RawFileClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2RawFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRawFileClass@@@8
_DATA	SEGMENT
??_R0?AVRawFileClass@@@8 DD FLAT:??_7type_info@@6B@	; RawFileClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRawFileClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RawFileClass@@6B@
rdata$r	SEGMENT
??_R4RawFileClass@@6B@ DD 00H				; RawFileClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRawFileClass@@@8
	DD	FLAT:??_R3RawFileClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SaveLoadSubSystemClass@@8
rdata$r	SEGMENT
??_R2SaveLoadSubSystemClass@@8 DD FLAT:??_R1A@?0A@EA@SaveLoadSubSystemClass@@8 ; SaveLoadSubSystemClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3SaveLoadSubSystemClass@@8
rdata$r	SEGMENT
??_R3SaveLoadSubSystemClass@@8 DD 00H			; SaveLoadSubSystemClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SaveLoadSubSystemClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSaveLoadSubSystemClass@@@8
_DATA	SEGMENT
??_R0?AVSaveLoadSubSystemClass@@@8 DD FLAT:??_7type_info@@6B@ ; SaveLoadSubSystemClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSaveLoadSubSystemClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SaveLoadSubSystemClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SaveLoadSubSystemClass@@8 DD FLAT:??_R0?AVSaveLoadSubSystemClass@@@8 ; SaveLoadSubSystemClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SaveLoadSubSystemClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TranslateDBClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TranslateDBClass@@8 DD FLAT:??_R0?AVTranslateDBClass@@@8 ; TranslateDBClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TranslateDBClass@@8
rdata$r	ENDS
;	COMDAT ??_R2TranslateDBClass@@8
rdata$r	SEGMENT
??_R2TranslateDBClass@@8 DD FLAT:??_R1A@?0A@EA@TranslateDBClass@@8 ; TranslateDBClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SaveLoadSubSystemClass@@8
	DD	FLAT:??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3TranslateDBClass@@8
rdata$r	SEGMENT
??_R3TranslateDBClass@@8 DD 00H				; TranslateDBClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TranslateDBClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTranslateDBClass@@@8
_DATA	SEGMENT
??_R0?AVTranslateDBClass@@@8 DD FLAT:??_7type_info@@6B@	; TranslateDBClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTranslateDBClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TranslateDBClass@@6B@
rdata$r	SEGMENT
??_R4TranslateDBClass@@6B@ DD 00H			; TranslateDBClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTranslateDBClass@@@8
	DD	FLAT:??_R3TranslateDBClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FileClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileClass@@8 DD FLAT:??_R0?AVFileClass@@@8 ; FileClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R2FileClass@@8
rdata$r	SEGMENT
??_R2FileClass@@8 DD FLAT:??_R1A@?0A@EA@FileClass@@8	; FileClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3FileClass@@8
rdata$r	SEGMENT
??_R3FileClass@@8 DD 00H				; FileClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileClass@@@8
_DATA	SEGMENT
??_R0?AVFileClass@@@8 DD FLAT:??_7type_info@@6B@	; FileClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileClass@@6B@
rdata$r	SEGMENT
??_R4FileClass@@6B@ DD 00H				; FileClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileClass@@@8
	DD	FLAT:??_R3FileClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PostLoadableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PostLoadableClass@@8 DD FLAT:??_R0?AVPostLoadableClass@@@8 ; PostLoadableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PostLoadableClass@@8
rdata$r	SEGMENT
??_R2PostLoadableClass@@8 DD FLAT:??_R1A@?0A@EA@PostLoadableClass@@8 ; PostLoadableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PostLoadableClass@@8
rdata$r	SEGMENT
??_R3PostLoadableClass@@8 DD 00H			; PostLoadableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PostLoadableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPostLoadableClass@@@8
_DATA	SEGMENT
??_R0?AVPostLoadableClass@@@8 DD FLAT:??_7type_info@@6B@ ; PostLoadableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPostLoadableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'h', 00H, 'a', 00H, 's', 00H, 'h', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\hashtemplateclass.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CHNABGID@HashTemplateClass?$DMclass?5StringCl@
CONST	SEGMENT
??_C@_0EC@CHNABGID@HashTemplateClass?$DMclass?5StringCl@ DB 'HashTemplate'
	DB	'Class<class StringClass,class TDBObjClass *>::Re_Hash', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03MIIGHJO@?$CFls?$AA@
CONST	SEGMENT
??_C@_03MIIGHJO@?$CFls?$AA@ DB '%ls', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@
CONST	SEGMENT
??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@ DB 'TranslateDBCla'
	DB	'ss::Import_Strings', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
_DATA	SEGMENT
?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b DD 0239H ; `TranslateDBClass::Import_Strings'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@HMCNPFPO@r?0ccs?$DNUTF?98?$AA@
CONST	SEGMENT
??_C@_0M@HMCNPFPO@r?0ccs?$DNUTF?98?$AA@ DB 'r,ccs=UTF-8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@MCOAFFFO@?$AA?$CF?$AAu?$AA?$DN?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@MCOAFFFO@?$AA?$CF?$AAu?$AA?$DN?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@ DB '%'
	DB	00H, 'u', 00H, '=', 00H, '%', 00H, 's', 00H, 0dH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@DOEFFKLP@?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?0?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@DOEFFKLP@?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?0?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?$AN?$AA?6?$AA?$AA@ DB '%'
	DB	00H, 'u', 00H, ',', 00H, '%', 00H, 'h', 00H, 's', 00H, ',', 00H
	DB	'%', 00H, 'u', 00H, ',', 00H, '%', 00H, 'h', 00H, 's', 00H, 0dH
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@HPEKFGKC@?$AA?$FL?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@HPEKFGKC@?$AA?$FL?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@ DB '['
	DB	00H, '%', 00H, 'u', 00H, ',', 00H, '%', 00H, 'h', 00H, 's', 00H
	DB	']', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEIOICOO@w?0ccs?$DNUTF?98?$AA@
CONST	SEGMENT
??_C@_0M@OEIOICOO@w?0ccs?$DNUTF?98?$AA@ DB 'w,ccs=UTF-8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCJILNLD@?$CDendif?5?1?1__STRING_IDS_H?$AA@
CONST	SEGMENT
??_C@_0BI@BCJILNLD@?$CDendif?5?1?1__STRING_IDS_H?$AA@ DB '#endif //__STRI'
	DB	'NG_IDS_H', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CLPJEIKF@?1?1?5TRANSLATEDB?3?5End?5ID?5Block?$AA@
CONST	SEGMENT
??_C@_0BN@CLPJEIKF@?1?1?5TRANSLATEDB?3?5End?5ID?5Block?$AA@ DB '// TRANSL'
	DB	'ATEDB: End ID Block', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEFPFMKM@?$CDdefine?5?$CFs?7?7?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@KEFPFMKM@?$CDdefine?5?$CFs?7?7?$CFd?$AA@ DB '#define %s', 09H, 09H
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NHHJLBPP@?1?1?5TRANSLATEDB?3?5Begin?5ID?5Block?$AA@
CONST	SEGMENT
??_C@_0BP@NHHJLBPP@?1?1?5TRANSLATEDB?3?5Begin?5ID?5Block?$AA@ DB '// TRAN'
	DB	'SLATEDB: Begin ID Block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPMBELHJ@?$CDdefine?5STRINGS_VER?7?7?$CFd?$AA@
CONST	SEGMENT
??_C@_0BI@CPMBELHJ@?$CDdefine?5STRINGS_VER?7?7?$CFd?$AA@ DB '#define STRI'
	DB	'NGS_VER', 09H, 09H, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PINIFKEA@?$CDdefine?5__STRING_IDS_H?$AA@
CONST	SEGMENT
??_C@_0BH@PINIFKEA@?$CDdefine?5__STRING_IDS_H?$AA@ DB '#define __STRING_I'
	DB	'DS_H', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HFLBGHAE@?$CDifndef?5__STRING_IDS_H?$AA@
CONST	SEGMENT
??_C@_0BH@HFLBGHAE@?$CDifndef?5__STRING_IDS_H?$AA@ DB '#ifndef __STRING_I'
	DB	'DS_H', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCBIAIJP@?$CDendif?$AA@
CONST	SEGMENT
??_C@_06CCBIAIJP@?$CDendif?$AA@ DB '#endif', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJBPAKJJ@?$CDpragma?5once?$AA@
CONST	SEGMENT
??_C@_0N@IJBPAKJJ@?$CDpragma?5once?$AA@ DB '#pragma once', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MAABPPJM@?$CDif?5defined?$CI_MSC_VER?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@MAABPPJM@?$CDif?5defined?$CI_MSC_VER?$CJ?$AA@ DB '#if defined(_'
	DB	'MSC_VER)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OJELAFLO@TranslateDBClass?3?3Remove_Object?$AA@
CONST	SEGMENT
??_C@_0CA@OJELAFLO@TranslateDBClass?3?3Remove_Object?$AA@ DB 'TranslateDB'
	DB	'Class::Remove_Object', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Remove_Object@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b
_DATA	SEGMENT
?__LINE__Var@?1??Remove_Object@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b DD 0152H ; `TranslateDBClass::Remove_Object'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@IOGGIFEJ@TranslateDBClass?3?3Remove_Categor@
CONST	SEGMENT
??_C@_0CC@IOGGIFEJ@TranslateDBClass?3?3Remove_Categor@ DB 'TranslateDBCla'
	DB	'ss::Remove_Category', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Remove_Category@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b
_DATA	SEGMENT
?__LINE__Var@?1??Remove_Category@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b DD 013bH ; `TranslateDBClass::Remove_Category'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@CDAFPENI@TranslateDBClass?3?3Add_Category?$AA@
CONST	SEGMENT
??_C@_0BP@CDAFPENI@TranslateDBClass?3?3Add_Category?$AA@ DB 'TranslateDBC'
	DB	'lass::Add_Category', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z@4JA@fac20d4b
_DATA	SEGMENT
?__LINE__Var@?1??Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z@4JA@fac20d4b DD 011aH ; `TranslateDBClass::Add_Category'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BI@GNJFCJCJ@?$AAG?$AAu?$AAa?$AAr?$AAd?$AA?5?$AAT?$AAo?$AAw?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GNJFCJCJ@?$AAG?$AAu?$AAa?$AAr?$AAd?$AA?5?$AAT?$AAo?$AAw?$AAe?$AAr?$AA?$AA@ DB 'G'
	DB	00H, 'u', 00H, 'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'T', 00H
	DB	'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BNEIKKHJ@Guard?5Tower?$AA@
CONST	SEGMENT
??_C@_0M@BNEIKKHJ@Guard?5Tower?$AA@ DB 'Guard Tower', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JAFOKEPM@IDS_STRUCT_GUARD_TOWER?$AA@
CONST	SEGMENT
??_C@_0BH@JAFOKEPM@IDS_STRUCT_GUARD_TOWER?$AA@ DB 'IDS_STRUCT_GUARD_TOWER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@INFFHLPF@?$AAA?$AAn?$AAt?$AAi?$AA?9?$AAa?$AAl?$AAi?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?3?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@INFFHLPF@?$AAA?$AAn?$AAt?$AAi?$AA?9?$AAa?$AAl?$AAi?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?3?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 't', 00H, 'i', 00H, '-', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ':', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EKILDFGH@Anti?9aliasing?5Mode?3?$AA@
CONST	SEGMENT
??_C@_0BE@EKILDFGH@Anti?9aliasing?5Mode?3?$AA@ DB 'Anti-aliasing Mode:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LHFGGPNL@IDS_ANTIALIAS_MODE?$AA@
CONST	SEGMENT
??_C@_0BD@LHFGGPNL@IDS_ANTIALIAS_MODE?$AA@ DB 'IDS_ANTIALIAS_MODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HBJLLDGE@IDS_TEXTURE_FILTER?$AA@
CONST	SEGMENT
??_C@_0BD@HBJLLDGE@IDS_TEXTURE_FILTER?$AA@ DB 'IDS_TEXTURE_FILTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@KABFLKEL@?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAR?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@KABFLKEL@?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAR?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAs?$AA?$AA@ DB 'H'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	's', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DECOBLOK@High?5Resolution?5Shadows?$AA@
CONST	SEGMENT
??_C@_0BI@DECOBLOK@High?5Resolution?5Shadows?$AA@ DB 'High Resolution Sha'
	DB	'dows', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EJKHOMHD@IDS_MENU_HIGH_RES_SHADOWS?$AA@
CONST	SEGMENT
??_C@_0BK@EJKHOMHD@IDS_MENU_HIGH_RES_SHADOWS?$AA@ DB 'IDS_MENU_HIGH_RES_S'
	DB	'HADOWS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07MCAEODGB@Default?$AA@
CONST	SEGMENT
??_C@_07MCAEODGB@Default?$AA@ DB 'Default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JFIDDPLE@TranslateDBClass?3?3Validate_Data?$AA@
CONST	SEGMENT
??_C@_0CA@JFIDDPLE@TranslateDBClass?3?3Validate_Data?$AA@ DB 'TranslateDB'
	DB	'Class::Validate_Data', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
_DATA	SEGMENT
?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b DD 0d0H ; `TranslateDBClass::Validate_Data'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@JOCINFGN@TranslateDBClass?3?3Free_Objects?$AA@
CONST	SEGMENT
??_C@_0BP@JOCINFGN@TranslateDBClass?3?3Free_Objects?$AA@ DB 'TranslateDBC'
	DB	'lass::Free_Objects', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Free_Objects@TranslateDBClass@@KAXXZ@4JA@fac20d4b
_DATA	SEGMENT
?__LINE__Var@?1??Free_Objects@TranslateDBClass@@KAXXZ@4JA@fac20d4b DD 047H ; `TranslateDBClass::Free_Objects'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H
	DB	'l', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'b', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '.', 00H, 'c', 00H
	DB	'p', 00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\translatedbclass.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KAMEBFOG@TranslateDBClass?3?3Free_Categorie@
CONST	SEGMENT
??_C@_0CC@KAMEBFOG@TranslateDBClass?3?3Free_Categorie@ DB 'TranslateDBCla'
	DB	'ss::Free_Categories', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Free_Categories@TranslateDBClass@@KAXXZ@4JA@fac20d4b
_DATA	SEGMENT
?__LINE__Var@?1??Free_Categories@TranslateDBClass@@KAXXZ@4JA@fac20d4b DD 03eH ; `TranslateDBClass::Free_Categories'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_7TextFileClass@@6B@
CONST	SEGMENT
??_7TextFileClass@@6B@ DD FLAT:??_R4TextFileClass@@6B@	; TextFileClass::`vftable'
	DD	FLAT:??_ETextFileClass@@UAEPAXI@Z
	DD	FLAT:?File_Name@RawFileClass@@UAEPBDXZ
	DD	FLAT:?Set_Name@RawFileClass@@UAEPBDPBD@Z
	DD	FLAT:?Create@RawFileClass@@UAE_NXZ
	DD	FLAT:?Delete@RawFileClass@@UAE_NXZ
	DD	FLAT:?Is_Available@RawFileClass@@UAE_NH@Z
	DD	FLAT:?Is_Open@RawFileClass@@UAE_NXZ
	DD	FLAT:?Open@RawFileClass@@UAEHH@Z
	DD	FLAT:?Open@RawFileClass@@UAEHPBDH@Z
	DD	FLAT:?Read@RawFileClass@@UAEHPAXH@Z
	DD	FLAT:?Seek@RawFileClass@@UAEHHH@Z
	DD	FLAT:?Tell@FileClass@@UAEHXZ
	DD	FLAT:?Size@RawFileClass@@UAEHXZ
	DD	FLAT:?Write@RawFileClass@@UAEHPAXH@Z
	DD	FLAT:?Close@RawFileClass@@UAEXXZ
	DD	FLAT:?Get_Date_Time@RawFileClass@@UAEKXZ
	DD	FLAT:?Set_Date_Time@RawFileClass@@UAE_NK@Z
	DD	FLAT:?Error@RawFileClass@@UAEXHHPBD@Z
	DD	FLAT:?Get_File_Handle@RawFileClass@@UAEPAXXZ
	DD	FLAT:?Bias@RawFileClass@@UAEXHH@Z
	DD	FLAT:?Is_Hash_Checked@RawFileClass@@UAE_NXZ
	DD	FLAT:?Attach@RawFileClass@@UAEXPAXH@Z
	DD	FLAT:?Detach@RawFileClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7RawFileClass@@6B@
CONST	SEGMENT
??_7RawFileClass@@6B@ DD FLAT:??_R4RawFileClass@@6B@	; RawFileClass::`vftable'
	DD	FLAT:??_ERawFileClass@@UAEPAXI@Z
	DD	FLAT:?File_Name@RawFileClass@@UAEPBDXZ
	DD	FLAT:?Set_Name@RawFileClass@@UAEPBDPBD@Z
	DD	FLAT:?Create@RawFileClass@@UAE_NXZ
	DD	FLAT:?Delete@RawFileClass@@UAE_NXZ
	DD	FLAT:?Is_Available@RawFileClass@@UAE_NH@Z
	DD	FLAT:?Is_Open@RawFileClass@@UAE_NXZ
	DD	FLAT:?Open@RawFileClass@@UAEHH@Z
	DD	FLAT:?Open@RawFileClass@@UAEHPBDH@Z
	DD	FLAT:?Read@RawFileClass@@UAEHPAXH@Z
	DD	FLAT:?Seek@RawFileClass@@UAEHHH@Z
	DD	FLAT:?Tell@FileClass@@UAEHXZ
	DD	FLAT:?Size@RawFileClass@@UAEHXZ
	DD	FLAT:?Write@RawFileClass@@UAEHPAXH@Z
	DD	FLAT:?Close@RawFileClass@@UAEXXZ
	DD	FLAT:?Get_Date_Time@RawFileClass@@UAEKXZ
	DD	FLAT:?Set_Date_Time@RawFileClass@@UAE_NK@Z
	DD	FLAT:?Error@RawFileClass@@UAEXHHPBD@Z
	DD	FLAT:?Get_File_Handle@RawFileClass@@UAEPAXXZ
	DD	FLAT:?Bias@RawFileClass@@UAEXHH@Z
	DD	FLAT:?Is_Hash_Checked@RawFileClass@@UAE_NXZ
	DD	FLAT:?Attach@RawFileClass@@UAEXPAXH@Z
	DD	FLAT:?Detach@RawFileClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_0BB@MDFCLIHN@TranslateDBClass?$AA@
CONST	SEGMENT
??_C@_0BB@MDFCLIHN@TranslateDBClass?$AA@ DB 'TranslateDBClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7TranslateDBClass@@6B@
CONST	SEGMENT
??_7TranslateDBClass@@6B@ DD FLAT:??_R4TranslateDBClass@@6B@ ; TranslateDBClass::`vftable'
	DD	FLAT:??_ETranslateDBClass@@UAEPAXI@Z
	DD	FLAT:?On_Post_Load@PostLoadableClass@@UAEXXZ
	DD	FLAT:?Chunk_ID@TranslateDBClass@@UBEIXZ
	DD	FLAT:?Contains_Data@TranslateDBClass@@MBE_NXZ
	DD	FLAT:?Save@TranslateDBClass@@MAE_NAAVChunkSaveClass@@@Z
	DD	FLAT:?Load@TranslateDBClass@@MAE_NAAVChunkLoadClass@@@Z
	DD	FLAT:?Name@TranslateDBClass@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7FileClass@@6B@
CONST	SEGMENT
??_7FileClass@@6B@ DD FLAT:??_R4FileClass@@6B@		; FileClass::`vftable'
	DD	FLAT:??_EFileClass@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Tell@FileClass@@UAEHXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Get_Date_Time@FileClass@@UAEKXZ
	DD	FLAT:?Set_Date_Time@FileClass@@UAE_NK@Z
	DD	FLAT:__purecall
	DD	FLAT:?Get_File_Handle@FileClass@@UAEPAXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
CRT$XCU	SEGMENT
?m_ObjectList$initializer$@TranslateDBClass@@0P6AXXZA DD FLAT:??__E?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A@@YAXXZ ; TranslateDBClass::m_ObjectList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?m_ObjectHash$initializer$@TranslateDBClass@@0P6AXXZA DD FLAT:??__E?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A@@YAXXZ ; TranslateDBClass::m_ObjectHash$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?m_CategoryList$initializer$@TranslateDBClass@@0P6AXXZA DD FLAT:??__E?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A@@YAXXZ ; TranslateDBClass::m_CategoryList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?m_VersionNumber$initializer$@TranslateDBClass@@0P6AXXZA DD FLAT:??__E?m_VersionNumber@TranslateDBClass@@0AAIA@@YAXXZ ; TranslateDBClass::m_VersionNumber$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?m_LanguageID$initializer$@TranslateDBClass@@0P6AXXZA DD FLAT:??__E?m_LanguageID@TranslateDBClass@@0AAIA@@YAXXZ ; TranslateDBClass::m_LanguageID$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?IsSingleLanguageExport$initializer$@TranslateDBClass@@0P6AXXZA DD FLAT:??__E?IsSingleLanguageExport@TranslateDBClass@@0AA_NA@@YAXXZ ; TranslateDBClass::IsSingleLanguageExport$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?FilterType$initializer$@TranslateDBClass@@0P6AXXZA DD FLAT:??__E?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A@@YAXXZ ; TranslateDBClass::FilterType$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?FilterCategoryID$initializer$@TranslateDBClass@@0P6AXXZA DD FLAT:??__E?FilterCategoryID@TranslateDBClass@@0AAIA@@YAXXZ ; TranslateDBClass::FilterCategoryID$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplatekeyclass.h
;	COMDAT ?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z PROC ; HashTemplateKeyClass<StringClass>::Get_Hash_Value, COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 34   : 	return key.GetHash();

	mov	ecx, DWORD PTR _key$[ebp]
	call	?GetHash@StringClass@@QBEIXZ		; StringClass::GetHash

; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z ENDP ; HashTemplateKeyClass<StringClass>::Get_Hash_Value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAPAVTDBCategoryClass@@@std@@YA$$QAPAVTDBCategoryClass@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVTDBCategoryClass@@@std@@YA$$QAPAVTDBCategoryClass@@AAPAV1@@Z PROC ; std::move<TDBCategoryClass * &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVTDBCategoryClass@@@std@@YA$$QAPAVTDBCategoryClass@@AAPAV1@@Z ENDP ; std::move<TDBCategoryClass * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EEntry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EEntry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEPAXI@Z PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EEntry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEPAXI@Z ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::~Entry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::~Entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::Entry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Entry::Entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete_All@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAEXXZ
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?Delete_All@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAEXXZ PROC ; DynamicVectorClass<TDBCategoryClass *>::Delete_All, COMDAT
; _this$ = ecx

; 457  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		int len = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _len$[ebp], ecx

; 459  : 		Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 460  : 		Resize(len);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 461  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete_All@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAEXXZ ENDP ; DynamicVectorClass<TDBCategoryClass *>::Delete_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NH@Z PROC ; DynamicVectorClass<TDBCategoryClass *>::Delete, COMDAT
; _this$ = ecx

; 444  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		if (index < ActiveCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN4@Delete

; 446  : 		{
; 447  : 			ActiveCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 448  : 			for (int i = index; i < ActiveCount; i++)

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN3@Delete
$LN2@Delete:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Delete:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN1@Delete

; 449  : 			{
; 450  : 				(*this)[i] = std::move((*this)[i+1]);

	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	push	eax
	call	??$move@AAPAVTDBCategoryClass@@@std@@YA$$QAPAVTDBCategoryClass@@AAPAV1@@Z ; std::move<TDBCategoryClass * &>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 451  : 			}

	jmp	SHORT $LN2@Delete
$LN1@Delete:

; 452  : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@Delete
$LN4@Delete:

; 453  : 		}
; 454  : 		return false;

	xor	al, al
$LN5@Delete:

; 455  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NH@Z ENDP ; DynamicVectorClass<TDBCategoryClass *>::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NABQAVTDBCategoryClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NABQAVTDBCategoryClass@@@Z PROC ; DynamicVectorClass<TDBCategoryClass *>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; VectorClass<TDBCategoryClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; VectorClass<TDBCategoryClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NABQAVTDBCategoryClass@@@Z ENDP ; DynamicVectorClass<TDBCategoryClass *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ PROC ; DynamicVectorClass<TDBCategoryClass *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ENDP ; DynamicVectorClass<TDBCategoryClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVTDBCategoryClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVTDBCategoryClass@@@@QBEHXZ PROC ; VectorClass<TDBCategoryClass *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVTDBCategoryClass@@@@QBEHXZ ENDP ; VectorClass<TDBCategoryClass *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z PROC ; VectorClass<TDBCategoryClass *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ENDP ; VectorClass<TDBCategoryClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E?FilterCategoryID@TranslateDBClass@@0AAIA@@YAXXZ
text$yc	SEGMENT
??__E?FilterCategoryID@TranslateDBClass@@0AAIA@@YAXXZ PROC ; `dynamic initializer for 'TranslateDBClass::FilterCategoryID'', COMDAT

; 42   : REF_DEF2(uint32, TranslateDBClass::FilterCategoryID, 0x00815868, 0x00814A40);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8473152					; 00814a40H
	push	8476776					; 00815868H
	call	??$ResolveGameReference@I@@YAAAIHHH@Z	; ResolveGameReference<unsigned int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?FilterCategoryID@TranslateDBClass@@0AAIA, eax ; TranslateDBClass::FilterCategoryID
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?FilterCategoryID@TranslateDBClass@@0AAIA@@YAXXZ ENDP ; `dynamic initializer for 'TranslateDBClass::FilterCategoryID''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A@@YAXXZ
text$yc	SEGMENT
??__E?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A@@YAXXZ PROC ; `dynamic initializer for 'TranslateDBClass::FilterType'', COMDAT

; 41   : REF_DEF2(TranslateDBClass::FILTER_OPT, TranslateDBClass::FilterType, 0x0085FD2C, 0x0085EF14);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8777492					; 0085ef14H
	push	8781100					; 0085fd2cH
	call	??$ResolveGameReference@W4FILTER_OPT@TranslateDBClass@@@@YAAAW4FILTER_OPT@TranslateDBClass@@HHH@Z ; ResolveGameReference<enum TranslateDBClass::FILTER_OPT>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A, eax ; TranslateDBClass::FilterType
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A@@YAXXZ ENDP ; `dynamic initializer for 'TranslateDBClass::FilterType''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@W4FILTER_OPT@TranslateDBClass@@@@YAAAW4FILTER_OPT@TranslateDBClass@@HHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@W4FILTER_OPT@TranslateDBClass@@@@YAAAW4FILTER_OPT@TranslateDBClass@@HHH@Z PROC ; ResolveGameReference<enum TranslateDBClass::FILTER_OPT>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@W4FILTER_OPT@TranslateDBClass@@@@YAAAW4FILTER_OPT@TranslateDBClass@@HHH@Z ENDP ; ResolveGameReference<enum TranslateDBClass::FILTER_OPT>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E?IsSingleLanguageExport@TranslateDBClass@@0AA_NA@@YAXXZ
text$yc	SEGMENT
??__E?IsSingleLanguageExport@TranslateDBClass@@0AA_NA@@YAXXZ PROC ; `dynamic initializer for 'TranslateDBClass::IsSingleLanguageExport'', COMDAT

; 40   : REF_DEF2(bool, TranslateDBClass::IsSingleLanguageExport, 0x0085FD28, 0x0085EF10);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8777488					; 0085ef10H
	push	8781096					; 0085fd28H
	call	??$ResolveGameReference@_N@@YAAA_NHHH@Z	; ResolveGameReference<bool>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?IsSingleLanguageExport@TranslateDBClass@@0AA_NA, eax ; TranslateDBClass::IsSingleLanguageExport
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?IsSingleLanguageExport@TranslateDBClass@@0AA_NA@@YAXXZ ENDP ; `dynamic initializer for 'TranslateDBClass::IsSingleLanguageExport''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@_N@@YAAA_NHHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@_N@@YAAA_NHHH@Z PROC		; ResolveGameReference<bool>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@_N@@YAAA_NHHH@Z ENDP		; ResolveGameReference<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E?m_LanguageID@TranslateDBClass@@0AAIA@@YAXXZ
text$yc	SEGMENT
??__E?m_LanguageID@TranslateDBClass@@0AAIA@@YAXXZ PROC	; `dynamic initializer for 'TranslateDBClass::m_LanguageID'', COMDAT

; 39   : REF_DEF2(uint32, TranslateDBClass::m_LanguageID, 0x0085FD24, 0x0085EF0C);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8777484					; 0085ef0cH
	push	8781092					; 0085fd24H
	call	??$ResolveGameReference@I@@YAAAIHHH@Z	; ResolveGameReference<unsigned int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_LanguageID@TranslateDBClass@@0AAIA, eax ; TranslateDBClass::m_LanguageID
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_LanguageID@TranslateDBClass@@0AAIA@@YAXXZ ENDP	; `dynamic initializer for 'TranslateDBClass::m_LanguageID''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E?m_VersionNumber@TranslateDBClass@@0AAIA@@YAXXZ
text$yc	SEGMENT
??__E?m_VersionNumber@TranslateDBClass@@0AAIA@@YAXXZ PROC ; `dynamic initializer for 'TranslateDBClass::m_VersionNumber'', COMDAT

; 38   : REF_DEF2(uint32, TranslateDBClass::m_VersionNumber, 0x00815864, 0x00814A3C);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8473148					; 00814a3cH
	push	8476772					; 00815864H
	call	??$ResolveGameReference@I@@YAAAIHHH@Z	; ResolveGameReference<unsigned int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_VersionNumber@TranslateDBClass@@0AAIA, eax ; TranslateDBClass::m_VersionNumber
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_VersionNumber@TranslateDBClass@@0AAIA@@YAXXZ ENDP ; `dynamic initializer for 'TranslateDBClass::m_VersionNumber''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@I@@YAAAIHHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@I@@YAAAIHHH@Z PROC		; ResolveGameReference<unsigned int>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@I@@YAAAIHHH@Z ENDP		; ResolveGameReference<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A@@YAXXZ
text$yc	SEGMENT
??__E?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A@@YAXXZ PROC ; `dynamic initializer for 'TranslateDBClass::m_CategoryList'', COMDAT

; 37   : REF_DEF2(TDB_CATEGORY_LIST, TranslateDBClass::m_CategoryList, 0x0085FCF0, 0x0085EED8);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8777432					; 0085eed8H
	push	8781040					; 0085fcf0H
	call	??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBCategoryClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@HHH@Z ; ResolveGameReference<DynamicVectorClass<TDBCategoryClass *> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A, eax ; TranslateDBClass::m_CategoryList
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'TranslateDBClass::m_CategoryList''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBCategoryClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@HHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBCategoryClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@HHH@Z PROC ; ResolveGameReference<DynamicVectorClass<TDBCategoryClass *> >, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBCategoryClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@HHH@Z ENDP ; ResolveGameReference<DynamicVectorClass<TDBCategoryClass *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A@@YAXXZ
text$yc	SEGMENT
??__E?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A@@YAXXZ PROC ; `dynamic initializer for 'TranslateDBClass::m_ObjectHash'', COMDAT

; 36   : REF_DEF2(TT_NOOP(HashTemplateClass<StringClass, TDBObjClass*>), TranslateDBClass::m_ObjectHash, 0x0085FCD0, 0x0085EEB8);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8777400					; 0085eeb8H
	push	8781008					; 0085fcd0H
	call	??$ResolveGameReference@V?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@@@YAAAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@HHH@Z ; ResolveGameReference<HashTemplateClass<StringClass,TDBObjClass *> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A, eax ; TranslateDBClass::m_ObjectHash
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'TranslateDBClass::m_ObjectHash''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@V?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@@@YAAAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@HHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@V?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@@@YAAAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@HHH@Z PROC ; ResolveGameReference<HashTemplateClass<StringClass,TDBObjClass *> >, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@V?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@@@YAAAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@HHH@Z ENDP ; ResolveGameReference<HashTemplateClass<StringClass,TDBObjClass *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A@@YAXXZ
text$yc	SEGMENT
??__E?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A@@YAXXZ PROC ; `dynamic initializer for 'TranslateDBClass::m_ObjectList'', COMDAT

; 35   : REF_DEF2(TDB_OBJ_LIST, TranslateDBClass::m_ObjectList, 0x0085FD08, 0x0085EEF0);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	0
	push	8777456					; 0085eef0H
	push	8781064					; 0085fd08H
	call	??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBObjClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBObjClass@@@@HHH@Z ; ResolveGameReference<DynamicVectorClass<TDBObjClass *> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A, eax ; TranslateDBClass::m_ObjectList
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'TranslateDBClass::m_ObjectList''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBObjClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBObjClass@@@@HHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBObjClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBObjClass@@@@HHH@Z PROC ; ResolveGameReference<DynamicVectorClass<TDBObjClass *> >, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@V?$DynamicVectorClass@PAVTDBObjClass@@@@@@YAAAV?$DynamicVectorClass@PAVTDBObjClass@@@@HHH@Z ENDP ; ResolveGameReference<DynamicVectorClass<TDBObjClass *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__F_TheTranslateDB@@YAXXZ
text$yd	SEGMENT
??__F_TheTranslateDB@@YAXXZ PROC			; `dynamic atexit destructor for '_TheTranslateDB'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?_TheTranslateDB@@3VTranslateDBClass@@A ; _TheTranslateDB
	call	??1TranslateDBClass@@UAE@XZ		; TranslateDBClass::~TranslateDBClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__F_TheTranslateDB@@YAXXZ ENDP			; `dynamic atexit destructor for '_TheTranslateDB''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ??__E_TheTranslateDB@@YAXXZ
text$yc	SEGMENT
??__E_TheTranslateDB@@YAXXZ PROC			; `dynamic initializer for '_TheTranslateDB'', COMDAT

; 22   : TranslateDBClass _TheTranslateDB;

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?_TheTranslateDB@@3VTranslateDBClass@@A ; _TheTranslateDB
	call	??0TranslateDBClass@@QAE@XZ		; TranslateDBClass::TranslateDBClass
	push	OFFSET ??__F_TheTranslateDB@@YAXXZ	; `dynamic atexit destructor for '_TheTranslateDB''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_TheTranslateDB@@YAXXZ ENDP			; `dynamic initializer for '_TheTranslateDB''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GTextFileClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTextFileClass@@UAEPAXI@Z PROC			; TextFileClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextFileClass@@UAE@XZ		; TextFileClass::~TextFileClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextFileClass@@UAEPAXI@Z ENDP			; TextFileClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z
_TEXT	SEGMENT
tv90 = -76						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z PROC	; TextFileClass::Write_Line, COMDAT
; _this$ = ecx

; 433  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 434  : 		int len = str.Get_Length();

	mov	ecx, DWORD PTR _str$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _len$[ebp], eax

; 435  : 		if (Write((void *)str.Peek_Buffer(),len) == len)

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	?Peek_Buffer@StringClass@@QBEPBDXZ	; StringClass::Peek_Buffer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	eax, DWORD PTR _len$[ebp]
	jne	SHORT $LN1@Write_Line

; 436  : 		{
; 437  : 			return Write("\r\n",2) == 2;

	push	2
	push	OFFSET ??_C@_02PCIJFNDE@?$AN?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	eax, 2
	jne	SHORT $LN4@Write_Line
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN5@Write_Line
$LN4@Write_Line:
	mov	DWORD PTR tv90[ebp], 0
$LN5@Write_Line:
	mov	al, BYTE PTR tv90[ebp]
	jmp	SHORT $LN2@Write_Line
$LN1@Write_Line:

; 438  : 		}
; 439  : 		return false;

	xor	al, al
$LN2@Write_Line:

; 440  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ENDP	; TextFileClass::Write_Line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ??1TextFileClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TextFileClass@@UAE@XZ PROC				; TextFileClass::~TextFileClass, COMDAT
; _this$ = ecx

; 402  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TextFileClass@@6B@

; 403  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RawFileClass@@UAE@XZ			; RawFileClass::~RawFileClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1TextFileClass@@UAE@XZ ENDP				; TextFileClass::~TextFileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ??0TextFileClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TextFileClass@@QAE@XZ PROC				; TextFileClass::TextFileClass, COMDAT
; _this$ = ecx

; 398  : 	TextFileClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RawFileClass@@QAE@XZ			; RawFileClass::RawFileClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TextFileClass@@6B@

; 399  : 	{
; 400  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TextFileClass@@QAE@XZ ENDP				; TextFileClass::TextFileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_math.h
;	COMDAT ??$clamp@H@@YAHHHH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
??$clamp@H@@YAHHHH@Z PROC				; clamp<int>, COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 39   : 	if (value < min)

	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _min$[ebp]
	jge	SHORT $LN2@clamp

; 40   : 		return min;

	mov	eax, DWORD PTR _min$[ebp]
	jmp	SHORT $LN3@clamp
$LN2@clamp:

; 41   : 
; 42   : 	if (value > max)

	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jle	SHORT $LN1@clamp

; 43   : 		return max;

	mov	eax, DWORD PTR _max$[ebp]
	jmp	SHORT $LN3@clamp
$LN1@clamp:

; 44   : 
; 45   : 	return value;

	mov	eax, DWORD PTR _value$[ebp]
$LN3@clamp:

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$clamp@H@@YAHHHH@Z ENDP				; clamp<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GRawFileClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRawFileClass@@UAEPAXI@Z PROC			; RawFileClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RawFileClass@@UAE@XZ			; RawFileClass::~RawFileClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRawFileClass@@UAEPAXI@Z ENDP			; RawFileClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Detach@RawFileClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Detach@RawFileClass@@UAEXXZ PROC			; RawFileClass::Detach, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 		Rights = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 388  : 		Handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -1

; 389  : 		BiasStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 390  : 		BiasLength = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 391  : 		Date = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+24], ax

; 392  : 		Time = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+26], ax

; 393  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@RawFileClass@@UAEXXZ ENDP			; RawFileClass::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Attach@RawFileClass@@UAEXPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_handle$ = 8						; size = 4
_rights$ = 12						; size = 4
?Attach@RawFileClass@@UAEXPAXH@Z PROC			; RawFileClass::Attach, COMDAT
; _this$ = ecx

; 376  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@RawFileClass@@QAEXXZ		; RawFileClass::Reset

; 378  : 		Handle = handle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _handle$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 379  : 		Rights = rights;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rights$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 380  : 		BiasStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 381  : 		BiasLength = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 382  : 		Date = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+24], ax

; 383  : 		Time = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+26], ax

; 384  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Attach@RawFileClass@@UAEXPAXH@Z ENDP			; RawFileClass::Attach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Bias@RawFileClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_length$ = 12						; size = 4
?Bias@RawFileClass@@UAEXHH@Z PROC			; RawFileClass::Bias, COMDAT
; _this$ = ecx

; 354  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		if (start == 0)

	cmp	DWORD PTR _start$[ebp], 0
	jne	SHORT $LN9@Bias
$LN7@Bias:

; 356  : 		{
; 357  : 			TT_ASSERT(length == -1);

	xor	eax, eax
	jne	SHORT $LN7@Bias
	cmp	DWORD PTR _length$[ebp], -1
	je	SHORT $LN5@Bias
	int	3
$LN5@Bias:

; 358  : 			BiasStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 359  : 			BiasLength = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 360  : 		}
; 361  : 		else

	jmp	SHORT $LN10@Bias
$LN9@Bias:

; 362  : 		{
; 363  : 			BiasLength = Size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 364  : 			BiasStart += start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 365  : 			if (length != -1)

	cmp	DWORD PTR _length$[ebp], -1
	je	SHORT $LN10@Bias

; 366  : 			{
; 367  : 				if (length < BiasLength)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN2@Bias

; 368  : 					BiasLength = length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN2@Bias:

; 369  : 				
; 370  : 				if (BiasLength < 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN10@Bias

; 371  : 					BiasLength = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN10@Bias:

; 372  : 			}
; 373  : 		}
; 374  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Bias@RawFileClass@@UAEXHH@Z ENDP			; RawFileClass::Bias
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Get_File_Handle@RawFileClass@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Handle@RawFileClass@@UAEPAXXZ PROC		; RawFileClass::Get_File_Handle, COMDAT
; _this$ = ecx

; 350  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 351  : 		return Handle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 352  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Handle@RawFileClass@@UAEPAXXZ ENDP		; RawFileClass::Get_File_Handle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Error@RawFileClass@@UAEXHHPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?Error@RawFileClass@@UAEXHHPBD@Z PROC			; RawFileClass::Error, COMDAT
; _this$ = ecx

; 347  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 348  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Error@RawFileClass@@UAEXHHPBD@Z ENDP			; RawFileClass::Error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Set_Date_Time@RawFileClass@@UAE_NK@Z
_TEXT	SEGMENT
_filetime$ = -64					; size = 8
_info$ = -56						; size = 52
_this$ = -4						; size = 4
_datetime$ = 8						; size = 4
?Set_Date_Time@RawFileClass@@UAE_NK@Z PROC		; RawFileClass::Set_Date_Time, COMDAT
; _this$ = ecx

; 328  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 		BY_HANDLE_FILE_INFORMATION info;
; 330  : 		FILETIME filetime;
; 331  : 		if (Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Set_Date_T

; 332  : 		{
; 333  : 			if (GetFileInformationByHandle(Handle,&info))

	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR __imp__GetFileInformationByHandle@8
	test	eax, eax
	je	SHORT $LN4@Set_Date_T

; 334  : 			{
; 335  : 				if (DosDateTimeToFileTime((WORD)(datetime >> 0x10),(WORD)datetime,&filetime))

	lea	eax, DWORD PTR _filetime$[ebp]
	push	eax
	movzx	ecx, WORD PTR _datetime$[ebp]
	push	ecx
	mov	edx, DWORD PTR _datetime$[ebp]
	shr	edx, 16					; 00000010H
	push	edx
	call	DWORD PTR __imp__DosDateTimeToFileTime@12
	test	eax, eax
	je	SHORT $LN4@Set_Date_T

; 336  : 				{
; 337  : 					if (SetFileTime(Handle,&info.ftCreationTime,&filetime,&filetime))

	lea	eax, DWORD PTR _filetime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _filetime$[ebp]
	push	ecx
	lea	edx, DWORD PTR _info$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__SetFileTime@16
	test	eax, eax
	je	SHORT $LN4@Set_Date_T

; 338  : 					{
; 339  : 						return true;

	mov	al, 1
	jmp	SHORT $LN5@Set_Date_T
$LN4@Set_Date_T:

; 340  : 					}
; 341  : 				}
; 342  : 			}
; 343  : 		}
; 344  : 		return false;

	xor	al, al
$LN5@Set_Date_T:

; 345  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Date_Time@RawFileClass@@UAE_NK@Z ENDP		; RawFileClass::Set_Date_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Get_Date_Time@RawFileClass@@UAEKXZ
_TEXT	SEGMENT
_dosdate$ = -64						; size = 2
_dostime$ = -60						; size = 2
_info$ = -56						; size = 52
_this$ = -4						; size = 4
?Get_Date_Time@RawFileClass@@UAEKXZ PROC		; RawFileClass::Get_Date_Time, COMDAT
; _this$ = ecx

; 316  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 317  : 		BY_HANDLE_FILE_INFORMATION info;
; 318  : 		unsigned short dostime;
; 319  : 		unsigned short dosdate;
; 320  : 		if (GetFileInformationByHandle(Handle,&info))

	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR __imp__GetFileInformationByHandle@8
	test	eax, eax
	je	SHORT $LN1@Get_Date_T

; 321  : 		{
; 322  : 			FileTimeToDosDateTime(&info.ftLastWriteTime, &dosdate, &dostime);

	lea	eax, DWORD PTR _dostime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dosdate$[ebp]
	push	ecx
	lea	edx, DWORD PTR _info$[ebp+20]
	push	edx
	call	DWORD PTR __imp__FileTimeToDosDateTime@12

; 323  : 			return dosdate << 0x10 | dostime;

	movzx	eax, WORD PTR _dosdate$[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _dostime$[ebp]
	or	eax, ecx
	jmp	SHORT $LN2@Get_Date_T
$LN1@Get_Date_T:

; 324  : 		}
; 325  : 		return 0;

	xor	eax, eax
$LN2@Get_Date_T:

; 326  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Date_Time@RawFileClass@@UAEKXZ ENDP		; RawFileClass::Get_Date_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Close@RawFileClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@RawFileClass@@UAEXXZ PROC			; RawFileClass::Close, COMDAT
; _this$ = ecx

; 304  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 305  : 		if (Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Close

; 306  : 		{
; 307  : 			if (!CloseHandle(Handle))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	test	eax, eax
	jne	SHORT $LN1@Close

; 308  : 				Error(GetLastError(), 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN1@Close:

; 309  : 			
; 310  : 			Handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -1
$LN3@Close:

; 311  : 		}
; 312  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@RawFileClass@@UAEXXZ ENDP			; RawFileClass::Close
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Write@RawFileClass@@UAEHPAXH@Z
_TEXT	SEGMENT
_bytesWritten$ = -8					; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Write@RawFileClass@@UAEHPAXH@Z PROC			; RawFileClass::Write, COMDAT
; _this$ = ecx

; 276  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		DWORD bytesWritten = 0;

	mov	DWORD PTR _bytesWritten$[ebp], 0

; 278  : 		if (!Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@Write

; 279  : 		{
; 280  : 			if (Open(2))

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	test	eax, eax
	je	SHORT $LN5@Write

; 281  : 			{
; 282  : 				bytesWritten = Write(buffer, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	mov	DWORD PTR _bytesWritten$[ebp], eax

; 283  : 				Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN5@Write:

; 284  : 			}
; 285  : 		}
; 286  : 		else

	jmp	SHORT $LN4@Write
$LN6@Write:

; 287  : 		{
; 288  : 			if (!WriteFile(Handle, buffer, size, &bytesWritten, 0))

	push	0
	lea	eax, DWORD PTR _bytesWritten$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	jne	SHORT $LN3@Write

; 289  : 				Error(GetLastError(), 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN3@Write:

; 290  : 			
; 291  : 			if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN4@Write

; 292  : 			{
; 293  : 				if (Raw_Seek(0, 1) > BiasStart + BiasLength)

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+12]
	cmp	eax, edx
	jle	SHORT $LN4@Write

; 294  : 				{
; 295  : 					BiasLength = Raw_Seek(0, 1) - BiasStart;

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN4@Write:

; 296  : 				}
; 297  : 			}
; 298  : 		}
; 299  : 		return bytesWritten;

	mov	eax, DWORD PTR _bytesWritten$[ebp]

; 300  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Write@RawFileClass@@UAEHPAXH@Z ENDP			; RawFileClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Size@RawFileClass@@UAEHXZ
_TEXT	SEGMENT
_size$1 = -8						; size = 4
_this$ = -4						; size = 4
?Size@RawFileClass@@UAEHXZ PROC				; RawFileClass::Size, COMDAT
; _this$ = ecx

; 250  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 		if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN6@Size

; 252  : 			return BiasLength;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	$LN7@Size

; 253  : 		else

	jmp	$LN7@Size
$LN6@Size:

; 254  : 		{
; 255  : 			int size = -1;

	mov	DWORD PTR _size$1[ebp], -1

; 256  : 			if (!Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@Size

; 257  : 			{
; 258  : 				if (Open(1))

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	test	eax, eax
	je	SHORT $LN3@Size

; 259  : 				{
; 260  : 					size = Size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	DWORD PTR _size$1[ebp], eax

; 261  : 					Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN3@Size:

; 262  : 				}
; 263  : 			}
; 264  : 			else

	jmp	SHORT $LN2@Size
$LN4@Size:

; 265  : 			{
; 266  : 				size = GetFileSize(Handle,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__GetFileSize@8
	mov	DWORD PTR _size$1[ebp], eax

; 267  : 				if (size == -1)

	cmp	DWORD PTR _size$1[ebp], -1
	jne	SHORT $LN2@Size

; 268  : 					Error(GetLastError(), 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN2@Size:

; 269  : 			}
; 270  : 			return size;

	mov	eax, DWORD PTR _size$1[ebp]
$LN7@Size:

; 271  : 		}
; 272  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@RawFileClass@@UAEHXZ ENDP				; RawFileClass::Size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Raw_Seek@RawFileClass@@QAEHHH@Z
_TEXT	SEGMENT
_seek$ = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_dir$ = 12						; size = 4
?Raw_Seek@RawFileClass@@QAEHHH@Z PROC			; RawFileClass::Raw_Seek, COMDAT
; _this$ = ecx

; 237  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 		if (!Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Raw_Seek

; 239  : 			Error(9, 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN2@Raw_Seek:

; 240  : 		
; 241  : 		int seek = SetFilePointer(Handle, pos, 0, dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	DWORD PTR __imp__SetFilePointer@16
	mov	DWORD PTR _seek$[ebp], eax

; 242  : 		if (seek == -1)

	cmp	DWORD PTR _seek$[ebp], -1
	jne	SHORT $LN1@Raw_Seek

; 243  : 			Error(GetLastError(), 0, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN1@Raw_Seek:

; 244  : 		
; 245  : 		return seek;

	mov	eax, DWORD PTR _seek$[ebp]

; 246  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Raw_Seek@RawFileClass@@QAEHHH@Z ENDP			; RawFileClass::Raw_Seek
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Seek@RawFileClass@@UAEHHH@Z
_TEXT	SEGMENT
tv66 = -76						; size = 4
_result$1 = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_dir$ = 12						; size = 4
?Seek@RawFileClass@@UAEHHH@Z PROC			; RawFileClass::Seek, COMDAT
; _this$ = ecx

; 215  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	$LN11@Seek

; 217  : 		{
; 218  : 			switch (dir)

	mov	eax, DWORD PTR _dir$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN8@Seek
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN7@Seek
	jmp	SHORT $LN9@Seek
$LN8@Seek:

; 219  : 			{
; 220  : 			case 1: pos += Raw_Seek(0, 1) - BiasStart; break;

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN9@Seek
$LN7@Seek:

; 221  : 			case 2: pos += BiasLength; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pos$[ebp], ecx
$LN9@Seek:

; 222  : 			}
; 223  : 
; 224  : 			int result = Raw_Seek(BiasStart + clamp(pos, 0, BiasLength), 0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	??$clamp@H@@YAHHHH@Z			; clamp<int>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
	mov	DWORD PTR _result$1[ebp], eax

; 225  : 			if (result != -1)

	cmp	DWORD PTR _result$1[ebp], -1
	je	SHORT $LN4@Seek

; 226  : 				result -= BiasStart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _result$1[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$1[ebp], ecx
$LN4@Seek:

; 227  : 
; 228  : 			TT_ASSERT(result <= BiasLength);

	xor	eax, eax
	jne	SHORT $LN4@Seek
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _result$1[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN2@Seek
	int	3
$LN2@Seek:

; 229  : 			return result;

	mov	eax, DWORD PTR _result$1[ebp]
	jmp	SHORT $LN12@Seek

; 230  : 		}
; 231  : 		else

	jmp	SHORT $LN12@Seek
$LN11@Seek:

; 232  : 			return Raw_Seek(pos, dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Raw_Seek@RawFileClass@@QAEHHH@Z	; RawFileClass::Raw_Seek
$LN12@Seek:

; 233  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Seek@RawFileClass@@UAEHHH@Z ENDP			; RawFileClass::Seek
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Read@RawFileClass@@UAEHPAXH@Z
_TEXT	SEGMENT
_maxBytesToRead$1 = -12					; size = 4
_bytesRead$ = -8					; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_bytesToRead$ = 12					; size = 4
?Read@RawFileClass@@UAEHPAXH@Z PROC			; RawFileClass::Read, COMDAT
; _this$ = ecx

; 187  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 		DWORD bytesRead = 0;

	mov	DWORD PTR _bytesRead$[ebp], 0

; 189  : 		if (!Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@Read

; 190  : 		{
; 191  : 			if (Open(1))

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	test	eax, eax
	je	SHORT $LN5@Read

; 192  : 			{
; 193  : 				bytesRead = Read(buffer, bytesToRead);

	mov	eax, DWORD PTR _bytesToRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	mov	DWORD PTR _bytesRead$[ebp], eax

; 194  : 				Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN5@Read:

; 195  : 			}
; 196  : 		}
; 197  : 		else

	jmp	SHORT $LN4@Read
$LN6@Read:

; 198  : 		{
; 199  : 			if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN3@Read

; 200  : 			{
; 201  : 				int maxBytesToRead = BiasLength - Tell();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, eax
	mov	DWORD PTR _maxBytesToRead$1[ebp], edx

; 202  : 				if (bytesToRead > maxBytesToRead)

	mov	eax, DWORD PTR _bytesToRead$[ebp]
	cmp	eax, DWORD PTR _maxBytesToRead$1[ebp]
	jle	SHORT $LN3@Read

; 203  : 					bytesToRead = maxBytesToRead;

	mov	eax, DWORD PTR _maxBytesToRead$1[ebp]
	mov	DWORD PTR _bytesToRead$[ebp], eax
$LN3@Read:

; 204  : 			}
; 205  : 			
; 206  : 			if (!ReadFile(Handle, buffer, bytesToRead, &bytesRead, NULL))

	push	0
	lea	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytesToRead$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
	test	eax, eax
	jne	SHORT $LN4@Read

; 207  : 				Error(GetLastError(), 1, Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	1
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN4@Read:

; 208  : 		}
; 209  : 		
; 210  : 		return bytesRead;

	mov	eax, DWORD PTR _bytesRead$[ebp]

; 211  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Read@RawFileClass@@UAEHPAXH@Z ENDP			; RawFileClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Open@RawFileClass@@UAEHH@Z
_TEXT	SEGMENT
tv88 = -72						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?Open@RawFileClass@@UAEHH@Z PROC			; RawFileClass::Open, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 152  : 		if (Filename.Is_Empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@Open

; 153  : 		{
; 154  : 			Error(2,0,0);

	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN10@Open:

; 155  : 		}
; 156  : 		Rights = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 157  : 		switch (Rights)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 3
	ja	$LN3@Open
	mov	edx, DWORD PTR tv88[ebp]
	jmp	DWORD PTR $LN13@Open[edx*4]
$LN7@Open:

; 158  : 		{
; 159  : 		case 3: //DA
; 160  : 			Handle = CreateFileA(Filename, GENERIC_WRITE, 0, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

	push	0
	push	128					; 00000080H
	push	4
	push	0
	push	0
	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 161  : 			break;

	jmp	$LN8@Open
$LN6@Open:

; 162  : 		case 2:
; 163  : 			Handle = CreateFileA(Filename,GENERIC_WRITE,0,0,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,0);

	push	0
	push	128					; 00000080H
	push	2
	push	0
	push	0
	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 164  : 			break;

	jmp	SHORT $LN8@Open
$LN5@Open:

; 165  : 		case 1:
; 166  : 			Handle = CreateFileA(Filename,GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN,0);

	push	0
	push	134217856				; 08000080H
	push	3
	push	0
	push	1
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 167  : 			break;

	jmp	SHORT $LN8@Open
$LN4@Open:

; 168  : 		case 0:
; 169  : 			Handle = CreateFileA(Filename,GENERIC_READ|GENERIC_WRITE,0,0,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,0);

	push	0
	push	128					; 00000080H
	push	4
	push	0
	push	0
	push	-1073741824				; c0000000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 170  : 			break;

	jmp	SHORT $LN8@Open
$LN3@Open:

; 171  : 		default:
; 172  : 			errno = EINVAL;

	call	DWORD PTR __imp___errno
	mov	DWORD PTR [eax], 22			; 00000016H
$LN8@Open:

; 173  : 		}
; 174  : 		if ((BiasStart) && (BiasLength != -1))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@Open
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN2@Open

; 175  : 		{
; 176  : 			Seek(0,0);

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN2@Open:

; 177  : 		}
; 178  : 		if (Handle != INVALID_HANDLE_VALUE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], -1
	je	SHORT $LN1@Open

; 179  : 		{
; 180  : 			return true;

	mov	eax, 1
	jmp	SHORT $LN11@Open
$LN1@Open:

; 181  : 		}
; 182  : 		return false;

	xor	eax, eax
$LN11@Open:

; 183  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN13@Open:
	DD	$LN4@Open
	DD	$LN5@Open
	DD	$LN6@Open
	DD	$LN7@Open
?Open@RawFileClass@@UAEHH@Z ENDP			; RawFileClass::Open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Open@RawFileClass@@UAEHPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_mode$ = 12						; size = 4
?Open@RawFileClass@@UAEHPBDH@Z PROC			; RawFileClass::Open, COMDAT
; _this$ = ecx

; 145  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		Set_Name(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 147  : 		return Open(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 148  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Open@RawFileClass@@UAEHPBDH@Z ENDP			; RawFileClass::Open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Is_Open@RawFileClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Open@RawFileClass@@UAE_NXZ PROC			; RawFileClass::Is_Open, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		if (Handle != INVALID_HANDLE_VALUE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], -1
	je	SHORT $LN1@Is_Open

; 139  : 		{
; 140  : 			return true;

	mov	al, 1
	jmp	SHORT $LN2@Is_Open
$LN1@Is_Open:

; 141  : 		}
; 142  : 		return false;

	xor	al, al
$LN2@Is_Open:

; 143  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Open@RawFileClass@@UAE_NXZ ENDP			; RawFileClass::Is_Open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Is_Available@RawFileClass@@UAE_NH@Z
_TEXT	SEGMENT
tv135 = -76						; size = 4
_attr$ = -8						; size = 4
_this$ = -4						; size = 4
__handle$ = 8						; size = 4
?Is_Available@RawFileClass@@UAE_NH@Z PROC		; RawFileClass::Is_Available, COMDAT
; _this$ = ecx

; 119  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		if (Filename.Is_Empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Is_Availab

; 121  : 			return false;

	xor	al, al
	jmp	SHORT $LN4@Is_Availab
$LN3@Is_Availab:

; 122  : 		
; 123  : 		if (Is_Open())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Is_Availab

; 124  : 			return true;

	mov	al, 1
	jmp	SHORT $LN4@Is_Availab
$LN2@Is_Availab:

; 125  : 		
; 126  : 		if (_handle)

	cmp	DWORD PTR __handle$[ebp], 0
	je	SHORT $LN1@Is_Availab

; 127  : 		{
; 128  : 			Open(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 129  : 			Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 130  : 			return true;

	mov	al, 1
	jmp	SHORT $LN4@Is_Availab
$LN1@Is_Availab:

; 131  : 		}
; 132  : 
; 133  : 		int attr = GetFileAttributesA(Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	mov	DWORD PTR _attr$[ebp], eax

; 134  : 		return attr != INVALID_FILE_ATTRIBUTES && !(attr & FILE_ATTRIBUTE_DIRECTORY);

	cmp	DWORD PTR _attr$[ebp], -1
	je	SHORT $LN6@Is_Availab
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 16					; 00000010H
	jne	SHORT $LN6@Is_Availab
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN7@Is_Availab
$LN6@Is_Availab:
	mov	DWORD PTR tv135[ebp], 0
$LN7@Is_Availab:
	mov	al, BYTE PTR tv135[ebp]
$LN4@Is_Availab:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_Available@RawFileClass@@UAE_NH@Z ENDP		; RawFileClass::Is_Available
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Delete@RawFileClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Delete@RawFileClass@@UAE_NXZ PROC			; RawFileClass::Delete, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 103  : 		if (Filename.Is_Empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Is_Empty@StringClass@@QBE_NXZ		; StringClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Delete

; 104  : 		{
; 105  : 			Error(2,0,0);

	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN3@Delete:

; 106  : 		}
; 107  : 		if (!Is_Available(0))

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Delete

; 108  : 		{
; 109  : 			return false;

	xor	al, al
	jmp	SHORT $LN4@Delete
$LN2@Delete:

; 110  : 		}
; 111  : 		if (!DeleteFileA(Filename))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp__DeleteFileA@4
	test	eax, eax
	jne	SHORT $LN1@Delete

; 112  : 		{
; 113  : 			Error(GetLastError(),0,Filename);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	push	0
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 114  : 			return false;

	xor	al, al
	jmp	SHORT $LN4@Delete
$LN1@Delete:

; 115  : 		}
; 116  : 		return true;

	mov	al, 1
$LN4@Delete:

; 117  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete@RawFileClass@@UAE_NXZ ENDP			; RawFileClass::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Create@RawFileClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Create@RawFileClass@@UAE_NXZ PROC			; RawFileClass::Create, COMDAT
; _this$ = ecx

; 87   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 89   : 		if (!Open(2))

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	test	eax, eax
	jne	SHORT $LN2@Create

; 90   : 		{
; 91   : 			return false;

	xor	al, al
	jmp	SHORT $LN3@Create
$LN2@Create:

; 92   : 		}
; 93   : 		if (BiasLength != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN1@Create

; 94   : 		{
; 95   : 			Seek(0,0);

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN1@Create:

; 96   : 		}
; 97   : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 98   : 		return true;

	mov	al, 1
$LN3@Create:

; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@RawFileClass@@UAE_NXZ ENDP			; RawFileClass::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Set_Name@RawFileClass@@UAEPBDPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Set_Name@RawFileClass@@UAEPBDPBD@Z PROC		; RawFileClass::Set_Name, COMDAT
; _this$ = ecx

; 77   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 		Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@RawFileClass@@QAEXXZ		; RawFileClass::Reset

; 79   : 		if (name)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN1@Set_Name

; 80   : 		{
; 81   : 			Bias(0,-1);

	push	-1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax

; 82   : 			Filename = name;

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
$LN1@Set_Name:

; 83   : 		}
; 84   : 		return 0;

	xor	eax, eax

; 85   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Name@RawFileClass@@UAEPBDPBD@Z ENDP		; RawFileClass::Set_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?File_Name@RawFileClass@@UAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?File_Name@RawFileClass@@UAEPBDXZ PROC			; RawFileClass::File_Name, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 		return Filename;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *

; 75   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?File_Name@RawFileClass@@UAEPBDXZ ENDP			; RawFileClass::File_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ??1RawFileClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RawFileClass@@UAE@XZ PROC				; RawFileClass::~RawFileClass, COMDAT
; _this$ = ecx

; 69   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RawFileClass@@6B@

; 70   : 		Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@RawFileClass@@QAEXXZ		; RawFileClass::Reset

; 71   : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileClass@@UAE@XZ			; FileClass::~FileClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1RawFileClass@@UAE@XZ ENDP				; RawFileClass::~RawFileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Reset@RawFileClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@RawFileClass@@QAEXXZ PROC			; RawFileClass::Reset, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 66   : 		Filename = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@RawFileClass@@QAEXXZ ENDP			; RawFileClass::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ??0RawFileClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RawFileClass@@QAE@XZ PROC				; RawFileClass::RawFileClass, COMDAT
; _this$ = ecx

; 39   : 	RawFileClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FileClass@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RawFileClass@@6B@
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 40   : 	{
; 41   : 		BiasLength = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 42   : 		Handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -1

; 43   : 		Rights = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 44   : 		BiasStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 45   : 		Date = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+24], ax

; 46   : 		Time = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+26], ax

; 47   : 		Filename = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 48   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0RawFileClass@@QAE@XZ ENDP				; RawFileClass::RawFileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Is_Biased@RawFileClass@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Biased@RawFileClass@@QAE_NXZ PROC			; RawFileClass::Is_Biased, COMDAT
; _this$ = ecx

; 36   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 		return BiasLength != -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN3@Is_Biased
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Is_Biased
$LN3@Is_Biased:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Is_Biased:
	mov	al, BYTE PTR tv66[ebp]

; 38   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Biased@RawFileClass@@QAE_NXZ ENDP			; RawFileClass::Is_Biased
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\rawfileclass.h
;	COMDAT ?Is_Hash_Checked@RawFileClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Is_Hash_Checked@RawFileClass@@UAE_NXZ PROC		; RawFileClass::Is_Hash_Checked, COMDAT
; _this$ = ecx

; 32   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 		return Is_Biased();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Biased@RawFileClass@@QAE_NXZ	; RawFileClass::Is_Biased

; 34   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Hash_Checked@RawFileClass@@UAE_NXZ ENDP		; RawFileClass::Is_Hash_Checked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Remove_All@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXXZ
_TEXT	SEGMENT
_lastHash$1 = -16					; size = 4
_index$2 = -12						; size = 4
_hash$3 = -8						; size = 4
_this$ = -4						; size = 4
?Remove_All@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXXZ PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Remove_All, COMDAT
; _this$ = ecx

; 223  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 		for (uint hash = 0; hash < maxHashCount; hash++)

	mov	DWORD PTR _hash$3[ebp], 0
	jmp	SHORT $LN6@Remove_All
$LN5@Remove_All:
	mov	eax, DWORD PTR _hash$3[ebp]
	add	eax, 1
	mov	DWORD PTR _hash$3[ebp], eax
$LN6@Remove_All:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hash$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN7@Remove_All

; 225  : 		{
; 226  : 			uint index = indices[hash];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hash$3[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _index$2[ebp], eax

; 227  : 			if (index != -1)

	cmp	DWORD PTR _index$2[ebp], -1
	je	SHORT $LN3@Remove_All

; 228  : 			{
; 229  : 				uint lastHash = index;

	mov	eax, DWORD PTR _index$2[ebp]
	mov	DWORD PTR _lastHash$1[ebp], eax
$LN2@Remove_All:

; 230  : 				while (entries[lastHash].next != -1)

	mov	eax, DWORD PTR _lastHash$1[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax], -1
	je	SHORT $LN1@Remove_All

; 231  : 					lastHash = entries[lastHash].next;

	mov	eax, DWORD PTR _lastHash$1[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _lastHash$1[ebp], eax
	jmp	SHORT $LN2@Remove_All
$LN1@Remove_All:

; 232  : 				
; 233  : 				entries[lastHash].next = unusedEntryIndex;

	mov	eax, DWORD PTR _lastHash$1[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+eax], ecx

; 234  : 				unusedEntryIndex = index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	DWORD PTR [eax+8], ecx

; 235  : 				indices[hash] = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hash$3[ebp]
	mov	DWORD PTR [ecx+edx*4], -1
$LN3@Remove_All:

; 236  : 			}
; 237  : 		}

	jmp	$LN5@Remove_All
$LN7@Remove_All:

; 238  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_All@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXXZ ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Remove_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Remove@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@@Z
_TEXT	SEGMENT
_entry$1 = -20						; size = 4
_index$2 = -16						; size = 4
_lastEntryNext$3 = -12					; size = 4
_hash$4 = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?Remove@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@@Z PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Remove, COMDAT
; _this$ = ecx

; 170  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		if (indices)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN6@Remove

; 172  : 		{
; 173  : 			uint hash = computeHash(key);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@ABEIABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
	mov	DWORD PTR _hash$4[ebp], eax

; 174  : 			int* lastEntryNext = &indices[hash];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hash$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _lastEntryNext$3[ebp], eax

; 175  : 			
; 176  : 			for (uint index = indices[hash]; index != -1; index = entries[index].next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hash$4[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _index$2[ebp], eax
	jmp	SHORT $LN4@Remove
$LN3@Remove:
	mov	eax, DWORD PTR _index$2[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _index$2[ebp], eax
$LN4@Remove:
	cmp	DWORD PTR _index$2[ebp], -1
	je	SHORT $LN6@Remove

; 177  : 			{
; 178  : 				Entry& entry = entries[index];

	mov	eax, DWORD PTR _index$2[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _entry$1[ebp], eax

; 179  : 				if (entry.key == key)

	mov	ecx, DWORD PTR _key$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _entry$1[ebp]
	add	ecx, 4
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Remove

; 180  : 				{
; 181  : 					*lastEntryNext = entry.next;

	mov	eax, DWORD PTR _lastEntryNext$3[ebp]
	mov	ecx, DWORD PTR _entry$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 182  : 					entries[index].next = unusedEntryIndex;

	mov	eax, DWORD PTR _index$2[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+eax], ecx

; 183  : 					unusedEntryIndex = index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	DWORD PTR [eax+8], ecx

; 184  : 					
; 185  : 					break;

	jmp	SHORT $LN6@Remove
$LN1@Remove:

; 186  : 				}
; 187  : 				
; 188  : 				lastEntryNext = &entries[index].next;

	mov	eax, DWORD PTR _index$2[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	DWORD PTR _lastEntryNext$3[ebp], edx

; 189  : 			}

	jmp	SHORT $LN3@Remove
$LN6@Remove:

; 190  : 		}
; 191  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@@Z ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Insert@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@ABQAVTDBObjClass@@@Z
_TEXT	SEGMENT
_hash$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_value$ = 12						; size = 4
?Insert@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@ABQAVTDBObjClass@@@Z PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Insert, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		// If all entries are in use, enlarge the table
; 154  : 		if (unusedEntryIndex == -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], -1
	jne	SHORT $LN1@Insert

; 155  : 			Re_Hash();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Re_Hash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@AAEXXZ ; HashTemplateClass<StringClass,TDBObjClass *>::Re_Hash
$LN1@Insert:

; 156  : 		
; 157  : 		uint index = unusedEntryIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _index$[ebp], ecx

; 158  : 		unusedEntryIndex = entries[index].next;

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], edx

; 159  : 		
; 160  : 		uint hash = computeHash(key);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@ABEIABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
	mov	DWORD PTR _hash$[ebp], eax

; 161  : 		entries[index].key = key;

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx+4]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 162  : 		entries[index].value = value;

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+8], ecx

; 163  : 		entries[index].next = indices[hash];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esi, DWORD PTR _hash$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx], ecx

; 164  : 		indices[hash] = index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 165  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@ABQAVTDBObjClass@@@Z ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAVTDBObjClass@@ABVStringClass@@PAV2@@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_default$ = 12						; size = 4
?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAVTDBObjClass@@ABVStringClass@@PAV2@@Z PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Get, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		Value* result = Get(key);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAPAVTDBObjClass@@ABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Get
	mov	DWORD PTR _result$[ebp], eax

; 139  : 		return result ? *result : default;

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@Get
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN4@Get
$LN3@Get:
	mov	edx, DWORD PTR _default$[ebp]
	mov	DWORD PTR tv68[ebp], edx
$LN4@Get:
	mov	eax, DWORD PTR tv68[ebp]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAVTDBObjClass@@ABVStringClass@@PAV2@@Z ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAPAVTDBObjClass@@ABVStringClass@@@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAPAVTDBObjClass@@ABVStringClass@@@Z PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Get, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 		if (indices)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Get

; 127  : 			for (uint index = indices[computeHash(key)]; index != -1; index = entries[index].next)

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@ABEIABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _index$1[ebp], eax
	jmp	SHORT $LN4@Get
$LN3@Get:
	mov	eax, DWORD PTR _index$1[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _index$1[ebp], eax
$LN4@Get:
	cmp	DWORD PTR _index$1[ebp], -1
	je	SHORT $LN5@Get

; 128  : 				if (entries[index].key == key)

	mov	ecx, DWORD PTR _key$[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _index$1[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [edx+eax+4]
	call	??8StringClass@@QBE_NPBD@Z		; StringClass::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Get

; 129  : 					return &entries[index].value;

	mov	eax, DWORD PTR _index$1[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax+8]
	jmp	SHORT $LN6@Get
$LN1@Get:

; 130  : 		
; 131  : 		return NULL;

	jmp	SHORT $LN3@Get
$LN5@Get:
	xor	eax, eax
$LN6@Get:

; 132  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAPAVTDBObjClass@@ABVStringClass@@@Z ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Get
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?Re_Hash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@AAEXXZ
_TEXT	SEGMENT
tv129 = -132						; size = 4
tv230 = -128						; size = 4
tv148 = -128						; size = 4
tv131 = -128						; size = 4
tv69 = -128						; size = 4
$T1 = -124						; size = 4
$T2 = -120						; size = 4
$T3 = -116						; size = 4
$T4 = -112						; size = 4
$T5 = -108						; size = 4
$T6 = -104						; size = 4
_i$7 = -36						; size = 4
_hash2$8 = -32						; size = 4
_index$9 = -28						; size = 4
_hash$10 = -24						; size = 4
_index$11 = -20						; size = 4
_newIndices$ = -16					; size = 4
_newEntries$ = -12					; size = 4
_newMaxHashCount$ = -8					; size = 4
_this$ = -4						; size = 4
?Re_Hash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@AAEXXZ PROC ; HashTemplateClass<StringClass,TDBObjClass *>::Re_Hash, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		uint newMaxHashCount = max(maxHashCount * 2, 4); // Increase the size and make sure there are at least 4 entries.

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	cmp	ecx, 4
	jbe	SHORT $LN15@Re_Hash
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shl	eax, 1
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN16@Re_Hash
$LN15@Re_Hash:
	mov	DWORD PTR tv69[ebp], 4
$LN16@Re_Hash:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _newMaxHashCount$[ebp], ecx

; 64   : 		
; 65   : 		Entry* newEntries = new Entry[newMaxHashCount];

	push	OFFSET ??_C@_0EC@CHNABGID@HashTemplateClass?$DMclass?5StringCl@
	push	65					; 00000041H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN20@Re_Hash
	xor	ecx, ecx
	jne	SHORT $LN17@Re_Hash
	push	65					; 00000041H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN17@Re_Hash:
	mov	DWORD PTR tv131[ebp], 0
	jmp	SHORT $LN21@Re_Hash
$LN20@Re_Hash:
	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN18@Re_Hash
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??0Entry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAE@XZ
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN19@Re_Hash
$LN18@Re_Hash:
	mov	DWORD PTR tv129[ebp], 0
$LN19@Re_Hash:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR tv131[ebp], eax
$LN21@Re_Hash:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _newEntries$[ebp], ecx

; 66   : 		int* newIndices = new int[newMaxHashCount];

	push	OFFSET ??_C@_0EC@CHNABGID@HashTemplateClass?$DMclass?5StringCl@
	push	66					; 00000042H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN23@Re_Hash
	xor	ecx, ecx
	jne	SHORT $LN22@Re_Hash
	push	66					; 00000042H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN22@Re_Hash:
	mov	DWORD PTR tv148[ebp], 0
	jmp	SHORT $LN24@Re_Hash
$LN23@Re_Hash:
	xor	ecx, ecx
	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv148[ebp], eax
$LN24@Re_Hash:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR _newIndices$[ebp], ecx

; 67   : 		unusedEntryIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 68   : 		
; 69   : 		for (uint index = 0; index < newMaxHashCount; index++)

	mov	DWORD PTR _index$11[ebp], 0
	jmp	SHORT $LN12@Re_Hash
$LN11@Re_Hash:
	mov	eax, DWORD PTR _index$11[ebp]
	add	eax, 1
	mov	DWORD PTR _index$11[ebp], eax
$LN12@Re_Hash:
	mov	eax, DWORD PTR _index$11[ebp]
	cmp	eax, DWORD PTR _newMaxHashCount$[ebp]
	jae	SHORT $LN10@Re_Hash

; 70   : 			newIndices[index] = -1;

	mov	eax, DWORD PTR _index$11[ebp]
	mov	ecx, DWORD PTR _newIndices$[ebp]
	mov	DWORD PTR [ecx+eax*4], -1
	jmp	SHORT $LN11@Re_Hash
$LN10@Re_Hash:

; 71   : 		
; 72   : 		for (uint hash = 0; hash < maxHashCount; hash++)

	mov	DWORD PTR _hash$10[ebp], 0
	jmp	SHORT $LN9@Re_Hash
$LN8@Re_Hash:
	mov	eax, DWORD PTR _hash$10[ebp]
	add	eax, 1
	mov	DWORD PTR _hash$10[ebp], eax
$LN9@Re_Hash:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hash$10[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	$LN7@Re_Hash

; 73   : 		{
; 74   : 			for (int index = indices[hash]; index != -1; index = entries[index].next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hash$10[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _index$9[ebp], eax
	jmp	SHORT $LN6@Re_Hash
$LN5@Re_Hash:
	mov	eax, DWORD PTR _index$9[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _index$9[ebp], eax
$LN6@Re_Hash:
	cmp	DWORD PTR _index$9[ebp], -1
	je	$LN4@Re_Hash

; 75   : 			{
; 76   : 				uint hash2 = computeHash(entries[index].key, newMaxHashCount);

	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$9[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx+4]
	push	ecx
	call	?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@CAIABVStringClass@@I@Z ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
	add	esp, 8
	mov	DWORD PTR _hash2$8[ebp], eax

; 77   : 				
; 78   : 				newEntries[unusedEntryIndex].next = newIndices[hash2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _newEntries$[ebp]
	mov	eax, DWORD PTR _hash2$8[ebp]
	mov	esi, DWORD PTR _newIndices$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx], eax

; 79   : 				newEntries[unusedEntryIndex].key = entries[index].key;

	mov	eax, DWORD PTR _index$9[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _newEntries$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 80   : 				newEntries[unusedEntryIndex].value = entries[index].value;

	mov	eax, DWORD PTR _index$9[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	imul	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR _newEntries$[ebp]
	mov	edx, DWORD PTR [edx+eax+8]
	mov	DWORD PTR [esi+ecx+8], edx

; 81   : 				
; 82   : 				newIndices[hash2] = unusedEntryIndex;

	mov	eax, DWORD PTR _hash2$8[ebp]
	mov	ecx, DWORD PTR _newIndices$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax*4], edx

; 83   : 				unusedEntryIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 84   : 			}

	jmp	$LN5@Re_Hash
$LN4@Re_Hash:

; 85   : 		}

	jmp	$LN8@Re_Hash
$LN7@Re_Hash:

; 86   : 		
; 87   : 		delete[] indices;

	push	OFFSET ??_C@_0EC@CHNABGID@HashTemplateClass?$DMclass?5StringCl@
	push	87					; 00000057H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN26@Re_Hash
	xor	ecx, ecx
	jne	SHORT $LN25@Re_Hash
	push	87					; 00000057H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN25@Re_Hash:
	jmp	SHORT $LN27@Re_Hash
$LN26@Re_Hash:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN27@Re_Hash:

; 88   : 		delete[] entries;

	push	OFFSET ??_C@_0EC@CHNABGID@HashTemplateClass?$DMclass?5StringCl@
	push	88					; 00000058H
	push	OFFSET ??_C@_0DN@EECEFMJH@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN31@Re_Hash
	xor	ecx, ecx
	jne	SHORT $LN28@Re_Hash
	push	88					; 00000058H
	push	OFFSET ??_C@_1HK@JEBHJDL@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN28@Re_Hash:
	jmp	SHORT $LN32@Re_Hash
$LN31@Re_Hash:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN29@Re_Hash
	push	3
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_EEntry@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEPAXI@Z
	mov	DWORD PTR tv230[ebp], eax
	jmp	SHORT $LN32@Re_Hash
$LN29@Re_Hash:
	mov	DWORD PTR tv230[ebp], 0
$LN32@Re_Hash:

; 89   : 		
; 90   : 		for (uint i = unusedEntryIndex; i < newMaxHashCount-1; i++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _i$7[ebp], ecx
	jmp	SHORT $LN3@Re_Hash
$LN2@Re_Hash:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN3@Re_Hash:
	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$7[ebp], eax
	jae	SHORT $LN1@Re_Hash

; 91   : 			newEntries[i].next = i + 1;

	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _i$7[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _newEntries$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	jmp	SHORT $LN2@Re_Hash
$LN1@Re_Hash:

; 92   : 	
; 93   : 		newEntries[newMaxHashCount-1].next = -1;

	mov	eax, DWORD PTR _newMaxHashCount$[ebp]
	sub	eax, 1
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _newEntries$[ebp]
	mov	DWORD PTR [ecx+eax], -1

; 94   : 		
; 95   : 		indices = newIndices;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newIndices$[ebp]
	mov	DWORD PTR [eax], ecx

; 96   : 		entries = newEntries;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newEntries$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 97   : 		maxHashCount = newMaxHashCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMaxHashCount$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Re_Hash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@AAEXXZ ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::Re_Hash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@ABEIABVStringClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@ABEIABVStringClass@@@Z PROC ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return computeHash(key, maxHashCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@CAIABVStringClass@@I@Z ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
	add	esp, 8

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@ABEIABVStringClass@@@Z ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\hashtemplateclass.h
;	COMDAT ?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@CAIABVStringClass@@I@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
_maxHashCount$ = 12					; size = 4
?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@CAIABVStringClass@@I@Z PROC ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash, COMDAT

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN3@computeHas:

; 48   : 		TT_ASSERT(isPowerOfTwo(maxHashCount)); // Make sure maxHashCount is a power of two, or the fast modulo code below will not work

	xor	eax, eax
	jne	SHORT $LN3@computeHas
	mov	eax, DWORD PTR _maxHashCount$[ebp]
	push	eax
	call	?isPowerOfTwo@@YA_NH@Z			; isPowerOfTwo
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@computeHas
	int	3
$LN1@computeHas:

; 49   : 		return HashTemplateKeyClass<Key>::Get_Hash_Value(key) & (maxHashCount - 1);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	?Get_Hash_Value@?$HashTemplateKeyClass@VStringClass@@@@SAIABVStringClass@@@Z ; HashTemplateKeyClass<StringClass>::Get_Hash_Value
	add	esp, 4
	mov	ecx, DWORD PTR _maxHashCount$[ebp]
	sub	ecx, 1
	and	eax, ecx

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?computeHash@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@CAIABVStringClass@@I@Z ENDP ; HashTemplateClass<StringClass,TDBObjClass *>::computeHash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Set_Growth_Step@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_step$ = 8						; size = 4
?Set_Growth_Step@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEHH@Z PROC ; DynamicVectorClass<TDBObjClass *>::Set_Growth_Step, COMDAT
; _this$ = ecx

; 463  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 464  : 		return(GrowthStep = step);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _step$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _step$[ebp]

; 465  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Growth_Step@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEHH@Z ENDP ; DynamicVectorClass<TDBObjClass *>::Set_Growth_Step
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Delete_All@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEXXZ
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?Delete_All@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEXXZ PROC ; DynamicVectorClass<TDBObjClass *>::Delete_All, COMDAT
; _this$ = ecx

; 457  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		int len = VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _len$[ebp], ecx

; 459  : 		Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 460  : 		Resize(len);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 461  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Delete_All@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEXXZ ENDP ; DynamicVectorClass<TDBObjClass *>::Delete_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Add@?$DynamicVectorClass@PAVTDBObjClass@@@@QAE_NABQAVTDBObjClass@@@Z
_TEXT	SEGMENT
tv149 = -72						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Add@?$DynamicVectorClass@PAVTDBObjClass@@@@QAE_NABQAVTDBObjClass@@@Z PROC ; DynamicVectorClass<TDBObjClass *>::Add, COMDAT
; _this$ = ecx

; 318  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		if (ActiveCount >= Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVTDBObjClass@@@@QBEHXZ ; VectorClass<TDBObjClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LN5@Add

; 320  : 		{
; 321  : 			if ((IsAllocated || !VectorMax) && GrowthStep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Add
$LN3@Add:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jle	SHORT $LN4@Add

; 322  : 			{
; 323  : 				if (!Resize(Length() + GrowthStep))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@?$VectorClass@PAVTDBObjClass@@@@QBEHXZ ; VectorClass<TDBObjClass *>::Length
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add

; 324  : 				{
; 325  : 					return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN2@Add:

; 326  : 				}
; 327  : 			}
; 328  : 			else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 329  : 			{
; 330  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Add
$LN5@Add:

; 331  : 			}
; 332  : 		}
; 333  : 		(*this)[ActiveCount++] = object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 334  : 		return true;

	mov	al, 1
$LN6@Add:

; 335  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$DynamicVectorClass@PAVTDBObjClass@@@@QAE_NABQAVTDBObjClass@@@Z ENDP ; DynamicVectorClass<TDBObjClass *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ PROC ; DynamicVectorClass<TDBObjClass *>::Count, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return(ActiveCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 316  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ENDP ; DynamicVectorClass<TDBObjClass *>::Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Length@?$VectorClass@PAVTDBObjClass@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Length@?$VectorClass@PAVTDBObjClass@@@@QBEHXZ PROC	; VectorClass<TDBObjClass *>::Length, COMDAT
; _this$ = ecx

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return VectorMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 201  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$VectorClass@PAVTDBObjClass@@@@QBEHXZ ENDP	; VectorClass<TDBObjClass *>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z PROC ; VectorClass<TDBObjClass *>::operator[], COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return(Vector[index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 124  : 	} 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ENDP ; VectorClass<TDBObjClass *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GTranslateDBClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTranslateDBClass@@UAEPAXI@Z PROC			; TranslateDBClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TranslateDBClass@@UAE@XZ		; TranslateDBClass::~TranslateDBClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTranslateDBClass@@UAEPAXI@Z ENDP			; TranslateDBClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.h
;	COMDAT ?Name@TranslateDBClass@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Name@TranslateDBClass@@UBEPBDXZ PROC			; TranslateDBClass::Name, COMDAT
; _this$ = ecx

; 165  : 	virtual const char* Name() const { return "TranslateDBClass"; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_0BB@MDFCLIHN@TranslateDBClass?$AA@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@TranslateDBClass@@UBEPBDXZ ENDP			; TranslateDBClass::Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Chunk_ID@TranslateDBClass@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Chunk_ID@TranslateDBClass@@UBEIXZ PROC			; TranslateDBClass::Chunk_ID, COMDAT
; _this$ = ecx

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 	return 0x90000;

	mov	eax, 589824				; 00090000H

; 83   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Chunk_ID@TranslateDBClass@@UBEIXZ ENDP			; TranslateDBClass::Chunk_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.h
;	COMDAT ??1TranslateDBClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TranslateDBClass@@UAE@XZ PROC			; TranslateDBClass::~TranslateDBClass, COMDAT
; _this$ = ecx

; 162  : 	virtual ~TranslateDBClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TranslateDBClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SaveLoadSubSystemClass@@UAE@XZ	; SaveLoadSubSystemClass::~SaveLoadSubSystemClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1TranslateDBClass@@UAE@XZ ENDP			; TranslateDBClass::~TranslateDBClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.h
;	COMDAT ??0TranslateDBClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TranslateDBClass@@QAE@XZ PROC			; TranslateDBClass::TranslateDBClass, COMDAT
; _this$ = ecx

; 161  : 	TranslateDBClass() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SaveLoadSubSystemClass@@QAE@XZ	; SaveLoadSubSystemClass::SaveLoadSubSystemClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TranslateDBClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TranslateDBClass@@QAE@XZ ENDP			; TranslateDBClass::TranslateDBClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.h
;	COMDAT ?Get_Current_Language@TranslateDBClass@@SAIXZ
_TEXT	SEGMENT
?Get_Current_Language@TranslateDBClass@@SAIXZ PROC	; TranslateDBClass::Get_Current_Language, COMDAT

; 153  : 	static uint32 Get_Current_Language() { return m_LanguageID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ?m_LanguageID@TranslateDBClass@@0AAIA ; TranslateDBClass::m_LanguageID
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Current_Language@TranslateDBClass@@SAIXZ ENDP	; TranslateDBClass::Get_Current_Language
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Remove_Category@TranslateDBClass@@SA_NH@Z
_TEXT	SEGMENT
tv160 = -92						; size = 4
tv138 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 4
_obj$5 = -8						; size = 4
_cat$6 = -4						; size = 4
_index$ = 8						; size = 4
?Remove_Category@TranslateDBClass@@SA_NH@Z PROC		; TranslateDBClass::Remove_Category, COMDAT

; 315  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 316  : 	if (index >= 0)

	cmp	DWORD PTR _index$[ebp], 0
	jl	$LN6@Remove_Cat

; 317  : 	{
; 318  : 		if (index < m_CategoryList.Count())

	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	cmp	DWORD PTR _index$[ebp], eax
	jge	$LN6@Remove_Cat

; 319  : 		{
; 320  : 			TDBCategoryClass *cat = m_CategoryList[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cat$6[ebp], ecx

; 321  : 			if (cat)

	cmp	DWORD PTR _cat$6[ebp], 0
	je	$LN4@Remove_Cat

; 322  : 			{
; 323  : 				TDBObjClass *obj;
; 324  : 				for (obj = Get_First_Object(cat->Get_ID());obj;obj = Get_Next_Object(cat->Get_ID(),obj));

	mov	ecx, DWORD PTR _cat$6[ebp]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	push	eax
	call	?Get_First_Object@TranslateDBClass@@SAPAVTDBObjClass@@I@Z ; TranslateDBClass::Get_First_Object
	add	esp, 4
	mov	DWORD PTR _obj$5[ebp], eax
	jmp	SHORT $LN3@Remove_Cat
$LN2@Remove_Cat:
	mov	eax, DWORD PTR _obj$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _cat$6[ebp]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	push	eax
	call	?Get_Next_Object@TranslateDBClass@@SAPAVTDBObjClass@@IPAV2@@Z ; TranslateDBClass::Get_Next_Object
	add	esp, 8
	mov	DWORD PTR _obj$5[ebp], eax
$LN3@Remove_Cat:
	cmp	DWORD PTR _obj$5[ebp], 0
	je	SHORT $LN1@Remove_Cat
	jmp	SHORT $LN2@Remove_Cat
$LN1@Remove_Cat:

; 325  : 				{
; 326  : 					delete obj;

	push	OFFSET ??_C@_0CC@IOGGIFEJ@TranslateDBClass?3?3Remove_Categor@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Remove_Category@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN12@Remove_Cat
	xor	edx, edx
	jne	SHORT $LN9@Remove_Cat
	mov	eax, DWORD PTR ?__LINE__Var@?1??Remove_Category@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN9@Remove_Cat:
	jmp	SHORT $LN13@Remove_Cat
$LN12@Remove_Cat:
	mov	edx, DWORD PTR _obj$5[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN10@Remove_Cat
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN13@Remove_Cat
$LN10@Remove_Cat:
	mov	DWORD PTR tv138[ebp], 0
$LN13@Remove_Cat:

; 327  : 				}
; 328  : 				delete cat;

	push	OFFSET ??_C@_0CC@IOGGIFEJ@TranslateDBClass?3?3Remove_Categor@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Remove_Category@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN17@Remove_Cat
	xor	edx, edx
	jne	SHORT $LN14@Remove_Cat
	mov	eax, DWORD PTR ?__LINE__Var@?1??Remove_Category@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN14@Remove_Cat:
	jmp	SHORT $LN4@Remove_Cat
$LN17@Remove_Cat:
	mov	edx, DWORD PTR _cat$6[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN15@Remove_Cat
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN4@Remove_Cat
$LN15@Remove_Cat:
	mov	DWORD PTR tv160[ebp], 0
$LN4@Remove_Cat:

; 329  : 			}
; 330  : 			m_CategoryList.Delete(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Delete@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NH@Z ; DynamicVectorClass<TDBCategoryClass *>::Delete

; 331  : 			return true;

	mov	al, 1
	jmp	SHORT $LN7@Remove_Cat
$LN6@Remove_Cat:

; 332  : 		}
; 333  : 	}
; 334  : 	return false;

	xor	al, al
$LN7@Remove_Cat:

; 335  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Category@TranslateDBClass@@SA_NH@Z ENDP		; TranslateDBClass::Remove_Category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Add_Category@TranslateDBClass@@SA_NPAVTDBCategoryClass@@_N@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_id$2 = -4						; size = 4
_category$ = 8						; size = 4
_assignId$ = 12						; size = 1
?Add_Category@TranslateDBClass@@SA_NPAVTDBCategoryClass@@_N@Z PROC ; TranslateDBClass::Add_Category, COMDAT

; 290  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 291  : 	if (category)

	cmp	DWORD PTR _category$[ebp], 0
	je	$LN7@Add_Catego

; 292  : 	{
; 293  : 		if (assignId)

	movzx	eax, BYTE PTR _assignId$[ebp]
	test	eax, eax
	je	SHORT $LN6@Add_Catego

; 294  : 		{
; 295  : 			if (!category->Get_ID())

	mov	ecx, DWORD PTR _category$[ebp]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	test	eax, eax
	jne	SHORT $LN6@Add_Catego

; 296  : 			{
; 297  : 				unsigned int id = 1;

	mov	DWORD PTR _id$2[ebp], 1

; 298  : 				for (int i = 0;i < m_CategoryList.Count();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Add_Catego
$LN3@Add_Catego:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Add_Catego:
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@Add_Catego

; 299  : 				{
; 300  : 					if (id < m_CategoryList[i]->Get_ID() + 1)

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	add	eax, 1
	cmp	DWORD PTR _id$2[ebp], eax
	jae	SHORT $LN1@Add_Catego

; 301  : 					{
; 302  : 						id = m_CategoryList[i]->Get_ID() + 1;

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	add	eax, 1
	mov	DWORD PTR _id$2[ebp], eax
$LN1@Add_Catego:

; 303  : 					}
; 304  : 				}

	jmp	SHORT $LN3@Add_Catego
$LN2@Add_Catego:

; 305  : 				category->Set_ID(id);

	mov	eax, DWORD PTR _id$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _category$[ebp]
	call	?Set_ID@TDBCategoryClass@@QAEXI@Z	; TDBCategoryClass::Set_ID
$LN6@Add_Catego:

; 306  : 			}
; 307  : 		}
; 308  : 		m_CategoryList.Add(category);

	lea	eax, DWORD PTR _category$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Add@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NABQAVTDBCategoryClass@@@Z ; DynamicVectorClass<TDBCategoryClass *>::Add

; 309  : 		return true;

	mov	al, 1
	jmp	SHORT $LN8@Add_Catego
$LN7@Add_Catego:

; 310  : 	}
; 311  : 	return false;

	xor	al, al
$LN8@Add_Catego:

; 312  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_Category@TranslateDBClass@@SA_NPAVTDBCategoryClass@@_N@Z ENDP ; TranslateDBClass::Add_Category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv81 = -76						; size = 4
$T1 = -72						; size = 4
_t$ = -4						; size = 4
_name$ = 8						; size = 4
?Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z PROC ; TranslateDBClass::Add_Category, COMDAT

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 283  : 	TDBCategoryClass *t = new TDBCategoryClass();

	push	OFFSET ??_C@_0BP@CDAFPENI@TranslateDBClass?3?3Add_Category?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z@4JA@fac20d4b
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN6@Add_Catego
	xor	edx, edx
	jne	SHORT $LN3@Add_Catego
	mov	eax, DWORD PTR ?__LINE__Var@?1??Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z@4JA@fac20d4b
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Add_Catego:
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN7@Add_Catego
$LN6@Add_Catego:
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Add_Catego
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0TDBCategoryClass@@QAE@XZ		; TDBCategoryClass::TDBCategoryClass
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN5@Add_Catego
$LN4@Add_Catego:
	mov	DWORD PTR tv79[ebp], 0
$LN5@Add_Catego:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv81[ebp], edx
$LN7@Add_Catego:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 284  : 	t->Set_Name(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	call	?Set_Name@TDBCategoryClass@@QAEXPBD@Z	; TDBCategoryClass::Set_Name

; 285  : 	Add_Category(t,true);

	push	1
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	?Add_Category@TranslateDBClass@@SA_NPAVTDBCategoryClass@@_N@Z ; TranslateDBClass::Add_Category
	add	esp, 8

; 286  : 	return 0;

	xor	eax, eax

; 287  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z ENDP ; TranslateDBClass::Add_Category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Find_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_name$ = 8						; size = 4
?Find_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z PROC ; TranslateDBClass::Find_Category, COMDAT

; 435  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 436  : 	for (int i = 0;i < m_CategoryList.Count();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Find_Categ
$LN3@Find_Categ:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Categ:
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@Find_Categ

; 437  : 	{
; 438  : 		if (!_stricmp(m_CategoryList[i]->Get_Name(),name))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_Name@TDBCategoryClass@@QBEABVStringClass@@XZ ; TDBCategoryClass::Get_Name
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Find_Categ

; 439  : 		{
; 440  : 			return m_CategoryList[i];

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN5@Find_Categ
$LN1@Find_Categ:

; 441  : 		}
; 442  : 	}

	jmp	SHORT $LN3@Find_Categ
$LN2@Find_Categ:

; 443  : 	return 0;

	xor	eax, eax
$LN5@Find_Categ:

; 444  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Find_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@PBD@Z ENDP ; TranslateDBClass::Find_Category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Find_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@I@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_id$ = 8						; size = 4
?Find_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@I@Z PROC ; TranslateDBClass::Find_Category, COMDAT

; 423  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 424  : 	for (int i = 0;i < m_CategoryList.Count();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Find_Categ
$LN3@Find_Categ:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Categ:
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@Find_Categ

; 425  : 	{
; 426  : 		if (m_CategoryList[i]->Get_ID() == id)

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	cmp	eax, DWORD PTR _id$[ebp]
	jne	SHORT $LN1@Find_Categ

; 427  : 		{
; 428  : 			return m_CategoryList[i];

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN5@Find_Categ
$LN1@Find_Categ:

; 429  : 		}
; 430  : 	}

	jmp	SHORT $LN3@Find_Categ
$LN2@Find_Categ:

; 431  : 	return 0;

	xor	eax, eax
$LN5@Find_Categ:

; 432  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Find_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@I@Z ENDP ; TranslateDBClass::Find_Category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Get_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?Get_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@H@Z PROC ; TranslateDBClass::Get_Category, COMDAT

; 411  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 412  : 	if (index >= 0)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@Get_Catego

; 413  : 	{
; 414  : 		if (index < m_CategoryList.Count())

	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	cmp	DWORD PTR _index$[ebp], eax
	jge	SHORT $LN2@Get_Catego

; 415  : 		{
; 416  : 			return m_CategoryList[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN3@Get_Catego
$LN2@Get_Catego:

; 417  : 		}
; 418  : 	}
; 419  : 	return 0;

	xor	eax, eax
$LN3@Get_Catego:

; 420  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Category@TranslateDBClass@@SAPAVTDBCategoryClass@@H@Z ENDP ; TranslateDBClass::Get_Category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Get_Category_Count@TranslateDBClass@@SAHXZ
_TEXT	SEGMENT
?Get_Category_Count@TranslateDBClass@@SAHXZ PROC	; TranslateDBClass::Get_Category_Count, COMDAT

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 407  : 	return m_CategoryList.Count();

	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count

; 408  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Category_Count@TranslateDBClass@@SAHXZ ENDP	; TranslateDBClass::Get_Category_Count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Get_Next_Object@TranslateDBClass@@SAPAVTDBObjClass@@IPAV2@@Z
_TEXT	SEGMENT
_obj$1 = -8						; size = 4
_i$2 = -4						; size = 4
_categoryId$ = 8					; size = 4
_object$ = 12						; size = 4
?Get_Next_Object@TranslateDBClass@@SAPAVTDBObjClass@@IPAV2@@Z PROC ; TranslateDBClass::Get_Next_Object, COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 461  : 	for (int i = object->Get_ID() - 999;i < m_ObjectList.Count();i++)

	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	sub	eax, 999				; 000003e7H
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN4@Get_Next_O
$LN3@Get_Next_O:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@Get_Next_O:
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@Get_Next_O

; 462  : 	{
; 463  : 		TDBObjClass *obj = m_ObjectList[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _obj$1[ebp], ecx

; 464  : 		if (obj && obj->Get_Category_ID() == categoryId)

	cmp	DWORD PTR _obj$1[ebp], 0
	je	SHORT $LN1@Get_Next_O
	mov	eax, DWORD PTR _obj$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$1[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	eax, DWORD PTR _categoryId$[ebp]
	jne	SHORT $LN1@Get_Next_O

; 465  : 		{
; 466  : 			return obj;

	mov	eax, DWORD PTR _obj$1[ebp]
	jmp	SHORT $LN5@Get_Next_O
$LN1@Get_Next_O:

; 467  : 		}
; 468  : 	}

	jmp	SHORT $LN3@Get_Next_O
$LN2@Get_Next_O:

; 469  : 	return 0;

	xor	eax, eax
$LN5@Get_Next_O:

; 470  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Next_Object@TranslateDBClass@@SAPAVTDBObjClass@@IPAV2@@Z ENDP ; TranslateDBClass::Get_Next_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Get_First_Object@TranslateDBClass@@SAPAVTDBObjClass@@I@Z
_TEXT	SEGMENT
_obj$1 = -8						; size = 4
_i$2 = -4						; size = 4
_categoryId$ = 8					; size = 4
?Get_First_Object@TranslateDBClass@@SAPAVTDBObjClass@@I@Z PROC ; TranslateDBClass::Get_First_Object, COMDAT

; 447  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 448  : 	for (int i = 0;i < m_ObjectList.Count();i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@Get_First_
$LN3@Get_First_:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@Get_First_:
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@Get_First_

; 449  : 	{
; 450  : 		TDBObjClass *obj = m_ObjectList[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _obj$1[ebp], ecx

; 451  : 		if (obj && obj->Get_Category_ID() == categoryId)

	cmp	DWORD PTR _obj$1[ebp], 0
	je	SHORT $LN1@Get_First_
	mov	eax, DWORD PTR _obj$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$1[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	eax, DWORD PTR _categoryId$[ebp]
	jne	SHORT $LN1@Get_First_

; 452  : 		{
; 453  : 			return obj;

	mov	eax, DWORD PTR _obj$1[ebp]
	jmp	SHORT $LN5@Get_First_
$LN1@Get_First_:

; 454  : 		}
; 455  : 	}

	jmp	SHORT $LN3@Get_First_
$LN2@Get_First_:

; 456  : 	return 0;

	xor	eax, eax
$LN5@Get_First_:

; 457  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_First_Object@TranslateDBClass@@SAPAVTDBObjClass@@I@Z ENDP ; TranslateDBClass::Get_First_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Get_Object@TranslateDBClass@@SAPAVTDBObjClass@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?Get_Object@TranslateDBClass@@SAPAVTDBObjClass@@H@Z PROC ; TranslateDBClass::Get_Object, COMDAT

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 259  : 	if (index >= 0)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@Get_Object

; 260  : 	{
; 261  : 		if (index < m_ObjectList.Count())

	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _index$[ebp], eax
	jge	SHORT $LN2@Get_Object

; 262  : 		{
; 263  : 			return m_ObjectList[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN3@Get_Object
$LN2@Get_Object:

; 264  : 		}
; 265  : 	}
; 266  : 	return 0;

	xor	eax, eax
$LN3@Get_Object:

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Object@TranslateDBClass@@SAPAVTDBObjClass@@H@Z ENDP ; TranslateDBClass::Get_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Remove_All@TranslateDBClass@@SAXXZ
_TEXT	SEGMENT
?Remove_All@TranslateDBClass@@SAXXZ PROC		; TranslateDBClass::Remove_All, COMDAT

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 397  : 	Free_Objects();

	call	?Free_Objects@TranslateDBClass@@KAXXZ	; TranslateDBClass::Free_Objects

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_All@TranslateDBClass@@SAXXZ ENDP		; TranslateDBClass::Remove_All
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Clear_Object@TranslateDBClass@@SA_NH@Z
_TEXT	SEGMENT
_str$1 = -8						; size = 4
_object$2 = -4						; size = 4
_index$ = 8						; size = 4
?Clear_Object@TranslateDBClass@@SA_NH@Z PROC		; TranslateDBClass::Clear_Object, COMDAT

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 357  : 	if ((index >= 0) && (index < m_ObjectList.Count()))

	cmp	DWORD PTR _index$[ebp], 0
	jl	$LN2@Clear_Obje
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _index$[ebp], eax
	jge	SHORT $LN2@Clear_Obje

; 358  : 	{
; 359  : 		TDBObjClass *object = m_ObjectList[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _object$2[ebp], ecx

; 360  : 		if (object)

	cmp	DWORD PTR _object$2[ebp], 0
	je	SHORT $LN1@Clear_Obje

; 361  : 		{
; 362  : 			StringClass str = object->Get_ID_Desc();

	push	0
	mov	eax, DWORD PTR _object$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _object$2[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	push	eax
	lea	ecx, DWORD PTR _str$1[ebp]
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass

; 363  : 			_strlwr(str.Peek_Buffer());

	lea	ecx, DWORD PTR _str$1[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	call	DWORD PTR __imp___strlwr
	add	esp, 4

; 364  : 			m_ObjectHash.Remove(str);

	lea	eax, DWORD PTR _str$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectHash
	call	?Remove@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Remove

; 365  : 		}

	lea	ecx, DWORD PTR _str$1[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@Clear_Obje:

; 366  : 		m_ObjectList[index] = 0;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	DWORD PTR [eax], 0

; 367  : 		return true;

	mov	al, 1
	jmp	SHORT $LN3@Clear_Obje
$LN2@Clear_Obje:

; 368  : 	}
; 369  : 	return false;

	xor	al, al
$LN3@Clear_Obje:

; 370  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear_Object@TranslateDBClass@@SA_NH@Z ENDP		; TranslateDBClass::Clear_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Remove_Object@TranslateDBClass@@SA_NH@Z
_TEXT	SEGMENT
tv142 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_str$3 = -8						; size = 4
_object$4 = -4						; size = 4
_index$ = 8						; size = 4
?Remove_Object@TranslateDBClass@@SA_NH@Z PROC		; TranslateDBClass::Remove_Object, COMDAT

; 338  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 339  : 	if ((index >= 0) && (index < m_ObjectList.Count()))

	cmp	DWORD PTR _index$[ebp], 0
	jl	$LN2@Remove_Obj
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _index$[ebp], eax
	jge	$LN2@Remove_Obj

; 340  : 	{
; 341  : 		TDBObjClass *object = m_ObjectList[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _object$4[ebp], ecx

; 342  : 		if (object)

	cmp	DWORD PTR _object$4[ebp], 0
	je	$LN1@Remove_Obj

; 343  : 		{
; 344  : 			StringClass str = object->Get_ID_Desc();

	push	0
	mov	eax, DWORD PTR _object$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _object$4[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	push	eax
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass

; 345  : 			_strlwr(str.Peek_Buffer());

	lea	ecx, DWORD PTR _str$3[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	call	DWORD PTR __imp___strlwr
	add	esp, 4

; 346  : 			m_ObjectHash.Remove(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectHash
	call	?Remove@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Remove

; 347  : 			delete object;

	push	OFFSET ??_C@_0CA@OJELAFLO@TranslateDBClass?3?3Remove_Object?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Remove_Object@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN8@Remove_Obj
	xor	edx, edx
	jne	SHORT $LN5@Remove_Obj
	mov	eax, DWORD PTR ?__LINE__Var@?1??Remove_Object@TranslateDBClass@@SA_NH@Z@4JA@fac20d4b
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@Remove_Obj:
	jmp	SHORT $LN9@Remove_Obj
$LN8@Remove_Obj:
	mov	edx, DWORD PTR _object$4[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Remove_Obj
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN9@Remove_Obj
$LN6@Remove_Obj:
	mov	DWORD PTR tv142[ebp], 0
$LN9@Remove_Obj:

; 348  : 		}

	lea	ecx, DWORD PTR _str$3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
$LN1@Remove_Obj:

; 349  : 		m_ObjectList[index] = 0;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	DWORD PTR [eax], 0

; 350  : 		return true;

	mov	al, 1
	jmp	SHORT $LN3@Remove_Obj
$LN2@Remove_Obj:

; 351  : 	}
; 352  : 	return false;

	xor	al, al
$LN3@Remove_Obj:

; 353  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove_Object@TranslateDBClass@@SA_NH@Z ENDP		; TranslateDBClass::Remove_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z
_TEXT	SEGMENT
$T1 = -77						; size = 1
_str$2 = -12						; size = 4
_obj$3 = -8						; size = 4
_id$4 = -4						; size = 4
_object$ = 8						; size = 4
?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z PROC ; TranslateDBClass::Add_Object, COMDAT

; 373  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 374  : 	if (object)

	cmp	DWORD PTR _object$[ebp], 0
	je	$LN4@Add_Object

; 375  : 	{
; 376  : 		if (object->Get_ID() <= 999)

	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	eax, 999				; 000003e7H
	ja	SHORT $LN3@Add_Object

; 377  : 		{
; 378  : 			object->Set_ID(Find_Unique_ID());

	call	?Find_Unique_ID@TranslateDBClass@@KAIXZ	; TranslateDBClass::Find_Unique_ID
	push	eax
	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN3@Add_Object:

; 379  : 		}
; 380  : 		int id = object->Get_ID() - 1000;

	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	sub	eax, 1000				; 000003e8H
	mov	DWORD PTR _id$4[ebp], eax
$LN2@Add_Object:

; 381  : 		while (m_ObjectList.Count() <= id)

	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	eax, DWORD PTR _id$4[ebp]
	jg	SHORT $LN1@Add_Object

; 382  : 		{
; 383  : 			TDBObjClass *obj = 0;

	mov	DWORD PTR _obj$3[ebp], 0

; 384  : 			m_ObjectList.Add(obj);

	lea	eax, DWORD PTR _obj$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Add@?$DynamicVectorClass@PAVTDBObjClass@@@@QAE_NABQAVTDBObjClass@@@Z ; DynamicVectorClass<TDBObjClass *>::Add

; 385  : 		}

	jmp	SHORT $LN2@Add_Object
$LN1@Add_Object:

; 386  : 		m_ObjectList[id] = object;

	mov	eax, DWORD PTR _id$4[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx

; 387  : 		StringClass str = object->Get_ID_Desc();

	push	0
	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	push	eax
	lea	ecx, DWORD PTR _str$2[ebp]
	call	??0StringClass@@QAE@ABV0@_N@Z		; StringClass::StringClass

; 388  : 		_strlwr(str.Peek_Buffer());

	lea	ecx, DWORD PTR _str$2[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	call	DWORD PTR __imp___strlwr
	add	esp, 4

; 389  : 		m_ObjectHash.Insert(str,object);

	lea	eax, DWORD PTR _object$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectHash
	call	?Insert@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXABVStringClass@@ABQAVTDBObjClass@@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Insert

; 390  : 		return true;

	mov	BYTE PTR $T1[ebp], 1
	lea	ecx, DWORD PTR _str$2[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	al, BYTE PTR $T1[ebp]
	jmp	SHORT $LN5@Add_Object
$LN4@Add_Object:

; 391  : 	}
; 392  : 	return false;

	xor	al, al
$LN5@Add_Object:

; 393  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z ENDP ; TranslateDBClass::Add_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.h
;	COMDAT ?Find_Object@TranslateDBClass@@SAPAVTDBObjClass@@PBD@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_lowercaseId$ = -4					; size = 4
_id$ = 8						; size = 4
?Find_Object@TranslateDBClass@@SAPAVTDBObjClass@@PBD@Z PROC ; TranslateDBClass::Find_Object, COMDAT

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
$LN3@Find_Objec:

; 214  : 	TT_ASSERT(Is_Loaded());

	xor	eax, eax
	jne	SHORT $LN3@Find_Objec
	call	?Is_Loaded@TranslateDBClass@@SA_NXZ	; TranslateDBClass::Is_Loaded
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Find_Objec
	int	3
$LN1@Find_Objec:

; 215  : 
; 216  : 	StringClass lowercaseId(id, true);

	push	1
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lowercaseId$[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass

; 217  : 	_strlwr(lowercaseId.Peek_Buffer());

	lea	ecx, DWORD PTR _lowercaseId$[ebp]
	call	?Peek_Buffer@StringClass@@QAEPADXZ	; StringClass::Peek_Buffer
	push	eax
	call	DWORD PTR __imp___strlwr
	add	esp, 4

; 218  : 	return m_ObjectHash.Get(lowercaseId, NULL);

	push	0
	lea	eax, DWORD PTR _lowercaseId$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectHash
	call	?Get@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QBEPAVTDBObjClass@@ABVStringClass@@PAV2@@Z ; HashTemplateClass<StringClass,TDBObjClass *>::Get
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR _lowercaseId$[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	mov	eax, DWORD PTR $T1[ebp]

; 219  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Find_Object@TranslateDBClass@@SAPAVTDBObjClass@@PBD@Z ENDP ; TranslateDBClass::Find_Object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Export_Table@TranslateDBClass@@SAXPBD@Z
_TEXT	SEGMENT
_j$1 = -20						; size = 4
_obj$2 = -16						; size = 4
_cat$3 = -12						; size = 4
_i$4 = -8						; size = 4
_f$ = -4						; size = 4
_filename$ = 8						; size = 4
?Export_Table@TranslateDBClass@@SAXPBD@Z PROC		; TranslateDBClass::Export_Table, COMDAT

; 520  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 521  : 	/* NB: Using fopen instead of CreateFileA and TextFileClass as this file must be in
; 522  : 	UTF-8 to preserve wchar_t string arrays from the TranslatedStrings array. */
; 523  : 	FILE* f = fopen(filename, "w,ccs=UTF-8");

	push	OFFSET ??_C@_0M@OEIOICOO@w?0ccs?$DNUTF?98?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	mov	DWORD PTR _f$[ebp], eax

; 524  : 	if(f)

	cmp	DWORD PTR _f$[ebp], 0
	je	$LN12@Export_Tab

; 525  : 	{
; 526  : 		/* Export will use the following format; 
; 527  : 		[category_id,category_name]
; 528  : 			string_id,string_name,sound_id,anim_name
; 529  : 			0=lang 1 string
; 530  : 			1=lang 2 string
; 531  : 			...
; 532  : 			n=lang n string
; 533  : 
; 534  : 			string_id,string_name,sound_id,anim_name
; 535  : 			0=lang 1 string
; 536  : 			1=lang 2 string
; 537  : 			...
; 538  : 			n=lang n string
; 539  : 		*/
; 540  : 
; 541  : 
; 542  : 		/* Iterate through categories */
; 543  : 		for (int i = 0; i < m_CategoryList.Count(); i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN10@Export_Tab
$LN9@Export_Tab:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN10@Export_Tab:
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	cmp	DWORD PTR _i$4[ebp], eax
	jge	$LN12@Export_Tab

; 544  : 		{
; 545  : 			TDBCategoryClass *cat = m_CategoryList[i];

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cat$3[ebp], ecx

; 546  : 			if (cat)

	cmp	DWORD PTR _cat$3[ebp], 0
	je	$LN7@Export_Tab

; 547  : 			{
; 548  : 				fwprintf_s (f, L"[%u,%hs]\r\n",cat->Get_ID(), (const char *)cat->Get_Name());

	mov	ecx, DWORD PTR _cat$3[ebp]
	call	?Get_Name@TDBCategoryClass@@QBEABVStringClass@@XZ ; TDBCategoryClass::Get_Name
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _cat$3[ebp]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	push	eax
	push	OFFSET ??_C@_1BG@HPEKFGKC@?$AA?$FL?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	DWORD PTR __imp__fwprintf_s
	add	esp, 16					; 00000010H

; 549  : 
; 550  : 				/* Iterate through strings in class */
; 551  : 				TDBObjClass *obj;
; 552  : 				for (obj = TranslateDBClass::Get_First_Object(cat->Get_ID());obj;obj = TranslateDBClass::Get_Next_Object(cat->Get_ID(),obj))

	mov	ecx, DWORD PTR _cat$3[ebp]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	push	eax
	call	?Get_First_Object@TranslateDBClass@@SAPAVTDBObjClass@@I@Z ; TranslateDBClass::Get_First_Object
	add	esp, 4
	mov	DWORD PTR _obj$2[ebp], eax
	jmp	SHORT $LN6@Export_Tab
$LN5@Export_Tab:
	mov	eax, DWORD PTR _obj$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cat$3[ebp]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	push	eax
	call	?Get_Next_Object@TranslateDBClass@@SAPAVTDBObjClass@@IPAV2@@Z ; TranslateDBClass::Get_Next_Object
	add	esp, 8
	mov	DWORD PTR _obj$2[ebp], eax
$LN6@Export_Tab:
	cmp	DWORD PTR _obj$2[ebp], 0
	je	$LN7@Export_Tab

; 553  : 				{
; 554  : 					fwprintf_s (f, L"%u,%hs,%u,%hs\r\n", obj->Get_ID(), (const char *)obj->Get_ID_Desc(), obj->Get_Sound_ID(), (const char *)obj->Get_Animation_Name());

	mov	eax, DWORD PTR _obj$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, eax
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	push	eax
	push	OFFSET ??_C@_1CA@DOEFFKLP@?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?0?$AA?$CF?$AAu?$AA?0?$AA?$CF?$AAh?$AAs?$AA?$AN?$AA?6?$AA?$AA@
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	DWORD PTR __imp__fwprintf_s
	add	esp, 24					; 00000018H

; 555  : 
; 556  : 					/* Print out all language strings, even those with no entries, as users may
; 557  : 					wish to enter values for those while editing the export file. Note: assumes
; 558  : 					last language ID is KOREAN, if more are added this will need changing. */
; 559  : 					for (uint32 j=0; j <= LANGID_KOREAN; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN3@Export_Tab
$LN2@Export_Tab:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN3@Export_Tab:
	cmp	DWORD PTR _j$1[ebp], 6
	ja	SHORT $LN1@Export_Tab

; 560  : 						fwprintf_s (f, L"%u=%s\r\n",j,(const wchar_t *)obj->Get_String(j));

	mov	eax, DWORD PTR _j$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	mov	ecx, eax
	call	??BWideStringClass@@QBEPB_WXZ		; WideStringClass::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	push	OFFSET ??_C@_1BA@MCOAFFFO@?$AA?$CF?$AAu?$AA?$DN?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	DWORD PTR __imp__fwprintf_s
	add	esp, 16					; 00000010H
	jmp	SHORT $LN2@Export_Tab
$LN1@Export_Tab:

; 561  : 				}

	jmp	$LN5@Export_Tab
$LN7@Export_Tab:

; 562  : 			}
; 563  : 		}

	jmp	$LN9@Export_Tab
$LN12@Export_Tab:

; 564  : 	}
; 565  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Export_Table@TranslateDBClass@@SAXPBD@Z ENDP		; TranslateDBClass::Export_Table
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Export_C_Header@TranslateDBClass@@SAXPBD@Z
_TEXT	SEGMENT
_obj$1 = -44						; size = 4
_i$2 = -40						; size = 4
_str$3 = -36						; size = 4
_f$4 = -32						; size = 28
_h$ = -4						; size = 4
_filename$ = 8						; size = 4
?Export_C_Header@TranslateDBClass@@SAXPBD@Z PROC	; TranslateDBClass::Export_C_Header, COMDAT

; 473  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi

; 474  : 	HANDLE h = CreateFileA(filename,0x40000000,0,0,2,0,0);

	push	0
	push	0
	push	2
	push	0
	push	0
	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	DWORD PTR _h$[ebp], eax

; 475  : 	if (h != INVALID_HANDLE_VALUE)

	cmp	DWORD PTR _h$[ebp], -1
	je	$LN6@Export_C_H

; 476  : 	{
; 477  : 		TextFileClass f;

	lea	ecx, DWORD PTR _f$4[ebp]
	call	??0TextFileClass@@QAE@XZ		; TextFileClass::TextFileClass

; 478  : 		f.Attach(h,1);

	push	1
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Attach@RawFileClass@@UAEXPAXH@Z	; RawFileClass::Attach

; 479  : 		StringClass str("#if defined(_MSC_VER)");

	push	0
	push	OFFSET ??_C@_0BG@MAABPPJM@?$CDif?5defined?$CI_MSC_VER?$CJ?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??0StringClass@@QAE@PBD_N@Z		; StringClass::StringClass

; 480  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 481  : 		str = "#pragma once";

	push	OFFSET ??_C@_0N@IJBPAKJJ@?$CDpragma?5once?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 482  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 483  : 		str = "#endif";

	push	OFFSET ??_C@_06CCBIAIJP@?$CDendif?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 484  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 485  : 		str = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 486  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 487  : 		str = "#ifndef __STRING_IDS_H";

	push	OFFSET ??_C@_0BH@HFLBGHAE@?$CDifndef?5__STRING_IDS_H?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 488  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 489  : 		str = "#define __STRING_IDS_H";

	push	OFFSET ??_C@_0BH@PINIFKEA@?$CDdefine?5__STRING_IDS_H?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 490  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 491  : 		str = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 492  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 493  : 		str = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 494  : 		str.Format("#define STRINGS_VER\t\t%d",m_VersionNumber);

	mov	eax, DWORD PTR ?m_VersionNumber@TranslateDBClass@@0AAIA ; TranslateDBClass::m_VersionNumber
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BI@CPMBELHJ@?$CDdefine?5STRINGS_VER?7?7?$CFd?$AA@
	lea	edx, DWORD PTR _str$3[ebp]
	push	edx
	call	?Format@StringClass@@QAAHPBDZZ		; StringClass::Format
	add	esp, 12					; 0000000cH

; 495  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 496  : 		str = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 497  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 498  : 		str = "// TRANSLATEDB: Begin ID Block";

	push	OFFSET ??_C@_0BP@NHHJLBPP@?1?1?5TRANSLATEDB?3?5Begin?5ID?5Block?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 499  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 500  : 		for (int i = 0;i < m_ObjectList.Count();i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@Export_C_H
$LN3@Export_C_H:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@Export_C_H:
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@Export_C_H

; 501  : 		{
; 502  : 			TDBObjClass *obj = m_ObjectList[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _obj$1[ebp], ecx

; 503  : 			if (obj)

	cmp	DWORD PTR _obj$1[ebp], 0
	je	SHORT $LN1@Export_C_H

; 504  : 			{
; 505  : 				str = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 506  : 				str.Format("#define %s\t\t%d",obj->Get_ID_Desc(),obj->Get_ID());

	mov	eax, DWORD PTR _obj$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$1[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _obj$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _obj$1[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0P@KEFPFMKM@?$CDdefine?5?$CFs?7?7?$CFd?$AA@
	lea	edx, DWORD PTR _str$3[ebp]
	push	edx
	call	?Format@StringClass@@QAAHPBDZZ		; StringClass::Format
	add	esp, 16					; 00000010H

; 507  : 				f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line
$LN1@Export_C_H:

; 508  : 			}
; 509  : 		}

	jmp	SHORT $LN3@Export_C_H
$LN2@Export_C_H:

; 510  : 		str = "// TRANSLATEDB: End ID Block";

	push	OFFSET ??_C@_0BN@CLPJEIKF@?1?1?5TRANSLATEDB?3?5End?5ID?5Block?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 511  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 512  : 		str = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 513  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 514  : 		str = "#endif //__STRING_IDS_H";

	push	OFFSET ??_C@_0BI@BCJILNLD@?$CDendif?5?1?1__STRING_IDS_H?$AA@
	lea	ecx, DWORD PTR _str$3[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 515  : 		f.Write_Line(str);

	lea	eax, DWORD PTR _str$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$4[ebp]
	call	?Write_Line@TextFileClass@@QAE_NABVStringClass@@@Z ; TextFileClass::Write_Line

; 516  : 	}

	lea	ecx, DWORD PTR _str$3[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _f$4[ebp]
	call	??1TextFileClass@@UAE@XZ		; TextFileClass::~TextFileClass
$LN6@Export_C_H:

; 517  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Export_C_Header@TranslateDBClass@@SAXPBD@Z ENDP	; TranslateDBClass::Export_C_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Import_Strings@TranslateDBClass@@SAXPBD@Z
_TEXT	SEGMENT
tv401 = -168						; size = 4
tv232 = -168						; size = 4
tv224 = -168						; size = 4
tv205 = -168						; size = 4
tv197 = -168						; size = 4
tv189 = -168						; size = 4
tv181 = -168						; size = 4
tv177 = -168						; size = 4
tv94 = -168						; size = 4
tv89 = -168						; size = 4
tv696 = -162						; size = 2
tv598 = -162						; size = 2
tv584 = -162						; size = 2
tv564 = -162						; size = 2
tv550 = -162						; size = 2
tv536 = -162						; size = 2
tv522 = -162						; size = 2
tv510 = -162						; size = 2
tv463 = -162						; size = 2
tv450 = -162						; size = 2
tv693 = -160						; size = 4
tv595 = -160						; size = 4
tv581 = -160						; size = 4
tv561 = -160						; size = 4
tv547 = -160						; size = 4
tv533 = -160						; size = 4
tv519 = -160						; size = 4
tv507 = -160						; size = 4
tv460 = -160						; size = 4
tv447 = -160						; size = 4
tv337 = -160						; size = 4
tv261 = -160						; size = 4
tv690 = -156						; size = 4
tv592 = -156						; size = 4
tv578 = -156						; size = 4
tv558 = -156						; size = 4
tv544 = -156						; size = 4
tv530 = -156						; size = 4
tv516 = -156						; size = 4
tv504 = -156						; size = 4
tv457 = -156						; size = 4
tv444 = -156						; size = 4
tv339 = -156						; size = 4
tv263 = -156						; size = 4
tv151 = -156						; size = 4
tv81 = -156						; size = 4
$T1 = -152						; size = 4
$T2 = -148						; size = 4
$T3 = -144						; size = 4
$T4 = -140						; size = 4
$T5 = -136						; size = 4
$T6 = -132						; size = 4
_translation$7 = -64					; size = 4
_lang_id$8 = -60					; size = 4
_itemEnd$9 = -56					; size = 4
_itemStart$10 = -52					; size = 4
_animation$11 = -48					; size = 4
_sound_id$12 = -44					; size = 4
_name$13 = -40						; size = 4
_id$14 = -36						; size = 4
_name$15 = -32						; size = 4
_id$16 = -28						; size = 4
_oldInput$17 = -24					; size = 4
_input_max$18 = -20					; size = 4
_input$19 = -16						; size = 4
_f$ = -12						; size = 4
_currentObj$ = -8					; size = 4
_currentCategory$ = -4					; size = 4
_filename$ = 8						; size = 4
?Import_Strings@TranslateDBClass@@SAXPBD@Z PROC		; TranslateDBClass::Import_Strings, COMDAT

; 569  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	push	ebx
	push	esi
	push	edi

; 570  : 	TDBCategoryClass *currentCategory = NULL;

	mov	DWORD PTR _currentCategory$[ebp], 0

; 571  : 	TDBObjClass *currentObj = NULL;

	mov	DWORD PTR _currentObj$[ebp], 0

; 572  : 
; 573  : 	/* NB: Using fopen instead of CreateFileA and TextFileClass as this file should
; 574  : 	be using UTF-8 encoding */
; 575  : 	FILE* f = fopen(filename, "r,ccs=UTF-8");

	push	OFFSET ??_C@_0M@HMCNPFPO@r?0ccs?$DNUTF?98?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	mov	DWORD PTR _f$[ebp], eax

; 576  : 	if(f)

	cmp	DWORD PTR _f$[ebp], 0
	je	$LN21@Import_Str

; 577  : 	{
; 578  : 		/* Create variables - we initialise input to 1024 characters, but this
; 579  : 		will automatically be extended if required */
; 580  : 		wchar_t* input = new wchar_t[1024];

	push	OFFSET ??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN24@Import_Str
	xor	edx, edx
	jne	SHORT $LN23@Import_Str
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN23@Import_Str:
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN25@Import_Str
$LN24@Import_Str:
	push	2048					; 00000800H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv81[ebp], edx
$LN25@Import_Str:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _input$19[ebp], eax

; 581  : 		uint32 input_max = 1024;

	mov	DWORD PTR _input_max$18[ebp], 1024	; 00000400H
$LN19@Import_Str:

; 582  : 		
; 583  : 		/* Read a line from the file */
; 584  : 		while ( fgetws(input, input_max, f) )

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input_max$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$19[ebp]
	push	edx
	call	DWORD PTR __imp__fgetws
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN18@Import_Str
$LN17@Import_Str:

; 585  : 		{
; 586  : 			/* If length of input == input_max-1 and input[input_max-2] is NOT \n then
; 587  : 			we have a line which is longer than our current maximum. Extend the array
; 588  : 			by 1024 and read some more content */
; 589  : 			while ( wcslen(input) == input_max-1 && input[wcslen(input)-2] != L'\n' )

	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv444[ebp], eax
	mov	ecx, DWORD PTR tv444[ebp]
	add	ecx, 2
	mov	DWORD PTR tv447[ebp], ecx
$LL48@Import_Str:
	mov	edx, DWORD PTR tv444[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv450[ebp], ax
	add	DWORD PTR tv444[ebp], 2
	cmp	WORD PTR tv450[ebp], 0
	jne	SHORT $LL48@Import_Str
	mov	ecx, DWORD PTR tv444[ebp]
	sub	ecx, DWORD PTR tv447[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv89[ebp], ecx
	mov	edx, DWORD PTR _input_max$18[ebp]
	sub	edx, 1
	cmp	DWORD PTR tv89[ebp], edx
	jne	$LN15@Import_Str
	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv457[ebp], eax
	mov	ecx, DWORD PTR tv457[ebp]
	add	ecx, 2
	mov	DWORD PTR tv460[ebp], ecx
$LL49@Import_Str:
	mov	edx, DWORD PTR tv457[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv463[ebp], ax
	add	DWORD PTR tv457[ebp], 2
	cmp	WORD PTR tv463[ebp], 0
	jne	SHORT $LL49@Import_Str
	mov	ecx, DWORD PTR tv457[ebp]
	sub	ecx, DWORD PTR tv460[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv94[ebp], ecx
	mov	edx, DWORD PTR tv94[ebp]
	mov	eax, DWORD PTR _input$19[ebp]
	movzx	ecx, WORD PTR [eax+edx*2-4]
	cmp	ecx, 10					; 0000000aH
	je	$LN15@Import_Str

; 590  : 			{
; 591  : 				wchar_t *oldInput = input;

	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR _oldInput$17[ebp], eax

; 592  : 				input_max += 1024;

	mov	eax, DWORD PTR _input_max$18[ebp]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR _input_max$18[ebp], eax

; 593  : 				input = new wchar_t[input_max];

	push	OFFSET ??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN27@Import_Str
	xor	edx, edx
	jne	SHORT $LN26@Import_Str
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN26@Import_Str:
	mov	DWORD PTR tv151[ebp], 0
	jmp	SHORT $LN28@Import_Str
$LN27@Import_Str:
	xor	ecx, ecx
	mov	eax, DWORD PTR _input_max$18[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv151[ebp], eax
$LN28@Import_Str:
	mov	ecx, DWORD PTR tv151[ebp]
	mov	DWORD PTR _input$19[ebp], ecx

; 594  : 				memcpy(input,oldInput,sizeof(wchar_t)*(input_max-1024));

	mov	eax, DWORD PTR _input_max$18[ebp]
	lea	ecx, DWORD PTR [eax+eax-2048]
	push	ecx
	mov	edx, DWORD PTR _oldInput$17[ebp]
	push	edx
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 595  : 				delete [] oldInput;

	push	OFFSET ??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 26					; 0000001aH
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN30@Import_Str
	xor	edx, edx
	jne	SHORT $LN29@Import_Str
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 26					; 0000001aH
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN29@Import_Str:
	jmp	SHORT $LN31@Import_Str
$LN30@Import_Str:
	mov	edx, DWORD PTR _oldInput$17[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN31@Import_Str:

; 596  : 
; 597  : 				/* Read more content - NB: Read from input_max-1025 because we need to
; 598  : 				overwrite the old null terminator. Hence we can actually read 1025
; 599  : 				additional characters, including the new null terminator. */
; 600  : 				fgetws((input+(input_max-1025)), 1025, f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	push	1025					; 00000401H
	mov	ecx, DWORD PTR _input_max$18[ebp]
	mov	edx, DWORD PTR _input$19[ebp]
	lea	eax, DWORD PTR [edx+ecx*2-2050]
	push	eax
	call	DWORD PTR __imp__fgetws
	add	esp, 12					; 0000000cH

; 601  : 			}

	jmp	$LN17@Import_Str
$LN15@Import_Str:

; 602  : 
; 603  : 
; 604  : 			/* Nullify trailing whitespace or newline characters */
; 605  : 			while ( wcslen(input) > 0 && (input[wcslen(input)-1] == L' ' || input[wcslen(input)-1] == L'\r' || input[wcslen(input)-1] == L'\n') )

	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv504[ebp], eax
	mov	ecx, DWORD PTR tv504[ebp]
	add	ecx, 2
	mov	DWORD PTR tv507[ebp], ecx
$LL50@Import_Str:
	mov	edx, DWORD PTR tv504[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv510[ebp], ax
	add	DWORD PTR tv504[ebp], 2
	cmp	WORD PTR tv510[ebp], 0
	jne	SHORT $LL50@Import_Str
	mov	ecx, DWORD PTR tv504[ebp]
	sub	ecx, DWORD PTR tv507[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv177[ebp], ecx
	je	$LN14@Import_Str
	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv516[ebp], eax
	mov	ecx, DWORD PTR tv516[ebp]
	add	ecx, 2
	mov	DWORD PTR tv519[ebp], ecx
$LL51@Import_Str:
	mov	edx, DWORD PTR tv516[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv522[ebp], ax
	add	DWORD PTR tv516[ebp], 2
	cmp	WORD PTR tv522[ebp], 0
	jne	SHORT $LL51@Import_Str
	mov	ecx, DWORD PTR tv516[ebp]
	sub	ecx, DWORD PTR tv519[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv181[ebp], ecx
	mov	edx, DWORD PTR tv181[ebp]
	mov	eax, DWORD PTR _input$19[ebp]
	movzx	ecx, WORD PTR [eax+edx*2-2]
	cmp	ecx, 32					; 00000020H
	je	$LN13@Import_Str
	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv530[ebp], eax
	mov	ecx, DWORD PTR tv530[ebp]
	add	ecx, 2
	mov	DWORD PTR tv533[ebp], ecx
$LL52@Import_Str:
	mov	edx, DWORD PTR tv530[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv536[ebp], ax
	add	DWORD PTR tv530[ebp], 2
	cmp	WORD PTR tv536[ebp], 0
	jne	SHORT $LL52@Import_Str
	mov	ecx, DWORD PTR tv530[ebp]
	sub	ecx, DWORD PTR tv533[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv189[ebp], ecx
	mov	edx, DWORD PTR tv189[ebp]
	mov	eax, DWORD PTR _input$19[ebp]
	movzx	ecx, WORD PTR [eax+edx*2-2]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN13@Import_Str
	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv544[ebp], eax
	mov	ecx, DWORD PTR tv544[ebp]
	add	ecx, 2
	mov	DWORD PTR tv547[ebp], ecx
$LL53@Import_Str:
	mov	edx, DWORD PTR tv544[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv550[ebp], ax
	add	DWORD PTR tv544[ebp], 2
	cmp	WORD PTR tv550[ebp], 0
	jne	SHORT $LL53@Import_Str
	mov	ecx, DWORD PTR tv544[ebp]
	sub	ecx, DWORD PTR tv547[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv197[ebp], ecx
	mov	edx, DWORD PTR tv197[ebp]
	mov	eax, DWORD PTR _input$19[ebp]
	movzx	ecx, WORD PTR [eax+edx*2-2]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN14@Import_Str
$LN13@Import_Str:

; 606  : 				input[wcslen(input)-1] = L'\0';

	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv558[ebp], eax
	mov	ecx, DWORD PTR tv558[ebp]
	add	ecx, 2
	mov	DWORD PTR tv561[ebp], ecx
$LL54@Import_Str:
	mov	edx, DWORD PTR tv558[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv564[ebp], ax
	add	DWORD PTR tv558[ebp], 2
	cmp	WORD PTR tv564[ebp], 0
	jne	SHORT $LL54@Import_Str
	mov	ecx, DWORD PTR tv558[ebp]
	sub	ecx, DWORD PTR tv561[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv205[ebp], ecx
	xor	edx, edx
	mov	eax, DWORD PTR tv205[ebp]
	mov	ecx, DWORD PTR _input$19[ebp]
	mov	WORD PTR [ecx+eax*2-2], dx
	jmp	$LN15@Import_Str
$LN14@Import_Str:

; 607  : 
; 608  : 
; 609  : 
; 610  : 
; 611  : 			/* Process line... */
; 612  : 			if ( input[0] == L'[' && wcschr(input,L',') != NULL )

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _input$19[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 91					; 0000005bH
	jne	$LN12@Import_Str
	push	44					; 0000002cH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	test	eax, eax
	je	$LN12@Import_Str

; 613  : 			{
; 614  : 				// Category
; 615  : 				uint32 id;
; 616  : 				StringClass name;

	push	0
	push	0
	lea	ecx, DWORD PTR _name$15[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 617  : 
; 618  : 				// We don't need the trailing ] from the category name so nullify it
; 619  : 				if ( input[wcslen(input)-1] == L']' )

	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv578[ebp], eax
	mov	ecx, DWORD PTR tv578[ebp]
	add	ecx, 2
	mov	DWORD PTR tv581[ebp], ecx
$LL55@Import_Str:
	mov	edx, DWORD PTR tv578[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv584[ebp], ax
	add	DWORD PTR tv578[ebp], 2
	cmp	WORD PTR tv584[ebp], 0
	jne	SHORT $LL55@Import_Str
	mov	ecx, DWORD PTR tv578[ebp]
	sub	ecx, DWORD PTR tv581[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv224[ebp], ecx
	mov	edx, DWORD PTR tv224[ebp]
	mov	eax, DWORD PTR _input$19[ebp]
	movzx	ecx, WORD PTR [eax+edx*2-2]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN11@Import_Str

; 620  : 					input[wcslen(input)-1] = '\0';

	mov	eax, DWORD PTR _input$19[ebp]
	mov	DWORD PTR tv592[ebp], eax
	mov	ecx, DWORD PTR tv592[ebp]
	add	ecx, 2
	mov	DWORD PTR tv595[ebp], ecx
$LL56@Import_Str:
	mov	edx, DWORD PTR tv592[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv598[ebp], ax
	add	DWORD PTR tv592[ebp], 2
	cmp	WORD PTR tv598[ebp], 0
	jne	SHORT $LL56@Import_Str
	mov	ecx, DWORD PTR tv592[ebp]
	sub	ecx, DWORD PTR tv595[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv232[ebp], ecx
	xor	edx, edx
	mov	eax, DWORD PTR tv232[ebp]
	mov	ecx, DWORD PTR _input$19[ebp]
	mov	WORD PTR [ecx+eax*2-2], dx

; 621  : 				else

	jmp	SHORT $LN10@Import_Str
$LN11@Import_Str:

; 622  : 					continue;		// Invalid category line, not terminated with ]

	lea	ecx, DWORD PTR _name$15[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN19@Import_Str
$LN10@Import_Str:

; 623  : 
; 624  : 				// Read ID and name
; 625  : 				id = _wtoi(input+1);

	mov	eax, DWORD PTR _input$19[ebp]
	add	eax, 2
	push	eax
	call	DWORD PTR __imp___wtoi
	add	esp, 4
	mov	DWORD PTR _id$16[ebp], eax

; 626  : 				name.Format("%ls",wcschr(input,L',')+1);

	push	44					; 0000002cH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_03MIIGHJO@?$CFls?$AA@
	lea	ecx, DWORD PTR _name$15[ebp]
	push	ecx
	call	?Format@StringClass@@QAAHPBDZZ		; StringClass::Format
	add	esp, 12					; 0000000cH

; 627  : 				
; 628  : 				/* If category name is NOT default then create category. */
; 629  : 				currentCategory = new TDBCategoryClass();

	push	OFFSET ??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 60					; 0000003cH
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN35@Import_Str
	xor	edx, edx
	jne	SHORT $LN32@Import_Str
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 60					; 0000003cH
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN32@Import_Str:
	mov	DWORD PTR tv263[ebp], 0
	jmp	SHORT $LN36@Import_Str
$LN35@Import_Str:
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN33@Import_Str
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0TDBCategoryClass@@QAE@XZ		; TDBCategoryClass::TDBCategoryClass
	mov	DWORD PTR tv261[ebp], eax
	jmp	SHORT $LN34@Import_Str
$LN33@Import_Str:
	mov	DWORD PTR tv261[ebp], 0
$LN34@Import_Str:
	mov	edx, DWORD PTR tv261[ebp]
	mov	DWORD PTR tv263[ebp], edx
$LN36@Import_Str:
	mov	eax, DWORD PTR tv263[ebp]
	mov	DWORD PTR _currentCategory$[ebp], eax

; 630  : 				currentCategory->Set_ID(id);

	mov	eax, DWORD PTR _id$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _currentCategory$[ebp]
	call	?Set_ID@TDBCategoryClass@@QAEXI@Z	; TDBCategoryClass::Set_ID

; 631  : 				currentCategory->Set_Name(name);

	lea	ecx, DWORD PTR _name$15[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	ecx, DWORD PTR _currentCategory$[ebp]
	call	?Set_Name@TDBCategoryClass@@QAEXPBD@Z	; TDBCategoryClass::Set_Name

; 632  : 				Add_Category(currentCategory);

	push	1
	mov	eax, DWORD PTR _currentCategory$[ebp]
	push	eax
	call	?Add_Category@TranslateDBClass@@SA_NPAVTDBCategoryClass@@_N@Z ; TranslateDBClass::Add_Category
	add	esp, 8

; 633  : 
; 634  : 				// Unset current object
; 635  : 				currentObj = NULL;

	mov	DWORD PTR _currentObj$[ebp], 0

; 636  : 			}

	lea	ecx, DWORD PTR _name$15[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN9@Import_Str
$LN12@Import_Str:

; 637  : 
; 638  : 
; 639  : 
; 640  : 
; 641  : 			else if (currentCategory && ( wcschr(input,L',') != NULL && (wcschr(input,L'=') == NULL || wcschr(input,L',') < wcschr(input,L'=')) ))

	cmp	DWORD PTR _currentCategory$[ebp], 0
	je	$LN8@Import_Str
	push	44					; 0000002cH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	test	eax, eax
	je	$LN8@Import_Str
	push	61					; 0000003dH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@Import_Str
	push	44					; 0000002cH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	mov	esi, eax
	push	61					; 0000003dH
	mov	ecx, DWORD PTR _input$19[ebp]
	push	ecx
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	cmp	esi, eax
	jae	$LN8@Import_Str
$LN7@Import_Str:

; 642  : 			{
; 643  : 				// String
; 644  : 				uint32 id;
; 645  : 				StringClass name;

	push	0
	push	0
	lea	ecx, DWORD PTR _name$13[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 646  : 				uint32 sound_id;
; 647  : 				StringClass animation;

	push	0
	push	0
	lea	ecx, DWORD PTR _animation$11[ebp]
	call	??0StringClass@@QAE@H_N@Z		; StringClass::StringClass

; 648  : 
; 649  : 				// Set ID
; 650  : 				id = _wtoi(input);

	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	DWORD PTR __imp___wtoi
	add	esp, 4
	mov	DWORD PTR _id$14[ebp], eax

; 651  : 
; 652  : 				// Extract name (nullify final , so format doesnt overrun name)
; 653  : 				wchar_t *itemStart = wcschr(input,L',')+1;

	push	44					; 0000002cH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	add	eax, 2
	mov	DWORD PTR _itemStart$10[ebp], eax

; 654  : 				wchar_t *itemEnd = wcschr(itemStart,L',');

	push	44					; 0000002cH
	mov	eax, DWORD PTR _itemStart$10[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	mov	DWORD PTR _itemEnd$9[ebp], eax

; 655  : 				if ( itemEnd == NULL ) continue;		//Invalid String line, not enough parameters

	cmp	DWORD PTR _itemEnd$9[ebp], 0
	jne	SHORT $LN6@Import_Str
	lea	ecx, DWORD PTR _animation$11[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _name$13[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN19@Import_Str
$LN6@Import_Str:

; 656  : 				*itemEnd = '\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _itemEnd$9[ebp]
	mov	WORD PTR [ecx], ax

; 657  : 				name.Format("%ls",itemStart);

	mov	eax, DWORD PTR _itemStart$10[ebp]
	push	eax
	push	OFFSET ??_C@_03MIIGHJO@?$CFls?$AA@
	lea	ecx, DWORD PTR _name$13[ebp]
	push	ecx
	call	?Format@StringClass@@QAAHPBDZZ		; StringClass::Format
	add	esp, 12					; 0000000cH

; 658  : 
; 659  : 				// Set sound ID
; 660  : 				itemStart = itemEnd+1;

	mov	eax, DWORD PTR _itemEnd$9[ebp]
	add	eax, 2
	mov	DWORD PTR _itemStart$10[ebp], eax

; 661  : 				sound_id = _wtoi(itemStart);

	mov	eax, DWORD PTR _itemStart$10[ebp]
	push	eax
	call	DWORD PTR __imp___wtoi
	add	esp, 4
	mov	DWORD PTR _sound_id$12[ebp], eax

; 662  : 
; 663  : 				// Extract animation name (all remaining content on line, could be blank)
; 664  : 				itemStart = wcschr(itemStart,L',')+1;

	push	44					; 0000002cH
	mov	eax, DWORD PTR _itemStart$10[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	add	eax, 2
	mov	DWORD PTR _itemStart$10[ebp], eax

; 665  : 				if ( itemStart == NULL ) continue;		//Invalid String line, not enough parameters

	jne	SHORT $LN5@Import_Str
	lea	ecx, DWORD PTR _animation$11[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _name$13[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN19@Import_Str
$LN5@Import_Str:

; 666  : 				animation.Format("%ls",itemStart);

	mov	eax, DWORD PTR _itemStart$10[ebp]
	push	eax
	push	OFFSET ??_C@_03MIIGHJO@?$CFls?$AA@
	lea	ecx, DWORD PTR _animation$11[ebp]
	push	ecx
	call	?Format@StringClass@@QAAHPBDZZ		; StringClass::Format
	add	esp, 12					; 0000000cH

; 667  : 				
; 668  : 				/* Create string object */
; 669  : 				currentObj = new TDBObjClass();

	push	OFFSET ??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 100				; 00000064H
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN40@Import_Str
	xor	edx, edx
	jne	SHORT $LN37@Import_Str
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 100				; 00000064H
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN37@Import_Str:
	mov	DWORD PTR tv339[ebp], 0
	jmp	SHORT $LN41@Import_Str
$LN40@Import_Str:
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN38@Import_Str
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0TDBObjClass@@QAE@XZ			; TDBObjClass::TDBObjClass
	mov	DWORD PTR tv337[ebp], eax
	jmp	SHORT $LN39@Import_Str
$LN38@Import_Str:
	mov	DWORD PTR tv337[ebp], 0
$LN39@Import_Str:
	mov	edx, DWORD PTR tv337[ebp]
	mov	DWORD PTR tv339[ebp], edx
$LN41@Import_Str:
	mov	eax, DWORD PTR tv339[ebp]
	mov	DWORD PTR _currentObj$[ebp], eax

; 670  : 				currentObj->Set_ID(id);

	mov	eax, DWORD PTR _id$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 671  : 				currentObj->Set_ID_Desc(name);

	lea	ecx, DWORD PTR _name$13[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _currentObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 672  : 				currentObj->Set_Sound_ID(sound_id);

	mov	eax, DWORD PTR _sound_id$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 673  : 				currentObj->Set_Animation_Name(animation);

	lea	ecx, DWORD PTR _animation$11[ebp]
	call	??BStringClass@@QBEPBDXZ		; StringClass::operator char const *
	push	eax
	mov	eax, DWORD PTR _currentObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax

; 674  : 				currentObj->Set_Category_ID (currentCategory->Get_ID());

	mov	ecx, DWORD PTR _currentCategory$[ebp]
	call	?Get_ID@TDBCategoryClass@@QBEIXZ	; TDBCategoryClass::Get_ID
	push	eax
	mov	eax, DWORD PTR _currentObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax

; 675  : 				Add_Object(currentObj);

	mov	eax, DWORD PTR _currentObj$[ebp]
	push	eax
	call	?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z ; TranslateDBClass::Add_Object
	add	esp, 4

; 676  : 			}

	lea	ecx, DWORD PTR _animation$11[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	lea	ecx, DWORD PTR _name$13[ebp]
	call	??1StringClass@@QAE@XZ			; StringClass::~StringClass
	jmp	$LN9@Import_Str
$LN8@Import_Str:

; 677  : 
; 678  : 
; 679  : 
; 680  : 
; 681  : 			else if (currentObj && ( wcschr(input,L'=') != NULL && (wcschr(input,L',') == NULL || wcschr(input,L'=') < wcschr(input,L',')) ))

	cmp	DWORD PTR _currentObj$[ebp], 0
	je	$LN9@Import_Str
	push	61					; 0000003dH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	test	eax, eax
	je	$LN9@Import_Str
	push	44					; 0000002cH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@Import_Str
	push	61					; 0000003dH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	mov	esi, eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR _input$19[ebp]
	push	ecx
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	cmp	esi, eax
	jae	$LN9@Import_Str
$LN2@Import_Str:

; 682  : 			{
; 683  : 				// String Translation
; 684  : 				uint32 lang_id;
; 685  : 				WideStringClass translation;

	push	0
	push	0
	lea	ecx, DWORD PTR _translation$7[ebp]
	call	??0WideStringClass@@QAE@H_N@Z		; WideStringClass::WideStringClass

; 686  : 
; 687  : 				// Set language ID
; 688  : 				lang_id = _wtoi(input);

	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	DWORD PTR __imp___wtoi
	add	esp, 4
	mov	DWORD PTR _lang_id$8[ebp], eax

; 689  : 
; 690  : 				// Extract translation name (all remaining content on line after the =, could be blank)
; 691  : 				translation.Format(L"%s", wcschr(input,L'=')+1);

	push	61					; 0000003dH
	mov	eax, DWORD PTR _input$19[ebp]
	push	eax
	call	?wcschr@@YAPA_WPA_W_W@Z			; wcschr
	add	esp, 8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	lea	ecx, DWORD PTR _translation$7[ebp]
	push	ecx
	call	?Format@WideStringClass@@QAAHPB_WZZ	; WideStringClass::Format
	add	esp, 12					; 0000000cH

; 692  : 				
; 693  : 				/* Register translation with current string object */
; 694  : 				if ( wcslen(translation) > 0 )

	lea	ecx, DWORD PTR _translation$7[ebp]
	call	??BWideStringClass@@QBEPB_WXZ		; WideStringClass::operator wchar_t const *
	mov	DWORD PTR tv690[ebp], eax
	mov	eax, DWORD PTR tv690[ebp]
	add	eax, 2
	mov	DWORD PTR tv693[ebp], eax
$LL57@Import_Str:
	mov	ecx, DWORD PTR tv690[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv696[ebp], dx
	add	DWORD PTR tv690[ebp], 2
	cmp	WORD PTR tv696[ebp], 0
	jne	SHORT $LL57@Import_Str
	mov	eax, DWORD PTR tv690[ebp]
	sub	eax, DWORD PTR tv693[ebp]
	sar	eax, 1
	mov	DWORD PTR tv401[ebp], eax
	je	SHORT $LN1@Import_Str

; 695  : 					currentObj->Set_String(lang_id, translation);

	lea	ecx, DWORD PTR _translation$7[ebp]
	call	??BWideStringClass@@QBEPB_WXZ		; WideStringClass::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _lang_id$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _currentObj$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
$LN1@Import_Str:

; 696  : 			}

	lea	ecx, DWORD PTR _translation$7[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
$LN9@Import_Str:

; 697  : 		}

	jmp	$LN19@Import_Str
$LN18@Import_Str:

; 698  : 
; 699  : 		delete [] input;

	push	OFFSET ??_C@_0CB@ODBGKCFP@TranslateDBClass?3?3Import_Strings@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 130				; 00000082H
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN43@Import_Str
	xor	edx, edx
	jne	SHORT $LN42@Import_Str
	mov	eax, DWORD PTR ?__LINE__Var@?1??Import_Strings@TranslateDBClass@@SAXPBD@Z@4JA@fac20d4b
	add	eax, 130				; 00000082H
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN42@Import_Str:
	jmp	SHORT $LN21@Import_Str
$LN43@Import_Str:
	mov	edx, DWORD PTR _input$19[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN21@Import_Str:

; 700  : 	}
; 701  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Import_Strings@TranslateDBClass@@SAXPBD@Z ENDP		; TranslateDBClass::Import_Strings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.h
;	COMDAT ?Is_Loaded@TranslateDBClass@@SA_NXZ
_TEXT	SEGMENT
tv67 = -68						; size = 4
?Is_Loaded@TranslateDBClass@@SA_NXZ PROC		; TranslateDBClass::Is_Loaded, COMDAT

; 118  : 	static bool Is_Loaded() { return (m_ObjectList.Count() > 0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	test	eax, eax
	jle	SHORT $LN3@Is_Loaded
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@Is_Loaded
$LN3@Is_Loaded:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Is_Loaded:
	mov	al, BYTE PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Loaded@TranslateDBClass@@SA_NXZ ENDP		; TranslateDBClass::Is_Loaded
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Update_Version@TranslateDBClass@@SAXXZ
_TEXT	SEGMENT
?Update_Version@TranslateDBClass@@SAXXZ PROC		; TranslateDBClass::Update_Version, COMDAT

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 402  : 	m_VersionNumber++;

	mov	eax, DWORD PTR ?m_VersionNumber@TranslateDBClass@@0AAIA ; TranslateDBClass::m_VersionNumber
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR ?m_VersionNumber@TranslateDBClass@@0AAIA ; TranslateDBClass::m_VersionNumber
	mov	DWORD PTR [edx], ecx

; 403  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Update_Version@TranslateDBClass@@SAXXZ ENDP		; TranslateDBClass::Update_Version
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Get_Version_Number@TranslateDBClass@@SAIXZ
_TEXT	SEGMENT
?Get_Version_Number@TranslateDBClass@@SAIXZ PROC	; TranslateDBClass::Get_Version_Number, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 52   : 	return m_VersionNumber;

	mov	eax, DWORD PTR ?m_VersionNumber@TranslateDBClass@@0AAIA ; TranslateDBClass::m_VersionNumber
	mov	eax, DWORD PTR [eax]

; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Version_Number@TranslateDBClass@@SAIXZ ENDP	; TranslateDBClass::Get_Version_Number
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Shutdown@TranslateDBClass@@SAXXZ
_TEXT	SEGMENT
?Shutdown@TranslateDBClass@@SAXXZ PROC			; TranslateDBClass::Shutdown, COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 57   : 	Free_Objects();

	call	?Free_Objects@TranslateDBClass@@KAXXZ	; TranslateDBClass::Free_Objects

; 58   : 	Free_Categories();

	call	?Free_Categories@TranslateDBClass@@KAXXZ ; TranslateDBClass::Free_Categories

; 59   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Shutdown@TranslateDBClass@@SAXXZ ENDP			; TranslateDBClass::Shutdown
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Initialize@TranslateDBClass@@SAXXZ
_TEXT	SEGMENT
?Initialize@TranslateDBClass@@SAXXZ PROC		; TranslateDBClass::Initialize, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 47   : 	m_ObjectList.Set_Growth_Step(1000);

	push	1000					; 000003e8H
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Set_Growth_Step@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEHH@Z ; DynamicVectorClass<TDBObjClass *>::Set_Growth_Step

; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Initialize@TranslateDBClass@@SAXXZ ENDP		; TranslateDBClass::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Find_Unique_ID@TranslateDBClass@@KAIXZ
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?Find_Unique_ID@TranslateDBClass@@KAIXZ PROC		; TranslateDBClass::Find_Unique_ID, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 271  : 	for (int i = 0;i < m_ObjectList.Count();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Find_Uniqu
$LN3@Find_Uniqu:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Find_Uniqu:
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN2@Find_Uniqu

; 272  : 	{
; 273  : 		if (!m_ObjectList[i])

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@Find_Uniqu

; 274  : 		{
; 275  : 			return i + 1000;

	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1000				; 000003e8H
	jmp	SHORT $LN5@Find_Uniqu
$LN1@Find_Uniqu:

; 276  : 		}
; 277  : 	}

	jmp	SHORT $LN3@Find_Uniqu
$LN2@Find_Uniqu:

; 278  : 	return m_ObjectList.Count() + 1000;

	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	add	eax, 1000				; 000003e8H
$LN5@Find_Uniqu:

; 279  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Find_Unique_ID@TranslateDBClass@@KAIXZ ENDP		; TranslateDBClass::Find_Unique_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Free_Categories@TranslateDBClass@@KAXXZ
_TEXT	SEGMENT
tv95 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_i$3 = -4						; size = 4
?Free_Categories@TranslateDBClass@@KAXXZ PROC		; TranslateDBClass::Free_Categories, COMDAT

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 63   : 	for (int i = 0;i < m_CategoryList.Count();i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@Free_Categ
$LN2@Free_Categ:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@Free_Categ:
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	$LN1@Free_Categ

; 64   : 	{
; 65   : 		delete m_CategoryList[i];

	push	OFFSET ??_C@_0CC@KAMEBFOG@TranslateDBClass?3?3Free_Categorie@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Free_Categories@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN9@Free_Categ
	xor	edx, edx
	jne	SHORT $LN6@Free_Categ
	mov	eax, DWORD PTR ?__LINE__Var@?1??Free_Categories@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Free_Categ:
	jmp	SHORT $LN10@Free_Categ
$LN9@Free_Categ:
	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@Free_Categ
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN10@Free_Categ
$LN7@Free_Categ:
	mov	DWORD PTR tv95[ebp], 0
$LN10@Free_Categ:

; 66   : 	}

	jmp	$LN2@Free_Categ
$LN1@Free_Categ:

; 67   : 	m_CategoryList.Delete_All();

	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Delete_All@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAEXXZ ; DynamicVectorClass<TDBCategoryClass *>::Delete_All

; 68   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Free_Categories@TranslateDBClass@@KAXXZ ENDP		; TranslateDBClass::Free_Categories
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Free_Objects@TranslateDBClass@@KAXXZ
_TEXT	SEGMENT
tv95 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_i$3 = -4						; size = 4
?Free_Objects@TranslateDBClass@@KAXXZ PROC		; TranslateDBClass::Free_Objects, COMDAT

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 72   : 	for (int i = 0;i < m_ObjectList.Count();i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@Free_Objec
$LN2@Free_Objec:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@Free_Objec:
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	$LN1@Free_Objec

; 73   : 	{
; 74   : 		delete m_ObjectList[i];

	push	OFFSET ??_C@_0BP@JOCINFGN@TranslateDBClass?3?3Free_Objects?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Free_Objects@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN9@Free_Objec
	xor	edx, edx
	jne	SHORT $LN6@Free_Objec
	mov	eax, DWORD PTR ?__LINE__Var@?1??Free_Objects@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Free_Objec:
	jmp	SHORT $LN10@Free_Objec
$LN9@Free_Objec:
	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN7@Free_Objec
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN10@Free_Objec
$LN7@Free_Objec:
	mov	DWORD PTR tv95[ebp], 0
$LN10@Free_Objec:

; 75   : 	}

	jmp	$LN2@Free_Objec
$LN1@Free_Objec:

; 76   : 	m_ObjectList.Delete_All();

	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Delete_All@?$DynamicVectorClass@PAVTDBObjClass@@@@QAEXXZ ; DynamicVectorClass<TDBObjClass *>::Delete_All

; 77   : 	m_ObjectHash.Remove_All();

	mov	ecx, DWORD PTR ?m_ObjectHash@TranslateDBClass@@0AAV?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectHash
	call	?Remove_All@?$HashTemplateClass@VStringClass@@PAVTDBObjClass@@@@QAEXXZ ; HashTemplateClass<StringClass,TDBObjClass *>::Remove_All

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Free_Objects@TranslateDBClass@@KAXXZ ENDP		; TranslateDBClass::Free_Objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Validate_Data@TranslateDBClass@@KAXXZ
_TEXT	SEGMENT
tv234 = -124						; size = 4
tv198 = -124						; size = 4
tv139 = -124						; size = 4
tv82 = -124						; size = 4
tv236 = -120						; size = 4
tv200 = -120						; size = 4
tv141 = -120						; size = 4
tv84 = -120						; size = 4
$T1 = -116						; size = 4
$T2 = -112						; size = 4
$T3 = -108						; size = 4
$T4 = -104						; size = 4
_obj$5 = -36						; size = 4
_obj$6 = -32						; size = 4
_lang_star$7 = -28					; size = 4
_lang_string$8 = -24					; size = 4
_en_star$9 = -20					; size = 4
_en_string$10 = -16					; size = 4
_texture_filter$ = -12					; size = 4
_obj$11 = -8						; size = 4
_t$12 = -4						; size = 4
?Validate_Data@TranslateDBClass@@KAXXZ PROC		; TranslateDBClass::Validate_Data, COMDAT

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi

; 209  : 	if (!m_CategoryList.Count())

	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	test	eax, eax
	jne	$LN7@Validate_D

; 210  : 	{
; 211  : 		TDBCategoryClass *t = new TDBCategoryClass();

	push	OFFSET ??_C@_0CA@JFIDDPLE@TranslateDBClass?3?3Validate_Data?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN13@Validate_D
	xor	edx, edx
	jne	SHORT $LN10@Validate_D
	mov	eax, DWORD PTR ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN10@Validate_D:
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN14@Validate_D
$LN13@Validate_D:
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@Validate_D
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0TDBCategoryClass@@QAE@XZ		; TDBCategoryClass::TDBCategoryClass
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN12@Validate_D
$LN11@Validate_D:
	mov	DWORD PTR tv82[ebp], 0
$LN12@Validate_D:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN14@Validate_D:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR _t$12[ebp], eax

; 212  : 		t->Set_Name("Default");

	push	OFFSET ??_C@_07MCAEODGB@Default?$AA@
	mov	ecx, DWORD PTR _t$12[ebp]
	call	?Set_Name@TDBCategoryClass@@QAEXPBD@Z	; TDBCategoryClass::Set_Name

; 213  : 		m_CategoryList.Add(t);

	lea	eax, DWORD PTR _t$12[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Add@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QAE_NABQAVTDBCategoryClass@@@Z ; DynamicVectorClass<TDBCategoryClass *>::Add
$LN7@Validate_D:

; 214  : 	}
; 215  : 
; 216  : #ifndef TDBEDIT
; 217  : 	// add a few custom translation entries if they don't already exist
; 218  : 	if (!Find_Object("IDS_MENU_HIGH_RES_SHADOWS"))

	push	OFFSET ??_C@_0BK@EJKHOMHD@IDS_MENU_HIGH_RES_SHADOWS?$AA@
	call	?Find_Object@TranslateDBClass@@SAPAVTDBObjClass@@PBD@Z ; TranslateDBClass::Find_Object
	add	esp, 4
	test	eax, eax
	jne	$LN6@Validate_D

; 219  : 	{
; 220  : 		TDBObjClass* obj = new TDBObjClass();

	push	OFFSET ??_C@_0CA@JFIDDPLE@TranslateDBClass?3?3Validate_Data?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN18@Validate_D
	xor	edx, edx
	jne	SHORT $LN15@Validate_D
	mov	eax, DWORD PTR ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN15@Validate_D:
	mov	DWORD PTR tv141[ebp], 0
	jmp	SHORT $LN19@Validate_D
$LN18@Validate_D:
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN16@Validate_D
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0TDBObjClass@@QAE@XZ			; TDBObjClass::TDBObjClass
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN17@Validate_D
$LN16@Validate_D:
	mov	DWORD PTR tv139[ebp], 0
$LN17@Validate_D:
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR tv141[ebp], edx
$LN19@Validate_D:
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR _obj$11[ebp], eax

; 221  : 		obj->Set_ID_Desc("IDS_MENU_HIGH_RES_SHADOWS");

	push	OFFSET ??_C@_0BK@EJKHOMHD@IDS_MENU_HIGH_RES_SHADOWS?$AA@
	mov	eax, DWORD PTR _obj$11[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$11[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 222  : 		obj->Set_English_String("High Resolution Shadows");

	push	OFFSET ??_C@_0BI@DECOBLOK@High?5Resolution?5Shadows?$AA@
	mov	eax, DWORD PTR _obj$11[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$11[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 223  : 		obj->Set_String(TranslateDBClass::Get_Current_Language(), L"High Resolution Shadows");

	push	OFFSET ??_C@_1DA@KABFLKEL@?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAR?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAs?$AA?$AA@
	call	?Get_Current_Language@TranslateDBClass@@SAIXZ ; TranslateDBClass::Get_Current_Language
	push	eax
	mov	eax, DWORD PTR _obj$11[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$11[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax

; 224  : 		Add_Object(obj);

	mov	eax, DWORD PTR _obj$11[ebp]
	push	eax
	call	?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z ; TranslateDBClass::Add_Object
	add	esp, 4
$LN6@Validate_D:

; 225  : 	}
; 226  : 
; 227  : 	TDBObjClass* texture_filter = Find_Object("IDS_TEXTURE_FILTER");

	push	OFFSET ??_C@_0BD@HBJLLDGE@IDS_TEXTURE_FILTER?$AA@
	call	?Find_Object@TranslateDBClass@@SAPAVTDBObjClass@@PBD@Z ; TranslateDBClass::Find_Object
	add	esp, 4
	mov	DWORD PTR _texture_filter$[ebp], eax

; 228  : 	if (texture_filter)

	cmp	DWORD PTR _texture_filter$[ebp], 0
	je	SHORT $LN5@Validate_D

; 229  : 	{
; 230  : 		char* en_string = (char*)texture_filter->Get_English_String().Peek_Buffer();

	mov	eax, DWORD PTR _texture_filter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _texture_filter$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	ecx, eax
	call	?Peek_Buffer@StringClass@@QBEPBDXZ	; StringClass::Peek_Buffer
	mov	DWORD PTR _en_string$10[ebp], eax

; 231  : 		if (char* en_star = strrchr(en_string, '*')) *en_star = ' ';

	push	42					; 0000002aH
	mov	eax, DWORD PTR _en_string$10[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _en_star$9[ebp], eax
	cmp	DWORD PTR _en_star$9[ebp], 0
	je	SHORT $LN4@Validate_D
	mov	eax, DWORD PTR _en_star$9[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
$LN4@Validate_D:

; 232  : 
; 233  : 		wchar_t* lang_string = (wchar_t*)texture_filter->Get_String().Peek_Buffer();

	mov	eax, DWORD PTR _texture_filter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _texture_filter$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	mov	ecx, eax
	call	?Peek_Buffer@WideStringClass@@QBEPB_WXZ	; WideStringClass::Peek_Buffer
	mov	DWORD PTR _lang_string$8[ebp], eax

; 234  : 		if (wchar_t* lang_star = wcsrchr(lang_string, L'*')) *lang_star = L' ';

	push	42					; 0000002aH
	mov	eax, DWORD PTR _lang_string$8[ebp]
	push	eax
	call	?wcsrchr@@YAPA_WPA_W_W@Z		; wcsrchr
	add	esp, 8
	mov	DWORD PTR _lang_star$7[ebp], eax
	cmp	DWORD PTR _lang_star$7[ebp], 0
	je	SHORT $LN5@Validate_D
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _lang_star$7[ebp]
	mov	WORD PTR [ecx], ax
$LN5@Validate_D:

; 235  : 	}
; 236  : 
; 237  : 	if (!Find_Object("IDS_ANTIALIAS_MODE"))

	push	OFFSET ??_C@_0BD@LHFGGPNL@IDS_ANTIALIAS_MODE?$AA@
	call	?Find_Object@TranslateDBClass@@SAPAVTDBObjClass@@PBD@Z ; TranslateDBClass::Find_Object
	add	esp, 4
	test	eax, eax
	jne	$LN2@Validate_D

; 238  : 	{
; 239  : 		TDBObjClass* obj = new TDBObjClass();

	push	OFFSET ??_C@_0CA@JFIDDPLE@TranslateDBClass?3?3Validate_Data?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 31					; 0000001fH
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN23@Validate_D
	xor	edx, edx
	jne	SHORT $LN20@Validate_D
	mov	eax, DWORD PTR ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 31					; 0000001fH
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN20@Validate_D:
	mov	DWORD PTR tv200[ebp], 0
	jmp	SHORT $LN24@Validate_D
$LN23@Validate_D:
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN21@Validate_D
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0TDBObjClass@@QAE@XZ			; TDBObjClass::TDBObjClass
	mov	DWORD PTR tv198[ebp], eax
	jmp	SHORT $LN22@Validate_D
$LN21@Validate_D:
	mov	DWORD PTR tv198[ebp], 0
$LN22@Validate_D:
	mov	edx, DWORD PTR tv198[ebp]
	mov	DWORD PTR tv200[ebp], edx
$LN24@Validate_D:
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR _obj$6[ebp], eax

; 240  : 		obj->Set_ID_Desc("IDS_ANTIALIAS_MODE");

	push	OFFSET ??_C@_0BD@LHFGGPNL@IDS_ANTIALIAS_MODE?$AA@
	mov	eax, DWORD PTR _obj$6[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$6[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 241  : 		obj->Set_English_String("Anti-aliasing Mode:");

	push	OFFSET ??_C@_0BE@EKILDFGH@Anti?9aliasing?5Mode?3?$AA@
	mov	eax, DWORD PTR _obj$6[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$6[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 242  : 		obj->Set_String(TranslateDBClass::Get_Current_Language(), L"Anti-aliasing Mode:");

	push	OFFSET ??_C@_1CI@INFFHLPF@?$AAA?$AAn?$AAt?$AAi?$AA?9?$AAa?$AAl?$AAi?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?3?$AA?$AA@
	call	?Get_Current_Language@TranslateDBClass@@SAIXZ ; TranslateDBClass::Get_Current_Language
	push	eax
	mov	eax, DWORD PTR _obj$6[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$6[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax

; 243  : 		Add_Object(obj);

	mov	eax, DWORD PTR _obj$6[ebp]
	push	eax
	call	?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z ; TranslateDBClass::Add_Object
	add	esp, 4
$LN2@Validate_D:

; 244  : 	}
; 245  : 	if (!Find_Object("IDS_STRUCT_GUARD_TOWER"))

	push	OFFSET ??_C@_0BH@JAFOKEPM@IDS_STRUCT_GUARD_TOWER?$AA@
	call	?Find_Object@TranslateDBClass@@SAPAVTDBObjClass@@PBD@Z ; TranslateDBClass::Find_Object
	add	esp, 4
	test	eax, eax
	jne	$LN8@Validate_D

; 246  : 	{
; 247  : 		TDBObjClass* obj = new TDBObjClass();

	push	OFFSET ??_C@_0CA@JFIDDPLE@TranslateDBClass?3?3Validate_Data?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 39					; 00000027H
	push	eax
	push	OFFSET ??_C@_0DO@OBPEFKBF@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN28@Validate_D
	xor	edx, edx
	jne	SHORT $LN25@Validate_D
	mov	eax, DWORD PTR ?__LINE__Var@?1??Validate_Data@TranslateDBClass@@KAXXZ@4JA@fac20d4b
	add	eax, 39					; 00000027H
	push	eax
	push	OFFSET ??_C@_1HM@KBIKNIBB@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN25@Validate_D:
	mov	DWORD PTR tv236[ebp], 0
	jmp	SHORT $LN29@Validate_D
$LN28@Validate_D:
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN26@Validate_D
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0TDBObjClass@@QAE@XZ			; TDBObjClass::TDBObjClass
	mov	DWORD PTR tv234[ebp], eax
	jmp	SHORT $LN27@Validate_D
$LN26@Validate_D:
	mov	DWORD PTR tv234[ebp], 0
$LN27@Validate_D:
	mov	edx, DWORD PTR tv234[ebp]
	mov	DWORD PTR tv236[ebp], edx
$LN29@Validate_D:
	mov	eax, DWORD PTR tv236[ebp]
	mov	DWORD PTR _obj$5[ebp], eax

; 248  : 		obj->Set_ID_Desc("IDS_STRUCT_GUARD_TOWER");

	push	OFFSET ??_C@_0BH@JAFOKEPM@IDS_STRUCT_GUARD_TOWER?$AA@
	mov	eax, DWORD PTR _obj$5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$5[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 249  : 		obj->Set_English_String("Guard Tower");

	push	OFFSET ??_C@_0M@BNEIKKHJ@Guard?5Tower?$AA@
	mov	eax, DWORD PTR _obj$5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$5[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 250  : 		obj->Set_String(TranslateDBClass::Get_Current_Language(), L"Guard Tower");

	push	OFFSET ??_C@_1BI@GNJFCJCJ@?$AAG?$AAu?$AAa?$AAr?$AAd?$AA?5?$AAT?$AAo?$AAw?$AAe?$AAr?$AA?$AA@
	call	?Get_Current_Language@TranslateDBClass@@SAIXZ ; TranslateDBClass::Get_Current_Language
	push	eax
	mov	eax, DWORD PTR _obj$5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$5[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax

; 251  : 		Add_Object(obj);

	mov	eax, DWORD PTR _obj$5[ebp]
	push	eax
	call	?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z ; TranslateDBClass::Add_Object
	add	esp, 4
$LN8@Validate_D:

; 252  : 	}
; 253  : #endif
; 254  : 
; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Validate_Data@TranslateDBClass@@KAXXZ ENDP		; TranslateDBClass::Validate_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Load_Categories@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z
_TEXT	SEGMENT
_obj$1 = -12						; size = 4
_factory$2 = -8						; size = 4
_this$ = -4						; size = 4
_cload$ = 8						; size = 4
?Load_Categories@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z PROC ; TranslateDBClass::Load_Categories, COMDAT
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Load_Categ:

; 156  : 	while (cload.Open_Chunk())

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Open_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Open_Chunk
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Load_Categ

; 157  : 	{
; 158  : 		PersistFactoryClass *factory = SaveLoadSystemClass::Find_Persist_Factory(cload.Cur_Chunk_ID());

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ	; ChunkLoadClass::Cur_Chunk_ID
	push	eax
	call	?Find_Persist_Factory@SaveLoadSystemClass@@SAPAVPersistFactoryClass@@I@Z ; SaveLoadSystemClass::Find_Persist_Factory
	add	esp, 4
	mov	DWORD PTR _factory$2[ebp], eax

; 159  : 		if (factory)

	cmp	DWORD PTR _factory$2[ebp], 0
	je	SHORT $LN2@Load_Categ

; 160  : 		{
; 161  : 			TDBCategoryClass *obj = (TDBCategoryClass *)factory->Load(cload);

	mov	eax, DWORD PTR _cload$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _factory$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR _obj$1[ebp], eax

; 162  : 			if (obj)

	cmp	DWORD PTR _obj$1[ebp], 0
	je	SHORT $LN2@Load_Categ

; 163  : 			{
; 164  : 				Add_Category(obj);

	push	1
	mov	eax, DWORD PTR _obj$1[ebp]
	push	eax
	call	?Add_Category@TranslateDBClass@@SA_NPAVTDBCategoryClass@@_N@Z ; TranslateDBClass::Add_Category
	add	esp, 8
$LN2@Load_Categ:

; 165  : 			}
; 166  : 		}
; 167  : 		cload.Close_Chunk();

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Close_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Close_Chunk

; 168  : 	}

	jmp	SHORT $LN4@Load_Categ
$LN3@Load_Categ:

; 169  : 	return true;

	mov	al, 1

; 170  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load_Categories@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ENDP ; TranslateDBClass::Load_Categories
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Load_Objects@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z
_TEXT	SEGMENT
_obj$1 = -12						; size = 4
_factory$2 = -8						; size = 4
_this$ = -4						; size = 4
_cload$ = 8						; size = 4
?Load_Objects@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z PROC ; TranslateDBClass::Load_Objects, COMDAT
; _this$ = ecx

; 173  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Load_Objec:

; 174  : 	while (cload.Open_Chunk())

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Open_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Open_Chunk
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Load_Objec

; 175  : 	{
; 176  : 		PersistFactoryClass *factory = SaveLoadSystemClass::Find_Persist_Factory(cload.Cur_Chunk_ID());

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ	; ChunkLoadClass::Cur_Chunk_ID
	push	eax
	call	?Find_Persist_Factory@SaveLoadSystemClass@@SAPAVPersistFactoryClass@@I@Z ; SaveLoadSystemClass::Find_Persist_Factory
	add	esp, 4
	mov	DWORD PTR _factory$2[ebp], eax

; 177  : 		if (factory)

	cmp	DWORD PTR _factory$2[ebp], 0
	je	SHORT $LN2@Load_Objec

; 178  : 		{
; 179  : 			TDBObjClass *obj = (TDBObjClass *)factory->Load(cload);

	mov	eax, DWORD PTR _cload$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _factory$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR _obj$1[ebp], eax

; 180  : 			if (obj)

	cmp	DWORD PTR _obj$1[ebp], 0
	je	SHORT $LN2@Load_Objec

; 181  : 			{
; 182  : 				Add_Object(obj);

	mov	eax, DWORD PTR _obj$1[ebp]
	push	eax
	call	?Add_Object@TranslateDBClass@@SA_NPAVTDBObjClass@@@Z ; TranslateDBClass::Add_Object
	add	esp, 4
$LN2@Load_Objec:

; 183  : 			}
; 184  : 		}
; 185  : 		cload.Close_Chunk();

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Close_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Close_Chunk

; 186  : 	}

	jmp	SHORT $LN4@Load_Objec
$LN3@Load_Objec:

; 187  : 	return true;

	mov	al, 1

; 188  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load_Objects@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ENDP ; TranslateDBClass::Load_Objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Load_Variables@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_cload$ = 8						; size = 4
?Load_Variables@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z PROC ; TranslateDBClass::Load_Variables, COMDAT
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN7@Load_Varia:

; 192  : 	while (cload.Open_Micro_Chunk ())

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Open_Micro_Chunk@ChunkLoadClass@@QAE_NXZ ; ChunkLoadClass::Open_Micro_Chunk
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@Load_Varia

; 193  : 	{
; 194  : 		switch (cload.Cur_Micro_Chunk_ID ())

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Micro_Chunk_ID@ChunkLoadClass@@QAEKXZ ; ChunkLoadClass::Cur_Micro_Chunk_ID
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 1
	je	SHORT $LN3@Load_Varia
	cmp	DWORD PTR tv70[ebp], 2
	je	SHORT $LN2@Load_Varia
	jmp	SHORT $LN4@Load_Varia
$LN3@Load_Varia:

; 195  : 		{
; 196  : 			READ_MICRO_CHUNK (cload, 1,	m_VersionNumber);

	push	4
	mov	eax, DWORD PTR ?m_VersionNumber@TranslateDBClass@@0AAIA ; TranslateDBClass::m_VersionNumber
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
	jmp	SHORT $LN4@Load_Varia
$LN2@Load_Varia:

; 197  : 			READ_MICRO_CHUNK (cload, 2,	m_LanguageID);

	push	4
	mov	eax, DWORD PTR ?m_LanguageID@TranslateDBClass@@0AAIA ; TranslateDBClass::m_LanguageID
	push	eax
	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Read@ChunkLoadClass@@QAEJPAXK@Z	; ChunkLoadClass::Read
$LN4@Load_Varia:

; 198  : 			default:
; 199  : 				break;
; 200  : 		}
; 201  : 		cload.Close_Micro_Chunk();

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Close_Micro_Chunk@ChunkLoadClass@@QAE_NXZ ; ChunkLoadClass::Close_Micro_Chunk

; 202  : 	}

	jmp	SHORT $LN7@Load_Varia
$LN6@Load_Varia:

; 203  : 	m_VersionNumber = 145;

	mov	eax, DWORD PTR ?m_VersionNumber@TranslateDBClass@@0AAIA ; TranslateDBClass::m_VersionNumber
	mov	DWORD PTR [eax], 145			; 00000091H

; 204  : 	return true;

	mov	al, 1

; 205  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load_Variables@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ENDP ; TranslateDBClass::Load_Variables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Load@TranslateDBClass@@MAE_NAAVChunkLoadClass@@@Z
_TEXT	SEGMENT
tv87 = -76						; size = 4
tv70 = -76						; size = 4
_b2$ = -6						; size = 1
_b$ = -5						; size = 1
_this$ = -4						; size = 4
_cload$ = 8						; size = 4
?Load@TranslateDBClass@@MAE_NAAVChunkLoadClass@@@Z PROC	; TranslateDBClass::Load, COMDAT
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 	bool b = true;

	mov	BYTE PTR _b$[ebp], 1

; 130  : 	bool b2 = true;

	mov	BYTE PTR _b2$[ebp], 1

; 131  : 	Free_Objects();

	call	?Free_Objects@TranslateDBClass@@KAXXZ	; TranslateDBClass::Free_Objects

; 132  : 	Free_Categories();

	call	?Free_Categories@TranslateDBClass@@KAXXZ ; TranslateDBClass::Free_Categories
$LN7@Load:

; 133  : 	while (cload.Open_Chunk())

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Open_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Open_Chunk
	movzx	eax, al
	test	eax, eax
	je	$LN6@Load

; 134  : 	{
; 135  : 		switch(cload.Cur_Chunk_ID()) 

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Cur_Chunk_ID@ChunkLoadClass@@QAEKXZ	; ChunkLoadClass::Cur_Chunk_ID
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 118755840		; 07141200H
	je	SHORT $LN1@Load
	cmp	DWORD PTR tv70[ebp], 118755841		; 07141201H
	je	SHORT $LN3@Load
	cmp	DWORD PTR tv70[ebp], 118755842		; 07141202H
	je	SHORT $LN2@Load
	jmp	SHORT $LN4@Load
$LN3@Load:

; 136  : 		{
; 137  : 			case 0x7141201:
; 138  : 				b2 = Load_Objects(cload);

	mov	eax, DWORD PTR _cload$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load_Objects@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ; TranslateDBClass::Load_Objects
	mov	BYTE PTR _b2$[ebp], al

; 139  : 				break;

	jmp	SHORT $LN4@Load
$LN2@Load:

; 140  : 			case 0x7141202:
; 141  : 				b2 = Load_Categories(cload);

	mov	eax, DWORD PTR _cload$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load_Categories@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ; TranslateDBClass::Load_Categories
	mov	BYTE PTR _b2$[ebp], al

; 142  : 				break;

	jmp	SHORT $LN4@Load
$LN1@Load:

; 143  : 			case 0x7141200:
; 144  : 				b2 = Load_Variables(cload);

	mov	eax, DWORD PTR _cload$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Load_Variables@TranslateDBClass@@IAE_NAAVChunkLoadClass@@@Z ; TranslateDBClass::Load_Variables
	mov	BYTE PTR _b2$[ebp], al
$LN4@Load:

; 145  : 				break;
; 146  : 		}
; 147  : 		b = (b2 & b) != 0;

	movzx	eax, BYTE PTR _b2$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	je	SHORT $LN10@Load
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN11@Load
$LN10@Load:
	mov	DWORD PTR tv87[ebp], 0
$LN11@Load:
	mov	dl, BYTE PTR tv87[ebp]
	mov	BYTE PTR _b$[ebp], dl

; 148  : 		cload.Close_Chunk();

	mov	ecx, DWORD PTR _cload$[ebp]
	call	?Close_Chunk@ChunkLoadClass@@QAE_NXZ	; ChunkLoadClass::Close_Chunk

; 149  : 	}

	jmp	$LN7@Load
$LN6@Load:

; 150  : 	Validate_Data();

	call	?Validate_Data@TranslateDBClass@@KAXXZ	; TranslateDBClass::Validate_Data

; 151  : 	return b;

	mov	al, BYTE PTR _b$[ebp]

; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load@TranslateDBClass@@MAE_NAAVChunkLoadClass@@@Z ENDP	; TranslateDBClass::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Save@TranslateDBClass@@MAE_NAAVChunkSaveClass@@@Z
_TEXT	SEGMENT
tv212 = -92						; size = 4
tv199 = -92						; size = 4
tv179 = -92						; size = 4
tv149 = -92						; size = 4
tv136 = -92						; size = 4
_b$1 = -21						; size = 1
_obj$2 = -20						; size = 4
_i$3 = -16						; size = 4
_cat$4 = -12						; size = 4
_i$5 = -8						; size = 4
_this$ = -4						; size = 4
_csave$ = 8						; size = 4
?Save@TranslateDBClass@@MAE_NAAVChunkSaveClass@@@Z PROC	; TranslateDBClass::Save, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	csave.Begin_Chunk(0x7141200);

	push	118755840				; 07141200H
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 93   : 	WRITE_MICRO_CHUNK(csave,1,m_VersionNumber);

	push	1
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z ; ChunkSaveClass::Begin_Micro_Chunk
	push	4
	mov	eax, DWORD PTR ?m_VersionNumber@TranslateDBClass@@0AAIA ; TranslateDBClass::m_VersionNumber
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ ; ChunkSaveClass::End_Micro_Chunk

; 94   : 	WRITE_MICRO_CHUNK(csave,2,m_LanguageID);

	push	2
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Micro_Chunk@ChunkSaveClass@@QAE_NK@Z ; ChunkSaveClass::Begin_Micro_Chunk
	push	4
	mov	eax, DWORD PTR ?m_LanguageID@TranslateDBClass@@0AAIA ; TranslateDBClass::m_LanguageID
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Write@ChunkSaveClass@@QAEKPAXK@Z	; ChunkSaveClass::Write
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Micro_Chunk@ChunkSaveClass@@QAE_NXZ ; ChunkSaveClass::End_Micro_Chunk

; 95   : 	csave.End_Chunk();

	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 96   : 	csave.Begin_Chunk(0x7141202);

	push	118755842				; 07141202H
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 97   : 	for (int i = 0;i < m_CategoryList.Count();i++)

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN11@Save
$LN10@Save:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN11@Save:
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	?Count@?$DynamicVectorClass@PAVTDBCategoryClass@@@@QBEHXZ ; DynamicVectorClass<TDBCategoryClass *>::Count
	cmp	DWORD PTR _i$5[ebp], eax
	jge	SHORT $LN9@Save

; 98   : 	{
; 99   : 		TDBCategoryClass *cat = m_CategoryList[i];

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_CategoryList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBCategoryClass@@@@A ; TranslateDBClass::m_CategoryList
	call	??A?$VectorClass@PAVTDBCategoryClass@@@@QAEAAPAVTDBCategoryClass@@H@Z ; VectorClass<TDBCategoryClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cat$4[ebp], ecx

; 100  : 		if (cat)

	cmp	DWORD PTR _cat$4[ebp], 0
	je	SHORT $LN8@Save

; 101  : 		{
; 102  : 			csave.Begin_Chunk(cat->Get_Factory().Chunk_ID());

	mov	eax, DWORD PTR _cat$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cat$4[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR tv136[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv136[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 103  : 			cat->Get_Factory().Save(csave,cat);

	mov	eax, DWORD PTR _cat$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cat$4[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR _cat$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _csave$[ebp]
	push	edx
	mov	eax, DWORD PTR tv149[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv149[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 104  : 			csave.End_Chunk();

	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk
$LN8@Save:

; 105  : 		}
; 106  : 	}

	jmp	$LN10@Save
$LN9@Save:

; 107  : 	csave.End_Chunk();

	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 108  : 	csave.Begin_Chunk(0x7141201);

	push	118755841				; 07141201H
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 109  : 	for (int i = 0;i < m_ObjectList.Count();i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN7@Save
$LN6@Save:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@Save:
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	?Count@?$DynamicVectorClass@PAVTDBObjClass@@@@QBEHXZ ; DynamicVectorClass<TDBObjClass *>::Count
	cmp	DWORD PTR _i$3[ebp], eax
	jge	$LN5@Save

; 110  : 	{
; 111  : 		TDBObjClass *obj = m_ObjectList[i];

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_ObjectList@TranslateDBClass@@0AAV?$DynamicVectorClass@PAVTDBObjClass@@@@A ; TranslateDBClass::m_ObjectList
	call	??A?$VectorClass@PAVTDBObjClass@@@@QAEAAPAVTDBObjClass@@H@Z ; VectorClass<TDBObjClass *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _obj$2[ebp], ecx

; 112  : 		if (obj)

	cmp	DWORD PTR _obj$2[ebp], 0
	je	$LN4@Save

; 113  : 		{
; 114  : 			bool b = (obj->Get_Category_ID() == FilterCategoryID);

	mov	eax, DWORD PTR _obj$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	mov	ecx, DWORD PTR ?FilterCategoryID@TranslateDBClass@@0AAIA ; TranslateDBClass::FilterCategoryID
	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN14@Save
	mov	DWORD PTR tv179[ebp], 1
	jmp	SHORT $LN15@Save
$LN14@Save:
	mov	DWORD PTR tv179[ebp], 0
$LN15@Save:
	mov	dl, BYTE PTR tv179[ebp]
	mov	BYTE PTR _b$1[ebp], dl

; 115  : 			if ((FilterType == FILTER_DISABLED) || ((FilterType == FILTER_IF_EQUAL) && !b) || ((FilterType == FILTER_IF_NOT_EQUAL) && b))

	mov	eax, DWORD PTR ?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A ; TranslateDBClass::FilterType
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Save
	mov	eax, DWORD PTR ?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A ; TranslateDBClass::FilterType
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN1@Save
	movzx	eax, BYTE PTR _b$1[ebp]
	test	eax, eax
	je	SHORT $LN2@Save
$LN1@Save:
	mov	eax, DWORD PTR ?FilterType@TranslateDBClass@@0AAW4FILTER_OPT@1@A ; TranslateDBClass::FilterType
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN4@Save
	movzx	eax, BYTE PTR _b$1[ebp]
	test	eax, eax
	je	SHORT $LN4@Save
$LN2@Save:

; 116  : 			{
; 117  : 				csave.Begin_Chunk(obj->Get_Factory().Chunk_ID());

	mov	eax, DWORD PTR _obj$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR tv199[ebp], eax
	mov	ecx, DWORD PTR tv199[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv199[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _csave$[ebp]
	call	?Begin_Chunk@ChunkSaveClass@@QAE_NK@Z	; ChunkSaveClass::Begin_Chunk

; 118  : 				obj->Get_Factory().Save(csave,obj);

	mov	eax, DWORD PTR _obj$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _obj$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR tv212[ebp], eax
	mov	ecx, DWORD PTR _obj$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _csave$[ebp]
	push	edx
	mov	eax, DWORD PTR tv212[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv212[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 119  : 				csave.End_Chunk();

	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk
$LN4@Save:

; 120  : 			}
; 121  : 		}
; 122  : 	}

	jmp	$LN6@Save
$LN5@Save:

; 123  : 	csave.End_Chunk();

	mov	ecx, DWORD PTR _csave$[ebp]
	call	?End_Chunk@ChunkSaveClass@@QAE_NXZ	; ChunkSaveClass::End_Chunk

; 124  : 	return true;

	mov	al, 1

; 125  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Save@TranslateDBClass@@MAE_NAAVChunkSaveClass@@@Z ENDP	; TranslateDBClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\translatedbclass.cpp
;	COMDAT ?Contains_Data@TranslateDBClass@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Contains_Data@TranslateDBClass@@MBE_NXZ PROC		; TranslateDBClass::Contains_Data, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	return true;

	mov	al, 1

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Contains_Data@TranslateDBClass@@MBE_NXZ ENDP		; TranslateDBClass::Contains_Data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_math.h
;	COMDAT ?isPowerOfTwo@@YA_NH@Z
_TEXT	SEGMENT
tv68 = -68						; size = 4
_number$ = 8						; size = 4
?isPowerOfTwo@@YA_NH@Z PROC				; isPowerOfTwo, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 69   : 	return number != 0 && ((number - 1) & number) == 0;

	cmp	DWORD PTR _number$[ebp], 0
	je	SHORT $LN3@isPowerOfT
	mov	eax, DWORD PTR _number$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _number$[ebp]
	jne	SHORT $LN3@isPowerOfT
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@isPowerOfT
$LN3@isPowerOfT:
	mov	DWORD PTR tv68[ebp], 0
$LN4@isPowerOfT:
	mov	al, BYTE PTR tv68[ebp]

; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isPowerOfTwo@@YA_NH@Z ENDP				; isPowerOfTwo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbcategoryclass.h
;	COMDAT ?Set_ID@TDBCategoryClass@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?Set_ID@TDBCategoryClass@@QAEXI@Z PROC			; TDBCategoryClass::Set_ID, COMDAT
; _this$ = ecx

; 33   : 	void								Set_ID (uint32 id)				{ ID = id; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+12], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_ID@TDBCategoryClass@@QAEXI@Z ENDP			; TDBCategoryClass::Set_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbcategoryclass.h
;	COMDAT ?Get_ID@TDBCategoryClass@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_ID@TDBCategoryClass@@QBEIXZ PROC			; TDBCategoryClass::Get_ID, COMDAT
; _this$ = ecx

; 32   : 	uint32							Get_ID (void) const				{ return ID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_ID@TDBCategoryClass@@QBEIXZ ENDP			; TDBCategoryClass::Get_ID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbcategoryclass.h
;	COMDAT ?Set_Name@TDBCategoryClass@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?Set_Name@TDBCategoryClass@@QAEXPBD@Z PROC		; TDBCategoryClass::Set_Name, COMDAT
; _this$ = ecx

; 31   : 	void								Set_Name (const char *name)	{ Name = name; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Name@TDBCategoryClass@@QAEXPBD@Z ENDP		; TDBCategoryClass::Set_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\tdbcategoryclass.h
;	COMDAT ?Get_Name@TDBCategoryClass@@QBEABVStringClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Name@TDBCategoryClass@@QBEABVStringClass@@XZ PROC	; TDBCategoryClass::Get_Name, COMDAT
; _this$ = ecx

; 30   : 	const StringClass &			Get_Name (void) const			{ return Name; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Name@TDBCategoryClass@@QBEABVStringClass@@XZ ENDP	; TDBCategoryClass::Get_Name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GFileClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileClass@@UAEPAXI@Z PROC				; FileClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileClass@@UAE@XZ			; FileClass::~FileClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileClass@@UAEPAXI@Z ENDP				; FileClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0FileClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FileClass@@QAE@XZ PROC				; FileClass::FileClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileClass@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FileClass@@QAE@XZ ENDP				; FileClass::FileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_File_Handle@FileClass@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_File_Handle@FileClass@@UAEPAXXZ PROC		; FileClass::Get_File_Handle, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return (HANDLE)-1;

	or	eax, -1

; 52   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_File_Handle@FileClass@@UAEPAXXZ ENDP		; FileClass::Get_File_Handle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Set_Date_Time@FileClass@@UAE_NK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 4
?Set_Date_Time@FileClass@@UAE_NK@Z PROC			; FileClass::Set_Date_Time, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return false;

	xor	al, al

; 47   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_Date_Time@FileClass@@UAE_NK@Z ENDP			; FileClass::Set_Date_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Get_Date_Time@FileClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Date_Time@FileClass@@UAEKXZ PROC			; FileClass::Get_Date_Time, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 		return 0;

	xor	eax, eax

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Date_Time@FileClass@@UAEKXZ ENDP			; FileClass::Get_Date_Time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ?Tell@FileClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Tell@FileClass@@UAEHXZ PROC				; FileClass::Tell, COMDAT
; _this$ = ecx

; 34   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return Seek(0,1);

	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 36   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Tell@FileClass@@UAEHXZ ENDP				; FileClass::Tell
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_io.h
;	COMDAT ??1FileClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FileClass@@UAE@XZ PROC				; FileClass::~FileClass, COMDAT
; _this$ = ecx

; 21   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FileClass@@6B@

; 22   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1FileClass@@UAE@XZ ENDP				; FileClass::~FileClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EWideStringClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EWideStringClass@@QAEPAXI@Z PROC			; WideStringClass::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1WideStringClass@@QAE@XZ	; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_I@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EWideStringClass@@QAEPAXI@Z ENDP			; WideStringClass::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@WideStringClass@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@WideStringClass@@QBEPB_WXZ PROC		; WideStringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 951  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 952  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 953  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@WideStringClass@@QBEPB_WXZ ENDP		; WideStringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BWideStringClass@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BWideStringClass@@QBEPB_WXZ PROC			; WideStringClass::operator wchar_t const *, COMDAT
; _this$ = ecx

; 816  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 817  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 818  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BWideStringClass@@QBEPB_WXZ ENDP			; WideStringClass::operator wchar_t const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1WideStringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WideStringClass@@QAE@XZ PROC				; WideStringClass::~WideStringClass, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@WideStringClass@@AAEXXZ	; WideStringClass::Free_String

; 780  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1WideStringClass@@QAE@XZ ENDP				; WideStringClass::~WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0WideStringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0WideStringClass@@QAE@H_N@Z PROC			; WideStringClass::WideStringClass, COMDAT
; _this$ = ecx

; 737  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 738  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@WideStringClass@@AAEXH_N@Z	; WideStringClass::Get_String

; 739  : 	m_Buffer[0] = m_NullChar;

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?m_NullChar@WideStringClass@@0AA_WA ; WideStringClass::m_NullChar
	mov	cx, WORD PTR [ecx]
	mov	WORD PTR [eax+edx], cx

; 740  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0WideStringClass@@QAE@H_N@Z ENDP			; WideStringClass::WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?GetHash@StringClass@@QBEIXZ
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_hash$2 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?GetHash@StringClass@@QBEIXZ PROC			; StringClass::GetHash, COMDAT
; _this$ = ecx

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		int length = Get_Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _length$[ebp], eax

; 176  : 		if (length >= 8)

	cmp	DWORD PTR _length$[ebp], 8
	jl	SHORT $LN5@GetHash

; 177  : 			return HashTemplateKeyClass<uint>::Get_Hash_Value((uint&)m_Buffer[length - 8]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [ecx+edx-8]
	push	eax
	call	?Get_Hash_Value@?$HashTemplateKeyClass@I@@SAIABI@Z ; HashTemplateKeyClass<unsigned int>::Get_Hash_Value
	add	esp, 4
	jmp	SHORT $LN6@GetHash

; 178  : 		else

	jmp	SHORT $LN6@GetHash
$LN5@GetHash:

; 179  : 		{
; 180  : 			uint hash = 0;

	mov	DWORD PTR _hash$2[ebp], 0

; 181  : 			for (int i = 0; i < length; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@GetHash
$LN2@GetHash:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@GetHash:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN1@GetHash

; 182  : 				hash += m_Buffer[i] + hash * 37;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _hash$2[ebp]
	imul	ecx, 37					; 00000025H
	add	ecx, DWORD PTR _hash$2[ebp]
	add	ecx, eax
	mov	DWORD PTR _hash$2[ebp], ecx
	jmp	SHORT $LN2@GetHash
$LN1@GetHash:

; 183  : 			return hash;

	mov	eax, DWORD PTR _hash$2[ebp]
$LN6@GetHash:

; 184  : 		}
; 185  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHash@StringClass@@QBEIXZ ENDP			; StringClass::GetHash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@StringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@StringClass@@QBEPBDXZ PROC			; StringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 480  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 481  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 482  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@StringClass@@QBEPBDXZ ENDP			; StringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Peek_Buffer@StringClass@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Peek_Buffer@StringClass@@QAEPADXZ PROC			; StringClass::Peek_Buffer, COMDAT
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 477  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek_Buffer@StringClass@@QAEPADXZ ENDP			; StringClass::Peek_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Is_Empty@StringClass@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@StringClass@@QBE_NXZ PROC			; StringClass::Is_Empty, COMDAT
; _this$ = ecx

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 372  : 	return (m_Buffer[0] == m_NullChar);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+eax]
	mov	ecx, DWORD PTR ?m_NullChar@StringClass@@0AADA ; StringClass::m_NullChar
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv70[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv70[ebp]

; 373  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@StringClass@@QBE_NXZ ENDP			; StringClass::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv73 = -92						; size = 4
tv90 = -85						; size = 1
tv87 = -84						; size = 4
tv84 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 1
	mov	DWORD PTR tv87[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv84[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv90[ebp], cl
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv84[ebp]
	sub	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Compare@StringClass@@QBEHPBD@Z
_TEXT	SEGMENT
tv68 = -88						; size = 4
tv88 = -84						; size = 4
tv83 = -78						; size = 1
tv76 = -77						; size = 1
tv70 = -76						; size = 4
tv72 = -72						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?Compare@StringClass@@QBEHPBD@Z PROC			; StringClass::Compare, COMDAT
; _this$ = ecx

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 	return strcmp (m_Buffer, string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv70[ebp], edx
$LL3@Compare:
	mov	eax, DWORD PTR tv70[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv76[ebp], cl
	mov	edx, DWORD PTR tv72[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN4@Compare
	cmp	BYTE PTR tv76[ebp], 0
	je	SHORT $LN5@Compare
	mov	eax, DWORD PTR tv70[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv83[ebp], cl
	mov	edx, DWORD PTR tv72[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN4@Compare
	add	DWORD PTR tv70[ebp], 2
	add	DWORD PTR tv72[ebp], 2
	cmp	BYTE PTR tv83[ebp], 0
	jne	SHORT $LL3@Compare
$LN5@Compare:
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN6@Compare
$LN4@Compare:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv88[ebp], eax
$LN6@Compare:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	eax, DWORD PTR tv68[ebp]

; 378  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@StringClass@@QBEHPBD@Z ENDP			; StringClass::Compare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BStringClass@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BStringClass@@QBEPBDXZ PROC				; StringClass::operator char const *, COMDAT
; _this$ = ecx

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 397  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BStringClass@@QBEPBDXZ ENDP				; StringClass::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@ABV0@@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 279  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	int len = string.Get_Length();

	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	mov	DWORD PTR _len$[ebp], eax

; 281  : 	Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@StringClass@@AAEXH@Z ; StringClass::Uninitialised_Grow

; 282  : 	Store_Length(len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 283  : 	memcpy (m_Buffer, string.m_Buffer, (len+1) * sizeof (char));		

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 284  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@ABV0@@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@StringClass@@AAEXH@Z ; StringClass::Uninitialised_Grow

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??8StringClass@@QBE_NPBD@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
_rvalue$ = 8						; size = 4
??8StringClass@@QBE_NPBD@Z PROC				; StringClass::operator==, COMDAT
; _this$ = ecx

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (Compare (rvalue) == 0);

	mov	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Compare@StringClass@@QBEHPBD@Z		; StringClass::Compare
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]

; 403  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8StringClass@@QBE_NPBD@Z ENDP				; StringClass::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1StringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringClass@@QAE@XZ PROC				; StringClass::~StringClass, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@StringClass@@AAEXXZ	; StringClass::Free_String

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StringClass@@QAE@XZ ENDP				; StringClass::~StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@PBD_N@Z
_TEXT	SEGMENT
tv69 = -92						; size = 4
tv67 = -88						; size = 4
tv89 = -81						; size = 1
tv86 = -80						; size = 4
tv83 = -76						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@PBD_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 347  : 	int len=string ? (int)strlen(string) : 0;

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN5@StringClas
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	add	ecx, 1
	mov	DWORD PTR tv86[ebp], ecx
$LL7@StringClas:
	mov	edx, DWORD PTR tv83[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv89[ebp], al
	add	DWORD PTR tv83[ebp], 1
	cmp	BYTE PTR tv89[ebp], 0
	jne	SHORT $LL7@StringClas
	mov	ecx, DWORD PTR tv83[ebp]
	sub	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN6@StringClas
$LN5@StringClas:
	mov	DWORD PTR tv69[ebp], 0
$LN6@StringClas:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 348  : 	if (hint_temporary || len>0)

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 349  : 	{
; 350  : 		Get_String (len+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@StringClass@@AAEXH_N@Z	; StringClass::Get_String
$LN2@StringClas:

; 351  : 	}
; 352  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 353  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@PBD_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@ABV0@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@ABV0@_N@Z PROC			; StringClass::StringClass, COMDAT
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 338  : 	if (hint_temporary || (string.Get_Length()>0))

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringClas
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	test	eax, eax
	jle	SHORT $LN2@StringClas
$LN1@StringClas:

; 339  : 	{
; 340  : 		Get_String (string.Get_Length()+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@StringClass@@AAEXH_N@Z	; StringClass::Get_String
$LN2@StringClas:

; 341  : 	}
; 342  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@ABV0@@Z		; StringClass::operator=

; 343  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@ABV0@_N@Z ENDP			; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0StringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0StringClass@@QAE@H_N@Z PROC				; StringClass::StringClass, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 326  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@StringClass@@AAEXH_N@Z	; StringClass::Get_String

; 327  : 	m_Buffer[0]	= m_NullChar;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?m_NullChar@StringClass@@0AADA ; StringClass::m_NullChar
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+edx], cl

; 328  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringClass@@QAE@H_N@Z ENDP				; StringClass::StringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\postloadableclass.h
;	COMDAT ?On_Post_Load@PostLoadableClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?On_Post_Load@PostLoadableClass@@UAEXXZ PROC		; PostLoadableClass::On_Post_Load, COMDAT
; _this$ = ecx

; 20   : 	virtual void						On_Post_Load (void)							{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?On_Post_Load@PostLoadableClass@@UAEXXZ ENDP		; PostLoadableClass::On_Post_Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strrchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADPADH@Z PROC				; strrchr, COMDAT

; 222  : 	{ return (char*)strrchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?strrchr@@YAPADPADH@Z ENDP				; strrchr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h
;	COMDAT ?wcsrchr@@YAPA_WPA_W_W@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 2
?wcsrchr@@YAPA_WPA_W_W@Z PROC				; wcsrchr, COMDAT

; 1114 :         {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcsrchr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?wcsrchr@@YAPA_WPA_W_W@Z ENDP				; wcsrchr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h
;	COMDAT ?wcschr@@YAPA_WPA_W_W@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 2
?wcschr@@YAPA_WPA_W_W@Z PROC				; wcschr, COMDAT

; 1110 :         {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcschr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?wcschr@@YAPA_WPA_W_W@Z ENDP				; wcschr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIHP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___s$[ebp]
	imul	eax, DWORD PTR ___n$[ebp]
	add	eax, DWORD PTR ___t$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	eax, DWORD PTR ___t$[ebp]
	sub	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
