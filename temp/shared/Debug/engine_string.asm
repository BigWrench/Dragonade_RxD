; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\engine_string.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?TempStrings@WideStringClass@@0PAY0CAI@DA	; WideStringClass::TempStrings
PUBLIC	?FreeTempStrings@WideStringClass@@0IA		; WideStringClass::FreeTempStrings
PUBLIC	?TempStrings@StringClass@@0PAY0BAA@DA		; StringClass::TempStrings
PUBLIC	?FreeTempStrings@StringClass@@0IA		; StringClass::FreeTempStrings
_TLS	SEGMENT
?FreeTempStrings@StringClass@@0IA DD 0ffH		; StringClass::FreeTempStrings
?FreeTempStrings@WideStringClass@@0IA DD 0fH		; WideStringClass::FreeTempStrings
?TempStrings@StringClass@@0PAY0BAA@DA	ORG $+2048	; StringClass::TempStrings
?TempStrings@WideStringClass@@0PAY0CAI@DA	ORG $+2080	; WideStringClass::TempStrings
_TLS	ENDS
PUBLIC	??4StringClass@@QAEABV0@PBD@Z			; StringClass::operator=
PUBLIC	?Get_Length@StringClass@@QBEHXZ			; StringClass::Get_Length
PUBLIC	?Format@StringClass@@QAAHPBDZZ			; StringClass::Format
PUBLIC	?Format_Args@StringClass@@QAAHPBDABQAD@Z	; StringClass::Format_Args
PUBLIC	?Copy_Wide@StringClass@@QAE_NPB_W@Z		; StringClass::Copy_Wide
PUBLIC	?Release_Resources@StringClass@@SAXXZ		; StringClass::Release_Resources
PUBLIC	?Replace@StringClass@@QAEHPBD0_NH@Z		; StringClass::Replace
PUBLIC	?Get_String@StringClass@@AAEXH_N@Z		; StringClass::Get_String
PUBLIC	?Allocate_Buffer@StringClass@@AAEPADH@Z		; StringClass::Allocate_Buffer
PUBLIC	?Resize@StringClass@@AAEXH@Z			; StringClass::Resize
PUBLIC	?Uninitialised_Grow@StringClass@@AAEXH@Z	; StringClass::Uninitialised_Grow
PUBLIC	?Free_String@StringClass@@AAEXXZ		; StringClass::Free_String
PUBLIC	?Store_Length@StringClass@@AAEXH@Z		; StringClass::Store_Length
PUBLIC	?Store_Allocated_Length@StringClass@@AAEXH@Z	; StringClass::Store_Allocated_Length
PUBLIC	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ	; StringClass::Get_Header
PUBLIC	?Get_Allocated_Length@StringClass@@ABEHXZ	; StringClass::Get_Allocated_Length
PUBLIC	?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z ; StringClass::Set_Buffer_And_Allocated_Length
PUBLIC	??0WideStringClass@@QAE@H_N@Z			; WideStringClass::WideStringClass
PUBLIC	??0WideStringClass@@QAE@ABV0@_N@Z		; WideStringClass::WideStringClass
PUBLIC	??1WideStringClass@@QAE@XZ			; WideStringClass::~WideStringClass
PUBLIC	??4WideStringClass@@QAEABV0@ABV0@@Z		; WideStringClass::operator=
PUBLIC	??4WideStringClass@@QAEABV0@PB_W@Z		; WideStringClass::operator=
PUBLIC	??BWideStringClass@@QBEPB_WXZ			; WideStringClass::operator wchar_t const *
PUBLIC	?Get_Length@WideStringClass@@QBEHXZ		; WideStringClass::Get_Length
PUBLIC	?Format@WideStringClass@@QAAHPB_WZZ		; WideStringClass::Format
PUBLIC	?Format_Args@WideStringClass@@QAAHPB_WABQAD@Z	; WideStringClass::Format_Args
PUBLIC	?Convert_From@WideStringClass@@QAE_NPBD@Z	; WideStringClass::Convert_From
PUBLIC	?Is_ANSI@WideStringClass@@QAE_NXZ		; WideStringClass::Is_ANSI
PUBLIC	?Release_Resources@WideStringClass@@SAXXZ	; WideStringClass::Release_Resources
PUBLIC	?Substring@WideStringClass@@QBE?AV1@HH@Z	; WideStringClass::Substring
PUBLIC	?RemoveSubstring@WideStringClass@@QAEXHH@Z	; WideStringClass::RemoveSubstring
PUBLIC	?ReplaceSubstring@WideStringClass@@QAEXHHABV1@@Z ; WideStringClass::ReplaceSubstring
PUBLIC	?Get_String@WideStringClass@@AAEXH_N@Z		; WideStringClass::Get_String
PUBLIC	?Allocate_Buffer@WideStringClass@@AAEPA_WH@Z	; WideStringClass::Allocate_Buffer
PUBLIC	?Resize@WideStringClass@@AAEXH@Z		; WideStringClass::Resize
PUBLIC	?Uninitialised_Grow@WideStringClass@@AAEXH@Z	; WideStringClass::Uninitialised_Grow
PUBLIC	?Free_String@WideStringClass@@AAEXXZ		; WideStringClass::Free_String
PUBLIC	?Store_Length@WideStringClass@@AAEXH@Z		; WideStringClass::Store_Length
PUBLIC	?Store_Allocated_Length@WideStringClass@@AAEXH@Z ; WideStringClass::Store_Allocated_Length
PUBLIC	?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ	; WideStringClass::Get_Header
PUBLIC	?Get_Allocated_Length@WideStringClass@@ABEHXZ	; WideStringClass::Get_Allocated_Length
PUBLIC	?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z ; WideStringClass::Set_Buffer_And_Allocated_Length
PUBLIC	?CharToWideChar@@YAPB_WPBD@Z			; CharToWideChar
PUBLIC	?WideCharToChar@@YAPBDPB_W@Z			; WideCharToChar
PUBLIC	?newstr@@YAPADPBD@Z				; newstr
PUBLIC	?newwcs@@YAPA_WPB_W@Z				; newwcs
PUBLIC	?strtrim@@YAPADPAD@Z				; strtrim
PUBLIC	?strrtrim@@YAPADPAD@Z				; strrtrim
PUBLIC	?stristr@@YAPBDPBD0@Z				; stristr
PUBLIC	?wcsistr@@YAPB_WPB_W0@Z				; wcsistr
PUBLIC	??$ResolveGameReference@PAD@@YAAAPADHHH@Z	; ResolveGameReference<char *>
PUBLIC	??$ResolveGameReference@D@@YAAADHHH@Z		; ResolveGameReference<char>
PUBLIC	??$ResolveGameReference@PA_W@@YAAAPA_WHHH@Z	; ResolveGameReference<wchar_t *>
PUBLIC	??$ResolveGameReference@_W@@YAAA_WHHH@Z		; ResolveGameReference<wchar_t>
PUBLIC	?m_EmptyString@StringClass@@0AAPADA		; StringClass::m_EmptyString
PUBLIC	?m_NullChar@StringClass@@0AADA			; StringClass::m_NullChar
PUBLIC	?__LINE__Var@?1??Allocate_Buffer@StringClass@@AAEPADH@Z@4JA ; `StringClass::Allocate_Buffer'::`2'::__LINE__Var
PUBLIC	??_C@_0BN@KPANAABL@StringClass?3?3Allocate_Buffer?$AA@ ; `string'
PUBLIC	??_C@_0DJ@EFHDACI@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@IKKBAMML@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	?m_EmptyString@WideStringClass@@0AAPA_WA	; WideStringClass::m_EmptyString
PUBLIC	?m_NullChar@WideStringClass@@0AA_WA		; WideStringClass::m_NullChar
PUBLIC	?__LINE__Var@?1??Allocate_Buffer@WideStringClass@@AAEPA_WH@Z@4JA ; `WideStringClass::Allocate_Buffer'::`2'::__LINE__Var
PUBLIC	??_C@_0CB@MBFDNJL@WideStringClass?3?3Allocate_Buffer@ ; `string'
PUBLIC	?__LINE__Var@?1??Free_String@StringClass@@AAEXXZ@4JA ; `StringClass::Free_String'::`2'::__LINE__Var
PUBLIC	??_C@_0BJ@MIFLMFEP@StringClass?3?3Free_String?$AA@ ; `string'
PUBLIC	??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA ; `StringClass::Replace'::`2'::__LINE__Var
PUBLIC	??_C@_0BF@IPJLDOC@StringClass?3?3Replace?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Free_String@WideStringClass@@AAEXXZ@4JA ; `WideStringClass::Free_String'::`2'::__LINE__Var
PUBLIC	??_C@_0BN@IGIIDELN@WideStringClass?3?3Free_String?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??CharToWideChar@@YAPB_WPBD@Z@4JA ; `CharToWideChar'::`2'::__LINE__Var
PUBLIC	??_C@_0P@PEDLLHMO@CharToWideChar?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??WideCharToChar@@YAPBDPB_W@Z@4JA ; `WideCharToChar'::`2'::__LINE__Var
PUBLIC	??_C@_0P@NCJGMDNE@WideCharToChar?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??newstr@@YAPADPBD@Z@4JA		; `newstr'::`2'::__LINE__Var
PUBLIC	??_C@_06JNKKGBIF@newstr?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??newwcs@@YAPA_WPB_W@Z@4JA	; `newwcs'::`2'::__LINE__Var
PUBLIC	??_C@_06BCLKHCGG@newwcs?$AA@			; `string'
EXTRN	?InitEngine@@YAXXZ:PROC				; InitEngine
EXTRN	__imp___wassert:PROC
EXTRN	__imp__mbstowcs:PROC
EXTRN	__imp__wcstombs:PROC
EXTRN	__imp___vsnwprintf:PROC
EXTRN	__imp___wcsnicmp:PROC
EXTRN	__imp__mbsrtowcs:PROC
EXTRN	__imp__wcsrtombs:PROC
EXTRN	__imp__memmove:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__vsnprintf:PROC
EXTRN	__imp___strnicmp:PROC
EXTRN	__imp__strstr:PROC
EXTRN	__imp__isspace:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
EXTRN	_memcpy:PROC
EXTRN	?Exe@@3HA:DWORD					; Exe
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
_BSS	SEGMENT
?m_EmptyString@StringClass@@0AAPADA DD 01H DUP (?)	; StringClass::m_EmptyString
?m_NullChar@StringClass@@0AADA DD 01H DUP (?)		; StringClass::m_NullChar
?m_EmptyString@WideStringClass@@0AAPA_WA DD 01H DUP (?)	; WideStringClass::m_EmptyString
?m_NullChar@WideStringClass@@0AA_WA DD 01H DUP (?)	; WideStringClass::m_NullChar
_BSS	ENDS
CRT$XCL	SEGMENT
?m_EmptyString$initializer$@StringClass@@0P6AXXZA DD FLAT:??__E?m_EmptyString@StringClass@@0AAPADA@@YAXXZ ; StringClass::m_EmptyString$initializer$
CRT$XCL	ENDS
;	COMDAT ??_C@_06BCLKHCGG@newwcs?$AA@
CONST	SEGMENT
??_C@_06BCLKHCGG@newwcs?$AA@ DB 'newwcs', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??newwcs@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??newwcs@@YAPA_WPB_W@Z@4JA DD 0199H	; `newwcs'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06JNKKGBIF@newstr?$AA@
CONST	SEGMENT
??_C@_06JNKKGBIF@newstr?$AA@ DB 'newstr', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??newstr@@YAPADPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??newstr@@YAPADPBD@Z@4JA DD 0192H	; `newstr'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0P@NCJGMDNE@WideCharToChar?$AA@
CONST	SEGMENT
??_C@_0P@NCJGMDNE@WideCharToChar?$AA@ DB 'WideCharToChar', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??WideCharToChar@@YAPBDPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??WideCharToChar@@YAPBDPB_W@Z@4JA DD 0183H ; `WideCharToChar'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0P@PEDLLHMO@CharToWideChar?$AA@
CONST	SEGMENT
??_C@_0P@PEDLLHMO@CharToWideChar?$AA@ DB 'CharToWideChar', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??CharToWideChar@@YAPB_WPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CharToWideChar@@YAPB_WPBD@Z@4JA DD 017bH ; `CharToWideChar'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@IGIIDELN@WideStringClass?3?3Free_String?$AA@
CONST	SEGMENT
??_C@_0BN@IGIIDELN@WideStringClass?3?3Free_String?$AA@ DB 'WideStringClas'
	DB	's::Free_String', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Free_String@WideStringClass@@AAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Free_String@WideStringClass@@AAEXXZ@4JA DD 0112H ; `WideStringClass::Free_String'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@IPJLDOC@StringClass?3?3Replace?$AA@
CONST	SEGMENT
??_C@_0BF@IPJLDOC@StringClass?3?3Replace?$AA@ DB 'StringClass::Replace', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA DD 07cH ; `StringClass::Replace'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_string.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MIFLMFEP@StringClass?3?3Free_String?$AA@
CONST	SEGMENT
??_C@_0BJ@MIFLMFEP@StringClass?3?3Free_String?$AA@ DB 'StringClass::Free_'
	DB	'String', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Free_String@StringClass@@AAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Free_String@StringClass@@AAEXXZ@4JA DD 061H ; `StringClass::Free_String'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@MBFDNJL@WideStringClass?3?3Allocate_Buffer@
CONST	SEGMENT
??_C@_0CB@MBFDNJL@WideStringClass?3?3Allocate_Buffer@ DB 'WideStringClass'
	DB	'::Allocate_Buffer', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Allocate_Buffer@WideStringClass@@AAEPA_WH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Allocate_Buffer@WideStringClass@@AAEPA_WH@Z@4JA DD 0405H ; `WideStringClass::Allocate_Buffer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@IKKBAMML@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@IKKBAMML@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@EFHDACI@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@EFHDACI@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\ren'
	DB	'egade\dragonade_rxd\scripts\engine_string.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KPANAABL@StringClass?3?3Allocate_Buffer?$AA@
CONST	SEGMENT
??_C@_0BN@KPANAABL@StringClass?3?3Allocate_Buffer?$AA@ DB 'StringClass::A'
	DB	'llocate_Buffer', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Allocate_Buffer@StringClass@@AAEPADH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Allocate_Buffer@StringClass@@AAEPADH@Z@4JA DD 022fH ; `StringClass::Allocate_Buffer'::`2'::__LINE__Var
_DATA	ENDS
CRT$XCL	SEGMENT
?m_NullChar$initializer$@StringClass@@0P6AXXZA DD FLAT:??__E?m_NullChar@StringClass@@0AADA@@YAXXZ ; StringClass::m_NullChar$initializer$
CRT$XCL	ENDS
CRT$XCL	SEGMENT
?m_EmptyString$initializer$@WideStringClass@@0P6AXXZA DD FLAT:??__E?m_EmptyString@WideStringClass@@0AAPA_WA@@YAXXZ ; WideStringClass::m_EmptyString$initializer$
CRT$XCL	ENDS
CRT$XCL	SEGMENT
?m_NullChar$initializer$@WideStringClass@@0P6AXXZA DD FLAT:??__E?m_NullChar@WideStringClass@@0AA_WA@@YAXXZ ; WideStringClass::m_NullChar$initializer$
CRT$XCL	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ??__E?m_NullChar@WideStringClass@@0AA_WA@@YAXXZ
text$yc	SEGMENT
??__E?m_NullChar@WideStringClass@@0AA_WA@@YAXXZ PROC	; `dynamic initializer for 'WideStringClass::m_NullChar'', COMDAT

; 35   : REF_DEF3(wchar_t, WideStringClass::m_NullChar, 0x0083F43C, 0x0083E624, 0x00874FB8);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	8867768					; 00874fb8H
	push	8644132					; 0083e624H
	push	8647740					; 0083f43cH
	call	??$ResolveGameReference@_W@@YAAA_WHHH@Z	; ResolveGameReference<wchar_t>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_NullChar@WideStringClass@@0AA_WA, eax ; WideStringClass::m_NullChar
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_NullChar@WideStringClass@@0AA_WA@@YAXXZ ENDP	; `dynamic initializer for 'WideStringClass::m_NullChar''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@_W@@YAAA_WHHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@_W@@YAAA_WHHH@Z PROC		; ResolveGameReference<wchar_t>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@_W@@YAAA_WHHH@Z ENDP		; ResolveGameReference<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ??__E?m_EmptyString@WideStringClass@@0AAPA_WA@@YAXXZ
text$yc	SEGMENT
??__E?m_EmptyString@WideStringClass@@0AAPA_WA@@YAXXZ PROC ; `dynamic initializer for 'WideStringClass::m_EmptyString'', COMDAT

; 34   : REF_DEF3(wchar_t *, WideStringClass::m_EmptyString, 0x00809D3C, 0x00808F14, 0x0084DE74);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	8707700					; 0084de74H
	push	8425236					; 00808f14H
	push	8428860					; 00809d3cH
	call	??$ResolveGameReference@PA_W@@YAAAPA_WHHH@Z ; ResolveGameReference<wchar_t *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA, eax ; WideStringClass::m_EmptyString
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_EmptyString@WideStringClass@@0AAPA_WA@@YAXXZ ENDP ; `dynamic initializer for 'WideStringClass::m_EmptyString''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@PA_W@@YAAAPA_WHHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@PA_W@@YAAAPA_WHHH@Z PROC	; ResolveGameReference<wchar_t *>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@PA_W@@YAAAPA_WHHH@Z ENDP	; ResolveGameReference<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ??__E?m_NullChar@StringClass@@0AADA@@YAXXZ
text$yc	SEGMENT
??__E?m_NullChar@StringClass@@0AADA@@YAXXZ PROC		; `dynamic initializer for 'StringClass::m_NullChar'', COMDAT

; 33   : REF_DEF3(char, StringClass::m_NullChar, 0x0083EC0C, 0x0083DDF4, 0x00874688);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	8865416					; 00874688H
	push	8642036					; 0083ddf4H
	push	8645644					; 0083ec0cH
	call	??$ResolveGameReference@D@@YAAADHHH@Z	; ResolveGameReference<char>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_NullChar@StringClass@@0AADA, eax ; StringClass::m_NullChar
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_NullChar@StringClass@@0AADA@@YAXXZ ENDP		; `dynamic initializer for 'StringClass::m_NullChar''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@D@@YAAADHHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@D@@YAAADHHH@Z PROC		; ResolveGameReference<char>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@D@@YAAADHHH@Z ENDP		; ResolveGameReference<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ??__E?m_EmptyString@StringClass@@0AAPADA@@YAXXZ
text$yc	SEGMENT
??__E?m_EmptyString@StringClass@@0AAPADA@@YAXXZ PROC	; `dynamic initializer for 'StringClass::m_EmptyString'', COMDAT

; 32   : REF_DEF3(char *, StringClass::m_EmptyString, 0x00809D38, 0x00808F10, 0x0084CAE0);

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	8702688					; 0084cae0H
	push	8425232					; 00808f10H
	push	8428856					; 00809d38H
	call	??$ResolveGameReference@PAD@@YAAAPADHHH@Z ; ResolveGameReference<char *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_EmptyString@StringClass@@0AAPADA, eax ; StringClass::m_EmptyString
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?m_EmptyString@StringClass@@0AAPADA@@YAXXZ ENDP	; `dynamic initializer for 'StringClass::m_EmptyString''
text$yc	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\defines.h
;	COMDAT ??$ResolveGameReference@PAD@@YAAAPADHHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
tv69 = -72						; size = 4
tv70 = -68						; size = 4
_client$ = 8						; size = 4
_server$ = 12						; size = 4
_leveledit$ = 16					; size = 4
??$ResolveGameReference@PAD@@YAAAPADHHH@Z PROC		; ResolveGameReference<char *>, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 150  : 	if (Exe == 6) InitEngine();

	cmp	DWORD PTR ?Exe@@3HA, 6			; Exe
	jne	SHORT $LN1@ResolveGam
	call	?InitEngine@@YAXXZ			; InitEngine
$LN1@ResolveGam:

; 151  : #pragma warning(suppress: 6011) //warning C6011: dereferencing NULL pointer <name>
; 152  : 	return *((T*)((Exe == 0) ? client : ((Exe == 1) ? server : ((Exe == 4) ? leveledit : 0))));

	cmp	DWORD PTR ?Exe@@3HA, 0			; Exe
	jne	SHORT $LN8@ResolveGam
	mov	eax, DWORD PTR _client$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@ResolveGam
$LN8@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 1			; Exe
	jne	SHORT $LN6@ResolveGam
	mov	ecx, DWORD PTR _server$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@ResolveGam
$LN6@ResolveGam:
	cmp	DWORD PTR ?Exe@@3HA, 4			; Exe
	jne	SHORT $LN4@ResolveGam
	mov	edx, DWORD PTR _leveledit$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@ResolveGam
$LN4@ResolveGam:
	mov	DWORD PTR tv68[ebp], 0
$LN5@ResolveGam:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN7@ResolveGam:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@ResolveGam:
	mov	eax, DWORD PTR tv70[ebp]

; 153  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ResolveGameReference@PAD@@YAAAPADHHH@Z ENDP		; ResolveGameReference<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?wcsistr@@YAPB_WPB_W0@Z
_TEXT	SEGMENT
tv71 = -80						; size = 4
tv87 = -74						; size = 2
tv84 = -72						; size = 4
tv81 = -68						; size = 4
_str$ = 8						; size = 4
_substr$ = 12						; size = 4
?wcsistr@@YAPB_WPB_W0@Z PROC				; wcsistr, COMDAT

; 454  : SCRIPTS_API const wchar_t *wcsistr(const wchar_t *str, const wchar_t *substr){

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 455  : 	if (!*str)

	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@wcsistr

; 456  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN5@wcsistr
$LN3@wcsistr:

; 457  : 	while (*str){

	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@wcsistr

; 458  : 		if (_wcsnicmp(str, substr, wcslen(substr)) == 0)

	mov	eax, DWORD PTR _substr$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR tv81[ebp]
	add	ecx, 2
	mov	DWORD PTR tv84[ebp], ecx
$LL7@wcsistr:
	mov	edx, DWORD PTR tv81[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv87[ebp], ax
	add	DWORD PTR tv81[ebp], 2
	cmp	WORD PTR tv87[ebp], 0
	jne	SHORT $LL7@wcsistr
	mov	ecx, DWORD PTR tv81[ebp]
	sub	ecx, DWORD PTR tv84[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR _substr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	DWORD PTR __imp___wcsnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@wcsistr

; 459  : 			return str;

	mov	eax, DWORD PTR _str$[ebp]
	jmp	SHORT $LN5@wcsistr
$LN1@wcsistr:

; 460  : 		str++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 2
	mov	DWORD PTR _str$[ebp], eax

; 461  : 	}

	jmp	SHORT $LN3@wcsistr
$LN2@wcsistr:

; 462  : 	return NULL;

	xor	eax, eax
$LN5@wcsistr:

; 463  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?wcsistr@@YAPB_WPB_W0@Z ENDP				; wcsistr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?stristr@@YAPBDPBD0@Z
_TEXT	SEGMENT
tv69 = -80						; size = 4
tv83 = -73						; size = 1
tv80 = -72						; size = 4
tv77 = -68						; size = 4
_str$ = 8						; size = 4
_substr$ = 12						; size = 4
?stristr@@YAPBDPBD0@Z PROC				; stristr, COMDAT

; 445  : SCRIPTS_API const char *stristr(const char *str, const char *substr){

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
$LN3@stristr:

; 446  : 	while (*str){

	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@stristr

; 447  : 		if (_strnicmp(str, substr, strlen(substr)) == 0)

	mov	eax, DWORD PTR _substr$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	add	ecx, 1
	mov	DWORD PTR tv80[ebp], ecx
$LL6@stristr:
	mov	edx, DWORD PTR tv77[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv83[ebp], al
	add	DWORD PTR tv77[ebp], 1
	cmp	BYTE PTR tv83[ebp], 0
	jne	SHORT $LL6@stristr
	mov	ecx, DWORD PTR tv77[ebp]
	sub	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	eax, DWORD PTR _substr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	DWORD PTR __imp___strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@stristr

; 448  : 			return str;		

	mov	eax, DWORD PTR _str$[ebp]
	jmp	SHORT $LN4@stristr
$LN1@stristr:

; 449  : 		str++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 450  : 	}

	jmp	SHORT $LN3@stristr
$LN2@stristr:

; 451  : 	return NULL;

	xor	eax, eax
$LN4@stristr:

; 452  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?stristr@@YAPBDPBD0@Z ENDP				; stristr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?strrtrim@@YAPADPAD@Z
_TEXT	SEGMENT
_tt$ = -8						; size = 4
_t$ = -4						; size = 4
_s$ = 8							; size = 4
?strrtrim@@YAPADPAD@Z PROC				; strrtrim, COMDAT

; 432  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
$LN7@strrtrim:

; 433  : 	char *t, *tt;
; 434  : 
; 435  : 	TT_ASSERT(s != NULL);

	xor	eax, eax
	jne	SHORT $LN7@strrtrim
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@strrtrim
	int	3
$LN5@strrtrim:

; 436  : 
; 437  : 	for (tt = t = s; *t != '\0'; ++t)

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _t$[ebp], eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _tt$[ebp], ecx
	jmp	SHORT $LN4@strrtrim
$LN3@strrtrim:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
$LN4@strrtrim:
	mov	eax, DWORD PTR _t$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@strrtrim

; 438  : 		if (!isspace(*(unsigned char *)t))

	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	DWORD PTR __imp__isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@strrtrim

; 439  : 			tt = t+1;

	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _tt$[ebp], eax
$LN1@strrtrim:

; 440  : 	*tt = '\0';

	jmp	SHORT $LN3@strrtrim
$LN2@strrtrim:
	mov	eax, DWORD PTR _tt$[ebp]
	mov	BYTE PTR [eax], 0

; 441  : 
; 442  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 443  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?strrtrim@@YAPADPAD@Z ENDP				; strrtrim
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?strtrim@@YAPADPAD@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv74 = -81						; size = 1
tv73 = -80						; size = 4
tv144 = -77						; size = 1
tv141 = -76						; size = 4
tv72 = -76						; size = 4
tv138 = -72						; size = 4
tv71 = -72						; size = 4
_r$1 = -4						; size = 4
_v$ = 8							; size = 4
?strtrim@@YAPADPAD@Z PROC				; strtrim, COMDAT

; 416  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 417  : 	if (v)

	cmp	DWORD PTR _v$[ebp], 0
	je	$LN5@strtrim

; 418  : 	{
; 419  : 		char *r = v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _r$1[ebp], eax
$LN4@strtrim:

; 420  : 		while (*r > 0 && *r < 0x21)

	mov	eax, DWORD PTR _r$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jle	SHORT $LN3@strtrim
	mov	eax, DWORD PTR _r$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 33					; 00000021H
	jge	SHORT $LN3@strtrim

; 421  : 			r++;

	mov	eax, DWORD PTR _r$1[ebp]
	add	eax, 1
	mov	DWORD PTR _r$1[ebp], eax
	jmp	SHORT $LN4@strtrim
$LN3@strtrim:

; 422  : 		strcpy(v,r);

	mov	eax, DWORD PTR _r$1[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN8@strtrim:
	mov	eax, DWORD PTR tv71[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv74[ebp], cl
	mov	edx, DWORD PTR tv72[ebp]
	mov	al, BYTE PTR tv74[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv71[ebp]
	add	ecx, 1
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	add	edx, 1
	mov	DWORD PTR tv72[ebp], edx
	cmp	BYTE PTR tv74[ebp], 0
	jne	SHORT $LN8@strtrim

; 423  : 		r = v + strlen(v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR tv138[ebp]
	add	ecx, 1
	mov	DWORD PTR tv141[ebp], ecx
$LL9@strtrim:
	mov	edx, DWORD PTR tv138[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv144[ebp], al
	add	DWORD PTR tv138[ebp], 1
	cmp	BYTE PTR tv144[ebp], 0
	jne	SHORT $LL9@strtrim
	mov	ecx, DWORD PTR tv138[ebp]
	sub	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	mov	edx, DWORD PTR _v$[ebp]
	add	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _r$1[ebp], edx
$LN2@strtrim:

; 424  : 		while (r > v && r[-1] > 0 && r[-1] < 0x21)

	mov	eax, DWORD PTR _r$1[ebp]
	cmp	eax, DWORD PTR _v$[ebp]
	jbe	SHORT $LN1@strtrim
	mov	eax, 1
	imul	eax, -1
	mov	ecx, DWORD PTR _r$1[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jle	SHORT $LN1@strtrim
	mov	eax, 1
	imul	eax, -1
	mov	ecx, DWORD PTR _r$1[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 33					; 00000021H
	jge	SHORT $LN1@strtrim

; 425  : 			r--;

	mov	eax, DWORD PTR _r$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _r$1[ebp], eax
	jmp	SHORT $LN2@strtrim
$LN1@strtrim:

; 426  : 		*r = 0;

	mov	eax, DWORD PTR _r$1[ebp]
	mov	BYTE PTR [eax], 0
$LN5@strtrim:

; 427  : 	}
; 428  : 	return v;

	mov	eax, DWORD PTR _v$[ebp]

; 429  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?strtrim@@YAPADPAD@Z ENDP				; strtrim
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?newwcs@@YAPA_WPB_W@Z
_TEXT	SEGMENT
tv66 = -92						; size = 4
tv130 = -86						; size = 2
tv95 = -84						; size = 4
tv92 = -80						; size = 4
tv86 = -80						; size = 4
$T1 = -76						; size = 4
_s$ = -8						; size = 4
_len$ = -4						; size = 4
_str$ = 8						; size = 4
?newwcs@@YAPA_WPB_W@Z PROC				; newwcs, COMDAT

; 409  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 410  : 	size_t len = wcslen(str)+2;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR tv92[ebp]
	add	ecx, 2
	mov	DWORD PTR tv95[ebp], ecx
$LL6@newwcs:
	mov	edx, DWORD PTR tv92[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv130[ebp], ax
	add	DWORD PTR tv92[ebp], 2
	cmp	WORD PTR tv130[ebp], 0
	jne	SHORT $LL6@newwcs
	mov	ecx, DWORD PTR tv92[ebp]
	sub	ecx, DWORD PTR tv95[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp]
	add	edx, 2
	mov	DWORD PTR _len$[ebp], edx

; 411  : 	wchar_t *s = new wchar_t[len];

	push	OFFSET ??_C@_06BCLKHCGG@newwcs?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??newwcs@@YAPA_WPB_W@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN4@newwcs
	xor	edx, edx
	jne	SHORT $LN3@newwcs
	mov	eax, DWORD PTR ?__LINE__Var@?1??newwcs@@YAPA_WPB_W@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@newwcs:
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN5@newwcs
$LN4@newwcs:
	xor	ecx, ecx
	mov	eax, DWORD PTR _len$[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv86[ebp], eax
$LN5@newwcs:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _s$[ebp], ecx

; 412  : 	memcpy(s,str,len*2);

	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 413  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 414  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?newwcs@@YAPA_WPB_W@Z ENDP				; newwcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?newstr@@YAPADPBD@Z
_TEXT	SEGMENT
tv66 = -92						; size = 4
tv92 = -85						; size = 1
tv89 = -84						; size = 4
tv86 = -80						; size = 4
tv81 = -80						; size = 4
$T1 = -76						; size = 4
_s$ = -8						; size = 4
_len$ = -4						; size = 4
_str$ = 8						; size = 4
?newstr@@YAPADPBD@Z PROC				; newstr, COMDAT

; 402  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 403  : 	size_t len = strlen(str)+1;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv86[ebp]
	add	ecx, 1
	mov	DWORD PTR tv89[ebp], ecx
$LL6@newstr:
	mov	edx, DWORD PTR tv86[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv92[ebp], al
	add	DWORD PTR tv86[ebp], 1
	cmp	BYTE PTR tv92[ebp], 0
	jne	SHORT $LL6@newstr
	mov	ecx, DWORD PTR tv86[ebp]
	sub	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp]
	add	edx, 1
	mov	DWORD PTR _len$[ebp], edx

; 404  : 	char *s = new char[len];

	push	OFFSET ??_C@_06JNKKGBIF@newstr?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??newstr@@YAPADPBD@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN4@newstr
	xor	edx, edx
	jne	SHORT $LN3@newstr
	mov	eax, DWORD PTR ?__LINE__Var@?1??newstr@@YAPADPBD@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@newstr:
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN5@newstr
$LN4@newstr:
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv81[ebp], eax
$LN5@newstr:
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR _s$[ebp], ecx

; 405  : 	memcpy(s,str,len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 406  : 	return s;	

	mov	eax, DWORD PTR _s$[ebp]

; 407  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?newstr@@YAPADPBD@Z ENDP				; newstr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?WideCharToChar@@YAPBDPB_W@Z
_TEXT	SEGMENT
tv85 = -100						; size = 4
tv157 = -94						; size = 2
tv154 = -92						; size = 4
tv151 = -88						; size = 4
tv132 = -88						; size = 4
tv78 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_text$ = -12						; size = 4
_length$ = -8						; size = 4
_c$3 = -4						; size = 4
_wcs$ = 8						; size = 4
?WideCharToChar@@YAPBDPB_W@Z PROC			; WideCharToChar, COMDAT

; 387  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 388  : 	if (!wcs)

	cmp	DWORD PTR _wcs$[ebp], 0
	jne	$LN1@WideCharTo

; 389  : 	{
; 390  : 		char *c = new char[2];

	push	OFFSET ??_C@_0P@NCJGMDNE@WideCharToChar?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??WideCharToChar@@YAPBDPB_W@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN5@WideCharTo
	xor	edx, edx
	jne	SHORT $LN4@WideCharTo
	mov	eax, DWORD PTR ?__LINE__Var@?1??WideCharToChar@@YAPBDPB_W@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@WideCharTo:
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN6@WideCharTo
$LN5@WideCharTo:
	push	2
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv78[ebp], edx
$LN6@WideCharTo:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _c$3[ebp], eax

; 391  : 		c[0] = 0;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _c$3[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 392  : 		c[1] = 0;

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _c$3[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 393  : 		return c;

	mov	eax, DWORD PTR _c$3[ebp]
	jmp	$LN2@WideCharTo
$LN1@WideCharTo:

; 394  : 	}
; 395  : 	int length = (int)wcslen(wcs);

	mov	eax, DWORD PTR _wcs$[ebp]
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR tv151[ebp]
	add	ecx, 2
	mov	DWORD PTR tv154[ebp], ecx
$LL10@WideCharTo:
	mov	edx, DWORD PTR tv151[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv157[ebp], ax
	add	DWORD PTR tv151[ebp], 2
	cmp	WORD PTR tv157[ebp], 0
	jne	SHORT $LL10@WideCharTo
	mov	ecx, DWORD PTR tv151[ebp]
	sub	ecx, DWORD PTR tv154[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _length$[ebp], edx

; 396  : 	char *text = new char[length+1];

	push	OFFSET ??_C@_0P@NCJGMDNE@WideCharToChar?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??WideCharToChar@@YAPBDPB_W@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN8@WideCharTo
	xor	edx, edx
	jne	SHORT $LN7@WideCharTo
	mov	eax, DWORD PTR ?__LINE__Var@?1??WideCharToChar@@YAPBDPB_W@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN7@WideCharTo:
	mov	DWORD PTR tv132[ebp], 0
	jmp	SHORT $LN9@WideCharTo
$LN8@WideCharTo:
	mov	edx, DWORD PTR _length$[ebp]
	add	edx, 1
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv132[ebp], eax
$LN9@WideCharTo:
	mov	ecx, DWORD PTR tv132[ebp]
	mov	DWORD PTR _text$[ebp], ecx

; 397  : 	wcstombs(text,wcs,length+1);

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _wcs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	DWORD PTR __imp__wcstombs
	add	esp, 12					; 0000000cH

; 398  : 	return text;

	mov	eax, DWORD PTR _text$[ebp]
$LN2@WideCharTo:

; 399  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?WideCharToChar@@YAPBDPB_W@Z ENDP			; WideCharToChar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?CharToWideChar@@YAPB_WPBD@Z
_TEXT	SEGMENT
tv66 = -92						; size = 4
tv130 = -85						; size = 1
tv95 = -84						; size = 4
tv92 = -80						; size = 4
tv86 = -80						; size = 4
$T1 = -76						; size = 4
_text$ = -8						; size = 4
_length$ = -4						; size = 4
_str$ = 8						; size = 4
?CharToWideChar@@YAPB_WPBD@Z PROC			; CharToWideChar, COMDAT

; 379  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 380  : 	int length = (int)strlen(str);

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR tv92[ebp]
	add	ecx, 1
	mov	DWORD PTR tv95[ebp], ecx
$LL6@CharToWide:
	mov	edx, DWORD PTR tv92[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv130[ebp], al
	add	DWORD PTR tv92[ebp], 1
	cmp	BYTE PTR tv130[ebp], 0
	jne	SHORT $LL6@CharToWide
	mov	ecx, DWORD PTR tv92[ebp]
	sub	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _length$[ebp], edx

; 381  : 	wchar_t *text = new wchar_t[length+1];

	push	OFFSET ??_C@_0P@PEDLLHMO@CharToWideChar?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??CharToWideChar@@YAPB_WPBD@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN4@CharToWide
	xor	edx, edx
	jne	SHORT $LN3@CharToWide
	mov	eax, DWORD PTR ?__LINE__Var@?1??CharToWideChar@@YAPB_WPBD@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@CharToWide:
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN5@CharToWide
$LN4@CharToWide:
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv86[ebp], eax
$LN5@CharToWide:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _text$[ebp], ecx

; 382  : 	mbstowcs(text,str,length+1);

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	DWORD PTR __imp__mbstowcs
	add	esp, 12					; 0000000cH

; 383  : 	return text;

	mov	eax, DWORD PTR _text$[ebp]

; 384  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CharToWideChar@@YAPB_WPBD@Z ENDP			; CharToWideChar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z PROC ; WideStringClass::Set_Buffer_And_Allocated_Length, COMDAT
; _this$ = ecx

; 1018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1019 : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@WideStringClass@@AAEXXZ	; WideStringClass::Free_String

; 1020 : 	m_Buffer = buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax], ecx

; 1021 : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Set_Buffer

; 1022 : 	{
; 1023 : 		Store_Allocated_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Allocated_Length@WideStringClass@@AAEXH@Z ; WideStringClass::Store_Allocated_Length

; 1024 : 		Store_Length (0);		

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length
$LN2@Set_Buffer:

; 1025 : 	}
; 1026 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z ENDP ; WideStringClass::Set_Buffer_And_Allocated_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Allocated_Length@WideStringClass@@ABEHXZ
_TEXT	SEGMENT
_header$1 = -12						; size = 4
_allocated_length$ = -8					; size = 4
_this$ = -4						; size = 4
?Get_Allocated_Length@WideStringClass@@ABEHXZ PROC	; WideStringClass::Get_Allocated_Length, COMDAT
; _this$ = ecx

; 991  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 992  : 	int allocated_length = 0;

	mov	DWORD PTR _allocated_length$[ebp], 0

; 993  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@Get_Alloca

; 994  : 	{
; 995  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ ; WideStringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 996  : 		allocated_length = header->allocated_length;		

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _allocated_length$[ebp], ecx
$LN1@Get_Alloca:

; 997  : 	}
; 998  : 	return allocated_length;

	mov	eax, DWORD PTR _allocated_length$[ebp]

; 999  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Allocated_Length@WideStringClass@@ABEHXZ ENDP	; WideStringClass::Get_Allocated_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ PROC	; WideStringClass::Get_Header, COMDAT
; _this$ = ecx

; 1038 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1039 : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (WideStringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 1040 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ ENDP	; WideStringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Allocated_Length@WideStringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_allocated_length$ = 8					; size = 4
?Store_Allocated_Length@WideStringClass@@AAEXH@Z PROC	; WideStringClass::Store_Allocated_Length, COMDAT
; _this$ = ecx

; 1043 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1044 : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Allo

; 1045 : 	{
; 1046 : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ ; WideStringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 1047 : 		header->allocated_length = allocated_length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _allocated_length$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Store_Allo:

; 1048 : 	}
; 1049 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Allocated_Length@WideStringClass@@AAEXH@Z ENDP	; WideStringClass::Store_Allocated_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@WideStringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@WideStringClass@@AAEXH@Z PROC		; WideStringClass::Store_Length, COMDAT
; _this$ = ecx

; 1052 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1053 : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 1054 : 	{
; 1055 : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ ; WideStringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 1056 : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 1057 : 	}
; 1058 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@WideStringClass@@AAEXH@Z ENDP		; WideStringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Free_String@WideStringClass@@AAEXXZ
_TEXT	SEGMENT
$T1 = -88						; size = 4
_buffer$2 = -20						; size = 4
_index$3 = -16						; size = 4
_diff$ = -12						; size = 4
_buffer_base$ = -8					; size = 4
_this$ = -4						; size = 4
?Free_String@WideStringClass@@AAEXXZ PROC		; WideStringClass::Free_String, COMDAT
; _this$ = ecx

; 274  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 275  : 	if (m_Buffer == m_EmptyString) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@Free_Strin
	jmp	$LN4@Free_Strin
$LN3@Free_Strin:

; 276  : 
; 277  : 	ptrdiff_t buffer_base = intptr_t(m_Buffer) - sizeof(_HEADER);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 8
	mov	DWORD PTR _buffer_base$[ebp], ecx

; 278  : 	ptrdiff_t diff = buffer_base - intptr_t(TempStrings[0]);

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 520				; 00000208H
	imul	eax, 0
	lea	ecx, DWORD PTR ?TempStrings@WideStringClass@@0PAY0CAI@DA[edx+eax]
	mov	edx, DWORD PTR _buffer_base$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _diff$[ebp], edx

; 279  : 
; 280  : 	if (diff >= 0 && diff < MAX_TEMP_BYTES * MAX_TEMP_STRING)

	js	SHORT $LN2@Free_Strin
	cmp	DWORD PTR _diff$[ebp], 2080		; 00000820H
	jge	SHORT $LN2@Free_Strin

; 281  : 	{
; 282  : 		// It was a temp string, let's get the index and cast Undead.
; 283  : 		ptrdiff_t index = diff / MAX_TEMP_BYTES;

	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 520				; 00000208H
	idiv	ecx
	mov	DWORD PTR _index$3[ebp], eax

; 284  : 		m_Buffer[0] = m_NullChar;

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?m_NullChar@WideStringClass@@0AA_WA ; WideStringClass::m_NullChar
	mov	cx, WORD PTR [ecx]
	mov	WORD PTR [eax+edx], cx

; 285  : 		FreeTempStrings |= 1 << index;

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$3[ebp]
	shl	eax, cl
	or	eax, DWORD PTR ?FreeTempStrings@WideStringClass@@0IA[edx]
	mov	ecx, DWORD PTR __tls_index
	mov	edx, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR ?FreeTempStrings@WideStringClass@@0IA[ecx], eax

; 286  : 	}
; 287  : 	else

	jmp	SHORT $LN1@Free_Strin
$LN2@Free_Strin:

; 288  : 	{
; 289  : 		char* buffer = (char*)buffer_base;

	mov	eax, DWORD PTR _buffer_base$[ebp]
	mov	DWORD PTR _buffer$2[ebp], eax

; 290  : 		delete[] buffer;

	push	OFFSET ??_C@_0BN@IGIIDELN@WideStringClass?3?3Free_String?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Free_String@WideStringClass@@AAEXXZ@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN7@Free_Strin
	xor	edx, edx
	jne	SHORT $LN6@Free_Strin
	mov	eax, DWORD PTR ?__LINE__Var@?1??Free_String@WideStringClass@@AAEXXZ@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Free_Strin:
	jmp	SHORT $LN1@Free_Strin
$LN7@Free_Strin:
	mov	edx, DWORD PTR _buffer$2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Free_Strin:

; 291  : 	}
; 292  : 
; 293  : 	m_Buffer = m_EmptyString;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN4@Free_Strin:

; 294  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Free_String@WideStringClass@@AAEXXZ ENDP		; WideStringClass::Free_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Uninitialised_Grow@WideStringClass@@AAEXH@Z
_TEXT	SEGMENT
_x$1 = -8						; size = 4
_this$ = -4						; size = 4
_new_len$ = 8						; size = 4
?Uninitialised_Grow@WideStringClass@@AAEXH@Z PROC	; WideStringClass::Uninitialised_Grow, COMDAT
; _this$ = ecx

; 263  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 264  : 	if (new_len > Get_Allocated_Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Allocated_Length@WideStringClass@@ABEHXZ ; WideStringClass::Get_Allocated_Length
	cmp	DWORD PTR _new_len$[ebp], eax
	jle	SHORT $LN1@Uninitiali

; 265  : 	{
; 266  : 		wchar_t *x = Allocate_Buffer(new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Allocate_Buffer@WideStringClass@@AAEPA_WH@Z ; WideStringClass::Allocate_Buffer
	mov	DWORD PTR _x$1[ebp], eax

; 267  : 		Free_String();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@WideStringClass@@AAEXXZ	; WideStringClass::Free_String

; 268  : 		Set_Buffer_And_Allocated_Length(x,new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z ; WideStringClass::Set_Buffer_And_Allocated_Length
$LN1@Uninitiali:

; 269  : 	}
; 270  : 	Store_Length(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length

; 271  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Uninitialised_Grow@WideStringClass@@AAEXH@Z ENDP	; WideStringClass::Uninitialised_Grow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Resize@WideStringClass@@AAEXH@Z
_TEXT	SEGMENT
tv75 = -86						; size = 2
tv74 = -84						; size = 4
tv73 = -80						; size = 4
tv72 = -76						; size = 4
_x$1 = -8						; size = 4
_this$ = -4						; size = 4
_new_len$ = 8						; size = 4
?Resize@WideStringClass@@AAEXH@Z PROC			; WideStringClass::Resize, COMDAT
; _this$ = ecx

; 252  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (new_len > Get_Allocated_Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Allocated_Length@WideStringClass@@ABEHXZ ; WideStringClass::Get_Allocated_Length
	cmp	DWORD PTR _new_len$[ebp], eax
	jle	SHORT $LN2@Resize

; 254  : 	{
; 255  : 		wchar_t *x = Allocate_Buffer(new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Allocate_Buffer@WideStringClass@@AAEPA_WH@Z ; WideStringClass::Allocate_Buffer
	mov	DWORD PTR _x$1[ebp], eax

; 256  : 		wcscpy(x,m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _x$1[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN4@Resize:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv75[ebp], dx
	mov	eax, DWORD PTR tv73[ebp]
	mov	cx, WORD PTR tv75[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR tv72[ebp]
	add	edx, 2
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	add	eax, 2
	mov	DWORD PTR tv73[ebp], eax
	cmp	WORD PTR tv75[ebp], 0
	jne	SHORT $LN4@Resize

; 257  : 		Free_String();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@WideStringClass@@AAEXXZ	; WideStringClass::Free_String

; 258  : 		Set_Buffer_And_Allocated_Length(x,new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z ; WideStringClass::Set_Buffer_And_Allocated_Length
$LN2@Resize:

; 259  : 	}
; 260  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Resize@WideStringClass@@AAEXH@Z ENDP			; WideStringClass::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Allocate_Buffer@WideStringClass@@AAEPA_WH@Z
_TEXT	SEGMENT
tv79 = -84						; size = 4
$T1 = -80						; size = 4
_header$ = -12						; size = 4
_buffer$ = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Allocate_Buffer@WideStringClass@@AAEPA_WH@Z PROC	; WideStringClass::Allocate_Buffer, COMDAT
; _this$ = ecx

; 1029 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1030 : 	char *buffer = new char[(sizeof (wchar_t) * length) + sizeof (WideStringClass::_HEADER)];

	push	OFFSET ??_C@_0CB@MBFDNJL@WideStringClass?3?3Allocate_Buffer@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Allocate_Buffer@WideStringClass@@AAEPA_WH@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0DJ@EFHDACI@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN4@Allocate_B
	xor	edx, edx
	jne	SHORT $LN3@Allocate_B
	mov	eax, DWORD PTR ?__LINE__Var@?1??Allocate_Buffer@WideStringClass@@AAEPA_WH@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1HC@IKKBAMML@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Allocate_B:
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN5@Allocate_B
$LN4@Allocate_B:
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [edx+edx+8]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv79[ebp], ecx
$LN5@Allocate_B:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _buffer$[ebp], edx

; 1031 : 	HEADER *header = reinterpret_cast<HEADER *>(buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _header$[ebp], eax

; 1032 : 	header->length = 0;

	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1033 : 	header->allocated_length = length;

	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx

; 1034 : 	return reinterpret_cast<wchar_t *>(buffer + sizeof (WideStringClass::_HEADER));

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 8

; 1035 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Allocate_Buffer@WideStringClass@@AAEPA_WH@Z ENDP	; WideStringClass::Allocate_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Get_String@WideStringClass@@AAEXH_N@Z
_TEXT	SEGMENT
_buffer$1 = -12						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
_is_temp$ = 12						; size = 1
?Get_String@WideStringClass@@AAEXH_N@Z PROC		; WideStringClass::Get_String, COMDAT
; _this$ = ecx

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 	if (!is_temp && !length) Set_Buffer_And_Allocated_Length(m_EmptyString, 0);

	movzx	eax, BYTE PTR _is_temp$[ebp]
	test	eax, eax
	jne	SHORT $LN6@Get_String
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN6@Get_String
	push	0
	mov	eax, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z ; WideStringClass::Set_Buffer_And_Allocated_Length
	jmp	$LN7@Get_String
$LN6@Get_String:

; 239  : 	else if (is_temp && length < MAX_TEMP_LEN && FreeTempStrings)

	movzx	eax, BYTE PTR _is_temp$[ebp]
	test	eax, eax
	je	$LN4@Get_String
	cmp	DWORD PTR _length$[ebp], 256		; 00000100H
	jge	$LN4@Get_String
	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR ?FreeTempStrings@WideStringClass@@0IA[edx], 0
	je	$LN4@Get_String

; 240  : 	{
; 241  : 		uint32 index = 0;

	mov	DWORD PTR _index$2[ebp], 0

; 242  : 		BitScanForward((DWORD*)&index, FreeTempStrings); // Find the first free temp string

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	bsf	eax, DWORD PTR ?FreeTempStrings@WideStringClass@@0IA[edx]
	mov	DWORD PTR _index$2[ebp], eax

; 243  : 		FreeTempStrings &= ~(1 << index); // Remove it from the free pool

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$2[ebp]
	shl	eax, cl
	not	eax
	and	eax, DWORD PTR ?FreeTempStrings@WideStringClass@@0IA[edx]
	mov	ecx, DWORD PTR __tls_index
	mov	edx, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR ?FreeTempStrings@WideStringClass@@0IA[ecx], eax

; 244  : 		wchar_t* buffer = (wchar_t*)(TempStrings[index] + sizeof(_HEADER));

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _index$2[ebp]
	imul	eax, 520				; 00000208H
	lea	ecx, DWORD PTR ?TempStrings@WideStringClass@@0PAY0CAI@DA[edx+eax+8]
	mov	DWORD PTR _buffer$1[ebp], ecx

; 245  : 		Set_Buffer_And_Allocated_Length(buffer, MAX_TEMP_LEN);

	push	256					; 00000100H
	mov	eax, DWORD PTR _buffer$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z ; WideStringClass::Set_Buffer_And_Allocated_Length
	jmp	SHORT $LN7@Get_String
$LN4@Get_String:

; 246  : 	}
; 247  : 	else if (length > 0) Set_Buffer_And_Allocated_Length(Allocate_Buffer(length), length);

	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN2@Get_String
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Allocate_Buffer@WideStringClass@@AAEPA_WH@Z ; WideStringClass::Allocate_Buffer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@WideStringClass@@AAEXPA_WH@Z ; WideStringClass::Set_Buffer_And_Allocated_Length
	jmp	SHORT $LN7@Get_String
$LN2@Get_String:

; 248  : 	else Free_String();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@WideStringClass@@AAEXXZ	; WideStringClass::Free_String
$LN7@Get_String:

; 249  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get_String@WideStringClass@@AAEXH_N@Z ENDP		; WideStringClass::Get_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?ReplaceSubstring@WideStringClass@@QAEXHHABV1@@Z
_TEXT	SEGMENT
_newLength$ = -16					; size = 4
_oldLength$ = -12					; size = 4
_substringLength$ = -8					; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_length$ = 12						; size = 4
_substring$ = 16					; size = 4
?ReplaceSubstring@WideStringClass@@QAEXHHABV1@@Z PROC	; WideStringClass::ReplaceSubstring, COMDAT
; _this$ = ecx

; 363  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 364  : 	int substringLength = substring.Get_Length();

	mov	ecx, DWORD PTR _substring$[ebp]
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	mov	DWORD PTR _substringLength$[ebp], eax

; 365  : 	int oldLength = Get_Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	mov	DWORD PTR _oldLength$[ebp], eax

; 366  : 	int newLength = oldLength - length + substringLength;

	mov	eax, DWORD PTR _oldLength$[ebp]
	sub	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _substringLength$[ebp]
	mov	DWORD PTR _newLength$[ebp], eax
$LN4@ReplaceSub:

; 367  : 	TT_ASSERT(start + length <= oldLength);

	xor	eax, eax
	jne	SHORT $LN4@ReplaceSub
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _oldLength$[ebp]
	jle	SHORT $LN2@ReplaceSub
	int	3
$LN2@ReplaceSub:

; 368  : 
; 369  : 	if (substringLength > length)

	mov	eax, DWORD PTR _substringLength$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jle	SHORT $LN1@ReplaceSub

; 370  : 		Resize(newLength + 1);

	mov	eax, DWORD PTR _newLength$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Resize@WideStringClass@@AAEXH@Z	; WideStringClass::Resize
$LN1@ReplaceSub:

; 371  : 	
; 372  : 	memmove(m_Buffer + start + substringLength, m_Buffer + start + length, (oldLength - start - length) * sizeof(wchar_t));

	mov	eax, DWORD PTR _oldLength$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	sub	eax, DWORD PTR _length$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _substringLength$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 373  : 	memcpy(m_Buffer + start, substring.m_Buffer, substringLength * sizeof(wchar_t));

	mov	eax, DWORD PTR _substringLength$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _substring$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _start$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 374  : 	m_Buffer[newLength] = L'\0';

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	eax, DWORD PTR _newLength$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 375  : 	Store_Length(newLength);

	mov	eax, DWORD PTR _newLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length

; 376  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReplaceSubstring@WideStringClass@@QAEXHHABV1@@Z ENDP	; WideStringClass::ReplaceSubstring
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?RemoveSubstring@WideStringClass@@QAEXHH@Z
_TEXT	SEGMENT
_newLength$1 = -12					; size = 4
_oldLength$2 = -8					; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_length$ = 12						; size = 4
?RemoveSubstring@WideStringClass@@QAEXHH@Z PROC		; WideStringClass::RemoveSubstring, COMDAT
; _this$ = ecx

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 	if (length > 0)

	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN6@RemoveSubs

; 351  : 	{
; 352  : 		int oldLength = Get_Length();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	mov	DWORD PTR _oldLength$2[ebp], eax

; 353  : 		int newLength = oldLength - length;

	mov	eax, DWORD PTR _oldLength$2[ebp]
	sub	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _newLength$1[ebp], eax
$LN3@RemoveSubs:

; 354  : 		TT_ASSERT(start + length <= oldLength);

	xor	eax, eax
	jne	SHORT $LN3@RemoveSubs
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _oldLength$2[ebp]
	jle	SHORT $LN1@RemoveSubs
	int	3
$LN1@RemoveSubs:

; 355  : 
; 356  : 		memmove(m_Buffer + start, m_Buffer + start + length, (newLength - start) * sizeof(wchar_t));

	mov	eax, DWORD PTR _newLength$1[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 357  : 		m_Buffer[newLength] = L'\0';

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	eax, DWORD PTR _newLength$1[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 358  : 		Store_Length(newLength);

	mov	eax, DWORD PTR _newLength$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length
$LN6@RemoveSubs:

; 359  : 	}
; 360  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveSubstring@WideStringClass@@QAEXHH@Z ENDP		; WideStringClass::RemoveSubstring
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Substring@WideStringClass@@QBE?AV1@HH@Z
_TEXT	SEGMENT
_result$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_start$ = 12						; size = 4
_length$ = 16						; size = 4
?Substring@WideStringClass@@QBE?AV1@HH@Z PROC		; WideStringClass::Substring, COMDAT
; _this$ = ecx

; 336  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN3@Substring:

; 337  : 	TT_ASSERT(start + length <= Get_Length());

	xor	eax, eax
	jne	SHORT $LN3@Substring
	mov	esi, DWORD PTR _start$[ebp]
	add	esi, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	cmp	esi, eax
	jle	SHORT $LN1@Substring
	int	3
$LN1@Substring:

; 338  : 
; 339  : 	WideStringClass result;

	push	0
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	??0WideStringClass@@QAE@H_N@Z		; WideStringClass::WideStringClass

; 340  : 	result.Uninitialised_Grow(length+1);

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	call	?Uninitialised_Grow@WideStringClass@@AAEXH@Z ; WideStringClass::Uninitialised_Grow

; 341  : 	result.Store_Length(length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length

; 342  : 	memcpy(result.m_Buffer, m_Buffer + start, length * sizeof(wchar_t));

	mov	eax, DWORD PTR _length$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 343  : 	result.m_Buffer[length] = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 344  : 
; 345  : 	return result;

	push	0
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WideStringClass@@QAE@ABV0@_N@Z	; WideStringClass::WideStringClass
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1WideStringClass@@QAE@XZ		; WideStringClass::~WideStringClass
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 346  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Substring@WideStringClass@@QBE?AV1@HH@Z ENDP		; WideStringClass::Substring
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Release_Resources@WideStringClass@@SAXXZ
_TEXT	SEGMENT
?Release_Resources@WideStringClass@@SAXXZ PROC		; WideStringClass::Release_Resources, COMDAT

; 297  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 298  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Release_Resources@WideStringClass@@SAXXZ ENDP		; WideStringClass::Release_Resources
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Is_ANSI@WideStringClass@@QAE_NXZ
_TEXT	SEGMENT
_value$1 = -12						; size = 2
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
?Is_ANSI@WideStringClass@@QAE_NXZ PROC			; WideStringClass::Is_ANSI, COMDAT
; _this$ = ecx

; 321  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 322  : 	if (m_Buffer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Is_ANSI

; 323  : 	{
; 324  : 		for (int i = 0;m_Buffer[i] != 0;i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@Is_ANSI
$LN3@Is_ANSI:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@Is_ANSI:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	test	eax, eax
	je	SHORT $LN5@Is_ANSI

; 325  : 		{
; 326  : 			unsigned short value = m_Buffer[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _value$1[ebp], ax

; 327  : 			if (value > 255)

	movzx	eax, WORD PTR _value$1[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN1@Is_ANSI

; 328  : 			{
; 329  : 				return false;

	xor	al, al
	jmp	SHORT $LN6@Is_ANSI
$LN1@Is_ANSI:

; 330  : 			}
; 331  : 		}

	jmp	SHORT $LN3@Is_ANSI
$LN5@Is_ANSI:

; 332  : 	}
; 333  : 	return true;

	mov	al, 1
$LN6@Is_ANSI:

; 334  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_ANSI@WideStringClass@@QAE_NXZ ENDP			; WideStringClass::Is_ANSI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Convert_From@WideStringClass@@QAE_NPBD@Z
_TEXT	SEGMENT
_len$1 = -12						; size = 4
_ps$2 = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?Convert_From@WideStringClass@@QAE_NPBD@Z PROC		; WideStringClass::Convert_From, COMDAT
; _this$ = ecx

; 301  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 	if (str)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN2@Convert_Fr

; 303  : 	{
; 304  : 		mbstate_t ps;
; 305  : 		memset(&ps,0,sizeof(ps));

	xor	eax, eax
	mov	DWORD PTR _ps$2[ebp], eax

; 306  : #pragma warning(suppress: 6387) // header entry of mbsrtowcs is incorrect, NULL is a valid first entry
; 307  : 		int len = (int)mbsrtowcs(NULL,&str,0,&ps);

	lea	eax, DWORD PTR _ps$2[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__mbsrtowcs
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$1[ebp], eax

; 308  : 		if (len >= 0)

	cmp	DWORD PTR _len$1[ebp], 0
	jl	SHORT $LN2@Convert_Fr

; 309  : 		{
; 310  : 			Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@WideStringClass@@AAEXH@Z ; WideStringClass::Uninitialised_Grow

; 311  : 			mbsrtowcs(m_Buffer,&str,len,&ps);

	lea	eax, DWORD PTR _ps$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__mbsrtowcs
	add	esp, 16					; 00000010H

; 312  : 			m_Buffer[len] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	eax, DWORD PTR _len$1[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 313  : 			Store_Length(len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length

; 314  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Convert_Fr
$LN2@Convert_Fr:

; 315  : 		}
; 316  : 	}
; 317  : 	return false;

	xor	al, al
$LN3@Convert_Fr:

; 318  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Convert_From@WideStringClass@@QAE_NPBD@Z ENDP		; WideStringClass::Convert_From
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Format_Args@WideStringClass@@QAAHPB_WABQAD@Z
_TEXT	SEGMENT
_x$ = -1028						; size = 4
_temp_buffer$ = -1024					; size = 1024
_this$ = 8						; size = 4
_format$ = 12						; size = 4
_arg_list$ = 16						; size = 4
?Format_Args@WideStringClass@@QAAHPB_WABQAD@Z PROC	; WideStringClass::Format_Args, COMDAT

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1092				; 00000444H
	push	ebx
	push	esi
	push	edi

; 226  : 	if (format == NULL)

	cmp	DWORD PTR _format$[ebp], 0
	jne	SHORT $LN1@Format_Arg

; 227  : 	{
; 228  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Format_Arg
$LN1@Format_Arg:

; 229  : 	}
; 230  : 	wchar_t temp_buffer[512];
; 231  : 	int x = _vsnwprintf(temp_buffer,512,format,arg_list);

	mov	eax, DWORD PTR _arg_list$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _format$[ebp]
	push	edx
	push	512					; 00000200H
	lea	eax, DWORD PTR _temp_buffer$[ebp]
	push	eax
	call	DWORD PTR __imp___vsnwprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax

; 232  : 	*this = temp_buffer;

	lea	eax, DWORD PTR _temp_buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4WideStringClass@@QAEABV0@PB_W@Z	; WideStringClass::operator=

; 233  : 	return x;

	mov	eax, DWORD PTR _x$[ebp]
$LN2@Format_Arg:

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Format_Args@WideStringClass@@QAAHPB_WABQAD@Z ENDP	; WideStringClass::Format_Args
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Format@WideStringClass@@QAAHPB_WZZ
_TEXT	SEGMENT
_x$ = -1032						; size = 4
_temp_buffer$ = -1028					; size = 1024
_arg_list$ = -4						; size = 4
_this$ = 8						; size = 4
_format$ = 12						; size = 4
?Format@WideStringClass@@QAAHPB_WZZ PROC		; WideStringClass::Format, COMDAT

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1096				; 00000448H
	push	ebx
	push	esi
	push	edi

; 211  : 	if (format == NULL)

	cmp	DWORD PTR _format$[ebp], 0
	jne	SHORT $LN1@Format

; 212  : 	{
; 213  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Format
$LN1@Format:

; 214  : 	}
; 215  : 	va_list arg_list;
; 216  : 	va_start(arg_list,format);

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _arg_list$[ebp], eax

; 217  : 	wchar_t temp_buffer[512];
; 218  : 	int x = _vsnwprintf(temp_buffer,512,format,arg_list);

	mov	eax, DWORD PTR _arg_list$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _temp_buffer$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnwprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax

; 219  : 	*this = temp_buffer;

	lea	eax, DWORD PTR _temp_buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4WideStringClass@@QAEABV0@PB_W@Z	; WideStringClass::operator=

; 220  : 	va_end(arg_list);

	mov	DWORD PTR _arg_list$[ebp], 0

; 221  : 	return x;

	mov	eax, DWORD PTR _x$[ebp]
$LN2@Format:

; 222  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Format@WideStringClass@@QAAHPB_WZZ ENDP		; WideStringClass::Format
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@WideStringClass@@QBEHXZ
_TEXT	SEGMENT
tv73 = -92						; size = 4
tv90 = -86						; size = 2
tv87 = -84						; size = 4
tv84 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@WideStringClass@@QBEHXZ PROC		; WideStringClass::Get_Length, COMDAT
; _this$ = ecx

; 1002 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1003 : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 1004 : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 1005 : 	{
; 1006 : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@WideStringClass@@ABEPAU_HEADER@1@XZ ; WideStringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 1007 : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 1008 : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 1009 : 		{
; 1010 : 			length = (int)wcslen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 2
	mov	DWORD PTR tv87[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv84[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv90[ebp], cx
	add	DWORD PTR tv84[ebp], 2
	cmp	WORD PTR tv90[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv84[ebp]
	sub	edx, DWORD PTR tv87[ebp]
	sar	edx, 1
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 1011 : 			((WideStringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length
$LN2@Get_Length:

; 1012 : 		}
; 1013 : 	}
; 1014 : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 1015 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@WideStringClass@@QBEHXZ ENDP		; WideStringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??BWideStringClass@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BWideStringClass@@QBEPB_WXZ PROC			; WideStringClass::operator wchar_t const *, COMDAT
; _this$ = ecx

; 816  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 817  : 	return m_Buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 818  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BWideStringClass@@QBEPB_WXZ ENDP			; WideStringClass::operator wchar_t const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4WideStringClass@@QAEABV0@PB_W@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv86 = -82						; size = 2
tv83 = -80						; size = 4
tv80 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4WideStringClass@@QAEABV0@PB_W@Z PROC			; WideStringClass::operator=, COMDAT
; _this$ = ecx

; 886  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 	if (string)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 888  : 	{
; 889  : 		int len = (int)wcslen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	add	ecx, 2
	mov	DWORD PTR tv83[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv80[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv86[ebp], ax
	add	DWORD PTR tv80[ebp], 2
	cmp	WORD PTR tv86[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv80[ebp]
	sub	ecx, DWORD PTR tv83[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 890  : 		Uninitialised_Grow (len + 1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@WideStringClass@@AAEXH@Z ; WideStringClass::Uninitialised_Grow

; 891  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@WideStringClass@@AAEXH@Z	; WideStringClass::Store_Length

; 892  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (wchar_t));		

	mov	eax, DWORD PTR _len$1[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 893  : 	}
; 894  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 895  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WideStringClass@@QAEABV0@PB_W@Z ENDP			; WideStringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4WideStringClass@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4WideStringClass@@QAEABV0@ABV0@@Z PROC		; WideStringClass::operator=, COMDAT
; _this$ = ecx

; 831  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 832  : 	return operator= ((const wchar_t *)string);

	mov	ecx, DWORD PTR _string$[ebp]
	call	??BWideStringClass@@QBEPB_WXZ		; WideStringClass::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4WideStringClass@@QAEABV0@PB_W@Z	; WideStringClass::operator=

; 833  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4WideStringClass@@QAEABV0@ABV0@@Z ENDP		; WideStringClass::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??1WideStringClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WideStringClass@@QAE@XZ PROC				; WideStringClass::~WideStringClass, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@WideStringClass@@AAEXXZ	; WideStringClass::Free_String

; 780  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1WideStringClass@@QAE@XZ ENDP				; WideStringClass::~WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0WideStringClass@@QAE@ABV0@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_string$ = 8						; size = 4
_hint_temporary$ = 12					; size = 1
??0WideStringClass@@QAE@ABV0@_N@Z PROC			; WideStringClass::WideStringClass, COMDAT
; _this$ = ecx

; 749  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 750  : 	if (hint_temporary || (string.Get_Length()>1))

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	test	eax, eax
	jne	SHORT $LN1@WideString
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	cmp	eax, 1
	jle	SHORT $LN2@WideString
$LN1@WideString:

; 751  : 	{
; 752  : 		Get_String(string.Get_Length()+1, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	call	?Get_Length@WideStringClass@@QBEHXZ	; WideStringClass::Get_Length
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@WideStringClass@@AAEXH_N@Z	; WideStringClass::Get_String
$LN2@WideString:

; 753  : 	}
; 754  : 	(*this) = string;

	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4WideStringClass@@QAEABV0@ABV0@@Z	; WideStringClass::operator=

; 755  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0WideStringClass@@QAE@ABV0@_N@Z ENDP			; WideStringClass::WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??0WideStringClass@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initial_len$ = 8					; size = 4
_hint_temporary$ = 12					; size = 1
??0WideStringClass@@QAE@H_N@Z PROC			; WideStringClass::WideStringClass, COMDAT
; _this$ = ecx

; 737  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@WideStringClass@@0AAPA_WA ; WideStringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 738  : 	Get_String (initial_len, hint_temporary);

	movzx	eax, BYTE PTR _hint_temporary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_String@WideStringClass@@AAEXH_N@Z	; WideStringClass::Get_String

; 739  : 	m_Buffer[0] = m_NullChar;

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?m_NullChar@WideStringClass@@0AA_WA ; WideStringClass::m_NullChar
	mov	cx, WORD PTR [ecx]
	mov	WORD PTR [eax+edx], cx

; 740  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0WideStringClass@@QAE@H_N@Z ENDP			; WideStringClass::WideStringClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z PROC ; StringClass::Set_Buffer_And_Allocated_Length, COMDAT
; _this$ = ecx

; 548  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 549  : 	Free_String ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@StringClass@@AAEXXZ	; StringClass::Free_String

; 550  : 	m_Buffer = buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax], ecx

; 551  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Set_Buffer

; 552  : 	{
; 553  : 		Store_Allocated_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Allocated_Length@StringClass@@AAEXH@Z ; StringClass::Store_Allocated_Length

; 554  : 		Store_Length (0);		

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Set_Buffer:

; 555  : 	}
; 556  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z ENDP ; StringClass::Set_Buffer_And_Allocated_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Allocated_Length@StringClass@@ABEHXZ
_TEXT	SEGMENT
_header$1 = -12						; size = 4
_allocated_length$ = -8					; size = 4
_this$ = -4						; size = 4
?Get_Allocated_Length@StringClass@@ABEHXZ PROC		; StringClass::Get_Allocated_Length, COMDAT
; _this$ = ecx

; 521  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 	int allocated_length = 0;

	mov	DWORD PTR _allocated_length$[ebp], 0

; 523  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@Get_Alloca

; 524  : 	{
; 525  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 526  : 		allocated_length = header->allocated_length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _allocated_length$[ebp], ecx
$LN1@Get_Alloca:

; 527  : 	}
; 528  : 	return allocated_length;

	mov	eax, DWORD PTR _allocated_length$[ebp]

; 529  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Allocated_Length@StringClass@@ABEHXZ ENDP		; StringClass::Get_Allocated_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ PROC	; StringClass::Get_Header, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	return reinterpret_cast<HEADER *>(((char *)m_Buffer) - sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 8

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ENDP	; StringClass::Get_Header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Allocated_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_allocated_length$ = 8					; size = 4
?Store_Allocated_Length@StringClass@@AAEXH@Z PROC	; StringClass::Store_Allocated_Length, COMDAT
; _this$ = ecx

; 573  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 574  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Allo

; 575  : 	{
; 576  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 577  : 		header->allocated_length = allocated_length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _allocated_length$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Store_Allo:

; 578  : 	}
; 579  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Allocated_Length@StringClass@@AAEXH@Z ENDP	; StringClass::Store_Allocated_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Store_Length@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_header$1 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Store_Length@StringClass@@AAEXH@Z PROC			; StringClass::Store_Length, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Store_Leng

; 584  : 	{
; 585  : 		HEADER *header = Get_Header();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 586  : 		header->length = length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Store_Leng:

; 587  : 	}
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Store_Length@StringClass@@AAEXH@Z ENDP			; StringClass::Store_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Free_String@StringClass@@AAEXXZ
_TEXT	SEGMENT
$T1 = -88						; size = 4
_buffer$2 = -20						; size = 4
_index$3 = -16						; size = 4
_diff$ = -12						; size = 4
_buffer_base$ = -8					; size = 4
_this$ = -4						; size = 4
?Free_String@StringClass@@AAEXXZ PROC			; StringClass::Free_String, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	if (m_Buffer == m_EmptyString) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@Free_Strin
	jmp	$LN4@Free_Strin
$LN3@Free_Strin:

; 99   : 
; 100  : 	ptrdiff_t buffer_base = intptr_t(m_Buffer) - sizeof(_HEADER);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 8
	mov	DWORD PTR _buffer_base$[ebp], ecx

; 101  : 	ptrdiff_t diff = buffer_base - intptr_t(TempStrings[0]);

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 256				; 00000100H
	imul	eax, 0
	lea	ecx, DWORD PTR ?TempStrings@StringClass@@0PAY0BAA@DA[edx+eax]
	mov	edx, DWORD PTR _buffer_base$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _diff$[ebp], edx

; 102  : 
; 103  : 	if (diff >= 0 && diff < MAX_TEMP_BYTES * MAX_TEMP_STRING)

	js	SHORT $LN2@Free_Strin
	cmp	DWORD PTR _diff$[ebp], 2048		; 00000800H
	jge	SHORT $LN2@Free_Strin

; 104  : 	{
; 105  : 		// It was a temp string, let's get the index and cast Undead.
; 106  : 		ptrdiff_t index = diff / MAX_TEMP_BYTES;

	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	sar	eax, 8
	mov	DWORD PTR _index$3[ebp], eax

; 107  : 		m_Buffer[0] = m_NullChar;

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?m_NullChar@StringClass@@0AADA ; StringClass::m_NullChar
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+edx], cl

; 108  : 		FreeTempStrings |= 1 << index;

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$3[ebp]
	shl	eax, cl
	or	eax, DWORD PTR ?FreeTempStrings@StringClass@@0IA[edx]
	mov	ecx, DWORD PTR __tls_index
	mov	edx, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR ?FreeTempStrings@StringClass@@0IA[ecx], eax

; 109  : 	}
; 110  : 	else

	jmp	SHORT $LN1@Free_Strin
$LN2@Free_Strin:

; 111  : 	{
; 112  : 		char* buffer = (char*)buffer_base;

	mov	eax, DWORD PTR _buffer_base$[ebp]
	mov	DWORD PTR _buffer$2[ebp], eax

; 113  : 		delete[] buffer;

	push	OFFSET ??_C@_0BJ@MIFLMFEP@StringClass?3?3Free_String?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Free_String@StringClass@@AAEXXZ@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN7@Free_Strin
	xor	edx, edx
	jne	SHORT $LN6@Free_Strin
	mov	eax, DWORD PTR ?__LINE__Var@?1??Free_String@StringClass@@AAEXXZ@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@Free_Strin:
	jmp	SHORT $LN1@Free_Strin
$LN7@Free_Strin:
	mov	edx, DWORD PTR _buffer$2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Free_Strin:

; 114  : 	}
; 115  : 
; 116  : 	m_Buffer = m_EmptyString;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN4@Free_Strin:

; 117  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Free_String@StringClass@@AAEXXZ ENDP			; StringClass::Free_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Uninitialised_Grow@StringClass@@AAEXH@Z
_TEXT	SEGMENT
_x$1 = -8						; size = 4
_this$ = -4						; size = 4
_new_len$ = 8						; size = 4
?Uninitialised_Grow@StringClass@@AAEXH@Z PROC		; StringClass::Uninitialised_Grow, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	if (new_len > Get_Allocated_Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Allocated_Length@StringClass@@ABEHXZ ; StringClass::Get_Allocated_Length
	cmp	DWORD PTR _new_len$[ebp], eax
	jle	SHORT $LN1@Uninitiali

; 88   : 	{
; 89   : 		char *x = Allocate_Buffer(new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Allocate_Buffer@StringClass@@AAEPADH@Z	; StringClass::Allocate_Buffer
	mov	DWORD PTR _x$1[ebp], eax

; 90   : 		Free_String();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@StringClass@@AAEXXZ	; StringClass::Free_String

; 91   : 		Set_Buffer_And_Allocated_Length(x,new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z ; StringClass::Set_Buffer_And_Allocated_Length
$LN1@Uninitiali:

; 92   : 	}
; 93   : 	Store_Length(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 94   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Uninitialised_Grow@StringClass@@AAEXH@Z ENDP		; StringClass::Uninitialised_Grow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Resize@StringClass@@AAEXH@Z
_TEXT	SEGMENT
tv75 = -85						; size = 1
tv74 = -84						; size = 4
tv73 = -80						; size = 4
tv72 = -76						; size = 4
_x$1 = -8						; size = 4
_this$ = -4						; size = 4
_new_len$ = 8						; size = 4
?Resize@StringClass@@AAEXH@Z PROC			; StringClass::Resize, COMDAT
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 	if (new_len > Get_Allocated_Length())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Allocated_Length@StringClass@@ABEHXZ ; StringClass::Get_Allocated_Length
	cmp	DWORD PTR _new_len$[ebp], eax
	jle	SHORT $LN2@Resize

; 77   : 	{
; 78   : 		char *x = Allocate_Buffer(new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Allocate_Buffer@StringClass@@AAEPADH@Z	; StringClass::Allocate_Buffer
	mov	DWORD PTR _x$1[ebp], eax

; 79   : 		strcpy(x,m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _x$1[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN4@Resize:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv75[ebp], dl
	mov	eax, DWORD PTR tv73[ebp]
	mov	cl, BYTE PTR tv75[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR tv72[ebp]
	add	edx, 1
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	add	eax, 1
	mov	DWORD PTR tv73[ebp], eax
	cmp	BYTE PTR tv75[ebp], 0
	jne	SHORT $LN4@Resize

; 80   : 		Free_String();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@StringClass@@AAEXXZ	; StringClass::Free_String

; 81   : 		Set_Buffer_And_Allocated_Length(x,new_len);

	mov	eax, DWORD PTR _new_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z ; StringClass::Set_Buffer_And_Allocated_Length
$LN2@Resize:

; 82   : 	}
; 83   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Resize@StringClass@@AAEXH@Z ENDP			; StringClass::Resize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Allocate_Buffer@StringClass@@AAEPADH@Z
_TEXT	SEGMENT
tv78 = -84						; size = 4
$T1 = -80						; size = 4
_header$ = -12						; size = 4
_buffer$ = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Allocate_Buffer@StringClass@@AAEPADH@Z PROC		; StringClass::Allocate_Buffer, COMDAT
; _this$ = ecx

; 559  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 	char *buffer = new char[(sizeof (char) * length) + sizeof (StringClass::_HEADER)];

	push	OFFSET ??_C@_0BN@KPANAABL@StringClass?3?3Allocate_Buffer?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Allocate_Buffer@StringClass@@AAEPADH@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0DJ@EFHDACI@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN4@Allocate_B
	xor	edx, edx
	jne	SHORT $LN3@Allocate_B
	mov	eax, DWORD PTR ?__LINE__Var@?1??Allocate_Buffer@StringClass@@AAEPADH@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1HC@IKKBAMML@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN3@Allocate_B:
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN5@Allocate_B
$LN4@Allocate_B:
	mov	edx, DWORD PTR _length$[ebp]
	add	edx, 8
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv78[ebp], eax
$LN5@Allocate_B:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _buffer$[ebp], ecx

; 561  : 	HEADER *header = reinterpret_cast<HEADER *>(buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _header$[ebp], eax

; 562  : 	header->length = 0;

	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax+4], 0

; 563  : 	header->allocated_length = length;

	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx

; 564  : 	return reinterpret_cast<char *>(buffer + sizeof (StringClass::_HEADER));

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 8

; 565  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Allocate_Buffer@StringClass@@AAEPADH@Z ENDP		; StringClass::Allocate_Buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Get_String@StringClass@@AAEXH_N@Z
_TEXT	SEGMENT
_buffer$1 = -12						; size = 4
_index$2 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
_is_temp$ = 12						; size = 1
?Get_String@StringClass@@AAEXH_N@Z PROC			; StringClass::Get_String, COMDAT
; _this$ = ecx

; 60   : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 	if (!is_temp && !length) Set_Buffer_And_Allocated_Length(m_EmptyString, 0);

	movzx	eax, BYTE PTR _is_temp$[ebp]
	test	eax, eax
	jne	SHORT $LN6@Get_String
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN6@Get_String
	push	0
	mov	eax, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z ; StringClass::Set_Buffer_And_Allocated_Length
	jmp	$LN7@Get_String
$LN6@Get_String:

; 62   : 	else if (is_temp && length < MAX_TEMP_LEN && FreeTempStrings)

	movzx	eax, BYTE PTR _is_temp$[ebp]
	test	eax, eax
	je	$LN4@Get_String
	cmp	DWORD PTR _length$[ebp], 248		; 000000f8H
	jge	$LN4@Get_String
	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR ?FreeTempStrings@StringClass@@0IA[edx], 0
	je	$LN4@Get_String

; 63   : 	{
; 64   : 		uint32 index = 0;

	mov	DWORD PTR _index$2[ebp], 0

; 65   : 		BitScanForward((DWORD*)&index, FreeTempStrings); // Find the first free temp string

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	bsf	eax, DWORD PTR ?FreeTempStrings@StringClass@@0IA[edx]
	mov	DWORD PTR _index$2[ebp], eax

; 66   : 		FreeTempStrings &= ~(1 << index); // Remove it from the free pool

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$2[ebp]
	shl	eax, cl
	not	eax
	and	eax, DWORD PTR ?FreeTempStrings@StringClass@@0IA[edx]
	mov	ecx, DWORD PTR __tls_index
	mov	edx, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR ?FreeTempStrings@StringClass@@0IA[ecx], eax

; 67   : 		char* buffer = TempStrings[index] + sizeof(_HEADER);

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _index$2[ebp]
	shl	eax, 8
	lea	ecx, DWORD PTR ?TempStrings@StringClass@@0PAY0BAA@DA[edx+eax+8]
	mov	DWORD PTR _buffer$1[ebp], ecx

; 68   : 		Set_Buffer_And_Allocated_Length(buffer, MAX_TEMP_LEN);

	push	248					; 000000f8H
	mov	eax, DWORD PTR _buffer$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z ; StringClass::Set_Buffer_And_Allocated_Length
	jmp	SHORT $LN7@Get_String
$LN4@Get_String:

; 69   : 	}
; 70   : 	else if (length > 0) Set_Buffer_And_Allocated_Length(Allocate_Buffer(length), length);

	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN2@Get_String
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Allocate_Buffer@StringClass@@AAEPADH@Z	; StringClass::Allocate_Buffer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set_Buffer_And_Allocated_Length@StringClass@@AAEXPADH@Z ; StringClass::Set_Buffer_And_Allocated_Length
	jmp	SHORT $LN7@Get_String
$LN2@Get_String:

; 71   : 	else Free_String();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free_String@StringClass@@AAEXXZ	; StringClass::Free_String
$LN7@Get_String:

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Get_String@StringClass@@AAEXH_N@Z ENDP			; StringClass::Get_String
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Replace@StringClass@@QAEHPBD0_NH@Z
_TEXT	SEGMENT
tv75 = -144						; size = 4
tv72 = -144						; size = 4
tv220 = -137						; size = 1
tv208 = -137						; size = 1
tv217 = -136						; size = 4
tv205 = -136						; size = 4
tv214 = -132						; size = 4
tv202 = -132						; size = 4
tv156 = -132						; size = 4
tv147 = -132						; size = 4
tv142 = -132						; size = 4
tv91 = -132						; size = 4
tv87 = -132						; size = 4
$T1 = -128						; size = 4
$T2 = -124						; size = 4
$T3 = -120						; size = 4
_postreplaceindex$4 = -52				; size = 4
_postsearchindex$5 = -48				; size = 4
_oldnewstring$6 = -44					; size = 4
_oldnewstringlen$7 = -40				; size = 4
_replaceindex$8 = -36					; size = 4
_foundPtr$9 = -32					; size = 4
_replacelen$ = -28					; size = 4
_searchlen$ = -24					; size = 4
_searchPtr$ = -20					; size = 4
_newstringlen$ = -16					; size = 4
_newstring$ = -12					; size = 4
_nReplacements$ = -8					; size = 4
_this$ = -4						; size = 4
_search$ = 8						; size = 4
_replace$ = 12						; size = 4
_bCaseSensitive$ = 16					; size = 1
_maxCount$ = 20						; size = 4
?Replace@StringClass@@QAEHPBD0_NH@Z PROC		; StringClass::Replace, COMDAT
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 	if (m_Buffer == m_EmptyString) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN8@Replace
	xor	eax, eax
	jmp	$LN9@Replace
$LN8@Replace:

; 126  : 
; 127  :   int nReplacements = 0;

	mov	DWORD PTR _nReplacements$[ebp], 0

; 128  : 
; 129  :   char* newstring = NULL;             // The modified string, NULL until we make a change

	mov	DWORD PTR _newstring$[ebp], 0

; 130  :   int newstringlen = Get_Length()+1;  // The length of the modified string

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Length@StringClass@@QBEHXZ		; StringClass::Get_Length
	add	eax, 1
	mov	DWORD PTR _newstringlen$[ebp], eax

; 131  :   const char* searchPtr = m_Buffer;   // The starting point for the next search, always lastreplacement+1

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _searchPtr$[ebp], ecx

; 132  : 
; 133  :   // Figure out lengths in advance to avoid doing it repeatedly
; 134  :   int searchlen = strlen(search);

	mov	eax, DWORD PTR _search$[ebp]
	mov	DWORD PTR tv202[ebp], eax
	mov	ecx, DWORD PTR tv202[ebp]
	add	ecx, 1
	mov	DWORD PTR tv205[ebp], ecx
$LL28@Replace:
	mov	edx, DWORD PTR tv202[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv208[ebp], al
	add	DWORD PTR tv202[ebp], 1
	cmp	BYTE PTR tv208[ebp], 0
	jne	SHORT $LL28@Replace
	mov	ecx, DWORD PTR tv202[ebp]
	sub	ecx, DWORD PTR tv205[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _searchlen$[ebp], edx

; 135  :   int replacelen = strlen(replace);

	mov	eax, DWORD PTR _replace$[ebp]
	mov	DWORD PTR tv214[ebp], eax
	mov	ecx, DWORD PTR tv214[ebp]
	add	ecx, 1
	mov	DWORD PTR tv217[ebp], ecx
$LL29@Replace:
	mov	edx, DWORD PTR tv214[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv220[ebp], al
	add	DWORD PTR tv214[ebp], 1
	cmp	BYTE PTR tv220[ebp], 0
	jne	SHORT $LL29@Replace
	mov	ecx, DWORD PTR tv214[ebp]
	sub	ecx, DWORD PTR tv217[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _replacelen$[ebp], edx
$LN7@Replace:

; 136  : 
; 137  :   while ( NULL != searchPtr && (-1 == maxCount || nReplacements < maxCount) )

	cmp	DWORD PTR _searchPtr$[ebp], 0
	je	$LN6@Replace
	cmp	DWORD PTR _maxCount$[ebp], -1
	je	SHORT $LN5@Replace
	mov	eax, DWORD PTR _nReplacements$[ebp]
	cmp	eax, DWORD PTR _maxCount$[ebp]
	jge	$LN6@Replace
$LN5@Replace:

; 138  :   {
; 139  :     // Find the next instance of the search string
; 140  :     const char* foundPtr = ( bCaseSensitive ) ? stristr(searchPtr,search) : strstr(searchPtr,search);

	movzx	eax, BYTE PTR _bCaseSensitive$[ebp]
	test	eax, eax
	je	SHORT $LN11@Replace
	mov	ecx, DWORD PTR _search$[ebp]
	push	ecx
	mov	edx, DWORD PTR _searchPtr$[ebp]
	push	edx
	call	?stristr@@YAPBDPBD0@Z			; stristr
	add	esp, 8
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN12@Replace
$LN11@Replace:
	mov	eax, DWORD PTR _search$[ebp]
	push	eax
	mov	ecx, DWORD PTR _searchPtr$[ebp]
	push	ecx
	call	DWORD PTR __imp__strstr
	add	esp, 8
	mov	DWORD PTR tv87[ebp], eax
$LN12@Replace:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _foundPtr$9[ebp], edx

; 141  :     searchPtr = NULL;

	mov	DWORD PTR _searchPtr$[ebp], 0

; 142  : 
; 143  :     if ( NULL != foundPtr )

	cmp	DWORD PTR _foundPtr$9[ebp], 0
	je	$LN4@Replace

; 144  :     {
; 145  :       // Figure out the 0-based index of the first character to be replaced
; 146  :       int replaceindex = (int)foundPtr - (int)((NULL==newstring)?m_Buffer:newstring);

	cmp	DWORD PTR _newstring$[ebp], 0
	jne	SHORT $LN13@Replace
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], ecx
	jmp	SHORT $LN14@Replace
$LN13@Replace:
	mov	edx, DWORD PTR _newstring$[ebp]
	mov	DWORD PTR tv91[ebp], edx
$LN14@Replace:
	mov	eax, DWORD PTR _foundPtr$9[ebp]
	sub	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR _replaceindex$8[ebp], eax

; 147  : 
; 148  :       // Allocate a new string to fit the replacement data if necessary
; 149  :       if ( searchlen != replacelen || NULL == newstring )

	mov	eax, DWORD PTR _searchlen$[ebp]
	cmp	eax, DWORD PTR _replacelen$[ebp]
	jne	SHORT $LN2@Replace
	cmp	DWORD PTR _newstring$[ebp], 0
	jne	$LN3@Replace
$LN2@Replace:

; 150  :       {
; 151  :         // Cache old data so we can clean up memory
; 152  :         int oldnewstringlen = newstringlen;

	mov	eax, DWORD PTR _newstringlen$[ebp]
	mov	DWORD PTR _oldnewstringlen$7[ebp], eax

; 153  :         char* oldnewstring = newstring;

	mov	eax, DWORD PTR _newstring$[ebp]
	mov	DWORD PTR _oldnewstring$6[ebp], eax

; 154  : 
; 155  :         newstringlen = oldnewstringlen + (replacelen-searchlen);

	mov	eax, DWORD PTR _replacelen$[ebp]
	sub	eax, DWORD PTR _searchlen$[ebp]
	add	eax, DWORD PTR _oldnewstringlen$7[ebp]
	mov	DWORD PTR _newstringlen$[ebp], eax

; 156  :         newstring = new char[newstringlen];

	push	OFFSET ??_C@_0BF@IPJLDOC@StringClass?3?3Replace?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA
	add	eax, 32					; 00000020H
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN16@Replace
	xor	edx, edx
	jne	SHORT $LN15@Replace
	mov	eax, DWORD PTR ?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA
	add	eax, 32					; 00000020H
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN15@Replace:
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN17@Replace
$LN16@Replace:
	mov	edx, DWORD PTR _newstringlen$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv142[ebp], eax
$LN17@Replace:
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _newstring$[ebp], ecx

; 157  : 
; 158  :         // Copy characters preceeding the string to be replaced
; 159  :         memcpy(newstring, (NULL==oldnewstring)?m_Buffer:oldnewstring, replaceindex);

	cmp	DWORD PTR _oldnewstring$6[ebp], 0
	jne	SHORT $LN18@Replace
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv147[ebp], ecx
	jmp	SHORT $LN19@Replace
$LN18@Replace:
	mov	edx, DWORD PTR _oldnewstring$6[ebp]
	mov	DWORD PTR tv147[ebp], edx
$LN19@Replace:
	mov	eax, DWORD PTR _replaceindex$8[ebp]
	push	eax
	mov	ecx, DWORD PTR tv147[ebp]
	push	ecx
	mov	edx, DWORD PTR _newstring$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 160  : 
; 161  :         // Copy characters following the string to be replaced
; 162  :         int postsearchindex = replaceindex+searchlen;

	mov	eax, DWORD PTR _replaceindex$8[ebp]
	add	eax, DWORD PTR _searchlen$[ebp]
	mov	DWORD PTR _postsearchindex$5[ebp], eax

; 163  :         int postreplaceindex = replaceindex+replacelen;

	mov	eax, DWORD PTR _replaceindex$8[ebp]
	add	eax, DWORD PTR _replacelen$[ebp]
	mov	DWORD PTR _postreplaceindex$4[ebp], eax

; 164  :         memcpy(newstring+postreplaceindex, ((NULL==oldnewstring)?m_Buffer:oldnewstring)+postsearchindex, oldnewstringlen-postsearchindex);

	cmp	DWORD PTR _oldnewstring$6[ebp], 0
	jne	SHORT $LN20@Replace
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv156[ebp], ecx
	jmp	SHORT $LN21@Replace
$LN20@Replace:
	mov	edx, DWORD PTR _oldnewstring$6[ebp]
	mov	DWORD PTR tv156[ebp], edx
$LN21@Replace:
	mov	eax, DWORD PTR _oldnewstringlen$7[ebp]
	sub	eax, DWORD PTR _postsearchindex$5[ebp]
	push	eax
	mov	ecx, DWORD PTR tv156[ebp]
	add	ecx, DWORD PTR _postsearchindex$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _newstring$[ebp]
	add	edx, DWORD PTR _postreplaceindex$4[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 165  : 
; 166  :         delete [] oldnewstring;

	push	OFFSET ??_C@_0BF@IPJLDOC@StringClass?3?3Replace?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA
	add	eax, 42					; 0000002aH
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN23@Replace
	xor	edx, edx
	jne	SHORT $LN22@Replace
	mov	eax, DWORD PTR ?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA
	add	eax, 42					; 0000002aH
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN22@Replace:
	jmp	SHORT $LN3@Replace
$LN23@Replace:
	mov	edx, DWORD PTR _oldnewstring$6[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN3@Replace:

; 167  :       }
; 168  :       
; 169  :       // Copy in the replacement string in the location of the located search string
; 170  :       memcpy(newstring+replaceindex, replace, replacelen);

	mov	eax, DWORD PTR _replacelen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replace$[ebp]
	push	ecx
	mov	edx, DWORD PTR _newstring$[ebp]
	add	edx, DWORD PTR _replaceindex$8[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 171  : 
; 172  :       // Update the search pointer
; 173  :       searchPtr = newstring + replaceindex + replacelen;

	mov	eax, DWORD PTR _newstring$[ebp]
	add	eax, DWORD PTR _replaceindex$8[ebp]
	add	eax, DWORD PTR _replacelen$[ebp]
	mov	DWORD PTR _searchPtr$[ebp], eax

; 174  : 
; 175  :       nReplacements++;

	mov	eax, DWORD PTR _nReplacements$[ebp]
	add	eax, 1
	mov	DWORD PTR _nReplacements$[ebp], eax
$LN4@Replace:

; 176  :     }
; 177  :   }

	jmp	$LN7@Replace
$LN6@Replace:

; 178  : 
; 179  :   // Update the string with the modified version, if any
; 180  :   if ( NULL != newstring )

	cmp	DWORD PTR _newstring$[ebp], 0
	je	SHORT $LN1@Replace

; 181  :   {
; 182  :     *this = newstring;

	mov	eax, DWORD PTR _newstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 183  :     delete [] newstring;

	push	OFFSET ??_C@_0BF@IPJLDOC@StringClass?3?3Replace?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA
	add	eax, 59					; 0000003bH
	push	eax
	push	OFFSET ??_C@_0DL@NHELAMPG@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	je	SHORT $LN26@Replace
	xor	edx, edx
	jne	SHORT $LN25@Replace
	mov	eax, DWORD PTR ?__LINE__Var@?1??Replace@StringClass@@QAEHPBD0_NH@Z@4JA
	add	eax, 59					; 0000003bH
	push	eax
	push	OFFSET ??_C@_1HG@CPFAMGPO@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN25@Replace:
	jmp	SHORT $LN1@Replace
$LN26@Replace:
	mov	edx, DWORD PTR _newstring$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Replace:

; 184  :   }
; 185  : 
; 186  :   return nReplacements;

	mov	eax, DWORD PTR _nReplacements$[ebp]
$LN9@Replace:

; 187  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Replace@StringClass@@QAEHPBD0_NH@Z ENDP		; StringClass::Replace
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Release_Resources@StringClass@@SAXXZ
_TEXT	SEGMENT
?Release_Resources@StringClass@@SAXXZ PROC		; StringClass::Release_Resources, COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Release_Resources@StringClass@@SAXXZ ENDP		; StringClass::Release_Resources
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Copy_Wide@StringClass@@QAE_NPB_W@Z
_TEXT	SEGMENT
_len$1 = -12						; size = 4
_ps$2 = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?Copy_Wide@StringClass@@QAE_NPB_W@Z PROC		; StringClass::Copy_Wide, COMDAT
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	if (str)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN2@Copy_Wide

; 192  : 	{
; 193  : 		mbstate_t ps;
; 194  : 		memset(&ps,0,sizeof(ps));

	xor	eax, eax
	mov	DWORD PTR _ps$2[ebp], eax

; 195  : 		int len = (int)wcsrtombs(0,&str,0,&ps);

	lea	eax, DWORD PTR _ps$2[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__wcsrtombs
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$1[ebp], eax

; 196  : 		if (len > 0)

	cmp	DWORD PTR _len$1[ebp], 0
	jle	SHORT $LN1@Copy_Wide

; 197  : 		{
; 198  : 			Uninitialised_Grow(len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@StringClass@@AAEXH@Z ; StringClass::Uninitialised_Grow

; 199  : 			wcsrtombs(m_Buffer,&str,len,&ps);

	lea	eax, DWORD PTR _ps$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__wcsrtombs
	add	esp, 16					; 00000010H

; 200  : 			m_Buffer[len] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _len$1[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 201  : 			Store_Length(len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 202  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@Copy_Wide
$LN1@Copy_Wide:

; 203  : 		}
; 204  : 		return false;

	xor	al, al
	jmp	SHORT $LN3@Copy_Wide
$LN2@Copy_Wide:

; 205  : 	}
; 206  : 	return false;

	xor	al, al
$LN3@Copy_Wide:

; 207  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Copy_Wide@StringClass@@QAE_NPB_W@Z ENDP		; StringClass::Copy_Wide
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Format_Args@StringClass@@QAAHPBDABQAD@Z
_TEXT	SEGMENT
_x$ = -516						; size = 4
_temp_buffer$ = -512					; size = 512
_this$ = 8						; size = 4
_format$ = 12						; size = 4
_arg_list$ = 16						; size = 4
?Format_Args@StringClass@@QAAHPBDABQAD@Z PROC		; StringClass::Format_Args, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 580				; 00000244H
	push	ebx
	push	esi
	push	edi

; 53   : 	char temp_buffer[512];
; 54   : 	int x = vsnprintf(temp_buffer,512,format,arg_list);

	mov	eax, DWORD PTR _arg_list$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _format$[ebp]
	push	edx
	push	512					; 00000200H
	lea	eax, DWORD PTR _temp_buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax

; 55   : 	*this = (const char *)temp_buffer;

	lea	eax, DWORD PTR _temp_buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 56   : 	return x;

	mov	eax, DWORD PTR _x$[ebp]

; 57   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Format_Args@StringClass@@QAAHPBDABQAD@Z ENDP		; StringClass::Format_Args
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.cpp
;	COMDAT ?Format@StringClass@@QAAHPBDZZ
_TEXT	SEGMENT
_x$ = -520						; size = 4
_temp_buffer$ = -516					; size = 512
_arg_list$ = -4						; size = 4
_this$ = 8						; size = 4
_format$ = 12						; size = 4
?Format@StringClass@@QAAHPBDZZ PROC			; StringClass::Format, COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 584				; 00000248H
	push	ebx
	push	esi
	push	edi

; 42   : 	va_list arg_list;
; 43   : 	va_start(arg_list,format);

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _arg_list$[ebp], eax

; 44   : 	char temp_buffer[512];
; 45   : 	int x = vsnprintf(temp_buffer,512,format,arg_list);

	mov	eax, DWORD PTR _arg_list$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _temp_buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax

; 46   : 	*this = (const char *)temp_buffer;

	lea	eax, DWORD PTR _temp_buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4StringClass@@QAEABV0@PBD@Z		; StringClass::operator=

; 47   : 	va_end(arg_list);

	mov	DWORD PTR _arg_list$[ebp], 0

; 48   : 	return x;

	mov	eax, DWORD PTR _x$[ebp]

; 49   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Format@StringClass@@QAAHPBDZZ ENDP			; StringClass::Format
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ?Get_Length@StringClass@@QBEHXZ
_TEXT	SEGMENT
tv73 = -92						; size = 4
tv90 = -85						; size = 1
tv87 = -84						; size = 4
tv84 = -80						; size = 4
_header$1 = -12						; size = 4
_length$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Length@StringClass@@QBEHXZ PROC			; StringClass::Get_Length, COMDAT
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 534  : 	if (m_Buffer != m_EmptyString)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?m_EmptyString@StringClass@@0AAPADA ; StringClass::m_EmptyString
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@Get_Length

; 535  : 	{
; 536  : 		HEADER *header = Get_Header ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Header@StringClass@@ABEPAU_HEADER@1@XZ ; StringClass::Get_Header
	mov	DWORD PTR _header$1[ebp], eax

; 537  : 		length = header->length;

	mov	eax, DWORD PTR _header$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx

; 538  : 		if (length == 0)

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@Get_Length

; 539  : 		{
; 540  : 			length = (int)strlen (m_Buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 1
	mov	DWORD PTR tv87[ebp], edx
$LL5@Get_Length:
	mov	eax, DWORD PTR tv84[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv90[ebp], cl
	add	DWORD PTR tv84[ebp], 1
	cmp	BYTE PTR tv90[ebp], 0
	jne	SHORT $LL5@Get_Length
	mov	edx, DWORD PTR tv84[ebp]
	sub	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 541  : 			((StringClass *)this)->Store_Length (length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length
$LN2@Get_Length:

; 542  : 		}
; 543  : 	}
; 544  : 	return length;

	mov	eax, DWORD PTR _length$[ebp]

; 545  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Length@StringClass@@QBEHXZ ENDP			; StringClass::Get_Length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_string.h
;	COMDAT ??4StringClass@@QAEABV0@PBD@Z
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
??4StringClass@@QAEABV0@PBD@Z PROC			; StringClass::operator=, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (string != 0)

	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN1@operator

; 290  : 	{
; 291  : 		int len = (int)strlen (string);

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL4@operator:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL4@operator
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$1[ebp], edx

; 292  : 		Uninitialised_Grow (len+1);

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialised_Grow@StringClass@@AAEXH@Z ; StringClass::Uninitialised_Grow

; 293  : 		Store_Length (len);

	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Store_Length@StringClass@@AAEXH@Z	; StringClass::Store_Length

; 294  : 		memcpy (m_Buffer, string, (len + 1) * sizeof (char));		

	mov	eax, DWORD PTR _len$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:

; 295  : 	}
; 296  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringClass@@QAEABV0@PBD@Z ENDP			; StringClass::operator=
_TEXT	ENDS
END
