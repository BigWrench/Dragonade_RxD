; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	X:\GitHub\Renegade\Dragonade_RxD\scripts\multilist.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Enter@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Enter
PUBLIC	?Leave@FastCriticalSectionClass@@AAEXXZ		; FastCriticalSectionClass::Leave
PUBLIC	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass
PUBLIC	??1LockClass@FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::LockClass::~LockClass
PUBLIC	??0FastCriticalSectionClass@@QAE@XZ		; FastCriticalSectionClass::FastCriticalSectionClass
PUBLIC	??2?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<MultiListNodeClass,256>::operator new
PUBLIC	??3?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<MultiListNodeClass,256>::operator delete
PUBLIC	??0MultiListNodeClass@@QAE@XZ			; MultiListNodeClass::MultiListNodeClass
PUBLIC	?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ; MultiListObjectClass::Get_List_Node
PUBLIC	?Set_List_Node@MultiListObjectClass@@QAEXPAVMultiListNodeClass@@@Z ; MultiListObjectClass::Set_List_Node
PUBLIC	?Internal_Add@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@_N@Z ; GenericMultiListClass::Internal_Add
PUBLIC	?Internal_Add_Tail@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@_N@Z ; GenericMultiListClass::Internal_Add_Tail
PUBLIC	?Internal_Add_After@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@PBV2@_N@Z ; GenericMultiListClass::Internal_Add_After
PUBLIC	?Internal_Remove@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@@Z ; GenericMultiListClass::Internal_Remove
PUBLIC	?Internal_Remove_List_Head@GenericMultiListClass@@IAEPAVMultiListObjectClass@@XZ ; GenericMultiListClass::Internal_Remove_List_Head
PUBLIC	?Is_In_List@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z ; GenericMultiListClass::Is_In_List
PUBLIC	?Is_Empty@GenericMultiListClass@@QBE_NXZ	; GenericMultiListClass::Is_Empty
PUBLIC	?Contains@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z ; GenericMultiListClass::Contains
PUBLIC	?getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance
PUBLIC	??0?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ ; ObjectPoolClass<MultiListNodeClass,256>::ObjectPoolClass<MultiListNodeClass,256>
PUBLIC	??1?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ ; ObjectPoolClass<MultiListNodeClass,256>::~ObjectPoolClass<MultiListNodeClass,256>
PUBLIC	?Allocate_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEPAVMultiListNodeClass@@XZ ; ObjectPoolClass<MultiListNodeClass,256>::Allocate_Object_Memory
PUBLIC	?Free_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@@Z ; ObjectPoolClass<MultiListNodeClass,256>::Free_Object_Memory
PUBLIC	?writeDummyPattern@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@K@Z ; ObjectPoolClass<MultiListNodeClass,256>::writeDummyPattern
PUBLIC	??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
PUBLIC	??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ ; `string'
PUBLIC	??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::instancex
PUBLIC	??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@51 ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::`local static guard'
PUBLIC	??_C@_0EG@DPFLNLJB@ObjectPoolClass?$DMclass?5MultiListN@ ; `string'
PUBLIC	??_C@_0FK@NKPBCFOI@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ ; `string'
PUBLIC	??_C@_0EA@GODEPPHP@ObjectPoolClass?$DMclass?5MultiListN@ ; `string'
EXTRN	_atexit:PROC
EXTRN	__imp___wassert:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__sprintf:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	?SetThreadTrackingInformation@@YAXPBDI0@Z:PROC	; SetThreadTrackingInformation
;	COMDAT ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@4V3@A
_BSS	SEGMENT
?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@4V3@A DB 014H DUP (?) ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::instancex
_BSS	ENDS
;	COMDAT ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@51
_BSS	SEGMENT
??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@51 DD 01H DUP (?) ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::`local static guard'
_BSS	ENDS
;	COMDAT ??_C@_0EA@GODEPPHP@ObjectPoolClass?$DMclass?5MultiListN@
CONST	SEGMENT
??_C@_0EA@GODEPPHP@ObjectPoolClass?$DMclass?5MultiListN@ DB 'ObjectPoolCl'
	DB	'ass<class MultiListNodeClass,256>::~ObjectPoolClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@NKPBCFOI@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
CONST	SEGMENT
??_C@_0FK@NKPBCFOI@?$CFd?5memory?5leaks?5found?5in?5ObjectP@ DB '%d memor'
	DB	'y leaks found in ObjectPoolClass<class MultiListNodeClass,256'
	DB	'>::~ObjectPoolClass', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@DPFLNLJB@ObjectPoolClass?$DMclass?5MultiListN@
CONST	SEGMENT
??_C@_0EG@DPFLNLJB@ObjectPoolClass?$DMclass?5MultiListN@ DB 'ObjectPoolCl'
	DB	'ass<class MultiListNodeClass,256>::Allocate_Object_Memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
CONST	SEGMENT
??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@ DB 'x'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'e'
	DB	00H, 'g', 00H, 'a', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'x', 00H, 'd', 00H, '\', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
CONST	SEGMENT
??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@ DB 'x:\github\re'
	DB	'negade\dragonade_rxd\scripts\engine_vector.h', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@YAXXZ
text$yd	SEGMENT
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@YAXXZ PROC ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::instancex
	call	??1?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ ; ObjectPoolClass<MultiListNodeClass,256>::~ObjectPoolClass<MultiListNodeClass,256>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@YAXXZ ENDP ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?writeDummyPattern@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@K@Z
_TEXT	SEGMENT
_endDword$ = -12					; size = 4
_dword$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
_pattern$ = 12						; size = 4
?writeDummyPattern@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@K@Z PROC ; ObjectPoolClass<MultiListNodeClass,256>::writeDummyPattern, COMDAT
; _this$ = ecx

; 1445 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1446 : #ifdef DEBUG
; 1447 : 		static_assert(sizeof(T) % 4 == 0, "Expected type size to be a multiple of 4.");
; 1448 : 		DWORD* dword = (DWORD*)&object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _dword$[ebp], eax

; 1449 : 		DWORD* endDword = (DWORD*)(&object+1);

	mov	eax, DWORD PTR _object$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _endDword$[ebp], eax

; 1450 : 		for (; dword < endDword; ++dword)

	jmp	SHORT $LN3@writeDummy
$LN2@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	add	eax, 4
	mov	DWORD PTR _dword$[ebp], eax
$LN3@writeDummy:
	mov	eax, DWORD PTR _dword$[ebp]
	cmp	eax, DWORD PTR _endDword$[ebp]
	jae	SHORT $LN4@writeDummy

; 1451 : 			*dword = pattern;

	mov	eax, DWORD PTR _dword$[ebp]
	mov	ecx, DWORD PTR _pattern$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN2@writeDummy
$LN4@writeDummy:

; 1452 : #endif
; 1453 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?writeDummyPattern@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@K@Z ENDP ; ObjectPoolClass<MultiListNodeClass,256>::writeDummyPattern
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Free_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@@Z
_TEXT	SEGMENT
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
_object$ = 8						; size = 4
?Free_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@@Z PROC ; ObjectPoolClass<MultiListNodeClass,256>::Free_Object_Memory, COMDAT
; _this$ = ecx

; 1436 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1437 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1438 : 		writeDummyPattern(object, 0xEDE7E10D);

	push	-303570675				; ede7e10dH
	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeDummyPattern@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@K@Z ; ObjectPoolClass<MultiListNodeClass,256>::writeDummyPattern

; 1439 : 		(T*&)object = FreeListHead;

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1440 : 		FreeListHead = &object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx

; 1441 : 		FreeObjectCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1442 : 	}

	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Free_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@@Z ENDP ; ObjectPoolClass<MultiListNodeClass,256>::Free_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ?Allocate_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEPAVMultiListNodeClass@@XZ
_TEXT	SEGMENT
tv82 = -96						; size = 4
$T1 = -92						; size = 4
$T2 = -88						; size = 4
_object$ = -20						; size = 4
_i$3 = -16						; size = 4
_newBlockListHead$4 = -12				; size = 4
_lock$ = -8						; size = 4
_this$ = -4						; size = 4
?Allocate_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEPAVMultiListNodeClass@@XZ PROC ; ObjectPoolClass<MultiListNodeClass,256>::Allocate_Object_Memory, COMDAT
; _this$ = ecx

; 1413 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		FastCriticalSectionClass::LockClass lock(ObjectPoolCS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ; FastCriticalSectionClass::LockClass::LockClass

; 1415 :  		if (!FreeListHead)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN4@Allocate_O

; 1416 : 		{
; 1417 : 			void* newBlockListHead = (void*)((void*)new char[sizeof(void*) + sizeof(T[BLOCK_SIZE])]);

	push	OFFSET ??_C@_0EG@DPFLNLJB@ObjectPoolClass?$DMclass?5MultiListN@
	push	1417					; 00000589H
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN8@Allocate_O
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_O
	push	1417					; 00000589H
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN7@Allocate_O:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN9@Allocate_O
$LN8@Allocate_O:
	push	5124					; 00001404H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN9@Allocate_O:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _newBlockListHead$4[ebp], ecx

; 1418 : 			*(void**)newBlockListHead = BlockListHead;

	mov	eax, DWORD PTR _newBlockListHead$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1419 : 			BlockListHead = newBlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newBlockListHead$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1420 : 			FreeListHead = (T*)((intptr_t)BlockListHead + sizeof(void*));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1421 : 			for (int i = 0; i < BLOCK_SIZE; i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@Allocate_O
$LN2@Allocate_O:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@Allocate_O:
	cmp	DWORD PTR _i$3[ebp], 256		; 00000100H
	jge	SHORT $LN1@Allocate_O

; 1422 : 				(T*&)FreeListHead[i] = &FreeListHead[i+1];

	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _i$3[ebp]
	imul	edx, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+ecx], eax
	jmp	SHORT $LN2@Allocate_O
$LN1@Allocate_O:

; 1423 : 			
; 1424 : 			(T*&)FreeListHead[BLOCK_SIZE-1] = NULL;

	mov	eax, 20					; 00000014H
	imul	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx], 0

; 1425 : 			FreeObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1426 : 			TotalObjectCount += BLOCK_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN4@Allocate_O:

; 1427 : 		}
; 1428 : 
; 1429 : 		T* object = FreeListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _object$[ebp], ecx

; 1430 : 		FreeListHead = *(T**)(FreeListHead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1431 : 		FreeObjectCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1432 : 		return object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1LockClass@FastCriticalSectionClass@@QAE@XZ ; FastCriticalSectionClass::LockClass::~LockClass
	mov	eax, DWORD PTR $T2[ebp]

; 1433 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Allocate_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEPAVMultiListNodeClass@@XZ ENDP ; ObjectPoolClass<MultiListNodeClass,256>::Allocate_Object_Memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??1?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
$T1 = -336						; size = 4
_nextBlock$2 = -268					; size = 4
_block$ = -264						; size = 4
_buffer$3 = -260					; size = 256
_this$ = -4						; size = 4
??1?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<MultiListNodeClass,256>::~ObjectPoolClass<MultiListNodeClass,256>, COMDAT
; _this$ = ecx

; 1393 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1394 : 		// If you hit the following assert, one or more objects were not freed.
; 1395 : 		if (FreeObjectCount != TotalObjectCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN3@ObjectPool

; 1396 : 		{
; 1397 : 			char buffer[256];
; 1398 : 			sprintf(buffer, "%d memory leaks found in " __FUNCTION__ "\n", TotalObjectCount - FreeObjectCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0FK@NKPBCFOI@?$CFd?5memory?5leaks?5found?5in?5ObjectP@
	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 1399 : 			OutputDebugStringA(buffer);

	lea	eax, DWORD PTR _buffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN3@ObjectPool:

; 1400 : 			// TODO: There are quite a few mem leaks of this kind. Fix them.
; 1401 : 		}
; 1402 : 
; 1403 : 		void* block = BlockListHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _block$[ebp], ecx
$LN2@ObjectPool:

; 1404 :  		while (block)

	cmp	DWORD PTR _block$[ebp], 0
	je	SHORT $LN4@ObjectPool

; 1405 : 		{
; 1406 : 			void* nextBlock = *(void**)block;

	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nextBlock$2[ebp], ecx

; 1407 : 			delete[] block;

	push	OFFSET ??_C@_0EA@GODEPPHP@ObjectPoolClass?$DMclass?5MultiListN@
	push	1407					; 0000057fH
	push	OFFSET ??_C@_0DJ@NKJHEMPA@x?3?2github?2renegade?2dragonade_rxd@
	call	?SetThreadTrackingInformation@@YAXPBDI0@Z ; SetThreadTrackingInformation
	add	esp, 12					; 0000000cH
	xor	eax, eax
	je	SHORT $LN7@ObjectPool
	xor	ecx, ecx
	jne	SHORT $LN6@ObjectPool
	push	1407					; 0000057fH
	push	OFFSET ??_C@_1HC@JEIHKHFK@?$AAx?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAr?$AAe?$AAn?$AAe?$AAg?$AAa?$AAd?$AAe?$AA?2?$AAd?$AAr?$AAa?$AAg?$AAo?$AAn?$AAa?$AAd?$AAe?$AA_?$AAr?$AAx?$AAd@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN6@ObjectPool:
	jmp	SHORT $LN8@ObjectPool
$LN7@ObjectPool:
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@ObjectPool:

; 1408 : 			block = nextBlock;

	mov	eax, DWORD PTR _nextBlock$2[ebp]
	mov	DWORD PTR _block$[ebp], eax

; 1409 : 		}

	jmp	SHORT $LN2@ObjectPool
$LN4@ObjectPool:

; 1410 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<MultiListNodeClass,256>::~ObjectPoolClass<MultiListNodeClass,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??0?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ PROC ; ObjectPoolClass<MultiListNodeClass,256>::ObjectPoolClass<MultiListNodeClass,256>, COMDAT
; _this$ = ecx

; 1384 : 	ObjectPoolClass()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FastCriticalSectionClass@@QAE@XZ	; FastCriticalSectionClass::FastCriticalSectionClass
	mov	eax, DWORD PTR [eax]

; 1385 : 	{
; 1386 : 		FreeListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1387 : 		BlockListHead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1388 : 		FreeObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1389 : 		TotalObjectCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1390 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ ENDP ; ObjectPoolClass<MultiListNodeClass,256>::ObjectPoolClass<MultiListNodeClass,256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\singleton.h
;	COMDAT ?getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ
_TEXT	SEGMENT
?getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ PROC ; Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 		static T instancex;

	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getInstanc
	mov	eax, DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@51
	or	eax, 1
	mov	DWORD PTR ??_B?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@51, eax
	mov	ecx, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::instancex
	call	??0?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAE@XZ ; ObjectPoolClass<MultiListNodeClass,256>::ObjectPoolClass<MultiListNodeClass,256>
	push	OFFSET ??__Finstancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@YAXXZ ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::`dynamic atexit destructor for 'instancex''
	call	_atexit
	add	esp, 4
$LN1@getInstanc:

; 61   : 		return instancex;

	mov	eax, OFFSET ?instancex@?1??getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ@4V3@A ; `Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance'::`2'::instancex

; 62   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ ENDP ; Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.h
;	COMDAT ?Contains@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z
_TEXT	SEGMENT
_node$1 = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Contains@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z PROC ; GenericMultiListClass::Contains, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN7@Contains:

; 109  : 		TT_ASSERT(obj);

	xor	eax, eax
	jne	SHORT $LN7@Contains
	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN5@Contains
	int	3
$LN5@Contains:

; 110  : 		for (MultiListNodeClass* node = obj->Get_List_Node(); node; node = node->NextList)

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ; MultiListObjectClass::Get_List_Node
	mov	DWORD PTR _node$1[ebp], eax
	jmp	SHORT $LN4@Contains
$LN3@Contains:
	mov	eax, DWORD PTR _node$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _node$1[ebp], ecx
$LN4@Contains:
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN2@Contains

; 111  : 		{
; 112  : 			if (node->List == this)

	mov	eax, DWORD PTR _node$1[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@Contains

; 113  : 			{
; 114  : 				return true;

	mov	al, 1
	jmp	SHORT $LN9@Contains
$LN1@Contains:

; 115  : 			};
; 116  : 		};

	jmp	SHORT $LN3@Contains
$LN2@Contains:

; 117  : 		return false;

	xor	al, al
$LN9@Contains:

; 118  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Contains@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z ENDP ; GenericMultiListClass::Contains
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.h
;	COMDAT ?Is_Empty@GenericMultiListClass@@QBE_NXZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?Is_Empty@GenericMultiListClass@@QBE_NXZ PROC		; GenericMultiListClass::Is_Empty, COMDAT
; _this$ = ecx

; 103  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 		return (Head.Next == &Head); 

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN3@Is_Empty
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Is_Empty
$LN3@Is_Empty:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Is_Empty:
	mov	al, BYTE PTR tv68[ebp]

; 105  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Is_Empty@GenericMultiListClass@@QBE_NXZ ENDP		; GenericMultiListClass::Is_Empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.h
;	COMDAT ?Is_In_List@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Is_In_List@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z PROC ; GenericMultiListClass::Is_In_List, COMDAT
; _this$ = ecx

; 98   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 		return Contains(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Contains@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z ; GenericMultiListClass::Contains

; 100  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_In_List@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z ENDP ; GenericMultiListClass::Is_In_List
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.cpp
;	COMDAT ?Internal_Remove_List_Head@GenericMultiListClass@@IAEPAVMultiListObjectClass@@XZ
_TEXT	SEGMENT
_obj$ = -8						; size = 4
_this$ = -4						; size = 4
?Internal_Remove_List_Head@GenericMultiListClass@@IAEPAVMultiListObjectClass@@XZ PROC ; GenericMultiListClass::Internal_Remove_List_Head, COMDAT
; _this$ = ecx

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 150  : 	if (Is_Empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_Empty@GenericMultiListClass@@QBE_NXZ ; GenericMultiListClass::Is_Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Internal_R

; 151  : 	{
; 152  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@Internal_R
$LN1@Internal_R:

; 153  : 	}
; 154  : 	MultiListObjectClass* obj = Head.Next->Object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _obj$[ebp], edx

; 155  : 	Internal_Remove(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Internal_Remove@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@@Z ; GenericMultiListClass::Internal_Remove

; 156  : 	return obj;

	mov	eax, DWORD PTR _obj$[ebp]
$LN2@Internal_R:

; 157  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Internal_Remove_List_Head@GenericMultiListClass@@IAEPAVMultiListObjectClass@@XZ ENDP ; GenericMultiListClass::Internal_Remove_List_Head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.cpp
;	COMDAT ?Internal_Remove@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_prevnode$ = -12					; size = 4
_node$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?Internal_Remove@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@@Z PROC ; GenericMultiListClass::Internal_Remove, COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN12@Internal_R:

; 112  : 	TT_ASSERT(obj);

	xor	eax, eax
	jne	SHORT $LN12@Internal_R
	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN10@Internal_R
	int	3
$LN10@Internal_R:

; 113  : 	
; 114  : 	MultiListNodeClass* node = obj->Get_List_Node();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ; MultiListObjectClass::Get_List_Node
	mov	DWORD PTR _node$[ebp], eax

; 115  : 	MultiListNodeClass* prevnode = NULL;

	mov	DWORD PTR _prevnode$[ebp], 0
$LN9@Internal_R:

; 116  : 
; 117  : 	while (node && node->List != this)

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN8@Internal_R
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN8@Internal_R

; 118  : 	{
; 119  : 		prevnode = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _prevnode$[ebp], eax

; 120  : 		node = node->NextList;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _node$[ebp], ecx

; 121  : 	}

	jmp	SHORT $LN9@Internal_R
$LN8@Internal_R:

; 122  : 
; 123  : 	if (!node)

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN7@Internal_R

; 124  : 	{
; 125  : 		return false;

	xor	al, al
	jmp	SHORT $LN14@Internal_R
$LN7@Internal_R:

; 126  : 	}
; 127  : 
; 128  : 	node->Prev->Next = node->Next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 129  : 	node->Next->Prev = node->Prev;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 130  : 
; 131  : 	if (prevnode) 

	cmp	DWORD PTR _prevnode$[ebp], 0
	je	SHORT $LN3@Internal_R

; 132  : 	{
; 133  : 		prevnode->NextList = node->NextList;

	mov	eax, DWORD PTR _prevnode$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 134  : 	}
; 135  : 	else

	jmp	SHORT $LN5@Internal_R
$LN3@Internal_R:

; 136  : 	{
; 137  : 		TT_ASSERT(obj->Get_List_Node() == node);

	xor	eax, eax
	jne	SHORT $LN3@Internal_R
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ; MultiListObjectClass::Get_List_Node
	cmp	eax, DWORD PTR _node$[ebp]
	je	SHORT $LN1@Internal_R
	int	3
$LN1@Internal_R:

; 138  : 		obj->Set_List_Node(node->NextList);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Set_List_Node@MultiListObjectClass@@QAEXPAVMultiListNodeClass@@@Z ; MultiListObjectClass::Set_List_Node
$LN5@Internal_R:

; 139  : 	}
; 140  : 
; 141  : PUSH_MEMORY_MACROS;
; 142  : #undef delete
; 143  : 	delete node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAXPAX@Z ; AutoPoolClass<MultiListNodeClass,256>::operator delete
	add	esp, 4

; 144  : POP_MEMORY_MACROS;
; 145  : 	return true;

	mov	al, 1
$LN14@Internal_R:

; 146  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Internal_Remove@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@@Z ENDP ; GenericMultiListClass::Internal_Remove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.cpp
;	COMDAT ?Internal_Add_After@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@PBV2@_N@Z
_TEXT	SEGMENT
tv90 = -84						; size = 4
$T1 = -80						; size = 4
_node$ = -12						; size = 4
_existing_node$ = -8					; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_existing_list_member$ = 12				; size = 4
_onlyonce$ = 16						; size = 1
?Internal_Add_After@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@PBV2@_N@Z PROC ; GenericMultiListClass::Internal_Add_After, COMDAT
; _this$ = ecx

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN11@Internal_A:

; 73   : 	TT_ASSERT(obj);

	xor	eax, eax
	jne	SHORT $LN11@Internal_A
	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN7@Internal_A
	int	3
$LN7@Internal_A:

; 74   : 	TT_ASSERT(existing_list_member);

	xor	eax, eax
	jne	SHORT $LN7@Internal_A
	cmp	DWORD PTR _existing_list_member$[ebp], 0
	jne	SHORT $LN5@Internal_A
	int	3
$LN5@Internal_A:

; 75   : 
; 76   : 	if (onlyonce && Is_In_List(obj))

	movzx	eax, BYTE PTR _onlyonce$[ebp]
	test	eax, eax
	je	SHORT $LN4@Internal_A
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_In_List@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z ; GenericMultiListClass::Is_In_List
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Internal_A

; 77   : 	{
; 78   : 		return false;

	xor	al, al
	jmp	$LN13@Internal_A
$LN4@Internal_A:

; 79   : 	}
; 80   : 
; 81   : 	MultiListNodeClass * existing_node = existing_list_member->Get_List_Node();

	mov	ecx, DWORD PTR _existing_list_member$[ebp]
	call	?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ; MultiListObjectClass::Get_List_Node
	mov	DWORD PTR _existing_node$[ebp], eax
$LN3@Internal_A:

; 82   : 	while (existing_node && existing_node->List != this)

	cmp	DWORD PTR _existing_node$[ebp], 0
	je	SHORT $LN2@Internal_A
	mov	eax, DWORD PTR _existing_node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Internal_A

; 83   : 	{
; 84   : 		existing_node = existing_node->NextList;

	mov	eax, DWORD PTR _existing_node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _existing_node$[ebp], ecx

; 85   : 	}

	jmp	SHORT $LN3@Internal_A
$LN2@Internal_A:

; 86   : 	
; 87   : 	if (existing_node == NULL)

	cmp	DWORD PTR _existing_node$[ebp], 0
	jne	SHORT $LN1@Internal_A

; 88   : 	{
; 89   : 		return false;

	xor	al, al
	jmp	$LN13@Internal_A
$LN1@Internal_A:

; 90   : 	}
; 91   : 
; 92   : PUSH_MEMORY_MACROS;
; 93   : #undef new
; 94   : 	MultiListNodeClass * node = new MultiListNodeClass;

	push	0
	push	0
	push	0
	push	20					; 00000014H
	call	??2?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<MultiListNodeClass,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN15@Internal_A
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0MultiListNodeClass@@QAE@XZ		; MultiListNodeClass::MultiListNodeClass
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN16@Internal_A
$LN15@Internal_A:
	mov	DWORD PTR tv90[ebp], 0
$LN16@Internal_A:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 95   : POP_MEMORY_MACROS;
; 96   : 	node->Object = obj;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 97   : 	
; 98   : 	node->NextList = obj->Get_List_Node();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ; MultiListObjectClass::Get_List_Node
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 99   : 	obj->Set_List_Node(node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Set_List_Node@MultiListObjectClass@@QAEXPAVMultiListNodeClass@@@Z ; MultiListObjectClass::Set_List_Node

; 100  : 
; 101  : 	node->Prev = existing_node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _existing_node$[ebp]
	mov	DWORD PTR [eax], ecx

; 102  : 	node->Next = existing_node->Next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _existing_node$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 103  : 	node->Next->Prev = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx

; 104  : 	node->Prev->Next = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 105  : 	node->List = this;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 106  : 
; 107  : 	return true;

	mov	al, 1
$LN13@Internal_A:

; 108  : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Internal_Add_After@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@PBV2@_N@Z ENDP ; GenericMultiListClass::Internal_Add_After
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.cpp
;	COMDAT ?Internal_Add_Tail@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@_N@Z
_TEXT	SEGMENT
tv81 = -80						; size = 4
$T1 = -76						; size = 4
_node$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_onlyonce$ = 12						; size = 1
?Internal_Add_Tail@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@_N@Z PROC ; GenericMultiListClass::Internal_Add_Tail, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Internal_A:

; 45   : 	TT_ASSERT(obj);

	xor	eax, eax
	jne	SHORT $LN4@Internal_A
	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN2@Internal_A
	int	3
$LN2@Internal_A:

; 46   : 
; 47   : 	if (onlyonce && Is_In_List(obj))

	movzx	eax, BYTE PTR _onlyonce$[ebp]
	test	eax, eax
	je	SHORT $LN1@Internal_A
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_In_List@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z ; GenericMultiListClass::Is_In_List
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Internal_A

; 48   : 	{
; 49   : 		return false;

	xor	al, al
	jmp	$LN6@Internal_A
$LN1@Internal_A:

; 50   : 	}
; 51   : 
; 52   : PUSH_MEMORY_MACROS;
; 53   : #undef new
; 54   : 	MultiListNodeClass *node = new MultiListNodeClass;

	push	0
	push	0
	push	0
	push	20					; 00000014H
	call	??2?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<MultiListNodeClass,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN8@Internal_A
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0MultiListNodeClass@@QAE@XZ		; MultiListNodeClass::MultiListNodeClass
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN9@Internal_A
$LN8@Internal_A:
	mov	DWORD PTR tv81[ebp], 0
$LN9@Internal_A:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 55   : POP_MEMORY_MACROS;
; 56   : 	node->Object = obj;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 57   : 
; 58   : 	node->NextList = obj->Get_List_Node();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ; MultiListObjectClass::Get_List_Node
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 59   : 	obj->Set_List_Node(node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Set_List_Node@MultiListObjectClass@@QAEXPAVMultiListNodeClass@@@Z ; MultiListObjectClass::Set_List_Node

; 60   : 
; 61   : 	node->Prev = Head.Prev;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 62   : 	node->Next = &(Head);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 63   : 	node->Next->Prev = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx

; 64   : 	node->Prev->Next = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 65   : 
; 66   : 	node->List = this;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 67   : 
; 68   : 	return true;

	mov	al, 1
$LN6@Internal_A:

; 69   : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Internal_Add_Tail@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@_N@Z ENDP ; GenericMultiListClass::Internal_Add_Tail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.cpp
;	COMDAT ?Internal_Add@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@_N@Z
_TEXT	SEGMENT
tv81 = -80						; size = 4
$T1 = -76						; size = 4
_node$ = -8						; size = 4
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_onlyonce$ = 12						; size = 1
?Internal_Add@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@_N@Z PROC ; GenericMultiListClass::Internal_Add, COMDAT
; _this$ = ecx

; 16   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Internal_A:

; 17   : 	TT_ASSERT(obj);

	xor	eax, eax
	jne	SHORT $LN4@Internal_A
	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN2@Internal_A
	int	3
$LN2@Internal_A:

; 18   : 
; 19   : 	if (onlyonce && Is_In_List(obj))

	movzx	eax, BYTE PTR _onlyonce$[ebp]
	test	eax, eax
	je	SHORT $LN1@Internal_A
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_In_List@GenericMultiListClass@@QBE_NPAVMultiListObjectClass@@@Z ; GenericMultiListClass::Is_In_List
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Internal_A

; 20   : 	{
; 21   : 		return false;

	xor	al, al
	jmp	$LN6@Internal_A
$LN1@Internal_A:

; 22   : 	}
; 23   : 
; 24   : PUSH_MEMORY_MACROS;
; 25   : #undef new
; 26   : 	MultiListNodeClass *node = new MultiListNodeClass;

	push	0
	push	0
	push	0
	push	20					; 00000014H
	call	??2?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAPAXIPBDI0@Z ; AutoPoolClass<MultiListNodeClass,256>::operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN8@Internal_A
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0MultiListNodeClass@@QAE@XZ		; MultiListNodeClass::MultiListNodeClass
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN9@Internal_A
$LN8@Internal_A:
	mov	DWORD PTR tv81[ebp], 0
$LN9@Internal_A:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 27   : POP_MEMORY_MACROS;
; 28   : 	node->Object = obj;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 29   : 
; 30   : 	node->NextList = obj->Get_List_Node();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ; MultiListObjectClass::Get_List_Node
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 31   : 	obj->Set_List_Node(node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?Set_List_Node@MultiListObjectClass@@QAEXPAVMultiListNodeClass@@@Z ; MultiListObjectClass::Set_List_Node

; 32   : 
; 33   : 	node->Prev = &(Head);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], eax

; 34   : 	node->Next = Head.Next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx

; 35   : 	node->Next->Prev = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx

; 36   : 	node->Prev->Next = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 37   : 
; 38   : 	node->List = this;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 39   : 
; 40   : 	return true;

	mov	al, 1
$LN6@Internal_A:

; 41   : };

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Internal_Add@GenericMultiListClass@@IAE_NPAVMultiListObjectClass@@_N@Z ENDP ; GenericMultiListClass::Internal_Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.h
;	COMDAT ?Set_List_Node@MultiListObjectClass@@QAEXPAVMultiListNodeClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_node$ = 8						; size = 4
?Set_List_Node@MultiListObjectClass@@QAEXPAVMultiListNodeClass@@@Z PROC ; MultiListObjectClass::Set_List_Node, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 		ListNode = node;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 55   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set_List_Node@MultiListObjectClass@@QAEXPAVMultiListNodeClass@@@Z ENDP ; MultiListObjectClass::Set_List_Node
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.h
;	COMDAT ?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ PROC ; MultiListObjectClass::Get_List_Node, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		return ListNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 50   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_List_Node@MultiListObjectClass@@QBEPAVMultiListNodeClass@@XZ ENDP ; MultiListObjectClass::Get_List_Node
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\multilist.h
;	COMDAT ??0MultiListNodeClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MultiListNodeClass@@QAE@XZ PROC			; MultiListNodeClass::MultiListNodeClass, COMDAT
; _this$ = ecx

; 24   : 	MultiListNodeClass() 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 25   : 	{ 
; 26   : 		Prev = Next = NextList = 0; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 27   : 		Object = 0; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 28   : 		List = 0; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 29   : 	};

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0MultiListNodeClass@@QAE@XZ ENDP			; MultiListNodeClass::MultiListNodeClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??3?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAXPAX@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
??3?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAXPAX@Z PROC ; AutoPoolClass<MultiListNodeClass,256>::operator delete, COMDAT

; 1485 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1486 : 		if (object)

	cmp	DWORD PTR _object$[ebp], 0
	je	SHORT $LN2@operator

; 1487 : 			objectPoolClass(T, nAlign).Free_Object_Memory(*(T*)object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance
	mov	ecx, eax
	call	?Free_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEXAAVMultiListNodeClass@@@Z ; ObjectPoolClass<MultiListNodeClass,256>::Free_Object_Memory
$LN2@operator:

; 1488 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAXPAX@Z ENDP ; AutoPoolClass<MultiListNodeClass,256>::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\engine_vector.h
;	COMDAT ??2?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAPAXIPBDI0@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_file$ = 12						; size = 4
_line$ = 16						; size = 4
_function$ = 20						; size = 4
??2?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAPAXIPBDI0@Z PROC ; AutoPoolClass<MultiListNodeClass,256>::operator new, COMDAT

; 1479 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN3@operator:

; 1480 : 		TT_ASSERT(size == sizeof(T));

	xor	eax, eax
	jne	SHORT $LN3@operator
	cmp	DWORD PTR _size$[ebp], 20		; 00000014H
	je	SHORT $LN1@operator
	int	3
$LN1@operator:

; 1481 : 		return (void*)objectPoolClass(T, nAlign).Allocate_Object_Memory();

	call	?getInstance@?$Singleton@V?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@@@SAAAV?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@XZ ; Singleton<ObjectPoolClass<MultiListNodeClass,256> >::getInstance
	mov	ecx, eax
	call	?Allocate_Object_Memory@?$ObjectPoolClass@VMultiListNodeClass@@$0BAA@@@QAEPAVMultiListNodeClass@@XZ ; ObjectPoolClass<MultiListNodeClass,256>::Allocate_Object_Memory

; 1482 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2?$AutoPoolClass@VMultiListNodeClass@@$0BAA@@@SAPAXIPBDI0@Z ENDP ; AutoPoolClass<MultiListNodeClass,256>::operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FastCriticalSectionClass@@QAE@XZ PROC		; FastCriticalSectionClass::FastCriticalSectionClass, COMDAT
; _this$ = ecx

; 110  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 111  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0FastCriticalSectionClass@@QAE@XZ ENDP		; FastCriticalSectionClass::FastCriticalSectionClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??1LockClass@FastCriticalSectionClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LockClass@FastCriticalSectionClass@@QAE@XZ PROC	; FastCriticalSectionClass::LockClass::~LockClass, COMDAT
; _this$ = ecx

; 102  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 			criticalSection.Leave();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Leave

; 104  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1LockClass@FastCriticalSectionClass@@QAE@XZ ENDP	; FastCriticalSectionClass::LockClass::~LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__criticalSection$ = 8					; size = 4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z PROC	; FastCriticalSectionClass::LockClass::LockClass, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __criticalSection$[ebp]
	mov	DWORD PTR [eax], ecx

; 98   : 			criticalSection.Enter();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Enter@FastCriticalSectionClass@@AAEXXZ	; FastCriticalSectionClass::Enter

; 99   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0LockClass@FastCriticalSectionClass@@QAE@AAV1@@Z ENDP	; FastCriticalSectionClass::LockClass::LockClass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Leave@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Leave, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		Flag = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Leave
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File x:\github\renegade\dragonade_rxd\scripts\criticalsectionclass.h
;	COMDAT ?Enter@FastCriticalSectionClass@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@FastCriticalSectionClass@@AAEXXZ PROC		; FastCriticalSectionClass::Enter, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Enter:

; 66   : 		TT_ASSERT((size_t)&Flag % 4 == 0); // aligned to 4 bytes please

	xor	eax, eax
	jne	SHORT $LN6@Enter
	mov	eax, DWORD PTR _this$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	je	SHORT $LN3@Enter
	int	3
$LN3@Enter:

; 67   : 		for (;;)
; 68   : 		{
; 69   : 			if (_interlockedbittestandset(&Flag, 0) == 0) return;

	mov	eax, DWORD PTR _this$[ebp]
	lock	 bts	 DWORD PTR [eax], 0
	setb	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN1@Enter
	jmp	SHORT $LN8@Enter
$LN1@Enter:

; 70   : 			_mm_pause();

	pause

; 71   : 		};

	jmp	SHORT $LN3@Enter
$LN8@Enter:

; 72   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@FastCriticalSectionClass@@AAEXXZ ENDP		; FastCriticalSectionClass::Enter
_TEXT	ENDS
END
